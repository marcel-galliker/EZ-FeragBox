#include "terminal.h"
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include "utils.h"

static char _Input[128];
static int	_InputLen=0;

//--- terminal_init --------------------------------
void terminal_init(void)
{
	memset(_Input, 0, sizeof(_Input));
    printf(">> ");
}
//--- terminal_addChar -------------------------
void terminal_addChar(char ch)
{
	if (_InputLen<sizeof(_Input)) _Input[_InputLen++] = ch;
	else _InputLen=0;
	putchar(ch);
}

//--- terminal_process_input -------------------------------
void terminal_process_input(void)
{
    if (_InputLen>1 && (_Input[_InputLen-1]=='\r' || _Input[_InputLen-1]=='\n'))
    {
    	printf(">>%s<<", _Input);
    	if (strstart(_Input, "status"))
    	{
    		statusCommand();
    	}
    	memset(_Input, 0, sizeof(_Input));
    	_InputLen=0;
    }

    fflush(stdout);
}


//--- statusCommand ----------------------------------------
void statusCommand(const char* args) {
	printf("NUC Power:           %s\n", boxStatus.nucPower ? "ON" : "OFF");
	printf("Display Power:       %s\n", boxStatus.displayPower ? "ON" : "OFF");
	printf("Print Go Status:     %s\n", boxStatus.printGoStatus ? "ON" : "OFF");
	printf("Print Done Status:   %s\n", boxStatus.printDoneStatus ? "ON" : "OFF");

	// Printing dipSwitchStatus bit by bit
	printf("DIP Switch Status: MSB --> ");
	for (int i = 5; i >= 0; i--) {
		printf("%d", (boxStatus.dipSwitchStatus >> i) & 1);

		if(i == 4)
			printf(" ");
	}
	printf(" <-- LSB \n");

	// Encoder generator Settings
	printf("Encoder Direction:    %s\n", boxStatus.encoderDirection ? "reverse" : "forward");
	printf("Encoder Speed:        %d Hz\n", (uint32_t)boxStatus.encoderSpeed);

	// Encoder input status
	printf("Encoder Position:     %u\n", (unsigned int)boxStatus.encoderPosition);

	// Print Temperature
	printf("Board Temperature:    %.2f Â°C\n", boxStatus.boardTemperature);

	// Printing voltages
	printf("3.3V Voltage:         %.2fV (3.3V)\n", boxStatus.voltages.voltage3V3);
	printf("5V Voltage:           %.2fV (5V)\n", boxStatus.voltages.voltage5V);
	printf("12V Voltage:          %.2fV (12V)\n", boxStatus.voltages.voltage12V);
	printf("12V NUC Voltage:      %.2fV (12V)\n", boxStatus.voltages.voltage12VNuc);
	printf("12V Display Voltage:  %.2fV (12V)\n", boxStatus.voltages.voltage12VDisplay);
	printf("24V Voltage:          %.2fV (24V)\n", boxStatus.voltages.voltage24V);
	printf("PCB Revision Voltage: %.2fV\n", boxStatus.voltages.voltagePcbRevision);

	// PCB Revision
	if (boxStatus.pcbRevision == 0) {
		printf("PCB Revision: Invalid\n");
	} else {
		char pcbRev = 'A' + (boxStatus.pcbRevision * 10 - 1) / 10; // 0.1V increments starting at 'A'
		printf("PCB Revision: %c\n", pcbRev);
	}
}
