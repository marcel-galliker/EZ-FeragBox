/*
 * ring_buffer.c
 *
 *  Created on: Mar 25, 2024
 *      Author: WPATR
 */

#include "stm32f3xx_hal.h"
#include "ring_buffer.h"

void RingBuffer_Init(RingBuffer *rb) {
    rb->head = 0;
    rb->tail = 0;
}

bool RingBuffer_IsFull(const RingBuffer *rb) {
    return ((rb->head + 1) % RING_BUFFER_SIZE) == rb->tail;
}

bool RingBuffer_IsEmpty(const RingBuffer *rb) {
    return rb->head == rb->tail;
}

bool RingBuffer_PutChar(RingBuffer *rb, uint8_t c) {
	__disable_irq(); // Disable interrupts

    size_t next = (rb->head + 1) % RING_BUFFER_SIZE;
    if (next == rb->tail) { // Buffer is full
        return false;
    }

    rb->buffer[rb->head] = c;
    rb->head = next;

	__enable_irq(); // Re-enable interrupts

    return true;
}

bool RingBuffer_GetChar(RingBuffer *rb, uint8_t *c) {
    if (rb->tail == rb->head) { // Buffer is empty
        return false;
    }

    *c = rb->buffer[rb->tail];
    rb->tail = (rb->tail + 1) % RING_BUFFER_SIZE;
    return true;
}
