
EZ-FeragBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013488  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  08013618  08013618  00014618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013d68  08013d68  0001535c  2**0
                  CONTENTS
  4 .ARM          00000008  08013d68  08013d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d70  08013d70  0001535c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013d70  08013d70  00014d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013d74  08013d74  00014d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  08013d78  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f04  2000035c  080140d4  0001535c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002260  080140d4  00016260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001535c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e20a  00000000  00000000  0001538c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ac6  00000000  00000000  00033596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  00038060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000133f  00000000  00000000  00039960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e53  00000000  00000000  0003ac9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022402  00000000  00000000  0005baf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aed11  00000000  00000000  0007def4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cc05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f70  00000000  00000000  0012cc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00134bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000035c 	.word	0x2000035c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013600 	.word	0x08013600

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000360 	.word	0x20000360
 80001cc:	08013600 	.word	0x08013600

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <AD55936_init>:
#define _ADAC_ADC_READ        0b01000000
#define _ADAC_DAC_READ        0b01010000
#define _ADAC_GPIO_READ       0b01100000
#define _ADAC_REG_READ        0b01110000

HAL_StatusTypeDef AD55936_init(I2C_HandleTypeDef *hi2c, uint16_t DevAddress) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	uint8_t data[3];

	data[0] = _ADAC_GP_CONTROL;
 8000d00:	2303      	movs	r3, #3
 8000d02:	733b      	strb	r3, [r7, #12]
	data[1] = 0x01;
 8000d04:	2301      	movs	r3, #1
 8000d06:	737b      	strb	r3, [r7, #13]
	data[2] = 0x00;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, 3, HAL_MAX_DELAY);
 8000d0c:	f107 020c 	add.w	r2, r7, #12
 8000d10:	8879      	ldrh	r1, [r7, #2]
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2303      	movs	r3, #3
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f002 fc30 	bl	8003580 <HAL_I2C_Master_Transmit>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <AD55936_init+0x3a>
		return status;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	e029      	b.n	8000d82 <AD55936_init+0x8e>

	data[0] = _ADAC_POWER_REF_CTRL;
 8000d2e:	230b      	movs	r3, #11
 8000d30:	733b      	strb	r3, [r7, #12]
	data[1] = 0x02;
 8000d32:	2302      	movs	r3, #2
 8000d34:	737b      	strb	r3, [r7, #13]
	data[2] = 0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, 3, HAL_MAX_DELAY);
 8000d3a:	f107 020c 	add.w	r2, r7, #12
 8000d3e:	8879      	ldrh	r1, [r7, #2]
 8000d40:	f04f 33ff 	mov.w	r3, #4294967295
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2303      	movs	r3, #3
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f002 fc19 	bl	8003580 <HAL_I2C_Master_Transmit>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <AD55936_init+0x68>
		return status;
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	e012      	b.n	8000d82 <AD55936_init+0x8e>

	data[0] = _ADAC_ADC_CONFIG;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	733b      	strb	r3, [r7, #12]
	data[1] = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	737b      	strb	r3, [r7, #13]
	data[2] = 0xFF;
 8000d64:	23ff      	movs	r3, #255	@ 0xff
 8000d66:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, 3, HAL_MAX_DELAY);
 8000d68:	f107 020c 	add.w	r2, r7, #12
 8000d6c:	8879      	ldrh	r1, [r7, #2]
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2303      	movs	r3, #3
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f002 fc02 	bl	8003580 <HAL_I2C_Master_Transmit>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	73fb      	strb	r3, [r7, #15]

	return status;
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <AD5593R_ReadADC>:

HAL_StatusTypeDef AD5593R_ReadADC(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t channel, uint16_t *adcValue) {
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b08a      	sub	sp, #40	@ 0x28
 8000d8e:	af02      	add	r7, sp, #8
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	817b      	strh	r3, [r7, #10]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	727b      	strb	r3, [r7, #9]
    uint16_t channelBit = 1 << channel;
 8000d9c:	7a7b      	ldrb	r3, [r7, #9]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	83fb      	strh	r3, [r7, #30]

	if (channel > 8) {
 8000da6:	7a7b      	ldrb	r3, [r7, #9]
 8000da8:	2b08      	cmp	r3, #8
 8000daa:	d901      	bls.n	8000db0 <AD5593R_ReadADC+0x26>
        // Invalid channel, return error (0-7 = ADC Inputs, 8 = Internal Temperature Sensor)
        return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e04a      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    HAL_StatusTypeDef status;
    uint8_t command[3];
    uint8_t data[2];

    // Configure the ADC channel
    command[0] = _ADAC_ADC_SEQUENCE;
 8000db0:	2302      	movs	r3, #2
 8000db2:	763b      	strb	r3, [r7, #24]

    // Select Channel
    command[1] = (uint8_t)(channelBit >> 8);
 8000db4:	8bfb      	ldrh	r3, [r7, #30]
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	767b      	strb	r3, [r7, #25]
    command[2] = (uint8_t)(channelBit & 0xFF);
 8000dbe:	8bfb      	ldrh	r3, [r7, #30]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	76bb      	strb	r3, [r7, #26]

    status = HAL_I2C_Master_Transmit(hi2c, DevAddress, command, sizeof(command), HAL_MAX_DELAY);
 8000dc4:	f107 0218 	add.w	r2, r7, #24
 8000dc8:	8979      	ldrh	r1, [r7, #10]
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	68f8      	ldr	r0, [r7, #12]
 8000dd4:	f002 fbd4 	bl	8003580 <HAL_I2C_Master_Transmit>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	777b      	strb	r3, [r7, #29]

    if (status != HAL_OK) {
 8000ddc:	7f7b      	ldrb	r3, [r7, #29]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <AD5593R_ReadADC+0x5c>
        // Handle error here
        return status;
 8000de2:	7f7b      	ldrb	r3, [r7, #29]
 8000de4:	e02f      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    }

	// Initiate an ADC read
	command[0] = _ADAC_ADC_READ;
 8000de6:	2340      	movs	r3, #64	@ 0x40
 8000de8:	763b      	strb	r3, [r7, #24]

    // Begin transmission to set the ADC read pointer
    status = HAL_I2C_Master_Transmit(hi2c, DevAddress, command, 1, HAL_MAX_DELAY);
 8000dea:	f107 0218 	add.w	r2, r7, #24
 8000dee:	8979      	ldrh	r1, [r7, #10]
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2301      	movs	r3, #1
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f002 fbc1 	bl	8003580 <HAL_I2C_Master_Transmit>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	777b      	strb	r3, [r7, #29]

    if (status != HAL_OK) {
 8000e02:	7f7b      	ldrb	r3, [r7, #29]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <AD5593R_ReadADC+0x82>
        // Handle error here
        return status;
 8000e08:	7f7b      	ldrb	r3, [r7, #29]
 8000e0a:	e01c      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    }

    // Read the ADC value (2 bytes)
    status = HAL_I2C_Master_Receive(hi2c, DevAddress, data, 2, HAL_MAX_DELAY);
 8000e0c:	f107 0214 	add.w	r2, r7, #20
 8000e10:	8979      	ldrh	r1, [r7, #10]
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2302      	movs	r3, #2
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f002 fca4 	bl	8003768 <HAL_I2C_Master_Receive>
 8000e20:	4603      	mov	r3, r0
 8000e22:	777b      	strb	r3, [r7, #29]

    if (status != HAL_OK) {
 8000e24:	7f7b      	ldrb	r3, [r7, #29]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <AD5593R_ReadADC+0xa4>
        // Handle error here
        return status;
 8000e2a:	7f7b      	ldrb	r3, [r7, #29]
 8000e2c:	e00b      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    }

    // Convert the two received bytes into a single 16-bit value
    *adcValue = (uint16_t)((data[0] & 0x0F) << 8) + data[1];
 8000e2e:	7d3b      	ldrb	r3, [r7, #20]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	7d7a      	ldrb	r2, [r7, #21]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	801a      	strh	r2, [r3, #0]

    return status;
 8000e44:	7f7b      	ldrb	r3, [r7, #29]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <box_init>:
static void _check_printer_ready(void);
static void _send_print_done(void);

//--- box_init -------------------------------
void box_init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	memset(&_Status, 0, sizeof(_Status));
 8000e54:	2250      	movs	r2, #80	@ 0x50
 8000e56:	2100      	movs	r1, #0
 8000e58:	480e      	ldr	r0, [pc, #56]	@ (8000e94 <box_init+0x44>)
 8000e5a:	f00e fd25 	bl	800f8a8 <memset>
	_FeragMsgIn      = 0;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <box_init+0x48>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
	_FeragMsgOut     = 0;
 8000e64:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <box_init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
	_TrackInIdx  	 = 0;
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <box_init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
	_TrackOutIdx 	 = 0;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <box_init+0x54>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
	_PrintDoneDelay  = 0;
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <box_init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
	_PrinterReadyIn  = -1;
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <box_init+0x5c>)
 8000e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e82:	601a      	str	r2, [r3, #0]
	box_start();
 8000e84:	f000 f82a 	bl	8000edc <box_start>
	printf("LOG: box_init\n");
 8000e88:	4809      	ldr	r0, [pc, #36]	@ (8000eb0 <box_init+0x60>)
 8000e8a:	f00e fbe1 	bl	800f650 <puts>
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000037c 	.word	0x2000037c
 8000e98:	200003d8 	.word	0x200003d8
 8000e9c:	200003dc 	.word	0x200003dc
 8000ea0:	20000410 	.word	0x20000410
 8000ea4:	20000414 	.word	0x20000414
 8000ea8:	20000420 	.word	0x20000420
 8000eac:	20000004 	.word	0x20000004
 8000eb0:	08013618 	.word	0x08013618

08000eb4 <box_set_pgDelay>:

//--- box_set_pgDelay ------------------------------------
void box_set_pgDelay(int delay)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	_PrintGoDelay = delay;
 8000ebc:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <box_set_pgDelay+0x20>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
	printf("set pgDelay=%d\n", delay);
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	4804      	ldr	r0, [pc, #16]	@ (8000ed8 <box_set_pgDelay+0x24>)
 8000ec6:	f00e fb5b 	bl	800f580 <iprintf>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	08013628 	.word	0x08013628

08000edc <box_start>:

//--- box_start -------------------------
void box_start(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	printf("start\n");
 8000ee0:	481a      	ldr	r0, [pc, #104]	@ (8000f4c <box_start+0x70>)
 8000ee2:	f00e fbb5 	bl	800f650 <puts>
	_FeragMsgIn   = 0;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <box_start+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
	_FeragMsgOut  = 0;
 8000eec:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <box_start+0x78>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
	_TrackInIdx  	  = 0;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <box_start+0x7c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
	_TrackOutIdx 	  = 0;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <box_start+0x80>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
	_Status.dtCnt = 0;
 8000efe:	4b18      	ldr	r3, [pc, #96]	@ (8000f60 <box_start+0x84>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	645a      	str	r2, [r3, #68]	@ 0x44
	_Status.pgCnt = 0;
 8000f04:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <box_start+0x84>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	649a      	str	r2, [r3, #72]	@ 0x48
	_Status.pdCnt = 0;
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <box_start+0x84>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	64da      	str	r2, [r3, #76]	@ 0x4c
	_EncoderPos   = 0;
 8000f10:	4b14      	ldr	r3, [pc, #80]	@ (8000f64 <box_start+0x88>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
	_PrintDoneDelay = 0;
 8000f16:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <box_start+0x8c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
	_PrinterReadyIn  = -1;
 8000f1c:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <box_start+0x90>)
 8000f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f22:	601a      	str	r2, [r3, #0]
	_PaceId		  = -1;
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <box_start+0x94>)
 8000f26:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2a:	601a      	str	r2, [r3, #0]
	box_send_status();
 8000f2c:	f000 fb16 	bl	800155c <box_send_status>
	_Running = TRUE;
 8000f30:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <box_start+0x98>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f3c:	480e      	ldr	r0, [pc, #56]	@ (8000f78 <box_start+0x9c>)
 8000f3e:	f002 fa77 	bl	8003430 <HAL_GPIO_WritePin>
	enc_start();
 8000f42:	f000 fd51 	bl	80019e8 <enc_start>
		enc_set_speed(100);
		//--- PaceId 10 ----
		box_handle_ferag_char(0x11);
		box_handle_ferag_char(0x8a);
	}
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	08013638 	.word	0x08013638
 8000f50:	200003d8 	.word	0x200003d8
 8000f54:	200003dc 	.word	0x200003dc
 8000f58:	20000410 	.word	0x20000410
 8000f5c:	20000414 	.word	0x20000414
 8000f60:	2000037c 	.word	0x2000037c
 8000f64:	2000041c 	.word	0x2000041c
 8000f68:	20000420 	.word	0x20000420
 8000f6c:	20000004 	.word	0x20000004
 8000f70:	20000418 	.word	0x20000418
 8000f74:	20000378 	.word	0x20000378
 8000f78:	48001000 	.word	0x48001000

08000f7c <box_stop>:

//--- box_stop ----------------------------
void box_stop(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	_Running = FALSE;
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <box_stop+0x20>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
	enc_stop();
 8000f86:	f000 fd55 	bl	8001a34 <enc_stop>
	HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f90:	4803      	ldr	r0, [pc, #12]	@ (8000fa0 <box_stop+0x24>)
 8000f92:	f002 fa4d 	bl	8003430 <HAL_GPIO_WritePin>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000378 	.word	0x20000378
 8000fa0:	48001000 	.word	0x48001000

08000fa4 <box_idle>:

//--- box_idle ----------------------------------------
void box_idle(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	_handle_feragMsg();
 8000fa8:	f000 f8ea 	bl	8001180 <_handle_feragMsg>
	_handle_encoder();
 8000fac:	f000 f984 	bl	80012b8 <_handle_encoder>
	_check_printer_ready();
 8000fb0:	f000 f9fe 	bl	80013b0 <_check_printer_ready>
//	if (!SIMULATION) _check_print_done();
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <box_tick_10ms>:

//--- box_tick_10ms ------------------
void box_tick_10ms(int ticks)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	_Ticks = ticks;
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff8 <box_tick_10ms+0x40>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
	if (_TicksPgOff && _Ticks>_TicksPgOff)
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000ffc <box_tick_10ms+0x44>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00e      	beq.n	8000fec <box_tick_10ms+0x34>
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <box_tick_10ms+0x40>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <box_tick_10ms+0x44>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	dd08      	ble.n	8000fec <box_tick_10ms+0x34>
	{
		HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fe0:	4807      	ldr	r0, [pc, #28]	@ (8001000 <box_tick_10ms+0x48>)
 8000fe2:	f002 fa25 	bl	8003430 <HAL_GPIO_WritePin>
	//	printf("PrintGo OFF %d\n",  _Ticks);
//		if (SIMULATION) _check_print_done();
		_TicksPgOff=0;
 8000fe6:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <box_tick_10ms+0x44>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
	}
	_check_system();
 8000fec:	f000 f80a 	bl	8001004 <_check_system>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200003cc 	.word	0x200003cc
 8000ffc:	200003d0 	.word	0x200003d0
 8001000:	48001000 	.word	0x48001000

08001004 <_check_system>:

//--- _check_system -----------------
static void _check_system(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	_Status.voltages.voltage24V 			= adc_get_value(0, 30.0);
 8001008:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 800100c:	2000      	movs	r0, #0
 800100e:	f001 f8fb 	bl	8002208 <adc_get_value>
 8001012:	eef0 7a40 	vmov.f32	s15, s0
 8001016:	4b3e      	ldr	r3, [pc, #248]	@ (8001110 <_check_system+0x10c>)
 8001018:	ee17 2a90 	vmov	r2, s15
 800101c:	f8c3 201b 	str.w	r2, [r3, #27]
	_Status.voltages.voltage12V 			= adc_get_value(1, 15.0);
 8001020:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001024:	2001      	movs	r0, #1
 8001026:	f001 f8ef 	bl	8002208 <adc_get_value>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
 800102e:	4b38      	ldr	r3, [pc, #224]	@ (8001110 <_check_system+0x10c>)
 8001030:	ee17 2a90 	vmov	r2, s15
 8001034:	f8c3 200f 	str.w	r2, [r3, #15]
	_Status.voltages.voltage12VNuc 			= adc_get_value(2, 15.0);
 8001038:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800103c:	2002      	movs	r0, #2
 800103e:	f001 f8e3 	bl	8002208 <adc_get_value>
 8001042:	eef0 7a40 	vmov.f32	s15, s0
 8001046:	4b32      	ldr	r3, [pc, #200]	@ (8001110 <_check_system+0x10c>)
 8001048:	ee17 2a90 	vmov	r2, s15
 800104c:	f8c3 2013 	str.w	r2, [r3, #19]
	_Status.voltages.voltage12VDisplay 		= adc_get_value(3, 15.0);
 8001050:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001054:	2003      	movs	r0, #3
 8001056:	f001 f8d7 	bl	8002208 <adc_get_value>
 800105a:	eef0 7a40 	vmov.f32	s15, s0
 800105e:	4b2c      	ldr	r3, [pc, #176]	@ (8001110 <_check_system+0x10c>)
 8001060:	ee17 2a90 	vmov	r2, s15
 8001064:	f8c3 2017 	str.w	r2, [r3, #23]
	_Status.voltages.voltage5V 				= adc_get_value(4, 6.25);
 8001068:	eeb1 0a09 	vmov.f32	s0, #25	@ 0x40c80000  6.250
 800106c:	2004      	movs	r0, #4
 800106e:	f001 f8cb 	bl	8002208 <adc_get_value>
 8001072:	eef0 7a40 	vmov.f32	s15, s0
 8001076:	4b26      	ldr	r3, [pc, #152]	@ (8001110 <_check_system+0x10c>)
 8001078:	ee17 2a90 	vmov	r2, s15
 800107c:	f8c3 200b 	str.w	r2, [r3, #11]
	_Status.voltages.voltage3V3 			= adc_get_value(5, 4.125);
 8001080:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8001114 <_check_system+0x110>
 8001084:	2005      	movs	r0, #5
 8001086:	f001 f8bf 	bl	8002208 <adc_get_value>
 800108a:	eef0 7a40 	vmov.f32	s15, s0
 800108e:	4b20      	ldr	r3, [pc, #128]	@ (8001110 <_check_system+0x10c>)
 8001090:	ee17 2a90 	vmov	r2, s15
 8001094:	f8c3 2007 	str.w	r2, [r3, #7]
	_Status.voltages.voltagePcbRevision 	= adc_get_value(6, 4.125);
 8001098:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8001114 <_check_system+0x110>
 800109c:	2006      	movs	r0, #6
 800109e:	f001 f8b3 	bl	8002208 <adc_get_value>
 80010a2:	eef0 7a40 	vmov.f32	s15, s0
 80010a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <_check_system+0x10c>)
 80010a8:	ee17 2a90 	vmov	r2, s15
 80010ac:	f8c3 201f 	str.w	r2, [r3, #31]
	_Status.pcbRevision 					= adc_get_revision(_Status.voltages.voltagePcbRevision);
 80010b0:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <_check_system+0x10c>)
 80010b2:	f8d3 301f 	ldr.w	r3, [r3, #31]
 80010b6:	ee00 3a10 	vmov	s0, r3
 80010ba:	f001 f8f5 	bl	80022a8 <adc_get_revision>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <_check_system+0x10c>)
 80010c4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	_Status.boardTemperature 				= adc_get_temp();
 80010c8:	f001 f8c4 	bl	8002254 <adc_get_temp>
 80010cc:	eef0 7a40 	vmov.f32	s15, s0
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <_check_system+0x10c>)
 80010d2:	ee17 2a90 	vmov	r2, s15
 80010d6:	f8c3 2003 	str.w	r2, [r3, #3]

	// Update DIP Switch inputs
	_Status.dipSwitch						= gpio_get_dipswitches();
 80010da:	f001 f92d 	bl	8002338 <gpio_get_dipswitches>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <_check_system+0x10c>)
 80010e4:	709a      	strb	r2, [r3, #2]

	// Update encoder generator parameters
	enc_get_status(&_Status.enc);
 80010e6:	480c      	ldr	r0, [pc, #48]	@ (8001118 <_check_system+0x114>)
 80010e8:	f000 fb1a 	bl	8001720 <enc_get_status>

	// Update Power Status
	_Status.nucPower 		= HAL_GPIO_ReadPin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin);
 80010ec:	2140      	movs	r1, #64	@ 0x40
 80010ee:	480b      	ldr	r0, [pc, #44]	@ (800111c <_check_system+0x118>)
 80010f0:	f002 f986 	bl	8003400 <HAL_GPIO_ReadPin>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <_check_system+0x10c>)
 80010fa:	701a      	strb	r2, [r3, #0]
	_Status.displayPower 	= HAL_GPIO_ReadPin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin);
 80010fc:	2180      	movs	r1, #128	@ 0x80
 80010fe:	4807      	ldr	r0, [pc, #28]	@ (800111c <_check_system+0x118>)
 8001100:	f002 f97e 	bl	8003400 <HAL_GPIO_ReadPin>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b01      	ldr	r3, [pc, #4]	@ (8001110 <_check_system+0x10c>)
 800110a:	705a      	strb	r2, [r3, #1]
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000037c 	.word	0x2000037c
 8001114:	40840000 	.word	0x40840000
 8001118:	200003a0 	.word	0x200003a0
 800111c:	48001400 	.word	0x48001400

08001120 <box_handle_ferag_char>:

//--- box_handle_ferag_char -----------------------------
void box_handle_ferag_char(char data)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	if (data & 0x80)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	da18      	bge.n	8001164 <box_handle_ferag_char+0x44>
	{
		_FeragMsg.data[1]=data;
 8001132:	4a10      	ldr	r2, [pc, #64]	@ (8001174 <box_handle_ferag_char+0x54>)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	7053      	strb	r3, [r2, #1]
		_Status.paceId = _FeragMsg.paceId;
 8001138:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <box_handle_ferag_char+0x54>)
 800113a:	785b      	ldrb	r3, [r3, #1]
 800113c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001140:	b2db      	uxtb	r3, r3
 8001142:	461a      	mov	r2, r3
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <box_handle_ferag_char+0x58>)
 8001146:	641a      	str	r2, [r3, #64]	@ 0x40
	//	printf("FERAG in 0x%02x 0x%02x, type=%d, info=%d, paceId=0x%02x\n", _FeragMsg.data[0], _FeragMsg.data[1], _FeragMsg.type, _FeragMsg.info, _FeragMsg.paceId);

		_Status.feragMsgInCnt++;
 8001148:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <box_handle_ferag_char+0x58>)
 800114a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800114c:	3301      	adds	r3, #1
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <box_handle_ferag_char+0x58>)
 8001150:	6393      	str	r3, [r2, #56]	@ 0x38
		_FeragMsgIn++;
 8001152:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <box_handle_ferag_char+0x5c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	3301      	adds	r3, #1
 8001158:	4a08      	ldr	r2, [pc, #32]	@ (800117c <box_handle_ferag_char+0x5c>)
 800115a:	6013      	str	r3, [r2, #0]
		ferag_send_char(0x80);
 800115c:	2080      	movs	r0, #128	@ 0x80
 800115e:	f001 f833 	bl	80021c8 <ferag_send_char>
	}
	else
	{
		_FeragMsg.data[0]=data;
	}
}
 8001162:	e002      	b.n	800116a <box_handle_ferag_char+0x4a>
		_FeragMsg.data[0]=data;
 8001164:	4a03      	ldr	r2, [pc, #12]	@ (8001174 <box_handle_ferag_char+0x54>)
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	7013      	strb	r3, [r2, #0]
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200003d4 	.word	0x200003d4
 8001178:	2000037c 	.word	0x2000037c
 800117c:	200003d8 	.word	0x200003d8

08001180 <_handle_feragMsg>:

//--- _handle_feragMsg ---------------------
static void _handle_feragMsg(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	if (_FeragMsgOut!=_FeragMsgIn)
 8001186:	4b3f      	ldr	r3, [pc, #252]	@ (8001284 <_handle_feragMsg+0x104>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b3f      	ldr	r3, [pc, #252]	@ (8001288 <_handle_feragMsg+0x108>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	d073      	beq.n	800127a <_handle_feragMsg+0xfa>
	{
		int idx;
		switch (_FeragMsg.type)
 8001192:	4b3e      	ldr	r3, [pc, #248]	@ (800128c <_handle_feragMsg+0x10c>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b01      	cmp	r3, #1
 800119e:	d002      	beq.n	80011a6 <_handle_feragMsg+0x26>
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d052      	beq.n	800124a <_handle_feragMsg+0xca>
 80011a4:	e055      	b.n	8001252 <_handle_feragMsg+0xd2>
		{
		case 1:	idx=(_TrackInIdx+1)% TRACKING_CNT;
 80011a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001290 <_handle_feragMsg+0x110>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3301      	adds	r3, #1
 80011ac:	425a      	negs	r2, r3
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	f002 0207 	and.w	r2, r2, #7
 80011b6:	bf58      	it	pl
 80011b8:	4253      	negpl	r3, r2
 80011ba:	607b      	str	r3, [r7, #4]
				if (idx==_TrackOutIdx)
 80011bc:	4b35      	ldr	r3, [pc, #212]	@ (8001294 <_handle_feragMsg+0x114>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d103      	bne.n	80011ce <_handle_feragMsg+0x4e>
					printf("ERROR: Tracking overflow\n");
 80011c6:	4834      	ldr	r0, [pc, #208]	@ (8001298 <_handle_feragMsg+0x118>)
 80011c8:	f00e fa42 	bl	800f650 <puts>
					_TrackInIdx=idx;
					if (_FeragMsg.info&1) printf("ProductDetect %d: PaceId=%d, \n", _Status.dtCnt, _FeragMsg.paceId);
					else printf("ProductDetect %d: PaceId=%d (EMPTY)\n", _Status.dtCnt, _FeragMsg.paceId);
					_Status.dtCnt++;
				}
				break;
 80011cc:	e04b      	b.n	8001266 <_handle_feragMsg+0xe6>
					memcpy(&_Tracking[idx].prod, &_FeragMsg,  sizeof(_Tracking[idx].prod));
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4a30      	ldr	r2, [pc, #192]	@ (800129c <_handle_feragMsg+0x11c>)
 80011da:	4413      	add	r3, r2
 80011dc:	3304      	adds	r3, #4
 80011de:	4a2b      	ldr	r2, [pc, #172]	@ (800128c <_handle_feragMsg+0x10c>)
 80011e0:	8812      	ldrh	r2, [r2, #0]
 80011e2:	801a      	strh	r2, [r3, #0]
					_Tracking[idx].delay = _PrintGoDelay;
 80011e4:	4b2e      	ldr	r3, [pc, #184]	@ (80012a0 <_handle_feragMsg+0x120>)
 80011e6:	6819      	ldr	r1, [r3, #0]
 80011e8:	482c      	ldr	r0, [pc, #176]	@ (800129c <_handle_feragMsg+0x11c>)
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4403      	add	r3, r0
 80011f6:	6019      	str	r1, [r3, #0]
					_TrackInIdx=idx;
 80011f8:	4a25      	ldr	r2, [pc, #148]	@ (8001290 <_handle_feragMsg+0x110>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
					if (_FeragMsg.info&1) printf("ProductDetect %d: PaceId=%d, \n", _Status.dtCnt, _FeragMsg.paceId);
 80011fe:	4b23      	ldr	r3, [pc, #140]	@ (800128c <_handle_feragMsg+0x10c>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00b      	beq.n	8001228 <_handle_feragMsg+0xa8>
 8001210:	4b24      	ldr	r3, [pc, #144]	@ (80012a4 <_handle_feragMsg+0x124>)
 8001212:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001214:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <_handle_feragMsg+0x10c>)
 8001216:	785b      	ldrb	r3, [r3, #1]
 8001218:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800121c:	b2db      	uxtb	r3, r3
 800121e:	461a      	mov	r2, r3
 8001220:	4821      	ldr	r0, [pc, #132]	@ (80012a8 <_handle_feragMsg+0x128>)
 8001222:	f00e f9ad 	bl	800f580 <iprintf>
 8001226:	e00a      	b.n	800123e <_handle_feragMsg+0xbe>
					else printf("ProductDetect %d: PaceId=%d (EMPTY)\n", _Status.dtCnt, _FeragMsg.paceId);
 8001228:	4b1e      	ldr	r3, [pc, #120]	@ (80012a4 <_handle_feragMsg+0x124>)
 800122a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800122c:	4b17      	ldr	r3, [pc, #92]	@ (800128c <_handle_feragMsg+0x10c>)
 800122e:	785b      	ldrb	r3, [r3, #1]
 8001230:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001234:	b2db      	uxtb	r3, r3
 8001236:	461a      	mov	r2, r3
 8001238:	481c      	ldr	r0, [pc, #112]	@ (80012ac <_handle_feragMsg+0x12c>)
 800123a:	f00e f9a1 	bl	800f580 <iprintf>
					_Status.dtCnt++;
 800123e:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <_handle_feragMsg+0x124>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	3301      	adds	r3, #1
 8001244:	4a17      	ldr	r2, [pc, #92]	@ (80012a4 <_handle_feragMsg+0x124>)
 8001246:	6453      	str	r3, [r2, #68]	@ 0x44
				break;
 8001248:	e00d      	b.n	8001266 <_handle_feragMsg+0xe6>

		case 2:		printf("Alive\n"); break;
 800124a:	4819      	ldr	r0, [pc, #100]	@ (80012b0 <_handle_feragMsg+0x130>)
 800124c:	f00e fa00 	bl	800f650 <puts>
 8001250:	e009      	b.n	8001266 <_handle_feragMsg+0xe6>
		default: 	printf("Unknown Message Type=%d\n", _FeragMsg.type); break;
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <_handle_feragMsg+0x10c>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	4619      	mov	r1, r3
 800125e:	4815      	ldr	r0, [pc, #84]	@ (80012b4 <_handle_feragMsg+0x134>)
 8001260:	f00e f98e 	bl	800f580 <iprintf>
 8001264:	bf00      	nop
		}
		_Status.feragMsgOutCnt++;
 8001266:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <_handle_feragMsg+0x124>)
 8001268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800126a:	3301      	adds	r3, #1
 800126c:	4a0d      	ldr	r2, [pc, #52]	@ (80012a4 <_handle_feragMsg+0x124>)
 800126e:	63d3      	str	r3, [r2, #60]	@ 0x3c
		_FeragMsgOut++;
 8001270:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <_handle_feragMsg+0x104>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a03      	ldr	r2, [pc, #12]	@ (8001284 <_handle_feragMsg+0x104>)
 8001278:	6013      	str	r3, [r2, #0]
	}
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200003dc 	.word	0x200003dc
 8001288:	200003d8 	.word	0x200003d8
 800128c:	200003d4 	.word	0x200003d4
 8001290:	20000410 	.word	0x20000410
 8001294:	20000414 	.word	0x20000414
 8001298:	08013640 	.word	0x08013640
 800129c:	200003e0 	.word	0x200003e0
 80012a0:	20000000 	.word	0x20000000
 80012a4:	2000037c 	.word	0x2000037c
 80012a8:	0801365c 	.word	0x0801365c
 80012ac:	0801367c 	.word	0x0801367c
 80012b0:	080136a4 	.word	0x080136a4
 80012b4:	080136ac 	.word	0x080136ac

080012b8 <_handle_encoder>:

//--- _handle_encoder -------------------------------------
static void _handle_encoder(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
	if (_EncoderPos!=_Status.enc.encOutPos)
 80012be:	4b36      	ldr	r3, [pc, #216]	@ (8001398 <_handle_encoder+0xe0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a36      	ldr	r2, [pc, #216]	@ (800139c <_handle_encoder+0xe4>)
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d062      	beq.n	8001390 <_handle_encoder+0xd8>
	{
		_EncoderPos++;
 80012ca:	4b34      	ldr	r3, [pc, #208]	@ (800139c <_handle_encoder+0xe4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	4a32      	ldr	r2, [pc, #200]	@ (800139c <_handle_encoder+0xe4>)
 80012d2:	6013      	str	r3, [r2, #0]
	//	if (_EncoderPos%1000==0)
	//		printf("Enc=%d: DELAY=%d, %d, %d ,%d, %d, %d, %d, %d\n", _EncoderPos, _Tracking[0].delay, _Tracking[1].delay, _Tracking[2].delay, _Tracking[3].delay, _Tracking[4].delay, _Tracking[5].delay, _Tracking[6].delay, _Tracking[7].delay);
		for (int i=0; i<TRACKING_CNT; i++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	e048      	b.n	800136c <_handle_encoder+0xb4>
		{
			if (_Tracking[i].delay>0 && (--_Tracking[i].delay)==0)
 80012da:	4931      	ldr	r1, [pc, #196]	@ (80013a0 <_handle_encoder+0xe8>)
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	440b      	add	r3, r1
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	dd3b      	ble.n	8001366 <_handle_encoder+0xae>
 80012ee:	492c      	ldr	r1, [pc, #176]	@ (80013a0 <_handle_encoder+0xe8>)
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	440b      	add	r3, r1
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	1e59      	subs	r1, r3, #1
 8001300:	4827      	ldr	r0, [pc, #156]	@ (80013a0 <_handle_encoder+0xe8>)
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4403      	add	r3, r0
 800130e:	6019      	str	r1, [r3, #0]
 8001310:	4923      	ldr	r1, [pc, #140]	@ (80013a0 <_handle_encoder+0xe8>)
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	440b      	add	r3, r1
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d120      	bne.n	8001366 <_handle_encoder+0xae>
			{
				_TrackOutIdx=i;
 8001324:	4a1f      	ldr	r2, [pc, #124]	@ (80013a4 <_handle_encoder+0xec>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
				printf("PrintGo PaceId=%d, ok=%d\n", _Tracking[i].prod.paceId, _Tracking[i].prod.info);
 800132a:	491d      	ldr	r1, [pc, #116]	@ (80013a0 <_handle_encoder+0xe8>)
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	440b      	add	r3, r1
 8001338:	795b      	ldrb	r3, [r3, #5]
 800133a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4618      	mov	r0, r3
 8001342:	4917      	ldr	r1, [pc, #92]	@ (80013a0 <_handle_encoder+0xe8>)
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4613      	mov	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	440b      	add	r3, r1
 8001350:	791b      	ldrb	r3, [r3, #4]
 8001352:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001356:	b2db      	uxtb	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	4601      	mov	r1, r0
 800135c:	4812      	ldr	r0, [pc, #72]	@ (80013a8 <_handle_encoder+0xf0>)
 800135e:	f00e f90f 	bl	800f580 <iprintf>
				box_printGo();
 8001362:	f000 f879 	bl	8001458 <box_printGo>
		for (int i=0; i<TRACKING_CNT; i++)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3301      	adds	r3, #1
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b07      	cmp	r3, #7
 8001370:	ddb3      	ble.n	80012da <_handle_encoder+0x22>
			}
		}
		if (_PrintDoneDelay>0)
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <_handle_encoder+0xf4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	dd0a      	ble.n	8001390 <_handle_encoder+0xd8>
		{
			if ((--_PrintDoneDelay)==0)
 800137a:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <_handle_encoder+0xf4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3b01      	subs	r3, #1
 8001380:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <_handle_encoder+0xf4>)
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <_handle_encoder+0xf4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <_handle_encoder+0xd8>
				_send_print_done();
 800138c:	f000 f838 	bl	8001400 <_send_print_done>
		}
	}
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	2000037c 	.word	0x2000037c
 800139c:	2000041c 	.word	0x2000041c
 80013a0:	200003e0 	.word	0x200003e0
 80013a4:	20000414 	.word	0x20000414
 80013a8:	080136c8 	.word	0x080136c8
 80013ac:	20000420 	.word	0x20000420

080013b0 <_check_printer_ready>:
	_PrintDoneIn = pd;
}
*/

static void _check_printer_ready(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
	int ready=HAL_GPIO_ReadPin(PRINT_DONE_GPIO_Port, PRINT_DONE_Pin);
 80013b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013ba:	480e      	ldr	r0, [pc, #56]	@ (80013f4 <_check_printer_ready+0x44>)
 80013bc:	f002 f820 	bl	8003400 <HAL_GPIO_ReadPin>
 80013c0:	4603      	mov	r3, r0
 80013c2:	607b      	str	r3, [r7, #4]
	if (_PrinterReadyIn<0) _PrinterReadyIn=ready;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <_check_printer_ready+0x48>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	da02      	bge.n	80013d2 <_check_printer_ready+0x22>
 80013cc:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <_check_printer_ready+0x48>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
	if (_PrinterReadyIn!=ready)
 80013d2:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <_check_printer_ready+0x48>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d003      	beq.n	80013e4 <_check_printer_ready+0x34>
		printf("LOG: FeragBox: PrinterReady=%d\n", ready);
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4807      	ldr	r0, [pc, #28]	@ (80013fc <_check_printer_ready+0x4c>)
 80013e0:	f00e f8ce 	bl	800f580 <iprintf>
	_PrinterReadyIn = ready;
 80013e4:	4a04      	ldr	r2, [pc, #16]	@ (80013f8 <_check_printer_ready+0x48>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6013      	str	r3, [r2, #0]
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	48001000 	.word	0x48001000
 80013f8:	20000004 	.word	0x20000004
 80013fc:	080136e4 	.word	0x080136e4

08001400 <_send_print_done>:


//--- _send_print_done ----------------------------------------
static void _send_print_done(void)
{
 8001400:	b598      	push	{r3, r4, r7, lr}
 8001402:	af00      	add	r7, sp, #0
	printf("PrintDone %d: PaceId[%d]=%d, ok=1\n", _Status.pdCnt, _TrackOutIdx, _Tracking[_TrackOutIdx].prod.paceId);
 8001404:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <_send_print_done+0x44>)
 8001406:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001408:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <_send_print_done+0x48>)
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <_send_print_done+0x48>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4c0e      	ldr	r4, [pc, #56]	@ (800144c <_send_print_done+0x4c>)
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4423      	add	r3, r4
 800141c:	795b      	ldrb	r3, [r3, #5]
 800141e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001422:	b2db      	uxtb	r3, r3
 8001424:	4602      	mov	r2, r0
 8001426:	480a      	ldr	r0, [pc, #40]	@ (8001450 <_send_print_done+0x50>)
 8001428:	f00e f8aa 	bl	800f580 <iprintf>
	_Status.pdCnt++;
 800142c:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <_send_print_done+0x44>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001430:	3301      	adds	r3, #1
 8001432:	4a04      	ldr	r2, [pc, #16]	@ (8001444 <_send_print_done+0x44>)
 8001434:	64d3      	str	r3, [r2, #76]	@ 0x4c
	_PaceId = -1;
 8001436:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <_send_print_done+0x54>)
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	601a      	str	r2, [r3, #0]
}
 800143e:	bf00      	nop
 8001440:	bd98      	pop	{r3, r4, r7, pc}
 8001442:	bf00      	nop
 8001444:	2000037c 	.word	0x2000037c
 8001448:	20000414 	.word	0x20000414
 800144c:	200003e0 	.word	0x200003e0
 8001450:	08013704 	.word	0x08013704
 8001454:	20000418 	.word	0x20000418

08001458 <box_printGo>:

//--- box_printGo ----------------------
void box_printGo(void)
{
 8001458:	b598      	push	{r3, r4, r7, lr}
 800145a:	af00      	add	r7, sp, #0
//	printf("PrintGo ON %d\n",  _Ticks);
	_Status.paceId = _Tracking[_TrackOutIdx].prod.paceId;
 800145c:	4b35      	ldr	r3, [pc, #212]	@ (8001534 <box_printGo+0xdc>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4935      	ldr	r1, [pc, #212]	@ (8001538 <box_printGo+0xe0>)
 8001462:	4613      	mov	r3, r2
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4413      	add	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	440b      	add	r3, r1
 800146c:	795b      	ldrb	r3, [r3, #5]
 800146e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001472:	b2db      	uxtb	r3, r3
 8001474:	461a      	mov	r2, r3
 8001476:	4b31      	ldr	r3, [pc, #196]	@ (800153c <box_printGo+0xe4>)
 8001478:	641a      	str	r2, [r3, #64]	@ 0x40
	if (enc_fixSpeed() || _Tracking[_TrackOutIdx].prod.info)
 800147a:	f000 f9cd 	bl	8001818 <enc_fixSpeed>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10d      	bne.n	80014a0 <box_printGo+0x48>
 8001484:	4b2b      	ldr	r3, [pc, #172]	@ (8001534 <box_printGo+0xdc>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	492b      	ldr	r1, [pc, #172]	@ (8001538 <box_printGo+0xe0>)
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	440b      	add	r3, r1
 8001494:	791b      	ldrb	r3, [r3, #4]
 8001496:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d041      	beq.n	8001524 <box_printGo+0xcc>
	{
		printf("PrintGo %d: PaceId[%d]=%d\n", _Status.pgCnt, _TrackOutIdx, _Tracking[_TrackOutIdx].prod.paceId);
 80014a0:	4b26      	ldr	r3, [pc, #152]	@ (800153c <box_printGo+0xe4>)
 80014a2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80014a4:	4b23      	ldr	r3, [pc, #140]	@ (8001534 <box_printGo+0xdc>)
 80014a6:	6818      	ldr	r0, [r3, #0]
 80014a8:	4b22      	ldr	r3, [pc, #136]	@ (8001534 <box_printGo+0xdc>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4c22      	ldr	r4, [pc, #136]	@ (8001538 <box_printGo+0xe0>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4423      	add	r3, r4
 80014b8:	795b      	ldrb	r3, [r3, #5]
 80014ba:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	4602      	mov	r2, r0
 80014c2:	481f      	ldr	r0, [pc, #124]	@ (8001540 <box_printGo+0xe8>)
 80014c4:	f00e f85c 	bl	800f580 <iprintf>
		_Status.pgCnt++;
 80014c8:	4b1c      	ldr	r3, [pc, #112]	@ (800153c <box_printGo+0xe4>)
 80014ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014cc:	3301      	adds	r3, #1
 80014ce:	4a1b      	ldr	r2, [pc, #108]	@ (800153c <box_printGo+0xe4>)
 80014d0:	6493      	str	r3, [r2, #72]	@ 0x48
		_PaceId = _Tracking[_TrackOutIdx].prod.paceId;
 80014d2:	4b18      	ldr	r3, [pc, #96]	@ (8001534 <box_printGo+0xdc>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4918      	ldr	r1, [pc, #96]	@ (8001538 <box_printGo+0xe0>)
 80014d8:	4613      	mov	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4413      	add	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	440b      	add	r3, r1
 80014e2:	795b      	ldrb	r3, [r3, #5]
 80014e4:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <box_printGo+0xec>)
 80014ee:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014f6:	4814      	ldr	r0, [pc, #80]	@ (8001548 <box_printGo+0xf0>)
 80014f8:	f001 ff9a 	bl	8003430 <HAL_GPIO_WritePin>
		_TicksPgOff = _Ticks+2;
 80014fc:	4b13      	ldr	r3, [pc, #76]	@ (800154c <box_printGo+0xf4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3302      	adds	r3, #2
 8001502:	4a13      	ldr	r2, [pc, #76]	@ (8001550 <box_printGo+0xf8>)
 8001504:	6013      	str	r3, [r2, #0]
		if (_PrintDoneDelay) printf("ERROR: PringGo while still printing _PrintDoneDelay=%d\n",_PrintDoneDelay);
 8001506:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <box_printGo+0xfc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d005      	beq.n	800151a <box_printGo+0xc2>
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <box_printGo+0xfc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4619      	mov	r1, r3
 8001514:	4810      	ldr	r0, [pc, #64]	@ (8001558 <box_printGo+0x100>)
 8001516:	f00e f833 	bl	800f580 <iprintf>
		_PrintDoneDelay = 2000;
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <box_printGo+0xfc>)
 800151c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	e004      	b.n	800152e <box_printGo+0xd6>
	}
	else _PaceId=-1;
 8001524:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <box_printGo+0xec>)
 8001526:	f04f 32ff 	mov.w	r2, #4294967295
 800152a:	601a      	str	r2, [r3, #0]
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	bd98      	pop	{r3, r4, r7, pc}
 8001532:	bf00      	nop
 8001534:	20000414 	.word	0x20000414
 8001538:	200003e0 	.word	0x200003e0
 800153c:	2000037c 	.word	0x2000037c
 8001540:	08013728 	.word	0x08013728
 8001544:	20000418 	.word	0x20000418
 8001548:	48001000 	.word	0x48001000
 800154c:	200003cc 	.word	0x200003cc
 8001550:	200003d0 	.word	0x200003d0
 8001554:	20000420 	.word	0x20000420
 8001558:	08013744 	.word	0x08013744

0800155c <box_send_status>:

//--- box_send_status ----------------------------------------
void box_send_status(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001562:	af00      	add	r7, sp, #0
	printf("encOut Pos:     %d\n",    (int)_Status.enc.encOutPos);
	printf("PrintGo Cnt:    %d\n",    (int)_Status.pgCnt);
	printf("\n");
	 */
	char msg[512];
	_Status.test++;
 8001564:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <box_send_status+0x40>)
 8001566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001568:	3301      	adds	r3, #1
 800156a:	4a0c      	ldr	r2, [pc, #48]	@ (800159c <box_send_status+0x40>)
 800156c:	6353      	str	r3, [r2, #52]	@ 0x34
	printf("STATUS %s\n", bin2hex(msg, &_Status, sizeof(_Status)));
 800156e:	463b      	mov	r3, r7
 8001570:	2250      	movs	r2, #80	@ 0x50
 8001572:	490a      	ldr	r1, [pc, #40]	@ (800159c <box_send_status+0x40>)
 8001574:	4618      	mov	r0, r3
 8001576:	f000 fa97 	bl	8001aa8 <bin2hex>
 800157a:	4603      	mov	r3, r0
 800157c:	4619      	mov	r1, r3
 800157e:	4808      	ldr	r0, [pc, #32]	@ (80015a0 <box_send_status+0x44>)
 8001580:	f00d fffe 	bl	800f580 <iprintf>
	fflush(stdout);
 8001584:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <box_send_status+0x48>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	4618      	mov	r0, r3
 800158c:	f00d ff22 	bl	800f3d4 <fflush>
}
 8001590:	bf00      	nop
 8001592:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2000037c 	.word	0x2000037c
 80015a0:	0801377c 	.word	0x0801377c
 80015a4:	200001a0 	.word	0x200001a0

080015a8 <enc_init>:

static void _init_pwm(int32_t speed);

//--- enc_init ----------------------------------
void enc_init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	_Timer_clock_frequency = HAL_RCC_GetPCLK1Freq(); // Adjust based on your clock tree settings
 80015ac:	f005 fc06 	bl	8006dbc <HAL_RCC_GetPCLK1Freq>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4a03      	ldr	r2, [pc, #12]	@ (80015c0 <enc_init+0x18>)
 80015b4:	6013      	str	r3, [r2, #0]
	_Prescaler=1;
 80015b6:	4b03      	ldr	r3, [pc, #12]	@ (80015c4 <enc_init+0x1c>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	601a      	str	r2, [r3, #0]
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000424 	.word	0x20000424
 80015c4:	20000428 	.word	0x20000428

080015c8 <enc_in_irq>:

//--- enc_irq ------------------------
void enc_in_irq(TIM_HandleTypeDef *htim)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	int time=HAL_GetTick();
 80015d0:	f001 fc08 	bl	8002de4 <HAL_GetTick>
 80015d4:	4603      	mov	r3, r0
 80015d6:	617b      	str	r3, [r7, #20]
	int pos = _EncStatus.encInPos;
 80015d8:	4b23      	ldr	r3, [pc, #140]	@ (8001668 <enc_in_irq+0xa0>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	613b      	str	r3, [r7, #16]
	_EncStatus.encInPos = enc_get_pos();
 80015de:	f000 fdb1 	bl	8002144 <enc_get_pos>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b20      	ldr	r3, [pc, #128]	@ (8001668 <enc_in_irq+0xa0>)
 80015e8:	605a      	str	r2, [r3, #4]
	int dist=_EncStatus.encInPos-pos;
 80015ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001668 <enc_in_irq+0xa0>)
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	60fb      	str	r3, [r7, #12]
	int t=time-_EncInTime;
 80015f4:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <enc_in_irq+0xa4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	60bb      	str	r3, [r7, #8]
	if (t==0) _EncStatus.encInSpeed=0;
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d103      	bne.n	800160c <enc_in_irq+0x44>
 8001604:	4b18      	ldr	r3, [pc, #96]	@ (8001668 <enc_in_irq+0xa0>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	e009      	b.n	8001620 <enc_in_irq+0x58>
	else _EncStatus.encInSpeed = (dist*1000)/t;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001612:	fb03 f202 	mul.w	r2, r3, r2
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	fb92 f3f3 	sdiv	r3, r2, r3
 800161c:	4a12      	ldr	r2, [pc, #72]	@ (8001668 <enc_in_irq+0xa0>)
 800161e:	6013      	str	r3, [r2, #0]

	_EncInTime=time;
 8001620:	4a12      	ldr	r2, [pc, #72]	@ (800166c <enc_in_irq+0xa4>)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	6013      	str	r3, [r2, #0]

	//--- set output speed ------
	enc_set_speed((int)(_EncStatus.encInSpeed*_EncOut_incPM/_EncIn_incPM));
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <enc_in_irq+0xa0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001632:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <enc_in_irq+0xa8>)
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	ee67 6a27 	vmul.f32	s13, s14, s15
 800163c:	4b0d      	ldr	r3, [pc, #52]	@ (8001674 <enc_in_irq+0xac>)
 800163e:	ed93 7a00 	vldr	s14, [r3]
 8001642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800164a:	ee17 0a90 	vmov	r0, s15
 800164e:	f000 f8b5 	bl	80017bc <enc_set_speed>

	if (!_Running)
 8001652:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <enc_in_irq+0xb0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <enc_in_irq+0x96>
		enc_start();
 800165a:	f000 f9c5 	bl	80019e8 <enc_start>

//	printf("TRACE: Encoder In: pos=%d, speed=%d, time=%d\n", (int)_EncStatus.encInPos, (int)_EncStatus.encInSpeed, t);
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000042c 	.word	0x2000042c
 800166c:	20000444 	.word	0x20000444
 8001670:	2000000c 	.word	0x2000000c
 8001674:	20000008 	.word	0x20000008
 8001678:	20000440 	.word	0x20000440

0800167c <enc_tick_10ms>:

//--- enc_tick_10ms ---------------------------
void enc_tick_10ms(int ticks)
{
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	if (ticks-_EncOutTime>1000)
 8001684:	4b22      	ldr	r3, [pc, #136]	@ (8001710 <enc_tick_10ms+0x94>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001690:	dd39      	ble.n	8001706 <enc_tick_10ms+0x8a>
	{
		float t=(float)(ticks-_EncOutTime);
 8001692:	4b1f      	ldr	r3, [pc, #124]	@ (8001710 <enc_tick_10ms+0x94>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a2:	edc7 7a03 	vstr	s15, [r7, #12]
		_EncStatus.encOutSpeed = (int32_t) (1000.0*_EncOutSpeedCnt/t/2);
 80016a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <enc_tick_10ms+0x98>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff3a 	bl	8000524 <__aeabi_i2d>
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b18      	ldr	r3, [pc, #96]	@ (8001718 <enc_tick_10ms+0x9c>)
 80016b6:	f7fe ff9f 	bl	80005f8 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4614      	mov	r4, r2
 80016c0:	461d      	mov	r5, r3
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f7fe ff40 	bl	8000548 <__aeabi_f2d>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7ff f8bc 	bl	800084c <__aeabi_ddiv>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016e4:	f7ff f8b2 	bl	800084c <__aeabi_ddiv>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f7ff fa32 	bl	8000b58 <__aeabi_d2iz>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a09      	ldr	r2, [pc, #36]	@ (800171c <enc_tick_10ms+0xa0>)
 80016f8:	6093      	str	r3, [r2, #8]
		_EncOutTime=ticks;
 80016fa:	4a05      	ldr	r2, [pc, #20]	@ (8001710 <enc_tick_10ms+0x94>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6013      	str	r3, [r2, #0]
		_EncOutSpeedCnt=0;
 8001700:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <enc_tick_10ms+0x98>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
	}
}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bdb0      	pop	{r4, r5, r7, pc}
 800170e:	bf00      	nop
 8001710:	20000450 	.word	0x20000450
 8001714:	20000454 	.word	0x20000454
 8001718:	408f4000 	.word	0x408f4000
 800171c:	2000042c 	.word	0x2000042c

08001720 <enc_get_status>:

//--- enc_get_status -------------------------------
void enc_get_status(SEZFB_EncStatus *pstatus)
{
 8001720:	b4b0      	push	{r4, r5, r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	memcpy(pstatus, &_EncStatus, sizeof(_EncStatus));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a06      	ldr	r2, [pc, #24]	@ (8001744 <enc_get_status+0x24>)
 800172c:	461c      	mov	r4, r3
 800172e:	4615      	mov	r5, r2
 8001730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001732:	6020      	str	r0, [r4, #0]
 8001734:	6061      	str	r1, [r4, #4]
 8001736:	60a2      	str	r2, [r4, #8]
 8001738:	60e3      	str	r3, [r4, #12]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bcb0      	pop	{r4, r5, r7}
 8001742:	4770      	bx	lr
 8001744:	2000042c 	.word	0x2000042c

08001748 <enc_command>:

//--- enc_command ----------------------------------
void enc_command(const char *args)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
    int cnt=0;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]

    // Parse the command arguments for action type
    if (strstr(args, "start")) 		enc_start();
 8001754:	4914      	ldr	r1, [pc, #80]	@ (80017a8 <enc_command+0x60>)
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f00e f8c0 	bl	800f8dc <strstr>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <enc_command+0x20>
 8001762:	f000 f941 	bl	80019e8 <enc_start>
    else if ((cnt=sscanf(args, "speed %d", &_FixedSpeed))) enc_set_speed(_FixedSpeed);
    else
    {
        printf("Unknown command. Use 'encoder start', 'encoder stop', or 'encoder speed ...'\n");
    }
}
 8001766:	e01b      	b.n	80017a0 <enc_command+0x58>
    else if (strstr(args, "stop"))	enc_stop();
 8001768:	4910      	ldr	r1, [pc, #64]	@ (80017ac <enc_command+0x64>)
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f00e f8b6 	bl	800f8dc <strstr>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d002      	beq.n	800177c <enc_command+0x34>
 8001776:	f000 f95d 	bl	8001a34 <enc_stop>
}
 800177a:	e011      	b.n	80017a0 <enc_command+0x58>
    else if ((cnt=sscanf(args, "speed %d", &_FixedSpeed))) enc_set_speed(_FixedSpeed);
 800177c:	4a0c      	ldr	r2, [pc, #48]	@ (80017b0 <enc_command+0x68>)
 800177e:	490d      	ldr	r1, [pc, #52]	@ (80017b4 <enc_command+0x6c>)
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f00d ff8d 	bl	800f6a0 <siscanf>
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <enc_command+0x52>
 800178e:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <enc_command+0x68>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f812 	bl	80017bc <enc_set_speed>
}
 8001798:	e002      	b.n	80017a0 <enc_command+0x58>
        printf("Unknown command. Use 'encoder start', 'encoder stop', or 'encoder speed ...'\n");
 800179a:	4807      	ldr	r0, [pc, #28]	@ (80017b8 <enc_command+0x70>)
 800179c:	f00d ff58 	bl	800f650 <puts>
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	08013788 	.word	0x08013788
 80017ac:	08013790 	.word	0x08013790
 80017b0:	20000010 	.word	0x20000010
 80017b4:	08013798 	.word	0x08013798
 80017b8:	080137a4 	.word	0x080137a4

080017bc <enc_set_speed>:

//--- enc_set_speed ---------------------------
void enc_set_speed(int32_t speed)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	if (_FixedSpeed) speed=_FixedSpeed;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <enc_set_speed+0x48>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d002      	beq.n	80017d2 <enc_set_speed+0x16>
 80017cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <enc_set_speed+0x48>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	607b      	str	r3, [r7, #4]
	if (!_Init) _init_pwm(speed);
 80017d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <enc_set_speed+0x4c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <enc_set_speed+0x26>
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f828 	bl	8001830 <_init_pwm>
	else if (speed!=_SpeedOutSet)
	{
		_SpeedOutChange = speed;
		printf("Encoder Speedchange=%d\n", speed);
	}
}
 80017e0:	e00b      	b.n	80017fa <enc_set_speed+0x3e>
	else if (speed!=_SpeedOutSet)
 80017e2:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <enc_set_speed+0x50>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d006      	beq.n	80017fa <enc_set_speed+0x3e>
		_SpeedOutChange = speed;
 80017ec:	4a08      	ldr	r2, [pc, #32]	@ (8001810 <enc_set_speed+0x54>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
		printf("Encoder Speedchange=%d\n", speed);
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4807      	ldr	r0, [pc, #28]	@ (8001814 <enc_set_speed+0x58>)
 80017f6:	f00d fec3 	bl	800f580 <iprintf>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000010 	.word	0x20000010
 8001808:	2000043c 	.word	0x2000043c
 800180c:	20000448 	.word	0x20000448
 8001810:	2000044c 	.word	0x2000044c
 8001814:	080137f4 	.word	0x080137f4

08001818 <enc_fixSpeed>:

//--- enc_fixSpeed ----------------------------
int  enc_fixSpeed(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
	return _FixedSpeed;
 800181c:	4b03      	ldr	r3, [pc, #12]	@ (800182c <enc_fixSpeed+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000010 	.word	0x20000010

08001830 <_init_pwm>:

//--- _init_pwm ------------------------------
static void _init_pwm(int32_t speed)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	@ 0x30
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	if (_Prescaler * speed == 0) return;
 8001838:	4b46      	ldr	r3, [pc, #280]	@ (8001954 <_init_pwm+0x124>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 8081 	beq.w	800194a <_init_pwm+0x11a>

	int reverse;
	if (speed>0)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	dd02      	ble.n	8001854 <_init_pwm+0x24>
	{
		reverse=0;
 800184e:	2300      	movs	r3, #0
 8001850:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001852:	e004      	b.n	800185e <_init_pwm+0x2e>
	}
	else
	{
		reverse=1;
 8001854:	2301      	movs	r3, #1
 8001856:	62fb      	str	r3, [r7, #44]	@ 0x2c
		speed=-speed;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	425b      	negs	r3, r3
 800185c:	607b      	str	r3, [r7, #4]
	}

	uint32_t period = (_Timer_clock_frequency / (_Prescaler * speed)) - 1;
 800185e:	4b3e      	ldr	r3, [pc, #248]	@ (8001958 <_init_pwm+0x128>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b3c      	ldr	r3, [pc, #240]	@ (8001954 <_init_pwm+0x124>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	fb01 f303 	mul.w	r3, r1, r3
 800186c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001870:	3b01      	subs	r3, #1
 8001872:	62bb      	str	r3, [r7, #40]	@ 0x28

	// Update Timer configuration
	htim2.Instance 				 = TIM2;
 8001874:	4b39      	ldr	r3, [pc, #228]	@ (800195c <_init_pwm+0x12c>)
 8001876:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800187a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler 		 = _Prescaler - 1; // Prescaler is 0-based, for prescaler = 1, this will be 0
 800187c:	4b35      	ldr	r3, [pc, #212]	@ (8001954 <_init_pwm+0x124>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	3b01      	subs	r3, #1
 8001882:	4a36      	ldr	r2, [pc, #216]	@ (800195c <_init_pwm+0x12c>)
 8001884:	6053      	str	r3, [r2, #4]
	htim2.Init.CounterMode 		 = TIM_COUNTERMODE_UP;
 8001886:	4b35      	ldr	r3, [pc, #212]	@ (800195c <_init_pwm+0x12c>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period 			 = period;
 800188c:	4a33      	ldr	r2, [pc, #204]	@ (800195c <_init_pwm+0x12c>)
 800188e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001890:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision 	 = TIM_CLOCKDIVISION_DIV1;
 8001892:	4b32      	ldr	r3, [pc, #200]	@ (800195c <_init_pwm+0x12c>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0;
 8001898:	4b30      	ldr	r3, [pc, #192]	@ (800195c <_init_pwm+0x12c>)
 800189a:	2200      	movs	r2, #0
 800189c:	615a      	str	r2, [r3, #20]
	HAL_TIM_PWM_Init(&htim2);
 800189e:	482f      	ldr	r0, [pc, #188]	@ (800195c <_init_pwm+0x12c>)
 80018a0:	f005 fd5c 	bl	800735c <HAL_TIM_PWM_Init>

	TIM_OC_InitTypeDef sConfigOC = {0};
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
 80018b4:	615a      	str	r2, [r3, #20]
 80018b6:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode 		= TIM_OCMODE_TOGGLE;
 80018b8:	2330      	movs	r3, #48	@ 0x30
 80018ba:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCIdleState 	= TIM_OUTPUTSTATE_ENABLE;
 80018bc:	2301      	movs	r3, #1
 80018be:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity 	= TIM_OCPOLARITY_HIGH;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]

	// Apply direction
	if (reverse)
 80018c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d017      	beq.n	80018fa <_init_pwm+0xca>
	{ // Reverse
		sConfigOC.Pulse = (period * 3) / 4; // CH1 at 25%
 80018ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	613b      	str	r3, [r7, #16]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	2200      	movs	r2, #0
 80018dc:	4619      	mov	r1, r3
 80018de:	481f      	ldr	r0, [pc, #124]	@ (800195c <_init_pwm+0x12c>)
 80018e0:	f006 fa22 	bl	8007d28 <HAL_TIM_PWM_ConfigChannel>
		sConfigOC.Pulse = (period * 1) / 4; // CH2 at 75%, ie half cycle later
 80018e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	613b      	str	r3, [r7, #16]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	2204      	movs	r2, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	481a      	ldr	r0, [pc, #104]	@ (800195c <_init_pwm+0x12c>)
 80018f4:	f006 fa18 	bl	8007d28 <HAL_TIM_PWM_ConfigChannel>
 80018f8:	e016      	b.n	8001928 <_init_pwm+0xf8>
	}
	else
	{ // Forward
		sConfigOC.Pulse = (period * 1) / 4; // CH1 at 25%
 80018fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	613b      	str	r3, [r7, #16]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	2200      	movs	r2, #0
 8001906:	4619      	mov	r1, r3
 8001908:	4814      	ldr	r0, [pc, #80]	@ (800195c <_init_pwm+0x12c>)
 800190a:	f006 fa0d 	bl	8007d28 <HAL_TIM_PWM_ConfigChannel>
		sConfigOC.Pulse = (period * 3) / 4; // CH2 at 75%, ie half cycle later
 800190e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	613b      	str	r3, [r7, #16]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	2204      	movs	r2, #4
 8001920:	4619      	mov	r1, r3
 8001922:	480e      	ldr	r0, [pc, #56]	@ (800195c <_init_pwm+0x12c>)
 8001924:	f006 fa00 	bl	8007d28 <HAL_TIM_PWM_ConfigChannel>
	}

	if(HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1)!=HAL_OK)
 8001928:	2100      	movs	r1, #0
 800192a:	480c      	ldr	r0, [pc, #48]	@ (800195c <_init_pwm+0x12c>)
 800192c:	f005 fea8 	bl	8007680 <HAL_TIM_PWM_Start_IT>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <_init_pwm+0x10a>
	{
	   Error_Handler();
 8001936:	f000 fe17 	bl	8002568 <Error_Handler>
	}
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800193a:	2104      	movs	r1, #4
 800193c:	4807      	ldr	r0, [pc, #28]	@ (800195c <_init_pwm+0x12c>)
 800193e:	f005 fd5d 	bl	80073fc <HAL_TIM_PWM_Start>
	_Init = TRUE;
 8001942:	4b07      	ldr	r3, [pc, #28]	@ (8001960 <_init_pwm+0x130>)
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	e000      	b.n	800194c <_init_pwm+0x11c>
	if (_Prescaler * speed == 0) return;
 800194a:	bf00      	nop
}
 800194c:	3730      	adds	r7, #48	@ 0x30
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000428 	.word	0x20000428
 8001958:	20000424 	.word	0x20000424
 800195c:	200004ac 	.word	0x200004ac
 8001960:	2000043c 	.word	0x2000043c

08001964 <HAL_TIM_PWM_PulseFinishedCallback>:

//--- HAL_TIM_PWM_PulseFinishedCallback -------------------------------
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if(htim -> Instance == TIM2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001974:	d128      	bne.n	80019c8 <HAL_TIM_PWM_PulseFinishedCallback+0x64>
  {
	  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7f1b      	ldrb	r3, [r3, #28]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d124      	bne.n	80019c8 <HAL_TIM_PWM_PulseFinishedCallback+0x64>
	  {
		  _EncStatus.encOutPos++;
 800197e:	4b14      	ldr	r3, [pc, #80]	@ (80019d0 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	3301      	adds	r3, #1
 8001984:	4a12      	ldr	r2, [pc, #72]	@ (80019d0 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8001986:	60d3      	str	r3, [r2, #12]
		  _EncOutSpeedCnt++;
 8001988:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	4a11      	ldr	r2, [pc, #68]	@ (80019d4 <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 8001990:	6013      	str	r3, [r2, #0]
		  if (_SpeedOutChange)// && !(_EncOutSpeedCnt&1)) // only the even counts to be sure we at at the end of a complete sequence
 8001992:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d016      	beq.n	80019c8 <HAL_TIM_PWM_PulseFinishedCallback+0x64>
		  {
			  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800199a:	2100      	movs	r1, #0
 800199c:	480f      	ldr	r0, [pc, #60]	@ (80019dc <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 800199e:	f005 fdf7 	bl	8007590 <HAL_TIM_PWM_Stop>
			  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80019a2:	2104      	movs	r1, #4
 80019a4:	480d      	ldr	r0, [pc, #52]	@ (80019dc <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 80019a6:	f005 fdf3 	bl	8007590 <HAL_TIM_PWM_Stop>
			  _Init=FALSE;
 80019aa:	4b0d      	ldr	r3, [pc, #52]	@ (80019e0 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
			  _init_pwm(_SpeedOutChange);
 80019b0:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff3b 	bl	8001830 <_init_pwm>
			  _SpeedOutSet = _SpeedOutChange;
 80019ba:	4b07      	ldr	r3, [pc, #28]	@ (80019d8 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a09      	ldr	r2, [pc, #36]	@ (80019e4 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 80019c0:	6013      	str	r3, [r2, #0]
			  _SpeedOutChange = 0;
 80019c2:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
		  }
	  }
  }
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	2000042c 	.word	0x2000042c
 80019d4:	20000454 	.word	0x20000454
 80019d8:	2000044c 	.word	0x2000044c
 80019dc:	200004ac 	.word	0x200004ac
 80019e0:	2000043c 	.word	0x2000043c
 80019e4:	20000448 	.word	0x20000448

080019e8 <enc_start>:

//--- enc_start ---------------------------
void enc_start(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	if (_FixedSpeed) printf("WARN: Encoder speed fixed to %d Hz\n", _FixedSpeed);
 80019ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <enc_start+0x38>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <enc_start+0x18>
 80019f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a20 <enc_start+0x38>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	480a      	ldr	r0, [pc, #40]	@ (8001a24 <enc_start+0x3c>)
 80019fc:	f00d fdc0 	bl	800f580 <iprintf>

    // Apply the last configured settings and start PWM
	_EncStatus.encOutPos=0;
 8001a00:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <enc_start+0x40>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	60da      	str	r2, [r3, #12]
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001a06:	2100      	movs	r1, #0
 8001a08:	4808      	ldr	r0, [pc, #32]	@ (8001a2c <enc_start+0x44>)
 8001a0a:	f005 fcf7 	bl	80073fc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001a0e:	2104      	movs	r1, #4
 8001a10:	4806      	ldr	r0, [pc, #24]	@ (8001a2c <enc_start+0x44>)
 8001a12:	f005 fcf3 	bl	80073fc <HAL_TIM_PWM_Start>
    _Running=TRUE;
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <enc_start+0x48>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000010 	.word	0x20000010
 8001a24:	0801380c 	.word	0x0801380c
 8001a28:	2000042c 	.word	0x2000042c
 8001a2c:	200004ac 	.word	0x200004ac
 8001a30:	20000440 	.word	0x20000440

08001a34 <enc_stop>:

//--- enc_stop ---------------------------------
void enc_stop(void) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
    // Stop the PWM and ensure both outputs are low
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4806      	ldr	r0, [pc, #24]	@ (8001a54 <enc_stop+0x20>)
 8001a3c:	f005 fda8 	bl	8007590 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001a40:	2104      	movs	r1, #4
 8001a42:	4804      	ldr	r0, [pc, #16]	@ (8001a54 <enc_stop+0x20>)
 8001a44:	f005 fda4 	bl	8007590 <HAL_TIM_PWM_Stop>
    _Running=FALSE;
 8001a48:	4b03      	ldr	r3, [pc, #12]	@ (8001a58 <enc_stop+0x24>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200004ac 	.word	0x200004ac
 8001a58:	20000440 	.word	0x20000440

08001a5c <strstart>:
#include <stdlib.h>
#include "ge_common.h"

//--- strstart ---------------------------------------
char *strstart(const char *str, const char *start)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
	int len=strlen(start);
 8001a66:	6838      	ldr	r0, [r7, #0]
 8001a68:	f7fe fc02 	bl	8000270 <strlen>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60fb      	str	r3, [r7, #12]
	if (!strncmp(str, start, len))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	461a      	mov	r2, r3
 8001a74:	6839      	ldr	r1, [r7, #0]
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f00d ff1e 	bl	800f8b8 <strncmp>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10d      	bne.n	8001a9e <strstart+0x42>
	{
		while (str[len]==' ') len++;
 8001a82:	e002      	b.n	8001a8a <strstart+0x2e>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3301      	adds	r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	d0f6      	beq.n	8001a84 <strstart+0x28>
		return (char*)&str[len];
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	e000      	b.n	8001aa0 <strstart+0x44>
	}
	return 0;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <bin2hex>:

//--- bin2hex ------------------------------
char *bin2hex(char *str, void *data, int len)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
	UINT8 *src=(UINT8*)data;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	61fb      	str	r3, [r7, #28]
	char *dst = str;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	61bb      	str	r3, [r7, #24]
	dst+= sprintf(dst, "%03d ", len);
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	4913      	ldr	r1, [pc, #76]	@ (8001b0c <bin2hex+0x64>)
 8001ac0:	69b8      	ldr	r0, [r7, #24]
 8001ac2:	f00d fdcd 	bl	800f660 <siprintf>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	461a      	mov	r2, r3
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4413      	add	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
	for(int i=0; i<len; i++, src++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	e011      	b.n	8001afa <bin2hex+0x52>
	{
		dst+=sprintf(dst, "%02x ", *src);
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	490c      	ldr	r1, [pc, #48]	@ (8001b10 <bin2hex+0x68>)
 8001ade:	69b8      	ldr	r0, [r7, #24]
 8001ae0:	f00d fdbe 	bl	800f660 <siprintf>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	4413      	add	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
	for(int i=0; i<len; i++, src++)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	3301      	adds	r3, #1
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	dbe9      	blt.n	8001ad6 <bin2hex+0x2e>
	}
	return str;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	08013830 	.word	0x08013830
 8001b10:	08013838 	.word	0x08013838

08001b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b1a:	f001 f909 	bl	8002d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b1e:	f000 f85f 	bl	8001be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b22:	f000 fa75 	bl	8002010 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001b26:	f000 fa43 	bl	8001fb0 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8001b2a:	f00c f805 	bl	800db38 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8001b2e:	f000 f95f 	bl	8001df0 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001b32:	f000 f8b9 	bl	8001ca8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001b36:	f000 f8f7 	bl	8001d28 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001b3a:	f000 f9b3 	bl	8001ea4 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001b3e:	f000 fa05 	bl	8001f4c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001b42:	213c      	movs	r1, #60	@ 0x3c
 8001b44:	481f      	ldr	r0, [pc, #124]	@ (8001bc4 <main+0xb0>)
 8001b46:	f005 ff59 	bl	80079fc <HAL_TIM_Encoder_Start>

  // Kick off asynchronous UART RCV
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&RxDataFERAG, 1);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	491e      	ldr	r1, [pc, #120]	@ (8001bc8 <main+0xb4>)
 8001b4e:	481f      	ldr	r0, [pc, #124]	@ (8001bcc <main+0xb8>)
 8001b50:	f006 ff02 	bl	8008958 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&RxDataNUC, 1);
 8001b54:	2201      	movs	r2, #1
 8001b56:	491e      	ldr	r1, [pc, #120]	@ (8001bd0 <main+0xbc>)
 8001b58:	481e      	ldr	r0, [pc, #120]	@ (8001bd4 <main+0xc0>)
 8001b5a:	f006 fefd 	bl	8008958 <HAL_UART_Receive_IT>

  term_init();
 8001b5e:	f001 f819 	bl	8002b94 <term_init>
  enc_init();
 8001b62:	f7ff fd21 	bl	80015a8 <enc_init>
  box_init();
 8001b66:	f7ff f973 	bl	8000e50 <box_init>

  power_nuc(TRUE);
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f000 fc38 	bl	80023e0 <power_nuc>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	AD55936_init(&hi2c1, 0x10 << 1);
 8001b70:	2120      	movs	r1, #32
 8001b72:	4819      	ldr	r0, [pc, #100]	@ (8001bd8 <main+0xc4>)
 8001b74:	f7ff f8be 	bl	8000cf4 <AD55936_init>
	int _ticks=0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	607b      	str	r3, [r7, #4]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		int ticks= HAL_GetTick();
 8001b7c:	f001 f932 	bl	8002de4 <HAL_GetTick>
 8001b80:	4603      	mov	r3, r0
 8001b82:	603b      	str	r3, [r7, #0]

		while (ticks-_ticks>9)
 8001b84:	e013      	b.n	8001bae <main+0x9a>
		{
			_tick_10ms(ticks);
 8001b86:	6838      	ldr	r0, [r7, #0]
 8001b88:	f000 fb30 	bl	80021ec <_tick_10ms>
			_ticks=ticks;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	607b      	str	r3, [r7, #4]
			if (_powerDisplay && _ticks>_powerDisplay)
 8001b90:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <main+0xc8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00a      	beq.n	8001bae <main+0x9a>
 8001b98:	4b10      	ldr	r3, [pc, #64]	@ (8001bdc <main+0xc8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	dd05      	ble.n	8001bae <main+0x9a>
			{
				_powerDisplay=0;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <main+0xc8>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
				power_display(TRUE);
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f000 fc31 	bl	8002410 <power_display>
		while (ticks-_ticks>9)
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b09      	cmp	r3, #9
 8001bb6:	dce6      	bgt.n	8001b86 <main+0x72>
			}
		}
		box_idle();
 8001bb8:	f7ff f9f4 	bl	8000fa4 <box_idle>
		term_idle();
 8001bbc:	f001 f816 	bl	8002bec <term_idle>
	{
 8001bc0:	e7dc      	b.n	8001b7c <main+0x68>
 8001bc2:	bf00      	nop
 8001bc4:	20000544 	.word	0x20000544
 8001bc8:	200006a1 	.word	0x200006a1
 8001bcc:	20000590 	.word	0x20000590
 8001bd0:	200006a0 	.word	0x200006a0
 8001bd4:	20000618 	.word	0x20000618
 8001bd8:	20000458 	.word	0x20000458
 8001bdc:	20000014 	.word	0x20000014

08001be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b09a      	sub	sp, #104	@ 0x68
 8001be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bea:	2228      	movs	r2, #40	@ 0x28
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00d fe5a 	bl	800f8a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c04:	463b      	mov	r3, r7
 8001c06:	222c      	movs	r2, #44	@ 0x2c
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f00d fe4c 	bl	800f8a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001c10:	2303      	movs	r3, #3
 8001c12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c22:	2310      	movs	r3, #16
 8001c24:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c26:	2302      	movs	r3, #2
 8001c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c2e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001c30:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c34:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c36:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 fe8c 	bl	8005958 <HAL_RCC_OscConfig>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001c46:	f000 fc8f 	bl	8002568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c4a:	230f      	movs	r3, #15
 8001c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c64:	2102      	movs	r1, #2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f004 feb4 	bl	80069d4 <HAL_RCC_ClockConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001c72:	f000 fc79 	bl	8002568 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8001c76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <SystemClock_Config+0xc4>)
 8001c78:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001c86:	2300      	movs	r3, #0
 8001c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f005 f8d9 	bl	8006e44 <HAL_RCCEx_PeriphCLKConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001c98:	f000 fc66 	bl	8002568 <Error_Handler>
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	3768      	adds	r7, #104	@ 0x68
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	00020025 	.word	0x00020025

08001ca8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <MX_I2C1_Init+0x74>)
 8001cae:	4a1c      	ldr	r2, [pc, #112]	@ (8001d20 <MX_I2C1_Init+0x78>)
 8001cb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d1c <MX_I2C1_Init+0x74>)
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001d24 <MX_I2C1_Init+0x7c>)
 8001cb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001cb8:	4b18      	ldr	r3, [pc, #96]	@ (8001d1c <MX_I2C1_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cbe:	4b17      	ldr	r3, [pc, #92]	@ (8001d1c <MX_I2C1_Init+0x74>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cc4:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <MX_I2C1_Init+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cca:	4b14      	ldr	r3, [pc, #80]	@ (8001d1c <MX_I2C1_Init+0x74>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cd0:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <MX_I2C1_Init+0x74>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cd6:	4b11      	ldr	r3, [pc, #68]	@ (8001d1c <MX_I2C1_Init+0x74>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d1c <MX_I2C1_Init+0x74>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ce2:	480e      	ldr	r0, [pc, #56]	@ (8001d1c <MX_I2C1_Init+0x74>)
 8001ce4:	f001 fbbc 	bl	8003460 <HAL_I2C_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cee:	f000 fc3b 	bl	8002568 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4809      	ldr	r0, [pc, #36]	@ (8001d1c <MX_I2C1_Init+0x74>)
 8001cf6:	f002 f8bf 	bl	8003e78 <HAL_I2CEx_ConfigAnalogFilter>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d00:	f000 fc32 	bl	8002568 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d04:	2100      	movs	r1, #0
 8001d06:	4805      	ldr	r0, [pc, #20]	@ (8001d1c <MX_I2C1_Init+0x74>)
 8001d08:	f002 f901 	bl	8003f0e <HAL_I2CEx_ConfigDigitalFilter>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d12:	f000 fc29 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000458 	.word	0x20000458
 8001d20:	40005400 	.word	0x40005400
 8001d24:	2000090e 	.word	0x2000090e

08001d28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	@ 0x28
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
//	PWM for encoder output
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2e:	f107 0320 	add.w	r3, r7, #32
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]
 8001d46:	615a      	str	r2, [r3, #20]
 8001d48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d4a:	4b28      	ldr	r3, [pc, #160]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001d4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d52:	4b26      	ldr	r3, [pc, #152]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d58:	4b24      	ldr	r3, [pc, #144]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d5e:	4b23      	ldr	r3, [pc, #140]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295
 8001d64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d66:	4b21      	ldr	r3, [pc, #132]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d72:	481e      	ldr	r0, [pc, #120]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001d74:	f005 faf2 	bl	800735c <HAL_TIM_PWM_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d7e:	f000 fbf3 	bl	8002568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d8a:	f107 0320 	add.w	r3, r7, #32
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4816      	ldr	r0, [pc, #88]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001d92:	f006 fc23 	bl	80085dc <HAL_TIMEx_MasterConfigSynchronization>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001d9c:	f000 fbe4 	bl	8002568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001da0:	2360      	movs	r3, #96	@ 0x60
 8001da2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	2200      	movs	r2, #0
 8001db4:	4619      	mov	r1, r3
 8001db6:	480d      	ldr	r0, [pc, #52]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001db8:	f005 ffb6 	bl	8007d28 <HAL_TIM_PWM_ConfigChannel>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001dc2:	f000 fbd1 	bl	8002568 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	2204      	movs	r2, #4
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4807      	ldr	r0, [pc, #28]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001dce:	f005 ffab 	bl	8007d28 <HAL_TIM_PWM_ConfigChannel>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001dd8:	f000 fbc6 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ddc:	4803      	ldr	r0, [pc, #12]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001dde:	f000 fccb 	bl	8002778 <HAL_TIM_MspPostInit>

}
 8001de2:	bf00      	nop
 8001de4:	3728      	adds	r7, #40	@ 0x28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200004ac 	.word	0x200004ac

08001df0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001df6:	f107 0308 	add.w	r3, r7, #8
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e04:	463b      	mov	r3, r7
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e0c:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <MX_TIM3_Init+0xac>)
 8001e0e:	4a24      	ldr	r2, [pc, #144]	@ (8001ea0 <MX_TIM3_Init+0xb0>)
 8001e10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 8001e12:	4b22      	ldr	r3, [pc, #136]	@ (8001e9c <MX_TIM3_Init+0xac>)
 8001e14:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001e18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001e1a:	4b20      	ldr	r3, [pc, #128]	@ (8001e9c <MX_TIM3_Init+0xac>)
 8001e1c:	2210      	movs	r2, #16
 8001e1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001e20:	4b1e      	ldr	r3, [pc, #120]	@ (8001e9c <MX_TIM3_Init+0xac>)
 8001e22:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001e26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e28:	4b1c      	ldr	r3, [pc, #112]	@ (8001e9c <MX_TIM3_Init+0xac>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e9c <MX_TIM3_Init+0xac>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e34:	4819      	ldr	r0, [pc, #100]	@ (8001e9c <MX_TIM3_Init+0xac>)
 8001e36:	f005 f979 	bl	800712c <HAL_TIM_Base_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001e40:	f000 fb92 	bl	8002568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e4a:	f107 0308 	add.w	r3, r7, #8
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4812      	ldr	r0, [pc, #72]	@ (8001e9c <MX_TIM3_Init+0xac>)
 8001e52:	f006 f82b 	bl	8007eac <HAL_TIM_ConfigClockSource>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e5c:	f000 fb84 	bl	8002568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e68:	463b      	mov	r3, r7
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480b      	ldr	r0, [pc, #44]	@ (8001e9c <MX_TIM3_Init+0xac>)
 8001e6e:	f006 fbb5 	bl	80085dc <HAL_TIMEx_MasterConfigSynchronization>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e78:	f000 fb76 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK) {
 8001e7c:	4807      	ldr	r0, [pc, #28]	@ (8001e9c <MX_TIM3_Init+0xac>)
 8001e7e:	f005 fa05 	bl	800728c <HAL_TIM_Base_Start_IT>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM3_Init+0x9c>
		Error_Handler();
 8001e88:	f000 fb6e 	bl	8002568 <Error_Handler>
	}
	HAL_TIM_Base_Start(&htim3);
 8001e8c:	4803      	ldr	r0, [pc, #12]	@ (8001e9c <MX_TIM3_Init+0xac>)
 8001e8e:	f005 f99d 	bl	80071cc <HAL_TIM_Base_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200004f8 	.word	0x200004f8
 8001ea0:	40000400 	.word	0x40000400

08001ea4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	@ 0x30
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	2224      	movs	r2, #36	@ 0x24
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f00d fcf8 	bl	800f8a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ec0:	4b20      	ldr	r3, [pc, #128]	@ (8001f44 <MX_TIM5_Init+0xa0>)
 8001ec2:	4a21      	ldr	r2, [pc, #132]	@ (8001f48 <MX_TIM5_Init+0xa4>)
 8001ec4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f44 <MX_TIM5_Init+0xa0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f44 <MX_TIM5_Init+0xa0>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f44 <MX_TIM5_Init+0xa0>)
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eda:	4b1a      	ldr	r3, [pc, #104]	@ (8001f44 <MX_TIM5_Init+0xa0>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ee0:	4b18      	ldr	r3, [pc, #96]	@ (8001f44 <MX_TIM5_Init+0xa0>)
 8001ee2:	2280      	movs	r2, #128	@ 0x80
 8001ee4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001ef6:	230a      	movs	r3, #10
 8001ef8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001efe:	2301      	movs	r3, #1
 8001f00:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001f06:	230a      	movs	r3, #10
 8001f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001f0a:	f107 030c 	add.w	r3, r7, #12
 8001f0e:	4619      	mov	r1, r3
 8001f10:	480c      	ldr	r0, [pc, #48]	@ (8001f44 <MX_TIM5_Init+0xa0>)
 8001f12:	f005 fccd 	bl	80078b0 <HAL_TIM_Encoder_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001f1c:	f000 fb24 	bl	8002568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f20:	2300      	movs	r3, #0
 8001f22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4805      	ldr	r0, [pc, #20]	@ (8001f44 <MX_TIM5_Init+0xa0>)
 8001f2e:	f006 fb55 	bl	80085dc <HAL_TIMEx_MasterConfigSynchronization>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001f38:	f000 fb16 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f3c:	bf00      	nop
 8001f3e:	3730      	adds	r7, #48	@ 0x30
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000544 	.word	0x20000544
 8001f48:	40000c00 	.word	0x40000c00

08001f4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f50:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <MX_USART1_UART_Init+0x5c>)
 8001f52:	4a16      	ldr	r2, [pc, #88]	@ (8001fac <MX_USART1_UART_Init+0x60>)
 8001f54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001f56:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <MX_USART1_UART_Init+0x5c>)
 8001f58:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001f5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001f5e:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <MX_USART1_UART_Init+0x5c>)
 8001f60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f64:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f66:	4b10      	ldr	r3, [pc, #64]	@ (8001fa8 <MX_USART1_UART_Init+0x5c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <MX_USART1_UART_Init+0x5c>)
 8001f6e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001f72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f74:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <MX_USART1_UART_Init+0x5c>)
 8001f76:	220c      	movs	r2, #12
 8001f78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <MX_USART1_UART_Init+0x5c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f80:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <MX_USART1_UART_Init+0x5c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f86:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <MX_USART1_UART_Init+0x5c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <MX_USART1_UART_Init+0x5c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f92:	4805      	ldr	r0, [pc, #20]	@ (8001fa8 <MX_USART1_UART_Init+0x5c>)
 8001f94:	f006 fbaa 	bl	80086ec <HAL_UART_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001f9e:	f000 fae3 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000590 	.word	0x20000590
 8001fac:	40013800 	.word	0x40013800

08001fb0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fb6:	4a15      	ldr	r2, [pc, #84]	@ (800200c <MX_USART3_UART_Init+0x5c>)
 8001fb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fba:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc2:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fda:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe0:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fe6:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ff2:	4805      	ldr	r0, [pc, #20]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001ff4:	f006 fb7a 	bl	80086ec <HAL_UART_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ffe:	f000 fab3 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000618 	.word	0x20000618
 800200c:	40004800 	.word	0x40004800

08002010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	@ 0x28
 8002014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
 8002024:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002026:	4b3b      	ldr	r3, [pc, #236]	@ (8002114 <MX_GPIO_Init+0x104>)
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	4a3a      	ldr	r2, [pc, #232]	@ (8002114 <MX_GPIO_Init+0x104>)
 800202c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002030:	6153      	str	r3, [r2, #20]
 8002032:	4b38      	ldr	r3, [pc, #224]	@ (8002114 <MX_GPIO_Init+0x104>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	4b35      	ldr	r3, [pc, #212]	@ (8002114 <MX_GPIO_Init+0x104>)
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	4a34      	ldr	r2, [pc, #208]	@ (8002114 <MX_GPIO_Init+0x104>)
 8002044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002048:	6153      	str	r3, [r2, #20]
 800204a:	4b32      	ldr	r3, [pc, #200]	@ (8002114 <MX_GPIO_Init+0x104>)
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002056:	4b2f      	ldr	r3, [pc, #188]	@ (8002114 <MX_GPIO_Init+0x104>)
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	4a2e      	ldr	r2, [pc, #184]	@ (8002114 <MX_GPIO_Init+0x104>)
 800205c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002060:	6153      	str	r3, [r2, #20]
 8002062:	4b2c      	ldr	r3, [pc, #176]	@ (8002114 <MX_GPIO_Init+0x104>)
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800206e:	4b29      	ldr	r3, [pc, #164]	@ (8002114 <MX_GPIO_Init+0x104>)
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	4a28      	ldr	r2, [pc, #160]	@ (8002114 <MX_GPIO_Init+0x104>)
 8002074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002078:	6153      	str	r3, [r2, #20]
 800207a:	4b26      	ldr	r3, [pc, #152]	@ (8002114 <MX_GPIO_Init+0x104>)
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 8002086:	2200      	movs	r2, #0
 8002088:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800208c:	4822      	ldr	r0, [pc, #136]	@ (8002118 <MX_GPIO_Init+0x108>)
 800208e:	f001 f9cf 	bl	8003430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, NUC_PWR_EN_Pin|DISPLAY_PWR_EN_Pin, GPIO_PIN_RESET);
 8002092:	2200      	movs	r2, #0
 8002094:	21c0      	movs	r1, #192	@ 0xc0
 8002096:	4821      	ldr	r0, [pc, #132]	@ (800211c <MX_GPIO_Init+0x10c>)
 8002098:	f001 f9ca 	bl	8003430 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIP_5_Pin DIP_4_Pin DIP_3_Pin DIP_2_Pin
                           DIP_1_Pin DIP_0_Pin */
  GPIO_InitStruct.Pin = DIP_5_Pin|DIP_4_Pin|DIP_3_Pin|DIP_2_Pin
 800209c:	f44f 73be 	mov.w	r3, #380	@ 0x17c
 80020a0:	617b      	str	r3, [r7, #20]
                          |DIP_1_Pin|DIP_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	4619      	mov	r1, r3
 80020b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020b4:	f001 f82a 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pin : PRINT_GO_Pin */
  GPIO_InitStruct.Pin = PRINT_GO_Pin;
 80020b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020be:	2301      	movs	r3, #1
 80020c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PRINT_GO_GPIO_Port, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	4811      	ldr	r0, [pc, #68]	@ (8002118 <MX_GPIO_Init+0x108>)
 80020d2:	f001 f81b 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pin : PRINT_DONE_Pin */
  GPIO_InitStruct.Pin = PRINT_DONE_Pin;
 80020d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020dc:	2300      	movs	r3, #0
 80020de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PRINT_DONE_GPIO_Port, &GPIO_InitStruct);
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4619      	mov	r1, r3
 80020ea:	480b      	ldr	r0, [pc, #44]	@ (8002118 <MX_GPIO_Init+0x108>)
 80020ec:	f001 f80e 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pins : NUC_PWR_EN_Pin DISPLAY_PWR_EN_Pin */
  GPIO_InitStruct.Pin = NUC_PWR_EN_Pin|DISPLAY_PWR_EN_Pin;
 80020f0:	23c0      	movs	r3, #192	@ 0xc0
 80020f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f4:	2301      	movs	r3, #1
 80020f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fc:	2300      	movs	r3, #0
 80020fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	4619      	mov	r1, r3
 8002106:	4805      	ldr	r0, [pc, #20]	@ (800211c <MX_GPIO_Init+0x10c>)
 8002108:	f001 f800 	bl	800310c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800210c:	bf00      	nop
 800210e:	3728      	adds	r7, #40	@ 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000
 8002118:	48001000 	.word	0x48001000
 800211c:	48001400 	.word	0x48001400

08002120 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//--- HAL_TIM_PeriodElapsedCallback -------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	if (htim==&htim3) enc_in_irq(htim);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a05      	ldr	r2, [pc, #20]	@ (8002140 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d102      	bne.n	8002136 <HAL_TIM_PeriodElapsedCallback+0x16>
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff fa49 	bl	80015c8 <enc_in_irq>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200004f8 	.word	0x200004f8

08002144 <enc_get_pos>:

//--- enc_get_pos -------------------------------------
int32_t	enc_get_pos(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5);
 8002148:	4b03      	ldr	r3, [pc, #12]	@ (8002158 <enc_get_pos+0x14>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	20000544 	.word	0x20000544

0800215c <HAL_UART_RxCpltCallback>:

// UART RX Interrupt function override
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a11      	ldr	r2, [pc, #68]	@ (80021b0 <HAL_UART_RxCpltCallback+0x54>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d10b      	bne.n	8002186 <HAL_UART_RxCpltCallback+0x2a>
	{
		box_handle_ferag_char(RxDataFERAG);
 800216e:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <HAL_UART_RxCpltCallback+0x58>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe ffd3 	bl	8001120 <box_handle_ferag_char>
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&RxDataFERAG, 1);
 800217a:	2201      	movs	r2, #1
 800217c:	490d      	ldr	r1, [pc, #52]	@ (80021b4 <HAL_UART_RxCpltCallback+0x58>)
 800217e:	480e      	ldr	r0, [pc, #56]	@ (80021b8 <HAL_UART_RxCpltCallback+0x5c>)
 8002180:	f006 fbea 	bl	8008958 <HAL_UART_Receive_IT>
	else if (huart->Instance == USART3)
	{
		term_handle_char(RxDataNUC);
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&RxDataNUC, 1);
	}
}
 8002184:	e00f      	b.n	80021a6 <HAL_UART_RxCpltCallback+0x4a>
	else if (huart->Instance == USART3)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a0c      	ldr	r2, [pc, #48]	@ (80021bc <HAL_UART_RxCpltCallback+0x60>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d10a      	bne.n	80021a6 <HAL_UART_RxCpltCallback+0x4a>
		term_handle_char(RxDataNUC);
 8002190:	4b0b      	ldr	r3, [pc, #44]	@ (80021c0 <HAL_UART_RxCpltCallback+0x64>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	4618      	mov	r0, r3
 8002198:	f000 fd08 	bl	8002bac <term_handle_char>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&RxDataNUC, 1);
 800219c:	2201      	movs	r2, #1
 800219e:	4908      	ldr	r1, [pc, #32]	@ (80021c0 <HAL_UART_RxCpltCallback+0x64>)
 80021a0:	4808      	ldr	r0, [pc, #32]	@ (80021c4 <HAL_UART_RxCpltCallback+0x68>)
 80021a2:	f006 fbd9 	bl	8008958 <HAL_UART_Receive_IT>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40013800 	.word	0x40013800
 80021b4:	200006a1 	.word	0x200006a1
 80021b8:	20000590 	.word	0x20000590
 80021bc:	40004800 	.word	0x40004800
 80021c0:	200006a0 	.word	0x200006a0
 80021c4:	20000618 	.word	0x20000618

080021c8 <ferag_send_char>:

//--- ferag_send_char -----------------------
void ferag_send_char(char data)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 80021d2:	1df9      	adds	r1, r7, #7
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295
 80021d8:	2201      	movs	r2, #1
 80021da:	4803      	ldr	r0, [pc, #12]	@ (80021e8 <ferag_send_char+0x20>)
 80021dc:	f006 fad4 	bl	8008788 <HAL_UART_Transmit>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000590 	.word	0x20000590

080021ec <_tick_10ms>:

//--- _tick_10ms ---------------------
static void _tick_10ms(int ticks)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	box_tick_10ms(ticks);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7fe fedf 	bl	8000fb8 <box_tick_10ms>
	enc_tick_10ms(ticks);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff fa3e 	bl	800167c <enc_tick_10ms>
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <adc_get_value>:

//--- adc_get_value --------------------------
float adc_get_value(int no, float factor)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	ed87 0a00 	vstr	s0, [r7]
	uint16_t val;
	AD5593R_ReadADC(&hi2c1, 0x10 << 1, no, &val);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	f107 030e 	add.w	r3, r7, #14
 800221c:	2120      	movs	r1, #32
 800221e:	480b      	ldr	r0, [pc, #44]	@ (800224c <adc_get_value+0x44>)
 8002220:	f7fe fdb3 	bl	8000d8a <AD5593R_ReadADC>
	return ((float)val * factor) / 4095.0;
 8002224:	89fb      	ldrh	r3, [r7, #14]
 8002226:	ee07 3a90 	vmov	s15, r3
 800222a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800222e:	edd7 7a00 	vldr	s15, [r7]
 8002232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002236:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002250 <adc_get_value+0x48>
 800223a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800223e:	eef0 7a66 	vmov.f32	s15, s13
}
 8002242:	eeb0 0a67 	vmov.f32	s0, s15
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000458 	.word	0x20000458
 8002250:	457ff000 	.word	0x457ff000

08002254 <adc_get_temp>:

//--- adc_get_temp --------------------------------------
float adc_get_temp(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
    const float ADC_25 = 819.0; // ADC value at 25 degrees Celsius
 800225a:	4b10      	ldr	r3, [pc, #64]	@ (800229c <adc_get_temp+0x48>)
 800225c:	60fb      	str	r3, [r7, #12]
    const float SLOPE = 2.654; // ADC counts per degree Celsius
 800225e:	4b10      	ldr	r3, [pc, #64]	@ (80022a0 <adc_get_temp+0x4c>)
 8002260:	60bb      	str	r3, [r7, #8]
	uint16_t val;
	AD5593R_ReadADC(&hi2c1, 0x10 << 1, 8, &val);
 8002262:	1dbb      	adds	r3, r7, #6
 8002264:	2208      	movs	r2, #8
 8002266:	2120      	movs	r1, #32
 8002268:	480e      	ldr	r0, [pc, #56]	@ (80022a4 <adc_get_temp+0x50>)
 800226a:	f7fe fd8e 	bl	8000d8a <AD5593R_ReadADC>
    return 25.0 + ((float)val - ADC_25) / SLOPE;
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	ee07 3a90 	vmov	s15, r3
 8002274:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002278:	edd7 7a03 	vldr	s15, [r7, #12]
 800227c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002280:	ed97 7a02 	vldr	s14, [r7, #8]
 8002284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002288:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800228c:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8002290:	eeb0 0a67 	vmov.f32	s0, s15
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	444cc000 	.word	0x444cc000
 80022a0:	4029db23 	.word	0x4029db23
 80022a4:	20000458 	.word	0x20000458

080022a8 <adc_get_revision>:

//--- adc_get_revision ------------------------------------
uint8_t adc_get_revision(float val)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	ed87 0a01 	vstr	s0, [r7, #4]
	const float baseVoltage = 0.075f; // Base voltage (0.1V - 0.025V)
 80022b2:	4b1e      	ldr	r3, [pc, #120]	@ (800232c <adc_get_revision+0x84>)
 80022b4:	617b      	str	r3, [r7, #20]
    const float increment = 0.1f; // Voltage increment per revision
 80022b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002330 <adc_get_revision+0x88>)
 80022b8:	613b      	str	r3, [r7, #16]
    const float maxValidVoltage = 26.0f; // Example: max expected voltage, adjust based on your last revision
 80022ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002334 <adc_get_revision+0x8c>)
 80022bc:	60fb      	str	r3, [r7, #12]

    if (val < baseVoltage || val > maxValidVoltage) return 0; // Invalid voltage
 80022be:	ed97 7a01 	vldr	s14, [r7, #4]
 80022c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80022c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ce:	d408      	bmi.n	80022e2 <adc_get_revision+0x3a>
 80022d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80022d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80022d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e0:	dd01      	ble.n	80022e6 <adc_get_revision+0x3e>
 80022e2:	2300      	movs	r3, #0
 80022e4:	e01d      	b.n	8002322 <adc_get_revision+0x7a>

    return (uint8_t)floor((val - baseVoltage) / increment) + 1;
 80022e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80022ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80022ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80022f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80022fa:	ee16 0a90 	vmov	r0, s13
 80022fe:	f7fe f923 	bl	8000548 <__aeabi_f2d>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	ec43 2b10 	vmov	d0, r2, r3
 800230a:	f011 f8fd 	bl	8013508 <floor>
 800230e:	ec53 2b10 	vmov	r2, r3, d0
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	f7fe fc47 	bl	8000ba8 <__aeabi_d2uiz>
 800231a:	4603      	mov	r3, r0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	3301      	adds	r3, #1
 8002320:	b2db      	uxtb	r3, r3
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	3d99999a 	.word	0x3d99999a
 8002330:	3dcccccd 	.word	0x3dcccccd
 8002334:	41d00000 	.word	0x41d00000

08002338 <gpio_get_dipswitches>:

//--- gpio_get_dipswitches -------------------------------
uint8_t gpio_get_dipswitches(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
    uint8_t dipswitches = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	71fb      	strb	r3, [r7, #7]

    if (HAL_GPIO_ReadPin(DIP_0_GPIO_Port, DIP_0_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 0;
 8002342:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002346:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800234a:	f001 f859 	bl	8003400 <HAL_GPIO_ReadPin>
 800234e:	4603      	mov	r3, r0
 8002350:	2b01      	cmp	r3, #1
 8002352:	d103      	bne.n	800235c <gpio_get_dipswitches+0x24>
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_1_GPIO_Port, DIP_1_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 1;
 800235c:	2140      	movs	r1, #64	@ 0x40
 800235e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002362:	f001 f84d 	bl	8003400 <HAL_GPIO_ReadPin>
 8002366:	4603      	mov	r3, r0
 8002368:	2b01      	cmp	r3, #1
 800236a:	d103      	bne.n	8002374 <gpio_get_dipswitches+0x3c>
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	f043 0302 	orr.w	r3, r3, #2
 8002372:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_2_GPIO_Port, DIP_2_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 2;
 8002374:	2120      	movs	r1, #32
 8002376:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800237a:	f001 f841 	bl	8003400 <HAL_GPIO_ReadPin>
 800237e:	4603      	mov	r3, r0
 8002380:	2b01      	cmp	r3, #1
 8002382:	d103      	bne.n	800238c <gpio_get_dipswitches+0x54>
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	f043 0304 	orr.w	r3, r3, #4
 800238a:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_3_GPIO_Port, DIP_3_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 3;
 800238c:	2110      	movs	r1, #16
 800238e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002392:	f001 f835 	bl	8003400 <HAL_GPIO_ReadPin>
 8002396:	4603      	mov	r3, r0
 8002398:	2b01      	cmp	r3, #1
 800239a:	d103      	bne.n	80023a4 <gpio_get_dipswitches+0x6c>
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	f043 0308 	orr.w	r3, r3, #8
 80023a2:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_4_GPIO_Port, DIP_4_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 4;
 80023a4:	2108      	movs	r1, #8
 80023a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023aa:	f001 f829 	bl	8003400 <HAL_GPIO_ReadPin>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d103      	bne.n	80023bc <gpio_get_dipswitches+0x84>
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	f043 0310 	orr.w	r3, r3, #16
 80023ba:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_5_GPIO_Port, DIP_5_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 5;
 80023bc:	2104      	movs	r1, #4
 80023be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023c2:	f001 f81d 	bl	8003400 <HAL_GPIO_ReadPin>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d103      	bne.n	80023d4 <gpio_get_dipswitches+0x9c>
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	f043 0320 	orr.w	r3, r3, #32
 80023d2:	71fb      	strb	r3, [r7, #7]

    return dipswitches;
 80023d4:	79fb      	ldrb	r3, [r7, #7]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <power_nuc>:

//--- power_nuc -----------------------------
void    power_nuc(int on)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	if (on) HAL_GPIO_WritePin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin, GPIO_PIN_SET);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <power_nuc+0x1a>
 80023ee:	2201      	movs	r2, #1
 80023f0:	2140      	movs	r1, #64	@ 0x40
 80023f2:	4806      	ldr	r0, [pc, #24]	@ (800240c <power_nuc+0x2c>)
 80023f4:	f001 f81c 	bl	8003430 <HAL_GPIO_WritePin>
	else 	HAL_GPIO_WritePin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin, GPIO_PIN_RESET);
}
 80023f8:	e004      	b.n	8002404 <power_nuc+0x24>
	else 	HAL_GPIO_WritePin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2140      	movs	r1, #64	@ 0x40
 80023fe:	4803      	ldr	r0, [pc, #12]	@ (800240c <power_nuc+0x2c>)
 8002400:	f001 f816 	bl	8003430 <HAL_GPIO_WritePin>
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	48001400 	.word	0x48001400

08002410 <power_display>:

//--- power_display -------------------------
void    power_display(int on)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	if (on) HAL_GPIO_WritePin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin, GPIO_PIN_SET);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <power_display+0x1a>
 800241e:	2201      	movs	r2, #1
 8002420:	2180      	movs	r1, #128	@ 0x80
 8002422:	4806      	ldr	r0, [pc, #24]	@ (800243c <power_display+0x2c>)
 8002424:	f001 f804 	bl	8003430 <HAL_GPIO_WritePin>
	else 	HAL_GPIO_WritePin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin, GPIO_PIN_RESET);
}
 8002428:	e004      	b.n	8002434 <power_display+0x24>
	else 	HAL_GPIO_WritePin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin, GPIO_PIN_RESET);
 800242a:	2200      	movs	r2, #0
 800242c:	2180      	movs	r1, #128	@ 0x80
 800242e:	4803      	ldr	r0, [pc, #12]	@ (800243c <power_display+0x2c>)
 8002430:	f000 fffe 	bl	8003430 <HAL_GPIO_WritePin>
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	48001400 	.word	0x48001400

08002440 <_nuc_send_next>:

void _nuc_send_next()
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
	if (_NUC_InIdx!=_NUC_StartIdx && !_NUC_Busy)
 8002446:	4b1e      	ldr	r3, [pc, #120]	@ (80024c0 <_nuc_send_next+0x80>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	4b1e      	ldr	r3, [pc, #120]	@ (80024c4 <_nuc_send_next+0x84>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d031      	beq.n	80024b6 <_nuc_send_next+0x76>
 8002452:	4b1d      	ldr	r3, [pc, #116]	@ (80024c8 <_nuc_send_next+0x88>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d12d      	bne.n	80024b6 <_nuc_send_next+0x76>
	{
		int time=HAL_GetTick();
 800245a:	f000 fcc3 	bl	8002de4 <HAL_GetTick>
 800245e:	4603      	mov	r3, r0
 8002460:	607b      	str	r3, [r7, #4]
		_NUC_Busy = TRUE;
 8002462:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <_nuc_send_next+0x88>)
 8002464:	2201      	movs	r2, #1
 8002466:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, TxDataNuc[_NUC_StartIdx], TxDataLenNuc[_NUC_StartIdx]); // NUC
 8002468:	4b16      	ldr	r3, [pc, #88]	@ (80024c4 <_nuc_send_next+0x84>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	025b      	lsls	r3, r3, #9
 800246e:	4a17      	ldr	r2, [pc, #92]	@ (80024cc <_nuc_send_next+0x8c>)
 8002470:	1899      	adds	r1, r3, r2
 8002472:	4b14      	ldr	r3, [pc, #80]	@ (80024c4 <_nuc_send_next+0x84>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a16      	ldr	r2, [pc, #88]	@ (80024d0 <_nuc_send_next+0x90>)
 8002478:	5cd3      	ldrb	r3, [r2, r3]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	4815      	ldr	r0, [pc, #84]	@ (80024d4 <_nuc_send_next+0x94>)
 8002480:	f006 fa0c 	bl	800889c <HAL_UART_Transmit_IT>
		_NUC_StartIdx = (_NUC_StartIdx+1) % NUC_FIFO_CNT;
 8002484:	4b0f      	ldr	r3, [pc, #60]	@ (80024c4 <_nuc_send_next+0x84>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	3301      	adds	r3, #1
 800248a:	425a      	negs	r2, r3
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	f002 0203 	and.w	r2, r2, #3
 8002494:	bf58      	it	pl
 8002496:	4253      	negpl	r3, r2
 8002498:	4a0a      	ldr	r2, [pc, #40]	@ (80024c4 <_nuc_send_next+0x84>)
 800249a:	6013      	str	r3, [r2, #0]
	    time=HAL_GetTick()-time;
 800249c:	f000 fca2 	bl	8002de4 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	607b      	str	r3, [r7, #4]
	    if (time>1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	dd03      	ble.n	80024b6 <_nuc_send_next+0x76>
	    	printf("WARN: UART send time=%d\n", time);
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4809      	ldr	r0, [pc, #36]	@ (80024d8 <_nuc_send_next+0x98>)
 80024b2:	f00d f865 	bl	800f580 <iprintf>
	}
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000ea8 	.word	0x20000ea8
 80024c4:	20000eac 	.word	0x20000eac
 80024c8:	20000eb0 	.word	0x20000eb0
 80024cc:	200006a4 	.word	0x200006a4
 80024d0:	20000ea4 	.word	0x20000ea4
 80024d4:	20000618 	.word	0x20000618
 80024d8:	08013848 	.word	0x08013848

080024dc <HAL_UART_TxCpltCallback>:

//--- HAL_UART_TxCpltCallback ---------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	_NUC_Busy = FALSE;
 80024e4:	4b04      	ldr	r3, [pc, #16]	@ (80024f8 <HAL_UART_TxCpltCallback+0x1c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
	_nuc_send_next();
 80024ea:	f7ff ffa9 	bl	8002440 <_nuc_send_next>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000eb0 	.word	0x20000eb0

080024fc <_write>:

//--- WRITE_PROTOTYPE ----------------------------------------------------
// Retarget stdout to UART and CDC
WRITE_PROTOTYPE {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
                }
            }
        }
    }
	*/
	int idx = (_NUC_InIdx+1) % NUC_FIFO_CNT;
 8002508:	4b14      	ldr	r3, [pc, #80]	@ (800255c <_write+0x60>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3301      	adds	r3, #1
 800250e:	425a      	negs	r2, r3
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	f002 0203 	and.w	r2, r2, #3
 8002518:	bf58      	it	pl
 800251a:	4253      	negpl	r3, r2
 800251c:	617b      	str	r3, [r7, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800251e:	b672      	cpsid	i
}
 8002520:	bf00      	nop
	__disable_irq();
	TxDataLenNuc[_NUC_InIdx] = len;
 8002522:	4b0e      	ldr	r3, [pc, #56]	@ (800255c <_write+0x60>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	b2d1      	uxtb	r1, r2
 800252a:	4a0d      	ldr	r2, [pc, #52]	@ (8002560 <_write+0x64>)
 800252c:	54d1      	strb	r1, [r2, r3]
	memcpy(&TxDataNuc[_NUC_InIdx], ptr, len);
 800252e:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <_write+0x60>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	025b      	lsls	r3, r3, #9
 8002534:	4a0b      	ldr	r2, [pc, #44]	@ (8002564 <_write+0x68>)
 8002536:	4413      	add	r3, r2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	68b9      	ldr	r1, [r7, #8]
 800253c:	4618      	mov	r0, r3
 800253e:	f00d fa5a 	bl	800f9f6 <memcpy>
	_NUC_InIdx = idx;
 8002542:	4a06      	ldr	r2, [pc, #24]	@ (800255c <_write+0x60>)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002548:	b662      	cpsie	i
}
 800254a:	bf00      	nop
	__enable_irq();

	_nuc_send_next();
 800254c:	f7ff ff78 	bl	8002440 <_nuc_send_next>
  //  HAL_UART_Transmit_IT(&huart1, ptr, len); // debugging
    time=HAL_GetTick()-time;
    if (time>0)
    	printf("WARN: UART send time=%d\n", time);
    	*/
    return len; // Return the number of characters written
 8002550:	687b      	ldr	r3, [r7, #4]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000ea8 	.word	0x20000ea8
 8002560:	20000ea4 	.word	0x20000ea4
 8002564:	200006a4 	.word	0x200006a4

08002568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800256c:	b672      	cpsid	i
}
 800256e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002570:	e7fe      	b.n	8002570 <Error_Handler+0x8>
	...

08002574 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257a:	4b12      	ldr	r3, [pc, #72]	@ (80025c4 <HAL_MspInit+0x50>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	4a11      	ldr	r2, [pc, #68]	@ (80025c4 <HAL_MspInit+0x50>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6193      	str	r3, [r2, #24]
 8002586:	4b0f      	ldr	r3, [pc, #60]	@ (80025c4 <HAL_MspInit+0x50>)
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002592:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <HAL_MspInit+0x50>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	4a0b      	ldr	r2, [pc, #44]	@ (80025c4 <HAL_MspInit+0x50>)
 8002598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800259c:	61d3      	str	r3, [r2, #28]
 800259e:	4b09      	ldr	r3, [pc, #36]	@ (80025c4 <HAL_MspInit+0x50>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	2005      	movs	r0, #5
 80025b0:	f000 fcff 	bl	8002fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80025b4:	2005      	movs	r0, #5
 80025b6:	f000 fd18 	bl	8002fea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000

080025c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	@ 0x28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a17      	ldr	r2, [pc, #92]	@ (8002644 <HAL_I2C_MspInit+0x7c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d127      	bne.n	800263a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ea:	4b17      	ldr	r3, [pc, #92]	@ (8002648 <HAL_I2C_MspInit+0x80>)
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	4a16      	ldr	r2, [pc, #88]	@ (8002648 <HAL_I2C_MspInit+0x80>)
 80025f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025f4:	6153      	str	r3, [r2, #20]
 80025f6:	4b14      	ldr	r3, [pc, #80]	@ (8002648 <HAL_I2C_MspInit+0x80>)
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002602:	23c0      	movs	r3, #192	@ 0xc0
 8002604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002606:	2312      	movs	r3, #18
 8002608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800260e:	2303      	movs	r3, #3
 8002610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002612:	2304      	movs	r3, #4
 8002614:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002616:	f107 0314 	add.w	r3, r7, #20
 800261a:	4619      	mov	r1, r3
 800261c:	480b      	ldr	r0, [pc, #44]	@ (800264c <HAL_I2C_MspInit+0x84>)
 800261e:	f000 fd75 	bl	800310c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002622:	4b09      	ldr	r3, [pc, #36]	@ (8002648 <HAL_I2C_MspInit+0x80>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	4a08      	ldr	r2, [pc, #32]	@ (8002648 <HAL_I2C_MspInit+0x80>)
 8002628:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800262c:	61d3      	str	r3, [r2, #28]
 800262e:	4b06      	ldr	r3, [pc, #24]	@ (8002648 <HAL_I2C_MspInit+0x80>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800263a:	bf00      	nop
 800263c:	3728      	adds	r7, #40	@ 0x28
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40005400 	.word	0x40005400
 8002648:	40021000 	.word	0x40021000
 800264c:	48000400 	.word	0x48000400

08002650 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002660:	d113      	bne.n	800268a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002662:	4b0c      	ldr	r3, [pc, #48]	@ (8002694 <HAL_TIM_PWM_MspInit+0x44>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4a0b      	ldr	r2, [pc, #44]	@ (8002694 <HAL_TIM_PWM_MspInit+0x44>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	61d3      	str	r3, [r2, #28]
 800266e:	4b09      	ldr	r3, [pc, #36]	@ (8002694 <HAL_TIM_PWM_MspInit+0x44>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	201c      	movs	r0, #28
 8002680:	f000 fc97 	bl	8002fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002684:	201c      	movs	r0, #28
 8002686:	f000 fcb0 	bl	8002fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000

08002698 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a0d      	ldr	r2, [pc, #52]	@ (80026dc <HAL_TIM_Base_MspInit+0x44>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d113      	bne.n	80026d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026aa:	4b0d      	ldr	r3, [pc, #52]	@ (80026e0 <HAL_TIM_Base_MspInit+0x48>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	4a0c      	ldr	r2, [pc, #48]	@ (80026e0 <HAL_TIM_Base_MspInit+0x48>)
 80026b0:	f043 0302 	orr.w	r3, r3, #2
 80026b4:	61d3      	str	r3, [r2, #28]
 80026b6:	4b0a      	ldr	r3, [pc, #40]	@ (80026e0 <HAL_TIM_Base_MspInit+0x48>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	201d      	movs	r0, #29
 80026c8:	f000 fc73 	bl	8002fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026cc:	201d      	movs	r0, #29
 80026ce:	f000 fc8c 	bl	8002fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40000400 	.word	0x40000400
 80026e0:	40021000 	.word	0x40021000

080026e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	@ 0x28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a1b      	ldr	r2, [pc, #108]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d130      	bne.n	8002768 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002706:	4b1b      	ldr	r3, [pc, #108]	@ (8002774 <HAL_TIM_Encoder_MspInit+0x90>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4a1a      	ldr	r2, [pc, #104]	@ (8002774 <HAL_TIM_Encoder_MspInit+0x90>)
 800270c:	f043 0308 	orr.w	r3, r3, #8
 8002710:	61d3      	str	r3, [r2, #28]
 8002712:	4b18      	ldr	r3, [pc, #96]	@ (8002774 <HAL_TIM_Encoder_MspInit+0x90>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271e:	4b15      	ldr	r3, [pc, #84]	@ (8002774 <HAL_TIM_Encoder_MspInit+0x90>)
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	4a14      	ldr	r2, [pc, #80]	@ (8002774 <HAL_TIM_Encoder_MspInit+0x90>)
 8002724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002728:	6153      	str	r3, [r2, #20]
 800272a:	4b12      	ldr	r3, [pc, #72]	@ (8002774 <HAL_TIM_Encoder_MspInit+0x90>)
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002736:	2303      	movs	r3, #3
 8002738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002742:	2300      	movs	r3, #0
 8002744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002746:	2302      	movs	r3, #2
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	4619      	mov	r1, r3
 8002750:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002754:	f000 fcda 	bl	800310c <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002758:	2200      	movs	r2, #0
 800275a:	2100      	movs	r1, #0
 800275c:	2032      	movs	r0, #50	@ 0x32
 800275e:	f000 fc28 	bl	8002fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002762:	2032      	movs	r0, #50	@ 0x32
 8002764:	f000 fc41 	bl	8002fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002768:	bf00      	nop
 800276a:	3728      	adds	r7, #40	@ 0x28
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40000c00 	.word	0x40000c00
 8002774:	40021000 	.word	0x40021000

08002778 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	@ 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002798:	d139      	bne.n	800280e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279a:	4b1f      	ldr	r3, [pc, #124]	@ (8002818 <HAL_TIM_MspPostInit+0xa0>)
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	4a1e      	ldr	r2, [pc, #120]	@ (8002818 <HAL_TIM_MspPostInit+0xa0>)
 80027a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027a4:	6153      	str	r3, [r2, #20]
 80027a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002818 <HAL_TIM_MspPostInit+0xa0>)
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b2:	4b19      	ldr	r3, [pc, #100]	@ (8002818 <HAL_TIM_MspPostInit+0xa0>)
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	4a18      	ldr	r2, [pc, #96]	@ (8002818 <HAL_TIM_MspPostInit+0xa0>)
 80027b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027bc:	6153      	str	r3, [r2, #20]
 80027be:	4b16      	ldr	r3, [pc, #88]	@ (8002818 <HAL_TIM_MspPostInit+0xa0>)
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_OUT_A_Pin;
 80027ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d0:	2302      	movs	r3, #2
 80027d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	2300      	movs	r3, #0
 80027da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027dc:	2301      	movs	r3, #1
 80027de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ENC_OUT_A_GPIO_Port, &GPIO_InitStruct);
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	4619      	mov	r1, r3
 80027e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027ea:	f000 fc8f 	bl	800310c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_OUT_B_Pin;
 80027ee:	2308      	movs	r3, #8
 80027f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fa:	2300      	movs	r3, #0
 80027fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027fe:	2301      	movs	r3, #1
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ENC_OUT_B_GPIO_Port, &GPIO_InitStruct);
 8002802:	f107 0314 	add.w	r3, r7, #20
 8002806:	4619      	mov	r1, r3
 8002808:	4804      	ldr	r0, [pc, #16]	@ (800281c <HAL_TIM_MspPostInit+0xa4>)
 800280a:	f000 fc7f 	bl	800310c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800280e:	bf00      	nop
 8002810:	3728      	adds	r7, #40	@ 0x28
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000
 800281c:	48000400 	.word	0x48000400

08002820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08c      	sub	sp, #48	@ 0x30
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 031c 	add.w	r3, r7, #28
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a37      	ldr	r2, [pc, #220]	@ (800291c <HAL_UART_MspInit+0xfc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d132      	bne.n	80028a8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002842:	4b37      	ldr	r3, [pc, #220]	@ (8002920 <HAL_UART_MspInit+0x100>)
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	4a36      	ldr	r2, [pc, #216]	@ (8002920 <HAL_UART_MspInit+0x100>)
 8002848:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800284c:	6193      	str	r3, [r2, #24]
 800284e:	4b34      	ldr	r3, [pc, #208]	@ (8002920 <HAL_UART_MspInit+0x100>)
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285a:	4b31      	ldr	r3, [pc, #196]	@ (8002920 <HAL_UART_MspInit+0x100>)
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	4a30      	ldr	r2, [pc, #192]	@ (8002920 <HAL_UART_MspInit+0x100>)
 8002860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002864:	6153      	str	r3, [r2, #20]
 8002866:	4b2e      	ldr	r3, [pc, #184]	@ (8002920 <HAL_UART_MspInit+0x100>)
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS422_COM_TX_Pin|RS422_COM_RX_Pin;
 8002872:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002884:	2307      	movs	r3, #7
 8002886:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002888:	f107 031c 	add.w	r3, r7, #28
 800288c:	4619      	mov	r1, r3
 800288e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002892:	f000 fc3b 	bl	800310c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2100      	movs	r1, #0
 800289a:	2025      	movs	r0, #37	@ 0x25
 800289c:	f000 fb89 	bl	8002fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028a0:	2025      	movs	r0, #37	@ 0x25
 80028a2:	f000 fba2 	bl	8002fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028a6:	e035      	b.n	8002914 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002924 <HAL_UART_MspInit+0x104>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d130      	bne.n	8002914 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002920 <HAL_UART_MspInit+0x100>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002920 <HAL_UART_MspInit+0x100>)
 80028b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028bc:	61d3      	str	r3, [r2, #28]
 80028be:	4b18      	ldr	r3, [pc, #96]	@ (8002920 <HAL_UART_MspInit+0x100>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ca:	4b15      	ldr	r3, [pc, #84]	@ (8002920 <HAL_UART_MspInit+0x100>)
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	4a14      	ldr	r2, [pc, #80]	@ (8002920 <HAL_UART_MspInit+0x100>)
 80028d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028d4:	6153      	str	r3, [r2, #20]
 80028d6:	4b12      	ldr	r3, [pc, #72]	@ (8002920 <HAL_UART_MspInit+0x100>)
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_NUC_TX_Pin|UART_NUC_RX_Pin;
 80028e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028f0:	2303      	movs	r3, #3
 80028f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028f4:	2307      	movs	r3, #7
 80028f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	4619      	mov	r1, r3
 80028fe:	480a      	ldr	r0, [pc, #40]	@ (8002928 <HAL_UART_MspInit+0x108>)
 8002900:	f000 fc04 	bl	800310c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002904:	2200      	movs	r2, #0
 8002906:	2100      	movs	r1, #0
 8002908:	2027      	movs	r0, #39	@ 0x27
 800290a:	f000 fb52 	bl	8002fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800290e:	2027      	movs	r0, #39	@ 0x27
 8002910:	f000 fb6b 	bl	8002fea <HAL_NVIC_EnableIRQ>
}
 8002914:	bf00      	nop
 8002916:	3730      	adds	r7, #48	@ 0x30
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40013800 	.word	0x40013800
 8002920:	40021000 	.word	0x40021000
 8002924:	40004800 	.word	0x40004800
 8002928:	48000400 	.word	0x48000400

0800292c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002930:	e7fe      	b.n	8002930 <NMI_Handler+0x4>

08002932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002936:	e7fe      	b.n	8002936 <HardFault_Handler+0x4>

08002938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800293c:	e7fe      	b.n	800293c <MemManage_Handler+0x4>

0800293e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002942:	e7fe      	b.n	8002942 <BusFault_Handler+0x4>

08002944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002948:	e7fe      	b.n	8002948 <UsageFault_Handler+0x4>

0800294a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002978:	f000 fa20 	bl	8002dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800297c:	bf00      	nop
 800297e:	bd80      	pop	{r7, pc}

08002980 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002994:	4802      	ldr	r0, [pc, #8]	@ (80029a0 <TIM2_IRQHandler+0x10>)
 8002996:	f005 f8bf 	bl	8007b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200004ac 	.word	0x200004ac

080029a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029a8:	4802      	ldr	r0, [pc, #8]	@ (80029b4 <TIM3_IRQHandler+0x10>)
 80029aa:	f005 f8b5 	bl	8007b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200004f8 	.word	0x200004f8

080029b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029bc:	4802      	ldr	r0, [pc, #8]	@ (80029c8 <USART1_IRQHandler+0x10>)
 80029be:	f006 f80f 	bl	80089e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000590 	.word	0x20000590

080029cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80029d0:	4802      	ldr	r0, [pc, #8]	@ (80029dc <USART3_IRQHandler+0x10>)
 80029d2:	f006 f805 	bl	80089e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000618 	.word	0x20000618

080029e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80029e4:	4802      	ldr	r0, [pc, #8]	@ (80029f0 <TIM5_IRQHandler+0x10>)
 80029e6:	f005 f897 	bl	8007b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000544 	.word	0x20000544

080029f4 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority global interrupt.
  */
void USB_HP_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80029f8:	4802      	ldr	r0, [pc, #8]	@ (8002a04 <USB_HP_IRQHandler+0x10>)
 80029fa:	f001 fbcc 	bl	8004196 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20001c08 	.word	0x20001c08

08002a08 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority global interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002a0c:	4802      	ldr	r0, [pc, #8]	@ (8002a18 <USB_LP_IRQHandler+0x10>)
 8002a0e:	f001 fbc2 	bl	8004196 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20001c08 	.word	0x20001c08

08002a1c <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
	return 1;
 8002a20:	2301      	movs	r3, #1
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <_kill>:

int _kill(int pid, int sig) {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8002a36:	f00c ffb1 	bl	800f99c <__errno>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2216      	movs	r2, #22
 8002a3e:	601a      	str	r2, [r3, #0]
	return -1;
 8002a40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <_exit>:

void _exit(int status) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a54:	f04f 31ff 	mov.w	r1, #4294967295
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ffe7 	bl	8002a2c <_kill>
	while (1) {
 8002a5e:	e7fe      	b.n	8002a5e <_exit+0x12>

08002a60 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	e00a      	b.n	8002a88 <_read+0x28>
		*ptr++ = __io_getchar();
 8002a72:	f3af 8000 	nop.w
 8002a76:	4601      	mov	r1, r0
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	60ba      	str	r2, [r7, #8]
 8002a7e:	b2ca      	uxtb	r2, r1
 8002a80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	3301      	adds	r3, #1
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	dbf0      	blt.n	8002a72 <_read+0x12>
	}

	return len;
 8002a90:	687b      	ldr	r3, [r7, #4]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ac2:	605a      	str	r2, [r3, #4]
	return 0;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <_isatty>:

int _isatty(int file) {
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002ada:	2301      	movs	r3, #1
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002b0c:	4a14      	ldr	r2, [pc, #80]	@ (8002b60 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002b0e:	4b15      	ldr	r3, [pc, #84]	@ (8002b64 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002b18:	4b13      	ldr	r3, [pc, #76]	@ (8002b68 <_sbrk+0x64>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002b20:	4b11      	ldr	r3, [pc, #68]	@ (8002b68 <_sbrk+0x64>)
 8002b22:	4a12      	ldr	r2, [pc, #72]	@ (8002b6c <_sbrk+0x68>)
 8002b24:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002b26:	4b10      	ldr	r3, [pc, #64]	@ (8002b68 <_sbrk+0x64>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d207      	bcs.n	8002b44 <_sbrk+0x40>
		errno = ENOMEM;
 8002b34:	f00c ff32 	bl	800f99c <__errno>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	220c      	movs	r2, #12
 8002b3c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b42:	e009      	b.n	8002b58 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002b44:	4b08      	ldr	r3, [pc, #32]	@ (8002b68 <_sbrk+0x64>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002b4a:	4b07      	ldr	r3, [pc, #28]	@ (8002b68 <_sbrk+0x64>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	4a05      	ldr	r2, [pc, #20]	@ (8002b68 <_sbrk+0x64>)
 8002b54:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002b56:	68fb      	ldr	r3, [r7, #12]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20008000 	.word	0x20008000
 8002b64:	00000400 	.word	0x00000400
 8002b68:	20000eb4 	.word	0x20000eb4
 8002b6c:	20002260 	.word	0x20002260

08002b70 <SystemInit>:
/**
 * @brief  Setup the microcontroller system
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
	/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002b74:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <SystemInit+0x20>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b7a:	4a05      	ldr	r2, [pc, #20]	@ (8002b90 <SystemInit+0x20>)
 8002b7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <term_init>:
static char _Input[128];
static int	_InputLen=0;

//--- terminal_init --------------------------------
void term_init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
	memset(_Input, 0, sizeof(_Input));
 8002b98:	2280      	movs	r2, #128	@ 0x80
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4802      	ldr	r0, [pc, #8]	@ (8002ba8 <term_init+0x14>)
 8002b9e:	f00c fe83 	bl	800f8a8 <memset>
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000eb8 	.word	0x20000eb8

08002bac <term_handle_char>:
//--- term_handle_char -------------------------
void term_handle_char(char ch)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71fb      	strb	r3, [r7, #7]
	if (_InputLen<sizeof(_Input)) _Input[_InputLen++] = ch;
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002be4 <term_handle_char+0x38>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bbc:	d808      	bhi.n	8002bd0 <term_handle_char+0x24>
 8002bbe:	4b09      	ldr	r3, [pc, #36]	@ (8002be4 <term_handle_char+0x38>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	4907      	ldr	r1, [pc, #28]	@ (8002be4 <term_handle_char+0x38>)
 8002bc6:	600a      	str	r2, [r1, #0]
 8002bc8:	4907      	ldr	r1, [pc, #28]	@ (8002be8 <term_handle_char+0x3c>)
 8002bca:	79fa      	ldrb	r2, [r7, #7]
 8002bcc:	54ca      	strb	r2, [r1, r3]
	else _InputLen=0;
//	putchar(ch);
}
 8002bce:	e002      	b.n	8002bd6 <term_handle_char+0x2a>
	else _InputLen=0;
 8002bd0:	4b04      	ldr	r3, [pc, #16]	@ (8002be4 <term_handle_char+0x38>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000f38 	.word	0x20000f38
 8002be8:	20000eb8 	.word	0x20000eb8

08002bec <term_idle>:

//--- term_idle -------------------------------
void term_idle(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
    if (_InputLen>1 && (_Input[_InputLen-1]=='\r' || _Input[_InputLen-1]=='\n'))
 8002bf2:	4b32      	ldr	r3, [pc, #200]	@ (8002cbc <term_idle+0xd0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	dd5b      	ble.n	8002cb2 <term_idle+0xc6>
 8002bfa:	4b30      	ldr	r3, [pc, #192]	@ (8002cbc <term_idle+0xd0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	4a2f      	ldr	r2, [pc, #188]	@ (8002cc0 <term_idle+0xd4>)
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	2b0d      	cmp	r3, #13
 8002c06:	d006      	beq.n	8002c16 <term_idle+0x2a>
 8002c08:	4b2c      	ldr	r3, [pc, #176]	@ (8002cbc <term_idle+0xd0>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002cc0 <term_idle+0xd4>)
 8002c10:	5cd3      	ldrb	r3, [r2, r3]
 8002c12:	2b0a      	cmp	r3, #10
 8002c14:	d14d      	bne.n	8002cb2 <term_idle+0xc6>
    {
    	char *args;
    //	printf("TERM: >>%s<<\n", _Input);
    	if (strstart(_Input, "status")) 		  		box_send_status();
 8002c16:	492b      	ldr	r1, [pc, #172]	@ (8002cc4 <term_idle+0xd8>)
 8002c18:	4829      	ldr	r0, [pc, #164]	@ (8002cc0 <term_idle+0xd4>)
 8002c1a:	f7fe ff1f 	bl	8001a5c <strstart>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <term_idle+0x3e>
 8002c24:	f7fe fc9a 	bl	800155c <box_send_status>
 8002c28:	e03b      	b.n	8002ca2 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "encoder"))) 	enc_command(args);
 8002c2a:	4927      	ldr	r1, [pc, #156]	@ (8002cc8 <term_idle+0xdc>)
 8002c2c:	4824      	ldr	r0, [pc, #144]	@ (8002cc0 <term_idle+0xd4>)
 8002c2e:	f7fe ff15 	bl	8001a5c <strstart>
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <term_idle+0x56>
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe fd84 	bl	8001748 <enc_command>
 8002c40:	e02f      	b.n	8002ca2 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "start"))) 		box_start();
 8002c42:	4922      	ldr	r1, [pc, #136]	@ (8002ccc <term_idle+0xe0>)
 8002c44:	481e      	ldr	r0, [pc, #120]	@ (8002cc0 <term_idle+0xd4>)
 8002c46:	f7fe ff09 	bl	8001a5c <strstart>
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <term_idle+0x6c>
 8002c52:	f7fe f943 	bl	8000edc <box_start>
 8002c56:	e024      	b.n	8002ca2 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "stop"))) 		box_stop();
 8002c58:	491d      	ldr	r1, [pc, #116]	@ (8002cd0 <term_idle+0xe4>)
 8002c5a:	4819      	ldr	r0, [pc, #100]	@ (8002cc0 <term_idle+0xd4>)
 8002c5c:	f7fe fefe 	bl	8001a5c <strstart>
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <term_idle+0x82>
 8002c68:	f7fe f988 	bl	8000f7c <box_stop>
 8002c6c:	e019      	b.n	8002ca2 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "pgDelay"))) 	box_set_pgDelay(atoi(args));
 8002c6e:	4919      	ldr	r1, [pc, #100]	@ (8002cd4 <term_idle+0xe8>)
 8002c70:	4813      	ldr	r0, [pc, #76]	@ (8002cc0 <term_idle+0xd4>)
 8002c72:	f7fe fef3 	bl	8001a5c <strstart>
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d007      	beq.n	8002c8e <term_idle+0xa2>
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f00b fc06 	bl	800e490 <atoi>
 8002c84:	4603      	mov	r3, r0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe f914 	bl	8000eb4 <box_set_pgDelay>
 8002c8c:	e009      	b.n	8002ca2 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "pg"))) 		box_printGo();
 8002c8e:	4912      	ldr	r1, [pc, #72]	@ (8002cd8 <term_idle+0xec>)
 8002c90:	480b      	ldr	r0, [pc, #44]	@ (8002cc0 <term_idle+0xd4>)
 8002c92:	f7fe fee3 	bl	8001a5c <strstart>
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <term_idle+0xb6>
 8002c9e:	f7fe fbdb 	bl	8001458 <box_printGo>

    	memset(_Input, 0, sizeof(_Input));
 8002ca2:	2280      	movs	r2, #128	@ 0x80
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4806      	ldr	r0, [pc, #24]	@ (8002cc0 <term_idle+0xd4>)
 8002ca8:	f00c fdfe 	bl	800f8a8 <memset>
    	_InputLen=0;
 8002cac:	4b03      	ldr	r3, [pc, #12]	@ (8002cbc <term_idle+0xd0>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
    }
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000f38 	.word	0x20000f38
 8002cc0:	20000eb8 	.word	0x20000eb8
 8002cc4:	08013864 	.word	0x08013864
 8002cc8:	0801386c 	.word	0x0801386c
 8002ccc:	08013874 	.word	0x08013874
 8002cd0:	0801387c 	.word	0x0801387c
 8002cd4:	08013884 	.word	0x08013884
 8002cd8:	0801388c 	.word	0x0801388c

08002cdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002cdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d14 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ce0:	f7ff ff46 	bl	8002b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ce4:	480c      	ldr	r0, [pc, #48]	@ (8002d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ce6:	490d      	ldr	r1, [pc, #52]	@ (8002d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d20 <LoopForever+0xe>)
  movs r3, #0
 8002cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cec:	e002      	b.n	8002cf4 <LoopCopyDataInit>

08002cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cf2:	3304      	adds	r3, #4

08002cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cf8:	d3f9      	bcc.n	8002cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8002d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8002d28 <LoopForever+0x16>)
  movs r3, #0
 8002cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d00:	e001      	b.n	8002d06 <LoopFillZerobss>

08002d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d04:	3204      	adds	r2, #4

08002d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d08:	d3fb      	bcc.n	8002d02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d0a:	f00c fe4d 	bl	800f9a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d0e:	f7fe ff01 	bl	8001b14 <main>

08002d12 <LoopForever>:

LoopForever:
    b LoopForever
 8002d12:	e7fe      	b.n	8002d12 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d14:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d1c:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 8002d20:	08013d78 	.word	0x08013d78
  ldr r2, =_sbss
 8002d24:	2000035c 	.word	0x2000035c
  ldr r4, =_ebss
 8002d28:	20002260 	.word	0x20002260

08002d2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d2c:	e7fe      	b.n	8002d2c <ADC1_IRQHandler>
	...

08002d30 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d34:	4b08      	ldr	r3, [pc, #32]	@ (8002d58 <HAL_Init+0x28>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a07      	ldr	r2, [pc, #28]	@ (8002d58 <HAL_Init+0x28>)
 8002d3a:	f043 0310 	orr.w	r3, r3, #16
 8002d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d40:	2003      	movs	r0, #3
 8002d42:	f000 f92b 	bl	8002f9c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d46:	200f      	movs	r0, #15
 8002d48:	f000 f808 	bl	8002d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d4c:	f7ff fc12 	bl	8002574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40022000 	.word	0x40022000

08002d5c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d64:	4b12      	ldr	r3, [pc, #72]	@ (8002db0 <HAL_InitTick+0x54>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b12      	ldr	r3, [pc, #72]	@ (8002db4 <HAL_InitTick+0x58>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 f943 	bl	8003006 <HAL_SYSTICK_Config>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e00e      	b.n	8002da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b0f      	cmp	r3, #15
 8002d8e:	d80a      	bhi.n	8002da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d90:	2200      	movs	r2, #0
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	f04f 30ff 	mov.w	r0, #4294967295
 8002d98:	f000 f90b 	bl	8002fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d9c:	4a06      	ldr	r2, [pc, #24]	@ (8002db8 <HAL_InitTick+0x5c>)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	e000      	b.n	8002da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20000018 	.word	0x20000018
 8002db4:	20000020 	.word	0x20000020
 8002db8:	2000001c 	.word	0x2000001c

08002dbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dc0:	4b06      	ldr	r3, [pc, #24]	@ (8002ddc <HAL_IncTick+0x20>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <HAL_IncTick+0x24>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4413      	add	r3, r2
 8002dcc:	4a04      	ldr	r2, [pc, #16]	@ (8002de0 <HAL_IncTick+0x24>)
 8002dce:	6013      	str	r3, [r2, #0]
}
 8002dd0:	bf00      	nop
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	20000020 	.word	0x20000020
 8002de0:	20000f3c 	.word	0x20000f3c

08002de4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return uwTick;  
 8002de8:	4b03      	ldr	r3, [pc, #12]	@ (8002df8 <HAL_GetTick+0x14>)
 8002dea:	681b      	ldr	r3, [r3, #0]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	20000f3c 	.word	0x20000f3c

08002dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e40 <__NVIC_SetPriorityGrouping+0x44>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e18:	4013      	ands	r3, r2
 8002e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e2e:	4a04      	ldr	r2, [pc, #16]	@ (8002e40 <__NVIC_SetPriorityGrouping+0x44>)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	60d3      	str	r3, [r2, #12]
}
 8002e34:	bf00      	nop
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e48:	4b04      	ldr	r3, [pc, #16]	@ (8002e5c <__NVIC_GetPriorityGrouping+0x18>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	0a1b      	lsrs	r3, r3, #8
 8002e4e:	f003 0307 	and.w	r3, r3, #7
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	db0b      	blt.n	8002e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	f003 021f 	and.w	r2, r3, #31
 8002e78:	4907      	ldr	r1, [pc, #28]	@ (8002e98 <__NVIC_EnableIRQ+0x38>)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	2001      	movs	r0, #1
 8002e82:	fa00 f202 	lsl.w	r2, r0, r2
 8002e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	e000e100 	.word	0xe000e100

08002e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	6039      	str	r1, [r7, #0]
 8002ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	db0a      	blt.n	8002ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	490c      	ldr	r1, [pc, #48]	@ (8002ee8 <__NVIC_SetPriority+0x4c>)
 8002eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eba:	0112      	lsls	r2, r2, #4
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ec4:	e00a      	b.n	8002edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	4908      	ldr	r1, [pc, #32]	@ (8002eec <__NVIC_SetPriority+0x50>)
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	3b04      	subs	r3, #4
 8002ed4:	0112      	lsls	r2, r2, #4
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	440b      	add	r3, r1
 8002eda:	761a      	strb	r2, [r3, #24]
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000e100 	.word	0xe000e100
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b089      	sub	sp, #36	@ 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f1c3 0307 	rsb	r3, r3, #7
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	bf28      	it	cs
 8002f0e:	2304      	movcs	r3, #4
 8002f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3304      	adds	r3, #4
 8002f16:	2b06      	cmp	r3, #6
 8002f18:	d902      	bls.n	8002f20 <NVIC_EncodePriority+0x30>
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	3b03      	subs	r3, #3
 8002f1e:	e000      	b.n	8002f22 <NVIC_EncodePriority+0x32>
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f24:	f04f 32ff 	mov.w	r2, #4294967295
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43da      	mvns	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	401a      	ands	r2, r3
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f38:	f04f 31ff 	mov.w	r1, #4294967295
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f42:	43d9      	mvns	r1, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f48:	4313      	orrs	r3, r2
         );
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3724      	adds	r7, #36	@ 0x24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
	...

08002f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f68:	d301      	bcc.n	8002f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e00f      	b.n	8002f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f98 <SysTick_Config+0x40>)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f76:	210f      	movs	r1, #15
 8002f78:	f04f 30ff 	mov.w	r0, #4294967295
 8002f7c:	f7ff ff8e 	bl	8002e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f80:	4b05      	ldr	r3, [pc, #20]	@ (8002f98 <SysTick_Config+0x40>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f86:	4b04      	ldr	r3, [pc, #16]	@ (8002f98 <SysTick_Config+0x40>)
 8002f88:	2207      	movs	r2, #7
 8002f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	e000e010 	.word	0xe000e010

08002f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff ff29 	bl	8002dfc <__NVIC_SetPriorityGrouping>
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b086      	sub	sp, #24
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	4603      	mov	r3, r0
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
 8002fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fc4:	f7ff ff3e 	bl	8002e44 <__NVIC_GetPriorityGrouping>
 8002fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	6978      	ldr	r0, [r7, #20]
 8002fd0:	f7ff ff8e 	bl	8002ef0 <NVIC_EncodePriority>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff5d 	bl	8002e9c <__NVIC_SetPriority>
}
 8002fe2:	bf00      	nop
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff ff31 	bl	8002e60 <__NVIC_EnableIRQ>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff ffa2 	bl	8002f58 <SysTick_Config>
 8003014:	4603      	mov	r3, r0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800302c:	2b02      	cmp	r3, #2
 800302e:	d008      	beq.n	8003042 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2204      	movs	r2, #4
 8003034:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e020      	b.n	8003084 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 020e 	bic.w	r2, r2, #14
 8003050:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0201 	bic.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306a:	2101      	movs	r1, #1
 800306c:	fa01 f202 	lsl.w	r2, r1, r2
 8003070:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d005      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2204      	movs	r2, #4
 80030aa:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
 80030b0:	e027      	b.n	8003102 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 020e 	bic.w	r2, r2, #14
 80030c0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0201 	bic.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030da:	2101      	movs	r1, #1
 80030dc:	fa01 f202 	lsl.w	r2, r1, r2
 80030e0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	4798      	blx	r3
    } 
  }
  return status;
 8003102:	7bfb      	ldrb	r3, [r7, #15]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800311a:	e154      	b.n	80033c6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	2101      	movs	r1, #1
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	fa01 f303 	lsl.w	r3, r1, r3
 8003128:	4013      	ands	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 8146 	beq.w	80033c0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	2b01      	cmp	r3, #1
 800313e:	d005      	beq.n	800314c <HAL_GPIO_Init+0x40>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d130      	bne.n	80031ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	2203      	movs	r2, #3
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4013      	ands	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003182:	2201      	movs	r2, #1
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4013      	ands	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	f003 0201 	and.w	r2, r3, #1
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d017      	beq.n	80031ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	2203      	movs	r2, #3
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d123      	bne.n	800323e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	08da      	lsrs	r2, r3, #3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3208      	adds	r2, #8
 80031fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003202:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	220f      	movs	r2, #15
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4013      	ands	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	691a      	ldr	r2, [r3, #16]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	08da      	lsrs	r2, r3, #3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3208      	adds	r2, #8
 8003238:	6939      	ldr	r1, [r7, #16]
 800323a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	2203      	movs	r2, #3
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 0203 	and.w	r2, r3, #3
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 80a0 	beq.w	80033c0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003280:	4b58      	ldr	r3, [pc, #352]	@ (80033e4 <HAL_GPIO_Init+0x2d8>)
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	4a57      	ldr	r2, [pc, #348]	@ (80033e4 <HAL_GPIO_Init+0x2d8>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	6193      	str	r3, [r2, #24]
 800328c:	4b55      	ldr	r3, [pc, #340]	@ (80033e4 <HAL_GPIO_Init+0x2d8>)
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003298:	4a53      	ldr	r2, [pc, #332]	@ (80033e8 <HAL_GPIO_Init+0x2dc>)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	089b      	lsrs	r3, r3, #2
 800329e:	3302      	adds	r3, #2
 80032a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	220f      	movs	r2, #15
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4013      	ands	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80032c2:	d019      	beq.n	80032f8 <HAL_GPIO_Init+0x1ec>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a49      	ldr	r2, [pc, #292]	@ (80033ec <HAL_GPIO_Init+0x2e0>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d013      	beq.n	80032f4 <HAL_GPIO_Init+0x1e8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a48      	ldr	r2, [pc, #288]	@ (80033f0 <HAL_GPIO_Init+0x2e4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00d      	beq.n	80032f0 <HAL_GPIO_Init+0x1e4>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a47      	ldr	r2, [pc, #284]	@ (80033f4 <HAL_GPIO_Init+0x2e8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d007      	beq.n	80032ec <HAL_GPIO_Init+0x1e0>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a46      	ldr	r2, [pc, #280]	@ (80033f8 <HAL_GPIO_Init+0x2ec>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d101      	bne.n	80032e8 <HAL_GPIO_Init+0x1dc>
 80032e4:	2304      	movs	r3, #4
 80032e6:	e008      	b.n	80032fa <HAL_GPIO_Init+0x1ee>
 80032e8:	2305      	movs	r3, #5
 80032ea:	e006      	b.n	80032fa <HAL_GPIO_Init+0x1ee>
 80032ec:	2303      	movs	r3, #3
 80032ee:	e004      	b.n	80032fa <HAL_GPIO_Init+0x1ee>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e002      	b.n	80032fa <HAL_GPIO_Init+0x1ee>
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <HAL_GPIO_Init+0x1ee>
 80032f8:	2300      	movs	r3, #0
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	f002 0203 	and.w	r2, r2, #3
 8003300:	0092      	lsls	r2, r2, #2
 8003302:	4093      	lsls	r3, r2
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800330a:	4937      	ldr	r1, [pc, #220]	@ (80033e8 <HAL_GPIO_Init+0x2dc>)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	3302      	adds	r3, #2
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003318:	4b38      	ldr	r3, [pc, #224]	@ (80033fc <HAL_GPIO_Init+0x2f0>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	43db      	mvns	r3, r3
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4013      	ands	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800333c:	4a2f      	ldr	r2, [pc, #188]	@ (80033fc <HAL_GPIO_Init+0x2f0>)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003342:	4b2e      	ldr	r3, [pc, #184]	@ (80033fc <HAL_GPIO_Init+0x2f0>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	43db      	mvns	r3, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4013      	ands	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003366:	4a25      	ldr	r2, [pc, #148]	@ (80033fc <HAL_GPIO_Init+0x2f0>)
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800336c:	4b23      	ldr	r3, [pc, #140]	@ (80033fc <HAL_GPIO_Init+0x2f0>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	43db      	mvns	r3, r3
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4013      	ands	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003390:	4a1a      	ldr	r2, [pc, #104]	@ (80033fc <HAL_GPIO_Init+0x2f0>)
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003396:	4b19      	ldr	r3, [pc, #100]	@ (80033fc <HAL_GPIO_Init+0x2f0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	43db      	mvns	r3, r3
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4013      	ands	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80033ba:	4a10      	ldr	r2, [pc, #64]	@ (80033fc <HAL_GPIO_Init+0x2f0>)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	3301      	adds	r3, #1
 80033c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f47f aea3 	bne.w	800311c <HAL_GPIO_Init+0x10>
  }
}
 80033d6:	bf00      	nop
 80033d8:	bf00      	nop
 80033da:	371c      	adds	r7, #28
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40010000 	.word	0x40010000
 80033ec:	48000400 	.word	0x48000400
 80033f0:	48000800 	.word	0x48000800
 80033f4:	48000c00 	.word	0x48000c00
 80033f8:	48001000 	.word	0x48001000
 80033fc:	40010400 	.word	0x40010400

08003400 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	887b      	ldrh	r3, [r7, #2]
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
 800341c:	e001      	b.n	8003422 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003422:	7bfb      	ldrb	r3, [r7, #15]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	807b      	strh	r3, [r7, #2]
 800343c:	4613      	mov	r3, r2
 800343e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003440:	787b      	ldrb	r3, [r7, #1]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003446:	887a      	ldrh	r2, [r7, #2]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800344c:	e002      	b.n	8003454 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800344e:	887a      	ldrh	r2, [r7, #2]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e081      	b.n	8003576 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff f89e 	bl	80025c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2224      	movs	r2, #36	@ 0x24
 8003490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0201 	bic.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d107      	bne.n	80034da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034d6:	609a      	str	r2, [r3, #8]
 80034d8:	e006      	b.n	80034e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80034e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d104      	bne.n	80034fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003508:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800350c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800351c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691a      	ldr	r2, [r3, #16]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69d9      	ldr	r1, [r3, #28]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1a      	ldr	r2, [r3, #32]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	461a      	mov	r2, r3
 800358c:	460b      	mov	r3, r1
 800358e:	817b      	strh	r3, [r7, #10]
 8003590:	4613      	mov	r3, r2
 8003592:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b20      	cmp	r3, #32
 800359e:	f040 80da 	bne.w	8003756 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_I2C_Master_Transmit+0x30>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e0d3      	b.n	8003758 <HAL_I2C_Master_Transmit+0x1d8>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035b8:	f7ff fc14 	bl	8002de4 <HAL_GetTick>
 80035bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	2319      	movs	r3, #25
 80035c4:	2201      	movs	r2, #1
 80035c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f9e6 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0be      	b.n	8003758 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2221      	movs	r2, #33	@ 0x21
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2210      	movs	r2, #16
 80035e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	893a      	ldrh	r2, [r7, #8]
 80035fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	2bff      	cmp	r3, #255	@ 0xff
 800360a:	d90e      	bls.n	800362a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	22ff      	movs	r2, #255	@ 0xff
 8003610:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003616:	b2da      	uxtb	r2, r3
 8003618:	8979      	ldrh	r1, [r7, #10]
 800361a:	4b51      	ldr	r3, [pc, #324]	@ (8003760 <HAL_I2C_Master_Transmit+0x1e0>)
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 fbf6 	bl	8003e14 <I2C_TransferConfig>
 8003628:	e06c      	b.n	8003704 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003638:	b2da      	uxtb	r2, r3
 800363a:	8979      	ldrh	r1, [r7, #10]
 800363c:	4b48      	ldr	r3, [pc, #288]	@ (8003760 <HAL_I2C_Master_Transmit+0x1e0>)
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fbe5 	bl	8003e14 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800364a:	e05b      	b.n	8003704 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	6a39      	ldr	r1, [r7, #32]
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f9f2 	bl	8003a3a <I2C_WaitOnTXISFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e07b      	b.n	8003758 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d034      	beq.n	8003704 <HAL_I2C_Master_Transmit+0x184>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d130      	bne.n	8003704 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	2200      	movs	r2, #0
 80036aa:	2180      	movs	r1, #128	@ 0x80
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 f975 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e04d      	b.n	8003758 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2bff      	cmp	r3, #255	@ 0xff
 80036c4:	d90e      	bls.n	80036e4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	22ff      	movs	r2, #255	@ 0xff
 80036ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	8979      	ldrh	r1, [r7, #10]
 80036d4:	2300      	movs	r3, #0
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 fb99 	bl	8003e14 <I2C_TransferConfig>
 80036e2:	e00f      	b.n	8003704 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	8979      	ldrh	r1, [r7, #10]
 80036f6:	2300      	movs	r3, #0
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 fb88 	bl	8003e14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d19e      	bne.n	800364c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	6a39      	ldr	r1, [r7, #32]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 f9d8 	bl	8003ac8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e01a      	b.n	8003758 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2220      	movs	r2, #32
 8003728:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6859      	ldr	r1, [r3, #4]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	4b0b      	ldr	r3, [pc, #44]	@ (8003764 <HAL_I2C_Master_Transmit+0x1e4>)
 8003736:	400b      	ands	r3, r1
 8003738:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2220      	movs	r2, #32
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	e000      	b.n	8003758 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003756:	2302      	movs	r3, #2
  }
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	80002000 	.word	0x80002000
 8003764:	fe00e800 	.word	0xfe00e800

08003768 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af02      	add	r7, sp, #8
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	607a      	str	r2, [r7, #4]
 8003772:	461a      	mov	r2, r3
 8003774:	460b      	mov	r3, r1
 8003776:	817b      	strh	r3, [r7, #10]
 8003778:	4613      	mov	r3, r2
 800377a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b20      	cmp	r3, #32
 8003786:	f040 80db 	bne.w	8003940 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003790:	2b01      	cmp	r3, #1
 8003792:	d101      	bne.n	8003798 <HAL_I2C_Master_Receive+0x30>
 8003794:	2302      	movs	r3, #2
 8003796:	e0d4      	b.n	8003942 <HAL_I2C_Master_Receive+0x1da>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037a0:	f7ff fb20 	bl	8002de4 <HAL_GetTick>
 80037a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	2319      	movs	r3, #25
 80037ac:	2201      	movs	r2, #1
 80037ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f8f2 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e0bf      	b.n	8003942 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2222      	movs	r2, #34	@ 0x22
 80037c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2210      	movs	r2, #16
 80037ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	893a      	ldrh	r2, [r7, #8]
 80037e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2bff      	cmp	r3, #255	@ 0xff
 80037f2:	d90e      	bls.n	8003812 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	22ff      	movs	r2, #255	@ 0xff
 80037f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	8979      	ldrh	r1, [r7, #10]
 8003802:	4b52      	ldr	r3, [pc, #328]	@ (800394c <HAL_I2C_Master_Receive+0x1e4>)
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 fb02 	bl	8003e14 <I2C_TransferConfig>
 8003810:	e06d      	b.n	80038ee <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003820:	b2da      	uxtb	r2, r3
 8003822:	8979      	ldrh	r1, [r7, #10]
 8003824:	4b49      	ldr	r3, [pc, #292]	@ (800394c <HAL_I2C_Master_Receive+0x1e4>)
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 faf1 	bl	8003e14 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003832:	e05c      	b.n	80038ee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	6a39      	ldr	r1, [r7, #32]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f989 	bl	8003b50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e07c      	b.n	8003942 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d034      	beq.n	80038ee <HAL_I2C_Master_Receive+0x186>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003888:	2b00      	cmp	r3, #0
 800388a:	d130      	bne.n	80038ee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	2200      	movs	r2, #0
 8003894:	2180      	movs	r1, #128	@ 0x80
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f880 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e04d      	b.n	8003942 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2bff      	cmp	r3, #255	@ 0xff
 80038ae:	d90e      	bls.n	80038ce <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	22ff      	movs	r2, #255	@ 0xff
 80038b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	8979      	ldrh	r1, [r7, #10]
 80038be:	2300      	movs	r3, #0
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 faa4 	bl	8003e14 <I2C_TransferConfig>
 80038cc:	e00f      	b.n	80038ee <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	8979      	ldrh	r1, [r7, #10]
 80038e0:	2300      	movs	r3, #0
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fa93 	bl	8003e14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d19d      	bne.n	8003834 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	6a39      	ldr	r1, [r7, #32]
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f8e3 	bl	8003ac8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e01a      	b.n	8003942 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2220      	movs	r2, #32
 8003912:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6859      	ldr	r1, [r3, #4]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4b0c      	ldr	r3, [pc, #48]	@ (8003950 <HAL_I2C_Master_Receive+0x1e8>)
 8003920:	400b      	ands	r3, r1
 8003922:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	e000      	b.n	8003942 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003940:	2302      	movs	r3, #2
  }
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	80002400 	.word	0x80002400
 8003950:	fe00e800 	.word	0xfe00e800

08003954 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b02      	cmp	r3, #2
 8003968:	d103      	bne.n	8003972 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2200      	movs	r2, #0
 8003970:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d007      	beq.n	8003990 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699a      	ldr	r2, [r3, #24]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	619a      	str	r2, [r3, #24]
  }
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ac:	e031      	b.n	8003a12 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b4:	d02d      	beq.n	8003a12 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b6:	f7ff fa15 	bl	8002de4 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d302      	bcc.n	80039cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d122      	bne.n	8003a12 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	4013      	ands	r3, r2
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	429a      	cmp	r2, r3
 80039da:	bf0c      	ite	eq
 80039dc:	2301      	moveq	r3, #1
 80039de:	2300      	movne	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	461a      	mov	r2, r3
 80039e4:	79fb      	ldrb	r3, [r7, #7]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d113      	bne.n	8003a12 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ee:	f043 0220 	orr.w	r2, r3, #32
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e00f      	b.n	8003a32 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699a      	ldr	r2, [r3, #24]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	bf0c      	ite	eq
 8003a22:	2301      	moveq	r3, #1
 8003a24:	2300      	movne	r3, #0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	461a      	mov	r2, r3
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d0be      	beq.n	80039ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a46:	e033      	b.n	8003ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f901 	bl	8003c54 <I2C_IsErrorOccurred>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e031      	b.n	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a62:	d025      	beq.n	8003ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a64:	f7ff f9be 	bl	8002de4 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d302      	bcc.n	8003a7a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d11a      	bne.n	8003ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d013      	beq.n	8003ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8c:	f043 0220 	orr.w	r2, r3, #32
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e007      	b.n	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d1c4      	bne.n	8003a48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ad4:	e02f      	b.n	8003b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 f8ba 	bl	8003c54 <I2C_IsErrorOccurred>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e02d      	b.n	8003b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aea:	f7ff f97b 	bl	8002de4 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d302      	bcc.n	8003b00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d11a      	bne.n	8003b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	d013      	beq.n	8003b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b12:	f043 0220 	orr.w	r2, r3, #32
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e007      	b.n	8003b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d1c8      	bne.n	8003ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b5c:	e06b      	b.n	8003c36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f876 	bl	8003c54 <I2C_IsErrorOccurred>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e069      	b.n	8003c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f003 0320 	and.w	r3, r3, #32
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d138      	bne.n	8003bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d105      	bne.n	8003b9a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	e055      	b.n	8003c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b10      	cmp	r3, #16
 8003ba6:	d107      	bne.n	8003bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2210      	movs	r2, #16
 8003bae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	645a      	str	r2, [r3, #68]	@ 0x44
 8003bb6:	e002      	b.n	8003bbe <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6859      	ldr	r1, [r3, #4]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8003c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003bd2:	400b      	ands	r3, r1
 8003bd4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e029      	b.n	8003c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf2:	f7ff f8f7 	bl	8002de4 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d302      	bcc.n	8003c08 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d116      	bne.n	8003c36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d00f      	beq.n	8003c36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1a:	f043 0220 	orr.w	r2, r3, #32
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e007      	b.n	8003c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d18c      	bne.n	8003b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	fe00e800 	.word	0xfe00e800

08003c54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08a      	sub	sp, #40	@ 0x28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d068      	beq.n	8003d52 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2210      	movs	r2, #16
 8003c86:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c88:	e049      	b.n	8003d1e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d045      	beq.n	8003d1e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c92:	f7ff f8a7 	bl	8002de4 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d302      	bcc.n	8003ca8 <I2C_IsErrorOccurred+0x54>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d13a      	bne.n	8003d1e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cca:	d121      	bne.n	8003d10 <I2C_IsErrorOccurred+0xbc>
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cd2:	d01d      	beq.n	8003d10 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d01a      	beq.n	8003d10 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ce8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003cea:	f7ff f87b 	bl	8002de4 <HAL_GetTick>
 8003cee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cf0:	e00e      	b.n	8003d10 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003cf2:	f7ff f877 	bl	8002de4 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b19      	cmp	r3, #25
 8003cfe:	d907      	bls.n	8003d10 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	f043 0320 	orr.w	r3, r3, #32
 8003d06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003d0e:	e006      	b.n	8003d1e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	d1e9      	bne.n	8003cf2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d003      	beq.n	8003d34 <I2C_IsErrorOccurred+0xe0>
 8003d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0aa      	beq.n	8003c8a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d103      	bne.n	8003d44 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2220      	movs	r2, #32
 8003d42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	f043 0304 	orr.w	r3, r3, #4
 8003d4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00b      	beq.n	8003d7c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	f043 0308 	orr.w	r3, r3, #8
 8003d8c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00b      	beq.n	8003dc0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	f043 0302 	orr.w	r3, r3, #2
 8003dae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003db8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d01c      	beq.n	8003e02 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f7ff fdc3 	bl	8003954 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6859      	ldr	r1, [r3, #4]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e10 <I2C_IsErrorOccurred+0x1bc>)
 8003dda:	400b      	ands	r3, r1
 8003ddc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003e02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3728      	adds	r7, #40	@ 0x28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	fe00e800 	.word	0xfe00e800

08003e14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	607b      	str	r3, [r7, #4]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	817b      	strh	r3, [r7, #10]
 8003e22:	4613      	mov	r3, r2
 8003e24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e26:	897b      	ldrh	r3, [r7, #10]
 8003e28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e2c:	7a7b      	ldrb	r3, [r7, #9]
 8003e2e:	041b      	lsls	r3, r3, #16
 8003e30:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e34:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e42:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	0d5b      	lsrs	r3, r3, #21
 8003e4e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003e52:	4b08      	ldr	r3, [pc, #32]	@ (8003e74 <I2C_TransferConfig+0x60>)
 8003e54:	430b      	orrs	r3, r1
 8003e56:	43db      	mvns	r3, r3
 8003e58:	ea02 0103 	and.w	r1, r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	03ff63ff 	.word	0x03ff63ff

08003e78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d138      	bne.n	8003f00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e032      	b.n	8003f02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2224      	movs	r2, #36	@ 0x24
 8003ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0201 	bic.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003eca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6819      	ldr	r1, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e000      	b.n	8003f02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f00:	2302      	movs	r3, #2
  }
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b085      	sub	sp, #20
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d139      	bne.n	8003f98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e033      	b.n	8003f9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2224      	movs	r2, #36	@ 0x24
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0201 	bic.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	021b      	lsls	r3, r3, #8
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0201 	orr.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	e000      	b.n	8003f9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f98:	2302      	movs	r3, #2
  }
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa8:	b08b      	sub	sp, #44	@ 0x2c
 8003faa:	af06      	add	r7, sp, #24
 8003fac:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0c4      	b.n	8004142 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d106      	bne.n	8003fd2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f009 ff81 	bl	800ded4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f005 ff02 	bl	8009de8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	73fb      	strb	r3, [r7, #15]
 8003fe8:	e040      	b.n	800406c <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	440b      	add	r3, r1
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	440b      	add	r3, r1
 8004010:	7bfa      	ldrb	r2, [r7, #15]
 8004012:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	440b      	add	r3, r1
 8004024:	3303      	adds	r3, #3
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800402a:	7bfa      	ldrb	r2, [r7, #15]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	440b      	add	r3, r1
 8004038:	3338      	adds	r3, #56	@ 0x38
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800403e:	7bfa      	ldrb	r2, [r7, #15]
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	440b      	add	r3, r1
 800404c:	333c      	adds	r3, #60	@ 0x3c
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004052:	7bfa      	ldrb	r2, [r7, #15]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	440b      	add	r3, r1
 8004060:	3340      	adds	r3, #64	@ 0x40
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	3301      	adds	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
 800406c:	7bfa      	ldrb	r2, [r7, #15]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	429a      	cmp	r2, r3
 8004074:	d3b9      	bcc.n	8003fea <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004076:	2300      	movs	r3, #0
 8004078:	73fb      	strb	r3, [r7, #15]
 800407a:	e044      	b.n	8004106 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800407c:	7bfa      	ldrb	r2, [r7, #15]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	440b      	add	r3, r1
 800408a:	f203 1369 	addw	r3, r3, #361	@ 0x169
 800408e:	2200      	movs	r2, #0
 8004090:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004092:	7bfa      	ldrb	r2, [r7, #15]
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	440b      	add	r3, r1
 80040a0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80040a4:	7bfa      	ldrb	r2, [r7, #15]
 80040a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040a8:	7bfa      	ldrb	r2, [r7, #15]
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	4613      	mov	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	440b      	add	r3, r1
 80040b6:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 80040ba:	2200      	movs	r2, #0
 80040bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040be:	7bfa      	ldrb	r2, [r7, #15]
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	440b      	add	r3, r1
 80040cc:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040d4:	7bfa      	ldrb	r2, [r7, #15]
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	440b      	add	r3, r1
 80040e2:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040ea:	7bfa      	ldrb	r2, [r7, #15]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	440b      	add	r3, r1
 80040f8:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	3301      	adds	r3, #1
 8004104:	73fb      	strb	r3, [r7, #15]
 8004106:	7bfa      	ldrb	r2, [r7, #15]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	429a      	cmp	r2, r3
 800410e:	d3b5      	bcc.n	800407c <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	603b      	str	r3, [r7, #0]
 8004116:	687e      	ldr	r6, [r7, #4]
 8004118:	466d      	mov	r5, sp
 800411a:	f106 0410 	add.w	r4, r6, #16
 800411e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	602b      	str	r3, [r5, #0]
 8004126:	1d33      	adds	r3, r6, #4
 8004128:	cb0e      	ldmia	r3, {r1, r2, r3}
 800412a:	6838      	ldr	r0, [r7, #0]
 800412c:	f005 fe77 	bl	8009e1e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800414a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_PCD_Start+0x16>
 800415c:	2302      	movs	r3, #2
 800415e:	e016      	b.n	800418e <HAL_PCD_Start+0x44>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f005 fe24 	bl	8009dba <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004172:	2101      	movs	r1, #1
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f00a f953 	bl	800e420 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f008 f8e3 	bl	800c34a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f008 f8dc 	bl	800c360 <USB_ReadInterrupts>
 80041a8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fab2 	bl	800471e <PCD_EP_ISR_Handler>

    return;
 80041ba:	e0bd      	b.n	8004338 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d013      	beq.n	80041ee <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041d8:	b292      	uxth	r2, r2
 80041da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f009 ff21 	bl	800e026 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80041e4:	2100      	movs	r1, #0
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f8a9 	bl	800433e <HAL_PCD_SetAddress>

    return;
 80041ec:	e0a4      	b.n	8004338 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00c      	beq.n	8004212 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004200:	b29a      	uxth	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800420a:	b292      	uxth	r2, r2
 800420c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004210:	e092      	b.n	8004338 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00c      	beq.n	8004236 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800422e:	b292      	uxth	r2, r2
 8004230:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004234:	e080      	b.n	8004338 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d027      	beq.n	8004290 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004248:	b29a      	uxth	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0204 	bic.w	r2, r2, #4
 8004252:	b292      	uxth	r2, r2
 8004254:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004260:	b29a      	uxth	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0208 	bic.w	r2, r2, #8
 800426a:	b292      	uxth	r2, r2
 800426c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f009 ff11 	bl	800e098 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800427e:	b29a      	uxth	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004288:	b292      	uxth	r2, r2
 800428a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800428e:	e053      	b.n	8004338 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004296:	2b00      	cmp	r3, #0
 8004298:	d027      	beq.n	80042ea <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0208 	orr.w	r2, r2, #8
 80042ac:	b292      	uxth	r2, r2
 80042ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042c4:	b292      	uxth	r2, r2
 80042c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0204 	orr.w	r2, r2, #4
 80042dc:	b292      	uxth	r2, r2
 80042de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f009 febe 	bl	800e064 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80042e8:	e026      	b.n	8004338 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00f      	beq.n	8004314 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004306:	b292      	uxth	r2, r2
 8004308:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f009 fe7c 	bl	800e00a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004312:	e011      	b.n	8004338 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00c      	beq.n	8004338 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004326:	b29a      	uxth	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004330:	b292      	uxth	r2, r2
 8004332:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004336:	bf00      	nop
  }
}
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	460b      	mov	r3, r1
 8004348:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_PCD_SetAddress+0x1a>
 8004354:	2302      	movs	r3, #2
 8004356:	e013      	b.n	8004380 <HAL_PCD_SetAddress+0x42>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	78fa      	ldrb	r2, [r7, #3]
 800436e:	4611      	mov	r1, r2
 8004370:	4618      	mov	r0, r3
 8004372:	f007 ffd6 	bl	800c322 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	4608      	mov	r0, r1
 8004392:	4611      	mov	r1, r2
 8004394:	461a      	mov	r2, r3
 8004396:	4603      	mov	r3, r0
 8004398:	70fb      	strb	r3, [r7, #3]
 800439a:	460b      	mov	r3, r1
 800439c:	803b      	strh	r3, [r7, #0]
 800439e:	4613      	mov	r3, r2
 80043a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	da0e      	bge.n	80043cc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	4413      	add	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2201      	movs	r2, #1
 80043c8:	705a      	strb	r2, [r3, #1]
 80043ca:	e00e      	b.n	80043ea <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	f003 0207 	and.w	r2, r3, #7
 80043d2:	4613      	mov	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	4413      	add	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043ea:	78fb      	ldrb	r3, [r7, #3]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80043f6:	883a      	ldrh	r2, [r7, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	78ba      	ldrb	r2, [r7, #2]
 8004400:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004402:	78bb      	ldrb	r3, [r7, #2]
 8004404:	2b02      	cmp	r3, #2
 8004406:	d102      	bne.n	800440e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_PCD_EP_Open+0x94>
 8004418:	2302      	movs	r3, #2
 800441a:	e00e      	b.n	800443a <HAL_PCD_EP_Open+0xb2>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68f9      	ldr	r1, [r7, #12]
 800442a:	4618      	mov	r0, r3
 800442c:	f005 fd18 	bl	8009e60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8004438:	7afb      	ldrb	r3, [r7, #11]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	460b      	mov	r3, r1
 800444c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800444e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004452:	2b00      	cmp	r3, #0
 8004454:	da0e      	bge.n	8004474 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	4413      	add	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2201      	movs	r2, #1
 8004470:	705a      	strb	r2, [r3, #1]
 8004472:	e00e      	b.n	8004492 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	f003 0207 	and.w	r2, r3, #7
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	4413      	add	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004492:	78fb      	ldrb	r3, [r7, #3]
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	b2da      	uxtb	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <HAL_PCD_EP_Close+0x6a>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e00e      	b.n	80044ca <HAL_PCD_EP_Close+0x88>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68f9      	ldr	r1, [r7, #12]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f006 f894 	bl	800a5e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b086      	sub	sp, #24
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
 80044de:	460b      	mov	r3, r1
 80044e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044e2:	7afb      	ldrb	r3, [r7, #11]
 80044e4:	f003 0207 	and.w	r2, r3, #7
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4413      	add	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2200      	movs	r2, #0
 800450a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2200      	movs	r2, #0
 8004510:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004512:	7afb      	ldrb	r3, [r7, #11]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	b2da      	uxtb	r2, r3
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6979      	ldr	r1, [r7, #20]
 8004524:	4618      	mov	r0, r3
 8004526:	f006 fa4c 	bl	800a9c2 <USB_EPStartXfer>

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	f003 0207 	and.w	r2, r3, #7
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	4613      	mov	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	440b      	add	r3, r1
 8004552:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8004556:	681b      	ldr	r3, [r3, #0]
}
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	607a      	str	r2, [r7, #4]
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	460b      	mov	r3, r1
 8004572:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004574:	7afb      	ldrb	r3, [r7, #11]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4413      	add	r3, r2
 8004588:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2200      	movs	r2, #0
 80045a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2201      	movs	r2, #1
 80045ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045b0:	7afb      	ldrb	r3, [r7, #11]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6979      	ldr	r1, [r7, #20]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f006 f9fd 	bl	800a9c2 <USB_EPStartXfer>

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	460b      	mov	r3, r1
 80045dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80045de:	78fb      	ldrb	r3, [r7, #3]
 80045e0:	f003 0207 	and.w	r2, r3, #7
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d901      	bls.n	80045f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e03e      	b.n	800466e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	da0e      	bge.n	8004616 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	4413      	add	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	705a      	strb	r2, [r3, #1]
 8004614:	e00c      	b.n	8004630 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004616:	78fa      	ldrb	r2, [r7, #3]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	4413      	add	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004636:	78fb      	ldrb	r3, [r7, #3]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	b2da      	uxtb	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_PCD_EP_SetStall+0x7e>
 800464c:	2302      	movs	r3, #2
 800464e:	e00e      	b.n	800466e <HAL_PCD_EP_SetStall+0x9c>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68f9      	ldr	r1, [r7, #12]
 800465e:	4618      	mov	r0, r3
 8004660:	f007 fd60 	bl	800c124 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004682:	78fb      	ldrb	r3, [r7, #3]
 8004684:	f003 020f 	and.w	r2, r3, #15
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	429a      	cmp	r2, r3
 800468e:	d901      	bls.n	8004694 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e040      	b.n	8004716 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004698:	2b00      	cmp	r3, #0
 800469a:	da0e      	bge.n	80046ba <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	4413      	add	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	705a      	strb	r2, [r3, #1]
 80046b8:	e00e      	b.n	80046d8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046ba:	78fb      	ldrb	r3, [r7, #3]
 80046bc:	f003 0207 	and.w	r2, r3, #7
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	4413      	add	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_PCD_EP_ClrStall+0x82>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e00e      	b.n	8004716 <HAL_PCD_EP_ClrStall+0xa0>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68f9      	ldr	r1, [r7, #12]
 8004706:	4618      	mov	r0, r3
 8004708:	f007 fd5d 	bl	800c1c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b096      	sub	sp, #88	@ 0x58
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004726:	e3be      	b.n	8004ea6 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004730:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004734:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004738:	b2db      	uxtb	r3, r3
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8004742:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004746:	2b00      	cmp	r3, #0
 8004748:	f040 8178 	bne.w	8004a3c <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800474c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b00      	cmp	r3, #0
 8004756:	d151      	bne.n	80047fc <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004764:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004768:	81fb      	strh	r3, [r7, #14]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	89fb      	ldrh	r3, [r7, #14]
 8004770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004778:	b29b      	uxth	r3, r3
 800477a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3328      	adds	r3, #40	@ 0x28
 8004780:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800478a:	b29b      	uxth	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4413      	add	r3, r2
 8004796:	3302      	adds	r3, #2
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80047ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	441a      	add	r2, r3
 80047b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80047bc:	2100      	movs	r1, #0
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f009 fc09 	bl	800dfd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 836a 	beq.w	8004ea6 <PCD_EP_ISR_Handler+0x788>
 80047d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f040 8365 	bne.w	8004ea6 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80047fa:	e354      	b.n	8004ea6 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004802:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800480e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004812:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004816:	2b00      	cmp	r3, #0
 8004818:	d034      	beq.n	8004884 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004822:	b29b      	uxth	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4413      	add	r3, r2
 800482e:	3306      	adds	r3, #6
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6812      	ldr	r2, [r2, #0]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004844:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6818      	ldr	r0, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8004850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004852:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004856:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004858:	b29b      	uxth	r3, r3
 800485a:	f007 fdd7 	bl	800c40c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	b29a      	uxth	r2, r3
 8004866:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800486a:	4013      	ands	r3, r2
 800486c:	823b      	strh	r3, [r7, #16]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	8a3a      	ldrh	r2, [r7, #16]
 8004874:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004878:	b292      	uxth	r2, r2
 800487a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f009 fb7d 	bl	800df7c <HAL_PCD_SetupStageCallback>
 8004882:	e310      	b.n	8004ea6 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004884:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004888:	2b00      	cmp	r3, #0
 800488a:	f280 830c 	bge.w	8004ea6 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	b29a      	uxth	r2, r3
 8004896:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800489a:	4013      	ands	r3, r2
 800489c:	83fb      	strh	r3, [r7, #30]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	8bfa      	ldrh	r2, [r7, #30]
 80048a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80048a8:	b292      	uxth	r2, r2
 80048aa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	4413      	add	r3, r2
 80048c0:	3306      	adds	r3, #6
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80048d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048d6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80048d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d019      	beq.n	8004914 <PCD_EP_ISR_Handler+0x1f6>
 80048e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d015      	beq.n	8004914 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6818      	ldr	r0, [r3, #0]
 80048ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ee:	6959      	ldr	r1, [r3, #20]
 80048f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80048f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f007 fd87 	bl	800c40c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80048fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	441a      	add	r2, r3
 8004908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800490a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800490c:	2100      	movs	r1, #0
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f009 fb46 	bl	800dfa0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800491e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004922:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004926:	2b00      	cmp	r3, #0
 8004928:	f040 82bd 	bne.w	8004ea6 <PCD_EP_ISR_Handler+0x788>
 800492c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004930:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004934:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004938:	f000 82b5 	beq.w	8004ea6 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800494a:	b29b      	uxth	r3, r3
 800494c:	461a      	mov	r2, r3
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	4413      	add	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	b29b      	uxth	r3, r3
 8004962:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004966:	b29a      	uxth	r2, r3
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	801a      	strh	r2, [r3, #0]
 800496c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2b3e      	cmp	r3, #62	@ 0x3e
 8004972:	d91d      	bls.n	80049b0 <PCD_EP_ISR_Handler+0x292>
 8004974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	647b      	str	r3, [r7, #68]	@ 0x44
 800497c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f003 031f 	and.w	r3, r3, #31
 8004984:	2b00      	cmp	r3, #0
 8004986:	d102      	bne.n	800498e <PCD_EP_ISR_Handler+0x270>
 8004988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800498a:	3b01      	subs	r3, #1
 800498c:	647b      	str	r3, [r7, #68]	@ 0x44
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	b29a      	uxth	r2, r3
 8004994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004996:	b29b      	uxth	r3, r3
 8004998:	029b      	lsls	r3, r3, #10
 800499a:	b29b      	uxth	r3, r3
 800499c:	4313      	orrs	r3, r2
 800499e:	b29b      	uxth	r3, r3
 80049a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	801a      	strh	r2, [r3, #0]
 80049ae:	e026      	b.n	80049fe <PCD_EP_ISR_Handler+0x2e0>
 80049b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <PCD_EP_ISR_Handler+0x2b0>
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	801a      	strh	r2, [r3, #0]
 80049cc:	e017      	b.n	80049fe <PCD_EP_ISR_Handler+0x2e0>
 80049ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	085b      	lsrs	r3, r3, #1
 80049d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80049d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <PCD_EP_ISR_Handler+0x2ca>
 80049e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049e4:	3301      	adds	r3, #1
 80049e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	029b      	lsls	r3, r3, #10
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	4313      	orrs	r3, r2
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a0e:	827b      	strh	r3, [r7, #18]
 8004a10:	8a7b      	ldrh	r3, [r7, #18]
 8004a12:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004a16:	827b      	strh	r3, [r7, #18]
 8004a18:	8a7b      	ldrh	r3, [r7, #18]
 8004a1a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a1e:	827b      	strh	r3, [r7, #18]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	8a7b      	ldrh	r3, [r7, #18]
 8004a26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	8013      	strh	r3, [r2, #0]
 8004a3a:	e234      	b.n	8004ea6 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a50:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f280 80fc 	bge.w	8004c52 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004a70:	4013      	ands	r3, r2
 8004a72:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004a88:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a8c:	b292      	uxth	r2, r2
 8004a8e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004a90:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aa8:	7b1b      	ldrb	r3, [r3, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d125      	bne.n	8004afa <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	3306      	adds	r3, #6
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ad6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004ada:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 8092 	beq.w	8004c08 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6818      	ldr	r0, [r3, #0]
 8004ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aea:	6959      	ldr	r1, [r3, #20]
 8004aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aee:	88da      	ldrh	r2, [r3, #6]
 8004af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004af4:	f007 fc8a 	bl	800c40c <USB_ReadPMA>
 8004af8:	e086      	b.n	8004c08 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004afc:	78db      	ldrb	r3, [r3, #3]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d10a      	bne.n	8004b18 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004b02:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004b06:	461a      	mov	r2, r3
 8004b08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f9d9 	bl	8004ec2 <HAL_PCD_EP_DB_Receive>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004b16:	e077      	b.n	8004c08 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b32:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	441a      	add	r2, r3
 8004b44:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004b48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	461a      	mov	r2, r3
 8004b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d024      	beq.n	8004bc0 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	4413      	add	r3, r2
 8004b8a:	3302      	adds	r3, #2
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6812      	ldr	r2, [r2, #0]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b9e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004ba2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d02e      	beq.n	8004c08 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6818      	ldr	r0, [r3, #0]
 8004bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb0:	6959      	ldr	r1, [r3, #20]
 8004bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb4:	891a      	ldrh	r2, [r3, #8]
 8004bb6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004bba:	f007 fc27 	bl	800c40c <USB_ReadPMA>
 8004bbe:	e023      	b.n	8004c08 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	461a      	mov	r2, r3
 8004bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	4413      	add	r3, r2
 8004bd4:	3306      	adds	r3, #6
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004be8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004bec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d009      	beq.n	8004c08 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bfa:	6959      	ldr	r1, [r3, #20]
 8004bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bfe:	895a      	ldrh	r2, [r3, #10]
 8004c00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004c04:	f007 fc02 	bl	800c40c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004c08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004c10:	441a      	add	r2, r3
 8004c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c14:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c18:	695a      	ldr	r2, [r3, #20]
 8004c1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004c1e:	441a      	add	r2, r3
 8004c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c22:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <PCD_EP_ISR_Handler+0x51a>
 8004c2c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d206      	bcs.n	8004c46 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f009 f9ae 	bl	800dfa0 <HAL_PCD_DataOutStageCallback>
 8004c44:	e005      	b.n	8004c52 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f005 feb8 	bl	800a9c2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004c52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 8123 	beq.w	8004ea6 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8004c60:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	4413      	add	r3, r2
 8004c72:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c8e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	441a      	add	r2, r3
 8004ca0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cb2:	78db      	ldrb	r3, [r3, #3]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	f040 80a2 	bne.w	8004dfe <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8004cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cc2:	7b1b      	ldrb	r3, [r3, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 8093 	beq.w	8004df0 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004cca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d046      	beq.n	8004d64 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cd8:	785b      	ldrb	r3, [r3, #1]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d126      	bne.n	8004d2c <PCD_EP_ISR_Handler+0x60e>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf2:	4413      	add	r3, r2
 8004cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	011a      	lsls	r2, r3, #4
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	4413      	add	r3, r2
 8004d00:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d04:	623b      	str	r3, [r7, #32]
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	801a      	strh	r2, [r3, #0]
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	801a      	strh	r2, [r3, #0]
 8004d2a:	e061      	b.n	8004df0 <PCD_EP_ISR_Handler+0x6d2>
 8004d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d2e:	785b      	ldrb	r3, [r3, #1]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d15d      	bne.n	8004df0 <PCD_EP_ISR_Handler+0x6d2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	461a      	mov	r2, r3
 8004d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d48:	4413      	add	r3, r2
 8004d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	011a      	lsls	r2, r3, #4
 8004d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d54:	4413      	add	r3, r2
 8004d56:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5e:	2200      	movs	r2, #0
 8004d60:	801a      	strh	r2, [r3, #0]
 8004d62:	e045      	b.n	8004df0 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d6c:	785b      	ldrb	r3, [r3, #1]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d126      	bne.n	8004dc0 <PCD_EP_ISR_Handler+0x6a2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	461a      	mov	r2, r3
 8004d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d86:	4413      	add	r3, r2
 8004d88:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	011a      	lsls	r2, r3, #4
 8004d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d92:	4413      	add	r3, r2
 8004d94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d98:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da8:	801a      	strh	r2, [r3, #0]
 8004daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dbc:	801a      	strh	r2, [r3, #0]
 8004dbe:	e017      	b.n	8004df0 <PCD_EP_ISR_Handler+0x6d2>
 8004dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dc2:	785b      	ldrb	r3, [r3, #1]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d113      	bne.n	8004df0 <PCD_EP_ISR_Handler+0x6d2>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dd6:	4413      	add	r3, r2
 8004dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	011a      	lsls	r2, r3, #4
 8004de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004de2:	4413      	add	r3, r2
 8004de4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004de8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dec:	2200      	movs	r2, #0
 8004dee:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004df0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	4619      	mov	r1, r3
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f009 f8ed 	bl	800dfd6 <HAL_PCD_DataInStageCallback>
 8004dfc:	e053      	b.n	8004ea6 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004dfe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d146      	bne.n	8004e98 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	461a      	mov	r2, r3
 8004e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	4413      	add	r3, r2
 8004e1e:	3302      	adds	r3, #2
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6812      	ldr	r2, [r2, #0]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e32:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d907      	bls.n	8004e52 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8004e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e4a:	1ad2      	subs	r2, r2, r3
 8004e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e4e:	619a      	str	r2, [r3, #24]
 8004e50:	e002      	b.n	8004e58 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e54:	2200      	movs	r2, #0
 8004e56:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d106      	bne.n	8004e6e <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f009 f8b5 	bl	800dfd6 <HAL_PCD_DataInStageCallback>
 8004e6c:	e01b      	b.n	8004ea6 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e70:	695a      	ldr	r2, [r3, #20]
 8004e72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e76:	441a      	add	r2, r3
 8004e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e7a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e7e:	69da      	ldr	r2, [r3, #28]
 8004e80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e84:	441a      	add	r2, r3
 8004e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e88:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e90:	4618      	mov	r0, r3
 8004e92:	f005 fd96 	bl	800a9c2 <USB_EPStartXfer>
 8004e96:	e006      	b.n	8004ea6 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004e98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f91b 	bl	80050dc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	b21b      	sxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f6ff ac38 	blt.w	8004728 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3758      	adds	r7, #88	@ 0x58
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b088      	sub	sp, #32
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d07e      	beq.n	8004fd8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	4413      	add	r3, r2
 8004eee:	3302      	adds	r3, #2
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	6812      	ldr	r2, [r2, #0]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f02:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	699a      	ldr	r2, [r3, #24]
 8004f08:	8b7b      	ldrh	r3, [r7, #26]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d306      	bcc.n	8004f1c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	8b7b      	ldrh	r3, [r7, #26]
 8004f14:	1ad2      	subs	r2, r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	619a      	str	r2, [r3, #24]
 8004f1a:	e002      	b.n	8004f22 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d123      	bne.n	8004f72 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f44:	833b      	strh	r3, [r7, #24]
 8004f46:	8b3b      	ldrh	r3, [r7, #24]
 8004f48:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004f4c:	833b      	strh	r3, [r7, #24]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	441a      	add	r2, r3
 8004f5c:	8b3b      	ldrh	r3, [r7, #24]
 8004f5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f72:	88fb      	ldrh	r3, [r7, #6]
 8004f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01f      	beq.n	8004fbc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f96:	82fb      	strh	r3, [r7, #22]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	441a      	add	r2, r3
 8004fa6:	8afb      	ldrh	r3, [r7, #22]
 8004fa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fb4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004fbc:	8b7b      	ldrh	r3, [r7, #26]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 8087 	beq.w	80050d2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6818      	ldr	r0, [r3, #0]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	6959      	ldr	r1, [r3, #20]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	891a      	ldrh	r2, [r3, #8]
 8004fd0:	8b7b      	ldrh	r3, [r7, #26]
 8004fd2:	f007 fa1b 	bl	800c40c <USB_ReadPMA>
 8004fd6:	e07c      	b.n	80050d2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	4413      	add	r3, r2
 8004fec:	3306      	adds	r3, #6
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005000:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	699a      	ldr	r2, [r3, #24]
 8005006:	8b7b      	ldrh	r3, [r7, #26]
 8005008:	429a      	cmp	r2, r3
 800500a:	d306      	bcc.n	800501a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	699a      	ldr	r2, [r3, #24]
 8005010:	8b7b      	ldrh	r3, [r7, #26]
 8005012:	1ad2      	subs	r2, r2, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	619a      	str	r2, [r3, #24]
 8005018:	e002      	b.n	8005020 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2200      	movs	r2, #0
 800501e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d123      	bne.n	8005070 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	461a      	mov	r2, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800503e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005042:	83fb      	strh	r3, [r7, #30]
 8005044:	8bfb      	ldrh	r3, [r7, #30]
 8005046:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800504a:	83fb      	strh	r3, [r7, #30]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	441a      	add	r2, r3
 800505a:	8bfb      	ldrh	r3, [r7, #30]
 800505c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800506c:	b29b      	uxth	r3, r3
 800506e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	d11f      	bne.n	80050ba <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005090:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005094:	83bb      	strh	r3, [r7, #28]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	441a      	add	r2, r3
 80050a4:	8bbb      	ldrh	r3, [r7, #28]
 80050a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80050ba:	8b7b      	ldrh	r3, [r7, #26]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d008      	beq.n	80050d2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	6959      	ldr	r1, [r3, #20]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	895a      	ldrh	r2, [r3, #10]
 80050cc:	8b7b      	ldrh	r3, [r7, #26]
 80050ce:	f007 f99d 	bl	800c40c <USB_ReadPMA>
    }
  }

  return count;
 80050d2:	8b7b      	ldrh	r3, [r7, #26]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3720      	adds	r7, #32
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b0a4      	sub	sp, #144	@ 0x90
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	4613      	mov	r3, r2
 80050e8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050ea:	88fb      	ldrh	r3, [r7, #6]
 80050ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 81dd 	beq.w	80054b0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050fe:	b29b      	uxth	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	4413      	add	r3, r2
 800510a:	3302      	adds	r3, #2
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	6812      	ldr	r2, [r2, #0]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800511e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	699a      	ldr	r2, [r3, #24]
 8005126:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800512a:	429a      	cmp	r2, r3
 800512c:	d907      	bls.n	800513e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	699a      	ldr	r2, [r3, #24]
 8005132:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005136:	1ad2      	subs	r2, r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	619a      	str	r2, [r3, #24]
 800513c:	e002      	b.n	8005144 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2200      	movs	r2, #0
 8005142:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	2b00      	cmp	r3, #0
 800514a:	f040 80b9 	bne.w	80052c0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	785b      	ldrb	r3, [r3, #1]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d126      	bne.n	80051a4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005164:	b29b      	uxth	r3, r3
 8005166:	461a      	mov	r2, r3
 8005168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800516a:	4413      	add	r3, r2
 800516c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	011a      	lsls	r2, r3, #4
 8005174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005176:	4413      	add	r3, r2
 8005178:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800517c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800517e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005188:	b29a      	uxth	r2, r3
 800518a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518c:	801a      	strh	r2, [r3, #0]
 800518e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	b29b      	uxth	r3, r3
 8005194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800519c:	b29a      	uxth	r2, r3
 800519e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a0:	801a      	strh	r2, [r3, #0]
 80051a2:	e01a      	b.n	80051da <HAL_PCD_EP_DB_Transmit+0xfe>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	785b      	ldrb	r3, [r3, #1]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d116      	bne.n	80051da <HAL_PCD_EP_DB_Transmit+0xfe>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c0:	4413      	add	r3, r2
 80051c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	011a      	lsls	r2, r3, #4
 80051ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051cc:	4413      	add	r3, r2
 80051ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80051d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80051d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d6:	2200      	movs	r2, #0
 80051d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	627b      	str	r3, [r7, #36]	@ 0x24
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	785b      	ldrb	r3, [r3, #1]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d126      	bne.n	8005236 <HAL_PCD_EP_DB_Transmit+0x15a>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	61fb      	str	r3, [r7, #28]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	461a      	mov	r2, r3
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	4413      	add	r3, r2
 80051fe:	61fb      	str	r3, [r7, #28]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	011a      	lsls	r2, r3, #4
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	4413      	add	r3, r2
 800520a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800520e:	61bb      	str	r3, [r7, #24]
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800521a:	b29a      	uxth	r2, r3
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	801a      	strh	r2, [r3, #0]
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
 8005226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800522a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800522e:	b29a      	uxth	r2, r3
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	801a      	strh	r2, [r3, #0]
 8005234:	e017      	b.n	8005266 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	785b      	ldrb	r3, [r3, #1]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d113      	bne.n	8005266 <HAL_PCD_EP_DB_Transmit+0x18a>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005246:	b29b      	uxth	r3, r3
 8005248:	461a      	mov	r2, r3
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	4413      	add	r3, r2
 800524e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	011a      	lsls	r2, r3, #4
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005258:	4413      	add	r3, r2
 800525a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800525e:	623b      	str	r3, [r7, #32]
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	2200      	movs	r2, #0
 8005264:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	4619      	mov	r1, r3
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f008 feb2 	bl	800dfd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005272:	88fb      	ldrh	r3, [r7, #6]
 8005274:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 82fc 	beq.w	8005876 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	b29b      	uxth	r3, r3
 8005290:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005298:	82fb      	strh	r3, [r7, #22]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	461a      	mov	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	441a      	add	r2, r3
 80052a8:	8afb      	ldrh	r3, [r7, #22]
 80052aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	8013      	strh	r3, [r2, #0]
 80052be:	e2da      	b.n	8005876 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80052c0:	88fb      	ldrh	r3, [r7, #6]
 80052c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d021      	beq.n	800530e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	461a      	mov	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	461a      	mov	r2, r3
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	441a      	add	r2, r3
 80052f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80052fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005302:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800530a:	b29b      	uxth	r3, r3
 800530c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005314:	2b01      	cmp	r3, #1
 8005316:	f040 82ae 	bne.w	8005876 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	695a      	ldr	r2, [r3, #20]
 800531e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005322:	441a      	add	r2, r3
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	69da      	ldr	r2, [r3, #28]
 800532c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005330:	441a      	add	r2, r3
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	6a1a      	ldr	r2, [r3, #32]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	429a      	cmp	r2, r3
 8005340:	d30b      	bcc.n	800535a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	6a1a      	ldr	r2, [r3, #32]
 800534e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005352:	1ad2      	subs	r2, r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	621a      	str	r2, [r3, #32]
 8005358:	e017      	b.n	800538a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d108      	bne.n	8005374 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8005362:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005366:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005372:	e00a      	b.n	800538a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2200      	movs	r2, #0
 8005388:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	785b      	ldrb	r3, [r3, #1]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d165      	bne.n	800545e <HAL_PCD_EP_DB_Transmit+0x382>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	461a      	mov	r2, r3
 80053a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a6:	4413      	add	r3, r2
 80053a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	011a      	lsls	r2, r3, #4
 80053b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b2:	4413      	add	r3, r2
 80053b4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c8:	801a      	strh	r2, [r3, #0]
 80053ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80053d0:	d91d      	bls.n	800540e <HAL_PCD_EP_DB_Transmit+0x332>
 80053d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053de:	f003 031f 	and.w	r3, r3, #31
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d102      	bne.n	80053ec <HAL_PCD_EP_DB_Transmit+0x310>
 80053e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053e8:	3b01      	subs	r3, #1
 80053ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	029b      	lsls	r3, r3, #10
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	4313      	orrs	r3, r2
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005406:	b29a      	uxth	r2, r3
 8005408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800540a:	801a      	strh	r2, [r3, #0]
 800540c:	e044      	b.n	8005498 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800540e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10a      	bne.n	800542c <HAL_PCD_EP_DB_Transmit+0x350>
 8005416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	b29b      	uxth	r3, r3
 800541c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005424:	b29a      	uxth	r2, r3
 8005426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005428:	801a      	strh	r2, [r3, #0]
 800542a:	e035      	b.n	8005498 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800542c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005430:	085b      	lsrs	r3, r3, #1
 8005432:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005434:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <HAL_PCD_EP_DB_Transmit+0x36a>
 8005440:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005442:	3301      	adds	r3, #1
 8005444:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	b29a      	uxth	r2, r3
 800544c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800544e:	b29b      	uxth	r3, r3
 8005450:	029b      	lsls	r3, r3, #10
 8005452:	b29b      	uxth	r3, r3
 8005454:	4313      	orrs	r3, r2
 8005456:	b29a      	uxth	r2, r3
 8005458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800545a:	801a      	strh	r2, [r3, #0]
 800545c:	e01c      	b.n	8005498 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	785b      	ldrb	r3, [r3, #1]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d118      	bne.n	8005498 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	647b      	str	r3, [r7, #68]	@ 0x44
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005474:	b29b      	uxth	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800547a:	4413      	add	r3, r2
 800547c:	647b      	str	r3, [r7, #68]	@ 0x44
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	011a      	lsls	r2, r3, #4
 8005484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005486:	4413      	add	r3, r2
 8005488:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800548c:	643b      	str	r3, [r7, #64]	@ 0x40
 800548e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005492:	b29a      	uxth	r2, r3
 8005494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005496:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6818      	ldr	r0, [r3, #0]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	6959      	ldr	r1, [r3, #20]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	891a      	ldrh	r2, [r3, #8]
 80054a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	f006 ff69 	bl	800c380 <USB_WritePMA>
 80054ae:	e1e2      	b.n	8005876 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	4413      	add	r3, r2
 80054c4:	3306      	adds	r3, #6
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	6812      	ldr	r2, [r2, #0]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054d8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	699a      	ldr	r2, [r3, #24]
 80054e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d307      	bcc.n	80054f8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	699a      	ldr	r2, [r3, #24]
 80054ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80054f0:	1ad2      	subs	r2, r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	619a      	str	r2, [r3, #24]
 80054f6:	e002      	b.n	80054fe <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2200      	movs	r2, #0
 80054fc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	2b00      	cmp	r3, #0
 8005504:	f040 80c0 	bne.w	8005688 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	785b      	ldrb	r3, [r3, #1]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d126      	bne.n	800555e <HAL_PCD_EP_DB_Transmit+0x482>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800551e:	b29b      	uxth	r3, r3
 8005520:	461a      	mov	r2, r3
 8005522:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005524:	4413      	add	r3, r2
 8005526:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	011a      	lsls	r2, r3, #4
 800552e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005530:	4413      	add	r3, r2
 8005532:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005536:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005538:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	b29b      	uxth	r3, r3
 800553e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005542:	b29a      	uxth	r2, r3
 8005544:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005546:	801a      	strh	r2, [r3, #0]
 8005548:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	b29b      	uxth	r3, r3
 800554e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005556:	b29a      	uxth	r2, r3
 8005558:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800555a:	801a      	strh	r2, [r3, #0]
 800555c:	e01a      	b.n	8005594 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d116      	bne.n	8005594 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	667b      	str	r3, [r7, #100]	@ 0x64
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005574:	b29b      	uxth	r3, r3
 8005576:	461a      	mov	r2, r3
 8005578:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800557a:	4413      	add	r3, r2
 800557c:	667b      	str	r3, [r7, #100]	@ 0x64
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	011a      	lsls	r2, r3, #4
 8005584:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005586:	4413      	add	r3, r2
 8005588:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800558c:	663b      	str	r3, [r7, #96]	@ 0x60
 800558e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005590:	2200      	movs	r2, #0
 8005592:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	677b      	str	r3, [r7, #116]	@ 0x74
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d12b      	bne.n	80055fa <HAL_PCD_EP_DB_Transmit+0x51e>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	461a      	mov	r2, r3
 80055b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055b6:	4413      	add	r3, r2
 80055b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	011a      	lsls	r2, r3, #4
 80055c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055c2:	4413      	add	r3, r2
 80055c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055d8:	b29a      	uxth	r2, r3
 80055da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80055de:	801a      	strh	r2, [r3, #0]
 80055e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80055f6:	801a      	strh	r2, [r3, #0]
 80055f8:	e017      	b.n	800562a <HAL_PCD_EP_DB_Transmit+0x54e>
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	785b      	ldrb	r3, [r3, #1]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d113      	bne.n	800562a <HAL_PCD_EP_DB_Transmit+0x54e>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800560a:	b29b      	uxth	r3, r3
 800560c:	461a      	mov	r2, r3
 800560e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005610:	4413      	add	r3, r2
 8005612:	677b      	str	r3, [r7, #116]	@ 0x74
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	011a      	lsls	r2, r3, #4
 800561a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800561c:	4413      	add	r3, r2
 800561e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005622:	673b      	str	r3, [r7, #112]	@ 0x70
 8005624:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005626:	2200      	movs	r2, #0
 8005628:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	4619      	mov	r1, r3
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f008 fcd0 	bl	800dfd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005636:	88fb      	ldrh	r3, [r7, #6]
 8005638:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800563c:	2b00      	cmp	r3, #0
 800563e:	f040 811a 	bne.w	8005876 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	b29b      	uxth	r3, r3
 8005654:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	441a      	add	r2, r3
 800566e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005672:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005676:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800567a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800567e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005682:	b29b      	uxth	r3, r3
 8005684:	8013      	strh	r3, [r2, #0]
 8005686:	e0f6      	b.n	8005876 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005688:	88fb      	ldrh	r3, [r7, #6]
 800568a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d121      	bne.n	80056d6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	441a      	add	r2, r3
 80056be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80056c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80056dc:	2b01      	cmp	r3, #1
 80056de:	f040 80ca 	bne.w	8005876 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	695a      	ldr	r2, [r3, #20]
 80056e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80056ea:	441a      	add	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	69da      	ldr	r2, [r3, #28]
 80056f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80056f8:	441a      	add	r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	6a1a      	ldr	r2, [r3, #32]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	429a      	cmp	r2, r3
 8005708:	d30b      	bcc.n	8005722 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	6a1a      	ldr	r2, [r3, #32]
 8005716:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800571a:	1ad2      	subs	r2, r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	621a      	str	r2, [r3, #32]
 8005720:	e017      	b.n	8005752 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d108      	bne.n	800573c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800572a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800572e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800573a:	e00a      	b.n	8005752 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2200      	movs	r2, #0
 8005748:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	657b      	str	r3, [r7, #84]	@ 0x54
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d165      	bne.n	800582c <HAL_PCD_EP_DB_Transmit+0x750>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800576e:	b29b      	uxth	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005774:	4413      	add	r3, r2
 8005776:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	011a      	lsls	r2, r3, #4
 800577e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005780:	4413      	add	r3, r2
 8005782:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005786:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005788:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	b29b      	uxth	r3, r3
 800578e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005792:	b29a      	uxth	r2, r3
 8005794:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005796:	801a      	strh	r2, [r3, #0]
 8005798:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800579c:	2b3e      	cmp	r3, #62	@ 0x3e
 800579e:	d91d      	bls.n	80057dc <HAL_PCD_EP_DB_Transmit+0x700>
 80057a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057ac:	f003 031f 	and.w	r3, r3, #31
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d102      	bne.n	80057ba <HAL_PCD_EP_DB_Transmit+0x6de>
 80057b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057b6:	3b01      	subs	r3, #1
 80057b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29a      	uxth	r2, r3
 80057c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	029b      	lsls	r3, r3, #10
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	4313      	orrs	r3, r2
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057d8:	801a      	strh	r2, [r3, #0]
 80057da:	e041      	b.n	8005860 <HAL_PCD_EP_DB_Transmit+0x784>
 80057dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <HAL_PCD_EP_DB_Transmit+0x71e>
 80057e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057f6:	801a      	strh	r2, [r3, #0]
 80057f8:	e032      	b.n	8005860 <HAL_PCD_EP_DB_Transmit+0x784>
 80057fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057fe:	085b      	lsrs	r3, r3, #1
 8005800:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005802:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d002      	beq.n	8005814 <HAL_PCD_EP_DB_Transmit+0x738>
 800580e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005810:	3301      	adds	r3, #1
 8005812:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005814:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29a      	uxth	r2, r3
 800581a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800581c:	b29b      	uxth	r3, r3
 800581e:	029b      	lsls	r3, r3, #10
 8005820:	b29b      	uxth	r3, r3
 8005822:	4313      	orrs	r3, r2
 8005824:	b29a      	uxth	r2, r3
 8005826:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005828:	801a      	strh	r2, [r3, #0]
 800582a:	e019      	b.n	8005860 <HAL_PCD_EP_DB_Transmit+0x784>
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	785b      	ldrb	r3, [r3, #1]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d115      	bne.n	8005860 <HAL_PCD_EP_DB_Transmit+0x784>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800583c:	b29b      	uxth	r3, r3
 800583e:	461a      	mov	r2, r3
 8005840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005842:	4413      	add	r3, r2
 8005844:	657b      	str	r3, [r7, #84]	@ 0x54
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	011a      	lsls	r2, r3, #4
 800584c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800584e:	4413      	add	r3, r2
 8005850:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005854:	653b      	str	r3, [r7, #80]	@ 0x50
 8005856:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800585a:	b29a      	uxth	r2, r3
 800585c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800585e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6818      	ldr	r0, [r3, #0]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	6959      	ldr	r1, [r3, #20]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	895a      	ldrh	r2, [r3, #10]
 800586c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005870:	b29b      	uxth	r3, r3
 8005872:	f006 fd85 	bl	800c380 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	b29b      	uxth	r3, r3
 8005888:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800588c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005890:	82bb      	strh	r3, [r7, #20]
 8005892:	8abb      	ldrh	r3, [r7, #20]
 8005894:	f083 0310 	eor.w	r3, r3, #16
 8005898:	82bb      	strh	r3, [r7, #20]
 800589a:	8abb      	ldrh	r3, [r7, #20]
 800589c:	f083 0320 	eor.w	r3, r3, #32
 80058a0:	82bb      	strh	r3, [r7, #20]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	441a      	add	r2, r3
 80058b0:	8abb      	ldrh	r3, [r7, #20]
 80058b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3790      	adds	r7, #144	@ 0x90
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	607b      	str	r3, [r7, #4]
 80058da:	460b      	mov	r3, r1
 80058dc:	817b      	strh	r3, [r7, #10]
 80058de:	4613      	mov	r3, r2
 80058e0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80058e2:	897b      	ldrh	r3, [r7, #10]
 80058e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00b      	beq.n	8005906 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058ee:	897b      	ldrh	r3, [r7, #10]
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4413      	add	r3, r2
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	e009      	b.n	800591a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005906:	897a      	ldrh	r2, [r7, #10]
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800591a:	893b      	ldrh	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d107      	bne.n	8005930 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2200      	movs	r2, #0
 8005924:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	b29a      	uxth	r2, r3
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	80da      	strh	r2, [r3, #6]
 800592e:	e00b      	b.n	8005948 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	2201      	movs	r2, #1
 8005934:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	b29a      	uxth	r2, r3
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	0c1b      	lsrs	r3, r3, #16
 8005942:	b29a      	uxth	r2, r3
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800595e:	af00      	add	r7, sp, #0
 8005960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005964:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005968:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800596a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800596e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d102      	bne.n	800597e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	f001 b823 	b.w	80069c4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800597e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005982:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 817d 	beq.w	8005c8e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005994:	4bbc      	ldr	r3, [pc, #752]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f003 030c 	and.w	r3, r3, #12
 800599c:	2b04      	cmp	r3, #4
 800599e:	d00c      	beq.n	80059ba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80059a0:	4bb9      	ldr	r3, [pc, #740]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f003 030c 	and.w	r3, r3, #12
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d15c      	bne.n	8005a66 <HAL_RCC_OscConfig+0x10e>
 80059ac:	4bb6      	ldr	r3, [pc, #728]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059b8:	d155      	bne.n	8005a66 <HAL_RCC_OscConfig+0x10e>
 80059ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80059be:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80059c6:	fa93 f3a3 	rbit	r3, r3
 80059ca:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80059ce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d2:	fab3 f383 	clz	r3, r3
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	095b      	lsrs	r3, r3, #5
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	f043 0301 	orr.w	r3, r3, #1
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d102      	bne.n	80059ec <HAL_RCC_OscConfig+0x94>
 80059e6:	4ba8      	ldr	r3, [pc, #672]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	e015      	b.n	8005a18 <HAL_RCC_OscConfig+0xc0>
 80059ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80059f0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80059f8:	fa93 f3a3 	rbit	r3, r3
 80059fc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8005a00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a04:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8005a08:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8005a0c:	fa93 f3a3 	rbit	r3, r3
 8005a10:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8005a14:	4b9c      	ldr	r3, [pc, #624]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a18:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005a1c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8005a20:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8005a24:	fa92 f2a2 	rbit	r2, r2
 8005a28:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8005a2c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8005a30:	fab2 f282 	clz	r2, r2
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	f042 0220 	orr.w	r2, r2, #32
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	f002 021f 	and.w	r2, r2, #31
 8005a40:	2101      	movs	r1, #1
 8005a42:	fa01 f202 	lsl.w	r2, r1, r2
 8005a46:	4013      	ands	r3, r2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 811f 	beq.w	8005c8c <HAL_RCC_OscConfig+0x334>
 8005a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f040 8116 	bne.w	8005c8c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	f000 bfaf 	b.w	80069c4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a76:	d106      	bne.n	8005a86 <HAL_RCC_OscConfig+0x12e>
 8005a78:	4b83      	ldr	r3, [pc, #524]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a82      	ldr	r2, [pc, #520]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	e036      	b.n	8005af4 <HAL_RCC_OscConfig+0x19c>
 8005a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10c      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x158>
 8005a96:	4b7c      	ldr	r3, [pc, #496]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a7b      	ldr	r2, [pc, #492]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005a9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	4b79      	ldr	r3, [pc, #484]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a78      	ldr	r2, [pc, #480]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005aa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	e021      	b.n	8005af4 <HAL_RCC_OscConfig+0x19c>
 8005ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ab4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ac0:	d10c      	bne.n	8005adc <HAL_RCC_OscConfig+0x184>
 8005ac2:	4b71      	ldr	r3, [pc, #452]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a70      	ldr	r2, [pc, #448]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005acc:	6013      	str	r3, [r2, #0]
 8005ace:	4b6e      	ldr	r3, [pc, #440]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a6d      	ldr	r2, [pc, #436]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	e00b      	b.n	8005af4 <HAL_RCC_OscConfig+0x19c>
 8005adc:	4b6a      	ldr	r3, [pc, #424]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a69      	ldr	r2, [pc, #420]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	4b67      	ldr	r3, [pc, #412]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a66      	ldr	r2, [pc, #408]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005af2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005af4:	4b64      	ldr	r3, [pc, #400]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af8:	f023 020f 	bic.w	r2, r3, #15
 8005afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	495f      	ldr	r1, [pc, #380]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d059      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1e:	f7fd f961 	bl	8002de4 <HAL_GetTick>
 8005b22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b26:	e00a      	b.n	8005b3e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b28:	f7fd f95c 	bl	8002de4 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b64      	cmp	r3, #100	@ 0x64
 8005b36:	d902      	bls.n	8005b3e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	f000 bf43 	b.w	80069c4 <HAL_RCC_OscConfig+0x106c>
 8005b3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b42:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b46:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8005b4a:	fa93 f3a3 	rbit	r3, r3
 8005b4e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8005b52:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b56:	fab3 f383 	clz	r3, r3
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	095b      	lsrs	r3, r3, #5
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f043 0301 	orr.w	r3, r3, #1
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d102      	bne.n	8005b70 <HAL_RCC_OscConfig+0x218>
 8005b6a:	4b47      	ldr	r3, [pc, #284]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	e015      	b.n	8005b9c <HAL_RCC_OscConfig+0x244>
 8005b70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b74:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b78:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005b7c:	fa93 f3a3 	rbit	r3, r3
 8005b80:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005b84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b88:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005b8c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005b90:	fa93 f3a3 	rbit	r3, r3
 8005b94:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005b98:	4b3b      	ldr	r3, [pc, #236]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005ba0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8005ba4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8005ba8:	fa92 f2a2 	rbit	r2, r2
 8005bac:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8005bb0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8005bb4:	fab2 f282 	clz	r2, r2
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	f042 0220 	orr.w	r2, r2, #32
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	f002 021f 	and.w	r2, r2, #31
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8005bca:	4013      	ands	r3, r2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0ab      	beq.n	8005b28 <HAL_RCC_OscConfig+0x1d0>
 8005bd0:	e05d      	b.n	8005c8e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd2:	f7fd f907 	bl	8002de4 <HAL_GetTick>
 8005bd6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bda:	e00a      	b.n	8005bf2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bdc:	f7fd f902 	bl	8002de4 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b64      	cmp	r3, #100	@ 0x64
 8005bea:	d902      	bls.n	8005bf2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	f000 bee9 	b.w	80069c4 <HAL_RCC_OscConfig+0x106c>
 8005bf2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005bf6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bfa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005bfe:	fa93 f3a3 	rbit	r3, r3
 8005c02:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8005c06:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c0a:	fab3 f383 	clz	r3, r3
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	095b      	lsrs	r3, r3, #5
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	f043 0301 	orr.w	r3, r3, #1
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d102      	bne.n	8005c24 <HAL_RCC_OscConfig+0x2cc>
 8005c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	e015      	b.n	8005c50 <HAL_RCC_OscConfig+0x2f8>
 8005c24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c28:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c2c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005c30:	fa93 f3a3 	rbit	r3, r3
 8005c34:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005c38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c3c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8005c40:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005c44:	fa93 f3a3 	rbit	r3, r3
 8005c48:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8005c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8005c88 <HAL_RCC_OscConfig+0x330>)
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c50:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005c54:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8005c58:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8005c5c:	fa92 f2a2 	rbit	r2, r2
 8005c60:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8005c64:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8005c68:	fab2 f282 	clz	r2, r2
 8005c6c:	b2d2      	uxtb	r2, r2
 8005c6e:	f042 0220 	orr.w	r2, r2, #32
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	f002 021f 	and.w	r2, r2, #31
 8005c78:	2101      	movs	r1, #1
 8005c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c7e:	4013      	ands	r3, r2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1ab      	bne.n	8005bdc <HAL_RCC_OscConfig+0x284>
 8005c84:	e003      	b.n	8005c8e <HAL_RCC_OscConfig+0x336>
 8005c86:	bf00      	nop
 8005c88:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 817d 	beq.w	8005f9e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005ca4:	4ba6      	ldr	r3, [pc, #664]	@ (8005f40 <HAL_RCC_OscConfig+0x5e8>)
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f003 030c 	and.w	r3, r3, #12
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00b      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005cb0:	4ba3      	ldr	r3, [pc, #652]	@ (8005f40 <HAL_RCC_OscConfig+0x5e8>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f003 030c 	and.w	r3, r3, #12
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d172      	bne.n	8005da2 <HAL_RCC_OscConfig+0x44a>
 8005cbc:	4ba0      	ldr	r3, [pc, #640]	@ (8005f40 <HAL_RCC_OscConfig+0x5e8>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d16c      	bne.n	8005da2 <HAL_RCC_OscConfig+0x44a>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cce:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005cd2:	fa93 f3a3 	rbit	r3, r3
 8005cd6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8005cda:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cde:	fab3 f383 	clz	r3, r3
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	095b      	lsrs	r3, r3, #5
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	f043 0301 	orr.w	r3, r3, #1
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d102      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x3a0>
 8005cf2:	4b93      	ldr	r3, [pc, #588]	@ (8005f40 <HAL_RCC_OscConfig+0x5e8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	e013      	b.n	8005d20 <HAL_RCC_OscConfig+0x3c8>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfe:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8005d02:	fa93 f3a3 	rbit	r3, r3
 8005d06:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8005d10:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005d14:	fa93 f3a3 	rbit	r3, r3
 8005d18:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8005d1c:	4b88      	ldr	r3, [pc, #544]	@ (8005f40 <HAL_RCC_OscConfig+0x5e8>)
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d20:	2202      	movs	r2, #2
 8005d22:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8005d26:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8005d2a:	fa92 f2a2 	rbit	r2, r2
 8005d2e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8005d32:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8005d36:	fab2 f282 	clz	r2, r2
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	f042 0220 	orr.w	r2, r2, #32
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	f002 021f 	and.w	r2, r2, #31
 8005d46:	2101      	movs	r1, #1
 8005d48:	fa01 f202 	lsl.w	r2, r1, r2
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <HAL_RCC_OscConfig+0x410>
 8005d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d002      	beq.n	8005d68 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	f000 be2e 	b.w	80069c4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d68:	4b75      	ldr	r3, [pc, #468]	@ (8005f40 <HAL_RCC_OscConfig+0x5e8>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	21f8      	movs	r1, #248	@ 0xf8
 8005d7e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d82:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8005d86:	fa91 f1a1 	rbit	r1, r1
 8005d8a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8005d8e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8005d92:	fab1 f181 	clz	r1, r1
 8005d96:	b2c9      	uxtb	r1, r1
 8005d98:	408b      	lsls	r3, r1
 8005d9a:	4969      	ldr	r1, [pc, #420]	@ (8005f40 <HAL_RCC_OscConfig+0x5e8>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005da0:	e0fd      	b.n	8005f9e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005da6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 8088 	beq.w	8005ec4 <HAL_RCC_OscConfig+0x56c>
 8005db4:	2301      	movs	r3, #1
 8005db6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dba:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8005dbe:	fa93 f3a3 	rbit	r3, r3
 8005dc2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8005dc6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dca:	fab3 f383 	clz	r3, r3
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005dd4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	461a      	mov	r2, r3
 8005ddc:	2301      	movs	r3, #1
 8005dde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de0:	f7fd f800 	bl	8002de4 <HAL_GetTick>
 8005de4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005de8:	e00a      	b.n	8005e00 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dea:	f7fc fffb 	bl	8002de4 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d902      	bls.n	8005e00 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	f000 bde2 	b.w	80069c4 <HAL_RCC_OscConfig+0x106c>
 8005e00:	2302      	movs	r3, #2
 8005e02:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e06:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8005e0a:	fa93 f3a3 	rbit	r3, r3
 8005e0e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8005e12:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e16:	fab3 f383 	clz	r3, r3
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	f043 0301 	orr.w	r3, r3, #1
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d102      	bne.n	8005e30 <HAL_RCC_OscConfig+0x4d8>
 8005e2a:	4b45      	ldr	r3, [pc, #276]	@ (8005f40 <HAL_RCC_OscConfig+0x5e8>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	e013      	b.n	8005e58 <HAL_RCC_OscConfig+0x500>
 8005e30:	2302      	movs	r3, #2
 8005e32:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e36:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8005e3a:	fa93 f3a3 	rbit	r3, r3
 8005e3e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8005e42:	2302      	movs	r3, #2
 8005e44:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8005e48:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8005e4c:	fa93 f3a3 	rbit	r3, r3
 8005e50:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8005e54:	4b3a      	ldr	r3, [pc, #232]	@ (8005f40 <HAL_RCC_OscConfig+0x5e8>)
 8005e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e58:	2202      	movs	r2, #2
 8005e5a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8005e5e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8005e62:	fa92 f2a2 	rbit	r2, r2
 8005e66:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8005e6a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8005e6e:	fab2 f282 	clz	r2, r2
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	f042 0220 	orr.w	r2, r2, #32
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	f002 021f 	and.w	r2, r2, #31
 8005e7e:	2101      	movs	r1, #1
 8005e80:	fa01 f202 	lsl.w	r2, r1, r2
 8005e84:	4013      	ands	r3, r2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0af      	beq.n	8005dea <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8005f40 <HAL_RCC_OscConfig+0x5e8>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	21f8      	movs	r1, #248	@ 0xf8
 8005ea0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005ea8:	fa91 f1a1 	rbit	r1, r1
 8005eac:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8005eb0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8005eb4:	fab1 f181 	clz	r1, r1
 8005eb8:	b2c9      	uxtb	r1, r1
 8005eba:	408b      	lsls	r3, r1
 8005ebc:	4920      	ldr	r1, [pc, #128]	@ (8005f40 <HAL_RCC_OscConfig+0x5e8>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	600b      	str	r3, [r1, #0]
 8005ec2:	e06c      	b.n	8005f9e <HAL_RCC_OscConfig+0x646>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eca:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005ece:	fa93 f3a3 	rbit	r3, r3
 8005ed2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8005ed6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eda:	fab3 f383 	clz	r3, r3
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005ee4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	461a      	mov	r2, r3
 8005eec:	2300      	movs	r3, #0
 8005eee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef0:	f7fc ff78 	bl	8002de4 <HAL_GetTick>
 8005ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ef8:	e00a      	b.n	8005f10 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005efa:	f7fc ff73 	bl	8002de4 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d902      	bls.n	8005f10 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	f000 bd5a 	b.w	80069c4 <HAL_RCC_OscConfig+0x106c>
 8005f10:	2302      	movs	r3, #2
 8005f12:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f16:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f1a:	fa93 f3a3 	rbit	r3, r3
 8005f1e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8005f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f26:	fab3 f383 	clz	r3, r3
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	f043 0301 	orr.w	r3, r3, #1
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d104      	bne.n	8005f44 <HAL_RCC_OscConfig+0x5ec>
 8005f3a:	4b01      	ldr	r3, [pc, #4]	@ (8005f40 <HAL_RCC_OscConfig+0x5e8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	e015      	b.n	8005f6c <HAL_RCC_OscConfig+0x614>
 8005f40:	40021000 	.word	0x40021000
 8005f44:	2302      	movs	r3, #2
 8005f46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f4e:	fa93 f3a3 	rbit	r3, r3
 8005f52:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005f56:	2302      	movs	r3, #2
 8005f58:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005f5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f60:	fa93 f3a3 	rbit	r3, r3
 8005f64:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005f68:	4bc8      	ldr	r3, [pc, #800]	@ (800628c <HAL_RCC_OscConfig+0x934>)
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8005f72:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005f76:	fa92 f2a2 	rbit	r2, r2
 8005f7a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8005f7e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005f82:	fab2 f282 	clz	r2, r2
 8005f86:	b2d2      	uxtb	r2, r2
 8005f88:	f042 0220 	orr.w	r2, r2, #32
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	f002 021f 	and.w	r2, r2, #31
 8005f92:	2101      	movs	r1, #1
 8005f94:	fa01 f202 	lsl.w	r2, r1, r2
 8005f98:	4013      	ands	r3, r2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1ad      	bne.n	8005efa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fa2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 8110 	beq.w	80061d4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d079      	beq.n	80060b8 <HAL_RCC_OscConfig+0x760>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005fce:	fa93 f3a3 	rbit	r3, r3
 8005fd2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8005fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fda:	fab3 f383 	clz	r3, r3
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4bab      	ldr	r3, [pc, #684]	@ (8006290 <HAL_RCC_OscConfig+0x938>)
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	461a      	mov	r2, r3
 8005fea:	2301      	movs	r3, #1
 8005fec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fee:	f7fc fef9 	bl	8002de4 <HAL_GetTick>
 8005ff2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ff6:	e00a      	b.n	800600e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ff8:	f7fc fef4 	bl	8002de4 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d902      	bls.n	800600e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	f000 bcdb 	b.w	80069c4 <HAL_RCC_OscConfig+0x106c>
 800600e:	2302      	movs	r3, #2
 8006010:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006014:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006018:	fa93 f3a3 	rbit	r3, r3
 800601c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006024:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006028:	2202      	movs	r2, #2
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006030:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	fa93 f2a3 	rbit	r2, r3
 800603a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800603e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800604c:	2202      	movs	r2, #2
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	fa93 f2a3 	rbit	r2, r3
 800605e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006062:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006066:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006068:	4b88      	ldr	r3, [pc, #544]	@ (800628c <HAL_RCC_OscConfig+0x934>)
 800606a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800606c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006070:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006074:	2102      	movs	r1, #2
 8006076:	6019      	str	r1, [r3, #0]
 8006078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800607c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	fa93 f1a3 	rbit	r1, r3
 8006086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800608a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800608e:	6019      	str	r1, [r3, #0]
  return result;
 8006090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006094:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	fab3 f383 	clz	r3, r3
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	f003 031f 	and.w	r3, r3, #31
 80060aa:	2101      	movs	r1, #1
 80060ac:	fa01 f303 	lsl.w	r3, r1, r3
 80060b0:	4013      	ands	r3, r2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0a0      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x6a0>
 80060b6:	e08d      	b.n	80061d4 <HAL_RCC_OscConfig+0x87c>
 80060b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060bc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80060c0:	2201      	movs	r2, #1
 80060c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060c8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	fa93 f2a3 	rbit	r2, r3
 80060d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060d6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80060da:	601a      	str	r2, [r3, #0]
  return result;
 80060dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060e0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80060e4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060e6:	fab3 f383 	clz	r3, r3
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	461a      	mov	r2, r3
 80060ee:	4b68      	ldr	r3, [pc, #416]	@ (8006290 <HAL_RCC_OscConfig+0x938>)
 80060f0:	4413      	add	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	461a      	mov	r2, r3
 80060f6:	2300      	movs	r3, #0
 80060f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060fa:	f7fc fe73 	bl	8002de4 <HAL_GetTick>
 80060fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006102:	e00a      	b.n	800611a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006104:	f7fc fe6e 	bl	8002de4 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d902      	bls.n	800611a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	f000 bc55 	b.w	80069c4 <HAL_RCC_OscConfig+0x106c>
 800611a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800611e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006122:	2202      	movs	r2, #2
 8006124:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800612a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	fa93 f2a3 	rbit	r2, r3
 8006134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006138:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006142:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006146:	2202      	movs	r2, #2
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800614e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	fa93 f2a3 	rbit	r2, r3
 8006158:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800615c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006166:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800616a:	2202      	movs	r2, #2
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006172:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	fa93 f2a3 	rbit	r2, r3
 800617c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006180:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006184:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006186:	4b41      	ldr	r3, [pc, #260]	@ (800628c <HAL_RCC_OscConfig+0x934>)
 8006188:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800618a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800618e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006192:	2102      	movs	r1, #2
 8006194:	6019      	str	r1, [r3, #0]
 8006196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800619a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	fa93 f1a3 	rbit	r1, r3
 80061a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80061ac:	6019      	str	r1, [r3, #0]
  return result;
 80061ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061b2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	fab3 f383 	clz	r3, r3
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	f003 031f 	and.w	r3, r3, #31
 80061c8:	2101      	movs	r1, #1
 80061ca:	fa01 f303 	lsl.w	r3, r1, r3
 80061ce:	4013      	ands	r3, r2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d197      	bne.n	8006104 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 81a1 	beq.w	800652c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061ea:	2300      	movs	r3, #0
 80061ec:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061f0:	4b26      	ldr	r3, [pc, #152]	@ (800628c <HAL_RCC_OscConfig+0x934>)
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d116      	bne.n	800622a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061fc:	4b23      	ldr	r3, [pc, #140]	@ (800628c <HAL_RCC_OscConfig+0x934>)
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	4a22      	ldr	r2, [pc, #136]	@ (800628c <HAL_RCC_OscConfig+0x934>)
 8006202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006206:	61d3      	str	r3, [r2, #28]
 8006208:	4b20      	ldr	r3, [pc, #128]	@ (800628c <HAL_RCC_OscConfig+0x934>)
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8006210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006214:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800621e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8006222:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006224:	2301      	movs	r3, #1
 8006226:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800622a:	4b1a      	ldr	r3, [pc, #104]	@ (8006294 <HAL_RCC_OscConfig+0x93c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006232:	2b00      	cmp	r3, #0
 8006234:	d11a      	bne.n	800626c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006236:	4b17      	ldr	r3, [pc, #92]	@ (8006294 <HAL_RCC_OscConfig+0x93c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a16      	ldr	r2, [pc, #88]	@ (8006294 <HAL_RCC_OscConfig+0x93c>)
 800623c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006240:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006242:	f7fc fdcf 	bl	8002de4 <HAL_GetTick>
 8006246:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800624a:	e009      	b.n	8006260 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800624c:	f7fc fdca 	bl	8002de4 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b64      	cmp	r3, #100	@ 0x64
 800625a:	d901      	bls.n	8006260 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e3b1      	b.n	80069c4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006260:	4b0c      	ldr	r3, [pc, #48]	@ (8006294 <HAL_RCC_OscConfig+0x93c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0ef      	beq.n	800624c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800626c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006270:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d10d      	bne.n	8006298 <HAL_RCC_OscConfig+0x940>
 800627c:	4b03      	ldr	r3, [pc, #12]	@ (800628c <HAL_RCC_OscConfig+0x934>)
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	4a02      	ldr	r2, [pc, #8]	@ (800628c <HAL_RCC_OscConfig+0x934>)
 8006282:	f043 0301 	orr.w	r3, r3, #1
 8006286:	6213      	str	r3, [r2, #32]
 8006288:	e03c      	b.n	8006304 <HAL_RCC_OscConfig+0x9ac>
 800628a:	bf00      	nop
 800628c:	40021000 	.word	0x40021000
 8006290:	10908120 	.word	0x10908120
 8006294:	40007000 	.word	0x40007000
 8006298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800629c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10c      	bne.n	80062c2 <HAL_RCC_OscConfig+0x96a>
 80062a8:	4bc1      	ldr	r3, [pc, #772]	@ (80065b0 <HAL_RCC_OscConfig+0xc58>)
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	4ac0      	ldr	r2, [pc, #768]	@ (80065b0 <HAL_RCC_OscConfig+0xc58>)
 80062ae:	f023 0301 	bic.w	r3, r3, #1
 80062b2:	6213      	str	r3, [r2, #32]
 80062b4:	4bbe      	ldr	r3, [pc, #760]	@ (80065b0 <HAL_RCC_OscConfig+0xc58>)
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	4abd      	ldr	r2, [pc, #756]	@ (80065b0 <HAL_RCC_OscConfig+0xc58>)
 80062ba:	f023 0304 	bic.w	r3, r3, #4
 80062be:	6213      	str	r3, [r2, #32]
 80062c0:	e020      	b.n	8006304 <HAL_RCC_OscConfig+0x9ac>
 80062c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	2b05      	cmp	r3, #5
 80062d0:	d10c      	bne.n	80062ec <HAL_RCC_OscConfig+0x994>
 80062d2:	4bb7      	ldr	r3, [pc, #732]	@ (80065b0 <HAL_RCC_OscConfig+0xc58>)
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	4ab6      	ldr	r2, [pc, #728]	@ (80065b0 <HAL_RCC_OscConfig+0xc58>)
 80062d8:	f043 0304 	orr.w	r3, r3, #4
 80062dc:	6213      	str	r3, [r2, #32]
 80062de:	4bb4      	ldr	r3, [pc, #720]	@ (80065b0 <HAL_RCC_OscConfig+0xc58>)
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	4ab3      	ldr	r2, [pc, #716]	@ (80065b0 <HAL_RCC_OscConfig+0xc58>)
 80062e4:	f043 0301 	orr.w	r3, r3, #1
 80062e8:	6213      	str	r3, [r2, #32]
 80062ea:	e00b      	b.n	8006304 <HAL_RCC_OscConfig+0x9ac>
 80062ec:	4bb0      	ldr	r3, [pc, #704]	@ (80065b0 <HAL_RCC_OscConfig+0xc58>)
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	4aaf      	ldr	r2, [pc, #700]	@ (80065b0 <HAL_RCC_OscConfig+0xc58>)
 80062f2:	f023 0301 	bic.w	r3, r3, #1
 80062f6:	6213      	str	r3, [r2, #32]
 80062f8:	4bad      	ldr	r3, [pc, #692]	@ (80065b0 <HAL_RCC_OscConfig+0xc58>)
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	4aac      	ldr	r2, [pc, #688]	@ (80065b0 <HAL_RCC_OscConfig+0xc58>)
 80062fe:	f023 0304 	bic.w	r3, r3, #4
 8006302:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006308:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 8081 	beq.w	8006418 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006316:	f7fc fd65 	bl	8002de4 <HAL_GetTick>
 800631a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631e:	e00b      	b.n	8006338 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006320:	f7fc fd60 	bl	8002de4 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006330:	4293      	cmp	r3, r2
 8006332:	d901      	bls.n	8006338 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e345      	b.n	80069c4 <HAL_RCC_OscConfig+0x106c>
 8006338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800633c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006340:	2202      	movs	r2, #2
 8006342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006348:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	fa93 f2a3 	rbit	r2, r3
 8006352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006356:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006360:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006364:	2202      	movs	r2, #2
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800636c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	fa93 f2a3 	rbit	r2, r3
 8006376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800637a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800637e:	601a      	str	r2, [r3, #0]
  return result;
 8006380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006384:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006388:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800638a:	fab3 f383 	clz	r3, r3
 800638e:	b2db      	uxtb	r3, r3
 8006390:	095b      	lsrs	r3, r3, #5
 8006392:	b2db      	uxtb	r3, r3
 8006394:	f043 0302 	orr.w	r3, r3, #2
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d102      	bne.n	80063a4 <HAL_RCC_OscConfig+0xa4c>
 800639e:	4b84      	ldr	r3, [pc, #528]	@ (80065b0 <HAL_RCC_OscConfig+0xc58>)
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	e013      	b.n	80063cc <HAL_RCC_OscConfig+0xa74>
 80063a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063a8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80063ac:	2202      	movs	r2, #2
 80063ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063b4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	fa93 f2a3 	rbit	r2, r3
 80063be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063c2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	4b79      	ldr	r3, [pc, #484]	@ (80065b0 <HAL_RCC_OscConfig+0xc58>)
 80063ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063d0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80063d4:	2102      	movs	r1, #2
 80063d6:	6011      	str	r1, [r2, #0]
 80063d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063dc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80063e0:	6812      	ldr	r2, [r2, #0]
 80063e2:	fa92 f1a2 	rbit	r1, r2
 80063e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063ea:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80063ee:	6011      	str	r1, [r2, #0]
  return result;
 80063f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063f4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80063f8:	6812      	ldr	r2, [r2, #0]
 80063fa:	fab2 f282 	clz	r2, r2
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006404:	b2d2      	uxtb	r2, r2
 8006406:	f002 021f 	and.w	r2, r2, #31
 800640a:	2101      	movs	r1, #1
 800640c:	fa01 f202 	lsl.w	r2, r1, r2
 8006410:	4013      	ands	r3, r2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d084      	beq.n	8006320 <HAL_RCC_OscConfig+0x9c8>
 8006416:	e07f      	b.n	8006518 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006418:	f7fc fce4 	bl	8002de4 <HAL_GetTick>
 800641c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006420:	e00b      	b.n	800643a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006422:	f7fc fcdf 	bl	8002de4 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006432:	4293      	cmp	r3, r2
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e2c4      	b.n	80069c4 <HAL_RCC_OscConfig+0x106c>
 800643a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800643e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006442:	2202      	movs	r2, #2
 8006444:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800644a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	fa93 f2a3 	rbit	r2, r3
 8006454:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006458:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006462:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006466:	2202      	movs	r2, #2
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800646e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	fa93 f2a3 	rbit	r2, r3
 8006478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800647c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006480:	601a      	str	r2, [r3, #0]
  return result;
 8006482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006486:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800648a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800648c:	fab3 f383 	clz	r3, r3
 8006490:	b2db      	uxtb	r3, r3
 8006492:	095b      	lsrs	r3, r3, #5
 8006494:	b2db      	uxtb	r3, r3
 8006496:	f043 0302 	orr.w	r3, r3, #2
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d102      	bne.n	80064a6 <HAL_RCC_OscConfig+0xb4e>
 80064a0:	4b43      	ldr	r3, [pc, #268]	@ (80065b0 <HAL_RCC_OscConfig+0xc58>)
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	e013      	b.n	80064ce <HAL_RCC_OscConfig+0xb76>
 80064a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064aa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80064ae:	2202      	movs	r2, #2
 80064b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064b6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	fa93 f2a3 	rbit	r2, r3
 80064c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064c4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	4b39      	ldr	r3, [pc, #228]	@ (80065b0 <HAL_RCC_OscConfig+0xc58>)
 80064cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064d2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80064d6:	2102      	movs	r1, #2
 80064d8:	6011      	str	r1, [r2, #0]
 80064da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064de:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80064e2:	6812      	ldr	r2, [r2, #0]
 80064e4:	fa92 f1a2 	rbit	r1, r2
 80064e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064ec:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80064f0:	6011      	str	r1, [r2, #0]
  return result;
 80064f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064f6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80064fa:	6812      	ldr	r2, [r2, #0]
 80064fc:	fab2 f282 	clz	r2, r2
 8006500:	b2d2      	uxtb	r2, r2
 8006502:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	f002 021f 	and.w	r2, r2, #31
 800650c:	2101      	movs	r1, #1
 800650e:	fa01 f202 	lsl.w	r2, r1, r2
 8006512:	4013      	ands	r3, r2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d184      	bne.n	8006422 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006518:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800651c:	2b01      	cmp	r3, #1
 800651e:	d105      	bne.n	800652c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006520:	4b23      	ldr	r3, [pc, #140]	@ (80065b0 <HAL_RCC_OscConfig+0xc58>)
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	4a22      	ldr	r2, [pc, #136]	@ (80065b0 <HAL_RCC_OscConfig+0xc58>)
 8006526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800652a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800652c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006530:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 8242 	beq.w	80069c2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800653e:	4b1c      	ldr	r3, [pc, #112]	@ (80065b0 <HAL_RCC_OscConfig+0xc58>)
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f003 030c 	and.w	r3, r3, #12
 8006546:	2b08      	cmp	r3, #8
 8006548:	f000 8213 	beq.w	8006972 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800654c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006550:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	2b02      	cmp	r3, #2
 800655a:	f040 8162 	bne.w	8006822 <HAL_RCC_OscConfig+0xeca>
 800655e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006562:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006566:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800656a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800656c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006570:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	fa93 f2a3 	rbit	r2, r3
 800657a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800657e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006582:	601a      	str	r2, [r3, #0]
  return result;
 8006584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006588:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800658c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800658e:	fab3 f383 	clz	r3, r3
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006598:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	461a      	mov	r2, r3
 80065a0:	2300      	movs	r3, #0
 80065a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a4:	f7fc fc1e 	bl	8002de4 <HAL_GetTick>
 80065a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065ac:	e00c      	b.n	80065c8 <HAL_RCC_OscConfig+0xc70>
 80065ae:	bf00      	nop
 80065b0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065b4:	f7fc fc16 	bl	8002de4 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d901      	bls.n	80065c8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e1fd      	b.n	80069c4 <HAL_RCC_OscConfig+0x106c>
 80065c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065cc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80065d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065da:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	fa93 f2a3 	rbit	r2, r3
 80065e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065e8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80065ec:	601a      	str	r2, [r3, #0]
  return result;
 80065ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065f2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80065f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065f8:	fab3 f383 	clz	r3, r3
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	095b      	lsrs	r3, r3, #5
 8006600:	b2db      	uxtb	r3, r3
 8006602:	f043 0301 	orr.w	r3, r3, #1
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b01      	cmp	r3, #1
 800660a:	d102      	bne.n	8006612 <HAL_RCC_OscConfig+0xcba>
 800660c:	4bb0      	ldr	r3, [pc, #704]	@ (80068d0 <HAL_RCC_OscConfig+0xf78>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	e027      	b.n	8006662 <HAL_RCC_OscConfig+0xd0a>
 8006612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006616:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800661a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800661e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006624:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	fa93 f2a3 	rbit	r2, r3
 800662e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006632:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006636:	601a      	str	r2, [r3, #0]
 8006638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800663c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8006640:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800664a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	fa93 f2a3 	rbit	r2, r3
 8006654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006658:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	4b9c      	ldr	r3, [pc, #624]	@ (80068d0 <HAL_RCC_OscConfig+0xf78>)
 8006660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006662:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006666:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800666a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800666e:	6011      	str	r1, [r2, #0]
 8006670:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006674:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006678:	6812      	ldr	r2, [r2, #0]
 800667a:	fa92 f1a2 	rbit	r1, r2
 800667e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006682:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006686:	6011      	str	r1, [r2, #0]
  return result;
 8006688:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800668c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006690:	6812      	ldr	r2, [r2, #0]
 8006692:	fab2 f282 	clz	r2, r2
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	f042 0220 	orr.w	r2, r2, #32
 800669c:	b2d2      	uxtb	r2, r2
 800669e:	f002 021f 	and.w	r2, r2, #31
 80066a2:	2101      	movs	r1, #1
 80066a4:	fa01 f202 	lsl.w	r2, r1, r2
 80066a8:	4013      	ands	r3, r2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d182      	bne.n	80065b4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066ae:	4b88      	ldr	r3, [pc, #544]	@ (80068d0 <HAL_RCC_OscConfig+0xf78>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80066b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80066c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	430b      	orrs	r3, r1
 80066d0:	497f      	ldr	r1, [pc, #508]	@ (80068d0 <HAL_RCC_OscConfig+0xf78>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	604b      	str	r3, [r1, #4]
 80066d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066da:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80066de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066e8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	fa93 f2a3 	rbit	r2, r3
 80066f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066f6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80066fa:	601a      	str	r2, [r3, #0]
  return result;
 80066fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006700:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006704:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006706:	fab3 f383 	clz	r3, r3
 800670a:	b2db      	uxtb	r3, r3
 800670c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006710:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	461a      	mov	r2, r3
 8006718:	2301      	movs	r3, #1
 800671a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800671c:	f7fc fb62 	bl	8002de4 <HAL_GetTick>
 8006720:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006724:	e009      	b.n	800673a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006726:	f7fc fb5d 	bl	8002de4 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e144      	b.n	80069c4 <HAL_RCC_OscConfig+0x106c>
 800673a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800673e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006742:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006746:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800674c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	fa93 f2a3 	rbit	r2, r3
 8006756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800675a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800675e:	601a      	str	r2, [r3, #0]
  return result;
 8006760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006764:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006768:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800676a:	fab3 f383 	clz	r3, r3
 800676e:	b2db      	uxtb	r3, r3
 8006770:	095b      	lsrs	r3, r3, #5
 8006772:	b2db      	uxtb	r3, r3
 8006774:	f043 0301 	orr.w	r3, r3, #1
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b01      	cmp	r3, #1
 800677c:	d102      	bne.n	8006784 <HAL_RCC_OscConfig+0xe2c>
 800677e:	4b54      	ldr	r3, [pc, #336]	@ (80068d0 <HAL_RCC_OscConfig+0xf78>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	e027      	b.n	80067d4 <HAL_RCC_OscConfig+0xe7c>
 8006784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006788:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800678c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006796:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	fa93 f2a3 	rbit	r2, r3
 80067a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067a4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067ae:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80067b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067bc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	fa93 f2a3 	rbit	r2, r3
 80067c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067ca:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	4b3f      	ldr	r3, [pc, #252]	@ (80068d0 <HAL_RCC_OscConfig+0xf78>)
 80067d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067d8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80067dc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80067e0:	6011      	str	r1, [r2, #0]
 80067e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067e6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80067ea:	6812      	ldr	r2, [r2, #0]
 80067ec:	fa92 f1a2 	rbit	r1, r2
 80067f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067f4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80067f8:	6011      	str	r1, [r2, #0]
  return result;
 80067fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067fe:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006802:	6812      	ldr	r2, [r2, #0]
 8006804:	fab2 f282 	clz	r2, r2
 8006808:	b2d2      	uxtb	r2, r2
 800680a:	f042 0220 	orr.w	r2, r2, #32
 800680e:	b2d2      	uxtb	r2, r2
 8006810:	f002 021f 	and.w	r2, r2, #31
 8006814:	2101      	movs	r1, #1
 8006816:	fa01 f202 	lsl.w	r2, r1, r2
 800681a:	4013      	ands	r3, r2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d082      	beq.n	8006726 <HAL_RCC_OscConfig+0xdce>
 8006820:	e0cf      	b.n	80069c2 <HAL_RCC_OscConfig+0x106a>
 8006822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006826:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800682a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800682e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006834:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	fa93 f2a3 	rbit	r2, r3
 800683e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006842:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006846:	601a      	str	r2, [r3, #0]
  return result;
 8006848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800684c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006850:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006852:	fab3 f383 	clz	r3, r3
 8006856:	b2db      	uxtb	r3, r3
 8006858:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800685c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	461a      	mov	r2, r3
 8006864:	2300      	movs	r3, #0
 8006866:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006868:	f7fc fabc 	bl	8002de4 <HAL_GetTick>
 800686c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006870:	e009      	b.n	8006886 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006872:	f7fc fab7 	bl	8002de4 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e09e      	b.n	80069c4 <HAL_RCC_OscConfig+0x106c>
 8006886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800688a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800688e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006898:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	fa93 f2a3 	rbit	r2, r3
 80068a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068a6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80068aa:	601a      	str	r2, [r3, #0]
  return result;
 80068ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068b0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80068b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068b6:	fab3 f383 	clz	r3, r3
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	095b      	lsrs	r3, r3, #5
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	f043 0301 	orr.w	r3, r3, #1
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d104      	bne.n	80068d4 <HAL_RCC_OscConfig+0xf7c>
 80068ca:	4b01      	ldr	r3, [pc, #4]	@ (80068d0 <HAL_RCC_OscConfig+0xf78>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	e029      	b.n	8006924 <HAL_RCC_OscConfig+0xfcc>
 80068d0:	40021000 	.word	0x40021000
 80068d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068d8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80068dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068e6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	fa93 f2a3 	rbit	r2, r3
 80068f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068f4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068fe:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006902:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800690c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	fa93 f2a3 	rbit	r2, r3
 8006916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800691a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	4b2b      	ldr	r3, [pc, #172]	@ (80069d0 <HAL_RCC_OscConfig+0x1078>)
 8006922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006924:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006928:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800692c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006930:	6011      	str	r1, [r2, #0]
 8006932:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006936:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800693a:	6812      	ldr	r2, [r2, #0]
 800693c:	fa92 f1a2 	rbit	r1, r2
 8006940:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006944:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006948:	6011      	str	r1, [r2, #0]
  return result;
 800694a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800694e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	fab2 f282 	clz	r2, r2
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	f042 0220 	orr.w	r2, r2, #32
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	f002 021f 	and.w	r2, r2, #31
 8006964:	2101      	movs	r1, #1
 8006966:	fa01 f202 	lsl.w	r2, r1, r2
 800696a:	4013      	ands	r3, r2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d180      	bne.n	8006872 <HAL_RCC_OscConfig+0xf1a>
 8006970:	e027      	b.n	80069c2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006976:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e01e      	b.n	80069c4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006986:	4b12      	ldr	r3, [pc, #72]	@ (80069d0 <HAL_RCC_OscConfig+0x1078>)
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800698e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006992:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800699a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d10b      	bne.n	80069be <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80069a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80069aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80069ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d001      	beq.n	80069c2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e000      	b.n	80069c4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	40021000 	.word	0x40021000

080069d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b09e      	sub	sp, #120	@ 0x78
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e162      	b.n	8006cb2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069ec:	4b90      	ldr	r3, [pc, #576]	@ (8006c30 <HAL_RCC_ClockConfig+0x25c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d910      	bls.n	8006a1c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069fa:	4b8d      	ldr	r3, [pc, #564]	@ (8006c30 <HAL_RCC_ClockConfig+0x25c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f023 0207 	bic.w	r2, r3, #7
 8006a02:	498b      	ldr	r1, [pc, #556]	@ (8006c30 <HAL_RCC_ClockConfig+0x25c>)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a0a:	4b89      	ldr	r3, [pc, #548]	@ (8006c30 <HAL_RCC_ClockConfig+0x25c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d001      	beq.n	8006a1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e14a      	b.n	8006cb2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d008      	beq.n	8006a3a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a28:	4b82      	ldr	r3, [pc, #520]	@ (8006c34 <HAL_RCC_ClockConfig+0x260>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	497f      	ldr	r1, [pc, #508]	@ (8006c34 <HAL_RCC_ClockConfig+0x260>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 80dc 	beq.w	8006c00 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d13c      	bne.n	8006aca <HAL_RCC_ClockConfig+0xf6>
 8006a50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a54:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a58:	fa93 f3a3 	rbit	r3, r3
 8006a5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a60:	fab3 f383 	clz	r3, r3
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	095b      	lsrs	r3, r3, #5
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	f043 0301 	orr.w	r3, r3, #1
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d102      	bne.n	8006a7a <HAL_RCC_ClockConfig+0xa6>
 8006a74:	4b6f      	ldr	r3, [pc, #444]	@ (8006c34 <HAL_RCC_ClockConfig+0x260>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	e00f      	b.n	8006a9a <HAL_RCC_ClockConfig+0xc6>
 8006a7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a7e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a82:	fa93 f3a3 	rbit	r3, r3
 8006a86:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a90:	fa93 f3a3 	rbit	r3, r3
 8006a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a96:	4b67      	ldr	r3, [pc, #412]	@ (8006c34 <HAL_RCC_ClockConfig+0x260>)
 8006a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006a9e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006aa0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006aa2:	fa92 f2a2 	rbit	r2, r2
 8006aa6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006aa8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006aaa:	fab2 f282 	clz	r2, r2
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	f042 0220 	orr.w	r2, r2, #32
 8006ab4:	b2d2      	uxtb	r2, r2
 8006ab6:	f002 021f 	and.w	r2, r2, #31
 8006aba:	2101      	movs	r1, #1
 8006abc:	fa01 f202 	lsl.w	r2, r1, r2
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d17b      	bne.n	8006bbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e0f3      	b.n	8006cb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d13c      	bne.n	8006b4c <HAL_RCC_ClockConfig+0x178>
 8006ad2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ad6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ada:	fa93 f3a3 	rbit	r3, r3
 8006ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ae2:	fab3 f383 	clz	r3, r3
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	095b      	lsrs	r3, r3, #5
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	f043 0301 	orr.w	r3, r3, #1
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d102      	bne.n	8006afc <HAL_RCC_ClockConfig+0x128>
 8006af6:	4b4f      	ldr	r3, [pc, #316]	@ (8006c34 <HAL_RCC_ClockConfig+0x260>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	e00f      	b.n	8006b1c <HAL_RCC_ClockConfig+0x148>
 8006afc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b00:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b04:	fa93 f3a3 	rbit	r3, r3
 8006b08:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b12:	fa93 f3a3 	rbit	r3, r3
 8006b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b18:	4b46      	ldr	r3, [pc, #280]	@ (8006c34 <HAL_RCC_ClockConfig+0x260>)
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b20:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006b22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b24:	fa92 f2a2 	rbit	r2, r2
 8006b28:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8006b2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b2c:	fab2 f282 	clz	r2, r2
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	f042 0220 	orr.w	r2, r2, #32
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	f002 021f 	and.w	r2, r2, #31
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8006b42:	4013      	ands	r3, r2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d13a      	bne.n	8006bbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e0b2      	b.n	8006cb2 <HAL_RCC_ClockConfig+0x2de>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b52:	fa93 f3a3 	rbit	r3, r3
 8006b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b5a:	fab3 f383 	clz	r3, r3
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	095b      	lsrs	r3, r3, #5
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	f043 0301 	orr.w	r3, r3, #1
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d102      	bne.n	8006b74 <HAL_RCC_ClockConfig+0x1a0>
 8006b6e:	4b31      	ldr	r3, [pc, #196]	@ (8006c34 <HAL_RCC_ClockConfig+0x260>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	e00d      	b.n	8006b90 <HAL_RCC_ClockConfig+0x1bc>
 8006b74:	2302      	movs	r3, #2
 8006b76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7a:	fa93 f3a3 	rbit	r3, r3
 8006b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b80:	2302      	movs	r3, #2
 8006b82:	623b      	str	r3, [r7, #32]
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	fa93 f3a3 	rbit	r3, r3
 8006b8a:	61fb      	str	r3, [r7, #28]
 8006b8c:	4b29      	ldr	r3, [pc, #164]	@ (8006c34 <HAL_RCC_ClockConfig+0x260>)
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b90:	2202      	movs	r2, #2
 8006b92:	61ba      	str	r2, [r7, #24]
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	fa92 f2a2 	rbit	r2, r2
 8006b9a:	617a      	str	r2, [r7, #20]
  return result;
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	fab2 f282 	clz	r2, r2
 8006ba2:	b2d2      	uxtb	r2, r2
 8006ba4:	f042 0220 	orr.w	r2, r2, #32
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	f002 021f 	and.w	r2, r2, #31
 8006bae:	2101      	movs	r1, #1
 8006bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e079      	b.n	8006cb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8006c34 <HAL_RCC_ClockConfig+0x260>)
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f023 0203 	bic.w	r2, r3, #3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	491a      	ldr	r1, [pc, #104]	@ (8006c34 <HAL_RCC_ClockConfig+0x260>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bd0:	f7fc f908 	bl	8002de4 <HAL_GetTick>
 8006bd4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bd6:	e00a      	b.n	8006bee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bd8:	f7fc f904 	bl	8002de4 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e061      	b.n	8006cb2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bee:	4b11      	ldr	r3, [pc, #68]	@ (8006c34 <HAL_RCC_ClockConfig+0x260>)
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f003 020c 	and.w	r2, r3, #12
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d1eb      	bne.n	8006bd8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c00:	4b0b      	ldr	r3, [pc, #44]	@ (8006c30 <HAL_RCC_ClockConfig+0x25c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0307 	and.w	r3, r3, #7
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d214      	bcs.n	8006c38 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c0e:	4b08      	ldr	r3, [pc, #32]	@ (8006c30 <HAL_RCC_ClockConfig+0x25c>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f023 0207 	bic.w	r2, r3, #7
 8006c16:	4906      	ldr	r1, [pc, #24]	@ (8006c30 <HAL_RCC_ClockConfig+0x25c>)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c1e:	4b04      	ldr	r3, [pc, #16]	@ (8006c30 <HAL_RCC_ClockConfig+0x25c>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0307 	and.w	r3, r3, #7
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d005      	beq.n	8006c38 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e040      	b.n	8006cb2 <HAL_RCC_ClockConfig+0x2de>
 8006c30:	40022000 	.word	0x40022000
 8006c34:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d008      	beq.n	8006c56 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c44:	4b1d      	ldr	r3, [pc, #116]	@ (8006cbc <HAL_RCC_ClockConfig+0x2e8>)
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	491a      	ldr	r1, [pc, #104]	@ (8006cbc <HAL_RCC_ClockConfig+0x2e8>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0308 	and.w	r3, r3, #8
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d009      	beq.n	8006c76 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c62:	4b16      	ldr	r3, [pc, #88]	@ (8006cbc <HAL_RCC_ClockConfig+0x2e8>)
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	4912      	ldr	r1, [pc, #72]	@ (8006cbc <HAL_RCC_ClockConfig+0x2e8>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006c76:	f000 f829 	bl	8006ccc <HAL_RCC_GetSysClockFreq>
 8006c7a:	4601      	mov	r1, r0
 8006c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8006cbc <HAL_RCC_ClockConfig+0x2e8>)
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c84:	22f0      	movs	r2, #240	@ 0xf0
 8006c86:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	fa92 f2a2 	rbit	r2, r2
 8006c8e:	60fa      	str	r2, [r7, #12]
  return result;
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	fab2 f282 	clz	r2, r2
 8006c96:	b2d2      	uxtb	r2, r2
 8006c98:	40d3      	lsrs	r3, r2
 8006c9a:	4a09      	ldr	r2, [pc, #36]	@ (8006cc0 <HAL_RCC_ClockConfig+0x2ec>)
 8006c9c:	5cd3      	ldrb	r3, [r2, r3]
 8006c9e:	fa21 f303 	lsr.w	r3, r1, r3
 8006ca2:	4a08      	ldr	r2, [pc, #32]	@ (8006cc4 <HAL_RCC_ClockConfig+0x2f0>)
 8006ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006ca6:	4b08      	ldr	r3, [pc, #32]	@ (8006cc8 <HAL_RCC_ClockConfig+0x2f4>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fc f856 	bl	8002d5c <HAL_InitTick>
  
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3778      	adds	r7, #120	@ 0x78
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	080138ec 	.word	0x080138ec
 8006cc4:	20000018 	.word	0x20000018
 8006cc8:	2000001c 	.word	0x2000001c

08006ccc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b08b      	sub	sp, #44	@ 0x2c
 8006cd0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61bb      	str	r3, [r7, #24]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cde:	2300      	movs	r3, #0
 8006ce0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006ce6:	4b29      	ldr	r3, [pc, #164]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	f003 030c 	and.w	r3, r3, #12
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	d002      	beq.n	8006cfc <HAL_RCC_GetSysClockFreq+0x30>
 8006cf6:	2b08      	cmp	r3, #8
 8006cf8:	d003      	beq.n	8006d02 <HAL_RCC_GetSysClockFreq+0x36>
 8006cfa:	e03c      	b.n	8006d76 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006cfc:	4b24      	ldr	r3, [pc, #144]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006cfe:	623b      	str	r3, [r7, #32]
      break;
 8006d00:	e03c      	b.n	8006d7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8006d08:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8006d0c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	fa92 f2a2 	rbit	r2, r2
 8006d14:	607a      	str	r2, [r7, #4]
  return result;
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	fab2 f282 	clz	r2, r2
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	40d3      	lsrs	r3, r2
 8006d20:	4a1c      	ldr	r2, [pc, #112]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006d22:	5cd3      	ldrb	r3, [r2, r3]
 8006d24:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006d26:	4b19      	ldr	r3, [pc, #100]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	220f      	movs	r2, #15
 8006d30:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	fa92 f2a2 	rbit	r2, r2
 8006d38:	60fa      	str	r2, [r7, #12]
  return result;
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	fab2 f282 	clz	r2, r2
 8006d40:	b2d2      	uxtb	r2, r2
 8006d42:	40d3      	lsrs	r3, r2
 8006d44:	4a14      	ldr	r2, [pc, #80]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006d46:	5cd3      	ldrb	r3, [r2, r3]
 8006d48:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d008      	beq.n	8006d66 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006d54:	4a0e      	ldr	r2, [pc, #56]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	fb02 f303 	mul.w	r3, r2, r3
 8006d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d64:	e004      	b.n	8006d70 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	4a0c      	ldr	r2, [pc, #48]	@ (8006d9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006d6a:	fb02 f303 	mul.w	r3, r2, r3
 8006d6e:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	623b      	str	r3, [r7, #32]
      break;
 8006d74:	e002      	b.n	8006d7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d76:	4b0a      	ldr	r3, [pc, #40]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006d78:	623b      	str	r3, [r7, #32]
      break;
 8006d7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	372c      	adds	r7, #44	@ 0x2c
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40021000 	.word	0x40021000
 8006d90:	00b71b00 	.word	0x00b71b00
 8006d94:	08013904 	.word	0x08013904
 8006d98:	08013914 	.word	0x08013914
 8006d9c:	003d0900 	.word	0x003d0900
 8006da0:	007a1200 	.word	0x007a1200

08006da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006da4:	b480      	push	{r7}
 8006da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006da8:	4b03      	ldr	r3, [pc, #12]	@ (8006db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006daa:	681b      	ldr	r3, [r3, #0]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	20000018 	.word	0x20000018

08006dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006dc2:	f7ff ffef 	bl	8006da4 <HAL_RCC_GetHCLKFreq>
 8006dc6:	4601      	mov	r1, r0
 8006dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8006df8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006dd0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006dd4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	fa92 f2a2 	rbit	r2, r2
 8006ddc:	603a      	str	r2, [r7, #0]
  return result;
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	fab2 f282 	clz	r2, r2
 8006de4:	b2d2      	uxtb	r2, r2
 8006de6:	40d3      	lsrs	r3, r2
 8006de8:	4a04      	ldr	r2, [pc, #16]	@ (8006dfc <HAL_RCC_GetPCLK1Freq+0x40>)
 8006dea:	5cd3      	ldrb	r3, [r2, r3]
 8006dec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	080138fc 	.word	0x080138fc

08006e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006e06:	f7ff ffcd 	bl	8006da4 <HAL_RCC_GetHCLKFreq>
 8006e0a:	4601      	mov	r1, r0
 8006e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e3c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8006e14:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8006e18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	fa92 f2a2 	rbit	r2, r2
 8006e20:	603a      	str	r2, [r7, #0]
  return result;
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	fab2 f282 	clz	r2, r2
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	40d3      	lsrs	r3, r2
 8006e2c:	4a04      	ldr	r2, [pc, #16]	@ (8006e40 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006e2e:	5cd3      	ldrb	r3, [r2, r3]
 8006e30:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006e34:	4618      	mov	r0, r3
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	40021000 	.word	0x40021000
 8006e40:	080138fc 	.word	0x080138fc

08006e44 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b092      	sub	sp, #72	@ 0x48
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006e54:	2300      	movs	r3, #0
 8006e56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 80d4 	beq.w	8007010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e68:	4b4e      	ldr	r3, [pc, #312]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10e      	bne.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e74:	4b4b      	ldr	r3, [pc, #300]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	4a4a      	ldr	r2, [pc, #296]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e7e:	61d3      	str	r3, [r2, #28]
 8006e80:	4b48      	ldr	r3, [pc, #288]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e88:	60bb      	str	r3, [r7, #8]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e92:	4b45      	ldr	r3, [pc, #276]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d118      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e9e:	4b42      	ldr	r3, [pc, #264]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a41      	ldr	r2, [pc, #260]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ea8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006eaa:	f7fb ff9b 	bl	8002de4 <HAL_GetTick>
 8006eae:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eb0:	e008      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eb2:	f7fb ff97 	bl	8002de4 <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	2b64      	cmp	r3, #100	@ 0x64
 8006ebe:	d901      	bls.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e12d      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ec4:	4b38      	ldr	r3, [pc, #224]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0f0      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ed0:	4b34      	ldr	r3, [pc, #208]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 8084 	beq.w	8006fea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d07c      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006efa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006efe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f02:	fa93 f3a3 	rbit	r3, r3
 8006f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f0a:	fab3 f383 	clz	r3, r3
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	461a      	mov	r2, r3
 8006f12:	4b26      	ldr	r3, [pc, #152]	@ (8006fac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	461a      	mov	r2, r3
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006f22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f26:	fa93 f3a3 	rbit	r3, r3
 8006f2a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f2e:	fab3 f383 	clz	r3, r3
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	461a      	mov	r2, r3
 8006f36:	4b1d      	ldr	r3, [pc, #116]	@ (8006fac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006f38:	4413      	add	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	2300      	movs	r3, #0
 8006f40:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006f42:	4a18      	ldr	r2, [pc, #96]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f46:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d04b      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f52:	f7fb ff47 	bl	8002de4 <HAL_GetTick>
 8006f56:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f58:	e00a      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f5a:	f7fb ff43 	bl	8002de4 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d901      	bls.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e0d7      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8006f70:	2302      	movs	r3, #2
 8006f72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f76:	fa93 f3a3 	rbit	r3, r3
 8006f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	623b      	str	r3, [r7, #32]
 8006f80:	6a3b      	ldr	r3, [r7, #32]
 8006f82:	fa93 f3a3 	rbit	r3, r3
 8006f86:	61fb      	str	r3, [r7, #28]
  return result;
 8006f88:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f8a:	fab3 f383 	clz	r3, r3
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	095b      	lsrs	r3, r3, #5
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	f043 0302 	orr.w	r3, r3, #2
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d108      	bne.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006f9e:	4b01      	ldr	r3, [pc, #4]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	e00d      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006fa4:	40021000 	.word	0x40021000
 8006fa8:	40007000 	.word	0x40007000
 8006fac:	10908100 	.word	0x10908100
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	fa93 f3a3 	rbit	r3, r3
 8006fba:	617b      	str	r3, [r7, #20]
 8006fbc:	4b5a      	ldr	r3, [pc, #360]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	613a      	str	r2, [r7, #16]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	fa92 f2a2 	rbit	r2, r2
 8006fca:	60fa      	str	r2, [r7, #12]
  return result;
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	fab2 f282 	clz	r2, r2
 8006fd2:	b2d2      	uxtb	r2, r2
 8006fd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fd8:	b2d2      	uxtb	r2, r2
 8006fda:	f002 021f 	and.w	r2, r2, #31
 8006fde:	2101      	movs	r1, #1
 8006fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d0b7      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006fea:	4b4f      	ldr	r3, [pc, #316]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	494c      	ldr	r1, [pc, #304]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006ffc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007000:	2b01      	cmp	r3, #1
 8007002:	d105      	bne.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007004:	4b48      	ldr	r3, [pc, #288]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	4a47      	ldr	r2, [pc, #284]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800700a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800700e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	2b00      	cmp	r3, #0
 800701a:	d008      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800701c:	4b42      	ldr	r3, [pc, #264]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800701e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007020:	f023 0203 	bic.w	r2, r3, #3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	493f      	ldr	r1, [pc, #252]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800702a:	4313      	orrs	r3, r2
 800702c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d008      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800703a:	4b3b      	ldr	r3, [pc, #236]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800703c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800703e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	4938      	ldr	r1, [pc, #224]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007048:	4313      	orrs	r3, r2
 800704a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0304 	and.w	r3, r3, #4
 8007054:	2b00      	cmp	r3, #0
 8007056:	d008      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007058:	4b33      	ldr	r3, [pc, #204]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800705a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800705c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	4930      	ldr	r1, [pc, #192]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007066:	4313      	orrs	r3, r2
 8007068:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b00      	cmp	r3, #0
 8007074:	d008      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007076:	4b2c      	ldr	r3, [pc, #176]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800707a:	f023 0210 	bic.w	r2, r3, #16
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	4929      	ldr	r1, [pc, #164]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007084:	4313      	orrs	r3, r2
 8007086:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d008      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007094:	4b24      	ldr	r3, [pc, #144]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a0:	4921      	ldr	r1, [pc, #132]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d008      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80070b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b6:	f023 0220 	bic.w	r2, r3, #32
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	491a      	ldr	r1, [pc, #104]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d008      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80070d0:	4b15      	ldr	r3, [pc, #84]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	4912      	ldr	r1, [pc, #72]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d008      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 80070ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	490b      	ldr	r1, [pc, #44]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007108:	2b00      	cmp	r3, #0
 800710a:	d008      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800710c:	4b06      	ldr	r3, [pc, #24]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800710e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007110:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007118:	4903      	ldr	r1, [pc, #12]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800711a:	4313      	orrs	r3, r2
 800711c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3748      	adds	r7, #72	@ 0x48
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	40021000 	.word	0x40021000

0800712c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e041      	b.n	80071c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fb faa0 	bl	8002698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	3304      	adds	r3, #4
 8007168:	4619      	mov	r1, r3
 800716a:	4610      	mov	r0, r2
 800716c:	f000 ff84 	bl	8008078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
	...

080071cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d001      	beq.n	80071e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e041      	b.n	8007268 <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071f4:	d01d      	beq.n	8007232 <HAL_TIM_Base_Start+0x66>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a1e      	ldr	r2, [pc, #120]	@ (8007274 <HAL_TIM_Base_Start+0xa8>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d018      	beq.n	8007232 <HAL_TIM_Base_Start+0x66>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a1c      	ldr	r2, [pc, #112]	@ (8007278 <HAL_TIM_Base_Start+0xac>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d013      	beq.n	8007232 <HAL_TIM_Base_Start+0x66>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a1b      	ldr	r2, [pc, #108]	@ (800727c <HAL_TIM_Base_Start+0xb0>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d00e      	beq.n	8007232 <HAL_TIM_Base_Start+0x66>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a19      	ldr	r2, [pc, #100]	@ (8007280 <HAL_TIM_Base_Start+0xb4>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d009      	beq.n	8007232 <HAL_TIM_Base_Start+0x66>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a18      	ldr	r2, [pc, #96]	@ (8007284 <HAL_TIM_Base_Start+0xb8>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d004      	beq.n	8007232 <HAL_TIM_Base_Start+0x66>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a16      	ldr	r2, [pc, #88]	@ (8007288 <HAL_TIM_Base_Start+0xbc>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d111      	bne.n	8007256 <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f003 0307 	and.w	r3, r3, #7
 800723c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2b06      	cmp	r3, #6
 8007242:	d010      	beq.n	8007266 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f042 0201 	orr.w	r2, r2, #1
 8007252:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007254:	e007      	b.n	8007266 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f042 0201 	orr.w	r2, r2, #1
 8007264:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	40000400 	.word	0x40000400
 8007278:	40000800 	.word	0x40000800
 800727c:	40000c00 	.word	0x40000c00
 8007280:	40001800 	.word	0x40001800
 8007284:	40014000 	.word	0x40014000
 8007288:	40015c00 	.word	0x40015c00

0800728c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800729a:	b2db      	uxtb	r3, r3
 800729c:	2b01      	cmp	r3, #1
 800729e:	d001      	beq.n	80072a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e049      	b.n	8007338 <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2202      	movs	r2, #2
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0201 	orr.w	r2, r2, #1
 80072ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072c4:	d01d      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x76>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007344 <HAL_TIM_Base_Start_IT+0xb8>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d018      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x76>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007348 <HAL_TIM_Base_Start_IT+0xbc>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d013      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x76>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a1b      	ldr	r2, [pc, #108]	@ (800734c <HAL_TIM_Base_Start_IT+0xc0>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d00e      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x76>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a19      	ldr	r2, [pc, #100]	@ (8007350 <HAL_TIM_Base_Start_IT+0xc4>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d009      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x76>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a18      	ldr	r2, [pc, #96]	@ (8007354 <HAL_TIM_Base_Start_IT+0xc8>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d004      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x76>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a16      	ldr	r2, [pc, #88]	@ (8007358 <HAL_TIM_Base_Start_IT+0xcc>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d111      	bne.n	8007326 <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f003 0307 	and.w	r3, r3, #7
 800730c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2b06      	cmp	r3, #6
 8007312:	d010      	beq.n	8007336 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0201 	orr.w	r2, r2, #1
 8007322:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007324:	e007      	b.n	8007336 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f042 0201 	orr.w	r2, r2, #1
 8007334:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	40000400 	.word	0x40000400
 8007348:	40000800 	.word	0x40000800
 800734c:	40000c00 	.word	0x40000c00
 8007350:	40001800 	.word	0x40001800
 8007354:	40014000 	.word	0x40014000
 8007358:	40015c00 	.word	0x40015c00

0800735c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e041      	b.n	80073f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d106      	bne.n	8007388 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7fb f964 	bl	8002650 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	3304      	adds	r3, #4
 8007398:	4619      	mov	r1, r3
 800739a:	4610      	mov	r0, r2
 800739c:	f000 fe6c 	bl	8008078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d109      	bne.n	8007420 <HAL_TIM_PWM_Start+0x24>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b01      	cmp	r3, #1
 8007416:	bf14      	ite	ne
 8007418:	2301      	movne	r3, #1
 800741a:	2300      	moveq	r3, #0
 800741c:	b2db      	uxtb	r3, r3
 800741e:	e022      	b.n	8007466 <HAL_TIM_PWM_Start+0x6a>
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	2b04      	cmp	r3, #4
 8007424:	d109      	bne.n	800743a <HAL_TIM_PWM_Start+0x3e>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b01      	cmp	r3, #1
 8007430:	bf14      	ite	ne
 8007432:	2301      	movne	r3, #1
 8007434:	2300      	moveq	r3, #0
 8007436:	b2db      	uxtb	r3, r3
 8007438:	e015      	b.n	8007466 <HAL_TIM_PWM_Start+0x6a>
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b08      	cmp	r3, #8
 800743e:	d109      	bne.n	8007454 <HAL_TIM_PWM_Start+0x58>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b01      	cmp	r3, #1
 800744a:	bf14      	ite	ne
 800744c:	2301      	movne	r3, #1
 800744e:	2300      	moveq	r3, #0
 8007450:	b2db      	uxtb	r3, r3
 8007452:	e008      	b.n	8007466 <HAL_TIM_PWM_Start+0x6a>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b01      	cmp	r3, #1
 800745e:	bf14      	ite	ne
 8007460:	2301      	movne	r3, #1
 8007462:	2300      	moveq	r3, #0
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e07c      	b.n	8007568 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d104      	bne.n	800747e <HAL_TIM_PWM_Start+0x82>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800747c:	e013      	b.n	80074a6 <HAL_TIM_PWM_Start+0xaa>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b04      	cmp	r3, #4
 8007482:	d104      	bne.n	800748e <HAL_TIM_PWM_Start+0x92>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800748c:	e00b      	b.n	80074a6 <HAL_TIM_PWM_Start+0xaa>
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b08      	cmp	r3, #8
 8007492:	d104      	bne.n	800749e <HAL_TIM_PWM_Start+0xa2>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800749c:	e003      	b.n	80074a6 <HAL_TIM_PWM_Start+0xaa>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2202      	movs	r2, #2
 80074a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2201      	movs	r2, #1
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f001 f86f 	bl	8008592 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a2d      	ldr	r2, [pc, #180]	@ (8007570 <HAL_TIM_PWM_Start+0x174>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d009      	beq.n	80074d2 <HAL_TIM_PWM_Start+0xd6>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a2c      	ldr	r2, [pc, #176]	@ (8007574 <HAL_TIM_PWM_Start+0x178>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d004      	beq.n	80074d2 <HAL_TIM_PWM_Start+0xd6>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a2a      	ldr	r2, [pc, #168]	@ (8007578 <HAL_TIM_PWM_Start+0x17c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d101      	bne.n	80074d6 <HAL_TIM_PWM_Start+0xda>
 80074d2:	2301      	movs	r3, #1
 80074d4:	e000      	b.n	80074d8 <HAL_TIM_PWM_Start+0xdc>
 80074d6:	2300      	movs	r3, #0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d007      	beq.n	80074ec <HAL_TIM_PWM_Start+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074f4:	d01d      	beq.n	8007532 <HAL_TIM_PWM_Start+0x136>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a20      	ldr	r2, [pc, #128]	@ (800757c <HAL_TIM_PWM_Start+0x180>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d018      	beq.n	8007532 <HAL_TIM_PWM_Start+0x136>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a1e      	ldr	r2, [pc, #120]	@ (8007580 <HAL_TIM_PWM_Start+0x184>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d013      	beq.n	8007532 <HAL_TIM_PWM_Start+0x136>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a1d      	ldr	r2, [pc, #116]	@ (8007584 <HAL_TIM_PWM_Start+0x188>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d00e      	beq.n	8007532 <HAL_TIM_PWM_Start+0x136>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a1b      	ldr	r2, [pc, #108]	@ (8007588 <HAL_TIM_PWM_Start+0x18c>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d009      	beq.n	8007532 <HAL_TIM_PWM_Start+0x136>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a13      	ldr	r2, [pc, #76]	@ (8007570 <HAL_TIM_PWM_Start+0x174>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d004      	beq.n	8007532 <HAL_TIM_PWM_Start+0x136>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a17      	ldr	r2, [pc, #92]	@ (800758c <HAL_TIM_PWM_Start+0x190>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d111      	bne.n	8007556 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f003 0307 	and.w	r3, r3, #7
 800753c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2b06      	cmp	r3, #6
 8007542:	d010      	beq.n	8007566 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0201 	orr.w	r2, r2, #1
 8007552:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007554:	e007      	b.n	8007566 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f042 0201 	orr.w	r2, r2, #1
 8007564:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	40014000 	.word	0x40014000
 8007574:	40014400 	.word	0x40014400
 8007578:	40014800 	.word	0x40014800
 800757c:	40000400 	.word	0x40000400
 8007580:	40000800 	.word	0x40000800
 8007584:	40000c00 	.word	0x40000c00
 8007588:	40001800 	.word	0x40001800
 800758c:	40015c00 	.word	0x40015c00

08007590 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2200      	movs	r2, #0
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fff5 	bl	8008592 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a31      	ldr	r2, [pc, #196]	@ (8007674 <HAL_TIM_PWM_Stop+0xe4>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d009      	beq.n	80075c6 <HAL_TIM_PWM_Stop+0x36>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a30      	ldr	r2, [pc, #192]	@ (8007678 <HAL_TIM_PWM_Stop+0xe8>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d004      	beq.n	80075c6 <HAL_TIM_PWM_Stop+0x36>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a2e      	ldr	r2, [pc, #184]	@ (800767c <HAL_TIM_PWM_Stop+0xec>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d101      	bne.n	80075ca <HAL_TIM_PWM_Stop+0x3a>
 80075c6:	2301      	movs	r3, #1
 80075c8:	e000      	b.n	80075cc <HAL_TIM_PWM_Stop+0x3c>
 80075ca:	2300      	movs	r3, #0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d017      	beq.n	8007600 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6a1a      	ldr	r2, [r3, #32]
 80075d6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80075da:	4013      	ands	r3, r2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10f      	bne.n	8007600 <HAL_TIM_PWM_Stop+0x70>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6a1a      	ldr	r2, [r3, #32]
 80075e6:	f240 4344 	movw	r3, #1092	@ 0x444
 80075ea:	4013      	ands	r3, r2
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d107      	bne.n	8007600 <HAL_TIM_PWM_Stop+0x70>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80075fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6a1a      	ldr	r2, [r3, #32]
 8007606:	f241 1311 	movw	r3, #4369	@ 0x1111
 800760a:	4013      	ands	r3, r2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10f      	bne.n	8007630 <HAL_TIM_PWM_Stop+0xa0>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6a1a      	ldr	r2, [r3, #32]
 8007616:	f240 4344 	movw	r3, #1092	@ 0x444
 800761a:	4013      	ands	r3, r2
 800761c:	2b00      	cmp	r3, #0
 800761e:	d107      	bne.n	8007630 <HAL_TIM_PWM_Stop+0xa0>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f022 0201 	bic.w	r2, r2, #1
 800762e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d104      	bne.n	8007640 <HAL_TIM_PWM_Stop+0xb0>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800763e:	e013      	b.n	8007668 <HAL_TIM_PWM_Stop+0xd8>
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	2b04      	cmp	r3, #4
 8007644:	d104      	bne.n	8007650 <HAL_TIM_PWM_Stop+0xc0>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800764e:	e00b      	b.n	8007668 <HAL_TIM_PWM_Stop+0xd8>
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	2b08      	cmp	r3, #8
 8007654:	d104      	bne.n	8007660 <HAL_TIM_PWM_Stop+0xd0>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800765e:	e003      	b.n	8007668 <HAL_TIM_PWM_Stop+0xd8>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	40014000 	.word	0x40014000
 8007678:	40014400 	.word	0x40014400
 800767c:	40014800 	.word	0x40014800

08007680 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d109      	bne.n	80076a8 <HAL_TIM_PWM_Start_IT+0x28>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b01      	cmp	r3, #1
 800769e:	bf14      	ite	ne
 80076a0:	2301      	movne	r3, #1
 80076a2:	2300      	moveq	r3, #0
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	e022      	b.n	80076ee <HAL_TIM_PWM_Start_IT+0x6e>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d109      	bne.n	80076c2 <HAL_TIM_PWM_Start_IT+0x42>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	bf14      	ite	ne
 80076ba:	2301      	movne	r3, #1
 80076bc:	2300      	moveq	r3, #0
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	e015      	b.n	80076ee <HAL_TIM_PWM_Start_IT+0x6e>
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d109      	bne.n	80076dc <HAL_TIM_PWM_Start_IT+0x5c>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	bf14      	ite	ne
 80076d4:	2301      	movne	r3, #1
 80076d6:	2300      	moveq	r3, #0
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	e008      	b.n	80076ee <HAL_TIM_PWM_Start_IT+0x6e>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	bf14      	ite	ne
 80076e8:	2301      	movne	r3, #1
 80076ea:	2300      	moveq	r3, #0
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d001      	beq.n	80076f6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e0c7      	b.n	8007886 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d104      	bne.n	8007706 <HAL_TIM_PWM_Start_IT+0x86>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2202      	movs	r2, #2
 8007700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007704:	e013      	b.n	800772e <HAL_TIM_PWM_Start_IT+0xae>
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b04      	cmp	r3, #4
 800770a:	d104      	bne.n	8007716 <HAL_TIM_PWM_Start_IT+0x96>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007714:	e00b      	b.n	800772e <HAL_TIM_PWM_Start_IT+0xae>
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2b08      	cmp	r3, #8
 800771a:	d104      	bne.n	8007726 <HAL_TIM_PWM_Start_IT+0xa6>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2202      	movs	r2, #2
 8007720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007724:	e003      	b.n	800772e <HAL_TIM_PWM_Start_IT+0xae>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2202      	movs	r2, #2
 800772a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	2b0c      	cmp	r3, #12
 8007732:	d841      	bhi.n	80077b8 <HAL_TIM_PWM_Start_IT+0x138>
 8007734:	a201      	add	r2, pc, #4	@ (adr r2, 800773c <HAL_TIM_PWM_Start_IT+0xbc>)
 8007736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773a:	bf00      	nop
 800773c:	08007771 	.word	0x08007771
 8007740:	080077b9 	.word	0x080077b9
 8007744:	080077b9 	.word	0x080077b9
 8007748:	080077b9 	.word	0x080077b9
 800774c:	08007783 	.word	0x08007783
 8007750:	080077b9 	.word	0x080077b9
 8007754:	080077b9 	.word	0x080077b9
 8007758:	080077b9 	.word	0x080077b9
 800775c:	08007795 	.word	0x08007795
 8007760:	080077b9 	.word	0x080077b9
 8007764:	080077b9 	.word	0x080077b9
 8007768:	080077b9 	.word	0x080077b9
 800776c:	080077a7 	.word	0x080077a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0202 	orr.w	r2, r2, #2
 800777e:	60da      	str	r2, [r3, #12]
      break;
 8007780:	e01d      	b.n	80077be <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f042 0204 	orr.w	r2, r2, #4
 8007790:	60da      	str	r2, [r3, #12]
      break;
 8007792:	e014      	b.n	80077be <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f042 0208 	orr.w	r2, r2, #8
 80077a2:	60da      	str	r2, [r3, #12]
      break;
 80077a4:	e00b      	b.n	80077be <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68da      	ldr	r2, [r3, #12]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f042 0210 	orr.w	r2, r2, #16
 80077b4:	60da      	str	r2, [r3, #12]
      break;
 80077b6:	e002      	b.n	80077be <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	73fb      	strb	r3, [r7, #15]
      break;
 80077bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80077be:	7bfb      	ldrb	r3, [r7, #15]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d15f      	bne.n	8007884 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2201      	movs	r2, #1
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 fee0 	bl	8008592 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a2e      	ldr	r2, [pc, #184]	@ (8007890 <HAL_TIM_PWM_Start_IT+0x210>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d009      	beq.n	80077f0 <HAL_TIM_PWM_Start_IT+0x170>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a2c      	ldr	r2, [pc, #176]	@ (8007894 <HAL_TIM_PWM_Start_IT+0x214>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d004      	beq.n	80077f0 <HAL_TIM_PWM_Start_IT+0x170>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a2b      	ldr	r2, [pc, #172]	@ (8007898 <HAL_TIM_PWM_Start_IT+0x218>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d101      	bne.n	80077f4 <HAL_TIM_PWM_Start_IT+0x174>
 80077f0:	2301      	movs	r3, #1
 80077f2:	e000      	b.n	80077f6 <HAL_TIM_PWM_Start_IT+0x176>
 80077f4:	2300      	movs	r3, #0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d007      	beq.n	800780a <HAL_TIM_PWM_Start_IT+0x18a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007808:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007812:	d01d      	beq.n	8007850 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a20      	ldr	r2, [pc, #128]	@ (800789c <HAL_TIM_PWM_Start_IT+0x21c>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d018      	beq.n	8007850 <HAL_TIM_PWM_Start_IT+0x1d0>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a1f      	ldr	r2, [pc, #124]	@ (80078a0 <HAL_TIM_PWM_Start_IT+0x220>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d013      	beq.n	8007850 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a1d      	ldr	r2, [pc, #116]	@ (80078a4 <HAL_TIM_PWM_Start_IT+0x224>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d00e      	beq.n	8007850 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a1c      	ldr	r2, [pc, #112]	@ (80078a8 <HAL_TIM_PWM_Start_IT+0x228>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d009      	beq.n	8007850 <HAL_TIM_PWM_Start_IT+0x1d0>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a13      	ldr	r2, [pc, #76]	@ (8007890 <HAL_TIM_PWM_Start_IT+0x210>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d004      	beq.n	8007850 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a18      	ldr	r2, [pc, #96]	@ (80078ac <HAL_TIM_PWM_Start_IT+0x22c>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d111      	bne.n	8007874 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f003 0307 	and.w	r3, r3, #7
 800785a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2b06      	cmp	r3, #6
 8007860:	d010      	beq.n	8007884 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f042 0201 	orr.w	r2, r2, #1
 8007870:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007872:	e007      	b.n	8007884 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f042 0201 	orr.w	r2, r2, #1
 8007882:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007884:	7bfb      	ldrb	r3, [r7, #15]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	40014000 	.word	0x40014000
 8007894:	40014400 	.word	0x40014400
 8007898:	40014800 	.word	0x40014800
 800789c:	40000400 	.word	0x40000400
 80078a0:	40000800 	.word	0x40000800
 80078a4:	40000c00 	.word	0x40000c00
 80078a8:	40001800 	.word	0x40001800
 80078ac:	40015c00 	.word	0x40015c00

080078b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e097      	b.n	80079f4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d106      	bne.n	80078de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7fa ff03 	bl	80026e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2202      	movs	r2, #2
 80078e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	6812      	ldr	r2, [r2, #0]
 80078f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078f4:	f023 0307 	bic.w	r3, r3, #7
 80078f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	3304      	adds	r3, #4
 8007902:	4619      	mov	r1, r3
 8007904:	4610      	mov	r0, r2
 8007906:	f000 fbb7 	bl	8008078 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	4313      	orrs	r3, r2
 800792a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007932:	f023 0303 	bic.w	r3, r3, #3
 8007936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	689a      	ldr	r2, [r3, #8]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	021b      	lsls	r3, r3, #8
 8007942:	4313      	orrs	r3, r2
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	4313      	orrs	r3, r2
 8007948:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007950:	f023 030c 	bic.w	r3, r3, #12
 8007954:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800795c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007960:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	68da      	ldr	r2, [r3, #12]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	021b      	lsls	r3, r3, #8
 800796c:	4313      	orrs	r3, r2
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	4313      	orrs	r3, r2
 8007972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	011a      	lsls	r2, r3, #4
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	031b      	lsls	r3, r3, #12
 8007980:	4313      	orrs	r3, r2
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	4313      	orrs	r3, r2
 8007986:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800798e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007996:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	011b      	lsls	r3, r3, #4
 80079a2:	4313      	orrs	r3, r2
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a24:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d110      	bne.n	8007a4e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d102      	bne.n	8007a38 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a32:	7b7b      	ldrb	r3, [r7, #13]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d001      	beq.n	8007a3c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e069      	b.n	8007b10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2202      	movs	r2, #2
 8007a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a4c:	e031      	b.n	8007ab2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	d110      	bne.n	8007a76 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d102      	bne.n	8007a60 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a5a:	7b3b      	ldrb	r3, [r7, #12]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d001      	beq.n	8007a64 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e055      	b.n	8007b10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a74:	e01d      	b.n	8007ab2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d108      	bne.n	8007a8e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d105      	bne.n	8007a8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a82:	7b7b      	ldrb	r3, [r7, #13]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d102      	bne.n	8007a8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a88:	7b3b      	ldrb	r3, [r7, #12]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d001      	beq.n	8007a92 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e03e      	b.n	8007b10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2202      	movs	r2, #2
 8007a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2202      	movs	r2, #2
 8007aae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d003      	beq.n	8007ac0 <HAL_TIM_Encoder_Start+0xc4>
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2b04      	cmp	r3, #4
 8007abc:	d008      	beq.n	8007ad0 <HAL_TIM_Encoder_Start+0xd4>
 8007abe:	e00f      	b.n	8007ae0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 fd62 	bl	8008592 <TIM_CCxChannelCmd>
      break;
 8007ace:	e016      	b.n	8007afe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	2104      	movs	r1, #4
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 fd5a 	bl	8008592 <TIM_CCxChannelCmd>
      break;
 8007ade:	e00e      	b.n	8007afe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 fd52 	bl	8008592 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2201      	movs	r2, #1
 8007af4:	2104      	movs	r1, #4
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 fd4b 	bl	8008592 <TIM_CCxChannelCmd>
      break;
 8007afc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f042 0201 	orr.w	r2, r2, #1
 8007b0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d122      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	f003 0302 	and.w	r3, r3, #2
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d11b      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f06f 0202 	mvn.w	r2, #2
 8007b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	f003 0303 	and.w	r3, r3, #3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fa77 	bl	800804e <HAL_TIM_IC_CaptureCallback>
 8007b60:	e005      	b.n	8007b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fa69 	bl	800803a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7f9 fefb 	bl	8001964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d122      	bne.n	8007bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	f003 0304 	and.w	r3, r3, #4
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	d11b      	bne.n	8007bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f06f 0204 	mvn.w	r2, #4
 8007b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fa4d 	bl	800804e <HAL_TIM_IC_CaptureCallback>
 8007bb4:	e005      	b.n	8007bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fa3f 	bl	800803a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7f9 fed1 	bl	8001964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	f003 0308 	and.w	r3, r3, #8
 8007bd2:	2b08      	cmp	r3, #8
 8007bd4:	d122      	bne.n	8007c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	f003 0308 	and.w	r3, r3, #8
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d11b      	bne.n	8007c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f06f 0208 	mvn.w	r2, #8
 8007bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2204      	movs	r2, #4
 8007bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	f003 0303 	and.w	r3, r3, #3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fa23 	bl	800804e <HAL_TIM_IC_CaptureCallback>
 8007c08:	e005      	b.n	8007c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fa15 	bl	800803a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7f9 fea7 	bl	8001964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	f003 0310 	and.w	r3, r3, #16
 8007c26:	2b10      	cmp	r3, #16
 8007c28:	d122      	bne.n	8007c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	f003 0310 	and.w	r3, r3, #16
 8007c34:	2b10      	cmp	r3, #16
 8007c36:	d11b      	bne.n	8007c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f06f 0210 	mvn.w	r2, #16
 8007c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2208      	movs	r2, #8
 8007c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	69db      	ldr	r3, [r3, #28]
 8007c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f9f9 	bl	800804e <HAL_TIM_IC_CaptureCallback>
 8007c5c:	e005      	b.n	8007c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f9eb 	bl	800803a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7f9 fe7d 	bl	8001964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d10e      	bne.n	8007c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f003 0301 	and.w	r3, r3, #1
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d107      	bne.n	8007c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f06f 0201 	mvn.w	r2, #1
 8007c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7fa fa42 	bl	8002120 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ca6:	2b80      	cmp	r3, #128	@ 0x80
 8007ca8:	d10e      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cb4:	2b80      	cmp	r3, #128	@ 0x80
 8007cb6:	d107      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fd08 	bl	80086d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cd2:	2b40      	cmp	r3, #64	@ 0x40
 8007cd4:	d10e      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ce0:	2b40      	cmp	r3, #64	@ 0x40
 8007ce2:	d107      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f9b7 	bl	8008062 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 0320 	and.w	r3, r3, #32
 8007cfe:	2b20      	cmp	r3, #32
 8007d00:	d10e      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f003 0320 	and.w	r3, r3, #32
 8007d0c:	2b20      	cmp	r3, #32
 8007d0e:	d107      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0220 	mvn.w	r2, #32
 8007d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fcd2 	bl	80086c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d101      	bne.n	8007d46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d42:	2302      	movs	r3, #2
 8007d44:	e0ae      	b.n	8007ea4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b0c      	cmp	r3, #12
 8007d52:	f200 809f 	bhi.w	8007e94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007d56:	a201      	add	r2, pc, #4	@ (adr r2, 8007d5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5c:	08007d91 	.word	0x08007d91
 8007d60:	08007e95 	.word	0x08007e95
 8007d64:	08007e95 	.word	0x08007e95
 8007d68:	08007e95 	.word	0x08007e95
 8007d6c:	08007dd1 	.word	0x08007dd1
 8007d70:	08007e95 	.word	0x08007e95
 8007d74:	08007e95 	.word	0x08007e95
 8007d78:	08007e95 	.word	0x08007e95
 8007d7c:	08007e13 	.word	0x08007e13
 8007d80:	08007e95 	.word	0x08007e95
 8007d84:	08007e95 	.word	0x08007e95
 8007d88:	08007e95 	.word	0x08007e95
 8007d8c:	08007e53 	.word	0x08007e53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68b9      	ldr	r1, [r7, #8]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 fa08 	bl	80081ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	699a      	ldr	r2, [r3, #24]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 0208 	orr.w	r2, r2, #8
 8007daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	699a      	ldr	r2, [r3, #24]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f022 0204 	bic.w	r2, r2, #4
 8007dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6999      	ldr	r1, [r3, #24]
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	691a      	ldr	r2, [r3, #16]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	619a      	str	r2, [r3, #24]
      break;
 8007dce:	e064      	b.n	8007e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68b9      	ldr	r1, [r7, #8]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 fa62 	bl	80082a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	699a      	ldr	r2, [r3, #24]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	699a      	ldr	r2, [r3, #24]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6999      	ldr	r1, [r3, #24]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	021a      	lsls	r2, r3, #8
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	619a      	str	r2, [r3, #24]
      break;
 8007e10:	e043      	b.n	8007e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68b9      	ldr	r1, [r7, #8]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 faa3 	bl	8008364 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	69da      	ldr	r2, [r3, #28]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f042 0208 	orr.w	r2, r2, #8
 8007e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	69da      	ldr	r2, [r3, #28]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 0204 	bic.w	r2, r2, #4
 8007e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	69d9      	ldr	r1, [r3, #28]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	691a      	ldr	r2, [r3, #16]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	61da      	str	r2, [r3, #28]
      break;
 8007e50:	e023      	b.n	8007e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68b9      	ldr	r1, [r7, #8]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f000 fac1 	bl	80083e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	69da      	ldr	r2, [r3, #28]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	69da      	ldr	r2, [r3, #28]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	69d9      	ldr	r1, [r3, #28]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	021a      	lsls	r2, r3, #8
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	61da      	str	r2, [r3, #28]
      break;
 8007e92:	e002      	b.n	8007e9a <HAL_TIM_PWM_ConfigChannel+0x172>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	75fb      	strb	r3, [r7, #23]
      break;
 8007e98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d101      	bne.n	8007ec8 <HAL_TIM_ConfigClockSource+0x1c>
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	e0b4      	b.n	8008032 <HAL_TIM_ConfigClockSource+0x186>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007eee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f00:	d03e      	beq.n	8007f80 <HAL_TIM_ConfigClockSource+0xd4>
 8007f02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f06:	f200 8087 	bhi.w	8008018 <HAL_TIM_ConfigClockSource+0x16c>
 8007f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f0e:	f000 8086 	beq.w	800801e <HAL_TIM_ConfigClockSource+0x172>
 8007f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f16:	d87f      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x16c>
 8007f18:	2b70      	cmp	r3, #112	@ 0x70
 8007f1a:	d01a      	beq.n	8007f52 <HAL_TIM_ConfigClockSource+0xa6>
 8007f1c:	2b70      	cmp	r3, #112	@ 0x70
 8007f1e:	d87b      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x16c>
 8007f20:	2b60      	cmp	r3, #96	@ 0x60
 8007f22:	d050      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x11a>
 8007f24:	2b60      	cmp	r3, #96	@ 0x60
 8007f26:	d877      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x16c>
 8007f28:	2b50      	cmp	r3, #80	@ 0x50
 8007f2a:	d03c      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0xfa>
 8007f2c:	2b50      	cmp	r3, #80	@ 0x50
 8007f2e:	d873      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x16c>
 8007f30:	2b40      	cmp	r3, #64	@ 0x40
 8007f32:	d058      	beq.n	8007fe6 <HAL_TIM_ConfigClockSource+0x13a>
 8007f34:	2b40      	cmp	r3, #64	@ 0x40
 8007f36:	d86f      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x16c>
 8007f38:	2b30      	cmp	r3, #48	@ 0x30
 8007f3a:	d064      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x15a>
 8007f3c:	2b30      	cmp	r3, #48	@ 0x30
 8007f3e:	d86b      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x16c>
 8007f40:	2b20      	cmp	r3, #32
 8007f42:	d060      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x15a>
 8007f44:	2b20      	cmp	r3, #32
 8007f46:	d867      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x16c>
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d05c      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x15a>
 8007f4c:	2b10      	cmp	r3, #16
 8007f4e:	d05a      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x15a>
 8007f50:	e062      	b.n	8008018 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f62:	f000 faf6 	bl	8008552 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	609a      	str	r2, [r3, #8]
      break;
 8007f7e:	e04f      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f90:	f000 fadf 	bl	8008552 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	689a      	ldr	r2, [r3, #8]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fa2:	609a      	str	r2, [r3, #8]
      break;
 8007fa4:	e03c      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f000 fa53 	bl	800845e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2150      	movs	r1, #80	@ 0x50
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 faac 	bl	800851c <TIM_ITRx_SetConfig>
      break;
 8007fc4:	e02c      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	f000 fa72 	bl	80084bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2160      	movs	r1, #96	@ 0x60
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 fa9c 	bl	800851c <TIM_ITRx_SetConfig>
      break;
 8007fe4:	e01c      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	f000 fa33 	bl	800845e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2140      	movs	r1, #64	@ 0x40
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 fa8c 	bl	800851c <TIM_ITRx_SetConfig>
      break;
 8008004:	e00c      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4619      	mov	r1, r3
 8008010:	4610      	mov	r0, r2
 8008012:	f000 fa83 	bl	800851c <TIM_ITRx_SetConfig>
      break;
 8008016:	e003      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	73fb      	strb	r3, [r7, #15]
      break;
 800801c:	e000      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800801e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800803a:	b480      	push	{r7}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008056:	bf00      	nop
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008062:	b480      	push	{r7}
 8008064:	b083      	sub	sp, #12
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800806a:	bf00      	nop
 800806c:	370c      	adds	r7, #12
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
	...

08008078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800808e:	d00f      	beq.n	80080b0 <TIM_Base_SetConfig+0x38>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a3c      	ldr	r2, [pc, #240]	@ (8008184 <TIM_Base_SetConfig+0x10c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d00b      	beq.n	80080b0 <TIM_Base_SetConfig+0x38>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a3b      	ldr	r2, [pc, #236]	@ (8008188 <TIM_Base_SetConfig+0x110>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d007      	beq.n	80080b0 <TIM_Base_SetConfig+0x38>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a3a      	ldr	r2, [pc, #232]	@ (800818c <TIM_Base_SetConfig+0x114>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d003      	beq.n	80080b0 <TIM_Base_SetConfig+0x38>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a39      	ldr	r2, [pc, #228]	@ (8008190 <TIM_Base_SetConfig+0x118>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d108      	bne.n	80080c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	4313      	orrs	r3, r2
 80080c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080c8:	d027      	beq.n	800811a <TIM_Base_SetConfig+0xa2>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a2d      	ldr	r2, [pc, #180]	@ (8008184 <TIM_Base_SetConfig+0x10c>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d023      	beq.n	800811a <TIM_Base_SetConfig+0xa2>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a2c      	ldr	r2, [pc, #176]	@ (8008188 <TIM_Base_SetConfig+0x110>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d01f      	beq.n	800811a <TIM_Base_SetConfig+0xa2>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a2b      	ldr	r2, [pc, #172]	@ (800818c <TIM_Base_SetConfig+0x114>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d01b      	beq.n	800811a <TIM_Base_SetConfig+0xa2>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a2b      	ldr	r2, [pc, #172]	@ (8008194 <TIM_Base_SetConfig+0x11c>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d017      	beq.n	800811a <TIM_Base_SetConfig+0xa2>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a2a      	ldr	r2, [pc, #168]	@ (8008198 <TIM_Base_SetConfig+0x120>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d013      	beq.n	800811a <TIM_Base_SetConfig+0xa2>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a29      	ldr	r2, [pc, #164]	@ (800819c <TIM_Base_SetConfig+0x124>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d00f      	beq.n	800811a <TIM_Base_SetConfig+0xa2>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a28      	ldr	r2, [pc, #160]	@ (80081a0 <TIM_Base_SetConfig+0x128>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d00b      	beq.n	800811a <TIM_Base_SetConfig+0xa2>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a27      	ldr	r2, [pc, #156]	@ (80081a4 <TIM_Base_SetConfig+0x12c>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d007      	beq.n	800811a <TIM_Base_SetConfig+0xa2>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a26      	ldr	r2, [pc, #152]	@ (80081a8 <TIM_Base_SetConfig+0x130>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d003      	beq.n	800811a <TIM_Base_SetConfig+0xa2>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a1e      	ldr	r2, [pc, #120]	@ (8008190 <TIM_Base_SetConfig+0x118>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d108      	bne.n	800812c <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	4313      	orrs	r3, r2
 800812a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	4313      	orrs	r3, r2
 8008138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	689a      	ldr	r2, [r3, #8]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a13      	ldr	r2, [pc, #76]	@ (80081a0 <TIM_Base_SetConfig+0x128>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d007      	beq.n	8008168 <TIM_Base_SetConfig+0xf0>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a12      	ldr	r2, [pc, #72]	@ (80081a4 <TIM_Base_SetConfig+0x12c>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d003      	beq.n	8008168 <TIM_Base_SetConfig+0xf0>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a11      	ldr	r2, [pc, #68]	@ (80081a8 <TIM_Base_SetConfig+0x130>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d103      	bne.n	8008170 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	691a      	ldr	r2, [r3, #16]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	615a      	str	r2, [r3, #20]
}
 8008176:	bf00      	nop
 8008178:	3714      	adds	r7, #20
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	40000400 	.word	0x40000400
 8008188:	40000800 	.word	0x40000800
 800818c:	40000c00 	.word	0x40000c00
 8008190:	40015c00 	.word	0x40015c00
 8008194:	40001800 	.word	0x40001800
 8008198:	40001c00 	.word	0x40001c00
 800819c:	40002000 	.word	0x40002000
 80081a0:	40014000 	.word	0x40014000
 80081a4:	40014400 	.word	0x40014400
 80081a8:	40014800 	.word	0x40014800

080081ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b087      	sub	sp, #28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	f023 0201 	bic.w	r2, r3, #1
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f023 0303 	bic.w	r3, r3, #3
 80081e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f023 0302 	bic.w	r3, r3, #2
 80081f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a24      	ldr	r2, [pc, #144]	@ (8008294 <TIM_OC1_SetConfig+0xe8>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d007      	beq.n	8008218 <TIM_OC1_SetConfig+0x6c>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a23      	ldr	r2, [pc, #140]	@ (8008298 <TIM_OC1_SetConfig+0xec>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d003      	beq.n	8008218 <TIM_OC1_SetConfig+0x6c>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a22      	ldr	r2, [pc, #136]	@ (800829c <TIM_OC1_SetConfig+0xf0>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d10c      	bne.n	8008232 <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f023 0308 	bic.w	r3, r3, #8
 800821e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f023 0304 	bic.w	r3, r3, #4
 8008230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a17      	ldr	r2, [pc, #92]	@ (8008294 <TIM_OC1_SetConfig+0xe8>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d007      	beq.n	800824a <TIM_OC1_SetConfig+0x9e>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a16      	ldr	r2, [pc, #88]	@ (8008298 <TIM_OC1_SetConfig+0xec>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d003      	beq.n	800824a <TIM_OC1_SetConfig+0x9e>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a15      	ldr	r2, [pc, #84]	@ (800829c <TIM_OC1_SetConfig+0xf0>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d111      	bne.n	800826e <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	4313      	orrs	r3, r2
 8008262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	4313      	orrs	r3, r2
 800826c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	685a      	ldr	r2, [r3, #4]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	621a      	str	r2, [r3, #32]
}
 8008288:	bf00      	nop
 800828a:	371c      	adds	r7, #28
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	40014000 	.word	0x40014000
 8008298:	40014400 	.word	0x40014400
 800829c:	40014800 	.word	0x40014800

080082a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	f023 0210 	bic.w	r2, r3, #16
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	021b      	lsls	r3, r3, #8
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	f023 0320 	bic.w	r3, r3, #32
 80082ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	011b      	lsls	r3, r3, #4
 80082f2:	693a      	ldr	r2, [r7, #16]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	613b      	str	r3, [r7, #16]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a17      	ldr	r2, [pc, #92]	@ (8008358 <TIM_OC2_SetConfig+0xb8>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d007      	beq.n	8008310 <TIM_OC2_SetConfig+0x70>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a16      	ldr	r2, [pc, #88]	@ (800835c <TIM_OC2_SetConfig+0xbc>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d003      	beq.n	8008310 <TIM_OC2_SetConfig+0x70>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a15      	ldr	r2, [pc, #84]	@ (8008360 <TIM_OC2_SetConfig+0xc0>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d10f      	bne.n	8008330 <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008316:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	4313      	orrs	r3, r2
 8008322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	4313      	orrs	r3, r2
 800832e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	621a      	str	r2, [r3, #32]
}
 800834a:	bf00      	nop
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	40014000 	.word	0x40014000
 800835c:	40014400 	.word	0x40014400
 8008360:	40014800 	.word	0x40014800

08008364 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	69db      	ldr	r3, [r3, #28]
 800838a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f023 0303 	bic.w	r3, r3, #3
 800839a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	021b      	lsls	r3, r3, #8
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	693a      	ldr	r2, [r7, #16]
 80083be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	621a      	str	r2, [r3, #32]
}
 80083d4:	bf00      	nop
 80083d6:	371c      	adds	r7, #28
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a1b      	ldr	r3, [r3, #32]
 80083ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800840e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	021b      	lsls	r3, r3, #8
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	4313      	orrs	r3, r2
 8008422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800842a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	031b      	lsls	r3, r3, #12
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	4313      	orrs	r3, r2
 8008436:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	621a      	str	r2, [r3, #32]
}
 8008452:	bf00      	nop
 8008454:	371c      	adds	r7, #28
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800845e:	b480      	push	{r7}
 8008460:	b087      	sub	sp, #28
 8008462:	af00      	add	r7, sp, #0
 8008464:	60f8      	str	r0, [r7, #12]
 8008466:	60b9      	str	r1, [r7, #8]
 8008468:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6a1b      	ldr	r3, [r3, #32]
 8008474:	f023 0201 	bic.w	r2, r3, #1
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008488:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	011b      	lsls	r3, r3, #4
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	4313      	orrs	r3, r2
 8008492:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	f023 030a 	bic.w	r3, r3, #10
 800849a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	621a      	str	r2, [r3, #32]
}
 80084b0:	bf00      	nop
 80084b2:	371c      	adds	r7, #28
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084bc:	b480      	push	{r7}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	f023 0210 	bic.w	r2, r3, #16
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80084e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	031b      	lsls	r3, r3, #12
 80084ec:	697a      	ldr	r2, [r7, #20]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80084f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	011b      	lsls	r3, r3, #4
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	4313      	orrs	r3, r2
 8008502:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	693a      	ldr	r2, [r7, #16]
 800850e:	621a      	str	r2, [r3, #32]
}
 8008510:	bf00      	nop
 8008512:	371c      	adds	r7, #28
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008532:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008534:	683a      	ldr	r2, [r7, #0]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	4313      	orrs	r3, r2
 800853a:	f043 0307 	orr.w	r3, r3, #7
 800853e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	609a      	str	r2, [r3, #8]
}
 8008546:	bf00      	nop
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008552:	b480      	push	{r7}
 8008554:	b087      	sub	sp, #28
 8008556:	af00      	add	r7, sp, #0
 8008558:	60f8      	str	r0, [r7, #12]
 800855a:	60b9      	str	r1, [r7, #8]
 800855c:	607a      	str	r2, [r7, #4]
 800855e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800856c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	021a      	lsls	r2, r3, #8
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	431a      	orrs	r2, r3
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	4313      	orrs	r3, r2
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	4313      	orrs	r3, r2
 800857e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	609a      	str	r2, [r3, #8]
}
 8008586:	bf00      	nop
 8008588:	371c      	adds	r7, #28
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008592:	b480      	push	{r7}
 8008594:	b087      	sub	sp, #28
 8008596:	af00      	add	r7, sp, #0
 8008598:	60f8      	str	r0, [r7, #12]
 800859a:	60b9      	str	r1, [r7, #8]
 800859c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f003 031f 	and.w	r3, r3, #31
 80085a4:	2201      	movs	r2, #1
 80085a6:	fa02 f303 	lsl.w	r3, r2, r3
 80085aa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6a1a      	ldr	r2, [r3, #32]
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	43db      	mvns	r3, r3
 80085b4:	401a      	ands	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6a1a      	ldr	r2, [r3, #32]
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	f003 031f 	and.w	r3, r3, #31
 80085c4:	6879      	ldr	r1, [r7, #4]
 80085c6:	fa01 f303 	lsl.w	r3, r1, r3
 80085ca:	431a      	orrs	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	621a      	str	r2, [r3, #32]
}
 80085d0:	bf00      	nop
 80085d2:	371c      	adds	r7, #28
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d101      	bne.n	80085f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085f0:	2302      	movs	r3, #2
 80085f2:	e055      	b.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2202      	movs	r2, #2
 8008600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800861a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	4313      	orrs	r3, r2
 8008624:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008636:	d01d      	beq.n	8008674 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a1b      	ldr	r2, [pc, #108]	@ (80086ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d018      	beq.n	8008674 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a1a      	ldr	r2, [pc, #104]	@ (80086b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d013      	beq.n	8008674 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a18      	ldr	r2, [pc, #96]	@ (80086b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d00e      	beq.n	8008674 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a17      	ldr	r2, [pc, #92]	@ (80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d009      	beq.n	8008674 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a15      	ldr	r2, [pc, #84]	@ (80086bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d004      	beq.n	8008674 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a14      	ldr	r2, [pc, #80]	@ (80086c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d10c      	bne.n	800868e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800867a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	4313      	orrs	r3, r2
 8008684:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	40000400 	.word	0x40000400
 80086b0:	40000800 	.word	0x40000800
 80086b4:	40000c00 	.word	0x40000c00
 80086b8:	40001800 	.word	0x40001800
 80086bc:	40014000 	.word	0x40014000
 80086c0:	40015c00 	.word	0x40015c00

080086c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e040      	b.n	8008780 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008702:	2b00      	cmp	r3, #0
 8008704:	d106      	bne.n	8008714 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7fa f886 	bl	8002820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2224      	movs	r2, #36	@ 0x24
 8008718:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f022 0201 	bic.w	r2, r2, #1
 8008728:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fc54 	bl	8008fd8 <UART_SetConfig>
 8008730:	4603      	mov	r3, r0
 8008732:	2b01      	cmp	r3, #1
 8008734:	d101      	bne.n	800873a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e022      	b.n	8008780 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873e:	2b00      	cmp	r3, #0
 8008740:	d002      	beq.n	8008748 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fdc2 	bl	80092cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	685a      	ldr	r2, [r3, #4]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689a      	ldr	r2, [r3, #8]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f042 0201 	orr.w	r2, r2, #1
 8008776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fe49 	bl	8009410 <UART_CheckIdleState>
 800877e:	4603      	mov	r3, r0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08a      	sub	sp, #40	@ 0x28
 800878c:	af02      	add	r7, sp, #8
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	603b      	str	r3, [r7, #0]
 8008794:	4613      	mov	r3, r2
 8008796:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800879c:	2b20      	cmp	r3, #32
 800879e:	d177      	bne.n	8008890 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d002      	beq.n	80087ac <HAL_UART_Transmit+0x24>
 80087a6:	88fb      	ldrh	r3, [r7, #6]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d101      	bne.n	80087b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e070      	b.n	8008892 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2221      	movs	r2, #33	@ 0x21
 80087bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087be:	f7fa fb11 	bl	8002de4 <HAL_GetTick>
 80087c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	88fa      	ldrh	r2, [r7, #6]
 80087c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	88fa      	ldrh	r2, [r7, #6]
 80087d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087dc:	d108      	bne.n	80087f0 <HAL_UART_Transmit+0x68>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d104      	bne.n	80087f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80087e6:	2300      	movs	r3, #0
 80087e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	61bb      	str	r3, [r7, #24]
 80087ee:	e003      	b.n	80087f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087f4:	2300      	movs	r3, #0
 80087f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80087f8:	e02f      	b.n	800885a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2200      	movs	r2, #0
 8008802:	2180      	movs	r1, #128	@ 0x80
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 feab 	bl	8009560 <UART_WaitOnFlagUntilTimeout>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d004      	beq.n	800881a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2220      	movs	r2, #32
 8008814:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e03b      	b.n	8008892 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10b      	bne.n	8008838 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	881a      	ldrh	r2, [r3, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800882c:	b292      	uxth	r2, r2
 800882e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	3302      	adds	r3, #2
 8008834:	61bb      	str	r3, [r7, #24]
 8008836:	e007      	b.n	8008848 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	781a      	ldrb	r2, [r3, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	3301      	adds	r3, #1
 8008846:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800884e:	b29b      	uxth	r3, r3
 8008850:	3b01      	subs	r3, #1
 8008852:	b29a      	uxth	r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008860:	b29b      	uxth	r3, r3
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1c9      	bne.n	80087fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2200      	movs	r2, #0
 800886e:	2140      	movs	r1, #64	@ 0x40
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 fe75 	bl	8009560 <UART_WaitOnFlagUntilTimeout>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d004      	beq.n	8008886 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2220      	movs	r2, #32
 8008880:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008882:	2303      	movs	r3, #3
 8008884:	e005      	b.n	8008892 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2220      	movs	r2, #32
 800888a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	e000      	b.n	8008892 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008890:	2302      	movs	r3, #2
  }
}
 8008892:	4618      	mov	r0, r3
 8008894:	3720      	adds	r7, #32
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
	...

0800889c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800889c:	b480      	push	{r7}
 800889e:	b08b      	sub	sp, #44	@ 0x2c
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	4613      	mov	r3, r2
 80088a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80088ae:	2b20      	cmp	r3, #32
 80088b0:	d147      	bne.n	8008942 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d002      	beq.n	80088be <HAL_UART_Transmit_IT+0x22>
 80088b8:	88fb      	ldrh	r3, [r7, #6]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e040      	b.n	8008944 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	88fa      	ldrh	r2, [r7, #6]
 80088cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	88fa      	ldrh	r2, [r7, #6]
 80088d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2221      	movs	r2, #33	@ 0x21
 80088ea:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088f4:	d107      	bne.n	8008906 <HAL_UART_Transmit_IT+0x6a>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d103      	bne.n	8008906 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	4a13      	ldr	r2, [pc, #76]	@ (8008950 <HAL_UART_Transmit_IT+0xb4>)
 8008902:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008904:	e002      	b.n	800890c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	4a12      	ldr	r2, [pc, #72]	@ (8008954 <HAL_UART_Transmit_IT+0xb8>)
 800890a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	e853 3f00 	ldrex	r3, [r3]
 8008918:	613b      	str	r3, [r7, #16]
   return(result);
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008920:	627b      	str	r3, [r7, #36]	@ 0x24
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892a:	623b      	str	r3, [r7, #32]
 800892c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892e:	69f9      	ldr	r1, [r7, #28]
 8008930:	6a3a      	ldr	r2, [r7, #32]
 8008932:	e841 2300 	strex	r3, r2, [r1]
 8008936:	61bb      	str	r3, [r7, #24]
   return(result);
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1e6      	bne.n	800890c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	e000      	b.n	8008944 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008942:	2302      	movs	r3, #2
  }
}
 8008944:	4618      	mov	r0, r3
 8008946:	372c      	adds	r7, #44	@ 0x2c
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	08009943 	.word	0x08009943
 8008954:	0800988d 	.word	0x0800988d

08008958 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b08a      	sub	sp, #40	@ 0x28
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	4613      	mov	r3, r2
 8008964:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800896c:	2b20      	cmp	r3, #32
 800896e:	d132      	bne.n	80089d6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d002      	beq.n	800897c <HAL_UART_Receive_IT+0x24>
 8008976:	88fb      	ldrh	r3, [r7, #6]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d101      	bne.n	8008980 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e02b      	b.n	80089d8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d018      	beq.n	80089c6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	e853 3f00 	ldrex	r3, [r3]
 80089a0:	613b      	str	r3, [r7, #16]
   return(result);
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	461a      	mov	r2, r3
 80089b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b2:	623b      	str	r3, [r7, #32]
 80089b4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b6:	69f9      	ldr	r1, [r7, #28]
 80089b8:	6a3a      	ldr	r2, [r7, #32]
 80089ba:	e841 2300 	strex	r3, r2, [r1]
 80089be:	61bb      	str	r3, [r7, #24]
   return(result);
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1e6      	bne.n	8008994 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80089c6:	88fb      	ldrh	r3, [r7, #6]
 80089c8:	461a      	mov	r2, r3
 80089ca:	68b9      	ldr	r1, [r7, #8]
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f000 fe2f 	bl	8009630 <UART_Start_Receive_IT>
 80089d2:	4603      	mov	r3, r0
 80089d4:	e000      	b.n	80089d8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80089d6:	2302      	movs	r3, #2
  }
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3728      	adds	r7, #40	@ 0x28
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b0ba      	sub	sp, #232	@ 0xe8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008a0a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008a0e:	4013      	ands	r3, r2
 8008a10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008a14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d115      	bne.n	8008a48 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a20:	f003 0320 	and.w	r3, r3, #32
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00f      	beq.n	8008a48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a2c:	f003 0320 	and.w	r3, r3, #32
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d009      	beq.n	8008a48 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 82ab 	beq.w	8008f94 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	4798      	blx	r3
      }
      return;
 8008a46:	e2a5      	b.n	8008f94 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008a48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 8117 	beq.w	8008c80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d106      	bne.n	8008a6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008a5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008a62:	4b85      	ldr	r3, [pc, #532]	@ (8008c78 <HAL_UART_IRQHandler+0x298>)
 8008a64:	4013      	ands	r3, r2
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f000 810a 	beq.w	8008c80 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d011      	beq.n	8008a9c <HAL_UART_IRQHandler+0xbc>
 8008a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00b      	beq.n	8008a9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a92:	f043 0201 	orr.w	r2, r3, #1
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aa0:	f003 0302 	and.w	r3, r3, #2
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d011      	beq.n	8008acc <HAL_UART_IRQHandler+0xec>
 8008aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aac:	f003 0301 	and.w	r3, r3, #1
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00b      	beq.n	8008acc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2202      	movs	r2, #2
 8008aba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ac2:	f043 0204 	orr.w	r2, r3, #4
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ad0:	f003 0304 	and.w	r3, r3, #4
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d011      	beq.n	8008afc <HAL_UART_IRQHandler+0x11c>
 8008ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008adc:	f003 0301 	and.w	r3, r3, #1
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00b      	beq.n	8008afc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2204      	movs	r2, #4
 8008aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008af2:	f043 0202 	orr.w	r2, r3, #2
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b00:	f003 0308 	and.w	r3, r3, #8
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d017      	beq.n	8008b38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b0c:	f003 0320 	and.w	r3, r3, #32
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d105      	bne.n	8008b20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00b      	beq.n	8008b38 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2208      	movs	r2, #8
 8008b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b2e:	f043 0208 	orr.w	r2, r3, #8
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d012      	beq.n	8008b6a <HAL_UART_IRQHandler+0x18a>
 8008b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00c      	beq.n	8008b6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b60:	f043 0220 	orr.w	r2, r3, #32
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 8211 	beq.w	8008f98 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b7a:	f003 0320 	and.w	r3, r3, #32
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00d      	beq.n	8008b9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b86:	f003 0320 	and.w	r3, r3, #32
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d007      	beq.n	8008b9e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d003      	beq.n	8008b9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ba4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb2:	2b40      	cmp	r3, #64	@ 0x40
 8008bb4:	d005      	beq.n	8008bc2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008bba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d04f      	beq.n	8008c62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fde8 	bl	8009798 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bd2:	2b40      	cmp	r3, #64	@ 0x40
 8008bd4:	d141      	bne.n	8008c5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3308      	adds	r3, #8
 8008bdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008be4:	e853 3f00 	ldrex	r3, [r3]
 8008be8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008bf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3308      	adds	r3, #8
 8008bfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c12:	e841 2300 	strex	r3, r2, [r1]
 8008c16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1d9      	bne.n	8008bd6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d013      	beq.n	8008c52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c2e:	4a13      	ldr	r2, [pc, #76]	@ (8008c7c <HAL_UART_IRQHandler+0x29c>)
 8008c30:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fa fa2a 	bl	8003090 <HAL_DMA_Abort_IT>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d017      	beq.n	8008c72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c50:	e00f      	b.n	8008c72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f9aa 	bl	8008fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c58:	e00b      	b.n	8008c72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f9a6 	bl	8008fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c60:	e007      	b.n	8008c72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f9a2 	bl	8008fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008c70:	e192      	b.n	8008f98 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c72:	bf00      	nop
    return;
 8008c74:	e190      	b.n	8008f98 <HAL_UART_IRQHandler+0x5b8>
 8008c76:	bf00      	nop
 8008c78:	04000120 	.word	0x04000120
 8008c7c:	08009861 	.word	0x08009861

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	f040 814b 	bne.w	8008f20 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c8e:	f003 0310 	and.w	r3, r3, #16
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 8144 	beq.w	8008f20 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c9c:	f003 0310 	and.w	r3, r3, #16
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 813d 	beq.w	8008f20 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2210      	movs	r2, #16
 8008cac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cb8:	2b40      	cmp	r3, #64	@ 0x40
 8008cba:	f040 80b5 	bne.w	8008e28 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008cca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 8164 	beq.w	8008f9c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	f080 815c 	bcs.w	8008f9c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	2b20      	cmp	r3, #32
 8008cf6:	f000 8086 	beq.w	8008e06 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d06:	e853 3f00 	ldrex	r3, [r3]
 8008d0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008d0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008d30:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d34:	e841 2300 	strex	r3, r2, [r1]
 8008d38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1da      	bne.n	8008cfa <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	3308      	adds	r3, #8
 8008d4a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d4e:	e853 3f00 	ldrex	r3, [r3]
 8008d52:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008d54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d56:	f023 0301 	bic.w	r3, r3, #1
 8008d5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3308      	adds	r3, #8
 8008d64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d68:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d70:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d74:	e841 2300 	strex	r3, r2, [r1]
 8008d78:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e1      	bne.n	8008d44 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3308      	adds	r3, #8
 8008d86:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d8a:	e853 3f00 	ldrex	r3, [r3]
 8008d8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	3308      	adds	r3, #8
 8008da0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008da4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008da6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008daa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008dac:	e841 2300 	strex	r3, r2, [r1]
 8008db0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008db2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1e3      	bne.n	8008d80 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2220      	movs	r2, #32
 8008dbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dce:	e853 3f00 	ldrex	r3, [r3]
 8008dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008dd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dd6:	f023 0310 	bic.w	r3, r3, #16
 8008dda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	461a      	mov	r2, r3
 8008de4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008de8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008dea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008dee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008df0:	e841 2300 	strex	r3, r2, [r1]
 8008df4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008df6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d1e4      	bne.n	8008dc6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7fa f90c 	bl	800301e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2202      	movs	r2, #2
 8008e0a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f8cd 	bl	8008fc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e26:	e0b9      	b.n	8008f9c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 80ab 	beq.w	8008fa0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8008e4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f000 80a6 	beq.w	8008fa0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5c:	e853 3f00 	ldrex	r3, [r3]
 8008e60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	461a      	mov	r2, r3
 8008e72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e76:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e78:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e4      	bne.n	8008e54 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3308      	adds	r3, #8
 8008e90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	623b      	str	r3, [r7, #32]
   return(result);
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	f023 0301 	bic.w	r3, r3, #1
 8008ea0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008eae:	633a      	str	r2, [r7, #48]	@ 0x30
 8008eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008eb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e3      	bne.n	8008e8a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2220      	movs	r2, #32
 8008ec6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	e853 3f00 	ldrex	r3, [r3]
 8008ee2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 0310 	bic.w	r3, r3, #16
 8008eea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008ef8:	61fb      	str	r3, [r7, #28]
 8008efa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efc:	69b9      	ldr	r1, [r7, #24]
 8008efe:	69fa      	ldr	r2, [r7, #28]
 8008f00:	e841 2300 	strex	r3, r2, [r1]
 8008f04:	617b      	str	r3, [r7, #20]
   return(result);
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1e4      	bne.n	8008ed6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2202      	movs	r2, #2
 8008f10:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f16:	4619      	mov	r1, r3
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f851 	bl	8008fc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f1e:	e03f      	b.n	8008fa0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00e      	beq.n	8008f4a <HAL_UART_IRQHandler+0x56a>
 8008f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d008      	beq.n	8008f4a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008f40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 ff2f 	bl	8009da6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f48:	e02d      	b.n	8008fa6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00e      	beq.n	8008f74 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d008      	beq.n	8008f74 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d01c      	beq.n	8008fa4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	4798      	blx	r3
    }
    return;
 8008f72:	e017      	b.n	8008fa4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d012      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x5c6>
 8008f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00c      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fd38 	bl	8009a02 <UART_EndTransmit_IT>
    return;
 8008f92:	e008      	b.n	8008fa6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008f94:	bf00      	nop
 8008f96:	e006      	b.n	8008fa6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008f98:	bf00      	nop
 8008f9a:	e004      	b.n	8008fa6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008f9c:	bf00      	nop
 8008f9e:	e002      	b.n	8008fa6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008fa0:	bf00      	nop
 8008fa2:	e000      	b.n	8008fa6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008fa4:	bf00      	nop
  }

}
 8008fa6:	37e8      	adds	r7, #232	@ 0xe8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008fb4:	bf00      	nop
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b088      	sub	sp, #32
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	689a      	ldr	r2, [r3, #8]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	431a      	orrs	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	69db      	ldr	r3, [r3, #28]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8009006:	f023 030c 	bic.w	r3, r3, #12
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	6812      	ldr	r2, [r2, #0]
 800900e:	6979      	ldr	r1, [r7, #20]
 8009010:	430b      	orrs	r3, r1
 8009012:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68da      	ldr	r2, [r3, #12]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	430a      	orrs	r2, r1
 8009028:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6a1b      	ldr	r3, [r3, #32]
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	4313      	orrs	r3, r2
 8009038:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	697a      	ldr	r2, [r7, #20]
 800904a:	430a      	orrs	r2, r1
 800904c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a99      	ldr	r2, [pc, #612]	@ (80092b8 <UART_SetConfig+0x2e0>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d120      	bne.n	800909a <UART_SetConfig+0xc2>
 8009058:	4b98      	ldr	r3, [pc, #608]	@ (80092bc <UART_SetConfig+0x2e4>)
 800905a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800905c:	f003 0303 	and.w	r3, r3, #3
 8009060:	2b03      	cmp	r3, #3
 8009062:	d817      	bhi.n	8009094 <UART_SetConfig+0xbc>
 8009064:	a201      	add	r2, pc, #4	@ (adr r2, 800906c <UART_SetConfig+0x94>)
 8009066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906a:	bf00      	nop
 800906c:	0800907d 	.word	0x0800907d
 8009070:	08009089 	.word	0x08009089
 8009074:	0800908f 	.word	0x0800908f
 8009078:	08009083 	.word	0x08009083
 800907c:	2301      	movs	r3, #1
 800907e:	77fb      	strb	r3, [r7, #31]
 8009080:	e061      	b.n	8009146 <UART_SetConfig+0x16e>
 8009082:	2302      	movs	r3, #2
 8009084:	77fb      	strb	r3, [r7, #31]
 8009086:	e05e      	b.n	8009146 <UART_SetConfig+0x16e>
 8009088:	2304      	movs	r3, #4
 800908a:	77fb      	strb	r3, [r7, #31]
 800908c:	e05b      	b.n	8009146 <UART_SetConfig+0x16e>
 800908e:	2308      	movs	r3, #8
 8009090:	77fb      	strb	r3, [r7, #31]
 8009092:	e058      	b.n	8009146 <UART_SetConfig+0x16e>
 8009094:	2310      	movs	r3, #16
 8009096:	77fb      	strb	r3, [r7, #31]
 8009098:	e055      	b.n	8009146 <UART_SetConfig+0x16e>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a88      	ldr	r2, [pc, #544]	@ (80092c0 <UART_SetConfig+0x2e8>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d124      	bne.n	80090ee <UART_SetConfig+0x116>
 80090a4:	4b85      	ldr	r3, [pc, #532]	@ (80092bc <UART_SetConfig+0x2e4>)
 80090a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80090ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80090b0:	d011      	beq.n	80090d6 <UART_SetConfig+0xfe>
 80090b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80090b6:	d817      	bhi.n	80090e8 <UART_SetConfig+0x110>
 80090b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090bc:	d011      	beq.n	80090e2 <UART_SetConfig+0x10a>
 80090be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090c2:	d811      	bhi.n	80090e8 <UART_SetConfig+0x110>
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d003      	beq.n	80090d0 <UART_SetConfig+0xf8>
 80090c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090cc:	d006      	beq.n	80090dc <UART_SetConfig+0x104>
 80090ce:	e00b      	b.n	80090e8 <UART_SetConfig+0x110>
 80090d0:	2300      	movs	r3, #0
 80090d2:	77fb      	strb	r3, [r7, #31]
 80090d4:	e037      	b.n	8009146 <UART_SetConfig+0x16e>
 80090d6:	2302      	movs	r3, #2
 80090d8:	77fb      	strb	r3, [r7, #31]
 80090da:	e034      	b.n	8009146 <UART_SetConfig+0x16e>
 80090dc:	2304      	movs	r3, #4
 80090de:	77fb      	strb	r3, [r7, #31]
 80090e0:	e031      	b.n	8009146 <UART_SetConfig+0x16e>
 80090e2:	2308      	movs	r3, #8
 80090e4:	77fb      	strb	r3, [r7, #31]
 80090e6:	e02e      	b.n	8009146 <UART_SetConfig+0x16e>
 80090e8:	2310      	movs	r3, #16
 80090ea:	77fb      	strb	r3, [r7, #31]
 80090ec:	e02b      	b.n	8009146 <UART_SetConfig+0x16e>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a74      	ldr	r2, [pc, #464]	@ (80092c4 <UART_SetConfig+0x2ec>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d124      	bne.n	8009142 <UART_SetConfig+0x16a>
 80090f8:	4b70      	ldr	r3, [pc, #448]	@ (80092bc <UART_SetConfig+0x2e4>)
 80090fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090fc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009100:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009104:	d011      	beq.n	800912a <UART_SetConfig+0x152>
 8009106:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800910a:	d817      	bhi.n	800913c <UART_SetConfig+0x164>
 800910c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009110:	d011      	beq.n	8009136 <UART_SetConfig+0x15e>
 8009112:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009116:	d811      	bhi.n	800913c <UART_SetConfig+0x164>
 8009118:	2b00      	cmp	r3, #0
 800911a:	d003      	beq.n	8009124 <UART_SetConfig+0x14c>
 800911c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009120:	d006      	beq.n	8009130 <UART_SetConfig+0x158>
 8009122:	e00b      	b.n	800913c <UART_SetConfig+0x164>
 8009124:	2300      	movs	r3, #0
 8009126:	77fb      	strb	r3, [r7, #31]
 8009128:	e00d      	b.n	8009146 <UART_SetConfig+0x16e>
 800912a:	2302      	movs	r3, #2
 800912c:	77fb      	strb	r3, [r7, #31]
 800912e:	e00a      	b.n	8009146 <UART_SetConfig+0x16e>
 8009130:	2304      	movs	r3, #4
 8009132:	77fb      	strb	r3, [r7, #31]
 8009134:	e007      	b.n	8009146 <UART_SetConfig+0x16e>
 8009136:	2308      	movs	r3, #8
 8009138:	77fb      	strb	r3, [r7, #31]
 800913a:	e004      	b.n	8009146 <UART_SetConfig+0x16e>
 800913c:	2310      	movs	r3, #16
 800913e:	77fb      	strb	r3, [r7, #31]
 8009140:	e001      	b.n	8009146 <UART_SetConfig+0x16e>
 8009142:	2310      	movs	r3, #16
 8009144:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	69db      	ldr	r3, [r3, #28]
 800914a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800914e:	d15a      	bne.n	8009206 <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 8009150:	7ffb      	ldrb	r3, [r7, #31]
 8009152:	2b08      	cmp	r3, #8
 8009154:	d827      	bhi.n	80091a6 <UART_SetConfig+0x1ce>
 8009156:	a201      	add	r2, pc, #4	@ (adr r2, 800915c <UART_SetConfig+0x184>)
 8009158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915c:	08009181 	.word	0x08009181
 8009160:	08009189 	.word	0x08009189
 8009164:	08009191 	.word	0x08009191
 8009168:	080091a7 	.word	0x080091a7
 800916c:	08009197 	.word	0x08009197
 8009170:	080091a7 	.word	0x080091a7
 8009174:	080091a7 	.word	0x080091a7
 8009178:	080091a7 	.word	0x080091a7
 800917c:	0800919f 	.word	0x0800919f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009180:	f7fd fe1c 	bl	8006dbc <HAL_RCC_GetPCLK1Freq>
 8009184:	61b8      	str	r0, [r7, #24]
        break;
 8009186:	e013      	b.n	80091b0 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009188:	f7fd fe3a 	bl	8006e00 <HAL_RCC_GetPCLK2Freq>
 800918c:	61b8      	str	r0, [r7, #24]
        break;
 800918e:	e00f      	b.n	80091b0 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009190:	4b4d      	ldr	r3, [pc, #308]	@ (80092c8 <UART_SetConfig+0x2f0>)
 8009192:	61bb      	str	r3, [r7, #24]
        break;
 8009194:	e00c      	b.n	80091b0 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009196:	f7fd fd99 	bl	8006ccc <HAL_RCC_GetSysClockFreq>
 800919a:	61b8      	str	r0, [r7, #24]
        break;
 800919c:	e008      	b.n	80091b0 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800919e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091a2:	61bb      	str	r3, [r7, #24]
        break;
 80091a4:	e004      	b.n	80091b0 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 80091a6:	2300      	movs	r3, #0
 80091a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	77bb      	strb	r3, [r7, #30]
        break;
 80091ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d074      	beq.n	80092a0 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	005a      	lsls	r2, r3, #1
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	085b      	lsrs	r3, r3, #1
 80091c0:	441a      	add	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	2b0f      	cmp	r3, #15
 80091d0:	d916      	bls.n	8009200 <UART_SetConfig+0x228>
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091d8:	d212      	bcs.n	8009200 <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	b29b      	uxth	r3, r3
 80091de:	f023 030f 	bic.w	r3, r3, #15
 80091e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	085b      	lsrs	r3, r3, #1
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	f003 0307 	and.w	r3, r3, #7
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	89fb      	ldrh	r3, [r7, #14]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	89fa      	ldrh	r2, [r7, #14]
 80091fc:	60da      	str	r2, [r3, #12]
 80091fe:	e04f      	b.n	80092a0 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	77bb      	strb	r3, [r7, #30]
 8009204:	e04c      	b.n	80092a0 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009206:	7ffb      	ldrb	r3, [r7, #31]
 8009208:	2b08      	cmp	r3, #8
 800920a:	d828      	bhi.n	800925e <UART_SetConfig+0x286>
 800920c:	a201      	add	r2, pc, #4	@ (adr r2, 8009214 <UART_SetConfig+0x23c>)
 800920e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009212:	bf00      	nop
 8009214:	08009239 	.word	0x08009239
 8009218:	08009241 	.word	0x08009241
 800921c:	08009249 	.word	0x08009249
 8009220:	0800925f 	.word	0x0800925f
 8009224:	0800924f 	.word	0x0800924f
 8009228:	0800925f 	.word	0x0800925f
 800922c:	0800925f 	.word	0x0800925f
 8009230:	0800925f 	.word	0x0800925f
 8009234:	08009257 	.word	0x08009257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009238:	f7fd fdc0 	bl	8006dbc <HAL_RCC_GetPCLK1Freq>
 800923c:	61b8      	str	r0, [r7, #24]
        break;
 800923e:	e013      	b.n	8009268 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009240:	f7fd fdde 	bl	8006e00 <HAL_RCC_GetPCLK2Freq>
 8009244:	61b8      	str	r0, [r7, #24]
        break;
 8009246:	e00f      	b.n	8009268 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009248:	4b1f      	ldr	r3, [pc, #124]	@ (80092c8 <UART_SetConfig+0x2f0>)
 800924a:	61bb      	str	r3, [r7, #24]
        break;
 800924c:	e00c      	b.n	8009268 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800924e:	f7fd fd3d 	bl	8006ccc <HAL_RCC_GetSysClockFreq>
 8009252:	61b8      	str	r0, [r7, #24]
        break;
 8009254:	e008      	b.n	8009268 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800925a:	61bb      	str	r3, [r7, #24]
        break;
 800925c:	e004      	b.n	8009268 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 800925e:	2300      	movs	r3, #0
 8009260:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	77bb      	strb	r3, [r7, #30]
        break;
 8009266:	bf00      	nop
    }

    if (pclk != 0U)
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d018      	beq.n	80092a0 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	085a      	lsrs	r2, r3, #1
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	441a      	add	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009280:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	2b0f      	cmp	r3, #15
 8009286:	d909      	bls.n	800929c <UART_SetConfig+0x2c4>
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800928e:	d205      	bcs.n	800929c <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	b29a      	uxth	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	60da      	str	r2, [r3, #12]
 800929a:	e001      	b.n	80092a0 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80092ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3720      	adds	r7, #32
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	40013800 	.word	0x40013800
 80092bc:	40021000 	.word	0x40021000
 80092c0:	40004400 	.word	0x40004400
 80092c4:	40004800 	.word	0x40004800
 80092c8:	007a1200 	.word	0x007a1200

080092cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00a      	beq.n	80092f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092fa:	f003 0302 	and.w	r3, r3, #2
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00a      	beq.n	8009318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	430a      	orrs	r2, r1
 8009316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800931c:	f003 0304 	and.w	r3, r3, #4
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00a      	beq.n	800933a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	430a      	orrs	r2, r1
 8009338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800933e:	f003 0308 	and.w	r3, r3, #8
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00a      	beq.n	800935c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	430a      	orrs	r2, r1
 800935a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009360:	f003 0310 	and.w	r3, r3, #16
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00a      	beq.n	800937e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009382:	f003 0320 	and.w	r3, r3, #32
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00a      	beq.n	80093a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	430a      	orrs	r2, r1
 800939e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d01a      	beq.n	80093e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	430a      	orrs	r2, r1
 80093c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093ca:	d10a      	bne.n	80093e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	430a      	orrs	r2, r1
 80093e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00a      	beq.n	8009404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	430a      	orrs	r2, r1
 8009402:	605a      	str	r2, [r3, #4]
  }
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b098      	sub	sp, #96	@ 0x60
 8009414:	af02      	add	r7, sp, #8
 8009416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009420:	f7f9 fce0 	bl	8002de4 <HAL_GetTick>
 8009424:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0308 	and.w	r3, r3, #8
 8009430:	2b08      	cmp	r3, #8
 8009432:	d12e      	bne.n	8009492 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009434:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800943c:	2200      	movs	r2, #0
 800943e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f88c 	bl	8009560 <UART_WaitOnFlagUntilTimeout>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d021      	beq.n	8009492 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009456:	e853 3f00 	ldrex	r3, [r3]
 800945a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800945c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800945e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009462:	653b      	str	r3, [r7, #80]	@ 0x50
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	461a      	mov	r2, r3
 800946a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800946c:	647b      	str	r3, [r7, #68]	@ 0x44
 800946e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009470:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009472:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009474:	e841 2300 	strex	r3, r2, [r1]
 8009478:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800947a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1e6      	bne.n	800944e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2220      	movs	r2, #32
 8009484:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800948e:	2303      	movs	r3, #3
 8009490:	e062      	b.n	8009558 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 0304 	and.w	r3, r3, #4
 800949c:	2b04      	cmp	r3, #4
 800949e:	d149      	bne.n	8009534 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094a8:	2200      	movs	r2, #0
 80094aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f856 	bl	8009560 <UART_WaitOnFlagUntilTimeout>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d03c      	beq.n	8009534 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c2:	e853 3f00 	ldrex	r3, [r3]
 80094c6:	623b      	str	r3, [r7, #32]
   return(result);
 80094c8:	6a3b      	ldr	r3, [r7, #32]
 80094ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	461a      	mov	r2, r3
 80094d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80094da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094e0:	e841 2300 	strex	r3, r2, [r1]
 80094e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1e6      	bne.n	80094ba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	3308      	adds	r3, #8
 80094f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	e853 3f00 	ldrex	r3, [r3]
 80094fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f023 0301 	bic.w	r3, r3, #1
 8009502:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	3308      	adds	r3, #8
 800950a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800950c:	61fa      	str	r2, [r7, #28]
 800950e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009510:	69b9      	ldr	r1, [r7, #24]
 8009512:	69fa      	ldr	r2, [r7, #28]
 8009514:	e841 2300 	strex	r3, r2, [r1]
 8009518:	617b      	str	r3, [r7, #20]
   return(result);
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1e5      	bne.n	80094ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2220      	movs	r2, #32
 8009524:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	e011      	b.n	8009558 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2220      	movs	r2, #32
 8009538:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2220      	movs	r2, #32
 800953e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3758      	adds	r7, #88	@ 0x58
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	603b      	str	r3, [r7, #0]
 800956c:	4613      	mov	r3, r2
 800956e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009570:	e049      	b.n	8009606 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009578:	d045      	beq.n	8009606 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800957a:	f7f9 fc33 	bl	8002de4 <HAL_GetTick>
 800957e:	4602      	mov	r2, r0
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	69ba      	ldr	r2, [r7, #24]
 8009586:	429a      	cmp	r2, r3
 8009588:	d302      	bcc.n	8009590 <UART_WaitOnFlagUntilTimeout+0x30>
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009590:	2303      	movs	r3, #3
 8009592:	e048      	b.n	8009626 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 0304 	and.w	r3, r3, #4
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d031      	beq.n	8009606 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	69db      	ldr	r3, [r3, #28]
 80095a8:	f003 0308 	and.w	r3, r3, #8
 80095ac:	2b08      	cmp	r3, #8
 80095ae:	d110      	bne.n	80095d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2208      	movs	r2, #8
 80095b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f000 f8ed 	bl	8009798 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2208      	movs	r2, #8
 80095c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e029      	b.n	8009626 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	69db      	ldr	r3, [r3, #28]
 80095d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095e0:	d111      	bne.n	8009606 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f000 f8d3 	bl	8009798 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2220      	movs	r2, #32
 80095f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009602:	2303      	movs	r3, #3
 8009604:	e00f      	b.n	8009626 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	69da      	ldr	r2, [r3, #28]
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	4013      	ands	r3, r2
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	429a      	cmp	r2, r3
 8009614:	bf0c      	ite	eq
 8009616:	2301      	moveq	r3, #1
 8009618:	2300      	movne	r3, #0
 800961a:	b2db      	uxtb	r3, r3
 800961c:	461a      	mov	r2, r3
 800961e:	79fb      	ldrb	r3, [r7, #7]
 8009620:	429a      	cmp	r2, r3
 8009622:	d0a6      	beq.n	8009572 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
	...

08009630 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009630:	b480      	push	{r7}
 8009632:	b097      	sub	sp, #92	@ 0x5c
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	4613      	mov	r3, r2
 800963c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	88fa      	ldrh	r2, [r7, #6]
 8009648:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	88fa      	ldrh	r2, [r7, #6]
 8009650:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009662:	d10e      	bne.n	8009682 <UART_Start_Receive_IT+0x52>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d105      	bne.n	8009678 <UART_Start_Receive_IT+0x48>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009672:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009676:	e01a      	b.n	80096ae <UART_Start_Receive_IT+0x7e>
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	22ff      	movs	r2, #255	@ 0xff
 800967c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009680:	e015      	b.n	80096ae <UART_Start_Receive_IT+0x7e>
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10d      	bne.n	80096a6 <UART_Start_Receive_IT+0x76>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d104      	bne.n	800969c <UART_Start_Receive_IT+0x6c>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	22ff      	movs	r2, #255	@ 0xff
 8009696:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800969a:	e008      	b.n	80096ae <UART_Start_Receive_IT+0x7e>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	227f      	movs	r2, #127	@ 0x7f
 80096a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80096a4:	e003      	b.n	80096ae <UART_Start_Receive_IT+0x7e>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2222      	movs	r2, #34	@ 0x22
 80096ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	3308      	adds	r3, #8
 80096c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096c8:	e853 3f00 	ldrex	r3, [r3]
 80096cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d0:	f043 0301 	orr.w	r3, r3, #1
 80096d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	3308      	adds	r3, #8
 80096dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096de:	64ba      	str	r2, [r7, #72]	@ 0x48
 80096e0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80096e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096e6:	e841 2300 	strex	r3, r2, [r1]
 80096ea:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80096ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1e5      	bne.n	80096be <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096fa:	d107      	bne.n	800970c <UART_Start_Receive_IT+0xdc>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d103      	bne.n	800970c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	4a22      	ldr	r2, [pc, #136]	@ (8009790 <UART_Start_Receive_IT+0x160>)
 8009708:	669a      	str	r2, [r3, #104]	@ 0x68
 800970a:	e002      	b.n	8009712 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	4a21      	ldr	r2, [pc, #132]	@ (8009794 <UART_Start_Receive_IT+0x164>)
 8009710:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d019      	beq.n	800974e <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009722:	e853 3f00 	ldrex	r3, [r3]
 8009726:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800972e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	461a      	mov	r2, r3
 8009736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009738:	637b      	str	r3, [r7, #52]	@ 0x34
 800973a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800973e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009740:	e841 2300 	strex	r3, r2, [r1]
 8009744:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1e6      	bne.n	800971a <UART_Start_Receive_IT+0xea>
 800974c:	e018      	b.n	8009780 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	e853 3f00 	ldrex	r3, [r3]
 800975a:	613b      	str	r3, [r7, #16]
   return(result);
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f043 0320 	orr.w	r3, r3, #32
 8009762:	653b      	str	r3, [r7, #80]	@ 0x50
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	461a      	mov	r2, r3
 800976a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800976c:	623b      	str	r3, [r7, #32]
 800976e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009770:	69f9      	ldr	r1, [r7, #28]
 8009772:	6a3a      	ldr	r2, [r7, #32]
 8009774:	e841 2300 	strex	r3, r2, [r1]
 8009778:	61bb      	str	r3, [r7, #24]
   return(result);
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1e6      	bne.n	800974e <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	375c      	adds	r7, #92	@ 0x5c
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	08009bff 	.word	0x08009bff
 8009794:	08009a57 	.word	0x08009a57

08009798 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009798:	b480      	push	{r7}
 800979a:	b095      	sub	sp, #84	@ 0x54
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097a8:	e853 3f00 	ldrex	r3, [r3]
 80097ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	461a      	mov	r2, r3
 80097bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097be:	643b      	str	r3, [r7, #64]	@ 0x40
 80097c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097c6:	e841 2300 	strex	r3, r2, [r1]
 80097ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1e6      	bne.n	80097a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	3308      	adds	r3, #8
 80097d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097da:	6a3b      	ldr	r3, [r7, #32]
 80097dc:	e853 3f00 	ldrex	r3, [r3]
 80097e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	f023 0301 	bic.w	r3, r3, #1
 80097e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	3308      	adds	r3, #8
 80097f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097fa:	e841 2300 	strex	r3, r2, [r1]
 80097fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1e5      	bne.n	80097d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800980a:	2b01      	cmp	r3, #1
 800980c:	d118      	bne.n	8009840 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	e853 3f00 	ldrex	r3, [r3]
 800981a:	60bb      	str	r3, [r7, #8]
   return(result);
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	f023 0310 	bic.w	r3, r3, #16
 8009822:	647b      	str	r3, [r7, #68]	@ 0x44
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	461a      	mov	r2, r3
 800982a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800982c:	61bb      	str	r3, [r7, #24]
 800982e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009830:	6979      	ldr	r1, [r7, #20]
 8009832:	69ba      	ldr	r2, [r7, #24]
 8009834:	e841 2300 	strex	r3, r2, [r1]
 8009838:	613b      	str	r3, [r7, #16]
   return(result);
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1e6      	bne.n	800980e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2220      	movs	r2, #32
 8009844:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009854:	bf00      	nop
 8009856:	3754      	adds	r7, #84	@ 0x54
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f7ff fb94 	bl	8008fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009884:	bf00      	nop
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800988c:	b480      	push	{r7}
 800988e:	b08f      	sub	sp, #60	@ 0x3c
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009898:	2b21      	cmp	r3, #33	@ 0x21
 800989a:	d14c      	bne.n	8009936 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d132      	bne.n	800990e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	e853 3f00 	ldrex	r3, [r3]
 80098b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	461a      	mov	r2, r3
 80098c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098c8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098ce:	e841 2300 	strex	r3, r2, [r1]
 80098d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1e6      	bne.n	80098a8 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	e853 3f00 	ldrex	r3, [r3]
 80098e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	461a      	mov	r2, r3
 80098f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f8:	61bb      	str	r3, [r7, #24]
 80098fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fc:	6979      	ldr	r1, [r7, #20]
 80098fe:	69ba      	ldr	r2, [r7, #24]
 8009900:	e841 2300 	strex	r3, r2, [r1]
 8009904:	613b      	str	r3, [r7, #16]
   return(result);
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1e6      	bne.n	80098da <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800990c:	e013      	b.n	8009936 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009912:	781a      	ldrb	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800991e:	1c5a      	adds	r2, r3, #1
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800992a:	b29b      	uxth	r3, r3
 800992c:	3b01      	subs	r3, #1
 800992e:	b29a      	uxth	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8009936:	bf00      	nop
 8009938:	373c      	adds	r7, #60	@ 0x3c
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009942:	b480      	push	{r7}
 8009944:	b091      	sub	sp, #68	@ 0x44
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800994e:	2b21      	cmp	r3, #33	@ 0x21
 8009950:	d151      	bne.n	80099f6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009958:	b29b      	uxth	r3, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	d132      	bne.n	80099c4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009966:	e853 3f00 	ldrex	r3, [r3]
 800996a:	623b      	str	r3, [r7, #32]
   return(result);
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009972:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	461a      	mov	r2, r3
 800997a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800997c:	633b      	str	r3, [r7, #48]	@ 0x30
 800997e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009980:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009984:	e841 2300 	strex	r3, r2, [r1]
 8009988:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800998a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998c:	2b00      	cmp	r3, #0
 800998e:	d1e6      	bne.n	800995e <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	e853 3f00 	ldrex	r3, [r3]
 800999c:	60fb      	str	r3, [r7, #12]
   return(result);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	461a      	mov	r2, r3
 80099ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099ae:	61fb      	str	r3, [r7, #28]
 80099b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b2:	69b9      	ldr	r1, [r7, #24]
 80099b4:	69fa      	ldr	r2, [r7, #28]
 80099b6:	e841 2300 	strex	r3, r2, [r1]
 80099ba:	617b      	str	r3, [r7, #20]
   return(result);
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1e6      	bne.n	8009990 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80099c2:	e018      	b.n	80099f6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80099ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099cc:	881a      	ldrh	r2, [r3, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099d6:	b292      	uxth	r2, r2
 80099d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099de:	1c9a      	adds	r2, r3, #2
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	3b01      	subs	r3, #1
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80099f6:	bf00      	nop
 80099f8:	3744      	adds	r7, #68	@ 0x44
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr

08009a02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b088      	sub	sp, #32
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	e853 3f00 	ldrex	r3, [r3]
 8009a16:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a1e:	61fb      	str	r3, [r7, #28]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	461a      	mov	r2, r3
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	61bb      	str	r3, [r7, #24]
 8009a2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2c:	6979      	ldr	r1, [r7, #20]
 8009a2e:	69ba      	ldr	r2, [r7, #24]
 8009a30:	e841 2300 	strex	r3, r2, [r1]
 8009a34:	613b      	str	r3, [r7, #16]
   return(result);
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d1e6      	bne.n	8009a0a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2220      	movs	r2, #32
 8009a40:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7f8 fd47 	bl	80024dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a4e:	bf00      	nop
 8009a50:	3720      	adds	r7, #32
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b09c      	sub	sp, #112	@ 0x70
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a64:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a6e:	2b22      	cmp	r3, #34	@ 0x22
 8009a70:	f040 80b9 	bne.w	8009be6 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009a7a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a7e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009a82:	b2d9      	uxtb	r1, r3
 8009a84:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a8e:	400a      	ands	r2, r1
 8009a90:	b2d2      	uxtb	r2, r2
 8009a92:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a98:	1c5a      	adds	r2, r3, #1
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f040 809c 	bne.w	8009bf6 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ac6:	e853 3f00 	ldrex	r3, [r3]
 8009aca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009acc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ace:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ad2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009adc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ade:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ae2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ae4:	e841 2300 	strex	r3, r2, [r1]
 8009ae8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009aea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1e6      	bne.n	8009abe <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	3308      	adds	r3, #8
 8009af6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afa:	e853 3f00 	ldrex	r3, [r3]
 8009afe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b02:	f023 0301 	bic.w	r3, r3, #1
 8009b06:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	3308      	adds	r3, #8
 8009b0e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009b10:	647a      	str	r2, [r7, #68]	@ 0x44
 8009b12:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b18:	e841 2300 	strex	r3, r2, [r1]
 8009b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1e5      	bne.n	8009af0 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2220      	movs	r2, #32
 8009b28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d018      	beq.n	8009b78 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4e:	e853 3f00 	ldrex	r3, [r3]
 8009b52:	623b      	str	r3, [r7, #32]
   return(result);
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009b5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	461a      	mov	r2, r3
 8009b62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b64:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b6c:	e841 2300 	strex	r3, r2, [r1]
 8009b70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1e6      	bne.n	8009b46 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d12e      	bne.n	8009bde <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	e853 3f00 	ldrex	r3, [r3]
 8009b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0310 	bic.w	r3, r3, #16
 8009b9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ba4:	61fb      	str	r3, [r7, #28]
 8009ba6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba8:	69b9      	ldr	r1, [r7, #24]
 8009baa:	69fa      	ldr	r2, [r7, #28]
 8009bac:	e841 2300 	strex	r3, r2, [r1]
 8009bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1e6      	bne.n	8009b86 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	69db      	ldr	r3, [r3, #28]
 8009bbe:	f003 0310 	and.w	r3, r3, #16
 8009bc2:	2b10      	cmp	r3, #16
 8009bc4:	d103      	bne.n	8009bce <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2210      	movs	r2, #16
 8009bcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f7ff f9f2 	bl	8008fc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009bdc:	e00b      	b.n	8009bf6 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7f8 fabc 	bl	800215c <HAL_UART_RxCpltCallback>
}
 8009be4:	e007      	b.n	8009bf6 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	699a      	ldr	r2, [r3, #24]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f042 0208 	orr.w	r2, r2, #8
 8009bf4:	619a      	str	r2, [r3, #24]
}
 8009bf6:	bf00      	nop
 8009bf8:	3770      	adds	r7, #112	@ 0x70
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b09c      	sub	sp, #112	@ 0x70
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c0c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c16:	2b22      	cmp	r3, #34	@ 0x22
 8009c18:	f040 80b9 	bne.w	8009d8e <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009c22:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c2a:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009c2c:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009c30:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009c34:	4013      	ands	r3, r2
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c3a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c40:	1c9a      	adds	r2, r3, #2
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f040 809c 	bne.w	8009d9e <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c6e:	e853 3f00 	ldrex	r3, [r3]
 8009c72:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	461a      	mov	r2, r3
 8009c82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c84:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c86:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c88:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009c8c:	e841 2300 	strex	r3, r2, [r1]
 8009c90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1e6      	bne.n	8009c66 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	3308      	adds	r3, #8
 8009c9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ca2:	e853 3f00 	ldrex	r3, [r3]
 8009ca6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009caa:	f023 0301 	bic.w	r3, r3, #1
 8009cae:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	3308      	adds	r3, #8
 8009cb6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009cb8:	643a      	str	r2, [r7, #64]	@ 0x40
 8009cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009cbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009cc0:	e841 2300 	strex	r3, r2, [r1]
 8009cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1e5      	bne.n	8009c98 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2220      	movs	r2, #32
 8009cd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d018      	beq.n	8009d20 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	e853 3f00 	ldrex	r3, [r3]
 8009cfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d0e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d14:	e841 2300 	strex	r3, r2, [r1]
 8009d18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1e6      	bne.n	8009cee <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d12e      	bne.n	8009d86 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	e853 3f00 	ldrex	r3, [r3]
 8009d3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	f023 0310 	bic.w	r3, r3, #16
 8009d42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009d4c:	61bb      	str	r3, [r7, #24]
 8009d4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d50:	6979      	ldr	r1, [r7, #20]
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	e841 2300 	strex	r3, r2, [r1]
 8009d58:	613b      	str	r3, [r7, #16]
   return(result);
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1e6      	bne.n	8009d2e <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	69db      	ldr	r3, [r3, #28]
 8009d66:	f003 0310 	and.w	r3, r3, #16
 8009d6a:	2b10      	cmp	r3, #16
 8009d6c:	d103      	bne.n	8009d76 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2210      	movs	r2, #16
 8009d74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7ff f91e 	bl	8008fc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d84:	e00b      	b.n	8009d9e <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f7f8 f9e8 	bl	800215c <HAL_UART_RxCpltCallback>
}
 8009d8c:	e007      	b.n	8009d9e <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	699a      	ldr	r2, [r3, #24]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f042 0208 	orr.w	r2, r2, #8
 8009d9c:	619a      	str	r2, [r3, #24]
}
 8009d9e:	bf00      	nop
 8009da0:	3770      	adds	r7, #112	@ 0x70
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009da6:	b480      	push	{r7}
 8009da8:	b083      	sub	sp, #12
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009dae:	bf00      	nop
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr

08009dba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009dba:	b480      	push	{r7}
 8009dbc:	b085      	sub	sp, #20
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009dca:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8009dce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009df0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8009df4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	43db      	mvns	r3, r3
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	4013      	ands	r3, r2
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009e1e:	b084      	sub	sp, #16
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	f107 0014 	add.w	r0, r7, #20
 8009e2c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	370c      	adds	r7, #12
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	b004      	add	sp, #16
 8009e5e:	4770      	bx	lr

08009e60 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b09d      	sub	sp, #116	@ 0x74
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4413      	add	r3, r2
 8009e7a:	881b      	ldrh	r3, [r3, #0]
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8009e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e86:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	78db      	ldrb	r3, [r3, #3]
 8009e8e:	2b03      	cmp	r3, #3
 8009e90:	d81f      	bhi.n	8009ed2 <USB_ActivateEndpoint+0x72>
 8009e92:	a201      	add	r2, pc, #4	@ (adr r2, 8009e98 <USB_ActivateEndpoint+0x38>)
 8009e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e98:	08009ea9 	.word	0x08009ea9
 8009e9c:	08009ec5 	.word	0x08009ec5
 8009ea0:	08009edb 	.word	0x08009edb
 8009ea4:	08009eb7 	.word	0x08009eb7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009ea8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009eac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009eb0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009eb4:	e012      	b.n	8009edc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009eb6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009eba:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8009ebe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009ec2:	e00b      	b.n	8009edc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009ec4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009ec8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009ecc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009ed0:	e004      	b.n	8009edc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8009ed8:	e000      	b.n	8009edc <USB_ActivateEndpoint+0x7c>
      break;
 8009eda:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	441a      	add	r2, r3
 8009ee6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009eea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009eee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4413      	add	r3, r2
 8009f08:	881b      	ldrh	r3, [r3, #0]
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	b21b      	sxth	r3, r3
 8009f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f16:	b21a      	sxth	r2, r3
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	b21b      	sxth	r3, r3
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	b21b      	sxth	r3, r3
 8009f22:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	441a      	add	r2, r3
 8009f30:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009f34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	7b1b      	ldrb	r3, [r3, #12]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f040 8178 	bne.w	800a242 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	785b      	ldrb	r3, [r3, #1]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f000 8084 	beq.w	800a064 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	61bb      	str	r3, [r7, #24]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	461a      	mov	r2, r3
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	61bb      	str	r3, [r7, #24]
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	011a      	lsls	r2, r3, #4
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f7e:	617b      	str	r3, [r7, #20]
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	88db      	ldrh	r3, [r3, #6]
 8009f84:	085b      	lsrs	r3, r3, #1
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	005b      	lsls	r3, r3, #1
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	4413      	add	r3, r2
 8009f9a:	881b      	ldrh	r3, [r3, #0]
 8009f9c:	827b      	strh	r3, [r7, #18]
 8009f9e:	8a7b      	ldrh	r3, [r7, #18]
 8009fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d01b      	beq.n	8009fe0 <USB_ActivateEndpoint+0x180>
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	4413      	add	r3, r2
 8009fb2:	881b      	ldrh	r3, [r3, #0]
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fbe:	823b      	strh	r3, [r7, #16]
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	441a      	add	r2, r3
 8009fca:	8a3b      	ldrh	r3, [r7, #16]
 8009fcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fd8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	78db      	ldrb	r3, [r3, #3]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d020      	beq.n	800a02a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	4413      	add	r3, r2
 8009ff2:	881b      	ldrh	r3, [r3, #0]
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ffa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ffe:	81bb      	strh	r3, [r7, #12]
 800a000:	89bb      	ldrh	r3, [r7, #12]
 800a002:	f083 0320 	eor.w	r3, r3, #32
 800a006:	81bb      	strh	r3, [r7, #12]
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	441a      	add	r2, r3
 800a012:	89bb      	ldrh	r3, [r7, #12]
 800a014:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a018:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a01c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a024:	b29b      	uxth	r3, r3
 800a026:	8013      	strh	r3, [r2, #0]
 800a028:	e2d5      	b.n	800a5d6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	4413      	add	r3, r2
 800a034:	881b      	ldrh	r3, [r3, #0]
 800a036:	b29b      	uxth	r3, r3
 800a038:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a03c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a040:	81fb      	strh	r3, [r7, #14]
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	441a      	add	r2, r3
 800a04c:	89fb      	ldrh	r3, [r7, #14]
 800a04e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a052:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a05a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a05e:	b29b      	uxth	r3, r3
 800a060:	8013      	strh	r3, [r2, #0]
 800a062:	e2b8      	b.n	800a5d6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	633b      	str	r3, [r7, #48]	@ 0x30
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a06e:	b29b      	uxth	r3, r3
 800a070:	461a      	mov	r2, r3
 800a072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a074:	4413      	add	r3, r2
 800a076:	633b      	str	r3, [r7, #48]	@ 0x30
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	011a      	lsls	r2, r3, #4
 800a07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a080:	4413      	add	r3, r2
 800a082:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800a086:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	88db      	ldrh	r3, [r3, #6]
 800a08c:	085b      	lsrs	r3, r3, #1
 800a08e:	b29b      	uxth	r3, r3
 800a090:	005b      	lsls	r3, r3, #1
 800a092:	b29a      	uxth	r2, r3
 800a094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a096:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a8:	4413      	add	r3, r2
 800a0aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	011a      	lsls	r2, r3, #4
 800a0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a0ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0be:	881b      	ldrh	r3, [r3, #0]
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ca:	801a      	strh	r2, [r3, #0]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	2b3e      	cmp	r3, #62	@ 0x3e
 800a0d2:	d91d      	bls.n	800a110 <USB_ActivateEndpoint+0x2b0>
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	095b      	lsrs	r3, r3, #5
 800a0da:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	f003 031f 	and.w	r3, r3, #31
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d102      	bne.n	800a0ee <USB_ActivateEndpoint+0x28e>
 800a0e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f0:	881b      	ldrh	r3, [r3, #0]
 800a0f2:	b29a      	uxth	r2, r3
 800a0f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	029b      	lsls	r3, r3, #10
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a108:	b29a      	uxth	r2, r3
 800a10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10c:	801a      	strh	r2, [r3, #0]
 800a10e:	e026      	b.n	800a15e <USB_ActivateEndpoint+0x2fe>
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10a      	bne.n	800a12e <USB_ActivateEndpoint+0x2ce>
 800a118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11a:	881b      	ldrh	r3, [r3, #0]
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a126:	b29a      	uxth	r2, r3
 800a128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12a:	801a      	strh	r2, [r3, #0]
 800a12c:	e017      	b.n	800a15e <USB_ActivateEndpoint+0x2fe>
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	085b      	lsrs	r3, r3, #1
 800a134:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	f003 0301 	and.w	r3, r3, #1
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d002      	beq.n	800a148 <USB_ActivateEndpoint+0x2e8>
 800a142:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a144:	3301      	adds	r3, #1
 800a146:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a150:	b29b      	uxth	r3, r3
 800a152:	029b      	lsls	r3, r3, #10
 800a154:	b29b      	uxth	r3, r3
 800a156:	4313      	orrs	r3, r2
 800a158:	b29a      	uxth	r2, r3
 800a15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	4413      	add	r3, r2
 800a168:	881b      	ldrh	r3, [r3, #0]
 800a16a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a16c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a16e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a172:	2b00      	cmp	r3, #0
 800a174:	d01b      	beq.n	800a1ae <USB_ActivateEndpoint+0x34e>
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	4413      	add	r3, r2
 800a180:	881b      	ldrh	r3, [r3, #0]
 800a182:	b29b      	uxth	r3, r3
 800a184:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a18c:	843b      	strh	r3, [r7, #32]
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	441a      	add	r2, r3
 800a198:	8c3b      	ldrh	r3, [r7, #32]
 800a19a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a19e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a1a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d124      	bne.n	800a200 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	881b      	ldrh	r3, [r3, #0]
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a1c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1cc:	83bb      	strh	r3, [r7, #28]
 800a1ce:	8bbb      	ldrh	r3, [r7, #28]
 800a1d0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a1d4:	83bb      	strh	r3, [r7, #28]
 800a1d6:	8bbb      	ldrh	r3, [r7, #28]
 800a1d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a1dc:	83bb      	strh	r3, [r7, #28]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	441a      	add	r2, r3
 800a1e8:	8bbb      	ldrh	r3, [r7, #28]
 800a1ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	8013      	strh	r3, [r2, #0]
 800a1fe:	e1ea      	b.n	800a5d6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	4413      	add	r3, r2
 800a20a:	881b      	ldrh	r3, [r3, #0]
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a216:	83fb      	strh	r3, [r7, #30]
 800a218:	8bfb      	ldrh	r3, [r7, #30]
 800a21a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a21e:	83fb      	strh	r3, [r7, #30]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	441a      	add	r2, r3
 800a22a:	8bfb      	ldrh	r3, [r7, #30]
 800a22c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a230:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a234:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	8013      	strh	r3, [r2, #0]
 800a240:	e1c9      	b.n	800a5d6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	78db      	ldrb	r3, [r3, #3]
 800a246:	2b02      	cmp	r3, #2
 800a248:	d11e      	bne.n	800a288 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4413      	add	r3, r2
 800a254:	881b      	ldrh	r3, [r3, #0]
 800a256:	b29b      	uxth	r3, r3
 800a258:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a25c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a260:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	441a      	add	r2, r3
 800a26e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a272:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a276:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a27a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a27e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a282:	b29b      	uxth	r3, r3
 800a284:	8013      	strh	r3, [r2, #0]
 800a286:	e01d      	b.n	800a2c4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4413      	add	r3, r2
 800a292:	881b      	ldrh	r3, [r3, #0]
 800a294:	b29b      	uxth	r3, r3
 800a296:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a29a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a29e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	441a      	add	r2, r3
 800a2ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a2b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2d4:	4413      	add	r3, r2
 800a2d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	011a      	lsls	r2, r3, #4
 800a2de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2e0:	4413      	add	r3, r2
 800a2e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a2e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	891b      	ldrh	r3, [r3, #8]
 800a2ec:	085b      	lsrs	r3, r3, #1
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	005b      	lsls	r3, r3, #1
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a2f6:	801a      	strh	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a302:	b29b      	uxth	r3, r3
 800a304:	461a      	mov	r2, r3
 800a306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a308:	4413      	add	r3, r2
 800a30a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	011a      	lsls	r2, r3, #4
 800a312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a314:	4413      	add	r3, r2
 800a316:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800a31a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	895b      	ldrh	r3, [r3, #10]
 800a320:	085b      	lsrs	r3, r3, #1
 800a322:	b29b      	uxth	r3, r3
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	b29a      	uxth	r2, r3
 800a328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a32a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	785b      	ldrb	r3, [r3, #1]
 800a330:	2b00      	cmp	r3, #0
 800a332:	f040 8093 	bne.w	800a45c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	4413      	add	r3, r2
 800a340:	881b      	ldrh	r3, [r3, #0]
 800a342:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800a346:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a34a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d01b      	beq.n	800a38a <USB_ActivateEndpoint+0x52a>
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	4413      	add	r3, r2
 800a35c:	881b      	ldrh	r3, [r3, #0]
 800a35e:	b29b      	uxth	r3, r3
 800a360:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a368:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	441a      	add	r2, r3
 800a374:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a376:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a37a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a37e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a386:	b29b      	uxth	r3, r3
 800a388:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	4413      	add	r3, r2
 800a394:	881b      	ldrh	r3, [r3, #0]
 800a396:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a398:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a39a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d01b      	beq.n	800a3da <USB_ActivateEndpoint+0x57a>
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	4413      	add	r3, r2
 800a3ac:	881b      	ldrh	r3, [r3, #0]
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3b8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	441a      	add	r2, r3
 800a3c4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a3c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	4413      	add	r3, r2
 800a3e4:	881b      	ldrh	r3, [r3, #0]
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a3ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3f0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a3f2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a3f4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a3f8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a3fa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a3fc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a400:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	441a      	add	r2, r3
 800a40c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a40e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a412:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a41a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a41e:	b29b      	uxth	r3, r3
 800a420:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a434:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a438:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	441a      	add	r2, r3
 800a444:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a446:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a44a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a44e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a456:	b29b      	uxth	r3, r3
 800a458:	8013      	strh	r3, [r2, #0]
 800a45a:	e0bc      	b.n	800a5d6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	4413      	add	r3, r2
 800a466:	881b      	ldrh	r3, [r3, #0]
 800a468:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a46c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a470:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a474:	2b00      	cmp	r3, #0
 800a476:	d01d      	beq.n	800a4b4 <USB_ActivateEndpoint+0x654>
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	881b      	ldrh	r3, [r3, #0]
 800a484:	b29b      	uxth	r3, r3
 800a486:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a48a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a48e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	441a      	add	r2, r3
 800a49c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a4a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a4ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4413      	add	r3, r2
 800a4be:	881b      	ldrh	r3, [r3, #0]
 800a4c0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800a4c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800a4c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d01d      	beq.n	800a50c <USB_ActivateEndpoint+0x6ac>
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4413      	add	r3, r2
 800a4da:	881b      	ldrh	r3, [r3, #0]
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4e6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	441a      	add	r2, r3
 800a4f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800a4f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a500:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a504:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a508:	b29b      	uxth	r3, r3
 800a50a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	78db      	ldrb	r3, [r3, #3]
 800a510:	2b01      	cmp	r3, #1
 800a512:	d024      	beq.n	800a55e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4413      	add	r3, r2
 800a51e:	881b      	ldrh	r3, [r3, #0]
 800a520:	b29b      	uxth	r3, r3
 800a522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a526:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a52a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a52e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a532:	f083 0320 	eor.w	r3, r3, #32
 800a536:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	441a      	add	r2, r3
 800a544:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a54c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a558:	b29b      	uxth	r3, r3
 800a55a:	8013      	strh	r3, [r2, #0]
 800a55c:	e01d      	b.n	800a59a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	881b      	ldrh	r3, [r3, #0]
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a570:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a574:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	441a      	add	r2, r3
 800a582:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a586:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a58a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a58e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a596:	b29b      	uxth	r3, r3
 800a598:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	4413      	add	r3, r2
 800a5a4:	881b      	ldrh	r3, [r3, #0]
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a5ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5b0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	441a      	add	r2, r3
 800a5be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a5c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a5d6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3774      	adds	r7, #116	@ 0x74
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop

0800a5e8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b08d      	sub	sp, #52	@ 0x34
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	7b1b      	ldrb	r3, [r3, #12]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f040 808e 	bne.w	800a718 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	785b      	ldrb	r3, [r3, #1]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d044      	beq.n	800a68e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4413      	add	r3, r2
 800a60e:	881b      	ldrh	r3, [r3, #0]
 800a610:	81bb      	strh	r3, [r7, #12]
 800a612:	89bb      	ldrh	r3, [r7, #12]
 800a614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d01b      	beq.n	800a654 <USB_DeactivateEndpoint+0x6c>
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	4413      	add	r3, r2
 800a626:	881b      	ldrh	r3, [r3, #0]
 800a628:	b29b      	uxth	r3, r3
 800a62a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a62e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a632:	817b      	strh	r3, [r7, #10]
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	441a      	add	r2, r3
 800a63e:	897b      	ldrh	r3, [r7, #10]
 800a640:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a644:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a648:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a64c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a650:	b29b      	uxth	r3, r3
 800a652:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	4413      	add	r3, r2
 800a65e:	881b      	ldrh	r3, [r3, #0]
 800a660:	b29b      	uxth	r3, r3
 800a662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a666:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a66a:	813b      	strh	r3, [r7, #8]
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	441a      	add	r2, r3
 800a676:	893b      	ldrh	r3, [r7, #8]
 800a678:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a67c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a680:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a688:	b29b      	uxth	r3, r3
 800a68a:	8013      	strh	r3, [r2, #0]
 800a68c:	e192      	b.n	800a9b4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	4413      	add	r3, r2
 800a698:	881b      	ldrh	r3, [r3, #0]
 800a69a:	827b      	strh	r3, [r7, #18]
 800a69c:	8a7b      	ldrh	r3, [r7, #18]
 800a69e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d01b      	beq.n	800a6de <USB_DeactivateEndpoint+0xf6>
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4413      	add	r3, r2
 800a6b0:	881b      	ldrh	r3, [r3, #0]
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6bc:	823b      	strh	r3, [r7, #16]
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	441a      	add	r2, r3
 800a6c8:	8a3b      	ldrh	r3, [r7, #16]
 800a6ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a6d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	4413      	add	r3, r2
 800a6e8:	881b      	ldrh	r3, [r3, #0]
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a6f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6f4:	81fb      	strh	r3, [r7, #14]
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	441a      	add	r2, r3
 800a700:	89fb      	ldrh	r3, [r7, #14]
 800a702:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a706:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a70a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a70e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a712:	b29b      	uxth	r3, r3
 800a714:	8013      	strh	r3, [r2, #0]
 800a716:	e14d      	b.n	800a9b4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	785b      	ldrb	r3, [r3, #1]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f040 80a5 	bne.w	800a86c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	4413      	add	r3, r2
 800a72c:	881b      	ldrh	r3, [r3, #0]
 800a72e:	843b      	strh	r3, [r7, #32]
 800a730:	8c3b      	ldrh	r3, [r7, #32]
 800a732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a736:	2b00      	cmp	r3, #0
 800a738:	d01b      	beq.n	800a772 <USB_DeactivateEndpoint+0x18a>
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	b29b      	uxth	r3, r3
 800a748:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a74c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a750:	83fb      	strh	r3, [r7, #30]
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	441a      	add	r2, r3
 800a75c:	8bfb      	ldrh	r3, [r7, #30]
 800a75e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a762:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a766:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a76a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a76e:	b29b      	uxth	r3, r3
 800a770:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4413      	add	r3, r2
 800a77c:	881b      	ldrh	r3, [r3, #0]
 800a77e:	83bb      	strh	r3, [r7, #28]
 800a780:	8bbb      	ldrh	r3, [r7, #28]
 800a782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a786:	2b00      	cmp	r3, #0
 800a788:	d01b      	beq.n	800a7c2 <USB_DeactivateEndpoint+0x1da>
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	4413      	add	r3, r2
 800a794:	881b      	ldrh	r3, [r3, #0]
 800a796:	b29b      	uxth	r3, r3
 800a798:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a79c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7a0:	837b      	strh	r3, [r7, #26]
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	441a      	add	r2, r3
 800a7ac:	8b7b      	ldrh	r3, [r7, #26]
 800a7ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	4413      	add	r3, r2
 800a7cc:	881b      	ldrh	r3, [r3, #0]
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7d8:	833b      	strh	r3, [r7, #24]
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	441a      	add	r2, r3
 800a7e4:	8b3b      	ldrh	r3, [r7, #24]
 800a7e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	4413      	add	r3, r2
 800a804:	881b      	ldrh	r3, [r3, #0]
 800a806:	b29b      	uxth	r3, r3
 800a808:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a80c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a810:	82fb      	strh	r3, [r7, #22]
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	441a      	add	r2, r3
 800a81c:	8afb      	ldrh	r3, [r7, #22]
 800a81e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a822:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a826:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a82a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a82e:	b29b      	uxth	r3, r3
 800a830:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	881b      	ldrh	r3, [r3, #0]
 800a83e:	b29b      	uxth	r3, r3
 800a840:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a848:	82bb      	strh	r3, [r7, #20]
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	441a      	add	r2, r3
 800a854:	8abb      	ldrh	r3, [r7, #20]
 800a856:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a85a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a85e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a866:	b29b      	uxth	r3, r3
 800a868:	8013      	strh	r3, [r2, #0]
 800a86a:	e0a3      	b.n	800a9b4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	4413      	add	r3, r2
 800a876:	881b      	ldrh	r3, [r3, #0]
 800a878:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a87a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a87c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a880:	2b00      	cmp	r3, #0
 800a882:	d01b      	beq.n	800a8bc <USB_DeactivateEndpoint+0x2d4>
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	b29b      	uxth	r3, r3
 800a892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a89a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	441a      	add	r2, r3
 800a8a6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a8a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a8b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	4413      	add	r3, r2
 800a8c6:	881b      	ldrh	r3, [r3, #0]
 800a8c8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800a8ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a8cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d01b      	beq.n	800a90c <USB_DeactivateEndpoint+0x324>
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	4413      	add	r3, r2
 800a8de:	881b      	ldrh	r3, [r3, #0]
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8ea:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	441a      	add	r2, r3
 800a8f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a8f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a900:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a904:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a908:	b29b      	uxth	r3, r3
 800a90a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	881b      	ldrh	r3, [r3, #0]
 800a918:	b29b      	uxth	r3, r3
 800a91a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a91e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a922:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	441a      	add	r2, r3
 800a92e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a930:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a934:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a938:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a93c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a940:	b29b      	uxth	r3, r3
 800a942:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	4413      	add	r3, r2
 800a94e:	881b      	ldrh	r3, [r3, #0]
 800a950:	b29b      	uxth	r3, r3
 800a952:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a956:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a95a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	441a      	add	r2, r3
 800a966:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a968:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a96c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a978:	b29b      	uxth	r3, r3
 800a97a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4413      	add	r3, r2
 800a986:	881b      	ldrh	r3, [r3, #0]
 800a988:	b29b      	uxth	r3, r3
 800a98a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a98e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a992:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	441a      	add	r2, r3
 800a99e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a9a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3734      	adds	r7, #52	@ 0x34
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr

0800a9c2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b0c2      	sub	sp, #264	@ 0x108
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9d0:	6018      	str	r0, [r3, #0]
 800a9d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9da:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a9dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	785b      	ldrb	r3, [r3, #1]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	f040 86b7 	bne.w	800b75c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a9ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	699a      	ldr	r2, [r3, #24]
 800a9fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d908      	bls.n	800aa1c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800aa0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800aa1a:	e007      	b.n	800aa2c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800aa1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800aa2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	7b1b      	ldrb	r3, [r3, #12]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d13a      	bne.n	800aab2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800aa3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	6959      	ldr	r1, [r3, #20]
 800aa48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	88da      	ldrh	r2, [r3, #6]
 800aa54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800aa5e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800aa62:	6800      	ldr	r0, [r0, #0]
 800aa64:	f001 fc8c 	bl	800c380 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aa68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	613b      	str	r3, [r7, #16]
 800aa74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	461a      	mov	r2, r3
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	4413      	add	r3, r2
 800aa8a:	613b      	str	r3, [r7, #16]
 800aa8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	011a      	lsls	r2, r3, #4
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800aaa2:	60fb      	str	r3, [r7, #12]
 800aaa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	801a      	strh	r2, [r3, #0]
 800aaae:	f000 be1f 	b.w	800b6f0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800aab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	78db      	ldrb	r3, [r3, #3]
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	f040 8462 	bne.w	800b388 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800aac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	6a1a      	ldr	r2, [r3, #32]
 800aad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	429a      	cmp	r2, r3
 800aade:	f240 83df 	bls.w	800b2a0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800aae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aae6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4413      	add	r3, r2
 800aafc:	881b      	ldrh	r3, [r3, #0]
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab08:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ab0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	441a      	add	r2, r3
 800ab26:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ab2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab32:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ab36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ab3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6a1a      	ldr	r2, [r3, #32]
 800ab4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab4e:	1ad2      	subs	r2, r2, r3
 800ab50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ab5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4413      	add	r3, r2
 800ab76:	881b      	ldrh	r3, [r3, #0]
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f000 81c7 	beq.w	800af12 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	785b      	ldrb	r3, [r3, #1]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d177      	bne.n	800ac90 <USB_EPStartXfer+0x2ce>
 800aba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aba4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800abac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abba:	b29b      	uxth	r3, r3
 800abbc:	461a      	mov	r2, r3
 800abbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc0:	4413      	add	r3, r2
 800abc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800abc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	011a      	lsls	r2, r3, #4
 800abd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abd4:	4413      	add	r3, r2
 800abd6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800abda:	627b      	str	r3, [r7, #36]	@ 0x24
 800abdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abde:	881b      	ldrh	r3, [r3, #0]
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abea:	801a      	strh	r2, [r3, #0]
 800abec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abf0:	2b3e      	cmp	r3, #62	@ 0x3e
 800abf2:	d921      	bls.n	800ac38 <USB_EPStartXfer+0x276>
 800abf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abf8:	095b      	lsrs	r3, r3, #5
 800abfa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800abfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac02:	f003 031f 	and.w	r3, r3, #31
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d104      	bne.n	800ac14 <USB_EPStartXfer+0x252>
 800ac0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ac14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac16:	881b      	ldrh	r3, [r3, #0]
 800ac18:	b29a      	uxth	r2, r3
 800ac1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	029b      	lsls	r3, r3, #10
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	4313      	orrs	r3, r2
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac34:	801a      	strh	r2, [r3, #0]
 800ac36:	e050      	b.n	800acda <USB_EPStartXfer+0x318>
 800ac38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10a      	bne.n	800ac56 <USB_EPStartXfer+0x294>
 800ac40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac4e:	b29a      	uxth	r2, r3
 800ac50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac52:	801a      	strh	r2, [r3, #0]
 800ac54:	e041      	b.n	800acda <USB_EPStartXfer+0x318>
 800ac56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac5a:	085b      	lsrs	r3, r3, #1
 800ac5c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ac60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac64:	f003 0301 	and.w	r3, r3, #1
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d004      	beq.n	800ac76 <USB_EPStartXfer+0x2b4>
 800ac6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ac70:	3301      	adds	r3, #1
 800ac72:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ac76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac78:	881b      	ldrh	r3, [r3, #0]
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	029b      	lsls	r3, r3, #10
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	4313      	orrs	r3, r2
 800ac88:	b29a      	uxth	r2, r3
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8c:	801a      	strh	r2, [r3, #0]
 800ac8e:	e024      	b.n	800acda <USB_EPStartXfer+0x318>
 800ac90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	785b      	ldrb	r3, [r3, #1]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d11c      	bne.n	800acda <USB_EPStartXfer+0x318>
 800aca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800acae:	b29b      	uxth	r3, r3
 800acb0:	461a      	mov	r2, r3
 800acb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb4:	4413      	add	r3, r2
 800acb6:	633b      	str	r3, [r7, #48]	@ 0x30
 800acb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	011a      	lsls	r2, r3, #4
 800acc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc8:	4413      	add	r3, r2
 800acca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800acce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800acd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800acda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	895b      	ldrh	r3, [r3, #10]
 800ace6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800acea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	6959      	ldr	r1, [r3, #20]
 800acf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ad00:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ad04:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ad08:	6800      	ldr	r0, [r0, #0]
 800ad0a:	f001 fb39 	bl	800c380 <USB_WritePMA>
            ep->xfer_buff += len;
 800ad0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	695a      	ldr	r2, [r3, #20]
 800ad1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad1e:	441a      	add	r2, r3
 800ad20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ad2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	6a1a      	ldr	r2, [r3, #32]
 800ad38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	691b      	ldr	r3, [r3, #16]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d90f      	bls.n	800ad68 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800ad48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	6a1a      	ldr	r2, [r3, #32]
 800ad54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad58:	1ad2      	subs	r2, r2, r3
 800ad5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	621a      	str	r2, [r3, #32]
 800ad66:	e00e      	b.n	800ad86 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800ad68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	6a1b      	ldr	r3, [r3, #32]
 800ad74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800ad78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2200      	movs	r2, #0
 800ad84:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	785b      	ldrb	r3, [r3, #1]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d177      	bne.n	800ae86 <USB_EPStartXfer+0x4c4>
 800ad96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	61bb      	str	r3, [r7, #24]
 800ada2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ada6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	461a      	mov	r2, r3
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	4413      	add	r3, r2
 800adb8:	61bb      	str	r3, [r7, #24]
 800adba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	011a      	lsls	r2, r3, #4
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	4413      	add	r3, r2
 800adcc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800add0:	617b      	str	r3, [r7, #20]
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	881b      	ldrh	r3, [r3, #0]
 800add6:	b29b      	uxth	r3, r3
 800add8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800addc:	b29a      	uxth	r2, r3
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	801a      	strh	r2, [r3, #0]
 800ade2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ade6:	2b3e      	cmp	r3, #62	@ 0x3e
 800ade8:	d921      	bls.n	800ae2e <USB_EPStartXfer+0x46c>
 800adea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adee:	095b      	lsrs	r3, r3, #5
 800adf0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800adf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adf8:	f003 031f 	and.w	r3, r3, #31
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d104      	bne.n	800ae0a <USB_EPStartXfer+0x448>
 800ae00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae04:	3b01      	subs	r3, #1
 800ae06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	b29a      	uxth	r2, r3
 800ae10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	029b      	lsls	r3, r3, #10
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae26:	b29a      	uxth	r2, r3
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	801a      	strh	r2, [r3, #0]
 800ae2c:	e056      	b.n	800aedc <USB_EPStartXfer+0x51a>
 800ae2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d10a      	bne.n	800ae4c <USB_EPStartXfer+0x48a>
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	881b      	ldrh	r3, [r3, #0]
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae44:	b29a      	uxth	r2, r3
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	801a      	strh	r2, [r3, #0]
 800ae4a:	e047      	b.n	800aedc <USB_EPStartXfer+0x51a>
 800ae4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae50:	085b      	lsrs	r3, r3, #1
 800ae52:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ae56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae5a:	f003 0301 	and.w	r3, r3, #1
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d004      	beq.n	800ae6c <USB_EPStartXfer+0x4aa>
 800ae62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae66:	3301      	adds	r3, #1
 800ae68:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	881b      	ldrh	r3, [r3, #0]
 800ae70:	b29a      	uxth	r2, r3
 800ae72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	029b      	lsls	r3, r3, #10
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	b29a      	uxth	r2, r3
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	801a      	strh	r2, [r3, #0]
 800ae84:	e02a      	b.n	800aedc <USB_EPStartXfer+0x51a>
 800ae86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	785b      	ldrb	r3, [r3, #1]
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d122      	bne.n	800aedc <USB_EPStartXfer+0x51a>
 800ae96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	623b      	str	r3, [r7, #32]
 800aea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aea6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	6a3b      	ldr	r3, [r7, #32]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	623b      	str	r3, [r7, #32]
 800aeba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aebe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	011a      	lsls	r2, r3, #4
 800aec8:	6a3b      	ldr	r3, [r7, #32]
 800aeca:	4413      	add	r3, r2
 800aecc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800aed0:	61fb      	str	r3, [r7, #28]
 800aed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aed6:	b29a      	uxth	r2, r3
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800aedc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	891b      	ldrh	r3, [r3, #8]
 800aee8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aeec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	6959      	ldr	r1, [r3, #20]
 800aef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800af02:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800af06:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800af0a:	6800      	ldr	r0, [r0, #0]
 800af0c:	f001 fa38 	bl	800c380 <USB_WritePMA>
 800af10:	e3ee      	b.n	800b6f0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800af12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	785b      	ldrb	r3, [r3, #1]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d177      	bne.n	800b012 <USB_EPStartXfer+0x650>
 800af22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	461a      	mov	r2, r3
 800af40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af42:	4413      	add	r3, r2
 800af44:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	011a      	lsls	r2, r3, #4
 800af54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af56:	4413      	add	r3, r2
 800af58:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800af5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800af5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af60:	881b      	ldrh	r3, [r3, #0]
 800af62:	b29b      	uxth	r3, r3
 800af64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af68:	b29a      	uxth	r2, r3
 800af6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af6c:	801a      	strh	r2, [r3, #0]
 800af6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af72:	2b3e      	cmp	r3, #62	@ 0x3e
 800af74:	d921      	bls.n	800afba <USB_EPStartXfer+0x5f8>
 800af76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af7a:	095b      	lsrs	r3, r3, #5
 800af7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800af80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af84:	f003 031f 	and.w	r3, r3, #31
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d104      	bne.n	800af96 <USB_EPStartXfer+0x5d4>
 800af8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800af90:	3b01      	subs	r3, #1
 800af92:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800af96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af98:	881b      	ldrh	r3, [r3, #0]
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	029b      	lsls	r3, r3, #10
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	4313      	orrs	r3, r2
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afb2:	b29a      	uxth	r2, r3
 800afb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afb6:	801a      	strh	r2, [r3, #0]
 800afb8:	e056      	b.n	800b068 <USB_EPStartXfer+0x6a6>
 800afba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10a      	bne.n	800afd8 <USB_EPStartXfer+0x616>
 800afc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afc4:	881b      	ldrh	r3, [r3, #0]
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afd0:	b29a      	uxth	r2, r3
 800afd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afd4:	801a      	strh	r2, [r3, #0]
 800afd6:	e047      	b.n	800b068 <USB_EPStartXfer+0x6a6>
 800afd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afdc:	085b      	lsrs	r3, r3, #1
 800afde:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800afe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afe6:	f003 0301 	and.w	r3, r3, #1
 800afea:	2b00      	cmp	r3, #0
 800afec:	d004      	beq.n	800aff8 <USB_EPStartXfer+0x636>
 800afee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800aff2:	3301      	adds	r3, #1
 800aff4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800aff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800affa:	881b      	ldrh	r3, [r3, #0]
 800affc:	b29a      	uxth	r2, r3
 800affe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b002:	b29b      	uxth	r3, r3
 800b004:	029b      	lsls	r3, r3, #10
 800b006:	b29b      	uxth	r3, r3
 800b008:	4313      	orrs	r3, r2
 800b00a:	b29a      	uxth	r2, r3
 800b00c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b00e:	801a      	strh	r2, [r3, #0]
 800b010:	e02a      	b.n	800b068 <USB_EPStartXfer+0x6a6>
 800b012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	785b      	ldrb	r3, [r3, #1]
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d122      	bne.n	800b068 <USB_EPStartXfer+0x6a6>
 800b022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b026:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b02e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b032:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	461a      	mov	r2, r3
 800b040:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b042:	4413      	add	r3, r2
 800b044:	653b      	str	r3, [r7, #80]	@ 0x50
 800b046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b04a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	011a      	lsls	r2, r3, #4
 800b054:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b056:	4413      	add	r3, r2
 800b058:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b05c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b062:	b29a      	uxth	r2, r3
 800b064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b066:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b06c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	891b      	ldrh	r3, [r3, #8]
 800b074:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b07c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	6959      	ldr	r1, [r3, #20]
 800b084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b088:	b29b      	uxth	r3, r3
 800b08a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b08e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b092:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b096:	6800      	ldr	r0, [r0, #0]
 800b098:	f001 f972 	bl	800c380 <USB_WritePMA>
            ep->xfer_buff += len;
 800b09c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	695a      	ldr	r2, [r3, #20]
 800b0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0ac:	441a      	add	r2, r3
 800b0ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b0ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6a1a      	ldr	r2, [r3, #32]
 800b0c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d90f      	bls.n	800b0f6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800b0d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	6a1a      	ldr	r2, [r3, #32]
 800b0e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0e6:	1ad2      	subs	r2, r2, r3
 800b0e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	621a      	str	r2, [r3, #32]
 800b0f4:	e00e      	b.n	800b114 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800b0f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b10a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2200      	movs	r2, #0
 800b112:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b118:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	785b      	ldrb	r3, [r3, #1]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d177      	bne.n	800b220 <USB_EPStartXfer+0x85e>
 800b130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b134:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b13c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b140:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	461a      	mov	r2, r3
 800b14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b150:	4413      	add	r3, r2
 800b152:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	011a      	lsls	r2, r3, #4
 800b162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b164:	4413      	add	r3, r2
 800b166:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b16a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b16c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b16e:	881b      	ldrh	r3, [r3, #0]
 800b170:	b29b      	uxth	r3, r3
 800b172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b176:	b29a      	uxth	r2, r3
 800b178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b17a:	801a      	strh	r2, [r3, #0]
 800b17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b180:	2b3e      	cmp	r3, #62	@ 0x3e
 800b182:	d921      	bls.n	800b1c8 <USB_EPStartXfer+0x806>
 800b184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b188:	095b      	lsrs	r3, r3, #5
 800b18a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b18e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b192:	f003 031f 	and.w	r3, r3, #31
 800b196:	2b00      	cmp	r3, #0
 800b198:	d104      	bne.n	800b1a4 <USB_EPStartXfer+0x7e2>
 800b19a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b19e:	3b01      	subs	r3, #1
 800b1a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b1a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1a6:	881b      	ldrh	r3, [r3, #0]
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	029b      	lsls	r3, r3, #10
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1c4:	801a      	strh	r2, [r3, #0]
 800b1c6:	e050      	b.n	800b26a <USB_EPStartXfer+0x8a8>
 800b1c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10a      	bne.n	800b1e6 <USB_EPStartXfer+0x824>
 800b1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1d2:	881b      	ldrh	r3, [r3, #0]
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1de:	b29a      	uxth	r2, r3
 800b1e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1e2:	801a      	strh	r2, [r3, #0]
 800b1e4:	e041      	b.n	800b26a <USB_EPStartXfer+0x8a8>
 800b1e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1ea:	085b      	lsrs	r3, r3, #1
 800b1ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1f4:	f003 0301 	and.w	r3, r3, #1
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d004      	beq.n	800b206 <USB_EPStartXfer+0x844>
 800b1fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b200:	3301      	adds	r3, #1
 800b202:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b208:	881b      	ldrh	r3, [r3, #0]
 800b20a:	b29a      	uxth	r2, r3
 800b20c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b210:	b29b      	uxth	r3, r3
 800b212:	029b      	lsls	r3, r3, #10
 800b214:	b29b      	uxth	r3, r3
 800b216:	4313      	orrs	r3, r2
 800b218:	b29a      	uxth	r2, r3
 800b21a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b21c:	801a      	strh	r2, [r3, #0]
 800b21e:	e024      	b.n	800b26a <USB_EPStartXfer+0x8a8>
 800b220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	785b      	ldrb	r3, [r3, #1]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d11c      	bne.n	800b26a <USB_EPStartXfer+0x8a8>
 800b230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b23e:	b29b      	uxth	r3, r3
 800b240:	461a      	mov	r2, r3
 800b242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b244:	4413      	add	r3, r2
 800b246:	643b      	str	r3, [r7, #64]	@ 0x40
 800b248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b24c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	011a      	lsls	r2, r3, #4
 800b256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b258:	4413      	add	r3, r2
 800b25a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b264:	b29a      	uxth	r2, r3
 800b266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b268:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b26a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b26e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	895b      	ldrh	r3, [r3, #10]
 800b276:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b27a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b27e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	6959      	ldr	r1, [r3, #20]
 800b286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b290:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b294:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b298:	6800      	ldr	r0, [r0, #0]
 800b29a:	f001 f871 	bl	800c380 <USB_WritePMA>
 800b29e:	e227      	b.n	800b6f0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b2a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	6a1b      	ldr	r3, [r3, #32]
 800b2ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b2b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	4413      	add	r3, r2
 800b2ca:	881b      	ldrh	r3, [r3, #0]
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b2d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2d6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b2da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	441a      	add	r2, r3
 800b2f4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b2f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b300:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b308:	b29b      	uxth	r3, r3
 800b30a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b30c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b310:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b31c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b326:	b29b      	uxth	r3, r3
 800b328:	461a      	mov	r2, r3
 800b32a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b32c:	4413      	add	r3, r2
 800b32e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	011a      	lsls	r2, r3, #4
 800b33e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b340:	4413      	add	r3, r2
 800b342:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b346:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b34c:	b29a      	uxth	r2, r3
 800b34e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b350:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	891b      	ldrh	r3, [r3, #8]
 800b35e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	6959      	ldr	r1, [r3, #20]
 800b36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b372:	b29b      	uxth	r3, r3
 800b374:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b378:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b37c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b380:	6800      	ldr	r0, [r0, #0]
 800b382:	f000 fffd 	bl	800c380 <USB_WritePMA>
 800b386:	e1b3      	b.n	800b6f0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b38c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	6a1a      	ldr	r2, [r3, #32]
 800b394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b398:	1ad2      	subs	r2, r2, r3
 800b39a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b39e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b3a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	4413      	add	r3, r2
 800b3c0:	881b      	ldrh	r3, [r3, #0]
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f000 80c6 	beq.w	800b55a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b3ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	673b      	str	r3, [r7, #112]	@ 0x70
 800b3da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	785b      	ldrb	r3, [r3, #1]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d177      	bne.n	800b4da <USB_EPStartXfer+0xb18>
 800b3ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b3f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b404:	b29b      	uxth	r3, r3
 800b406:	461a      	mov	r2, r3
 800b408:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b40a:	4413      	add	r3, r2
 800b40c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b40e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	011a      	lsls	r2, r3, #4
 800b41c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b41e:	4413      	add	r3, r2
 800b420:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b424:	667b      	str	r3, [r7, #100]	@ 0x64
 800b426:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b428:	881b      	ldrh	r3, [r3, #0]
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b430:	b29a      	uxth	r2, r3
 800b432:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b434:	801a      	strh	r2, [r3, #0]
 800b436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b43a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b43c:	d921      	bls.n	800b482 <USB_EPStartXfer+0xac0>
 800b43e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b442:	095b      	lsrs	r3, r3, #5
 800b444:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b44c:	f003 031f 	and.w	r3, r3, #31
 800b450:	2b00      	cmp	r3, #0
 800b452:	d104      	bne.n	800b45e <USB_EPStartXfer+0xa9c>
 800b454:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b458:	3b01      	subs	r3, #1
 800b45a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b45e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b460:	881b      	ldrh	r3, [r3, #0]
 800b462:	b29a      	uxth	r2, r3
 800b464:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b468:	b29b      	uxth	r3, r3
 800b46a:	029b      	lsls	r3, r3, #10
 800b46c:	b29b      	uxth	r3, r3
 800b46e:	4313      	orrs	r3, r2
 800b470:	b29b      	uxth	r3, r3
 800b472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b47e:	801a      	strh	r2, [r3, #0]
 800b480:	e050      	b.n	800b524 <USB_EPStartXfer+0xb62>
 800b482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10a      	bne.n	800b4a0 <USB_EPStartXfer+0xade>
 800b48a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b48c:	881b      	ldrh	r3, [r3, #0]
 800b48e:	b29b      	uxth	r3, r3
 800b490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b498:	b29a      	uxth	r2, r3
 800b49a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b49c:	801a      	strh	r2, [r3, #0]
 800b49e:	e041      	b.n	800b524 <USB_EPStartXfer+0xb62>
 800b4a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4a4:	085b      	lsrs	r3, r3, #1
 800b4a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b4aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4ae:	f003 0301 	and.w	r3, r3, #1
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d004      	beq.n	800b4c0 <USB_EPStartXfer+0xafe>
 800b4b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b4c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4c2:	881b      	ldrh	r3, [r3, #0]
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	029b      	lsls	r3, r3, #10
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4d6:	801a      	strh	r2, [r3, #0]
 800b4d8:	e024      	b.n	800b524 <USB_EPStartXfer+0xb62>
 800b4da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	785b      	ldrb	r3, [r3, #1]
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d11c      	bne.n	800b524 <USB_EPStartXfer+0xb62>
 800b4ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b4fe:	4413      	add	r3, r2
 800b500:	673b      	str	r3, [r7, #112]	@ 0x70
 800b502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	011a      	lsls	r2, r3, #4
 800b510:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b512:	4413      	add	r3, r2
 800b514:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b518:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b51a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b51e:	b29a      	uxth	r2, r3
 800b520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b522:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	895b      	ldrh	r3, [r3, #10]
 800b530:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	6959      	ldr	r1, [r3, #20]
 800b540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b544:	b29b      	uxth	r3, r3
 800b546:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b54a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b54e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b552:	6800      	ldr	r0, [r0, #0]
 800b554:	f000 ff14 	bl	800c380 <USB_WritePMA>
 800b558:	e0ca      	b.n	800b6f0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b55a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b55e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	785b      	ldrb	r3, [r3, #1]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d177      	bne.n	800b65a <USB_EPStartXfer+0xc98>
 800b56a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b56e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b57a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b584:	b29b      	uxth	r3, r3
 800b586:	461a      	mov	r2, r3
 800b588:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b58a:	4413      	add	r3, r2
 800b58c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b58e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	011a      	lsls	r2, r3, #4
 800b59c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b59e:	4413      	add	r3, r2
 800b5a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b5a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b5a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5a8:	881b      	ldrh	r3, [r3, #0]
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5b4:	801a      	strh	r2, [r3, #0]
 800b5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5ba:	2b3e      	cmp	r3, #62	@ 0x3e
 800b5bc:	d921      	bls.n	800b602 <USB_EPStartXfer+0xc40>
 800b5be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5c2:	095b      	lsrs	r3, r3, #5
 800b5c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5cc:	f003 031f 	and.w	r3, r3, #31
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d104      	bne.n	800b5de <USB_EPStartXfer+0xc1c>
 800b5d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b5d8:	3b01      	subs	r3, #1
 800b5da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b5de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5e0:	881b      	ldrh	r3, [r3, #0]
 800b5e2:	b29a      	uxth	r2, r3
 800b5e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	029b      	lsls	r3, r3, #10
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5fa:	b29a      	uxth	r2, r3
 800b5fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5fe:	801a      	strh	r2, [r3, #0]
 800b600:	e05c      	b.n	800b6bc <USB_EPStartXfer+0xcfa>
 800b602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b606:	2b00      	cmp	r3, #0
 800b608:	d10a      	bne.n	800b620 <USB_EPStartXfer+0xc5e>
 800b60a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b60c:	881b      	ldrh	r3, [r3, #0]
 800b60e:	b29b      	uxth	r3, r3
 800b610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b618:	b29a      	uxth	r2, r3
 800b61a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b61c:	801a      	strh	r2, [r3, #0]
 800b61e:	e04d      	b.n	800b6bc <USB_EPStartXfer+0xcfa>
 800b620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b624:	085b      	lsrs	r3, r3, #1
 800b626:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b62e:	f003 0301 	and.w	r3, r3, #1
 800b632:	2b00      	cmp	r3, #0
 800b634:	d004      	beq.n	800b640 <USB_EPStartXfer+0xc7e>
 800b636:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b63a:	3301      	adds	r3, #1
 800b63c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b640:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b642:	881b      	ldrh	r3, [r3, #0]
 800b644:	b29a      	uxth	r2, r3
 800b646:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	029b      	lsls	r3, r3, #10
 800b64e:	b29b      	uxth	r3, r3
 800b650:	4313      	orrs	r3, r2
 800b652:	b29a      	uxth	r2, r3
 800b654:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b656:	801a      	strh	r2, [r3, #0]
 800b658:	e030      	b.n	800b6bc <USB_EPStartXfer+0xcfa>
 800b65a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b65e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	785b      	ldrb	r3, [r3, #1]
 800b666:	2b01      	cmp	r3, #1
 800b668:	d128      	bne.n	800b6bc <USB_EPStartXfer+0xcfa>
 800b66a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b66e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b67c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b686:	b29b      	uxth	r3, r3
 800b688:	461a      	mov	r2, r3
 800b68a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b68e:	4413      	add	r3, r2
 800b690:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	011a      	lsls	r2, r3, #4
 800b6a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b6a6:	4413      	add	r3, r2
 800b6a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b6ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6b4:	b29a      	uxth	r2, r3
 800b6b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b6ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b6bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	891b      	ldrh	r3, [r3, #8]
 800b6c8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b6cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	6959      	ldr	r1, [r3, #20]
 800b6d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b6e2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b6e6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b6ea:	6800      	ldr	r0, [r0, #0]
 800b6ec:	f000 fe48 	bl	800c380 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b6f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	4413      	add	r3, r2
 800b70a:	881b      	ldrh	r3, [r3, #0]
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b712:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b716:	817b      	strh	r3, [r7, #10]
 800b718:	897b      	ldrh	r3, [r7, #10]
 800b71a:	f083 0310 	eor.w	r3, r3, #16
 800b71e:	817b      	strh	r3, [r7, #10]
 800b720:	897b      	ldrh	r3, [r7, #10]
 800b722:	f083 0320 	eor.w	r3, r3, #32
 800b726:	817b      	strh	r3, [r7, #10]
 800b728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b72c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	009b      	lsls	r3, r3, #2
 800b740:	441a      	add	r2, r3
 800b742:	897b      	ldrh	r3, [r7, #10]
 800b744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b74c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b754:	b29b      	uxth	r3, r3
 800b756:	8013      	strh	r3, [r2, #0]
 800b758:	f000 bcde 	b.w	800c118 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b75c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	7b1b      	ldrb	r3, [r3, #12]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f040 80bb 	bne.w	800b8e4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b76e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	699a      	ldr	r2, [r3, #24]
 800b77a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b77e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	429a      	cmp	r2, r3
 800b788:	d917      	bls.n	800b7ba <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b78a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b78e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	691b      	ldr	r3, [r3, #16]
 800b796:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800b79a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b79e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	699a      	ldr	r2, [r3, #24]
 800b7a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7aa:	1ad2      	subs	r2, r2, r3
 800b7ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	619a      	str	r2, [r3, #24]
 800b7b8:	e00e      	b.n	800b7d8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b7ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	699b      	ldr	r3, [r3, #24]
 800b7c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800b7ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b7d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b7e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b7fc:	4413      	add	r3, r2
 800b7fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	011a      	lsls	r2, r3, #4
 800b810:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b814:	4413      	add	r3, r2
 800b816:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b81a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b81e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b822:	881b      	ldrh	r3, [r3, #0]
 800b824:	b29b      	uxth	r3, r3
 800b826:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b830:	801a      	strh	r2, [r3, #0]
 800b832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b836:	2b3e      	cmp	r3, #62	@ 0x3e
 800b838:	d924      	bls.n	800b884 <USB_EPStartXfer+0xec2>
 800b83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b83e:	095b      	lsrs	r3, r3, #5
 800b840:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b848:	f003 031f 	and.w	r3, r3, #31
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d104      	bne.n	800b85a <USB_EPStartXfer+0xe98>
 800b850:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b854:	3b01      	subs	r3, #1
 800b856:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b85a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	b29a      	uxth	r2, r3
 800b862:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b866:	b29b      	uxth	r3, r3
 800b868:	029b      	lsls	r3, r3, #10
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	4313      	orrs	r3, r2
 800b86e:	b29b      	uxth	r3, r3
 800b870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b878:	b29a      	uxth	r2, r3
 800b87a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b87e:	801a      	strh	r2, [r3, #0]
 800b880:	f000 bc10 	b.w	800c0a4 <USB_EPStartXfer+0x16e2>
 800b884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d10c      	bne.n	800b8a6 <USB_EPStartXfer+0xee4>
 800b88c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b890:	881b      	ldrh	r3, [r3, #0]
 800b892:	b29b      	uxth	r3, r3
 800b894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b89c:	b29a      	uxth	r2, r3
 800b89e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b8a2:	801a      	strh	r2, [r3, #0]
 800b8a4:	e3fe      	b.n	800c0a4 <USB_EPStartXfer+0x16e2>
 800b8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8aa:	085b      	lsrs	r3, r3, #1
 800b8ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8b4:	f003 0301 	and.w	r3, r3, #1
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d004      	beq.n	800b8c6 <USB_EPStartXfer+0xf04>
 800b8bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b8c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b8ca:	881b      	ldrh	r3, [r3, #0]
 800b8cc:	b29a      	uxth	r2, r3
 800b8ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	029b      	lsls	r3, r3, #10
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b8e0:	801a      	strh	r2, [r3, #0]
 800b8e2:	e3df      	b.n	800c0a4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b8e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	78db      	ldrb	r3, [r3, #3]
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	f040 8218 	bne.w	800bd26 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b8f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	785b      	ldrb	r3, [r3, #1]
 800b902:	2b00      	cmp	r3, #0
 800b904:	f040 809d 	bne.w	800ba42 <USB_EPStartXfer+0x1080>
 800b908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b90c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b91a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b924:	b29b      	uxth	r3, r3
 800b926:	461a      	mov	r2, r3
 800b928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b92c:	4413      	add	r3, r2
 800b92e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b936:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	011a      	lsls	r2, r3, #4
 800b940:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b944:	4413      	add	r3, r2
 800b946:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b94a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b94e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b952:	881b      	ldrh	r3, [r3, #0]
 800b954:	b29b      	uxth	r3, r3
 800b956:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b95a:	b29a      	uxth	r2, r3
 800b95c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b960:	801a      	strh	r2, [r3, #0]
 800b962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b970:	d92b      	bls.n	800b9ca <USB_EPStartXfer+0x1008>
 800b972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	691b      	ldr	r3, [r3, #16]
 800b97e:	095b      	lsrs	r3, r3, #5
 800b980:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	691b      	ldr	r3, [r3, #16]
 800b990:	f003 031f 	and.w	r3, r3, #31
 800b994:	2b00      	cmp	r3, #0
 800b996:	d104      	bne.n	800b9a2 <USB_EPStartXfer+0xfe0>
 800b998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b99c:	3b01      	subs	r3, #1
 800b99e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b9a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9a6:	881b      	ldrh	r3, [r3, #0]
 800b9a8:	b29a      	uxth	r2, r3
 800b9aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	029b      	lsls	r3, r3, #10
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9c6:	801a      	strh	r2, [r3, #0]
 800b9c8:	e070      	b.n	800baac <USB_EPStartXfer+0x10ea>
 800b9ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	691b      	ldr	r3, [r3, #16]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10c      	bne.n	800b9f4 <USB_EPStartXfer+0x1032>
 800b9da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9de:	881b      	ldrh	r3, [r3, #0]
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9ea:	b29a      	uxth	r2, r3
 800b9ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9f0:	801a      	strh	r2, [r3, #0]
 800b9f2:	e05b      	b.n	800baac <USB_EPStartXfer+0x10ea>
 800b9f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	691b      	ldr	r3, [r3, #16]
 800ba00:	085b      	lsrs	r3, r3, #1
 800ba02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ba06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	691b      	ldr	r3, [r3, #16]
 800ba12:	f003 0301 	and.w	r3, r3, #1
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d004      	beq.n	800ba24 <USB_EPStartXfer+0x1062>
 800ba1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba1e:	3301      	adds	r3, #1
 800ba20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ba24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba28:	881b      	ldrh	r3, [r3, #0]
 800ba2a:	b29a      	uxth	r2, r3
 800ba2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	029b      	lsls	r3, r3, #10
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	4313      	orrs	r3, r2
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba3e:	801a      	strh	r2, [r3, #0]
 800ba40:	e034      	b.n	800baac <USB_EPStartXfer+0x10ea>
 800ba42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	785b      	ldrb	r3, [r3, #1]
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d12c      	bne.n	800baac <USB_EPStartXfer+0x10ea>
 800ba52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	461a      	mov	r2, r3
 800ba72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ba76:	4413      	add	r3, r2
 800ba78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	011a      	lsls	r2, r3, #4
 800ba8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ba8e:	4413      	add	r3, r2
 800ba90:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ba94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ba98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	691b      	ldr	r3, [r3, #16]
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800baaa:	801a      	strh	r2, [r3, #0]
 800baac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bab0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800baba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800babe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	785b      	ldrb	r3, [r3, #1]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f040 809d 	bne.w	800bc06 <USB_EPStartXfer+0x1244>
 800bacc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bad0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bade:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bae8:	b29b      	uxth	r3, r3
 800baea:	461a      	mov	r2, r3
 800baec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800baf0:	4413      	add	r3, r2
 800baf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800baf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bafa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	011a      	lsls	r2, r3, #4
 800bb04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bb08:	4413      	add	r3, r2
 800bb0a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bb0e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bb12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb16:	881b      	ldrh	r3, [r3, #0]
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb1e:	b29a      	uxth	r2, r3
 800bb20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb24:	801a      	strh	r2, [r3, #0]
 800bb26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	2b3e      	cmp	r3, #62	@ 0x3e
 800bb34:	d92b      	bls.n	800bb8e <USB_EPStartXfer+0x11cc>
 800bb36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	691b      	ldr	r3, [r3, #16]
 800bb42:	095b      	lsrs	r3, r3, #5
 800bb44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bb48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	691b      	ldr	r3, [r3, #16]
 800bb54:	f003 031f 	and.w	r3, r3, #31
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d104      	bne.n	800bb66 <USB_EPStartXfer+0x11a4>
 800bb5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb60:	3b01      	subs	r3, #1
 800bb62:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bb66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb6a:	881b      	ldrh	r3, [r3, #0]
 800bb6c:	b29a      	uxth	r2, r3
 800bb6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	029b      	lsls	r3, r3, #10
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb84:	b29a      	uxth	r2, r3
 800bb86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb8a:	801a      	strh	r2, [r3, #0]
 800bb8c:	e069      	b.n	800bc62 <USB_EPStartXfer+0x12a0>
 800bb8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	691b      	ldr	r3, [r3, #16]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10c      	bne.n	800bbb8 <USB_EPStartXfer+0x11f6>
 800bb9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bba2:	881b      	ldrh	r3, [r3, #0]
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbae:	b29a      	uxth	r2, r3
 800bbb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bbb4:	801a      	strh	r2, [r3, #0]
 800bbb6:	e054      	b.n	800bc62 <USB_EPStartXfer+0x12a0>
 800bbb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	691b      	ldr	r3, [r3, #16]
 800bbc4:	085b      	lsrs	r3, r3, #1
 800bbc6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bbca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	f003 0301 	and.w	r3, r3, #1
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d004      	beq.n	800bbe8 <USB_EPStartXfer+0x1226>
 800bbde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bbe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bbec:	881b      	ldrh	r3, [r3, #0]
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	029b      	lsls	r3, r3, #10
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	b29a      	uxth	r2, r3
 800bbfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bc02:	801a      	strh	r2, [r3, #0]
 800bc04:	e02d      	b.n	800bc62 <USB_EPStartXfer+0x12a0>
 800bc06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	785b      	ldrb	r3, [r3, #1]
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d125      	bne.n	800bc62 <USB_EPStartXfer+0x12a0>
 800bc16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	461a      	mov	r2, r3
 800bc28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc2c:	4413      	add	r3, r2
 800bc2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bc32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	011a      	lsls	r2, r3, #4
 800bc40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc44:	4413      	add	r3, r2
 800bc46:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bc4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bc4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	691b      	ldr	r3, [r3, #16]
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc60:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bc62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	69db      	ldr	r3, [r3, #28]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f000 8218 	beq.w	800c0a4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bc74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	4413      	add	r3, r2
 800bc8e:	881b      	ldrh	r3, [r3, #0]
 800bc90:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bc94:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bc98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d005      	beq.n	800bcac <USB_EPStartXfer+0x12ea>
 800bca0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d10d      	bne.n	800bcc8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bcac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bcb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f040 81f5 	bne.w	800c0a4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bcba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bcbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	f040 81ee 	bne.w	800c0a4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800bcc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bccc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	4413      	add	r3, r2
 800bce2:	881b      	ldrh	r3, [r3, #0]
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bcea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcee:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800bcf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	441a      	add	r2, r3
 800bd0c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bd10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	8013      	strh	r3, [r2, #0]
 800bd24:	e1be      	b.n	800c0a4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bd26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	78db      	ldrb	r3, [r3, #3]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	f040 81b4 	bne.w	800c0a0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bd38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	699a      	ldr	r2, [r3, #24]
 800bd44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d917      	bls.n	800bd84 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800bd54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800bd64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	699a      	ldr	r2, [r3, #24]
 800bd70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd74:	1ad2      	subs	r2, r2, r3
 800bd76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	619a      	str	r2, [r3, #24]
 800bd82:	e00e      	b.n	800bda2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800bd84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	699b      	ldr	r3, [r3, #24]
 800bd90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800bd94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bda2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bda6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	785b      	ldrb	r3, [r3, #1]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f040 8085 	bne.w	800bebe <USB_EPStartXfer+0x14fc>
 800bdb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bdc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bdd8:	4413      	add	r3, r2
 800bdda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bdde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bde2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	011a      	lsls	r2, r3, #4
 800bdec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bdf0:	4413      	add	r3, r2
 800bdf2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bdf6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bdfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bdfe:	881b      	ldrh	r3, [r3, #0]
 800be00:	b29b      	uxth	r3, r3
 800be02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be06:	b29a      	uxth	r2, r3
 800be08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be0c:	801a      	strh	r2, [r3, #0]
 800be0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be12:	2b3e      	cmp	r3, #62	@ 0x3e
 800be14:	d923      	bls.n	800be5e <USB_EPStartXfer+0x149c>
 800be16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be1a:	095b      	lsrs	r3, r3, #5
 800be1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800be20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be24:	f003 031f 	and.w	r3, r3, #31
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d104      	bne.n	800be36 <USB_EPStartXfer+0x1474>
 800be2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be30:	3b01      	subs	r3, #1
 800be32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800be36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be3a:	881b      	ldrh	r3, [r3, #0]
 800be3c:	b29a      	uxth	r2, r3
 800be3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be42:	b29b      	uxth	r3, r3
 800be44:	029b      	lsls	r3, r3, #10
 800be46:	b29b      	uxth	r3, r3
 800be48:	4313      	orrs	r3, r2
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be54:	b29a      	uxth	r2, r3
 800be56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be5a:	801a      	strh	r2, [r3, #0]
 800be5c:	e060      	b.n	800bf20 <USB_EPStartXfer+0x155e>
 800be5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be62:	2b00      	cmp	r3, #0
 800be64:	d10c      	bne.n	800be80 <USB_EPStartXfer+0x14be>
 800be66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be6a:	881b      	ldrh	r3, [r3, #0]
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be76:	b29a      	uxth	r2, r3
 800be78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be7c:	801a      	strh	r2, [r3, #0]
 800be7e:	e04f      	b.n	800bf20 <USB_EPStartXfer+0x155e>
 800be80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be84:	085b      	lsrs	r3, r3, #1
 800be86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800be8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be8e:	f003 0301 	and.w	r3, r3, #1
 800be92:	2b00      	cmp	r3, #0
 800be94:	d004      	beq.n	800bea0 <USB_EPStartXfer+0x14de>
 800be96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be9a:	3301      	adds	r3, #1
 800be9c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bea0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bea4:	881b      	ldrh	r3, [r3, #0]
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800beac:	b29b      	uxth	r3, r3
 800beae:	029b      	lsls	r3, r3, #10
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	4313      	orrs	r3, r2
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800beba:	801a      	strh	r2, [r3, #0]
 800bebc:	e030      	b.n	800bf20 <USB_EPStartXfer+0x155e>
 800bebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	785b      	ldrb	r3, [r3, #1]
 800beca:	2b01      	cmp	r3, #1
 800becc:	d128      	bne.n	800bf20 <USB_EPStartXfer+0x155e>
 800bece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bedc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bee0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800beea:	b29b      	uxth	r3, r3
 800beec:	461a      	mov	r2, r3
 800beee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bef2:	4413      	add	r3, r2
 800bef4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800befc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	011a      	lsls	r2, r3, #4
 800bf06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bf0a:	4413      	add	r3, r2
 800bf0c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bf10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bf14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf18:	b29a      	uxth	r2, r3
 800bf1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bf1e:	801a      	strh	r2, [r3, #0]
 800bf20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bf2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	785b      	ldrb	r3, [r3, #1]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f040 8085 	bne.w	800c04a <USB_EPStartXfer+0x1688>
 800bf40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bf4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	461a      	mov	r2, r3
 800bf60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bf64:	4413      	add	r3, r2
 800bf66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bf6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	011a      	lsls	r2, r3, #4
 800bf78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bf7c:	4413      	add	r3, r2
 800bf7e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bf82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bf86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bf8a:	881b      	ldrh	r3, [r3, #0]
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf92:	b29a      	uxth	r2, r3
 800bf94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bf98:	801a      	strh	r2, [r3, #0]
 800bf9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf9e:	2b3e      	cmp	r3, #62	@ 0x3e
 800bfa0:	d923      	bls.n	800bfea <USB_EPStartXfer+0x1628>
 800bfa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfa6:	095b      	lsrs	r3, r3, #5
 800bfa8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bfac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfb0:	f003 031f 	and.w	r3, r3, #31
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d104      	bne.n	800bfc2 <USB_EPStartXfer+0x1600>
 800bfb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bfc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bfc6:	881b      	ldrh	r3, [r3, #0]
 800bfc8:	b29a      	uxth	r2, r3
 800bfca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	029b      	lsls	r3, r3, #10
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bfe6:	801a      	strh	r2, [r3, #0]
 800bfe8:	e05c      	b.n	800c0a4 <USB_EPStartXfer+0x16e2>
 800bfea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d10c      	bne.n	800c00c <USB_EPStartXfer+0x164a>
 800bff2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bff6:	881b      	ldrh	r3, [r3, #0]
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c002:	b29a      	uxth	r2, r3
 800c004:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c008:	801a      	strh	r2, [r3, #0]
 800c00a:	e04b      	b.n	800c0a4 <USB_EPStartXfer+0x16e2>
 800c00c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c010:	085b      	lsrs	r3, r3, #1
 800c012:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c01a:	f003 0301 	and.w	r3, r3, #1
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d004      	beq.n	800c02c <USB_EPStartXfer+0x166a>
 800c022:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c026:	3301      	adds	r3, #1
 800c028:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c02c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c030:	881b      	ldrh	r3, [r3, #0]
 800c032:	b29a      	uxth	r2, r3
 800c034:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c038:	b29b      	uxth	r3, r3
 800c03a:	029b      	lsls	r3, r3, #10
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	4313      	orrs	r3, r2
 800c040:	b29a      	uxth	r2, r3
 800c042:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c046:	801a      	strh	r2, [r3, #0]
 800c048:	e02c      	b.n	800c0a4 <USB_EPStartXfer+0x16e2>
 800c04a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c04e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	785b      	ldrb	r3, [r3, #1]
 800c056:	2b01      	cmp	r3, #1
 800c058:	d124      	bne.n	800c0a4 <USB_EPStartXfer+0x16e2>
 800c05a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c05e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c068:	b29b      	uxth	r3, r3
 800c06a:	461a      	mov	r2, r3
 800c06c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c070:	4413      	add	r3, r2
 800c072:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c07a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	011a      	lsls	r2, r3, #4
 800c084:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c088:	4413      	add	r3, r2
 800c08a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800c08e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c096:	b29a      	uxth	r2, r3
 800c098:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c09c:	801a      	strh	r2, [r3, #0]
 800c09e:	e001      	b.n	800c0a4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	e03a      	b.n	800c11a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c0a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	4413      	add	r3, r2
 800c0be:	881b      	ldrh	r3, [r3, #0]
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c0c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0ca:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c0ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c0d2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c0d6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c0da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c0de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c0e2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c0e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	441a      	add	r2, r3
 800c100:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c10c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c114:	b29b      	uxth	r3, r3
 800c116:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c118:	2300      	movs	r3, #0
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c124:	b480      	push	{r7}
 800c126:	b085      	sub	sp, #20
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	785b      	ldrb	r3, [r3, #1]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d020      	beq.n	800c178 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c136:	687a      	ldr	r2, [r7, #4]
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	4413      	add	r3, r2
 800c140:	881b      	ldrh	r3, [r3, #0]
 800c142:	b29b      	uxth	r3, r3
 800c144:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c14c:	81bb      	strh	r3, [r7, #12]
 800c14e:	89bb      	ldrh	r3, [r7, #12]
 800c150:	f083 0310 	eor.w	r3, r3, #16
 800c154:	81bb      	strh	r3, [r7, #12]
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	441a      	add	r2, r3
 800c160:	89bb      	ldrh	r3, [r7, #12]
 800c162:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c166:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c16a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c16e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c172:	b29b      	uxth	r3, r3
 800c174:	8013      	strh	r3, [r2, #0]
 800c176:	e01f      	b.n	800c1b8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	4413      	add	r3, r2
 800c182:	881b      	ldrh	r3, [r3, #0]
 800c184:	b29b      	uxth	r3, r3
 800c186:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c18a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c18e:	81fb      	strh	r3, [r7, #14]
 800c190:	89fb      	ldrh	r3, [r7, #14]
 800c192:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c196:	81fb      	strh	r3, [r7, #14]
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	441a      	add	r2, r3
 800c1a2:	89fb      	ldrh	r3, [r7, #14]
 800c1a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3714      	adds	r7, #20
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr

0800c1c6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c1c6:	b480      	push	{r7}
 800c1c8:	b087      	sub	sp, #28
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
 800c1ce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	7b1b      	ldrb	r3, [r3, #12]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f040 809d 	bne.w	800c314 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	785b      	ldrb	r3, [r3, #1]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d04c      	beq.n	800c27c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	4413      	add	r3, r2
 800c1ec:	881b      	ldrh	r3, [r3, #0]
 800c1ee:	823b      	strh	r3, [r7, #16]
 800c1f0:	8a3b      	ldrh	r3, [r7, #16]
 800c1f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d01b      	beq.n	800c232 <USB_EPClearStall+0x6c>
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	4413      	add	r3, r2
 800c204:	881b      	ldrh	r3, [r3, #0]
 800c206:	b29b      	uxth	r3, r3
 800c208:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c20c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c210:	81fb      	strh	r3, [r7, #14]
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	441a      	add	r2, r3
 800c21c:	89fb      	ldrh	r3, [r7, #14]
 800c21e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c222:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c22a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c22e:	b29b      	uxth	r3, r3
 800c230:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	78db      	ldrb	r3, [r3, #3]
 800c236:	2b01      	cmp	r3, #1
 800c238:	d06c      	beq.n	800c314 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	4413      	add	r3, r2
 800c244:	881b      	ldrh	r3, [r3, #0]
 800c246:	b29b      	uxth	r3, r3
 800c248:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c24c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c250:	81bb      	strh	r3, [r7, #12]
 800c252:	89bb      	ldrh	r3, [r7, #12]
 800c254:	f083 0320 	eor.w	r3, r3, #32
 800c258:	81bb      	strh	r3, [r7, #12]
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	441a      	add	r2, r3
 800c264:	89bb      	ldrh	r3, [r7, #12]
 800c266:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c26a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c26e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c276:	b29b      	uxth	r3, r3
 800c278:	8013      	strh	r3, [r2, #0]
 800c27a:	e04b      	b.n	800c314 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	4413      	add	r3, r2
 800c286:	881b      	ldrh	r3, [r3, #0]
 800c288:	82fb      	strh	r3, [r7, #22]
 800c28a:	8afb      	ldrh	r3, [r7, #22]
 800c28c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c290:	2b00      	cmp	r3, #0
 800c292:	d01b      	beq.n	800c2cc <USB_EPClearStall+0x106>
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	4413      	add	r3, r2
 800c29e:	881b      	ldrh	r3, [r3, #0]
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2aa:	82bb      	strh	r3, [r7, #20]
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	441a      	add	r2, r3
 800c2b6:	8abb      	ldrh	r3, [r7, #20]
 800c2b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c2c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	4413      	add	r3, r2
 800c2d6:	881b      	ldrh	r3, [r3, #0]
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c2de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2e2:	827b      	strh	r3, [r7, #18]
 800c2e4:	8a7b      	ldrh	r3, [r7, #18]
 800c2e6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c2ea:	827b      	strh	r3, [r7, #18]
 800c2ec:	8a7b      	ldrh	r3, [r7, #18]
 800c2ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c2f2:	827b      	strh	r3, [r7, #18]
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	009b      	lsls	r3, r3, #2
 800c2fc:	441a      	add	r2, r3
 800c2fe:	8a7b      	ldrh	r3, [r7, #18]
 800c300:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c304:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c308:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c30c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c310:	b29b      	uxth	r3, r3
 800c312:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c314:	2300      	movs	r3, #0
}
 800c316:	4618      	mov	r0, r3
 800c318:	371c      	adds	r7, #28
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr

0800c322 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c322:	b480      	push	{r7}
 800c324:	b083      	sub	sp, #12
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
 800c32a:	460b      	mov	r3, r1
 800c32c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c32e:	78fb      	ldrb	r3, [r7, #3]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d103      	bne.n	800c33c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2280      	movs	r2, #128	@ 0x80
 800c338:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800c33c:	2300      	movs	r3, #0
}
 800c33e:	4618      	mov	r0, r3
 800c340:	370c      	adds	r7, #12
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr

0800c34a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c34a:	b480      	push	{r7}
 800c34c:	b083      	sub	sp, #12
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c352:	2300      	movs	r3, #0
}
 800c354:	4618      	mov	r0, r3
 800c356:	370c      	adds	r7, #12
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c360:	b480      	push	{r7}
 800c362:	b085      	sub	sp, #20
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c36e:	b29b      	uxth	r3, r3
 800c370:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c372:	68fb      	ldr	r3, [r7, #12]
}
 800c374:	4618      	mov	r0, r3
 800c376:	3714      	adds	r7, #20
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr

0800c380 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c380:	b480      	push	{r7}
 800c382:	b08b      	sub	sp, #44	@ 0x2c
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	4611      	mov	r1, r2
 800c38c:	461a      	mov	r2, r3
 800c38e:	460b      	mov	r3, r1
 800c390:	80fb      	strh	r3, [r7, #6]
 800c392:	4613      	mov	r3, r2
 800c394:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c396:	88bb      	ldrh	r3, [r7, #4]
 800c398:	3301      	adds	r3, #1
 800c39a:	085b      	lsrs	r3, r3, #1
 800c39c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c3a6:	88fb      	ldrh	r3, [r7, #6]
 800c3a8:	005a      	lsls	r2, r3, #1
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c3b2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c3b4:	69bb      	ldr	r3, [r7, #24]
 800c3b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3b8:	e01e      	b.n	800c3f8 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	021b      	lsls	r3, r3, #8
 800c3c8:	b21a      	sxth	r2, r3
 800c3ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	b21b      	sxth	r3, r3
 800c3d2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c3d4:	6a3b      	ldr	r3, [r7, #32]
 800c3d6:	8a7a      	ldrh	r2, [r7, #18]
 800c3d8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c3da:	6a3b      	ldr	r3, [r7, #32]
 800c3dc:	3302      	adds	r3, #2
 800c3de:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c3e0:	6a3b      	ldr	r3, [r7, #32]
 800c3e2:	3302      	adds	r3, #2
 800c3e4:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c3ec:	69fb      	ldr	r3, [r7, #28]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1dd      	bne.n	800c3ba <USB_WritePMA+0x3a>
  }
}
 800c3fe:	bf00      	nop
 800c400:	bf00      	nop
 800c402:	372c      	adds	r7, #44	@ 0x2c
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b08b      	sub	sp, #44	@ 0x2c
 800c410:	af00      	add	r7, sp, #0
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	4611      	mov	r1, r2
 800c418:	461a      	mov	r2, r3
 800c41a:	460b      	mov	r3, r1
 800c41c:	80fb      	strh	r3, [r7, #6]
 800c41e:	4613      	mov	r3, r2
 800c420:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c422:	88bb      	ldrh	r3, [r7, #4]
 800c424:	085b      	lsrs	r3, r3, #1
 800c426:	b29b      	uxth	r3, r3
 800c428:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c432:	88fb      	ldrh	r3, [r7, #6]
 800c434:	005a      	lsls	r2, r3, #1
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	4413      	add	r3, r2
 800c43a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c43e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c440:	69bb      	ldr	r3, [r7, #24]
 800c442:	627b      	str	r3, [r7, #36]	@ 0x24
 800c444:	e01b      	b.n	800c47e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c446:	6a3b      	ldr	r3, [r7, #32]
 800c448:	881b      	ldrh	r3, [r3, #0]
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c44e:	6a3b      	ldr	r3, [r7, #32]
 800c450:	3302      	adds	r3, #2
 800c452:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	b2da      	uxtb	r2, r3
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	3301      	adds	r3, #1
 800c460:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	0a1b      	lsrs	r3, r3, #8
 800c466:	b2da      	uxtb	r2, r3
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	3301      	adds	r3, #1
 800c470:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c472:	6a3b      	ldr	r3, [r7, #32]
 800c474:	3302      	adds	r3, #2
 800c476:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800c478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c47a:	3b01      	subs	r3, #1
 800c47c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c480:	2b00      	cmp	r3, #0
 800c482:	d1e0      	bne.n	800c446 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c484:	88bb      	ldrh	r3, [r7, #4]
 800c486:	f003 0301 	and.w	r3, r3, #1
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d007      	beq.n	800c4a0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800c490:	6a3b      	ldr	r3, [r7, #32]
 800c492:	881b      	ldrh	r3, [r3, #0]
 800c494:	b29b      	uxth	r3, r3
 800c496:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	b2da      	uxtb	r2, r3
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	701a      	strb	r2, [r3, #0]
  }
}
 800c4a0:	bf00      	nop
 800c4a2:	372c      	adds	r7, #44	@ 0x2c
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr

0800c4ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	7c1b      	ldrb	r3, [r3, #16]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d115      	bne.n	800c4f0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c4c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c4c8:	2202      	movs	r2, #2
 800c4ca:	2181      	movs	r1, #129	@ 0x81
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f001 fe66 	bl	800e19e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c4d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c4dc:	2202      	movs	r2, #2
 800c4de:	2101      	movs	r1, #1
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f001 fe5c 	bl	800e19e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800c4ee:	e012      	b.n	800c516 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c4f0:	2340      	movs	r3, #64	@ 0x40
 800c4f2:	2202      	movs	r2, #2
 800c4f4:	2181      	movs	r1, #129	@ 0x81
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f001 fe51 	bl	800e19e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2201      	movs	r2, #1
 800c500:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c502:	2340      	movs	r3, #64	@ 0x40
 800c504:	2202      	movs	r2, #2
 800c506:	2101      	movs	r1, #1
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f001 fe48 	bl	800e19e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2201      	movs	r2, #1
 800c512:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c516:	2308      	movs	r3, #8
 800c518:	2203      	movs	r2, #3
 800c51a:	2182      	movs	r1, #130	@ 0x82
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f001 fe3e 	bl	800e19e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2201      	movs	r2, #1
 800c526:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c528:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c52c:	f001 ff60 	bl	800e3f0 <USBD_static_malloc>
 800c530:	4602      	mov	r2, r0
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d102      	bne.n	800c548 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800c542:	2301      	movs	r3, #1
 800c544:	73fb      	strb	r3, [r7, #15]
 800c546:	e026      	b.n	800c596 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c54e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	2200      	movs	r2, #0
 800c55e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	2200      	movs	r2, #0
 800c566:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	7c1b      	ldrb	r3, [r3, #16]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d109      	bne.n	800c586 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c578:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c57c:	2101      	movs	r1, #1
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f001 feff 	bl	800e382 <USBD_LL_PrepareReceive>
 800c584:	e007      	b.n	800c596 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c58c:	2340      	movs	r3, #64	@ 0x40
 800c58e:	2101      	movs	r1, #1
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f001 fef6 	bl	800e382 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800c596:	7bfb      	ldrb	r3, [r7, #15]
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3710      	adds	r7, #16
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c5b0:	2181      	movs	r1, #129	@ 0x81
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f001 fe19 	bl	800e1ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c5be:	2101      	movs	r1, #1
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f001 fe12 	bl	800e1ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c5ce:	2182      	movs	r1, #130	@ 0x82
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f001 fe0a 	bl	800e1ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d00e      	beq.n	800c604 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f001 ff08 	bl	800e40c <USBD_static_free>
    pdev->pClassData = NULL;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800c604:	7bfb      	ldrb	r3, [r7, #15]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c60e:	b580      	push	{r7, lr}
 800c610:	b086      	sub	sp, #24
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
 800c616:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c61e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c620:	2300      	movs	r3, #0
 800c622:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c624:	2300      	movs	r3, #0
 800c626:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c628:	2300      	movs	r3, #0
 800c62a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c634:	2b00      	cmp	r3, #0
 800c636:	d039      	beq.n	800c6ac <USBD_CDC_Setup+0x9e>
 800c638:	2b20      	cmp	r3, #32
 800c63a:	d17f      	bne.n	800c73c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	88db      	ldrh	r3, [r3, #6]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d029      	beq.n	800c698 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	b25b      	sxtb	r3, r3
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	da11      	bge.n	800c672 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c654:	689b      	ldr	r3, [r3, #8]
 800c656:	683a      	ldr	r2, [r7, #0]
 800c658:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800c65a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c65c:	683a      	ldr	r2, [r7, #0]
 800c65e:	88d2      	ldrh	r2, [r2, #6]
 800c660:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c662:	6939      	ldr	r1, [r7, #16]
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	88db      	ldrh	r3, [r3, #6]
 800c668:	461a      	mov	r2, r3
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f001 f9e0 	bl	800da30 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800c670:	e06b      	b.n	800c74a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	785a      	ldrb	r2, [r3, #1]
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	88db      	ldrh	r3, [r3, #6]
 800c680:	b2da      	uxtb	r2, r3
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c688:	6939      	ldr	r1, [r7, #16]
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	88db      	ldrh	r3, [r3, #6]
 800c68e:	461a      	mov	r2, r3
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f001 f9fb 	bl	800da8c <USBD_CtlPrepareRx>
      break;
 800c696:	e058      	b.n	800c74a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c69e:	689b      	ldr	r3, [r3, #8]
 800c6a0:	683a      	ldr	r2, [r7, #0]
 800c6a2:	7850      	ldrb	r0, [r2, #1]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	6839      	ldr	r1, [r7, #0]
 800c6a8:	4798      	blx	r3
      break;
 800c6aa:	e04e      	b.n	800c74a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	785b      	ldrb	r3, [r3, #1]
 800c6b0:	2b0b      	cmp	r3, #11
 800c6b2:	d02e      	beq.n	800c712 <USBD_CDC_Setup+0x104>
 800c6b4:	2b0b      	cmp	r3, #11
 800c6b6:	dc38      	bgt.n	800c72a <USBD_CDC_Setup+0x11c>
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d002      	beq.n	800c6c2 <USBD_CDC_Setup+0xb4>
 800c6bc:	2b0a      	cmp	r3, #10
 800c6be:	d014      	beq.n	800c6ea <USBD_CDC_Setup+0xdc>
 800c6c0:	e033      	b.n	800c72a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6c8:	2b03      	cmp	r3, #3
 800c6ca:	d107      	bne.n	800c6dc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800c6cc:	f107 030c 	add.w	r3, r7, #12
 800c6d0:	2202      	movs	r2, #2
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f001 f9ab 	bl	800da30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c6da:	e02e      	b.n	800c73a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c6dc:	6839      	ldr	r1, [r7, #0]
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f001 f93b 	bl	800d95a <USBD_CtlError>
            ret = USBD_FAIL;
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	75fb      	strb	r3, [r7, #23]
          break;
 800c6e8:	e027      	b.n	800c73a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6f0:	2b03      	cmp	r3, #3
 800c6f2:	d107      	bne.n	800c704 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800c6f4:	f107 030f 	add.w	r3, r7, #15
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f001 f997 	bl	800da30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c702:	e01a      	b.n	800c73a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c704:	6839      	ldr	r1, [r7, #0]
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f001 f927 	bl	800d95a <USBD_CtlError>
            ret = USBD_FAIL;
 800c70c:	2302      	movs	r3, #2
 800c70e:	75fb      	strb	r3, [r7, #23]
          break;
 800c710:	e013      	b.n	800c73a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c718:	2b03      	cmp	r3, #3
 800c71a:	d00d      	beq.n	800c738 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800c71c:	6839      	ldr	r1, [r7, #0]
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f001 f91b 	bl	800d95a <USBD_CtlError>
            ret = USBD_FAIL;
 800c724:	2302      	movs	r3, #2
 800c726:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c728:	e006      	b.n	800c738 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800c72a:	6839      	ldr	r1, [r7, #0]
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f001 f914 	bl	800d95a <USBD_CtlError>
          ret = USBD_FAIL;
 800c732:	2302      	movs	r3, #2
 800c734:	75fb      	strb	r3, [r7, #23]
          break;
 800c736:	e000      	b.n	800c73a <USBD_CDC_Setup+0x12c>
          break;
 800c738:	bf00      	nop
      }
      break;
 800c73a:	e006      	b.n	800c74a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c73c:	6839      	ldr	r1, [r7, #0]
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f001 f90b 	bl	800d95a <USBD_CtlError>
      ret = USBD_FAIL;
 800c744:	2302      	movs	r3, #2
 800c746:	75fb      	strb	r3, [r7, #23]
      break;
 800c748:	bf00      	nop
  }

  return ret;
 800c74a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3718      	adds	r7, #24
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	460b      	mov	r3, r1
 800c75e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c766:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c76e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c776:	2b00      	cmp	r3, #0
 800c778:	d03a      	beq.n	800c7f0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c77a:	78fa      	ldrb	r2, [r7, #3]
 800c77c:	6879      	ldr	r1, [r7, #4]
 800c77e:	4613      	mov	r3, r2
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	4413      	add	r3, r2
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	440b      	add	r3, r1
 800c788:	331c      	adds	r3, #28
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d029      	beq.n	800c7e4 <USBD_CDC_DataIn+0x90>
 800c790:	78fa      	ldrb	r2, [r7, #3]
 800c792:	6879      	ldr	r1, [r7, #4]
 800c794:	4613      	mov	r3, r2
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	4413      	add	r3, r2
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	440b      	add	r3, r1
 800c79e:	331c      	adds	r3, #28
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	78f9      	ldrb	r1, [r7, #3]
 800c7a4:	68b8      	ldr	r0, [r7, #8]
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	440b      	add	r3, r1
 800c7ac:	00db      	lsls	r3, r3, #3
 800c7ae:	4403      	add	r3, r0
 800c7b0:	3338      	adds	r3, #56	@ 0x38
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	fbb2 f1f3 	udiv	r1, r2, r3
 800c7b8:	fb01 f303 	mul.w	r3, r1, r3
 800c7bc:	1ad3      	subs	r3, r2, r3
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d110      	bne.n	800c7e4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c7c2:	78fa      	ldrb	r2, [r7, #3]
 800c7c4:	6879      	ldr	r1, [r7, #4]
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	4413      	add	r3, r2
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	440b      	add	r3, r1
 800c7d0:	331c      	adds	r3, #28
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c7d6:	78f9      	ldrb	r1, [r7, #3]
 800c7d8:	2300      	movs	r3, #0
 800c7da:	2200      	movs	r2, #0
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f001 fdad 	bl	800e33c <USBD_LL_Transmit>
 800c7e2:	e003      	b.n	800c7ec <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	e000      	b.n	800c7f2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c7f0:	2302      	movs	r3, #2
  }
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3710      	adds	r7, #16
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b084      	sub	sp, #16
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
 800c802:	460b      	mov	r3, r1
 800c804:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c80c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c80e:	78fb      	ldrb	r3, [r7, #3]
 800c810:	4619      	mov	r1, r3
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f001 fdd8 	bl	800e3c8 <USBD_LL_GetRxDataSize>
 800c818:	4602      	mov	r2, r0
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00d      	beq.n	800c846 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c83e:	4611      	mov	r1, r2
 800c840:	4798      	blx	r3

    return USBD_OK;
 800c842:	2300      	movs	r3, #0
 800c844:	e000      	b.n	800c848 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c846:	2302      	movs	r3, #2
  }
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3710      	adds	r7, #16
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c85e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c866:	2b00      	cmp	r3, #0
 800c868:	d014      	beq.n	800c894 <USBD_CDC_EP0_RxReady+0x44>
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c870:	2bff      	cmp	r3, #255	@ 0xff
 800c872:	d00f      	beq.n	800c894 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c87a:	689b      	ldr	r3, [r3, #8]
 800c87c:	68fa      	ldr	r2, [r7, #12]
 800c87e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800c882:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c88a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	22ff      	movs	r2, #255	@ 0xff
 800c890:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800c894:	2300      	movs	r3, #0
}
 800c896:	4618      	mov	r0, r3
 800c898:	3710      	adds	r7, #16
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
	...

0800c8a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2243      	movs	r2, #67	@ 0x43
 800c8ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c8ae:	4b03      	ldr	r3, [pc, #12]	@ (800c8bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	370c      	adds	r7, #12
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr
 800c8bc:	200000ac 	.word	0x200000ac

0800c8c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b083      	sub	sp, #12
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2243      	movs	r2, #67	@ 0x43
 800c8cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c8ce:	4b03      	ldr	r3, [pc, #12]	@ (800c8dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr
 800c8dc:	20000068 	.word	0x20000068

0800c8e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2243      	movs	r2, #67	@ 0x43
 800c8ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c8ee:	4b03      	ldr	r3, [pc, #12]	@ (800c8fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr
 800c8fc:	200000f0 	.word	0x200000f0

0800c900 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c900:	b480      	push	{r7}
 800c902:	b083      	sub	sp, #12
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	220a      	movs	r2, #10
 800c90c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c90e:	4b03      	ldr	r3, [pc, #12]	@ (800c91c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c910:	4618      	mov	r0, r3
 800c912:	370c      	adds	r7, #12
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr
 800c91c:	20000024 	.word	0x20000024

0800c920 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800c920:	b480      	push	{r7}
 800c922:	b085      	sub	sp, #20
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c92a:	2302      	movs	r3, #2
 800c92c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d005      	beq.n	800c940 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	683a      	ldr	r2, [r7, #0]
 800c938:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800c93c:	2300      	movs	r3, #0
 800c93e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c940:	7bfb      	ldrb	r3, [r7, #15]
}
 800c942:	4618      	mov	r0, r3
 800c944:	3714      	adds	r7, #20
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr

0800c94e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800c94e:	b480      	push	{r7}
 800c950:	b087      	sub	sp, #28
 800c952:	af00      	add	r7, sp, #0
 800c954:	60f8      	str	r0, [r7, #12]
 800c956:	60b9      	str	r1, [r7, #8]
 800c958:	4613      	mov	r3, r2
 800c95a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c962:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	68ba      	ldr	r2, [r7, #8]
 800c968:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c96c:	88fa      	ldrh	r2, [r7, #6]
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800c974:	2300      	movs	r3, #0
}
 800c976:	4618      	mov	r0, r3
 800c978:	371c      	adds	r7, #28
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800c982:	b480      	push	{r7}
 800c984:	b085      	sub	sp, #20
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
 800c98a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c992:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	683a      	ldr	r2, [r7, #0]
 800c998:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800c99c:	2300      	movs	r3, #0
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3714      	adds	r7, #20
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr

0800c9aa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c9aa:	b580      	push	{r7, lr}
 800c9ac:	b084      	sub	sp, #16
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9b8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d017      	beq.n	800c9f4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	7c1b      	ldrb	r3, [r3, #16]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d109      	bne.n	800c9e0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c9d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c9d6:	2101      	movs	r1, #1
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f001 fcd2 	bl	800e382 <USBD_LL_PrepareReceive>
 800c9de:	e007      	b.n	800c9f0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c9e6:	2340      	movs	r3, #64	@ 0x40
 800c9e8:	2101      	movs	r1, #1
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f001 fcc9 	bl	800e382 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	e000      	b.n	800c9f6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c9f4:	2302      	movs	r3, #2
  }
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b084      	sub	sp, #16
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	60f8      	str	r0, [r7, #12]
 800ca06:	60b9      	str	r1, [r7, #8]
 800ca08:	4613      	mov	r3, r2
 800ca0a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d101      	bne.n	800ca16 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ca12:	2302      	movs	r3, #2
 800ca14:	e01a      	b.n	800ca4c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d003      	beq.n	800ca28 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d003      	beq.n	800ca36 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2201      	movs	r2, #1
 800ca3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	79fa      	ldrb	r2, [r7, #7]
 800ca42:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ca44:	68f8      	ldr	r0, [r7, #12]
 800ca46:	f001 fb35 	bl	800e0b4 <USBD_LL_Init>

  return USBD_OK;
 800ca4a:	2300      	movs	r3, #0
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3710      	adds	r7, #16
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d006      	beq.n	800ca76 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	683a      	ldr	r2, [r7, #0]
 800ca6c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800ca70:	2300      	movs	r3, #0
 800ca72:	73fb      	strb	r3, [r7, #15]
 800ca74:	e001      	b.n	800ca7a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ca76:	2302      	movs	r3, #2
 800ca78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ca7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3714      	adds	r7, #20
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f001 fb69 	bl	800e168 <USBD_LL_Start>

  return USBD_OK;
 800ca96:	2300      	movs	r3, #0
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b083      	sub	sp, #12
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800caa8:	2300      	movs	r3, #0
}
 800caaa:	4618      	mov	r0, r3
 800caac:	370c      	adds	r7, #12
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr

0800cab6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cab6:	b580      	push	{r7, lr}
 800cab8:	b084      	sub	sp, #16
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
 800cabe:	460b      	mov	r3, r1
 800cac0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cac2:	2302      	movs	r3, #2
 800cac4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d00c      	beq.n	800caea <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	78fa      	ldrb	r2, [r7, #3]
 800cada:	4611      	mov	r1, r2
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	4798      	blx	r3
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d101      	bne.n	800caea <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800cae6:	2300      	movs	r3, #0
 800cae8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800caea:	7bfb      	ldrb	r3, [r7, #15]
}
 800caec:	4618      	mov	r0, r3
 800caee:	3710      	adds	r7, #16
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	460b      	mov	r3, r1
 800cafe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb06:	685b      	ldr	r3, [r3, #4]
 800cb08:	78fa      	ldrb	r2, [r7, #3]
 800cb0a:	4611      	mov	r1, r2
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	4798      	blx	r3

  return USBD_OK;
 800cb10:	2300      	movs	r3, #0
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b082      	sub	sp, #8
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
 800cb22:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800cb2a:	6839      	ldr	r1, [r7, #0]
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f000 feda 	bl	800d8e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2201      	movs	r2, #1
 800cb36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cb40:	461a      	mov	r2, r3
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800cb4e:	f003 031f 	and.w	r3, r3, #31
 800cb52:	2b02      	cmp	r3, #2
 800cb54:	d016      	beq.n	800cb84 <USBD_LL_SetupStage+0x6a>
 800cb56:	2b02      	cmp	r3, #2
 800cb58:	d81c      	bhi.n	800cb94 <USBD_LL_SetupStage+0x7a>
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d002      	beq.n	800cb64 <USBD_LL_SetupStage+0x4a>
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d008      	beq.n	800cb74 <USBD_LL_SetupStage+0x5a>
 800cb62:	e017      	b.n	800cb94 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 f9cd 	bl	800cf0c <USBD_StdDevReq>
      break;
 800cb72:	e01a      	b.n	800cbaa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 fa2f 	bl	800cfe0 <USBD_StdItfReq>
      break;
 800cb82:	e012      	b.n	800cbaa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 fa6f 	bl	800d070 <USBD_StdEPReq>
      break;
 800cb92:	e00a      	b.n	800cbaa <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800cb9a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	4619      	mov	r1, r3
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f001 fb40 	bl	800e228 <USBD_LL_StallEP>
      break;
 800cba8:	bf00      	nop
  }

  return USBD_OK;
 800cbaa:	2300      	movs	r3, #0
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b086      	sub	sp, #24
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	60f8      	str	r0, [r7, #12]
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	607a      	str	r2, [r7, #4]
 800cbc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800cbc2:	7afb      	ldrb	r3, [r7, #11]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d14b      	bne.n	800cc60 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800cbce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cbd6:	2b03      	cmp	r3, #3
 800cbd8:	d134      	bne.n	800cc44 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	68da      	ldr	r2, [r3, #12]
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	691b      	ldr	r3, [r3, #16]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d919      	bls.n	800cc1a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	68da      	ldr	r2, [r3, #12]
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	691b      	ldr	r3, [r3, #16]
 800cbee:	1ad2      	subs	r2, r2, r3
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	68da      	ldr	r2, [r3, #12]
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d203      	bcs.n	800cc08 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	e002      	b.n	800cc0e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800cc0c:	b29b      	uxth	r3, r3
 800cc0e:	461a      	mov	r2, r3
 800cc10:	6879      	ldr	r1, [r7, #4]
 800cc12:	68f8      	ldr	r0, [r7, #12]
 800cc14:	f000 ff58 	bl	800dac8 <USBD_CtlContinueRx>
 800cc18:	e038      	b.n	800cc8c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc20:	691b      	ldr	r3, [r3, #16]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d00a      	beq.n	800cc3c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cc2c:	2b03      	cmp	r3, #3
 800cc2e:	d105      	bne.n	800cc3c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc36:	691b      	ldr	r3, [r3, #16]
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	f000 ff55 	bl	800daec <USBD_CtlSendStatus>
 800cc42:	e023      	b.n	800cc8c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cc4a:	2b05      	cmp	r3, #5
 800cc4c:	d11e      	bne.n	800cc8c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2200      	movs	r2, #0
 800cc52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800cc56:	2100      	movs	r1, #0
 800cc58:	68f8      	ldr	r0, [r7, #12]
 800cc5a:	f001 fae5 	bl	800e228 <USBD_LL_StallEP>
 800cc5e:	e015      	b.n	800cc8c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc66:	699b      	ldr	r3, [r3, #24]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d00d      	beq.n	800cc88 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800cc72:	2b03      	cmp	r3, #3
 800cc74:	d108      	bne.n	800cc88 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc7c:	699b      	ldr	r3, [r3, #24]
 800cc7e:	7afa      	ldrb	r2, [r7, #11]
 800cc80:	4611      	mov	r1, r2
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	4798      	blx	r3
 800cc86:	e001      	b.n	800cc8c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cc88:	2302      	movs	r3, #2
 800cc8a:	e000      	b.n	800cc8e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3718      	adds	r7, #24
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b086      	sub	sp, #24
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	60f8      	str	r0, [r7, #12]
 800cc9e:	460b      	mov	r3, r1
 800cca0:	607a      	str	r2, [r7, #4]
 800cca2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800cca4:	7afb      	ldrb	r3, [r7, #11]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d17f      	bne.n	800cdaa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	3314      	adds	r3, #20
 800ccae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ccb6:	2b02      	cmp	r3, #2
 800ccb8:	d15c      	bne.n	800cd74 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	68da      	ldr	r2, [r3, #12]
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	691b      	ldr	r3, [r3, #16]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d915      	bls.n	800ccf2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	68da      	ldr	r2, [r3, #12]
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	691b      	ldr	r3, [r3, #16]
 800ccce:	1ad2      	subs	r2, r2, r3
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	b29b      	uxth	r3, r3
 800ccda:	461a      	mov	r2, r3
 800ccdc:	6879      	ldr	r1, [r7, #4]
 800ccde:	68f8      	ldr	r0, [r7, #12]
 800cce0:	f000 fec2 	bl	800da68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cce4:	2300      	movs	r3, #0
 800cce6:	2200      	movs	r2, #0
 800cce8:	2100      	movs	r1, #0
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	f001 fb49 	bl	800e382 <USBD_LL_PrepareReceive>
 800ccf0:	e04e      	b.n	800cd90 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	689b      	ldr	r3, [r3, #8]
 800ccf6:	697a      	ldr	r2, [r7, #20]
 800ccf8:	6912      	ldr	r2, [r2, #16]
 800ccfa:	fbb3 f1f2 	udiv	r1, r3, r2
 800ccfe:	fb01 f202 	mul.w	r2, r1, r2
 800cd02:	1a9b      	subs	r3, r3, r2
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d11c      	bne.n	800cd42 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	689a      	ldr	r2, [r3, #8]
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d316      	bcc.n	800cd42 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	689a      	ldr	r2, [r3, #8]
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d20f      	bcs.n	800cd42 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cd22:	2200      	movs	r2, #0
 800cd24:	2100      	movs	r1, #0
 800cd26:	68f8      	ldr	r0, [r7, #12]
 800cd28:	f000 fe9e 	bl	800da68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd34:	2300      	movs	r3, #0
 800cd36:	2200      	movs	r2, #0
 800cd38:	2100      	movs	r1, #0
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	f001 fb21 	bl	800e382 <USBD_LL_PrepareReceive>
 800cd40:	e026      	b.n	800cd90 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d00a      	beq.n	800cd64 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800cd54:	2b03      	cmp	r3, #3
 800cd56:	d105      	bne.n	800cd64 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800cd64:	2180      	movs	r1, #128	@ 0x80
 800cd66:	68f8      	ldr	r0, [r7, #12]
 800cd68:	f001 fa5e 	bl	800e228 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800cd6c:	68f8      	ldr	r0, [r7, #12]
 800cd6e:	f000 fed0 	bl	800db12 <USBD_CtlReceiveStatus>
 800cd72:	e00d      	b.n	800cd90 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cd7a:	2b04      	cmp	r3, #4
 800cd7c:	d004      	beq.n	800cd88 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d103      	bne.n	800cd90 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800cd88:	2180      	movs	r1, #128	@ 0x80
 800cd8a:	68f8      	ldr	r0, [r7, #12]
 800cd8c:	f001 fa4c 	bl	800e228 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d11d      	bne.n	800cdd6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800cd9a:	68f8      	ldr	r0, [r7, #12]
 800cd9c:	f7ff fe80 	bl	800caa0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2200      	movs	r2, #0
 800cda4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800cda8:	e015      	b.n	800cdd6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdb0:	695b      	ldr	r3, [r3, #20]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00d      	beq.n	800cdd2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800cdbc:	2b03      	cmp	r3, #3
 800cdbe:	d108      	bne.n	800cdd2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdc6:	695b      	ldr	r3, [r3, #20]
 800cdc8:	7afa      	ldrb	r2, [r7, #11]
 800cdca:	4611      	mov	r1, r2
 800cdcc:	68f8      	ldr	r0, [r7, #12]
 800cdce:	4798      	blx	r3
 800cdd0:	e001      	b.n	800cdd6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cdd2:	2302      	movs	r3, #2
 800cdd4:	e000      	b.n	800cdd8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800cdd6:	2300      	movs	r3, #0
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3718      	adds	r7, #24
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cde8:	2340      	movs	r3, #64	@ 0x40
 800cdea:	2200      	movs	r2, #0
 800cdec:	2100      	movs	r1, #0
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f001 f9d5 	bl	800e19e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2240      	movs	r2, #64	@ 0x40
 800ce00:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce04:	2340      	movs	r3, #64	@ 0x40
 800ce06:	2200      	movs	r2, #0
 800ce08:	2180      	movs	r1, #128	@ 0x80
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f001 f9c7 	bl	800e19e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2201      	movs	r2, #1
 800ce14:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2240      	movs	r2, #64	@ 0x40
 800ce1a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2200      	movs	r2, #0
 800ce28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2200      	movs	r2, #0
 800ce36:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d009      	beq.n	800ce58 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	6852      	ldr	r2, [r2, #4]
 800ce50:	b2d2      	uxtb	r2, r2
 800ce52:	4611      	mov	r1, r2
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	4798      	blx	r3
  }

  return USBD_OK;
 800ce58:	2300      	movs	r3, #0
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3708      	adds	r7, #8
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}

0800ce62 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ce62:	b480      	push	{r7}
 800ce64:	b083      	sub	sp, #12
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	78fa      	ldrb	r2, [r7, #3]
 800ce72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	370c      	adds	r7, #12
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr

0800ce82 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ce82:	b480      	push	{r7}
 800ce84:	b083      	sub	sp, #12
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2204      	movs	r2, #4
 800ce9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ce9e:	2300      	movs	r3, #0
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	370c      	adds	r7, #12
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ceba:	2b04      	cmp	r3, #4
 800cebc:	d105      	bne.n	800ceca <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ceca:	2300      	movs	r3, #0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	370c      	adds	r7, #12
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr

0800ced8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cee6:	2b03      	cmp	r3, #3
 800cee8:	d10b      	bne.n	800cf02 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cef0:	69db      	ldr	r3, [r3, #28]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d005      	beq.n	800cf02 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cefc:	69db      	ldr	r3, [r3, #28]
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cf02:	2300      	movs	r3, #0
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3708      	adds	r7, #8
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf16:	2300      	movs	r3, #0
 800cf18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cf22:	2b40      	cmp	r3, #64	@ 0x40
 800cf24:	d005      	beq.n	800cf32 <USBD_StdDevReq+0x26>
 800cf26:	2b40      	cmp	r3, #64	@ 0x40
 800cf28:	d84f      	bhi.n	800cfca <USBD_StdDevReq+0xbe>
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d009      	beq.n	800cf42 <USBD_StdDevReq+0x36>
 800cf2e:	2b20      	cmp	r3, #32
 800cf30:	d14b      	bne.n	800cfca <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf38:	689b      	ldr	r3, [r3, #8]
 800cf3a:	6839      	ldr	r1, [r7, #0]
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	4798      	blx	r3
      break;
 800cf40:	e048      	b.n	800cfd4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	785b      	ldrb	r3, [r3, #1]
 800cf46:	2b09      	cmp	r3, #9
 800cf48:	d839      	bhi.n	800cfbe <USBD_StdDevReq+0xb2>
 800cf4a:	a201      	add	r2, pc, #4	@ (adr r2, 800cf50 <USBD_StdDevReq+0x44>)
 800cf4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf50:	0800cfa1 	.word	0x0800cfa1
 800cf54:	0800cfb5 	.word	0x0800cfb5
 800cf58:	0800cfbf 	.word	0x0800cfbf
 800cf5c:	0800cfab 	.word	0x0800cfab
 800cf60:	0800cfbf 	.word	0x0800cfbf
 800cf64:	0800cf83 	.word	0x0800cf83
 800cf68:	0800cf79 	.word	0x0800cf79
 800cf6c:	0800cfbf 	.word	0x0800cfbf
 800cf70:	0800cf97 	.word	0x0800cf97
 800cf74:	0800cf8d 	.word	0x0800cf8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cf78:	6839      	ldr	r1, [r7, #0]
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 f9dc 	bl	800d338 <USBD_GetDescriptor>
          break;
 800cf80:	e022      	b.n	800cfc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cf82:	6839      	ldr	r1, [r7, #0]
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 fb3f 	bl	800d608 <USBD_SetAddress>
          break;
 800cf8a:	e01d      	b.n	800cfc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800cf8c:	6839      	ldr	r1, [r7, #0]
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 fb7e 	bl	800d690 <USBD_SetConfig>
          break;
 800cf94:	e018      	b.n	800cfc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cf96:	6839      	ldr	r1, [r7, #0]
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f000 fc07 	bl	800d7ac <USBD_GetConfig>
          break;
 800cf9e:	e013      	b.n	800cfc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cfa0:	6839      	ldr	r1, [r7, #0]
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 fc37 	bl	800d816 <USBD_GetStatus>
          break;
 800cfa8:	e00e      	b.n	800cfc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cfaa:	6839      	ldr	r1, [r7, #0]
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f000 fc65 	bl	800d87c <USBD_SetFeature>
          break;
 800cfb2:	e009      	b.n	800cfc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cfb4:	6839      	ldr	r1, [r7, #0]
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 fc74 	bl	800d8a4 <USBD_ClrFeature>
          break;
 800cfbc:	e004      	b.n	800cfc8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800cfbe:	6839      	ldr	r1, [r7, #0]
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f000 fcca 	bl	800d95a <USBD_CtlError>
          break;
 800cfc6:	bf00      	nop
      }
      break;
 800cfc8:	e004      	b.n	800cfd4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800cfca:	6839      	ldr	r1, [r7, #0]
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 fcc4 	bl	800d95a <USBD_CtlError>
      break;
 800cfd2:	bf00      	nop
  }

  return ret;
 800cfd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3710      	adds	r7, #16
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop

0800cfe0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfea:	2300      	movs	r3, #0
 800cfec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cff6:	2b40      	cmp	r3, #64	@ 0x40
 800cff8:	d005      	beq.n	800d006 <USBD_StdItfReq+0x26>
 800cffa:	2b40      	cmp	r3, #64	@ 0x40
 800cffc:	d82e      	bhi.n	800d05c <USBD_StdItfReq+0x7c>
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d001      	beq.n	800d006 <USBD_StdItfReq+0x26>
 800d002:	2b20      	cmp	r3, #32
 800d004:	d12a      	bne.n	800d05c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d00c:	3b01      	subs	r3, #1
 800d00e:	2b02      	cmp	r3, #2
 800d010:	d81d      	bhi.n	800d04e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	889b      	ldrh	r3, [r3, #4]
 800d016:	b2db      	uxtb	r3, r3
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d813      	bhi.n	800d044 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	6839      	ldr	r1, [r7, #0]
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	4798      	blx	r3
 800d02a:	4603      	mov	r3, r0
 800d02c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	88db      	ldrh	r3, [r3, #6]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d110      	bne.n	800d058 <USBD_StdItfReq+0x78>
 800d036:	7bfb      	ldrb	r3, [r7, #15]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d10d      	bne.n	800d058 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 fd55 	bl	800daec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d042:	e009      	b.n	800d058 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800d044:	6839      	ldr	r1, [r7, #0]
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 fc87 	bl	800d95a <USBD_CtlError>
          break;
 800d04c:	e004      	b.n	800d058 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800d04e:	6839      	ldr	r1, [r7, #0]
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 fc82 	bl	800d95a <USBD_CtlError>
          break;
 800d056:	e000      	b.n	800d05a <USBD_StdItfReq+0x7a>
          break;
 800d058:	bf00      	nop
      }
      break;
 800d05a:	e004      	b.n	800d066 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800d05c:	6839      	ldr	r1, [r7, #0]
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 fc7b 	bl	800d95a <USBD_CtlError>
      break;
 800d064:	bf00      	nop
  }

  return USBD_OK;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3710      	adds	r7, #16
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d07a:	2300      	movs	r3, #0
 800d07c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	889b      	ldrh	r3, [r3, #4]
 800d082:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d08c:	2b40      	cmp	r3, #64	@ 0x40
 800d08e:	d007      	beq.n	800d0a0 <USBD_StdEPReq+0x30>
 800d090:	2b40      	cmp	r3, #64	@ 0x40
 800d092:	f200 8146 	bhi.w	800d322 <USBD_StdEPReq+0x2b2>
 800d096:	2b00      	cmp	r3, #0
 800d098:	d00a      	beq.n	800d0b0 <USBD_StdEPReq+0x40>
 800d09a:	2b20      	cmp	r3, #32
 800d09c:	f040 8141 	bne.w	800d322 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0a6:	689b      	ldr	r3, [r3, #8]
 800d0a8:	6839      	ldr	r1, [r7, #0]
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	4798      	blx	r3
      break;
 800d0ae:	e13d      	b.n	800d32c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d0b8:	2b20      	cmp	r3, #32
 800d0ba:	d10a      	bne.n	800d0d2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0c2:	689b      	ldr	r3, [r3, #8]
 800d0c4:	6839      	ldr	r1, [r7, #0]
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	4798      	blx	r3
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	73fb      	strb	r3, [r7, #15]

        return ret;
 800d0ce:	7bfb      	ldrb	r3, [r7, #15]
 800d0d0:	e12d      	b.n	800d32e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	785b      	ldrb	r3, [r3, #1]
 800d0d6:	2b03      	cmp	r3, #3
 800d0d8:	d007      	beq.n	800d0ea <USBD_StdEPReq+0x7a>
 800d0da:	2b03      	cmp	r3, #3
 800d0dc:	f300 811b 	bgt.w	800d316 <USBD_StdEPReq+0x2a6>
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d072      	beq.n	800d1ca <USBD_StdEPReq+0x15a>
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d03a      	beq.n	800d15e <USBD_StdEPReq+0xee>
 800d0e8:	e115      	b.n	800d316 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0f0:	2b02      	cmp	r3, #2
 800d0f2:	d002      	beq.n	800d0fa <USBD_StdEPReq+0x8a>
 800d0f4:	2b03      	cmp	r3, #3
 800d0f6:	d015      	beq.n	800d124 <USBD_StdEPReq+0xb4>
 800d0f8:	e02b      	b.n	800d152 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d0fa:	7bbb      	ldrb	r3, [r7, #14]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d00c      	beq.n	800d11a <USBD_StdEPReq+0xaa>
 800d100:	7bbb      	ldrb	r3, [r7, #14]
 800d102:	2b80      	cmp	r3, #128	@ 0x80
 800d104:	d009      	beq.n	800d11a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d106:	7bbb      	ldrb	r3, [r7, #14]
 800d108:	4619      	mov	r1, r3
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f001 f88c 	bl	800e228 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d110:	2180      	movs	r1, #128	@ 0x80
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f001 f888 	bl	800e228 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d118:	e020      	b.n	800d15c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800d11a:	6839      	ldr	r1, [r7, #0]
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 fc1c 	bl	800d95a <USBD_CtlError>
              break;
 800d122:	e01b      	b.n	800d15c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	885b      	ldrh	r3, [r3, #2]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d10e      	bne.n	800d14a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800d12c:	7bbb      	ldrb	r3, [r7, #14]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d00b      	beq.n	800d14a <USBD_StdEPReq+0xda>
 800d132:	7bbb      	ldrb	r3, [r7, #14]
 800d134:	2b80      	cmp	r3, #128	@ 0x80
 800d136:	d008      	beq.n	800d14a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	88db      	ldrh	r3, [r3, #6]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d104      	bne.n	800d14a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800d140:	7bbb      	ldrb	r3, [r7, #14]
 800d142:	4619      	mov	r1, r3
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f001 f86f 	bl	800e228 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 fcce 	bl	800daec <USBD_CtlSendStatus>

              break;
 800d150:	e004      	b.n	800d15c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800d152:	6839      	ldr	r1, [r7, #0]
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 fc00 	bl	800d95a <USBD_CtlError>
              break;
 800d15a:	bf00      	nop
          }
          break;
 800d15c:	e0e0      	b.n	800d320 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d164:	2b02      	cmp	r3, #2
 800d166:	d002      	beq.n	800d16e <USBD_StdEPReq+0xfe>
 800d168:	2b03      	cmp	r3, #3
 800d16a:	d015      	beq.n	800d198 <USBD_StdEPReq+0x128>
 800d16c:	e026      	b.n	800d1bc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d16e:	7bbb      	ldrb	r3, [r7, #14]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d00c      	beq.n	800d18e <USBD_StdEPReq+0x11e>
 800d174:	7bbb      	ldrb	r3, [r7, #14]
 800d176:	2b80      	cmp	r3, #128	@ 0x80
 800d178:	d009      	beq.n	800d18e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d17a:	7bbb      	ldrb	r3, [r7, #14]
 800d17c:	4619      	mov	r1, r3
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f001 f852 	bl	800e228 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d184:	2180      	movs	r1, #128	@ 0x80
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f001 f84e 	bl	800e228 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d18c:	e01c      	b.n	800d1c8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800d18e:	6839      	ldr	r1, [r7, #0]
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 fbe2 	bl	800d95a <USBD_CtlError>
              break;
 800d196:	e017      	b.n	800d1c8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	885b      	ldrh	r3, [r3, #2]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d112      	bne.n	800d1c6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d1a0:	7bbb      	ldrb	r3, [r7, #14]
 800d1a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d004      	beq.n	800d1b4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800d1aa:	7bbb      	ldrb	r3, [r7, #14]
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f001 f859 	bl	800e266 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 fc99 	bl	800daec <USBD_CtlSendStatus>
              }
              break;
 800d1ba:	e004      	b.n	800d1c6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800d1bc:	6839      	ldr	r1, [r7, #0]
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 fbcb 	bl	800d95a <USBD_CtlError>
              break;
 800d1c4:	e000      	b.n	800d1c8 <USBD_StdEPReq+0x158>
              break;
 800d1c6:	bf00      	nop
          }
          break;
 800d1c8:	e0aa      	b.n	800d320 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1d0:	2b02      	cmp	r3, #2
 800d1d2:	d002      	beq.n	800d1da <USBD_StdEPReq+0x16a>
 800d1d4:	2b03      	cmp	r3, #3
 800d1d6:	d032      	beq.n	800d23e <USBD_StdEPReq+0x1ce>
 800d1d8:	e097      	b.n	800d30a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1da:	7bbb      	ldrb	r3, [r7, #14]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d007      	beq.n	800d1f0 <USBD_StdEPReq+0x180>
 800d1e0:	7bbb      	ldrb	r3, [r7, #14]
 800d1e2:	2b80      	cmp	r3, #128	@ 0x80
 800d1e4:	d004      	beq.n	800d1f0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800d1e6:	6839      	ldr	r1, [r7, #0]
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 fbb6 	bl	800d95a <USBD_CtlError>
                break;
 800d1ee:	e091      	b.n	800d314 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d1f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	da0b      	bge.n	800d210 <USBD_StdEPReq+0x1a0>
 800d1f8:	7bbb      	ldrb	r3, [r7, #14]
 800d1fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d1fe:	4613      	mov	r3, r2
 800d200:	009b      	lsls	r3, r3, #2
 800d202:	4413      	add	r3, r2
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	3310      	adds	r3, #16
 800d208:	687a      	ldr	r2, [r7, #4]
 800d20a:	4413      	add	r3, r2
 800d20c:	3304      	adds	r3, #4
 800d20e:	e00b      	b.n	800d228 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d210:	7bbb      	ldrb	r3, [r7, #14]
 800d212:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d216:	4613      	mov	r3, r2
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	4413      	add	r3, r2
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	4413      	add	r3, r2
 800d226:	3304      	adds	r3, #4
 800d228:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	2200      	movs	r2, #0
 800d22e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	2202      	movs	r2, #2
 800d234:	4619      	mov	r1, r3
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 fbfa 	bl	800da30 <USBD_CtlSendData>
              break;
 800d23c:	e06a      	b.n	800d314 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d23e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d242:	2b00      	cmp	r3, #0
 800d244:	da11      	bge.n	800d26a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d246:	7bbb      	ldrb	r3, [r7, #14]
 800d248:	f003 020f 	and.w	r2, r3, #15
 800d24c:	6879      	ldr	r1, [r7, #4]
 800d24e:	4613      	mov	r3, r2
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	4413      	add	r3, r2
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	440b      	add	r3, r1
 800d258:	3318      	adds	r3, #24
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d117      	bne.n	800d290 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d260:	6839      	ldr	r1, [r7, #0]
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 fb79 	bl	800d95a <USBD_CtlError>
                  break;
 800d268:	e054      	b.n	800d314 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d26a:	7bbb      	ldrb	r3, [r7, #14]
 800d26c:	f003 020f 	and.w	r2, r3, #15
 800d270:	6879      	ldr	r1, [r7, #4]
 800d272:	4613      	mov	r3, r2
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4413      	add	r3, r2
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	440b      	add	r3, r1
 800d27c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d104      	bne.n	800d290 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 fb66 	bl	800d95a <USBD_CtlError>
                  break;
 800d28e:	e041      	b.n	800d314 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d290:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d294:	2b00      	cmp	r3, #0
 800d296:	da0b      	bge.n	800d2b0 <USBD_StdEPReq+0x240>
 800d298:	7bbb      	ldrb	r3, [r7, #14]
 800d29a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d29e:	4613      	mov	r3, r2
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	4413      	add	r3, r2
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	3310      	adds	r3, #16
 800d2a8:	687a      	ldr	r2, [r7, #4]
 800d2aa:	4413      	add	r3, r2
 800d2ac:	3304      	adds	r3, #4
 800d2ae:	e00b      	b.n	800d2c8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d2b0:	7bbb      	ldrb	r3, [r7, #14]
 800d2b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	009b      	lsls	r3, r3, #2
 800d2ba:	4413      	add	r3, r2
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	4413      	add	r3, r2
 800d2c6:	3304      	adds	r3, #4
 800d2c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d2ca:	7bbb      	ldrb	r3, [r7, #14]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d002      	beq.n	800d2d6 <USBD_StdEPReq+0x266>
 800d2d0:	7bbb      	ldrb	r3, [r7, #14]
 800d2d2:	2b80      	cmp	r3, #128	@ 0x80
 800d2d4:	d103      	bne.n	800d2de <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	601a      	str	r2, [r3, #0]
 800d2dc:	e00e      	b.n	800d2fc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800d2de:	7bbb      	ldrb	r3, [r7, #14]
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 ffde 	bl	800e2a4 <USBD_LL_IsStallEP>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d003      	beq.n	800d2f6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	601a      	str	r2, [r3, #0]
 800d2f4:	e002      	b.n	800d2fc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	2202      	movs	r2, #2
 800d300:	4619      	mov	r1, r3
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 fb94 	bl	800da30 <USBD_CtlSendData>
              break;
 800d308:	e004      	b.n	800d314 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800d30a:	6839      	ldr	r1, [r7, #0]
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 fb24 	bl	800d95a <USBD_CtlError>
              break;
 800d312:	bf00      	nop
          }
          break;
 800d314:	e004      	b.n	800d320 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800d316:	6839      	ldr	r1, [r7, #0]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 fb1e 	bl	800d95a <USBD_CtlError>
          break;
 800d31e:	bf00      	nop
      }
      break;
 800d320:	e004      	b.n	800d32c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800d322:	6839      	ldr	r1, [r7, #0]
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 fb18 	bl	800d95a <USBD_CtlError>
      break;
 800d32a:	bf00      	nop
  }

  return ret;
 800d32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3710      	adds	r7, #16
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
	...

0800d338 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b084      	sub	sp, #16
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d342:	2300      	movs	r3, #0
 800d344:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d346:	2300      	movs	r3, #0
 800d348:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d34a:	2300      	movs	r3, #0
 800d34c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	885b      	ldrh	r3, [r3, #2]
 800d352:	0a1b      	lsrs	r3, r3, #8
 800d354:	b29b      	uxth	r3, r3
 800d356:	3b01      	subs	r3, #1
 800d358:	2b06      	cmp	r3, #6
 800d35a:	f200 8128 	bhi.w	800d5ae <USBD_GetDescriptor+0x276>
 800d35e:	a201      	add	r2, pc, #4	@ (adr r2, 800d364 <USBD_GetDescriptor+0x2c>)
 800d360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d364:	0800d381 	.word	0x0800d381
 800d368:	0800d399 	.word	0x0800d399
 800d36c:	0800d3d9 	.word	0x0800d3d9
 800d370:	0800d5af 	.word	0x0800d5af
 800d374:	0800d5af 	.word	0x0800d5af
 800d378:	0800d54f 	.word	0x0800d54f
 800d37c:	0800d57b 	.word	0x0800d57b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	687a      	ldr	r2, [r7, #4]
 800d38a:	7c12      	ldrb	r2, [r2, #16]
 800d38c:	f107 0108 	add.w	r1, r7, #8
 800d390:	4610      	mov	r0, r2
 800d392:	4798      	blx	r3
 800d394:	60f8      	str	r0, [r7, #12]
      break;
 800d396:	e112      	b.n	800d5be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	7c1b      	ldrb	r3, [r3, #16]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d10d      	bne.n	800d3bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3a8:	f107 0208 	add.w	r2, r7, #8
 800d3ac:	4610      	mov	r0, r2
 800d3ae:	4798      	blx	r3
 800d3b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	2202      	movs	r2, #2
 800d3b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d3ba:	e100      	b.n	800d5be <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3c4:	f107 0208 	add.w	r2, r7, #8
 800d3c8:	4610      	mov	r0, r2
 800d3ca:	4798      	blx	r3
 800d3cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	2202      	movs	r2, #2
 800d3d4:	701a      	strb	r2, [r3, #0]
      break;
 800d3d6:	e0f2      	b.n	800d5be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	885b      	ldrh	r3, [r3, #2]
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	2b05      	cmp	r3, #5
 800d3e0:	f200 80ac 	bhi.w	800d53c <USBD_GetDescriptor+0x204>
 800d3e4:	a201      	add	r2, pc, #4	@ (adr r2, 800d3ec <USBD_GetDescriptor+0xb4>)
 800d3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ea:	bf00      	nop
 800d3ec:	0800d405 	.word	0x0800d405
 800d3f0:	0800d439 	.word	0x0800d439
 800d3f4:	0800d46d 	.word	0x0800d46d
 800d3f8:	0800d4a1 	.word	0x0800d4a1
 800d3fc:	0800d4d5 	.word	0x0800d4d5
 800d400:	0800d509 	.word	0x0800d509
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d00b      	beq.n	800d428 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	687a      	ldr	r2, [r7, #4]
 800d41a:	7c12      	ldrb	r2, [r2, #16]
 800d41c:	f107 0108 	add.w	r1, r7, #8
 800d420:	4610      	mov	r0, r2
 800d422:	4798      	blx	r3
 800d424:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d426:	e091      	b.n	800d54c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d428:	6839      	ldr	r1, [r7, #0]
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 fa95 	bl	800d95a <USBD_CtlError>
            err++;
 800d430:	7afb      	ldrb	r3, [r7, #11]
 800d432:	3301      	adds	r3, #1
 800d434:	72fb      	strb	r3, [r7, #11]
          break;
 800d436:	e089      	b.n	800d54c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d43e:	689b      	ldr	r3, [r3, #8]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d00b      	beq.n	800d45c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d44a:	689b      	ldr	r3, [r3, #8]
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	7c12      	ldrb	r2, [r2, #16]
 800d450:	f107 0108 	add.w	r1, r7, #8
 800d454:	4610      	mov	r0, r2
 800d456:	4798      	blx	r3
 800d458:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d45a:	e077      	b.n	800d54c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d45c:	6839      	ldr	r1, [r7, #0]
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f000 fa7b 	bl	800d95a <USBD_CtlError>
            err++;
 800d464:	7afb      	ldrb	r3, [r7, #11]
 800d466:	3301      	adds	r3, #1
 800d468:	72fb      	strb	r3, [r7, #11]
          break;
 800d46a:	e06f      	b.n	800d54c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d00b      	beq.n	800d490 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	687a      	ldr	r2, [r7, #4]
 800d482:	7c12      	ldrb	r2, [r2, #16]
 800d484:	f107 0108 	add.w	r1, r7, #8
 800d488:	4610      	mov	r0, r2
 800d48a:	4798      	blx	r3
 800d48c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d48e:	e05d      	b.n	800d54c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d490:	6839      	ldr	r1, [r7, #0]
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f000 fa61 	bl	800d95a <USBD_CtlError>
            err++;
 800d498:	7afb      	ldrb	r3, [r7, #11]
 800d49a:	3301      	adds	r3, #1
 800d49c:	72fb      	strb	r3, [r7, #11]
          break;
 800d49e:	e055      	b.n	800d54c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d4a6:	691b      	ldr	r3, [r3, #16]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d00b      	beq.n	800d4c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d4b2:	691b      	ldr	r3, [r3, #16]
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	7c12      	ldrb	r2, [r2, #16]
 800d4b8:	f107 0108 	add.w	r1, r7, #8
 800d4bc:	4610      	mov	r0, r2
 800d4be:	4798      	blx	r3
 800d4c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4c2:	e043      	b.n	800d54c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4c4:	6839      	ldr	r1, [r7, #0]
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 fa47 	bl	800d95a <USBD_CtlError>
            err++;
 800d4cc:	7afb      	ldrb	r3, [r7, #11]
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	72fb      	strb	r3, [r7, #11]
          break;
 800d4d2:	e03b      	b.n	800d54c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d4da:	695b      	ldr	r3, [r3, #20]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d00b      	beq.n	800d4f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d4e6:	695b      	ldr	r3, [r3, #20]
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	7c12      	ldrb	r2, [r2, #16]
 800d4ec:	f107 0108 	add.w	r1, r7, #8
 800d4f0:	4610      	mov	r0, r2
 800d4f2:	4798      	blx	r3
 800d4f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4f6:	e029      	b.n	800d54c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4f8:	6839      	ldr	r1, [r7, #0]
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 fa2d 	bl	800d95a <USBD_CtlError>
            err++;
 800d500:	7afb      	ldrb	r3, [r7, #11]
 800d502:	3301      	adds	r3, #1
 800d504:	72fb      	strb	r3, [r7, #11]
          break;
 800d506:	e021      	b.n	800d54c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d50e:	699b      	ldr	r3, [r3, #24]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d00b      	beq.n	800d52c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d51a:	699b      	ldr	r3, [r3, #24]
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	7c12      	ldrb	r2, [r2, #16]
 800d520:	f107 0108 	add.w	r1, r7, #8
 800d524:	4610      	mov	r0, r2
 800d526:	4798      	blx	r3
 800d528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d52a:	e00f      	b.n	800d54c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d52c:	6839      	ldr	r1, [r7, #0]
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f000 fa13 	bl	800d95a <USBD_CtlError>
            err++;
 800d534:	7afb      	ldrb	r3, [r7, #11]
 800d536:	3301      	adds	r3, #1
 800d538:	72fb      	strb	r3, [r7, #11]
          break;
 800d53a:	e007      	b.n	800d54c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800d53c:	6839      	ldr	r1, [r7, #0]
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 fa0b 	bl	800d95a <USBD_CtlError>
          err++;
 800d544:	7afb      	ldrb	r3, [r7, #11]
 800d546:	3301      	adds	r3, #1
 800d548:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800d54a:	e038      	b.n	800d5be <USBD_GetDescriptor+0x286>
 800d54c:	e037      	b.n	800d5be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	7c1b      	ldrb	r3, [r3, #16]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d109      	bne.n	800d56a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d55c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d55e:	f107 0208 	add.w	r2, r7, #8
 800d562:	4610      	mov	r0, r2
 800d564:	4798      	blx	r3
 800d566:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d568:	e029      	b.n	800d5be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d56a:	6839      	ldr	r1, [r7, #0]
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f000 f9f4 	bl	800d95a <USBD_CtlError>
        err++;
 800d572:	7afb      	ldrb	r3, [r7, #11]
 800d574:	3301      	adds	r3, #1
 800d576:	72fb      	strb	r3, [r7, #11]
      break;
 800d578:	e021      	b.n	800d5be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	7c1b      	ldrb	r3, [r3, #16]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d10d      	bne.n	800d59e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d58a:	f107 0208 	add.w	r2, r7, #8
 800d58e:	4610      	mov	r0, r2
 800d590:	4798      	blx	r3
 800d592:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	3301      	adds	r3, #1
 800d598:	2207      	movs	r2, #7
 800d59a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d59c:	e00f      	b.n	800d5be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d59e:	6839      	ldr	r1, [r7, #0]
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 f9da 	bl	800d95a <USBD_CtlError>
        err++;
 800d5a6:	7afb      	ldrb	r3, [r7, #11]
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	72fb      	strb	r3, [r7, #11]
      break;
 800d5ac:	e007      	b.n	800d5be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d5ae:	6839      	ldr	r1, [r7, #0]
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 f9d2 	bl	800d95a <USBD_CtlError>
      err++;
 800d5b6:	7afb      	ldrb	r3, [r7, #11]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	72fb      	strb	r3, [r7, #11]
      break;
 800d5bc:	bf00      	nop
  }

  if (err != 0U)
 800d5be:	7afb      	ldrb	r3, [r7, #11]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d11c      	bne.n	800d5fe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800d5c4:	893b      	ldrh	r3, [r7, #8]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d011      	beq.n	800d5ee <USBD_GetDescriptor+0x2b6>
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	88db      	ldrh	r3, [r3, #6]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00d      	beq.n	800d5ee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	88da      	ldrh	r2, [r3, #6]
 800d5d6:	893b      	ldrh	r3, [r7, #8]
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	bf28      	it	cs
 800d5dc:	4613      	movcs	r3, r2
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d5e2:	893b      	ldrh	r3, [r7, #8]
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	68f9      	ldr	r1, [r7, #12]
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f000 fa21 	bl	800da30 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	88db      	ldrh	r3, [r3, #6]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d104      	bne.n	800d600 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 fa78 	bl	800daec <USBD_CtlSendStatus>
 800d5fc:	e000      	b.n	800d600 <USBD_GetDescriptor+0x2c8>
    return;
 800d5fe:	bf00      	nop
    }
  }
}
 800d600:	3710      	adds	r7, #16
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop

0800d608 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	889b      	ldrh	r3, [r3, #4]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d130      	bne.n	800d67c <USBD_SetAddress+0x74>
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	88db      	ldrh	r3, [r3, #6]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d12c      	bne.n	800d67c <USBD_SetAddress+0x74>
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	885b      	ldrh	r3, [r3, #2]
 800d626:	2b7f      	cmp	r3, #127	@ 0x7f
 800d628:	d828      	bhi.n	800d67c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	885b      	ldrh	r3, [r3, #2]
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d634:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d63c:	2b03      	cmp	r3, #3
 800d63e:	d104      	bne.n	800d64a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800d640:	6839      	ldr	r1, [r7, #0]
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 f989 	bl	800d95a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d648:	e01d      	b.n	800d686 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	7bfa      	ldrb	r2, [r7, #15]
 800d64e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d652:	7bfb      	ldrb	r3, [r7, #15]
 800d654:	4619      	mov	r1, r3
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f000 fe51 	bl	800e2fe <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f000 fa45 	bl	800daec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d662:	7bfb      	ldrb	r3, [r7, #15]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d004      	beq.n	800d672 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2202      	movs	r2, #2
 800d66c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d670:	e009      	b.n	800d686 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2201      	movs	r2, #1
 800d676:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d67a:	e004      	b.n	800d686 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d67c:	6839      	ldr	r1, [r7, #0]
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 f96b 	bl	800d95a <USBD_CtlError>
  }
}
 800d684:	bf00      	nop
 800d686:	bf00      	nop
 800d688:	3710      	adds	r7, #16
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
	...

0800d690 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	885b      	ldrh	r3, [r3, #2]
 800d69e:	b2da      	uxtb	r2, r3
 800d6a0:	4b41      	ldr	r3, [pc, #260]	@ (800d7a8 <USBD_SetConfig+0x118>)
 800d6a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d6a4:	4b40      	ldr	r3, [pc, #256]	@ (800d7a8 <USBD_SetConfig+0x118>)
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d904      	bls.n	800d6b6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d6ac:	6839      	ldr	r1, [r7, #0]
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 f953 	bl	800d95a <USBD_CtlError>
 800d6b4:	e075      	b.n	800d7a2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6bc:	2b02      	cmp	r3, #2
 800d6be:	d002      	beq.n	800d6c6 <USBD_SetConfig+0x36>
 800d6c0:	2b03      	cmp	r3, #3
 800d6c2:	d023      	beq.n	800d70c <USBD_SetConfig+0x7c>
 800d6c4:	e062      	b.n	800d78c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800d6c6:	4b38      	ldr	r3, [pc, #224]	@ (800d7a8 <USBD_SetConfig+0x118>)
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d01a      	beq.n	800d704 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800d6ce:	4b36      	ldr	r3, [pc, #216]	@ (800d7a8 <USBD_SetConfig+0x118>)
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2203      	movs	r2, #3
 800d6dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d6e0:	4b31      	ldr	r3, [pc, #196]	@ (800d7a8 <USBD_SetConfig+0x118>)
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f7ff f9e5 	bl	800cab6 <USBD_SetClassConfig>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b02      	cmp	r3, #2
 800d6f0:	d104      	bne.n	800d6fc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800d6f2:	6839      	ldr	r1, [r7, #0]
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 f930 	bl	800d95a <USBD_CtlError>
            return;
 800d6fa:	e052      	b.n	800d7a2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f000 f9f5 	bl	800daec <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d702:	e04e      	b.n	800d7a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f000 f9f1 	bl	800daec <USBD_CtlSendStatus>
        break;
 800d70a:	e04a      	b.n	800d7a2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800d70c:	4b26      	ldr	r3, [pc, #152]	@ (800d7a8 <USBD_SetConfig+0x118>)
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d112      	bne.n	800d73a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2202      	movs	r2, #2
 800d718:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800d71c:	4b22      	ldr	r3, [pc, #136]	@ (800d7a8 <USBD_SetConfig+0x118>)
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	461a      	mov	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800d726:	4b20      	ldr	r3, [pc, #128]	@ (800d7a8 <USBD_SetConfig+0x118>)
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	4619      	mov	r1, r3
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f7ff f9e1 	bl	800caf4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f000 f9da 	bl	800daec <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d738:	e033      	b.n	800d7a2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800d73a:	4b1b      	ldr	r3, [pc, #108]	@ (800d7a8 <USBD_SetConfig+0x118>)
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	461a      	mov	r2, r3
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	429a      	cmp	r2, r3
 800d746:	d01d      	beq.n	800d784 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	4619      	mov	r1, r3
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f7ff f9cf 	bl	800caf4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800d756:	4b14      	ldr	r3, [pc, #80]	@ (800d7a8 <USBD_SetConfig+0x118>)
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	461a      	mov	r2, r3
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d760:	4b11      	ldr	r3, [pc, #68]	@ (800d7a8 <USBD_SetConfig+0x118>)
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	4619      	mov	r1, r3
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f7ff f9a5 	bl	800cab6 <USBD_SetClassConfig>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b02      	cmp	r3, #2
 800d770:	d104      	bne.n	800d77c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800d772:	6839      	ldr	r1, [r7, #0]
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f000 f8f0 	bl	800d95a <USBD_CtlError>
            return;
 800d77a:	e012      	b.n	800d7a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f000 f9b5 	bl	800daec <USBD_CtlSendStatus>
        break;
 800d782:	e00e      	b.n	800d7a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 f9b1 	bl	800daec <USBD_CtlSendStatus>
        break;
 800d78a:	e00a      	b.n	800d7a2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800d78c:	6839      	ldr	r1, [r7, #0]
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 f8e3 	bl	800d95a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800d794:	4b04      	ldr	r3, [pc, #16]	@ (800d7a8 <USBD_SetConfig+0x118>)
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	4619      	mov	r1, r3
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f7ff f9aa 	bl	800caf4 <USBD_ClrClassConfig>
        break;
 800d7a0:	bf00      	nop
    }
  }
}
 800d7a2:	3708      	adds	r7, #8
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	20000f40 	.word	0x20000f40

0800d7ac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b082      	sub	sp, #8
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	88db      	ldrh	r3, [r3, #6]
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d004      	beq.n	800d7c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d7be:	6839      	ldr	r1, [r7, #0]
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 f8ca 	bl	800d95a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d7c6:	e022      	b.n	800d80e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7ce:	2b02      	cmp	r3, #2
 800d7d0:	dc02      	bgt.n	800d7d8 <USBD_GetConfig+0x2c>
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	dc03      	bgt.n	800d7de <USBD_GetConfig+0x32>
 800d7d6:	e015      	b.n	800d804 <USBD_GetConfig+0x58>
 800d7d8:	2b03      	cmp	r3, #3
 800d7da:	d00b      	beq.n	800d7f4 <USBD_GetConfig+0x48>
 800d7dc:	e012      	b.n	800d804 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	3308      	adds	r3, #8
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 f91f 	bl	800da30 <USBD_CtlSendData>
        break;
 800d7f2:	e00c      	b.n	800d80e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f000 f917 	bl	800da30 <USBD_CtlSendData>
        break;
 800d802:	e004      	b.n	800d80e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800d804:	6839      	ldr	r1, [r7, #0]
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 f8a7 	bl	800d95a <USBD_CtlError>
        break;
 800d80c:	bf00      	nop
}
 800d80e:	bf00      	nop
 800d810:	3708      	adds	r7, #8
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}

0800d816 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d816:	b580      	push	{r7, lr}
 800d818:	b082      	sub	sp, #8
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
 800d81e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d826:	3b01      	subs	r3, #1
 800d828:	2b02      	cmp	r3, #2
 800d82a:	d81e      	bhi.n	800d86a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	88db      	ldrh	r3, [r3, #6]
 800d830:	2b02      	cmp	r3, #2
 800d832:	d004      	beq.n	800d83e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800d834:	6839      	ldr	r1, [r7, #0]
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 f88f 	bl	800d95a <USBD_CtlError>
        break;
 800d83c:	e01a      	b.n	800d874 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2201      	movs	r2, #1
 800d842:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d005      	beq.n	800d85a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	f043 0202 	orr.w	r2, r3, #2
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	330c      	adds	r3, #12
 800d85e:	2202      	movs	r2, #2
 800d860:	4619      	mov	r1, r3
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 f8e4 	bl	800da30 <USBD_CtlSendData>
      break;
 800d868:	e004      	b.n	800d874 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800d86a:	6839      	ldr	r1, [r7, #0]
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f000 f874 	bl	800d95a <USBD_CtlError>
      break;
 800d872:	bf00      	nop
  }
}
 800d874:	bf00      	nop
 800d876:	3708      	adds	r7, #8
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	885b      	ldrh	r3, [r3, #2]
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d106      	bne.n	800d89c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2201      	movs	r2, #1
 800d892:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 f928 	bl	800daec <USBD_CtlSendStatus>
  }
}
 800d89c:	bf00      	nop
 800d89e:	3708      	adds	r7, #8
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8b4:	3b01      	subs	r3, #1
 800d8b6:	2b02      	cmp	r3, #2
 800d8b8:	d80b      	bhi.n	800d8d2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	885b      	ldrh	r3, [r3, #2]
 800d8be:	2b01      	cmp	r3, #1
 800d8c0:	d10c      	bne.n	800d8dc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f000 f90e 	bl	800daec <USBD_CtlSendStatus>
      }
      break;
 800d8d0:	e004      	b.n	800d8dc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d8d2:	6839      	ldr	r1, [r7, #0]
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f000 f840 	bl	800d95a <USBD_CtlError>
      break;
 800d8da:	e000      	b.n	800d8de <USBD_ClrFeature+0x3a>
      break;
 800d8dc:	bf00      	nop
  }
}
 800d8de:	bf00      	nop
 800d8e0:	3708      	adds	r7, #8
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}

0800d8e6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d8e6:	b480      	push	{r7}
 800d8e8:	b083      	sub	sp, #12
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	6078      	str	r0, [r7, #4]
 800d8ee:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	781a      	ldrb	r2, [r3, #0]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	785a      	ldrb	r2, [r3, #1]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	3302      	adds	r3, #2
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	461a      	mov	r2, r3
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	3303      	adds	r3, #3
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	021b      	lsls	r3, r3, #8
 800d910:	b29b      	uxth	r3, r3
 800d912:	4413      	add	r3, r2
 800d914:	b29a      	uxth	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	3304      	adds	r3, #4
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	461a      	mov	r2, r3
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	3305      	adds	r3, #5
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	021b      	lsls	r3, r3, #8
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	4413      	add	r3, r2
 800d92e:	b29a      	uxth	r2, r3
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	3306      	adds	r3, #6
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	461a      	mov	r2, r3
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	3307      	adds	r3, #7
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	021b      	lsls	r3, r3, #8
 800d944:	b29b      	uxth	r3, r3
 800d946:	4413      	add	r3, r2
 800d948:	b29a      	uxth	r2, r3
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	80da      	strh	r2, [r3, #6]

}
 800d94e:	bf00      	nop
 800d950:	370c      	adds	r7, #12
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr

0800d95a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b082      	sub	sp, #8
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
 800d962:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d964:	2180      	movs	r1, #128	@ 0x80
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f000 fc5e 	bl	800e228 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d96c:	2100      	movs	r1, #0
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f000 fc5a 	bl	800e228 <USBD_LL_StallEP>
}
 800d974:	bf00      	nop
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b086      	sub	sp, #24
 800d980:	af00      	add	r7, sp, #0
 800d982:	60f8      	str	r0, [r7, #12]
 800d984:	60b9      	str	r1, [r7, #8]
 800d986:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d988:	2300      	movs	r3, #0
 800d98a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d032      	beq.n	800d9f8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d992:	68f8      	ldr	r0, [r7, #12]
 800d994:	f000 f834 	bl	800da00 <USBD_GetLen>
 800d998:	4603      	mov	r3, r0
 800d99a:	3301      	adds	r3, #1
 800d99c:	b29b      	uxth	r3, r3
 800d99e:	005b      	lsls	r3, r3, #1
 800d9a0:	b29a      	uxth	r2, r3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d9a6:	7dfb      	ldrb	r3, [r7, #23]
 800d9a8:	1c5a      	adds	r2, r3, #1
 800d9aa:	75fa      	strb	r2, [r7, #23]
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	4413      	add	r3, r2
 800d9b2:	687a      	ldr	r2, [r7, #4]
 800d9b4:	7812      	ldrb	r2, [r2, #0]
 800d9b6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d9b8:	7dfb      	ldrb	r3, [r7, #23]
 800d9ba:	1c5a      	adds	r2, r3, #1
 800d9bc:	75fa      	strb	r2, [r7, #23]
 800d9be:	461a      	mov	r2, r3
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	4413      	add	r3, r2
 800d9c4:	2203      	movs	r2, #3
 800d9c6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d9c8:	e012      	b.n	800d9f0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	1c5a      	adds	r2, r3, #1
 800d9ce:	60fa      	str	r2, [r7, #12]
 800d9d0:	7dfa      	ldrb	r2, [r7, #23]
 800d9d2:	1c51      	adds	r1, r2, #1
 800d9d4:	75f9      	strb	r1, [r7, #23]
 800d9d6:	4611      	mov	r1, r2
 800d9d8:	68ba      	ldr	r2, [r7, #8]
 800d9da:	440a      	add	r2, r1
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d9e0:	7dfb      	ldrb	r3, [r7, #23]
 800d9e2:	1c5a      	adds	r2, r3, #1
 800d9e4:	75fa      	strb	r2, [r7, #23]
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	4413      	add	r3, r2
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d1e8      	bne.n	800d9ca <USBD_GetString+0x4e>
    }
  }
}
 800d9f8:	bf00      	nop
 800d9fa:	3718      	adds	r7, #24
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800da00:	b480      	push	{r7}
 800da02:	b085      	sub	sp, #20
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800da08:	2300      	movs	r3, #0
 800da0a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800da0c:	e005      	b.n	800da1a <USBD_GetLen+0x1a>
  {
    len++;
 800da0e:	7bfb      	ldrb	r3, [r7, #15]
 800da10:	3301      	adds	r3, #1
 800da12:	73fb      	strb	r3, [r7, #15]
    buf++;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	3301      	adds	r3, #1
 800da18:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d1f5      	bne.n	800da0e <USBD_GetLen+0xe>
  }

  return len;
 800da22:	7bfb      	ldrb	r3, [r7, #15]
}
 800da24:	4618      	mov	r0, r3
 800da26:	3714      	adds	r7, #20
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr

0800da30 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	60f8      	str	r0, [r7, #12]
 800da38:	60b9      	str	r1, [r7, #8]
 800da3a:	4613      	mov	r3, r2
 800da3c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	2202      	movs	r2, #2
 800da42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800da46:	88fa      	ldrh	r2, [r7, #6]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800da4c:	88fa      	ldrh	r2, [r7, #6]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da52:	88fb      	ldrh	r3, [r7, #6]
 800da54:	68ba      	ldr	r2, [r7, #8]
 800da56:	2100      	movs	r1, #0
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f000 fc6f 	bl	800e33c <USBD_LL_Transmit>

  return USBD_OK;
 800da5e:	2300      	movs	r3, #0
}
 800da60:	4618      	mov	r0, r3
 800da62:	3710      	adds	r7, #16
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	4613      	mov	r3, r2
 800da74:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da76:	88fb      	ldrh	r3, [r7, #6]
 800da78:	68ba      	ldr	r2, [r7, #8]
 800da7a:	2100      	movs	r1, #0
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f000 fc5d 	bl	800e33c <USBD_LL_Transmit>

  return USBD_OK;
 800da82:	2300      	movs	r3, #0
}
 800da84:	4618      	mov	r0, r3
 800da86:	3710      	adds	r7, #16
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	4613      	mov	r3, r2
 800da98:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2203      	movs	r2, #3
 800da9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800daa2:	88fa      	ldrh	r2, [r7, #6]
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800daaa:	88fa      	ldrh	r2, [r7, #6]
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dab2:	88fb      	ldrh	r3, [r7, #6]
 800dab4:	68ba      	ldr	r2, [r7, #8]
 800dab6:	2100      	movs	r1, #0
 800dab8:	68f8      	ldr	r0, [r7, #12]
 800daba:	f000 fc62 	bl	800e382 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dabe:	2300      	movs	r3, #0
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3710      	adds	r7, #16
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	60f8      	str	r0, [r7, #12]
 800dad0:	60b9      	str	r1, [r7, #8]
 800dad2:	4613      	mov	r3, r2
 800dad4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dad6:	88fb      	ldrh	r3, [r7, #6]
 800dad8:	68ba      	ldr	r2, [r7, #8]
 800dada:	2100      	movs	r1, #0
 800dadc:	68f8      	ldr	r0, [r7, #12]
 800dade:	f000 fc50 	bl	800e382 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dae2:	2300      	movs	r3, #0
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2204      	movs	r2, #4
 800daf8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dafc:	2300      	movs	r3, #0
 800dafe:	2200      	movs	r2, #0
 800db00:	2100      	movs	r1, #0
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f000 fc1a 	bl	800e33c <USBD_LL_Transmit>

  return USBD_OK;
 800db08:	2300      	movs	r3, #0
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3708      	adds	r7, #8
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b082      	sub	sp, #8
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2205      	movs	r2, #5
 800db1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db22:	2300      	movs	r3, #0
 800db24:	2200      	movs	r2, #0
 800db26:	2100      	movs	r1, #0
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 fc2a 	bl	800e382 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db2e:	2300      	movs	r3, #0
}
 800db30:	4618      	mov	r0, r3
 800db32:	3708      	adds	r7, #8
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800db3c:	2200      	movs	r2, #0
 800db3e:	4912      	ldr	r1, [pc, #72]	@ (800db88 <MX_USB_DEVICE_Init+0x50>)
 800db40:	4812      	ldr	r0, [pc, #72]	@ (800db8c <MX_USB_DEVICE_Init+0x54>)
 800db42:	f7fe ff5c 	bl	800c9fe <USBD_Init>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d001      	beq.n	800db50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800db4c:	f7f4 fd0c 	bl	8002568 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800db50:	490f      	ldr	r1, [pc, #60]	@ (800db90 <MX_USB_DEVICE_Init+0x58>)
 800db52:	480e      	ldr	r0, [pc, #56]	@ (800db8c <MX_USB_DEVICE_Init+0x54>)
 800db54:	f7fe ff7e 	bl	800ca54 <USBD_RegisterClass>
 800db58:	4603      	mov	r3, r0
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d001      	beq.n	800db62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800db5e:	f7f4 fd03 	bl	8002568 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800db62:	490c      	ldr	r1, [pc, #48]	@ (800db94 <MX_USB_DEVICE_Init+0x5c>)
 800db64:	4809      	ldr	r0, [pc, #36]	@ (800db8c <MX_USB_DEVICE_Init+0x54>)
 800db66:	f7fe fedb 	bl	800c920 <USBD_CDC_RegisterInterface>
 800db6a:	4603      	mov	r3, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d001      	beq.n	800db74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800db70:	f7f4 fcfa 	bl	8002568 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800db74:	4805      	ldr	r0, [pc, #20]	@ (800db8c <MX_USB_DEVICE_Init+0x54>)
 800db76:	f7fe ff87 	bl	800ca88 <USBD_Start>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d001      	beq.n	800db84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800db80:	f7f4 fcf2 	bl	8002568 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800db84:	bf00      	nop
 800db86:	bd80      	pop	{r7, pc}
 800db88:	20000144 	.word	0x20000144
 800db8c:	20000f44 	.word	0x20000f44
 800db90:	20000030 	.word	0x20000030
 800db94:	20000134 	.word	0x20000134

0800db98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800db9c:	2200      	movs	r2, #0
 800db9e:	4905      	ldr	r1, [pc, #20]	@ (800dbb4 <CDC_Init_FS+0x1c>)
 800dba0:	4805      	ldr	r0, [pc, #20]	@ (800dbb8 <CDC_Init_FS+0x20>)
 800dba2:	f7fe fed4 	bl	800c94e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dba6:	4905      	ldr	r1, [pc, #20]	@ (800dbbc <CDC_Init_FS+0x24>)
 800dba8:	4803      	ldr	r0, [pc, #12]	@ (800dbb8 <CDC_Init_FS+0x20>)
 800dbaa:	f7fe feea 	bl	800c982 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dbae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	20001608 	.word	0x20001608
 800dbb8:	20000f44 	.word	0x20000f44
 800dbbc:	20001208 	.word	0x20001208

0800dbc0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dbc4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr

0800dbd0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	6039      	str	r1, [r7, #0]
 800dbda:	71fb      	strb	r3, [r7, #7]
 800dbdc:	4613      	mov	r3, r2
 800dbde:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dbe0:	79fb      	ldrb	r3, [r7, #7]
 800dbe2:	2b23      	cmp	r3, #35	@ 0x23
 800dbe4:	d84a      	bhi.n	800dc7c <CDC_Control_FS+0xac>
 800dbe6:	a201      	add	r2, pc, #4	@ (adr r2, 800dbec <CDC_Control_FS+0x1c>)
 800dbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbec:	0800dc7d 	.word	0x0800dc7d
 800dbf0:	0800dc7d 	.word	0x0800dc7d
 800dbf4:	0800dc7d 	.word	0x0800dc7d
 800dbf8:	0800dc7d 	.word	0x0800dc7d
 800dbfc:	0800dc7d 	.word	0x0800dc7d
 800dc00:	0800dc7d 	.word	0x0800dc7d
 800dc04:	0800dc7d 	.word	0x0800dc7d
 800dc08:	0800dc7d 	.word	0x0800dc7d
 800dc0c:	0800dc7d 	.word	0x0800dc7d
 800dc10:	0800dc7d 	.word	0x0800dc7d
 800dc14:	0800dc7d 	.word	0x0800dc7d
 800dc18:	0800dc7d 	.word	0x0800dc7d
 800dc1c:	0800dc7d 	.word	0x0800dc7d
 800dc20:	0800dc7d 	.word	0x0800dc7d
 800dc24:	0800dc7d 	.word	0x0800dc7d
 800dc28:	0800dc7d 	.word	0x0800dc7d
 800dc2c:	0800dc7d 	.word	0x0800dc7d
 800dc30:	0800dc7d 	.word	0x0800dc7d
 800dc34:	0800dc7d 	.word	0x0800dc7d
 800dc38:	0800dc7d 	.word	0x0800dc7d
 800dc3c:	0800dc7d 	.word	0x0800dc7d
 800dc40:	0800dc7d 	.word	0x0800dc7d
 800dc44:	0800dc7d 	.word	0x0800dc7d
 800dc48:	0800dc7d 	.word	0x0800dc7d
 800dc4c:	0800dc7d 	.word	0x0800dc7d
 800dc50:	0800dc7d 	.word	0x0800dc7d
 800dc54:	0800dc7d 	.word	0x0800dc7d
 800dc58:	0800dc7d 	.word	0x0800dc7d
 800dc5c:	0800dc7d 	.word	0x0800dc7d
 800dc60:	0800dc7d 	.word	0x0800dc7d
 800dc64:	0800dc7d 	.word	0x0800dc7d
 800dc68:	0800dc7d 	.word	0x0800dc7d
 800dc6c:	0800dc7d 	.word	0x0800dc7d
 800dc70:	0800dc7d 	.word	0x0800dc7d
 800dc74:	0800dc7d 	.word	0x0800dc7d
 800dc78:	0800dc7d 	.word	0x0800dc7d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dc7c:	bf00      	nop
  }

  return (USBD_OK);
 800dc7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr

0800dc8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dc96:	6879      	ldr	r1, [r7, #4]
 800dc98:	480c      	ldr	r0, [pc, #48]	@ (800dccc <CDC_Receive_FS+0x40>)
 800dc9a:	f7fe fe72 	bl	800c982 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dc9e:	480b      	ldr	r0, [pc, #44]	@ (800dccc <CDC_Receive_FS+0x40>)
 800dca0:	f7fe fe83 	bl	800c9aa <USBD_CDC_ReceivePacket>

  for (uint32_t i = 0; i < *Len; i++) {
 800dca4:	2300      	movs	r3, #0
 800dca6:	60fb      	str	r3, [r7, #12]
 800dca8:	e005      	b.n	800dcb6 <CDC_Receive_FS+0x2a>
	  printf("test");
 800dcaa:	4809      	ldr	r0, [pc, #36]	@ (800dcd0 <CDC_Receive_FS+0x44>)
 800dcac:	f001 fc68 	bl	800f580 <iprintf>
  for (uint32_t i = 0; i < *Len; i++) {
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	60fb      	str	r3, [r7, #12]
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	68fa      	ldr	r2, [r7, #12]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d3f4      	bcc.n	800dcaa <CDC_Receive_FS+0x1e>
//	  RingBuffer_PutChar(&comInputRingBuffer, Buf[i]);
  }
  return (USBD_OK);
 800dcc0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3710      	adds	r7, #16
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
 800dcca:	bf00      	nop
 800dccc:	20000f44 	.word	0x20000f44
 800dcd0:	08013890 	.word	0x08013890

0800dcd4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b083      	sub	sp, #12
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	4603      	mov	r3, r0
 800dcdc:	6039      	str	r1, [r7, #0]
 800dcde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	2212      	movs	r2, #18
 800dce4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dce6:	4b03      	ldr	r3, [pc, #12]	@ (800dcf4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	370c      	adds	r7, #12
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr
 800dcf4:	20000160 	.word	0x20000160

0800dcf8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	4603      	mov	r3, r0
 800dd00:	6039      	str	r1, [r7, #0]
 800dd02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	2204      	movs	r2, #4
 800dd08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dd0a:	4b03      	ldr	r3, [pc, #12]	@ (800dd18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	370c      	adds	r7, #12
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr
 800dd18:	20000174 	.word	0x20000174

0800dd1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	4603      	mov	r3, r0
 800dd24:	6039      	str	r1, [r7, #0]
 800dd26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd28:	79fb      	ldrb	r3, [r7, #7]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d105      	bne.n	800dd3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd2e:	683a      	ldr	r2, [r7, #0]
 800dd30:	4907      	ldr	r1, [pc, #28]	@ (800dd50 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd32:	4808      	ldr	r0, [pc, #32]	@ (800dd54 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd34:	f7ff fe22 	bl	800d97c <USBD_GetString>
 800dd38:	e004      	b.n	800dd44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd3a:	683a      	ldr	r2, [r7, #0]
 800dd3c:	4904      	ldr	r1, [pc, #16]	@ (800dd50 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd3e:	4805      	ldr	r0, [pc, #20]	@ (800dd54 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd40:	f7ff fe1c 	bl	800d97c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd44:	4b02      	ldr	r3, [pc, #8]	@ (800dd50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3708      	adds	r7, #8
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	20001a08 	.word	0x20001a08
 800dd54:	08013898 	.word	0x08013898

0800dd58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b082      	sub	sp, #8
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	4603      	mov	r3, r0
 800dd60:	6039      	str	r1, [r7, #0]
 800dd62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dd64:	683a      	ldr	r2, [r7, #0]
 800dd66:	4904      	ldr	r1, [pc, #16]	@ (800dd78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dd68:	4804      	ldr	r0, [pc, #16]	@ (800dd7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dd6a:	f7ff fe07 	bl	800d97c <USBD_GetString>
  return USBD_StrDesc;
 800dd6e:	4b02      	ldr	r3, [pc, #8]	@ (800dd78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3708      	adds	r7, #8
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	20001a08 	.word	0x20001a08
 800dd7c:	080138b0 	.word	0x080138b0

0800dd80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	4603      	mov	r3, r0
 800dd88:	6039      	str	r1, [r7, #0]
 800dd8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	221a      	movs	r2, #26
 800dd90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dd92:	f000 f843 	bl	800de1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dd96:	4b02      	ldr	r3, [pc, #8]	@ (800dda0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3708      	adds	r7, #8
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	20000178 	.word	0x20000178

0800dda4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	4603      	mov	r3, r0
 800ddac:	6039      	str	r1, [r7, #0]
 800ddae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ddb0:	79fb      	ldrb	r3, [r7, #7]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d105      	bne.n	800ddc2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddb6:	683a      	ldr	r2, [r7, #0]
 800ddb8:	4907      	ldr	r1, [pc, #28]	@ (800ddd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ddba:	4808      	ldr	r0, [pc, #32]	@ (800dddc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ddbc:	f7ff fdde 	bl	800d97c <USBD_GetString>
 800ddc0:	e004      	b.n	800ddcc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddc2:	683a      	ldr	r2, [r7, #0]
 800ddc4:	4904      	ldr	r1, [pc, #16]	@ (800ddd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ddc6:	4805      	ldr	r0, [pc, #20]	@ (800dddc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ddc8:	f7ff fdd8 	bl	800d97c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ddcc:	4b02      	ldr	r3, [pc, #8]	@ (800ddd8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3708      	adds	r7, #8
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	20001a08 	.word	0x20001a08
 800dddc:	080138c4 	.word	0x080138c4

0800dde0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	4603      	mov	r3, r0
 800dde8:	6039      	str	r1, [r7, #0]
 800ddea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ddec:	79fb      	ldrb	r3, [r7, #7]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d105      	bne.n	800ddfe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ddf2:	683a      	ldr	r2, [r7, #0]
 800ddf4:	4907      	ldr	r1, [pc, #28]	@ (800de14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ddf6:	4808      	ldr	r0, [pc, #32]	@ (800de18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ddf8:	f7ff fdc0 	bl	800d97c <USBD_GetString>
 800ddfc:	e004      	b.n	800de08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ddfe:	683a      	ldr	r2, [r7, #0]
 800de00:	4904      	ldr	r1, [pc, #16]	@ (800de14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de02:	4805      	ldr	r0, [pc, #20]	@ (800de18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de04:	f7ff fdba 	bl	800d97c <USBD_GetString>
  }
  return USBD_StrDesc;
 800de08:	4b02      	ldr	r3, [pc, #8]	@ (800de14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3708      	adds	r7, #8
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	20001a08 	.word	0x20001a08
 800de18:	080138d0 	.word	0x080138d0

0800de1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800de22:	68fa      	ldr	r2, [r7, #12]
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	4413      	add	r3, r2
 800de28:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d009      	beq.n	800de44 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800de30:	2208      	movs	r2, #8
 800de32:	4906      	ldr	r1, [pc, #24]	@ (800de4c <Get_SerialNum+0x30>)
 800de34:	68f8      	ldr	r0, [r7, #12]
 800de36:	f000 f80d 	bl	800de54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800de3a:	2204      	movs	r2, #4
 800de3c:	4904      	ldr	r1, [pc, #16]	@ (800de50 <Get_SerialNum+0x34>)
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 f808 	bl	800de54 <IntToUnicode>
  }
}
 800de44:	bf00      	nop
 800de46:	3710      	adds	r7, #16
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	2000017a 	.word	0x2000017a
 800de50:	2000018a 	.word	0x2000018a

0800de54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800de54:	b480      	push	{r7}
 800de56:	b087      	sub	sp, #28
 800de58:	af00      	add	r7, sp, #0
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	60b9      	str	r1, [r7, #8]
 800de5e:	4613      	mov	r3, r2
 800de60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800de62:	2300      	movs	r3, #0
 800de64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800de66:	2300      	movs	r3, #0
 800de68:	75fb      	strb	r3, [r7, #23]
 800de6a:	e027      	b.n	800debc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	0f1b      	lsrs	r3, r3, #28
 800de70:	2b09      	cmp	r3, #9
 800de72:	d80b      	bhi.n	800de8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	0f1b      	lsrs	r3, r3, #28
 800de78:	b2da      	uxtb	r2, r3
 800de7a:	7dfb      	ldrb	r3, [r7, #23]
 800de7c:	005b      	lsls	r3, r3, #1
 800de7e:	4619      	mov	r1, r3
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	440b      	add	r3, r1
 800de84:	3230      	adds	r2, #48	@ 0x30
 800de86:	b2d2      	uxtb	r2, r2
 800de88:	701a      	strb	r2, [r3, #0]
 800de8a:	e00a      	b.n	800dea2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	0f1b      	lsrs	r3, r3, #28
 800de90:	b2da      	uxtb	r2, r3
 800de92:	7dfb      	ldrb	r3, [r7, #23]
 800de94:	005b      	lsls	r3, r3, #1
 800de96:	4619      	mov	r1, r3
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	440b      	add	r3, r1
 800de9c:	3237      	adds	r2, #55	@ 0x37
 800de9e:	b2d2      	uxtb	r2, r2
 800dea0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	011b      	lsls	r3, r3, #4
 800dea6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dea8:	7dfb      	ldrb	r3, [r7, #23]
 800deaa:	005b      	lsls	r3, r3, #1
 800deac:	3301      	adds	r3, #1
 800deae:	68ba      	ldr	r2, [r7, #8]
 800deb0:	4413      	add	r3, r2
 800deb2:	2200      	movs	r2, #0
 800deb4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800deb6:	7dfb      	ldrb	r3, [r7, #23]
 800deb8:	3301      	adds	r3, #1
 800deba:	75fb      	strb	r3, [r7, #23]
 800debc:	7dfa      	ldrb	r2, [r7, #23]
 800debe:	79fb      	ldrb	r3, [r7, #7]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d3d3      	bcc.n	800de6c <IntToUnicode+0x18>
  }
}
 800dec4:	bf00      	nop
 800dec6:	bf00      	nop
 800dec8:	371c      	adds	r7, #28
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr
	...

0800ded4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b08a      	sub	sp, #40	@ 0x28
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dedc:	f107 0314 	add.w	r3, r7, #20
 800dee0:	2200      	movs	r2, #0
 800dee2:	601a      	str	r2, [r3, #0]
 800dee4:	605a      	str	r2, [r3, #4]
 800dee6:	609a      	str	r2, [r3, #8]
 800dee8:	60da      	str	r2, [r3, #12]
 800deea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4a20      	ldr	r2, [pc, #128]	@ (800df74 <HAL_PCD_MspInit+0xa0>)
 800def2:	4293      	cmp	r3, r2
 800def4:	d139      	bne.n	800df6a <HAL_PCD_MspInit+0x96>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800def6:	4b20      	ldr	r3, [pc, #128]	@ (800df78 <HAL_PCD_MspInit+0xa4>)
 800def8:	695b      	ldr	r3, [r3, #20]
 800defa:	4a1f      	ldr	r2, [pc, #124]	@ (800df78 <HAL_PCD_MspInit+0xa4>)
 800defc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800df00:	6153      	str	r3, [r2, #20]
 800df02:	4b1d      	ldr	r3, [pc, #116]	@ (800df78 <HAL_PCD_MspInit+0xa4>)
 800df04:	695b      	ldr	r3, [r3, #20]
 800df06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800df0a:	613b      	str	r3, [r7, #16]
 800df0c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800df0e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800df12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df14:	2302      	movs	r3, #2
 800df16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df18:	2300      	movs	r3, #0
 800df1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800df1c:	2303      	movs	r3, #3
 800df1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800df20:	230e      	movs	r3, #14
 800df22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df24:	f107 0314 	add.w	r3, r7, #20
 800df28:	4619      	mov	r1, r3
 800df2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800df2e:	f7f5 f8ed 	bl	800310c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800df32:	4b11      	ldr	r3, [pc, #68]	@ (800df78 <HAL_PCD_MspInit+0xa4>)
 800df34:	69db      	ldr	r3, [r3, #28]
 800df36:	4a10      	ldr	r2, [pc, #64]	@ (800df78 <HAL_PCD_MspInit+0xa4>)
 800df38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800df3c:	61d3      	str	r3, [r2, #28]
 800df3e:	4b0e      	ldr	r3, [pc, #56]	@ (800df78 <HAL_PCD_MspInit+0xa4>)
 800df40:	69db      	ldr	r3, [r3, #28]
 800df42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800df46:	60fb      	str	r3, [r7, #12]
 800df48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800df4a:	2200      	movs	r2, #0
 800df4c:	2100      	movs	r1, #0
 800df4e:	204a      	movs	r0, #74	@ 0x4a
 800df50:	f7f5 f82f 	bl	8002fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800df54:	204a      	movs	r0, #74	@ 0x4a
 800df56:	f7f5 f848 	bl	8002fea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800df5a:	2200      	movs	r2, #0
 800df5c:	2100      	movs	r1, #0
 800df5e:	204b      	movs	r0, #75	@ 0x4b
 800df60:	f7f5 f827 	bl	8002fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800df64:	204b      	movs	r0, #75	@ 0x4b
 800df66:	f7f5 f840 	bl	8002fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800df6a:	bf00      	nop
 800df6c:	3728      	adds	r7, #40	@ 0x28
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop
 800df74:	40005c00 	.word	0x40005c00
 800df78:	40021000 	.word	0x40021000

0800df7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800df90:	4619      	mov	r1, r3
 800df92:	4610      	mov	r0, r2
 800df94:	f7fe fdc1 	bl	800cb1a <USBD_LL_SetupStage>
}
 800df98:	bf00      	nop
 800df9a:	3708      	adds	r7, #8
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800dfb2:	78fa      	ldrb	r2, [r7, #3]
 800dfb4:	6879      	ldr	r1, [r7, #4]
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	4413      	add	r3, r2
 800dfbc:	00db      	lsls	r3, r3, #3
 800dfbe:	440b      	add	r3, r1
 800dfc0:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800dfc4:	681a      	ldr	r2, [r3, #0]
 800dfc6:	78fb      	ldrb	r3, [r7, #3]
 800dfc8:	4619      	mov	r1, r3
 800dfca:	f7fe fdf3 	bl	800cbb4 <USBD_LL_DataOutStage>
}
 800dfce:	bf00      	nop
 800dfd0:	3708      	adds	r7, #8
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}

0800dfd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfd6:	b580      	push	{r7, lr}
 800dfd8:	b082      	sub	sp, #8
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	6078      	str	r0, [r7, #4]
 800dfde:	460b      	mov	r3, r1
 800dfe0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800dfe8:	78fa      	ldrb	r2, [r7, #3]
 800dfea:	6879      	ldr	r1, [r7, #4]
 800dfec:	4613      	mov	r3, r2
 800dfee:	009b      	lsls	r3, r3, #2
 800dff0:	4413      	add	r3, r2
 800dff2:	00db      	lsls	r3, r3, #3
 800dff4:	440b      	add	r3, r1
 800dff6:	333c      	adds	r3, #60	@ 0x3c
 800dff8:	681a      	ldr	r2, [r3, #0]
 800dffa:	78fb      	ldrb	r3, [r7, #3]
 800dffc:	4619      	mov	r1, r3
 800dffe:	f7fe fe4a 	bl	800cc96 <USBD_LL_DataInStage>
}
 800e002:	bf00      	nop
 800e004:	3708      	adds	r7, #8
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}

0800e00a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e00a:	b580      	push	{r7, lr}
 800e00c:	b082      	sub	sp, #8
 800e00e:	af00      	add	r7, sp, #0
 800e010:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800e018:	4618      	mov	r0, r3
 800e01a:	f7fe ff5d 	bl	800ced8 <USBD_LL_SOF>
}
 800e01e:	bf00      	nop
 800e020:	3708      	adds	r7, #8
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}

0800e026 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e026:	b580      	push	{r7, lr}
 800e028:	b084      	sub	sp, #16
 800e02a:	af00      	add	r7, sp, #0
 800e02c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e02e:	2301      	movs	r3, #1
 800e030:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	689b      	ldr	r3, [r3, #8]
 800e036:	2b02      	cmp	r3, #2
 800e038:	d001      	beq.n	800e03e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e03a:	f7f4 fa95 	bl	8002568 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800e044:	7bfa      	ldrb	r2, [r7, #15]
 800e046:	4611      	mov	r1, r2
 800e048:	4618      	mov	r0, r3
 800e04a:	f7fe ff0a 	bl	800ce62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800e054:	4618      	mov	r0, r3
 800e056:	f7fe fec3 	bl	800cde0 <USBD_LL_Reset>
}
 800e05a:	bf00      	nop
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
	...

0800e064 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800e072:	4618      	mov	r0, r3
 800e074:	f7fe ff05 	bl	800ce82 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	699b      	ldr	r3, [r3, #24]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d005      	beq.n	800e08c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e080:	4b04      	ldr	r3, [pc, #16]	@ (800e094 <HAL_PCD_SuspendCallback+0x30>)
 800e082:	691b      	ldr	r3, [r3, #16]
 800e084:	4a03      	ldr	r2, [pc, #12]	@ (800e094 <HAL_PCD_SuspendCallback+0x30>)
 800e086:	f043 0306 	orr.w	r3, r3, #6
 800e08a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e08c:	bf00      	nop
 800e08e:	3708      	adds	r7, #8
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}
 800e094:	e000ed00 	.word	0xe000ed00

0800e098 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7fe ff00 	bl	800ceac <USBD_LL_Resume>
}
 800e0ac:	bf00      	nop
 800e0ae:	3708      	adds	r7, #8
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b082      	sub	sp, #8
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e0bc:	4a28      	ldr	r2, [pc, #160]	@ (800e160 <USBD_LL_Init+0xac>)
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f8c2 32e8 	str.w	r3, [r2, #744]	@ 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	4a26      	ldr	r2, [pc, #152]	@ (800e160 <USBD_LL_Init+0xac>)
 800e0c8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800e0cc:	4b24      	ldr	r3, [pc, #144]	@ (800e160 <USBD_LL_Init+0xac>)
 800e0ce:	4a25      	ldr	r2, [pc, #148]	@ (800e164 <USBD_LL_Init+0xb0>)
 800e0d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e0d2:	4b23      	ldr	r3, [pc, #140]	@ (800e160 <USBD_LL_Init+0xac>)
 800e0d4:	2208      	movs	r2, #8
 800e0d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e0d8:	4b21      	ldr	r3, [pc, #132]	@ (800e160 <USBD_LL_Init+0xac>)
 800e0da:	2202      	movs	r2, #2
 800e0dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e0de:	4b20      	ldr	r3, [pc, #128]	@ (800e160 <USBD_LL_Init+0xac>)
 800e0e0:	2202      	movs	r2, #2
 800e0e2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e0e4:	4b1e      	ldr	r3, [pc, #120]	@ (800e160 <USBD_LL_Init+0xac>)
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e0ea:	4b1d      	ldr	r3, [pc, #116]	@ (800e160 <USBD_LL_Init+0xac>)
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e0f0:	481b      	ldr	r0, [pc, #108]	@ (800e160 <USBD_LL_Init+0xac>)
 800e0f2:	f7f5 ff58 	bl	8003fa6 <HAL_PCD_Init>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d001      	beq.n	800e100 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800e0fc:	f7f4 fa34 	bl	8002568 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e106:	2318      	movs	r3, #24
 800e108:	2200      	movs	r2, #0
 800e10a:	2100      	movs	r1, #0
 800e10c:	f7f7 fbe0 	bl	80058d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e116:	2358      	movs	r3, #88	@ 0x58
 800e118:	2200      	movs	r2, #0
 800e11a:	2180      	movs	r1, #128	@ 0x80
 800e11c:	f7f7 fbd8 	bl	80058d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e126:	23c0      	movs	r3, #192	@ 0xc0
 800e128:	2200      	movs	r2, #0
 800e12a:	2181      	movs	r1, #129	@ 0x81
 800e12c:	f7f7 fbd0 	bl	80058d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e136:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800e13a:	2200      	movs	r2, #0
 800e13c:	2101      	movs	r1, #1
 800e13e:	f7f7 fbc7 	bl	80058d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e148:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e14c:	2200      	movs	r2, #0
 800e14e:	2182      	movs	r1, #130	@ 0x82
 800e150:	f7f7 fbbe 	bl	80058d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e154:	2300      	movs	r3, #0
}
 800e156:	4618      	mov	r0, r3
 800e158:	3708      	adds	r7, #8
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
 800e15e:	bf00      	nop
 800e160:	20001c08 	.word	0x20001c08
 800e164:	40005c00 	.word	0x40005c00

0800e168 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b084      	sub	sp, #16
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e170:	2300      	movs	r3, #0
 800e172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e174:	2300      	movs	r3, #0
 800e176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e17e:	4618      	mov	r0, r3
 800e180:	f7f5 ffe3 	bl	800414a <HAL_PCD_Start>
 800e184:	4603      	mov	r3, r0
 800e186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e188:	7bfb      	ldrb	r3, [r7, #15]
 800e18a:	4618      	mov	r0, r3
 800e18c:	f000 f954 	bl	800e438 <USBD_Get_USB_Status>
 800e190:	4603      	mov	r3, r0
 800e192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e194:	7bbb      	ldrb	r3, [r7, #14]
}
 800e196:	4618      	mov	r0, r3
 800e198:	3710      	adds	r7, #16
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e19e:	b580      	push	{r7, lr}
 800e1a0:	b084      	sub	sp, #16
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
 800e1a6:	4608      	mov	r0, r1
 800e1a8:	4611      	mov	r1, r2
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	70fb      	strb	r3, [r7, #3]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	70bb      	strb	r3, [r7, #2]
 800e1b4:	4613      	mov	r3, r2
 800e1b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e1c6:	78bb      	ldrb	r3, [r7, #2]
 800e1c8:	883a      	ldrh	r2, [r7, #0]
 800e1ca:	78f9      	ldrb	r1, [r7, #3]
 800e1cc:	f7f6 f8dc 	bl	8004388 <HAL_PCD_EP_Open>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1d4:	7bfb      	ldrb	r3, [r7, #15]
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f000 f92e 	bl	800e438 <USBD_Get_USB_Status>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3710      	adds	r7, #16
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}

0800e1ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1ea:	b580      	push	{r7, lr}
 800e1ec:	b084      	sub	sp, #16
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	6078      	str	r0, [r7, #4]
 800e1f2:	460b      	mov	r3, r1
 800e1f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e204:	78fa      	ldrb	r2, [r7, #3]
 800e206:	4611      	mov	r1, r2
 800e208:	4618      	mov	r0, r3
 800e20a:	f7f6 f91a 	bl	8004442 <HAL_PCD_EP_Close>
 800e20e:	4603      	mov	r3, r0
 800e210:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e212:	7bfb      	ldrb	r3, [r7, #15]
 800e214:	4618      	mov	r0, r3
 800e216:	f000 f90f 	bl	800e438 <USBD_Get_USB_Status>
 800e21a:	4603      	mov	r3, r0
 800e21c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e21e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e220:	4618      	mov	r0, r3
 800e222:	3710      	adds	r7, #16
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b084      	sub	sp, #16
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	460b      	mov	r3, r1
 800e232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e234:	2300      	movs	r3, #0
 800e236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e238:	2300      	movs	r3, #0
 800e23a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e242:	78fa      	ldrb	r2, [r7, #3]
 800e244:	4611      	mov	r1, r2
 800e246:	4618      	mov	r0, r3
 800e248:	f7f6 f9c3 	bl	80045d2 <HAL_PCD_EP_SetStall>
 800e24c:	4603      	mov	r3, r0
 800e24e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e250:	7bfb      	ldrb	r3, [r7, #15]
 800e252:	4618      	mov	r0, r3
 800e254:	f000 f8f0 	bl	800e438 <USBD_Get_USB_Status>
 800e258:	4603      	mov	r3, r0
 800e25a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e25c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3710      	adds	r7, #16
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e266:	b580      	push	{r7, lr}
 800e268:	b084      	sub	sp, #16
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
 800e26e:	460b      	mov	r3, r1
 800e270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e272:	2300      	movs	r3, #0
 800e274:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e276:	2300      	movs	r3, #0
 800e278:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e280:	78fa      	ldrb	r2, [r7, #3]
 800e282:	4611      	mov	r1, r2
 800e284:	4618      	mov	r0, r3
 800e286:	f7f6 f9f6 	bl	8004676 <HAL_PCD_EP_ClrStall>
 800e28a:	4603      	mov	r3, r0
 800e28c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e28e:	7bfb      	ldrb	r3, [r7, #15]
 800e290:	4618      	mov	r0, r3
 800e292:	f000 f8d1 	bl	800e438 <USBD_Get_USB_Status>
 800e296:	4603      	mov	r3, r0
 800e298:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e29a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3710      	adds	r7, #16
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}

0800e2a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b085      	sub	sp, #20
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	460b      	mov	r3, r1
 800e2ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e2b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e2b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	da0c      	bge.n	800e2da <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e2c0:	78fb      	ldrb	r3, [r7, #3]
 800e2c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e2c6:	68f9      	ldr	r1, [r7, #12]
 800e2c8:	1c5a      	adds	r2, r3, #1
 800e2ca:	4613      	mov	r3, r2
 800e2cc:	009b      	lsls	r3, r3, #2
 800e2ce:	4413      	add	r3, r2
 800e2d0:	00db      	lsls	r3, r3, #3
 800e2d2:	440b      	add	r3, r1
 800e2d4:	3302      	adds	r3, #2
 800e2d6:	781b      	ldrb	r3, [r3, #0]
 800e2d8:	e00b      	b.n	800e2f2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e2da:	78fb      	ldrb	r3, [r7, #3]
 800e2dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e2e0:	68f9      	ldr	r1, [r7, #12]
 800e2e2:	4613      	mov	r3, r2
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	4413      	add	r3, r2
 800e2e8:	00db      	lsls	r3, r3, #3
 800e2ea:	440b      	add	r3, r1
 800e2ec:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800e2f0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3714      	adds	r7, #20
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr

0800e2fe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b084      	sub	sp, #16
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
 800e306:	460b      	mov	r3, r1
 800e308:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e30a:	2300      	movs	r3, #0
 800e30c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e30e:	2300      	movs	r3, #0
 800e310:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e318:	78fa      	ldrb	r2, [r7, #3]
 800e31a:	4611      	mov	r1, r2
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7f6 f80e 	bl	800433e <HAL_PCD_SetAddress>
 800e322:	4603      	mov	r3, r0
 800e324:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e326:	7bfb      	ldrb	r3, [r7, #15]
 800e328:	4618      	mov	r0, r3
 800e32a:	f000 f885 	bl	800e438 <USBD_Get_USB_Status>
 800e32e:	4603      	mov	r3, r0
 800e330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e332:	7bbb      	ldrb	r3, [r7, #14]
}
 800e334:	4618      	mov	r0, r3
 800e336:	3710      	adds	r7, #16
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b086      	sub	sp, #24
 800e340:	af00      	add	r7, sp, #0
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	607a      	str	r2, [r7, #4]
 800e346:	461a      	mov	r2, r3
 800e348:	460b      	mov	r3, r1
 800e34a:	72fb      	strb	r3, [r7, #11]
 800e34c:	4613      	mov	r3, r2
 800e34e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e350:	2300      	movs	r3, #0
 800e352:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e354:	2300      	movs	r3, #0
 800e356:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e35e:	893b      	ldrh	r3, [r7, #8]
 800e360:	7af9      	ldrb	r1, [r7, #11]
 800e362:	687a      	ldr	r2, [r7, #4]
 800e364:	f7f6 f8fe 	bl	8004564 <HAL_PCD_EP_Transmit>
 800e368:	4603      	mov	r3, r0
 800e36a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e36c:	7dfb      	ldrb	r3, [r7, #23]
 800e36e:	4618      	mov	r0, r3
 800e370:	f000 f862 	bl	800e438 <USBD_Get_USB_Status>
 800e374:	4603      	mov	r3, r0
 800e376:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e378:	7dbb      	ldrb	r3, [r7, #22]
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3718      	adds	r7, #24
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e382:	b580      	push	{r7, lr}
 800e384:	b086      	sub	sp, #24
 800e386:	af00      	add	r7, sp, #0
 800e388:	60f8      	str	r0, [r7, #12]
 800e38a:	607a      	str	r2, [r7, #4]
 800e38c:	461a      	mov	r2, r3
 800e38e:	460b      	mov	r3, r1
 800e390:	72fb      	strb	r3, [r7, #11]
 800e392:	4613      	mov	r3, r2
 800e394:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e396:	2300      	movs	r3, #0
 800e398:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e39a:	2300      	movs	r3, #0
 800e39c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e3a4:	893b      	ldrh	r3, [r7, #8]
 800e3a6:	7af9      	ldrb	r1, [r7, #11]
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	f7f6 f892 	bl	80044d2 <HAL_PCD_EP_Receive>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3b2:	7dfb      	ldrb	r3, [r7, #23]
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f000 f83f 	bl	800e438 <USBD_Get_USB_Status>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e3be:	7dbb      	ldrb	r3, [r7, #22]
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3718      	adds	r7, #24
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e3da:	78fa      	ldrb	r2, [r7, #3]
 800e3dc:	4611      	mov	r1, r2
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7f6 f8a8 	bl	8004534 <HAL_PCD_EP_GetRxCount>
 800e3e4:	4603      	mov	r3, r0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3708      	adds	r7, #8
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
	...

0800e3f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b083      	sub	sp, #12
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e3f8:	4b03      	ldr	r3, [pc, #12]	@ (800e408 <USBD_static_malloc+0x18>)
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	370c      	adds	r7, #12
 800e3fe:	46bd      	mov	sp, r7
 800e400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e404:	4770      	bx	lr
 800e406:	bf00      	nop
 800e408:	20001ef4 	.word	0x20001ef4

0800e40c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b083      	sub	sp, #12
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]

}
 800e414:	bf00      	nop
 800e416:	370c      	adds	r7, #12
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr

0800e420 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e420:	b480      	push	{r7}
 800e422:	b083      	sub	sp, #12
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	460b      	mov	r3, r1
 800e42a:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800e42c:	bf00      	nop
 800e42e:	370c      	adds	r7, #12
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr

0800e438 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e438:	b480      	push	{r7}
 800e43a:	b085      	sub	sp, #20
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	4603      	mov	r3, r0
 800e440:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e442:	2300      	movs	r3, #0
 800e444:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e446:	79fb      	ldrb	r3, [r7, #7]
 800e448:	2b03      	cmp	r3, #3
 800e44a:	d817      	bhi.n	800e47c <USBD_Get_USB_Status+0x44>
 800e44c:	a201      	add	r2, pc, #4	@ (adr r2, 800e454 <USBD_Get_USB_Status+0x1c>)
 800e44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e452:	bf00      	nop
 800e454:	0800e465 	.word	0x0800e465
 800e458:	0800e46b 	.word	0x0800e46b
 800e45c:	0800e471 	.word	0x0800e471
 800e460:	0800e477 	.word	0x0800e477
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e464:	2300      	movs	r3, #0
 800e466:	73fb      	strb	r3, [r7, #15]
    break;
 800e468:	e00b      	b.n	800e482 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e46a:	2302      	movs	r3, #2
 800e46c:	73fb      	strb	r3, [r7, #15]
    break;
 800e46e:	e008      	b.n	800e482 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e470:	2301      	movs	r3, #1
 800e472:	73fb      	strb	r3, [r7, #15]
    break;
 800e474:	e005      	b.n	800e482 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e476:	2302      	movs	r3, #2
 800e478:	73fb      	strb	r3, [r7, #15]
    break;
 800e47a:	e002      	b.n	800e482 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e47c:	2302      	movs	r3, #2
 800e47e:	73fb      	strb	r3, [r7, #15]
    break;
 800e480:	bf00      	nop
  }
  return usb_status;
 800e482:	7bfb      	ldrb	r3, [r7, #15]
}
 800e484:	4618      	mov	r0, r3
 800e486:	3714      	adds	r7, #20
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr

0800e490 <atoi>:
 800e490:	220a      	movs	r2, #10
 800e492:	2100      	movs	r1, #0
 800e494:	f000 b87c 	b.w	800e590 <strtol>

0800e498 <_strtol_l.constprop.0>:
 800e498:	2b24      	cmp	r3, #36	@ 0x24
 800e49a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e49e:	4686      	mov	lr, r0
 800e4a0:	4690      	mov	r8, r2
 800e4a2:	d801      	bhi.n	800e4a8 <_strtol_l.constprop.0+0x10>
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d106      	bne.n	800e4b6 <_strtol_l.constprop.0+0x1e>
 800e4a8:	f001 fa78 	bl	800f99c <__errno>
 800e4ac:	2316      	movs	r3, #22
 800e4ae:	6003      	str	r3, [r0, #0]
 800e4b0:	2000      	movs	r0, #0
 800e4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4b6:	4834      	ldr	r0, [pc, #208]	@ (800e588 <_strtol_l.constprop.0+0xf0>)
 800e4b8:	460d      	mov	r5, r1
 800e4ba:	462a      	mov	r2, r5
 800e4bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e4c0:	5d06      	ldrb	r6, [r0, r4]
 800e4c2:	f016 0608 	ands.w	r6, r6, #8
 800e4c6:	d1f8      	bne.n	800e4ba <_strtol_l.constprop.0+0x22>
 800e4c8:	2c2d      	cmp	r4, #45	@ 0x2d
 800e4ca:	d12d      	bne.n	800e528 <_strtol_l.constprop.0+0x90>
 800e4cc:	782c      	ldrb	r4, [r5, #0]
 800e4ce:	2601      	movs	r6, #1
 800e4d0:	1c95      	adds	r5, r2, #2
 800e4d2:	f033 0210 	bics.w	r2, r3, #16
 800e4d6:	d109      	bne.n	800e4ec <_strtol_l.constprop.0+0x54>
 800e4d8:	2c30      	cmp	r4, #48	@ 0x30
 800e4da:	d12a      	bne.n	800e532 <_strtol_l.constprop.0+0x9a>
 800e4dc:	782a      	ldrb	r2, [r5, #0]
 800e4de:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e4e2:	2a58      	cmp	r2, #88	@ 0x58
 800e4e4:	d125      	bne.n	800e532 <_strtol_l.constprop.0+0x9a>
 800e4e6:	786c      	ldrb	r4, [r5, #1]
 800e4e8:	2310      	movs	r3, #16
 800e4ea:	3502      	adds	r5, #2
 800e4ec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e4f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	fbbc f9f3 	udiv	r9, ip, r3
 800e4fa:	4610      	mov	r0, r2
 800e4fc:	fb03 ca19 	mls	sl, r3, r9, ip
 800e500:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e504:	2f09      	cmp	r7, #9
 800e506:	d81b      	bhi.n	800e540 <_strtol_l.constprop.0+0xa8>
 800e508:	463c      	mov	r4, r7
 800e50a:	42a3      	cmp	r3, r4
 800e50c:	dd27      	ble.n	800e55e <_strtol_l.constprop.0+0xc6>
 800e50e:	1c57      	adds	r7, r2, #1
 800e510:	d007      	beq.n	800e522 <_strtol_l.constprop.0+0x8a>
 800e512:	4581      	cmp	r9, r0
 800e514:	d320      	bcc.n	800e558 <_strtol_l.constprop.0+0xc0>
 800e516:	d101      	bne.n	800e51c <_strtol_l.constprop.0+0x84>
 800e518:	45a2      	cmp	sl, r4
 800e51a:	db1d      	blt.n	800e558 <_strtol_l.constprop.0+0xc0>
 800e51c:	fb00 4003 	mla	r0, r0, r3, r4
 800e520:	2201      	movs	r2, #1
 800e522:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e526:	e7eb      	b.n	800e500 <_strtol_l.constprop.0+0x68>
 800e528:	2c2b      	cmp	r4, #43	@ 0x2b
 800e52a:	bf04      	itt	eq
 800e52c:	782c      	ldrbeq	r4, [r5, #0]
 800e52e:	1c95      	addeq	r5, r2, #2
 800e530:	e7cf      	b.n	800e4d2 <_strtol_l.constprop.0+0x3a>
 800e532:	2b00      	cmp	r3, #0
 800e534:	d1da      	bne.n	800e4ec <_strtol_l.constprop.0+0x54>
 800e536:	2c30      	cmp	r4, #48	@ 0x30
 800e538:	bf0c      	ite	eq
 800e53a:	2308      	moveq	r3, #8
 800e53c:	230a      	movne	r3, #10
 800e53e:	e7d5      	b.n	800e4ec <_strtol_l.constprop.0+0x54>
 800e540:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e544:	2f19      	cmp	r7, #25
 800e546:	d801      	bhi.n	800e54c <_strtol_l.constprop.0+0xb4>
 800e548:	3c37      	subs	r4, #55	@ 0x37
 800e54a:	e7de      	b.n	800e50a <_strtol_l.constprop.0+0x72>
 800e54c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e550:	2f19      	cmp	r7, #25
 800e552:	d804      	bhi.n	800e55e <_strtol_l.constprop.0+0xc6>
 800e554:	3c57      	subs	r4, #87	@ 0x57
 800e556:	e7d8      	b.n	800e50a <_strtol_l.constprop.0+0x72>
 800e558:	f04f 32ff 	mov.w	r2, #4294967295
 800e55c:	e7e1      	b.n	800e522 <_strtol_l.constprop.0+0x8a>
 800e55e:	1c53      	adds	r3, r2, #1
 800e560:	d108      	bne.n	800e574 <_strtol_l.constprop.0+0xdc>
 800e562:	2322      	movs	r3, #34	@ 0x22
 800e564:	f8ce 3000 	str.w	r3, [lr]
 800e568:	4660      	mov	r0, ip
 800e56a:	f1b8 0f00 	cmp.w	r8, #0
 800e56e:	d0a0      	beq.n	800e4b2 <_strtol_l.constprop.0+0x1a>
 800e570:	1e69      	subs	r1, r5, #1
 800e572:	e006      	b.n	800e582 <_strtol_l.constprop.0+0xea>
 800e574:	b106      	cbz	r6, 800e578 <_strtol_l.constprop.0+0xe0>
 800e576:	4240      	negs	r0, r0
 800e578:	f1b8 0f00 	cmp.w	r8, #0
 800e57c:	d099      	beq.n	800e4b2 <_strtol_l.constprop.0+0x1a>
 800e57e:	2a00      	cmp	r2, #0
 800e580:	d1f6      	bne.n	800e570 <_strtol_l.constprop.0+0xd8>
 800e582:	f8c8 1000 	str.w	r1, [r8]
 800e586:	e794      	b.n	800e4b2 <_strtol_l.constprop.0+0x1a>
 800e588:	08013925 	.word	0x08013925

0800e58c <_strtol_r>:
 800e58c:	f7ff bf84 	b.w	800e498 <_strtol_l.constprop.0>

0800e590 <strtol>:
 800e590:	4613      	mov	r3, r2
 800e592:	460a      	mov	r2, r1
 800e594:	4601      	mov	r1, r0
 800e596:	4802      	ldr	r0, [pc, #8]	@ (800e5a0 <strtol+0x10>)
 800e598:	6800      	ldr	r0, [r0, #0]
 800e59a:	f7ff bf7d 	b.w	800e498 <_strtol_l.constprop.0>
 800e59e:	bf00      	nop
 800e5a0:	200001a0 	.word	0x200001a0

0800e5a4 <__cvt>:
 800e5a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a8:	ec57 6b10 	vmov	r6, r7, d0
 800e5ac:	2f00      	cmp	r7, #0
 800e5ae:	460c      	mov	r4, r1
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	463b      	mov	r3, r7
 800e5b4:	bfbb      	ittet	lt
 800e5b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e5ba:	461f      	movlt	r7, r3
 800e5bc:	2300      	movge	r3, #0
 800e5be:	232d      	movlt	r3, #45	@ 0x2d
 800e5c0:	700b      	strb	r3, [r1, #0]
 800e5c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e5c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e5c8:	4691      	mov	r9, r2
 800e5ca:	f023 0820 	bic.w	r8, r3, #32
 800e5ce:	bfbc      	itt	lt
 800e5d0:	4632      	movlt	r2, r6
 800e5d2:	4616      	movlt	r6, r2
 800e5d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e5d8:	d005      	beq.n	800e5e6 <__cvt+0x42>
 800e5da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e5de:	d100      	bne.n	800e5e2 <__cvt+0x3e>
 800e5e0:	3401      	adds	r4, #1
 800e5e2:	2102      	movs	r1, #2
 800e5e4:	e000      	b.n	800e5e8 <__cvt+0x44>
 800e5e6:	2103      	movs	r1, #3
 800e5e8:	ab03      	add	r3, sp, #12
 800e5ea:	9301      	str	r3, [sp, #4]
 800e5ec:	ab02      	add	r3, sp, #8
 800e5ee:	9300      	str	r3, [sp, #0]
 800e5f0:	ec47 6b10 	vmov	d0, r6, r7
 800e5f4:	4653      	mov	r3, sl
 800e5f6:	4622      	mov	r2, r4
 800e5f8:	f001 fa9a 	bl	800fb30 <_dtoa_r>
 800e5fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e600:	4605      	mov	r5, r0
 800e602:	d119      	bne.n	800e638 <__cvt+0x94>
 800e604:	f019 0f01 	tst.w	r9, #1
 800e608:	d00e      	beq.n	800e628 <__cvt+0x84>
 800e60a:	eb00 0904 	add.w	r9, r0, r4
 800e60e:	2200      	movs	r2, #0
 800e610:	2300      	movs	r3, #0
 800e612:	4630      	mov	r0, r6
 800e614:	4639      	mov	r1, r7
 800e616:	f7f2 fa57 	bl	8000ac8 <__aeabi_dcmpeq>
 800e61a:	b108      	cbz	r0, 800e620 <__cvt+0x7c>
 800e61c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e620:	2230      	movs	r2, #48	@ 0x30
 800e622:	9b03      	ldr	r3, [sp, #12]
 800e624:	454b      	cmp	r3, r9
 800e626:	d31e      	bcc.n	800e666 <__cvt+0xc2>
 800e628:	9b03      	ldr	r3, [sp, #12]
 800e62a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e62c:	1b5b      	subs	r3, r3, r5
 800e62e:	4628      	mov	r0, r5
 800e630:	6013      	str	r3, [r2, #0]
 800e632:	b004      	add	sp, #16
 800e634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e638:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e63c:	eb00 0904 	add.w	r9, r0, r4
 800e640:	d1e5      	bne.n	800e60e <__cvt+0x6a>
 800e642:	7803      	ldrb	r3, [r0, #0]
 800e644:	2b30      	cmp	r3, #48	@ 0x30
 800e646:	d10a      	bne.n	800e65e <__cvt+0xba>
 800e648:	2200      	movs	r2, #0
 800e64a:	2300      	movs	r3, #0
 800e64c:	4630      	mov	r0, r6
 800e64e:	4639      	mov	r1, r7
 800e650:	f7f2 fa3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e654:	b918      	cbnz	r0, 800e65e <__cvt+0xba>
 800e656:	f1c4 0401 	rsb	r4, r4, #1
 800e65a:	f8ca 4000 	str.w	r4, [sl]
 800e65e:	f8da 3000 	ldr.w	r3, [sl]
 800e662:	4499      	add	r9, r3
 800e664:	e7d3      	b.n	800e60e <__cvt+0x6a>
 800e666:	1c59      	adds	r1, r3, #1
 800e668:	9103      	str	r1, [sp, #12]
 800e66a:	701a      	strb	r2, [r3, #0]
 800e66c:	e7d9      	b.n	800e622 <__cvt+0x7e>

0800e66e <__exponent>:
 800e66e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e670:	2900      	cmp	r1, #0
 800e672:	bfba      	itte	lt
 800e674:	4249      	neglt	r1, r1
 800e676:	232d      	movlt	r3, #45	@ 0x2d
 800e678:	232b      	movge	r3, #43	@ 0x2b
 800e67a:	2909      	cmp	r1, #9
 800e67c:	7002      	strb	r2, [r0, #0]
 800e67e:	7043      	strb	r3, [r0, #1]
 800e680:	dd29      	ble.n	800e6d6 <__exponent+0x68>
 800e682:	f10d 0307 	add.w	r3, sp, #7
 800e686:	461d      	mov	r5, r3
 800e688:	270a      	movs	r7, #10
 800e68a:	461a      	mov	r2, r3
 800e68c:	fbb1 f6f7 	udiv	r6, r1, r7
 800e690:	fb07 1416 	mls	r4, r7, r6, r1
 800e694:	3430      	adds	r4, #48	@ 0x30
 800e696:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e69a:	460c      	mov	r4, r1
 800e69c:	2c63      	cmp	r4, #99	@ 0x63
 800e69e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e6a2:	4631      	mov	r1, r6
 800e6a4:	dcf1      	bgt.n	800e68a <__exponent+0x1c>
 800e6a6:	3130      	adds	r1, #48	@ 0x30
 800e6a8:	1e94      	subs	r4, r2, #2
 800e6aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e6ae:	1c41      	adds	r1, r0, #1
 800e6b0:	4623      	mov	r3, r4
 800e6b2:	42ab      	cmp	r3, r5
 800e6b4:	d30a      	bcc.n	800e6cc <__exponent+0x5e>
 800e6b6:	f10d 0309 	add.w	r3, sp, #9
 800e6ba:	1a9b      	subs	r3, r3, r2
 800e6bc:	42ac      	cmp	r4, r5
 800e6be:	bf88      	it	hi
 800e6c0:	2300      	movhi	r3, #0
 800e6c2:	3302      	adds	r3, #2
 800e6c4:	4403      	add	r3, r0
 800e6c6:	1a18      	subs	r0, r3, r0
 800e6c8:	b003      	add	sp, #12
 800e6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e6d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e6d4:	e7ed      	b.n	800e6b2 <__exponent+0x44>
 800e6d6:	2330      	movs	r3, #48	@ 0x30
 800e6d8:	3130      	adds	r1, #48	@ 0x30
 800e6da:	7083      	strb	r3, [r0, #2]
 800e6dc:	70c1      	strb	r1, [r0, #3]
 800e6de:	1d03      	adds	r3, r0, #4
 800e6e0:	e7f1      	b.n	800e6c6 <__exponent+0x58>
	...

0800e6e4 <_printf_float>:
 800e6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e8:	b08d      	sub	sp, #52	@ 0x34
 800e6ea:	460c      	mov	r4, r1
 800e6ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e6f0:	4616      	mov	r6, r2
 800e6f2:	461f      	mov	r7, r3
 800e6f4:	4605      	mov	r5, r0
 800e6f6:	f001 f907 	bl	800f908 <_localeconv_r>
 800e6fa:	6803      	ldr	r3, [r0, #0]
 800e6fc:	9304      	str	r3, [sp, #16]
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7f1 fdb6 	bl	8000270 <strlen>
 800e704:	2300      	movs	r3, #0
 800e706:	930a      	str	r3, [sp, #40]	@ 0x28
 800e708:	f8d8 3000 	ldr.w	r3, [r8]
 800e70c:	9005      	str	r0, [sp, #20]
 800e70e:	3307      	adds	r3, #7
 800e710:	f023 0307 	bic.w	r3, r3, #7
 800e714:	f103 0208 	add.w	r2, r3, #8
 800e718:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e71c:	f8d4 b000 	ldr.w	fp, [r4]
 800e720:	f8c8 2000 	str.w	r2, [r8]
 800e724:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e728:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e72c:	9307      	str	r3, [sp, #28]
 800e72e:	f8cd 8018 	str.w	r8, [sp, #24]
 800e732:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e736:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e73a:	4b9c      	ldr	r3, [pc, #624]	@ (800e9ac <_printf_float+0x2c8>)
 800e73c:	f04f 32ff 	mov.w	r2, #4294967295
 800e740:	f7f2 f9f4 	bl	8000b2c <__aeabi_dcmpun>
 800e744:	bb70      	cbnz	r0, 800e7a4 <_printf_float+0xc0>
 800e746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e74a:	4b98      	ldr	r3, [pc, #608]	@ (800e9ac <_printf_float+0x2c8>)
 800e74c:	f04f 32ff 	mov.w	r2, #4294967295
 800e750:	f7f2 f9ce 	bl	8000af0 <__aeabi_dcmple>
 800e754:	bb30      	cbnz	r0, 800e7a4 <_printf_float+0xc0>
 800e756:	2200      	movs	r2, #0
 800e758:	2300      	movs	r3, #0
 800e75a:	4640      	mov	r0, r8
 800e75c:	4649      	mov	r1, r9
 800e75e:	f7f2 f9bd 	bl	8000adc <__aeabi_dcmplt>
 800e762:	b110      	cbz	r0, 800e76a <_printf_float+0x86>
 800e764:	232d      	movs	r3, #45	@ 0x2d
 800e766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e76a:	4a91      	ldr	r2, [pc, #580]	@ (800e9b0 <_printf_float+0x2cc>)
 800e76c:	4b91      	ldr	r3, [pc, #580]	@ (800e9b4 <_printf_float+0x2d0>)
 800e76e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e772:	bf94      	ite	ls
 800e774:	4690      	movls	r8, r2
 800e776:	4698      	movhi	r8, r3
 800e778:	2303      	movs	r3, #3
 800e77a:	6123      	str	r3, [r4, #16]
 800e77c:	f02b 0304 	bic.w	r3, fp, #4
 800e780:	6023      	str	r3, [r4, #0]
 800e782:	f04f 0900 	mov.w	r9, #0
 800e786:	9700      	str	r7, [sp, #0]
 800e788:	4633      	mov	r3, r6
 800e78a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e78c:	4621      	mov	r1, r4
 800e78e:	4628      	mov	r0, r5
 800e790:	f000 f9d2 	bl	800eb38 <_printf_common>
 800e794:	3001      	adds	r0, #1
 800e796:	f040 808d 	bne.w	800e8b4 <_printf_float+0x1d0>
 800e79a:	f04f 30ff 	mov.w	r0, #4294967295
 800e79e:	b00d      	add	sp, #52	@ 0x34
 800e7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7a4:	4642      	mov	r2, r8
 800e7a6:	464b      	mov	r3, r9
 800e7a8:	4640      	mov	r0, r8
 800e7aa:	4649      	mov	r1, r9
 800e7ac:	f7f2 f9be 	bl	8000b2c <__aeabi_dcmpun>
 800e7b0:	b140      	cbz	r0, 800e7c4 <_printf_float+0xe0>
 800e7b2:	464b      	mov	r3, r9
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	bfbc      	itt	lt
 800e7b8:	232d      	movlt	r3, #45	@ 0x2d
 800e7ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e7be:	4a7e      	ldr	r2, [pc, #504]	@ (800e9b8 <_printf_float+0x2d4>)
 800e7c0:	4b7e      	ldr	r3, [pc, #504]	@ (800e9bc <_printf_float+0x2d8>)
 800e7c2:	e7d4      	b.n	800e76e <_printf_float+0x8a>
 800e7c4:	6863      	ldr	r3, [r4, #4]
 800e7c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e7ca:	9206      	str	r2, [sp, #24]
 800e7cc:	1c5a      	adds	r2, r3, #1
 800e7ce:	d13b      	bne.n	800e848 <_printf_float+0x164>
 800e7d0:	2306      	movs	r3, #6
 800e7d2:	6063      	str	r3, [r4, #4]
 800e7d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e7d8:	2300      	movs	r3, #0
 800e7da:	6022      	str	r2, [r4, #0]
 800e7dc:	9303      	str	r3, [sp, #12]
 800e7de:	ab0a      	add	r3, sp, #40	@ 0x28
 800e7e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e7e4:	ab09      	add	r3, sp, #36	@ 0x24
 800e7e6:	9300      	str	r3, [sp, #0]
 800e7e8:	6861      	ldr	r1, [r4, #4]
 800e7ea:	ec49 8b10 	vmov	d0, r8, r9
 800e7ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e7f2:	4628      	mov	r0, r5
 800e7f4:	f7ff fed6 	bl	800e5a4 <__cvt>
 800e7f8:	9b06      	ldr	r3, [sp, #24]
 800e7fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e7fc:	2b47      	cmp	r3, #71	@ 0x47
 800e7fe:	4680      	mov	r8, r0
 800e800:	d129      	bne.n	800e856 <_printf_float+0x172>
 800e802:	1cc8      	adds	r0, r1, #3
 800e804:	db02      	blt.n	800e80c <_printf_float+0x128>
 800e806:	6863      	ldr	r3, [r4, #4]
 800e808:	4299      	cmp	r1, r3
 800e80a:	dd41      	ble.n	800e890 <_printf_float+0x1ac>
 800e80c:	f1aa 0a02 	sub.w	sl, sl, #2
 800e810:	fa5f fa8a 	uxtb.w	sl, sl
 800e814:	3901      	subs	r1, #1
 800e816:	4652      	mov	r2, sl
 800e818:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e81c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e81e:	f7ff ff26 	bl	800e66e <__exponent>
 800e822:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e824:	1813      	adds	r3, r2, r0
 800e826:	2a01      	cmp	r2, #1
 800e828:	4681      	mov	r9, r0
 800e82a:	6123      	str	r3, [r4, #16]
 800e82c:	dc02      	bgt.n	800e834 <_printf_float+0x150>
 800e82e:	6822      	ldr	r2, [r4, #0]
 800e830:	07d2      	lsls	r2, r2, #31
 800e832:	d501      	bpl.n	800e838 <_printf_float+0x154>
 800e834:	3301      	adds	r3, #1
 800e836:	6123      	str	r3, [r4, #16]
 800e838:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d0a2      	beq.n	800e786 <_printf_float+0xa2>
 800e840:	232d      	movs	r3, #45	@ 0x2d
 800e842:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e846:	e79e      	b.n	800e786 <_printf_float+0xa2>
 800e848:	9a06      	ldr	r2, [sp, #24]
 800e84a:	2a47      	cmp	r2, #71	@ 0x47
 800e84c:	d1c2      	bne.n	800e7d4 <_printf_float+0xf0>
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d1c0      	bne.n	800e7d4 <_printf_float+0xf0>
 800e852:	2301      	movs	r3, #1
 800e854:	e7bd      	b.n	800e7d2 <_printf_float+0xee>
 800e856:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e85a:	d9db      	bls.n	800e814 <_printf_float+0x130>
 800e85c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e860:	d118      	bne.n	800e894 <_printf_float+0x1b0>
 800e862:	2900      	cmp	r1, #0
 800e864:	6863      	ldr	r3, [r4, #4]
 800e866:	dd0b      	ble.n	800e880 <_printf_float+0x19c>
 800e868:	6121      	str	r1, [r4, #16]
 800e86a:	b913      	cbnz	r3, 800e872 <_printf_float+0x18e>
 800e86c:	6822      	ldr	r2, [r4, #0]
 800e86e:	07d0      	lsls	r0, r2, #31
 800e870:	d502      	bpl.n	800e878 <_printf_float+0x194>
 800e872:	3301      	adds	r3, #1
 800e874:	440b      	add	r3, r1
 800e876:	6123      	str	r3, [r4, #16]
 800e878:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e87a:	f04f 0900 	mov.w	r9, #0
 800e87e:	e7db      	b.n	800e838 <_printf_float+0x154>
 800e880:	b913      	cbnz	r3, 800e888 <_printf_float+0x1a4>
 800e882:	6822      	ldr	r2, [r4, #0]
 800e884:	07d2      	lsls	r2, r2, #31
 800e886:	d501      	bpl.n	800e88c <_printf_float+0x1a8>
 800e888:	3302      	adds	r3, #2
 800e88a:	e7f4      	b.n	800e876 <_printf_float+0x192>
 800e88c:	2301      	movs	r3, #1
 800e88e:	e7f2      	b.n	800e876 <_printf_float+0x192>
 800e890:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e896:	4299      	cmp	r1, r3
 800e898:	db05      	blt.n	800e8a6 <_printf_float+0x1c2>
 800e89a:	6823      	ldr	r3, [r4, #0]
 800e89c:	6121      	str	r1, [r4, #16]
 800e89e:	07d8      	lsls	r0, r3, #31
 800e8a0:	d5ea      	bpl.n	800e878 <_printf_float+0x194>
 800e8a2:	1c4b      	adds	r3, r1, #1
 800e8a4:	e7e7      	b.n	800e876 <_printf_float+0x192>
 800e8a6:	2900      	cmp	r1, #0
 800e8a8:	bfd4      	ite	le
 800e8aa:	f1c1 0202 	rsble	r2, r1, #2
 800e8ae:	2201      	movgt	r2, #1
 800e8b0:	4413      	add	r3, r2
 800e8b2:	e7e0      	b.n	800e876 <_printf_float+0x192>
 800e8b4:	6823      	ldr	r3, [r4, #0]
 800e8b6:	055a      	lsls	r2, r3, #21
 800e8b8:	d407      	bmi.n	800e8ca <_printf_float+0x1e6>
 800e8ba:	6923      	ldr	r3, [r4, #16]
 800e8bc:	4642      	mov	r2, r8
 800e8be:	4631      	mov	r1, r6
 800e8c0:	4628      	mov	r0, r5
 800e8c2:	47b8      	blx	r7
 800e8c4:	3001      	adds	r0, #1
 800e8c6:	d12b      	bne.n	800e920 <_printf_float+0x23c>
 800e8c8:	e767      	b.n	800e79a <_printf_float+0xb6>
 800e8ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e8ce:	f240 80dd 	bls.w	800ea8c <_printf_float+0x3a8>
 800e8d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	2300      	movs	r3, #0
 800e8da:	f7f2 f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	d033      	beq.n	800e94a <_printf_float+0x266>
 800e8e2:	4a37      	ldr	r2, [pc, #220]	@ (800e9c0 <_printf_float+0x2dc>)
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	4631      	mov	r1, r6
 800e8e8:	4628      	mov	r0, r5
 800e8ea:	47b8      	blx	r7
 800e8ec:	3001      	adds	r0, #1
 800e8ee:	f43f af54 	beq.w	800e79a <_printf_float+0xb6>
 800e8f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e8f6:	4543      	cmp	r3, r8
 800e8f8:	db02      	blt.n	800e900 <_printf_float+0x21c>
 800e8fa:	6823      	ldr	r3, [r4, #0]
 800e8fc:	07d8      	lsls	r0, r3, #31
 800e8fe:	d50f      	bpl.n	800e920 <_printf_float+0x23c>
 800e900:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e904:	4631      	mov	r1, r6
 800e906:	4628      	mov	r0, r5
 800e908:	47b8      	blx	r7
 800e90a:	3001      	adds	r0, #1
 800e90c:	f43f af45 	beq.w	800e79a <_printf_float+0xb6>
 800e910:	f04f 0900 	mov.w	r9, #0
 800e914:	f108 38ff 	add.w	r8, r8, #4294967295
 800e918:	f104 0a1a 	add.w	sl, r4, #26
 800e91c:	45c8      	cmp	r8, r9
 800e91e:	dc09      	bgt.n	800e934 <_printf_float+0x250>
 800e920:	6823      	ldr	r3, [r4, #0]
 800e922:	079b      	lsls	r3, r3, #30
 800e924:	f100 8103 	bmi.w	800eb2e <_printf_float+0x44a>
 800e928:	68e0      	ldr	r0, [r4, #12]
 800e92a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e92c:	4298      	cmp	r0, r3
 800e92e:	bfb8      	it	lt
 800e930:	4618      	movlt	r0, r3
 800e932:	e734      	b.n	800e79e <_printf_float+0xba>
 800e934:	2301      	movs	r3, #1
 800e936:	4652      	mov	r2, sl
 800e938:	4631      	mov	r1, r6
 800e93a:	4628      	mov	r0, r5
 800e93c:	47b8      	blx	r7
 800e93e:	3001      	adds	r0, #1
 800e940:	f43f af2b 	beq.w	800e79a <_printf_float+0xb6>
 800e944:	f109 0901 	add.w	r9, r9, #1
 800e948:	e7e8      	b.n	800e91c <_printf_float+0x238>
 800e94a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	dc39      	bgt.n	800e9c4 <_printf_float+0x2e0>
 800e950:	4a1b      	ldr	r2, [pc, #108]	@ (800e9c0 <_printf_float+0x2dc>)
 800e952:	2301      	movs	r3, #1
 800e954:	4631      	mov	r1, r6
 800e956:	4628      	mov	r0, r5
 800e958:	47b8      	blx	r7
 800e95a:	3001      	adds	r0, #1
 800e95c:	f43f af1d 	beq.w	800e79a <_printf_float+0xb6>
 800e960:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e964:	ea59 0303 	orrs.w	r3, r9, r3
 800e968:	d102      	bne.n	800e970 <_printf_float+0x28c>
 800e96a:	6823      	ldr	r3, [r4, #0]
 800e96c:	07d9      	lsls	r1, r3, #31
 800e96e:	d5d7      	bpl.n	800e920 <_printf_float+0x23c>
 800e970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e974:	4631      	mov	r1, r6
 800e976:	4628      	mov	r0, r5
 800e978:	47b8      	blx	r7
 800e97a:	3001      	adds	r0, #1
 800e97c:	f43f af0d 	beq.w	800e79a <_printf_float+0xb6>
 800e980:	f04f 0a00 	mov.w	sl, #0
 800e984:	f104 0b1a 	add.w	fp, r4, #26
 800e988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e98a:	425b      	negs	r3, r3
 800e98c:	4553      	cmp	r3, sl
 800e98e:	dc01      	bgt.n	800e994 <_printf_float+0x2b0>
 800e990:	464b      	mov	r3, r9
 800e992:	e793      	b.n	800e8bc <_printf_float+0x1d8>
 800e994:	2301      	movs	r3, #1
 800e996:	465a      	mov	r2, fp
 800e998:	4631      	mov	r1, r6
 800e99a:	4628      	mov	r0, r5
 800e99c:	47b8      	blx	r7
 800e99e:	3001      	adds	r0, #1
 800e9a0:	f43f aefb 	beq.w	800e79a <_printf_float+0xb6>
 800e9a4:	f10a 0a01 	add.w	sl, sl, #1
 800e9a8:	e7ee      	b.n	800e988 <_printf_float+0x2a4>
 800e9aa:	bf00      	nop
 800e9ac:	7fefffff 	.word	0x7fefffff
 800e9b0:	08013a25 	.word	0x08013a25
 800e9b4:	08013a29 	.word	0x08013a29
 800e9b8:	08013a2d 	.word	0x08013a2d
 800e9bc:	08013a31 	.word	0x08013a31
 800e9c0:	08013cbf 	.word	0x08013cbf
 800e9c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e9c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e9ca:	4553      	cmp	r3, sl
 800e9cc:	bfa8      	it	ge
 800e9ce:	4653      	movge	r3, sl
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	4699      	mov	r9, r3
 800e9d4:	dc36      	bgt.n	800ea44 <_printf_float+0x360>
 800e9d6:	f04f 0b00 	mov.w	fp, #0
 800e9da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e9de:	f104 021a 	add.w	r2, r4, #26
 800e9e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e9e4:	9306      	str	r3, [sp, #24]
 800e9e6:	eba3 0309 	sub.w	r3, r3, r9
 800e9ea:	455b      	cmp	r3, fp
 800e9ec:	dc31      	bgt.n	800ea52 <_printf_float+0x36e>
 800e9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9f0:	459a      	cmp	sl, r3
 800e9f2:	dc3a      	bgt.n	800ea6a <_printf_float+0x386>
 800e9f4:	6823      	ldr	r3, [r4, #0]
 800e9f6:	07da      	lsls	r2, r3, #31
 800e9f8:	d437      	bmi.n	800ea6a <_printf_float+0x386>
 800e9fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9fc:	ebaa 0903 	sub.w	r9, sl, r3
 800ea00:	9b06      	ldr	r3, [sp, #24]
 800ea02:	ebaa 0303 	sub.w	r3, sl, r3
 800ea06:	4599      	cmp	r9, r3
 800ea08:	bfa8      	it	ge
 800ea0a:	4699      	movge	r9, r3
 800ea0c:	f1b9 0f00 	cmp.w	r9, #0
 800ea10:	dc33      	bgt.n	800ea7a <_printf_float+0x396>
 800ea12:	f04f 0800 	mov.w	r8, #0
 800ea16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea1a:	f104 0b1a 	add.w	fp, r4, #26
 800ea1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea20:	ebaa 0303 	sub.w	r3, sl, r3
 800ea24:	eba3 0309 	sub.w	r3, r3, r9
 800ea28:	4543      	cmp	r3, r8
 800ea2a:	f77f af79 	ble.w	800e920 <_printf_float+0x23c>
 800ea2e:	2301      	movs	r3, #1
 800ea30:	465a      	mov	r2, fp
 800ea32:	4631      	mov	r1, r6
 800ea34:	4628      	mov	r0, r5
 800ea36:	47b8      	blx	r7
 800ea38:	3001      	adds	r0, #1
 800ea3a:	f43f aeae 	beq.w	800e79a <_printf_float+0xb6>
 800ea3e:	f108 0801 	add.w	r8, r8, #1
 800ea42:	e7ec      	b.n	800ea1e <_printf_float+0x33a>
 800ea44:	4642      	mov	r2, r8
 800ea46:	4631      	mov	r1, r6
 800ea48:	4628      	mov	r0, r5
 800ea4a:	47b8      	blx	r7
 800ea4c:	3001      	adds	r0, #1
 800ea4e:	d1c2      	bne.n	800e9d6 <_printf_float+0x2f2>
 800ea50:	e6a3      	b.n	800e79a <_printf_float+0xb6>
 800ea52:	2301      	movs	r3, #1
 800ea54:	4631      	mov	r1, r6
 800ea56:	4628      	mov	r0, r5
 800ea58:	9206      	str	r2, [sp, #24]
 800ea5a:	47b8      	blx	r7
 800ea5c:	3001      	adds	r0, #1
 800ea5e:	f43f ae9c 	beq.w	800e79a <_printf_float+0xb6>
 800ea62:	9a06      	ldr	r2, [sp, #24]
 800ea64:	f10b 0b01 	add.w	fp, fp, #1
 800ea68:	e7bb      	b.n	800e9e2 <_printf_float+0x2fe>
 800ea6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea6e:	4631      	mov	r1, r6
 800ea70:	4628      	mov	r0, r5
 800ea72:	47b8      	blx	r7
 800ea74:	3001      	adds	r0, #1
 800ea76:	d1c0      	bne.n	800e9fa <_printf_float+0x316>
 800ea78:	e68f      	b.n	800e79a <_printf_float+0xb6>
 800ea7a:	9a06      	ldr	r2, [sp, #24]
 800ea7c:	464b      	mov	r3, r9
 800ea7e:	4442      	add	r2, r8
 800ea80:	4631      	mov	r1, r6
 800ea82:	4628      	mov	r0, r5
 800ea84:	47b8      	blx	r7
 800ea86:	3001      	adds	r0, #1
 800ea88:	d1c3      	bne.n	800ea12 <_printf_float+0x32e>
 800ea8a:	e686      	b.n	800e79a <_printf_float+0xb6>
 800ea8c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ea90:	f1ba 0f01 	cmp.w	sl, #1
 800ea94:	dc01      	bgt.n	800ea9a <_printf_float+0x3b6>
 800ea96:	07db      	lsls	r3, r3, #31
 800ea98:	d536      	bpl.n	800eb08 <_printf_float+0x424>
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	4642      	mov	r2, r8
 800ea9e:	4631      	mov	r1, r6
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	47b8      	blx	r7
 800eaa4:	3001      	adds	r0, #1
 800eaa6:	f43f ae78 	beq.w	800e79a <_printf_float+0xb6>
 800eaaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eaae:	4631      	mov	r1, r6
 800eab0:	4628      	mov	r0, r5
 800eab2:	47b8      	blx	r7
 800eab4:	3001      	adds	r0, #1
 800eab6:	f43f ae70 	beq.w	800e79a <_printf_float+0xb6>
 800eaba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800eabe:	2200      	movs	r2, #0
 800eac0:	2300      	movs	r3, #0
 800eac2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eac6:	f7f1 ffff 	bl	8000ac8 <__aeabi_dcmpeq>
 800eaca:	b9c0      	cbnz	r0, 800eafe <_printf_float+0x41a>
 800eacc:	4653      	mov	r3, sl
 800eace:	f108 0201 	add.w	r2, r8, #1
 800ead2:	4631      	mov	r1, r6
 800ead4:	4628      	mov	r0, r5
 800ead6:	47b8      	blx	r7
 800ead8:	3001      	adds	r0, #1
 800eada:	d10c      	bne.n	800eaf6 <_printf_float+0x412>
 800eadc:	e65d      	b.n	800e79a <_printf_float+0xb6>
 800eade:	2301      	movs	r3, #1
 800eae0:	465a      	mov	r2, fp
 800eae2:	4631      	mov	r1, r6
 800eae4:	4628      	mov	r0, r5
 800eae6:	47b8      	blx	r7
 800eae8:	3001      	adds	r0, #1
 800eaea:	f43f ae56 	beq.w	800e79a <_printf_float+0xb6>
 800eaee:	f108 0801 	add.w	r8, r8, #1
 800eaf2:	45d0      	cmp	r8, sl
 800eaf4:	dbf3      	blt.n	800eade <_printf_float+0x3fa>
 800eaf6:	464b      	mov	r3, r9
 800eaf8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800eafc:	e6df      	b.n	800e8be <_printf_float+0x1da>
 800eafe:	f04f 0800 	mov.w	r8, #0
 800eb02:	f104 0b1a 	add.w	fp, r4, #26
 800eb06:	e7f4      	b.n	800eaf2 <_printf_float+0x40e>
 800eb08:	2301      	movs	r3, #1
 800eb0a:	4642      	mov	r2, r8
 800eb0c:	e7e1      	b.n	800ead2 <_printf_float+0x3ee>
 800eb0e:	2301      	movs	r3, #1
 800eb10:	464a      	mov	r2, r9
 800eb12:	4631      	mov	r1, r6
 800eb14:	4628      	mov	r0, r5
 800eb16:	47b8      	blx	r7
 800eb18:	3001      	adds	r0, #1
 800eb1a:	f43f ae3e 	beq.w	800e79a <_printf_float+0xb6>
 800eb1e:	f108 0801 	add.w	r8, r8, #1
 800eb22:	68e3      	ldr	r3, [r4, #12]
 800eb24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eb26:	1a5b      	subs	r3, r3, r1
 800eb28:	4543      	cmp	r3, r8
 800eb2a:	dcf0      	bgt.n	800eb0e <_printf_float+0x42a>
 800eb2c:	e6fc      	b.n	800e928 <_printf_float+0x244>
 800eb2e:	f04f 0800 	mov.w	r8, #0
 800eb32:	f104 0919 	add.w	r9, r4, #25
 800eb36:	e7f4      	b.n	800eb22 <_printf_float+0x43e>

0800eb38 <_printf_common>:
 800eb38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb3c:	4616      	mov	r6, r2
 800eb3e:	4698      	mov	r8, r3
 800eb40:	688a      	ldr	r2, [r1, #8]
 800eb42:	690b      	ldr	r3, [r1, #16]
 800eb44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	bfb8      	it	lt
 800eb4c:	4613      	movlt	r3, r2
 800eb4e:	6033      	str	r3, [r6, #0]
 800eb50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eb54:	4607      	mov	r7, r0
 800eb56:	460c      	mov	r4, r1
 800eb58:	b10a      	cbz	r2, 800eb5e <_printf_common+0x26>
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	6033      	str	r3, [r6, #0]
 800eb5e:	6823      	ldr	r3, [r4, #0]
 800eb60:	0699      	lsls	r1, r3, #26
 800eb62:	bf42      	ittt	mi
 800eb64:	6833      	ldrmi	r3, [r6, #0]
 800eb66:	3302      	addmi	r3, #2
 800eb68:	6033      	strmi	r3, [r6, #0]
 800eb6a:	6825      	ldr	r5, [r4, #0]
 800eb6c:	f015 0506 	ands.w	r5, r5, #6
 800eb70:	d106      	bne.n	800eb80 <_printf_common+0x48>
 800eb72:	f104 0a19 	add.w	sl, r4, #25
 800eb76:	68e3      	ldr	r3, [r4, #12]
 800eb78:	6832      	ldr	r2, [r6, #0]
 800eb7a:	1a9b      	subs	r3, r3, r2
 800eb7c:	42ab      	cmp	r3, r5
 800eb7e:	dc26      	bgt.n	800ebce <_printf_common+0x96>
 800eb80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eb84:	6822      	ldr	r2, [r4, #0]
 800eb86:	3b00      	subs	r3, #0
 800eb88:	bf18      	it	ne
 800eb8a:	2301      	movne	r3, #1
 800eb8c:	0692      	lsls	r2, r2, #26
 800eb8e:	d42b      	bmi.n	800ebe8 <_printf_common+0xb0>
 800eb90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eb94:	4641      	mov	r1, r8
 800eb96:	4638      	mov	r0, r7
 800eb98:	47c8      	blx	r9
 800eb9a:	3001      	adds	r0, #1
 800eb9c:	d01e      	beq.n	800ebdc <_printf_common+0xa4>
 800eb9e:	6823      	ldr	r3, [r4, #0]
 800eba0:	6922      	ldr	r2, [r4, #16]
 800eba2:	f003 0306 	and.w	r3, r3, #6
 800eba6:	2b04      	cmp	r3, #4
 800eba8:	bf02      	ittt	eq
 800ebaa:	68e5      	ldreq	r5, [r4, #12]
 800ebac:	6833      	ldreq	r3, [r6, #0]
 800ebae:	1aed      	subeq	r5, r5, r3
 800ebb0:	68a3      	ldr	r3, [r4, #8]
 800ebb2:	bf0c      	ite	eq
 800ebb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebb8:	2500      	movne	r5, #0
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	bfc4      	itt	gt
 800ebbe:	1a9b      	subgt	r3, r3, r2
 800ebc0:	18ed      	addgt	r5, r5, r3
 800ebc2:	2600      	movs	r6, #0
 800ebc4:	341a      	adds	r4, #26
 800ebc6:	42b5      	cmp	r5, r6
 800ebc8:	d11a      	bne.n	800ec00 <_printf_common+0xc8>
 800ebca:	2000      	movs	r0, #0
 800ebcc:	e008      	b.n	800ebe0 <_printf_common+0xa8>
 800ebce:	2301      	movs	r3, #1
 800ebd0:	4652      	mov	r2, sl
 800ebd2:	4641      	mov	r1, r8
 800ebd4:	4638      	mov	r0, r7
 800ebd6:	47c8      	blx	r9
 800ebd8:	3001      	adds	r0, #1
 800ebda:	d103      	bne.n	800ebe4 <_printf_common+0xac>
 800ebdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ebe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebe4:	3501      	adds	r5, #1
 800ebe6:	e7c6      	b.n	800eb76 <_printf_common+0x3e>
 800ebe8:	18e1      	adds	r1, r4, r3
 800ebea:	1c5a      	adds	r2, r3, #1
 800ebec:	2030      	movs	r0, #48	@ 0x30
 800ebee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ebf2:	4422      	add	r2, r4
 800ebf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ebf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ebfc:	3302      	adds	r3, #2
 800ebfe:	e7c7      	b.n	800eb90 <_printf_common+0x58>
 800ec00:	2301      	movs	r3, #1
 800ec02:	4622      	mov	r2, r4
 800ec04:	4641      	mov	r1, r8
 800ec06:	4638      	mov	r0, r7
 800ec08:	47c8      	blx	r9
 800ec0a:	3001      	adds	r0, #1
 800ec0c:	d0e6      	beq.n	800ebdc <_printf_common+0xa4>
 800ec0e:	3601      	adds	r6, #1
 800ec10:	e7d9      	b.n	800ebc6 <_printf_common+0x8e>
	...

0800ec14 <_printf_i>:
 800ec14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec18:	7e0f      	ldrb	r7, [r1, #24]
 800ec1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ec1c:	2f78      	cmp	r7, #120	@ 0x78
 800ec1e:	4691      	mov	r9, r2
 800ec20:	4680      	mov	r8, r0
 800ec22:	460c      	mov	r4, r1
 800ec24:	469a      	mov	sl, r3
 800ec26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ec2a:	d807      	bhi.n	800ec3c <_printf_i+0x28>
 800ec2c:	2f62      	cmp	r7, #98	@ 0x62
 800ec2e:	d80a      	bhi.n	800ec46 <_printf_i+0x32>
 800ec30:	2f00      	cmp	r7, #0
 800ec32:	f000 80d2 	beq.w	800edda <_printf_i+0x1c6>
 800ec36:	2f58      	cmp	r7, #88	@ 0x58
 800ec38:	f000 80b9 	beq.w	800edae <_printf_i+0x19a>
 800ec3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ec44:	e03a      	b.n	800ecbc <_printf_i+0xa8>
 800ec46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ec4a:	2b15      	cmp	r3, #21
 800ec4c:	d8f6      	bhi.n	800ec3c <_printf_i+0x28>
 800ec4e:	a101      	add	r1, pc, #4	@ (adr r1, 800ec54 <_printf_i+0x40>)
 800ec50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec54:	0800ecad 	.word	0x0800ecad
 800ec58:	0800ecc1 	.word	0x0800ecc1
 800ec5c:	0800ec3d 	.word	0x0800ec3d
 800ec60:	0800ec3d 	.word	0x0800ec3d
 800ec64:	0800ec3d 	.word	0x0800ec3d
 800ec68:	0800ec3d 	.word	0x0800ec3d
 800ec6c:	0800ecc1 	.word	0x0800ecc1
 800ec70:	0800ec3d 	.word	0x0800ec3d
 800ec74:	0800ec3d 	.word	0x0800ec3d
 800ec78:	0800ec3d 	.word	0x0800ec3d
 800ec7c:	0800ec3d 	.word	0x0800ec3d
 800ec80:	0800edc1 	.word	0x0800edc1
 800ec84:	0800eceb 	.word	0x0800eceb
 800ec88:	0800ed7b 	.word	0x0800ed7b
 800ec8c:	0800ec3d 	.word	0x0800ec3d
 800ec90:	0800ec3d 	.word	0x0800ec3d
 800ec94:	0800ede3 	.word	0x0800ede3
 800ec98:	0800ec3d 	.word	0x0800ec3d
 800ec9c:	0800eceb 	.word	0x0800eceb
 800eca0:	0800ec3d 	.word	0x0800ec3d
 800eca4:	0800ec3d 	.word	0x0800ec3d
 800eca8:	0800ed83 	.word	0x0800ed83
 800ecac:	6833      	ldr	r3, [r6, #0]
 800ecae:	1d1a      	adds	r2, r3, #4
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	6032      	str	r2, [r6, #0]
 800ecb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ecb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	e09d      	b.n	800edfc <_printf_i+0x1e8>
 800ecc0:	6833      	ldr	r3, [r6, #0]
 800ecc2:	6820      	ldr	r0, [r4, #0]
 800ecc4:	1d19      	adds	r1, r3, #4
 800ecc6:	6031      	str	r1, [r6, #0]
 800ecc8:	0606      	lsls	r6, r0, #24
 800ecca:	d501      	bpl.n	800ecd0 <_printf_i+0xbc>
 800eccc:	681d      	ldr	r5, [r3, #0]
 800ecce:	e003      	b.n	800ecd8 <_printf_i+0xc4>
 800ecd0:	0645      	lsls	r5, r0, #25
 800ecd2:	d5fb      	bpl.n	800eccc <_printf_i+0xb8>
 800ecd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ecd8:	2d00      	cmp	r5, #0
 800ecda:	da03      	bge.n	800ece4 <_printf_i+0xd0>
 800ecdc:	232d      	movs	r3, #45	@ 0x2d
 800ecde:	426d      	negs	r5, r5
 800ece0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ece4:	4859      	ldr	r0, [pc, #356]	@ (800ee4c <_printf_i+0x238>)
 800ece6:	230a      	movs	r3, #10
 800ece8:	e011      	b.n	800ed0e <_printf_i+0xfa>
 800ecea:	6821      	ldr	r1, [r4, #0]
 800ecec:	6833      	ldr	r3, [r6, #0]
 800ecee:	0608      	lsls	r0, r1, #24
 800ecf0:	f853 5b04 	ldr.w	r5, [r3], #4
 800ecf4:	d402      	bmi.n	800ecfc <_printf_i+0xe8>
 800ecf6:	0649      	lsls	r1, r1, #25
 800ecf8:	bf48      	it	mi
 800ecfa:	b2ad      	uxthmi	r5, r5
 800ecfc:	2f6f      	cmp	r7, #111	@ 0x6f
 800ecfe:	4853      	ldr	r0, [pc, #332]	@ (800ee4c <_printf_i+0x238>)
 800ed00:	6033      	str	r3, [r6, #0]
 800ed02:	bf14      	ite	ne
 800ed04:	230a      	movne	r3, #10
 800ed06:	2308      	moveq	r3, #8
 800ed08:	2100      	movs	r1, #0
 800ed0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ed0e:	6866      	ldr	r6, [r4, #4]
 800ed10:	60a6      	str	r6, [r4, #8]
 800ed12:	2e00      	cmp	r6, #0
 800ed14:	bfa2      	ittt	ge
 800ed16:	6821      	ldrge	r1, [r4, #0]
 800ed18:	f021 0104 	bicge.w	r1, r1, #4
 800ed1c:	6021      	strge	r1, [r4, #0]
 800ed1e:	b90d      	cbnz	r5, 800ed24 <_printf_i+0x110>
 800ed20:	2e00      	cmp	r6, #0
 800ed22:	d04b      	beq.n	800edbc <_printf_i+0x1a8>
 800ed24:	4616      	mov	r6, r2
 800ed26:	fbb5 f1f3 	udiv	r1, r5, r3
 800ed2a:	fb03 5711 	mls	r7, r3, r1, r5
 800ed2e:	5dc7      	ldrb	r7, [r0, r7]
 800ed30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ed34:	462f      	mov	r7, r5
 800ed36:	42bb      	cmp	r3, r7
 800ed38:	460d      	mov	r5, r1
 800ed3a:	d9f4      	bls.n	800ed26 <_printf_i+0x112>
 800ed3c:	2b08      	cmp	r3, #8
 800ed3e:	d10b      	bne.n	800ed58 <_printf_i+0x144>
 800ed40:	6823      	ldr	r3, [r4, #0]
 800ed42:	07df      	lsls	r7, r3, #31
 800ed44:	d508      	bpl.n	800ed58 <_printf_i+0x144>
 800ed46:	6923      	ldr	r3, [r4, #16]
 800ed48:	6861      	ldr	r1, [r4, #4]
 800ed4a:	4299      	cmp	r1, r3
 800ed4c:	bfde      	ittt	le
 800ed4e:	2330      	movle	r3, #48	@ 0x30
 800ed50:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed54:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ed58:	1b92      	subs	r2, r2, r6
 800ed5a:	6122      	str	r2, [r4, #16]
 800ed5c:	f8cd a000 	str.w	sl, [sp]
 800ed60:	464b      	mov	r3, r9
 800ed62:	aa03      	add	r2, sp, #12
 800ed64:	4621      	mov	r1, r4
 800ed66:	4640      	mov	r0, r8
 800ed68:	f7ff fee6 	bl	800eb38 <_printf_common>
 800ed6c:	3001      	adds	r0, #1
 800ed6e:	d14a      	bne.n	800ee06 <_printf_i+0x1f2>
 800ed70:	f04f 30ff 	mov.w	r0, #4294967295
 800ed74:	b004      	add	sp, #16
 800ed76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed7a:	6823      	ldr	r3, [r4, #0]
 800ed7c:	f043 0320 	orr.w	r3, r3, #32
 800ed80:	6023      	str	r3, [r4, #0]
 800ed82:	4833      	ldr	r0, [pc, #204]	@ (800ee50 <_printf_i+0x23c>)
 800ed84:	2778      	movs	r7, #120	@ 0x78
 800ed86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ed8a:	6823      	ldr	r3, [r4, #0]
 800ed8c:	6831      	ldr	r1, [r6, #0]
 800ed8e:	061f      	lsls	r7, r3, #24
 800ed90:	f851 5b04 	ldr.w	r5, [r1], #4
 800ed94:	d402      	bmi.n	800ed9c <_printf_i+0x188>
 800ed96:	065f      	lsls	r7, r3, #25
 800ed98:	bf48      	it	mi
 800ed9a:	b2ad      	uxthmi	r5, r5
 800ed9c:	6031      	str	r1, [r6, #0]
 800ed9e:	07d9      	lsls	r1, r3, #31
 800eda0:	bf44      	itt	mi
 800eda2:	f043 0320 	orrmi.w	r3, r3, #32
 800eda6:	6023      	strmi	r3, [r4, #0]
 800eda8:	b11d      	cbz	r5, 800edb2 <_printf_i+0x19e>
 800edaa:	2310      	movs	r3, #16
 800edac:	e7ac      	b.n	800ed08 <_printf_i+0xf4>
 800edae:	4827      	ldr	r0, [pc, #156]	@ (800ee4c <_printf_i+0x238>)
 800edb0:	e7e9      	b.n	800ed86 <_printf_i+0x172>
 800edb2:	6823      	ldr	r3, [r4, #0]
 800edb4:	f023 0320 	bic.w	r3, r3, #32
 800edb8:	6023      	str	r3, [r4, #0]
 800edba:	e7f6      	b.n	800edaa <_printf_i+0x196>
 800edbc:	4616      	mov	r6, r2
 800edbe:	e7bd      	b.n	800ed3c <_printf_i+0x128>
 800edc0:	6833      	ldr	r3, [r6, #0]
 800edc2:	6825      	ldr	r5, [r4, #0]
 800edc4:	6961      	ldr	r1, [r4, #20]
 800edc6:	1d18      	adds	r0, r3, #4
 800edc8:	6030      	str	r0, [r6, #0]
 800edca:	062e      	lsls	r6, r5, #24
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	d501      	bpl.n	800edd4 <_printf_i+0x1c0>
 800edd0:	6019      	str	r1, [r3, #0]
 800edd2:	e002      	b.n	800edda <_printf_i+0x1c6>
 800edd4:	0668      	lsls	r0, r5, #25
 800edd6:	d5fb      	bpl.n	800edd0 <_printf_i+0x1bc>
 800edd8:	8019      	strh	r1, [r3, #0]
 800edda:	2300      	movs	r3, #0
 800eddc:	6123      	str	r3, [r4, #16]
 800edde:	4616      	mov	r6, r2
 800ede0:	e7bc      	b.n	800ed5c <_printf_i+0x148>
 800ede2:	6833      	ldr	r3, [r6, #0]
 800ede4:	1d1a      	adds	r2, r3, #4
 800ede6:	6032      	str	r2, [r6, #0]
 800ede8:	681e      	ldr	r6, [r3, #0]
 800edea:	6862      	ldr	r2, [r4, #4]
 800edec:	2100      	movs	r1, #0
 800edee:	4630      	mov	r0, r6
 800edf0:	f7f1 f9ee 	bl	80001d0 <memchr>
 800edf4:	b108      	cbz	r0, 800edfa <_printf_i+0x1e6>
 800edf6:	1b80      	subs	r0, r0, r6
 800edf8:	6060      	str	r0, [r4, #4]
 800edfa:	6863      	ldr	r3, [r4, #4]
 800edfc:	6123      	str	r3, [r4, #16]
 800edfe:	2300      	movs	r3, #0
 800ee00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee04:	e7aa      	b.n	800ed5c <_printf_i+0x148>
 800ee06:	6923      	ldr	r3, [r4, #16]
 800ee08:	4632      	mov	r2, r6
 800ee0a:	4649      	mov	r1, r9
 800ee0c:	4640      	mov	r0, r8
 800ee0e:	47d0      	blx	sl
 800ee10:	3001      	adds	r0, #1
 800ee12:	d0ad      	beq.n	800ed70 <_printf_i+0x15c>
 800ee14:	6823      	ldr	r3, [r4, #0]
 800ee16:	079b      	lsls	r3, r3, #30
 800ee18:	d413      	bmi.n	800ee42 <_printf_i+0x22e>
 800ee1a:	68e0      	ldr	r0, [r4, #12]
 800ee1c:	9b03      	ldr	r3, [sp, #12]
 800ee1e:	4298      	cmp	r0, r3
 800ee20:	bfb8      	it	lt
 800ee22:	4618      	movlt	r0, r3
 800ee24:	e7a6      	b.n	800ed74 <_printf_i+0x160>
 800ee26:	2301      	movs	r3, #1
 800ee28:	4632      	mov	r2, r6
 800ee2a:	4649      	mov	r1, r9
 800ee2c:	4640      	mov	r0, r8
 800ee2e:	47d0      	blx	sl
 800ee30:	3001      	adds	r0, #1
 800ee32:	d09d      	beq.n	800ed70 <_printf_i+0x15c>
 800ee34:	3501      	adds	r5, #1
 800ee36:	68e3      	ldr	r3, [r4, #12]
 800ee38:	9903      	ldr	r1, [sp, #12]
 800ee3a:	1a5b      	subs	r3, r3, r1
 800ee3c:	42ab      	cmp	r3, r5
 800ee3e:	dcf2      	bgt.n	800ee26 <_printf_i+0x212>
 800ee40:	e7eb      	b.n	800ee1a <_printf_i+0x206>
 800ee42:	2500      	movs	r5, #0
 800ee44:	f104 0619 	add.w	r6, r4, #25
 800ee48:	e7f5      	b.n	800ee36 <_printf_i+0x222>
 800ee4a:	bf00      	nop
 800ee4c:	08013a35 	.word	0x08013a35
 800ee50:	08013a46 	.word	0x08013a46

0800ee54 <_scanf_float>:
 800ee54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee58:	b087      	sub	sp, #28
 800ee5a:	4617      	mov	r7, r2
 800ee5c:	9303      	str	r3, [sp, #12]
 800ee5e:	688b      	ldr	r3, [r1, #8]
 800ee60:	1e5a      	subs	r2, r3, #1
 800ee62:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ee66:	bf81      	itttt	hi
 800ee68:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ee6c:	eb03 0b05 	addhi.w	fp, r3, r5
 800ee70:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ee74:	608b      	strhi	r3, [r1, #8]
 800ee76:	680b      	ldr	r3, [r1, #0]
 800ee78:	460a      	mov	r2, r1
 800ee7a:	f04f 0500 	mov.w	r5, #0
 800ee7e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ee82:	f842 3b1c 	str.w	r3, [r2], #28
 800ee86:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ee8a:	4680      	mov	r8, r0
 800ee8c:	460c      	mov	r4, r1
 800ee8e:	bf98      	it	ls
 800ee90:	f04f 0b00 	movls.w	fp, #0
 800ee94:	9201      	str	r2, [sp, #4]
 800ee96:	4616      	mov	r6, r2
 800ee98:	46aa      	mov	sl, r5
 800ee9a:	46a9      	mov	r9, r5
 800ee9c:	9502      	str	r5, [sp, #8]
 800ee9e:	68a2      	ldr	r2, [r4, #8]
 800eea0:	b152      	cbz	r2, 800eeb8 <_scanf_float+0x64>
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	2b4e      	cmp	r3, #78	@ 0x4e
 800eea8:	d864      	bhi.n	800ef74 <_scanf_float+0x120>
 800eeaa:	2b40      	cmp	r3, #64	@ 0x40
 800eeac:	d83c      	bhi.n	800ef28 <_scanf_float+0xd4>
 800eeae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800eeb2:	b2c8      	uxtb	r0, r1
 800eeb4:	280e      	cmp	r0, #14
 800eeb6:	d93a      	bls.n	800ef2e <_scanf_float+0xda>
 800eeb8:	f1b9 0f00 	cmp.w	r9, #0
 800eebc:	d003      	beq.n	800eec6 <_scanf_float+0x72>
 800eebe:	6823      	ldr	r3, [r4, #0]
 800eec0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eec4:	6023      	str	r3, [r4, #0]
 800eec6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eeca:	f1ba 0f01 	cmp.w	sl, #1
 800eece:	f200 8117 	bhi.w	800f100 <_scanf_float+0x2ac>
 800eed2:	9b01      	ldr	r3, [sp, #4]
 800eed4:	429e      	cmp	r6, r3
 800eed6:	f200 8108 	bhi.w	800f0ea <_scanf_float+0x296>
 800eeda:	2001      	movs	r0, #1
 800eedc:	b007      	add	sp, #28
 800eede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eee2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800eee6:	2a0d      	cmp	r2, #13
 800eee8:	d8e6      	bhi.n	800eeb8 <_scanf_float+0x64>
 800eeea:	a101      	add	r1, pc, #4	@ (adr r1, 800eef0 <_scanf_float+0x9c>)
 800eeec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800eef0:	0800f037 	.word	0x0800f037
 800eef4:	0800eeb9 	.word	0x0800eeb9
 800eef8:	0800eeb9 	.word	0x0800eeb9
 800eefc:	0800eeb9 	.word	0x0800eeb9
 800ef00:	0800f097 	.word	0x0800f097
 800ef04:	0800f06f 	.word	0x0800f06f
 800ef08:	0800eeb9 	.word	0x0800eeb9
 800ef0c:	0800eeb9 	.word	0x0800eeb9
 800ef10:	0800f045 	.word	0x0800f045
 800ef14:	0800eeb9 	.word	0x0800eeb9
 800ef18:	0800eeb9 	.word	0x0800eeb9
 800ef1c:	0800eeb9 	.word	0x0800eeb9
 800ef20:	0800eeb9 	.word	0x0800eeb9
 800ef24:	0800effd 	.word	0x0800effd
 800ef28:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ef2c:	e7db      	b.n	800eee6 <_scanf_float+0x92>
 800ef2e:	290e      	cmp	r1, #14
 800ef30:	d8c2      	bhi.n	800eeb8 <_scanf_float+0x64>
 800ef32:	a001      	add	r0, pc, #4	@ (adr r0, 800ef38 <_scanf_float+0xe4>)
 800ef34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ef38:	0800efed 	.word	0x0800efed
 800ef3c:	0800eeb9 	.word	0x0800eeb9
 800ef40:	0800efed 	.word	0x0800efed
 800ef44:	0800f083 	.word	0x0800f083
 800ef48:	0800eeb9 	.word	0x0800eeb9
 800ef4c:	0800ef95 	.word	0x0800ef95
 800ef50:	0800efd3 	.word	0x0800efd3
 800ef54:	0800efd3 	.word	0x0800efd3
 800ef58:	0800efd3 	.word	0x0800efd3
 800ef5c:	0800efd3 	.word	0x0800efd3
 800ef60:	0800efd3 	.word	0x0800efd3
 800ef64:	0800efd3 	.word	0x0800efd3
 800ef68:	0800efd3 	.word	0x0800efd3
 800ef6c:	0800efd3 	.word	0x0800efd3
 800ef70:	0800efd3 	.word	0x0800efd3
 800ef74:	2b6e      	cmp	r3, #110	@ 0x6e
 800ef76:	d809      	bhi.n	800ef8c <_scanf_float+0x138>
 800ef78:	2b60      	cmp	r3, #96	@ 0x60
 800ef7a:	d8b2      	bhi.n	800eee2 <_scanf_float+0x8e>
 800ef7c:	2b54      	cmp	r3, #84	@ 0x54
 800ef7e:	d07b      	beq.n	800f078 <_scanf_float+0x224>
 800ef80:	2b59      	cmp	r3, #89	@ 0x59
 800ef82:	d199      	bne.n	800eeb8 <_scanf_float+0x64>
 800ef84:	2d07      	cmp	r5, #7
 800ef86:	d197      	bne.n	800eeb8 <_scanf_float+0x64>
 800ef88:	2508      	movs	r5, #8
 800ef8a:	e02c      	b.n	800efe6 <_scanf_float+0x192>
 800ef8c:	2b74      	cmp	r3, #116	@ 0x74
 800ef8e:	d073      	beq.n	800f078 <_scanf_float+0x224>
 800ef90:	2b79      	cmp	r3, #121	@ 0x79
 800ef92:	e7f6      	b.n	800ef82 <_scanf_float+0x12e>
 800ef94:	6821      	ldr	r1, [r4, #0]
 800ef96:	05c8      	lsls	r0, r1, #23
 800ef98:	d51b      	bpl.n	800efd2 <_scanf_float+0x17e>
 800ef9a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ef9e:	6021      	str	r1, [r4, #0]
 800efa0:	f109 0901 	add.w	r9, r9, #1
 800efa4:	f1bb 0f00 	cmp.w	fp, #0
 800efa8:	d003      	beq.n	800efb2 <_scanf_float+0x15e>
 800efaa:	3201      	adds	r2, #1
 800efac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800efb0:	60a2      	str	r2, [r4, #8]
 800efb2:	68a3      	ldr	r3, [r4, #8]
 800efb4:	3b01      	subs	r3, #1
 800efb6:	60a3      	str	r3, [r4, #8]
 800efb8:	6923      	ldr	r3, [r4, #16]
 800efba:	3301      	adds	r3, #1
 800efbc:	6123      	str	r3, [r4, #16]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	3b01      	subs	r3, #1
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	607b      	str	r3, [r7, #4]
 800efc6:	f340 8087 	ble.w	800f0d8 <_scanf_float+0x284>
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	3301      	adds	r3, #1
 800efce:	603b      	str	r3, [r7, #0]
 800efd0:	e765      	b.n	800ee9e <_scanf_float+0x4a>
 800efd2:	eb1a 0105 	adds.w	r1, sl, r5
 800efd6:	f47f af6f 	bne.w	800eeb8 <_scanf_float+0x64>
 800efda:	6822      	ldr	r2, [r4, #0]
 800efdc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800efe0:	6022      	str	r2, [r4, #0]
 800efe2:	460d      	mov	r5, r1
 800efe4:	468a      	mov	sl, r1
 800efe6:	f806 3b01 	strb.w	r3, [r6], #1
 800efea:	e7e2      	b.n	800efb2 <_scanf_float+0x15e>
 800efec:	6822      	ldr	r2, [r4, #0]
 800efee:	0610      	lsls	r0, r2, #24
 800eff0:	f57f af62 	bpl.w	800eeb8 <_scanf_float+0x64>
 800eff4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800eff8:	6022      	str	r2, [r4, #0]
 800effa:	e7f4      	b.n	800efe6 <_scanf_float+0x192>
 800effc:	f1ba 0f00 	cmp.w	sl, #0
 800f000:	d10e      	bne.n	800f020 <_scanf_float+0x1cc>
 800f002:	f1b9 0f00 	cmp.w	r9, #0
 800f006:	d10e      	bne.n	800f026 <_scanf_float+0x1d2>
 800f008:	6822      	ldr	r2, [r4, #0]
 800f00a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f00e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f012:	d108      	bne.n	800f026 <_scanf_float+0x1d2>
 800f014:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f018:	6022      	str	r2, [r4, #0]
 800f01a:	f04f 0a01 	mov.w	sl, #1
 800f01e:	e7e2      	b.n	800efe6 <_scanf_float+0x192>
 800f020:	f1ba 0f02 	cmp.w	sl, #2
 800f024:	d055      	beq.n	800f0d2 <_scanf_float+0x27e>
 800f026:	2d01      	cmp	r5, #1
 800f028:	d002      	beq.n	800f030 <_scanf_float+0x1dc>
 800f02a:	2d04      	cmp	r5, #4
 800f02c:	f47f af44 	bne.w	800eeb8 <_scanf_float+0x64>
 800f030:	3501      	adds	r5, #1
 800f032:	b2ed      	uxtb	r5, r5
 800f034:	e7d7      	b.n	800efe6 <_scanf_float+0x192>
 800f036:	f1ba 0f01 	cmp.w	sl, #1
 800f03a:	f47f af3d 	bne.w	800eeb8 <_scanf_float+0x64>
 800f03e:	f04f 0a02 	mov.w	sl, #2
 800f042:	e7d0      	b.n	800efe6 <_scanf_float+0x192>
 800f044:	b97d      	cbnz	r5, 800f066 <_scanf_float+0x212>
 800f046:	f1b9 0f00 	cmp.w	r9, #0
 800f04a:	f47f af38 	bne.w	800eebe <_scanf_float+0x6a>
 800f04e:	6822      	ldr	r2, [r4, #0]
 800f050:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f054:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f058:	f040 8108 	bne.w	800f26c <_scanf_float+0x418>
 800f05c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f060:	6022      	str	r2, [r4, #0]
 800f062:	2501      	movs	r5, #1
 800f064:	e7bf      	b.n	800efe6 <_scanf_float+0x192>
 800f066:	2d03      	cmp	r5, #3
 800f068:	d0e2      	beq.n	800f030 <_scanf_float+0x1dc>
 800f06a:	2d05      	cmp	r5, #5
 800f06c:	e7de      	b.n	800f02c <_scanf_float+0x1d8>
 800f06e:	2d02      	cmp	r5, #2
 800f070:	f47f af22 	bne.w	800eeb8 <_scanf_float+0x64>
 800f074:	2503      	movs	r5, #3
 800f076:	e7b6      	b.n	800efe6 <_scanf_float+0x192>
 800f078:	2d06      	cmp	r5, #6
 800f07a:	f47f af1d 	bne.w	800eeb8 <_scanf_float+0x64>
 800f07e:	2507      	movs	r5, #7
 800f080:	e7b1      	b.n	800efe6 <_scanf_float+0x192>
 800f082:	6822      	ldr	r2, [r4, #0]
 800f084:	0591      	lsls	r1, r2, #22
 800f086:	f57f af17 	bpl.w	800eeb8 <_scanf_float+0x64>
 800f08a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f08e:	6022      	str	r2, [r4, #0]
 800f090:	f8cd 9008 	str.w	r9, [sp, #8]
 800f094:	e7a7      	b.n	800efe6 <_scanf_float+0x192>
 800f096:	6822      	ldr	r2, [r4, #0]
 800f098:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f09c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f0a0:	d006      	beq.n	800f0b0 <_scanf_float+0x25c>
 800f0a2:	0550      	lsls	r0, r2, #21
 800f0a4:	f57f af08 	bpl.w	800eeb8 <_scanf_float+0x64>
 800f0a8:	f1b9 0f00 	cmp.w	r9, #0
 800f0ac:	f000 80de 	beq.w	800f26c <_scanf_float+0x418>
 800f0b0:	0591      	lsls	r1, r2, #22
 800f0b2:	bf58      	it	pl
 800f0b4:	9902      	ldrpl	r1, [sp, #8]
 800f0b6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f0ba:	bf58      	it	pl
 800f0bc:	eba9 0101 	subpl.w	r1, r9, r1
 800f0c0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f0c4:	bf58      	it	pl
 800f0c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f0ca:	6022      	str	r2, [r4, #0]
 800f0cc:	f04f 0900 	mov.w	r9, #0
 800f0d0:	e789      	b.n	800efe6 <_scanf_float+0x192>
 800f0d2:	f04f 0a03 	mov.w	sl, #3
 800f0d6:	e786      	b.n	800efe6 <_scanf_float+0x192>
 800f0d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f0dc:	4639      	mov	r1, r7
 800f0de:	4640      	mov	r0, r8
 800f0e0:	4798      	blx	r3
 800f0e2:	2800      	cmp	r0, #0
 800f0e4:	f43f aedb 	beq.w	800ee9e <_scanf_float+0x4a>
 800f0e8:	e6e6      	b.n	800eeb8 <_scanf_float+0x64>
 800f0ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f0ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f0f2:	463a      	mov	r2, r7
 800f0f4:	4640      	mov	r0, r8
 800f0f6:	4798      	blx	r3
 800f0f8:	6923      	ldr	r3, [r4, #16]
 800f0fa:	3b01      	subs	r3, #1
 800f0fc:	6123      	str	r3, [r4, #16]
 800f0fe:	e6e8      	b.n	800eed2 <_scanf_float+0x7e>
 800f100:	1e6b      	subs	r3, r5, #1
 800f102:	2b06      	cmp	r3, #6
 800f104:	d824      	bhi.n	800f150 <_scanf_float+0x2fc>
 800f106:	2d02      	cmp	r5, #2
 800f108:	d836      	bhi.n	800f178 <_scanf_float+0x324>
 800f10a:	9b01      	ldr	r3, [sp, #4]
 800f10c:	429e      	cmp	r6, r3
 800f10e:	f67f aee4 	bls.w	800eeda <_scanf_float+0x86>
 800f112:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f116:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f11a:	463a      	mov	r2, r7
 800f11c:	4640      	mov	r0, r8
 800f11e:	4798      	blx	r3
 800f120:	6923      	ldr	r3, [r4, #16]
 800f122:	3b01      	subs	r3, #1
 800f124:	6123      	str	r3, [r4, #16]
 800f126:	e7f0      	b.n	800f10a <_scanf_float+0x2b6>
 800f128:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f12c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f130:	463a      	mov	r2, r7
 800f132:	4640      	mov	r0, r8
 800f134:	4798      	blx	r3
 800f136:	6923      	ldr	r3, [r4, #16]
 800f138:	3b01      	subs	r3, #1
 800f13a:	6123      	str	r3, [r4, #16]
 800f13c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f140:	fa5f fa8a 	uxtb.w	sl, sl
 800f144:	f1ba 0f02 	cmp.w	sl, #2
 800f148:	d1ee      	bne.n	800f128 <_scanf_float+0x2d4>
 800f14a:	3d03      	subs	r5, #3
 800f14c:	b2ed      	uxtb	r5, r5
 800f14e:	1b76      	subs	r6, r6, r5
 800f150:	6823      	ldr	r3, [r4, #0]
 800f152:	05da      	lsls	r2, r3, #23
 800f154:	d530      	bpl.n	800f1b8 <_scanf_float+0x364>
 800f156:	055b      	lsls	r3, r3, #21
 800f158:	d511      	bpl.n	800f17e <_scanf_float+0x32a>
 800f15a:	9b01      	ldr	r3, [sp, #4]
 800f15c:	429e      	cmp	r6, r3
 800f15e:	f67f aebc 	bls.w	800eeda <_scanf_float+0x86>
 800f162:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f166:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f16a:	463a      	mov	r2, r7
 800f16c:	4640      	mov	r0, r8
 800f16e:	4798      	blx	r3
 800f170:	6923      	ldr	r3, [r4, #16]
 800f172:	3b01      	subs	r3, #1
 800f174:	6123      	str	r3, [r4, #16]
 800f176:	e7f0      	b.n	800f15a <_scanf_float+0x306>
 800f178:	46aa      	mov	sl, r5
 800f17a:	46b3      	mov	fp, r6
 800f17c:	e7de      	b.n	800f13c <_scanf_float+0x2e8>
 800f17e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f182:	6923      	ldr	r3, [r4, #16]
 800f184:	2965      	cmp	r1, #101	@ 0x65
 800f186:	f103 33ff 	add.w	r3, r3, #4294967295
 800f18a:	f106 35ff 	add.w	r5, r6, #4294967295
 800f18e:	6123      	str	r3, [r4, #16]
 800f190:	d00c      	beq.n	800f1ac <_scanf_float+0x358>
 800f192:	2945      	cmp	r1, #69	@ 0x45
 800f194:	d00a      	beq.n	800f1ac <_scanf_float+0x358>
 800f196:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f19a:	463a      	mov	r2, r7
 800f19c:	4640      	mov	r0, r8
 800f19e:	4798      	blx	r3
 800f1a0:	6923      	ldr	r3, [r4, #16]
 800f1a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f1a6:	3b01      	subs	r3, #1
 800f1a8:	1eb5      	subs	r5, r6, #2
 800f1aa:	6123      	str	r3, [r4, #16]
 800f1ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f1b0:	463a      	mov	r2, r7
 800f1b2:	4640      	mov	r0, r8
 800f1b4:	4798      	blx	r3
 800f1b6:	462e      	mov	r6, r5
 800f1b8:	6822      	ldr	r2, [r4, #0]
 800f1ba:	f012 0210 	ands.w	r2, r2, #16
 800f1be:	d001      	beq.n	800f1c4 <_scanf_float+0x370>
 800f1c0:	2000      	movs	r0, #0
 800f1c2:	e68b      	b.n	800eedc <_scanf_float+0x88>
 800f1c4:	7032      	strb	r2, [r6, #0]
 800f1c6:	6823      	ldr	r3, [r4, #0]
 800f1c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f1cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f1d0:	d11c      	bne.n	800f20c <_scanf_float+0x3b8>
 800f1d2:	9b02      	ldr	r3, [sp, #8]
 800f1d4:	454b      	cmp	r3, r9
 800f1d6:	eba3 0209 	sub.w	r2, r3, r9
 800f1da:	d123      	bne.n	800f224 <_scanf_float+0x3d0>
 800f1dc:	9901      	ldr	r1, [sp, #4]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	4640      	mov	r0, r8
 800f1e2:	f002 fe1d 	bl	8011e20 <_strtod_r>
 800f1e6:	9b03      	ldr	r3, [sp, #12]
 800f1e8:	6821      	ldr	r1, [r4, #0]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	f011 0f02 	tst.w	r1, #2
 800f1f0:	ec57 6b10 	vmov	r6, r7, d0
 800f1f4:	f103 0204 	add.w	r2, r3, #4
 800f1f8:	d01f      	beq.n	800f23a <_scanf_float+0x3e6>
 800f1fa:	9903      	ldr	r1, [sp, #12]
 800f1fc:	600a      	str	r2, [r1, #0]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	e9c3 6700 	strd	r6, r7, [r3]
 800f204:	68e3      	ldr	r3, [r4, #12]
 800f206:	3301      	adds	r3, #1
 800f208:	60e3      	str	r3, [r4, #12]
 800f20a:	e7d9      	b.n	800f1c0 <_scanf_float+0x36c>
 800f20c:	9b04      	ldr	r3, [sp, #16]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d0e4      	beq.n	800f1dc <_scanf_float+0x388>
 800f212:	9905      	ldr	r1, [sp, #20]
 800f214:	230a      	movs	r3, #10
 800f216:	3101      	adds	r1, #1
 800f218:	4640      	mov	r0, r8
 800f21a:	f7ff f9b7 	bl	800e58c <_strtol_r>
 800f21e:	9b04      	ldr	r3, [sp, #16]
 800f220:	9e05      	ldr	r6, [sp, #20]
 800f222:	1ac2      	subs	r2, r0, r3
 800f224:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f228:	429e      	cmp	r6, r3
 800f22a:	bf28      	it	cs
 800f22c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f230:	4910      	ldr	r1, [pc, #64]	@ (800f274 <_scanf_float+0x420>)
 800f232:	4630      	mov	r0, r6
 800f234:	f000 fa14 	bl	800f660 <siprintf>
 800f238:	e7d0      	b.n	800f1dc <_scanf_float+0x388>
 800f23a:	f011 0f04 	tst.w	r1, #4
 800f23e:	9903      	ldr	r1, [sp, #12]
 800f240:	600a      	str	r2, [r1, #0]
 800f242:	d1dc      	bne.n	800f1fe <_scanf_float+0x3aa>
 800f244:	681d      	ldr	r5, [r3, #0]
 800f246:	4632      	mov	r2, r6
 800f248:	463b      	mov	r3, r7
 800f24a:	4630      	mov	r0, r6
 800f24c:	4639      	mov	r1, r7
 800f24e:	f7f1 fc6d 	bl	8000b2c <__aeabi_dcmpun>
 800f252:	b128      	cbz	r0, 800f260 <_scanf_float+0x40c>
 800f254:	4808      	ldr	r0, [pc, #32]	@ (800f278 <_scanf_float+0x424>)
 800f256:	f000 fbdd 	bl	800fa14 <nanf>
 800f25a:	ed85 0a00 	vstr	s0, [r5]
 800f25e:	e7d1      	b.n	800f204 <_scanf_float+0x3b0>
 800f260:	4630      	mov	r0, r6
 800f262:	4639      	mov	r1, r7
 800f264:	f7f1 fcc0 	bl	8000be8 <__aeabi_d2f>
 800f268:	6028      	str	r0, [r5, #0]
 800f26a:	e7cb      	b.n	800f204 <_scanf_float+0x3b0>
 800f26c:	f04f 0900 	mov.w	r9, #0
 800f270:	e629      	b.n	800eec6 <_scanf_float+0x72>
 800f272:	bf00      	nop
 800f274:	08013a57 	.word	0x08013a57
 800f278:	08013d07 	.word	0x08013d07

0800f27c <__sflush_r>:
 800f27c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f284:	0716      	lsls	r6, r2, #28
 800f286:	4605      	mov	r5, r0
 800f288:	460c      	mov	r4, r1
 800f28a:	d454      	bmi.n	800f336 <__sflush_r+0xba>
 800f28c:	684b      	ldr	r3, [r1, #4]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	dc02      	bgt.n	800f298 <__sflush_r+0x1c>
 800f292:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f294:	2b00      	cmp	r3, #0
 800f296:	dd48      	ble.n	800f32a <__sflush_r+0xae>
 800f298:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f29a:	2e00      	cmp	r6, #0
 800f29c:	d045      	beq.n	800f32a <__sflush_r+0xae>
 800f29e:	2300      	movs	r3, #0
 800f2a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f2a4:	682f      	ldr	r7, [r5, #0]
 800f2a6:	6a21      	ldr	r1, [r4, #32]
 800f2a8:	602b      	str	r3, [r5, #0]
 800f2aa:	d030      	beq.n	800f30e <__sflush_r+0x92>
 800f2ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f2ae:	89a3      	ldrh	r3, [r4, #12]
 800f2b0:	0759      	lsls	r1, r3, #29
 800f2b2:	d505      	bpl.n	800f2c0 <__sflush_r+0x44>
 800f2b4:	6863      	ldr	r3, [r4, #4]
 800f2b6:	1ad2      	subs	r2, r2, r3
 800f2b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f2ba:	b10b      	cbz	r3, 800f2c0 <__sflush_r+0x44>
 800f2bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f2be:	1ad2      	subs	r2, r2, r3
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f2c4:	6a21      	ldr	r1, [r4, #32]
 800f2c6:	4628      	mov	r0, r5
 800f2c8:	47b0      	blx	r6
 800f2ca:	1c43      	adds	r3, r0, #1
 800f2cc:	89a3      	ldrh	r3, [r4, #12]
 800f2ce:	d106      	bne.n	800f2de <__sflush_r+0x62>
 800f2d0:	6829      	ldr	r1, [r5, #0]
 800f2d2:	291d      	cmp	r1, #29
 800f2d4:	d82b      	bhi.n	800f32e <__sflush_r+0xb2>
 800f2d6:	4a2a      	ldr	r2, [pc, #168]	@ (800f380 <__sflush_r+0x104>)
 800f2d8:	410a      	asrs	r2, r1
 800f2da:	07d6      	lsls	r6, r2, #31
 800f2dc:	d427      	bmi.n	800f32e <__sflush_r+0xb2>
 800f2de:	2200      	movs	r2, #0
 800f2e0:	6062      	str	r2, [r4, #4]
 800f2e2:	04d9      	lsls	r1, r3, #19
 800f2e4:	6922      	ldr	r2, [r4, #16]
 800f2e6:	6022      	str	r2, [r4, #0]
 800f2e8:	d504      	bpl.n	800f2f4 <__sflush_r+0x78>
 800f2ea:	1c42      	adds	r2, r0, #1
 800f2ec:	d101      	bne.n	800f2f2 <__sflush_r+0x76>
 800f2ee:	682b      	ldr	r3, [r5, #0]
 800f2f0:	b903      	cbnz	r3, 800f2f4 <__sflush_r+0x78>
 800f2f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800f2f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f2f6:	602f      	str	r7, [r5, #0]
 800f2f8:	b1b9      	cbz	r1, 800f32a <__sflush_r+0xae>
 800f2fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f2fe:	4299      	cmp	r1, r3
 800f300:	d002      	beq.n	800f308 <__sflush_r+0x8c>
 800f302:	4628      	mov	r0, r5
 800f304:	f001 f9d8 	bl	80106b8 <_free_r>
 800f308:	2300      	movs	r3, #0
 800f30a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f30c:	e00d      	b.n	800f32a <__sflush_r+0xae>
 800f30e:	2301      	movs	r3, #1
 800f310:	4628      	mov	r0, r5
 800f312:	47b0      	blx	r6
 800f314:	4602      	mov	r2, r0
 800f316:	1c50      	adds	r0, r2, #1
 800f318:	d1c9      	bne.n	800f2ae <__sflush_r+0x32>
 800f31a:	682b      	ldr	r3, [r5, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d0c6      	beq.n	800f2ae <__sflush_r+0x32>
 800f320:	2b1d      	cmp	r3, #29
 800f322:	d001      	beq.n	800f328 <__sflush_r+0xac>
 800f324:	2b16      	cmp	r3, #22
 800f326:	d11e      	bne.n	800f366 <__sflush_r+0xea>
 800f328:	602f      	str	r7, [r5, #0]
 800f32a:	2000      	movs	r0, #0
 800f32c:	e022      	b.n	800f374 <__sflush_r+0xf8>
 800f32e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f332:	b21b      	sxth	r3, r3
 800f334:	e01b      	b.n	800f36e <__sflush_r+0xf2>
 800f336:	690f      	ldr	r7, [r1, #16]
 800f338:	2f00      	cmp	r7, #0
 800f33a:	d0f6      	beq.n	800f32a <__sflush_r+0xae>
 800f33c:	0793      	lsls	r3, r2, #30
 800f33e:	680e      	ldr	r6, [r1, #0]
 800f340:	bf08      	it	eq
 800f342:	694b      	ldreq	r3, [r1, #20]
 800f344:	600f      	str	r7, [r1, #0]
 800f346:	bf18      	it	ne
 800f348:	2300      	movne	r3, #0
 800f34a:	eba6 0807 	sub.w	r8, r6, r7
 800f34e:	608b      	str	r3, [r1, #8]
 800f350:	f1b8 0f00 	cmp.w	r8, #0
 800f354:	dde9      	ble.n	800f32a <__sflush_r+0xae>
 800f356:	6a21      	ldr	r1, [r4, #32]
 800f358:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f35a:	4643      	mov	r3, r8
 800f35c:	463a      	mov	r2, r7
 800f35e:	4628      	mov	r0, r5
 800f360:	47b0      	blx	r6
 800f362:	2800      	cmp	r0, #0
 800f364:	dc08      	bgt.n	800f378 <__sflush_r+0xfc>
 800f366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f36a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f36e:	81a3      	strh	r3, [r4, #12]
 800f370:	f04f 30ff 	mov.w	r0, #4294967295
 800f374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f378:	4407      	add	r7, r0
 800f37a:	eba8 0800 	sub.w	r8, r8, r0
 800f37e:	e7e7      	b.n	800f350 <__sflush_r+0xd4>
 800f380:	dfbffffe 	.word	0xdfbffffe

0800f384 <_fflush_r>:
 800f384:	b538      	push	{r3, r4, r5, lr}
 800f386:	690b      	ldr	r3, [r1, #16]
 800f388:	4605      	mov	r5, r0
 800f38a:	460c      	mov	r4, r1
 800f38c:	b913      	cbnz	r3, 800f394 <_fflush_r+0x10>
 800f38e:	2500      	movs	r5, #0
 800f390:	4628      	mov	r0, r5
 800f392:	bd38      	pop	{r3, r4, r5, pc}
 800f394:	b118      	cbz	r0, 800f39e <_fflush_r+0x1a>
 800f396:	6a03      	ldr	r3, [r0, #32]
 800f398:	b90b      	cbnz	r3, 800f39e <_fflush_r+0x1a>
 800f39a:	f000 f8bb 	bl	800f514 <__sinit>
 800f39e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d0f3      	beq.n	800f38e <_fflush_r+0xa>
 800f3a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f3a8:	07d0      	lsls	r0, r2, #31
 800f3aa:	d404      	bmi.n	800f3b6 <_fflush_r+0x32>
 800f3ac:	0599      	lsls	r1, r3, #22
 800f3ae:	d402      	bmi.n	800f3b6 <_fflush_r+0x32>
 800f3b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f3b2:	f000 fb1e 	bl	800f9f2 <__retarget_lock_acquire_recursive>
 800f3b6:	4628      	mov	r0, r5
 800f3b8:	4621      	mov	r1, r4
 800f3ba:	f7ff ff5f 	bl	800f27c <__sflush_r>
 800f3be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f3c0:	07da      	lsls	r2, r3, #31
 800f3c2:	4605      	mov	r5, r0
 800f3c4:	d4e4      	bmi.n	800f390 <_fflush_r+0xc>
 800f3c6:	89a3      	ldrh	r3, [r4, #12]
 800f3c8:	059b      	lsls	r3, r3, #22
 800f3ca:	d4e1      	bmi.n	800f390 <_fflush_r+0xc>
 800f3cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f3ce:	f000 fb11 	bl	800f9f4 <__retarget_lock_release_recursive>
 800f3d2:	e7dd      	b.n	800f390 <_fflush_r+0xc>

0800f3d4 <fflush>:
 800f3d4:	4601      	mov	r1, r0
 800f3d6:	b920      	cbnz	r0, 800f3e2 <fflush+0xe>
 800f3d8:	4a04      	ldr	r2, [pc, #16]	@ (800f3ec <fflush+0x18>)
 800f3da:	4905      	ldr	r1, [pc, #20]	@ (800f3f0 <fflush+0x1c>)
 800f3dc:	4805      	ldr	r0, [pc, #20]	@ (800f3f4 <fflush+0x20>)
 800f3de:	f000 b8b1 	b.w	800f544 <_fwalk_sglue>
 800f3e2:	4b05      	ldr	r3, [pc, #20]	@ (800f3f8 <fflush+0x24>)
 800f3e4:	6818      	ldr	r0, [r3, #0]
 800f3e6:	f7ff bfcd 	b.w	800f384 <_fflush_r>
 800f3ea:	bf00      	nop
 800f3ec:	20000194 	.word	0x20000194
 800f3f0:	0800f385 	.word	0x0800f385
 800f3f4:	200001a4 	.word	0x200001a4
 800f3f8:	200001a0 	.word	0x200001a0

0800f3fc <std>:
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	b510      	push	{r4, lr}
 800f400:	4604      	mov	r4, r0
 800f402:	e9c0 3300 	strd	r3, r3, [r0]
 800f406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f40a:	6083      	str	r3, [r0, #8]
 800f40c:	8181      	strh	r1, [r0, #12]
 800f40e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f410:	81c2      	strh	r2, [r0, #14]
 800f412:	6183      	str	r3, [r0, #24]
 800f414:	4619      	mov	r1, r3
 800f416:	2208      	movs	r2, #8
 800f418:	305c      	adds	r0, #92	@ 0x5c
 800f41a:	f000 fa45 	bl	800f8a8 <memset>
 800f41e:	4b0d      	ldr	r3, [pc, #52]	@ (800f454 <std+0x58>)
 800f420:	6263      	str	r3, [r4, #36]	@ 0x24
 800f422:	4b0d      	ldr	r3, [pc, #52]	@ (800f458 <std+0x5c>)
 800f424:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f426:	4b0d      	ldr	r3, [pc, #52]	@ (800f45c <std+0x60>)
 800f428:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f42a:	4b0d      	ldr	r3, [pc, #52]	@ (800f460 <std+0x64>)
 800f42c:	6323      	str	r3, [r4, #48]	@ 0x30
 800f42e:	4b0d      	ldr	r3, [pc, #52]	@ (800f464 <std+0x68>)
 800f430:	6224      	str	r4, [r4, #32]
 800f432:	429c      	cmp	r4, r3
 800f434:	d006      	beq.n	800f444 <std+0x48>
 800f436:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f43a:	4294      	cmp	r4, r2
 800f43c:	d002      	beq.n	800f444 <std+0x48>
 800f43e:	33d0      	adds	r3, #208	@ 0xd0
 800f440:	429c      	cmp	r4, r3
 800f442:	d105      	bne.n	800f450 <std+0x54>
 800f444:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f44c:	f000 bad0 	b.w	800f9f0 <__retarget_lock_init_recursive>
 800f450:	bd10      	pop	{r4, pc}
 800f452:	bf00      	nop
 800f454:	0800f6f5 	.word	0x0800f6f5
 800f458:	0800f71b 	.word	0x0800f71b
 800f45c:	0800f753 	.word	0x0800f753
 800f460:	0800f777 	.word	0x0800f777
 800f464:	20002114 	.word	0x20002114

0800f468 <stdio_exit_handler>:
 800f468:	4a02      	ldr	r2, [pc, #8]	@ (800f474 <stdio_exit_handler+0xc>)
 800f46a:	4903      	ldr	r1, [pc, #12]	@ (800f478 <stdio_exit_handler+0x10>)
 800f46c:	4803      	ldr	r0, [pc, #12]	@ (800f47c <stdio_exit_handler+0x14>)
 800f46e:	f000 b869 	b.w	800f544 <_fwalk_sglue>
 800f472:	bf00      	nop
 800f474:	20000194 	.word	0x20000194
 800f478:	0800f385 	.word	0x0800f385
 800f47c:	200001a4 	.word	0x200001a4

0800f480 <cleanup_stdio>:
 800f480:	6841      	ldr	r1, [r0, #4]
 800f482:	4b0c      	ldr	r3, [pc, #48]	@ (800f4b4 <cleanup_stdio+0x34>)
 800f484:	4299      	cmp	r1, r3
 800f486:	b510      	push	{r4, lr}
 800f488:	4604      	mov	r4, r0
 800f48a:	d001      	beq.n	800f490 <cleanup_stdio+0x10>
 800f48c:	f7ff ff7a 	bl	800f384 <_fflush_r>
 800f490:	68a1      	ldr	r1, [r4, #8]
 800f492:	4b09      	ldr	r3, [pc, #36]	@ (800f4b8 <cleanup_stdio+0x38>)
 800f494:	4299      	cmp	r1, r3
 800f496:	d002      	beq.n	800f49e <cleanup_stdio+0x1e>
 800f498:	4620      	mov	r0, r4
 800f49a:	f7ff ff73 	bl	800f384 <_fflush_r>
 800f49e:	68e1      	ldr	r1, [r4, #12]
 800f4a0:	4b06      	ldr	r3, [pc, #24]	@ (800f4bc <cleanup_stdio+0x3c>)
 800f4a2:	4299      	cmp	r1, r3
 800f4a4:	d004      	beq.n	800f4b0 <cleanup_stdio+0x30>
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4ac:	f7ff bf6a 	b.w	800f384 <_fflush_r>
 800f4b0:	bd10      	pop	{r4, pc}
 800f4b2:	bf00      	nop
 800f4b4:	20002114 	.word	0x20002114
 800f4b8:	2000217c 	.word	0x2000217c
 800f4bc:	200021e4 	.word	0x200021e4

0800f4c0 <global_stdio_init.part.0>:
 800f4c0:	b510      	push	{r4, lr}
 800f4c2:	4b0b      	ldr	r3, [pc, #44]	@ (800f4f0 <global_stdio_init.part.0+0x30>)
 800f4c4:	4c0b      	ldr	r4, [pc, #44]	@ (800f4f4 <global_stdio_init.part.0+0x34>)
 800f4c6:	4a0c      	ldr	r2, [pc, #48]	@ (800f4f8 <global_stdio_init.part.0+0x38>)
 800f4c8:	601a      	str	r2, [r3, #0]
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	2104      	movs	r1, #4
 800f4d0:	f7ff ff94 	bl	800f3fc <std>
 800f4d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f4d8:	2201      	movs	r2, #1
 800f4da:	2109      	movs	r1, #9
 800f4dc:	f7ff ff8e 	bl	800f3fc <std>
 800f4e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f4e4:	2202      	movs	r2, #2
 800f4e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4ea:	2112      	movs	r1, #18
 800f4ec:	f7ff bf86 	b.w	800f3fc <std>
 800f4f0:	2000224c 	.word	0x2000224c
 800f4f4:	20002114 	.word	0x20002114
 800f4f8:	0800f469 	.word	0x0800f469

0800f4fc <__sfp_lock_acquire>:
 800f4fc:	4801      	ldr	r0, [pc, #4]	@ (800f504 <__sfp_lock_acquire+0x8>)
 800f4fe:	f000 ba78 	b.w	800f9f2 <__retarget_lock_acquire_recursive>
 800f502:	bf00      	nop
 800f504:	20002255 	.word	0x20002255

0800f508 <__sfp_lock_release>:
 800f508:	4801      	ldr	r0, [pc, #4]	@ (800f510 <__sfp_lock_release+0x8>)
 800f50a:	f000 ba73 	b.w	800f9f4 <__retarget_lock_release_recursive>
 800f50e:	bf00      	nop
 800f510:	20002255 	.word	0x20002255

0800f514 <__sinit>:
 800f514:	b510      	push	{r4, lr}
 800f516:	4604      	mov	r4, r0
 800f518:	f7ff fff0 	bl	800f4fc <__sfp_lock_acquire>
 800f51c:	6a23      	ldr	r3, [r4, #32]
 800f51e:	b11b      	cbz	r3, 800f528 <__sinit+0x14>
 800f520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f524:	f7ff bff0 	b.w	800f508 <__sfp_lock_release>
 800f528:	4b04      	ldr	r3, [pc, #16]	@ (800f53c <__sinit+0x28>)
 800f52a:	6223      	str	r3, [r4, #32]
 800f52c:	4b04      	ldr	r3, [pc, #16]	@ (800f540 <__sinit+0x2c>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d1f5      	bne.n	800f520 <__sinit+0xc>
 800f534:	f7ff ffc4 	bl	800f4c0 <global_stdio_init.part.0>
 800f538:	e7f2      	b.n	800f520 <__sinit+0xc>
 800f53a:	bf00      	nop
 800f53c:	0800f481 	.word	0x0800f481
 800f540:	2000224c 	.word	0x2000224c

0800f544 <_fwalk_sglue>:
 800f544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f548:	4607      	mov	r7, r0
 800f54a:	4688      	mov	r8, r1
 800f54c:	4614      	mov	r4, r2
 800f54e:	2600      	movs	r6, #0
 800f550:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f554:	f1b9 0901 	subs.w	r9, r9, #1
 800f558:	d505      	bpl.n	800f566 <_fwalk_sglue+0x22>
 800f55a:	6824      	ldr	r4, [r4, #0]
 800f55c:	2c00      	cmp	r4, #0
 800f55e:	d1f7      	bne.n	800f550 <_fwalk_sglue+0xc>
 800f560:	4630      	mov	r0, r6
 800f562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f566:	89ab      	ldrh	r3, [r5, #12]
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d907      	bls.n	800f57c <_fwalk_sglue+0x38>
 800f56c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f570:	3301      	adds	r3, #1
 800f572:	d003      	beq.n	800f57c <_fwalk_sglue+0x38>
 800f574:	4629      	mov	r1, r5
 800f576:	4638      	mov	r0, r7
 800f578:	47c0      	blx	r8
 800f57a:	4306      	orrs	r6, r0
 800f57c:	3568      	adds	r5, #104	@ 0x68
 800f57e:	e7e9      	b.n	800f554 <_fwalk_sglue+0x10>

0800f580 <iprintf>:
 800f580:	b40f      	push	{r0, r1, r2, r3}
 800f582:	b507      	push	{r0, r1, r2, lr}
 800f584:	4906      	ldr	r1, [pc, #24]	@ (800f5a0 <iprintf+0x20>)
 800f586:	ab04      	add	r3, sp, #16
 800f588:	6808      	ldr	r0, [r1, #0]
 800f58a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f58e:	6881      	ldr	r1, [r0, #8]
 800f590:	9301      	str	r3, [sp, #4]
 800f592:	f002 ff99 	bl	80124c8 <_vfiprintf_r>
 800f596:	b003      	add	sp, #12
 800f598:	f85d eb04 	ldr.w	lr, [sp], #4
 800f59c:	b004      	add	sp, #16
 800f59e:	4770      	bx	lr
 800f5a0:	200001a0 	.word	0x200001a0

0800f5a4 <_puts_r>:
 800f5a4:	6a03      	ldr	r3, [r0, #32]
 800f5a6:	b570      	push	{r4, r5, r6, lr}
 800f5a8:	6884      	ldr	r4, [r0, #8]
 800f5aa:	4605      	mov	r5, r0
 800f5ac:	460e      	mov	r6, r1
 800f5ae:	b90b      	cbnz	r3, 800f5b4 <_puts_r+0x10>
 800f5b0:	f7ff ffb0 	bl	800f514 <__sinit>
 800f5b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f5b6:	07db      	lsls	r3, r3, #31
 800f5b8:	d405      	bmi.n	800f5c6 <_puts_r+0x22>
 800f5ba:	89a3      	ldrh	r3, [r4, #12]
 800f5bc:	0598      	lsls	r0, r3, #22
 800f5be:	d402      	bmi.n	800f5c6 <_puts_r+0x22>
 800f5c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5c2:	f000 fa16 	bl	800f9f2 <__retarget_lock_acquire_recursive>
 800f5c6:	89a3      	ldrh	r3, [r4, #12]
 800f5c8:	0719      	lsls	r1, r3, #28
 800f5ca:	d502      	bpl.n	800f5d2 <_puts_r+0x2e>
 800f5cc:	6923      	ldr	r3, [r4, #16]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d135      	bne.n	800f63e <_puts_r+0x9a>
 800f5d2:	4621      	mov	r1, r4
 800f5d4:	4628      	mov	r0, r5
 800f5d6:	f000 f911 	bl	800f7fc <__swsetup_r>
 800f5da:	b380      	cbz	r0, 800f63e <_puts_r+0x9a>
 800f5dc:	f04f 35ff 	mov.w	r5, #4294967295
 800f5e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f5e2:	07da      	lsls	r2, r3, #31
 800f5e4:	d405      	bmi.n	800f5f2 <_puts_r+0x4e>
 800f5e6:	89a3      	ldrh	r3, [r4, #12]
 800f5e8:	059b      	lsls	r3, r3, #22
 800f5ea:	d402      	bmi.n	800f5f2 <_puts_r+0x4e>
 800f5ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5ee:	f000 fa01 	bl	800f9f4 <__retarget_lock_release_recursive>
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	bd70      	pop	{r4, r5, r6, pc}
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	da04      	bge.n	800f604 <_puts_r+0x60>
 800f5fa:	69a2      	ldr	r2, [r4, #24]
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	dc17      	bgt.n	800f630 <_puts_r+0x8c>
 800f600:	290a      	cmp	r1, #10
 800f602:	d015      	beq.n	800f630 <_puts_r+0x8c>
 800f604:	6823      	ldr	r3, [r4, #0]
 800f606:	1c5a      	adds	r2, r3, #1
 800f608:	6022      	str	r2, [r4, #0]
 800f60a:	7019      	strb	r1, [r3, #0]
 800f60c:	68a3      	ldr	r3, [r4, #8]
 800f60e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f612:	3b01      	subs	r3, #1
 800f614:	60a3      	str	r3, [r4, #8]
 800f616:	2900      	cmp	r1, #0
 800f618:	d1ed      	bne.n	800f5f6 <_puts_r+0x52>
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	da11      	bge.n	800f642 <_puts_r+0x9e>
 800f61e:	4622      	mov	r2, r4
 800f620:	210a      	movs	r1, #10
 800f622:	4628      	mov	r0, r5
 800f624:	f000 f8ab 	bl	800f77e <__swbuf_r>
 800f628:	3001      	adds	r0, #1
 800f62a:	d0d7      	beq.n	800f5dc <_puts_r+0x38>
 800f62c:	250a      	movs	r5, #10
 800f62e:	e7d7      	b.n	800f5e0 <_puts_r+0x3c>
 800f630:	4622      	mov	r2, r4
 800f632:	4628      	mov	r0, r5
 800f634:	f000 f8a3 	bl	800f77e <__swbuf_r>
 800f638:	3001      	adds	r0, #1
 800f63a:	d1e7      	bne.n	800f60c <_puts_r+0x68>
 800f63c:	e7ce      	b.n	800f5dc <_puts_r+0x38>
 800f63e:	3e01      	subs	r6, #1
 800f640:	e7e4      	b.n	800f60c <_puts_r+0x68>
 800f642:	6823      	ldr	r3, [r4, #0]
 800f644:	1c5a      	adds	r2, r3, #1
 800f646:	6022      	str	r2, [r4, #0]
 800f648:	220a      	movs	r2, #10
 800f64a:	701a      	strb	r2, [r3, #0]
 800f64c:	e7ee      	b.n	800f62c <_puts_r+0x88>
	...

0800f650 <puts>:
 800f650:	4b02      	ldr	r3, [pc, #8]	@ (800f65c <puts+0xc>)
 800f652:	4601      	mov	r1, r0
 800f654:	6818      	ldr	r0, [r3, #0]
 800f656:	f7ff bfa5 	b.w	800f5a4 <_puts_r>
 800f65a:	bf00      	nop
 800f65c:	200001a0 	.word	0x200001a0

0800f660 <siprintf>:
 800f660:	b40e      	push	{r1, r2, r3}
 800f662:	b500      	push	{lr}
 800f664:	b09c      	sub	sp, #112	@ 0x70
 800f666:	ab1d      	add	r3, sp, #116	@ 0x74
 800f668:	9002      	str	r0, [sp, #8]
 800f66a:	9006      	str	r0, [sp, #24]
 800f66c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f670:	4809      	ldr	r0, [pc, #36]	@ (800f698 <siprintf+0x38>)
 800f672:	9107      	str	r1, [sp, #28]
 800f674:	9104      	str	r1, [sp, #16]
 800f676:	4909      	ldr	r1, [pc, #36]	@ (800f69c <siprintf+0x3c>)
 800f678:	f853 2b04 	ldr.w	r2, [r3], #4
 800f67c:	9105      	str	r1, [sp, #20]
 800f67e:	6800      	ldr	r0, [r0, #0]
 800f680:	9301      	str	r3, [sp, #4]
 800f682:	a902      	add	r1, sp, #8
 800f684:	f002 fc2e 	bl	8011ee4 <_svfiprintf_r>
 800f688:	9b02      	ldr	r3, [sp, #8]
 800f68a:	2200      	movs	r2, #0
 800f68c:	701a      	strb	r2, [r3, #0]
 800f68e:	b01c      	add	sp, #112	@ 0x70
 800f690:	f85d eb04 	ldr.w	lr, [sp], #4
 800f694:	b003      	add	sp, #12
 800f696:	4770      	bx	lr
 800f698:	200001a0 	.word	0x200001a0
 800f69c:	ffff0208 	.word	0xffff0208

0800f6a0 <siscanf>:
 800f6a0:	b40e      	push	{r1, r2, r3}
 800f6a2:	b530      	push	{r4, r5, lr}
 800f6a4:	b09c      	sub	sp, #112	@ 0x70
 800f6a6:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f6a8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f6ac:	f854 5b04 	ldr.w	r5, [r4], #4
 800f6b0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f6b4:	9002      	str	r0, [sp, #8]
 800f6b6:	9006      	str	r0, [sp, #24]
 800f6b8:	f7f0 fdda 	bl	8000270 <strlen>
 800f6bc:	4b0b      	ldr	r3, [pc, #44]	@ (800f6ec <siscanf+0x4c>)
 800f6be:	9003      	str	r0, [sp, #12]
 800f6c0:	9007      	str	r0, [sp, #28]
 800f6c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6c4:	480a      	ldr	r0, [pc, #40]	@ (800f6f0 <siscanf+0x50>)
 800f6c6:	9401      	str	r4, [sp, #4]
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f6cc:	9314      	str	r3, [sp, #80]	@ 0x50
 800f6ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f6d2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f6d6:	462a      	mov	r2, r5
 800f6d8:	4623      	mov	r3, r4
 800f6da:	a902      	add	r1, sp, #8
 800f6dc:	6800      	ldr	r0, [r0, #0]
 800f6de:	f002 fd55 	bl	801218c <__ssvfiscanf_r>
 800f6e2:	b01c      	add	sp, #112	@ 0x70
 800f6e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6e8:	b003      	add	sp, #12
 800f6ea:	4770      	bx	lr
 800f6ec:	0800f717 	.word	0x0800f717
 800f6f0:	200001a0 	.word	0x200001a0

0800f6f4 <__sread>:
 800f6f4:	b510      	push	{r4, lr}
 800f6f6:	460c      	mov	r4, r1
 800f6f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6fc:	f000 f92a 	bl	800f954 <_read_r>
 800f700:	2800      	cmp	r0, #0
 800f702:	bfab      	itete	ge
 800f704:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f706:	89a3      	ldrhlt	r3, [r4, #12]
 800f708:	181b      	addge	r3, r3, r0
 800f70a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f70e:	bfac      	ite	ge
 800f710:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f712:	81a3      	strhlt	r3, [r4, #12]
 800f714:	bd10      	pop	{r4, pc}

0800f716 <__seofread>:
 800f716:	2000      	movs	r0, #0
 800f718:	4770      	bx	lr

0800f71a <__swrite>:
 800f71a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f71e:	461f      	mov	r7, r3
 800f720:	898b      	ldrh	r3, [r1, #12]
 800f722:	05db      	lsls	r3, r3, #23
 800f724:	4605      	mov	r5, r0
 800f726:	460c      	mov	r4, r1
 800f728:	4616      	mov	r6, r2
 800f72a:	d505      	bpl.n	800f738 <__swrite+0x1e>
 800f72c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f730:	2302      	movs	r3, #2
 800f732:	2200      	movs	r2, #0
 800f734:	f000 f8fc 	bl	800f930 <_lseek_r>
 800f738:	89a3      	ldrh	r3, [r4, #12]
 800f73a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f73e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f742:	81a3      	strh	r3, [r4, #12]
 800f744:	4632      	mov	r2, r6
 800f746:	463b      	mov	r3, r7
 800f748:	4628      	mov	r0, r5
 800f74a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f74e:	f000 b913 	b.w	800f978 <_write_r>

0800f752 <__sseek>:
 800f752:	b510      	push	{r4, lr}
 800f754:	460c      	mov	r4, r1
 800f756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f75a:	f000 f8e9 	bl	800f930 <_lseek_r>
 800f75e:	1c43      	adds	r3, r0, #1
 800f760:	89a3      	ldrh	r3, [r4, #12]
 800f762:	bf15      	itete	ne
 800f764:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f766:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f76a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f76e:	81a3      	strheq	r3, [r4, #12]
 800f770:	bf18      	it	ne
 800f772:	81a3      	strhne	r3, [r4, #12]
 800f774:	bd10      	pop	{r4, pc}

0800f776 <__sclose>:
 800f776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f77a:	f000 b8c9 	b.w	800f910 <_close_r>

0800f77e <__swbuf_r>:
 800f77e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f780:	460e      	mov	r6, r1
 800f782:	4614      	mov	r4, r2
 800f784:	4605      	mov	r5, r0
 800f786:	b118      	cbz	r0, 800f790 <__swbuf_r+0x12>
 800f788:	6a03      	ldr	r3, [r0, #32]
 800f78a:	b90b      	cbnz	r3, 800f790 <__swbuf_r+0x12>
 800f78c:	f7ff fec2 	bl	800f514 <__sinit>
 800f790:	69a3      	ldr	r3, [r4, #24]
 800f792:	60a3      	str	r3, [r4, #8]
 800f794:	89a3      	ldrh	r3, [r4, #12]
 800f796:	071a      	lsls	r2, r3, #28
 800f798:	d501      	bpl.n	800f79e <__swbuf_r+0x20>
 800f79a:	6923      	ldr	r3, [r4, #16]
 800f79c:	b943      	cbnz	r3, 800f7b0 <__swbuf_r+0x32>
 800f79e:	4621      	mov	r1, r4
 800f7a0:	4628      	mov	r0, r5
 800f7a2:	f000 f82b 	bl	800f7fc <__swsetup_r>
 800f7a6:	b118      	cbz	r0, 800f7b0 <__swbuf_r+0x32>
 800f7a8:	f04f 37ff 	mov.w	r7, #4294967295
 800f7ac:	4638      	mov	r0, r7
 800f7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7b0:	6823      	ldr	r3, [r4, #0]
 800f7b2:	6922      	ldr	r2, [r4, #16]
 800f7b4:	1a98      	subs	r0, r3, r2
 800f7b6:	6963      	ldr	r3, [r4, #20]
 800f7b8:	b2f6      	uxtb	r6, r6
 800f7ba:	4283      	cmp	r3, r0
 800f7bc:	4637      	mov	r7, r6
 800f7be:	dc05      	bgt.n	800f7cc <__swbuf_r+0x4e>
 800f7c0:	4621      	mov	r1, r4
 800f7c2:	4628      	mov	r0, r5
 800f7c4:	f7ff fdde 	bl	800f384 <_fflush_r>
 800f7c8:	2800      	cmp	r0, #0
 800f7ca:	d1ed      	bne.n	800f7a8 <__swbuf_r+0x2a>
 800f7cc:	68a3      	ldr	r3, [r4, #8]
 800f7ce:	3b01      	subs	r3, #1
 800f7d0:	60a3      	str	r3, [r4, #8]
 800f7d2:	6823      	ldr	r3, [r4, #0]
 800f7d4:	1c5a      	adds	r2, r3, #1
 800f7d6:	6022      	str	r2, [r4, #0]
 800f7d8:	701e      	strb	r6, [r3, #0]
 800f7da:	6962      	ldr	r2, [r4, #20]
 800f7dc:	1c43      	adds	r3, r0, #1
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d004      	beq.n	800f7ec <__swbuf_r+0x6e>
 800f7e2:	89a3      	ldrh	r3, [r4, #12]
 800f7e4:	07db      	lsls	r3, r3, #31
 800f7e6:	d5e1      	bpl.n	800f7ac <__swbuf_r+0x2e>
 800f7e8:	2e0a      	cmp	r6, #10
 800f7ea:	d1df      	bne.n	800f7ac <__swbuf_r+0x2e>
 800f7ec:	4621      	mov	r1, r4
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	f7ff fdc8 	bl	800f384 <_fflush_r>
 800f7f4:	2800      	cmp	r0, #0
 800f7f6:	d0d9      	beq.n	800f7ac <__swbuf_r+0x2e>
 800f7f8:	e7d6      	b.n	800f7a8 <__swbuf_r+0x2a>
	...

0800f7fc <__swsetup_r>:
 800f7fc:	b538      	push	{r3, r4, r5, lr}
 800f7fe:	4b29      	ldr	r3, [pc, #164]	@ (800f8a4 <__swsetup_r+0xa8>)
 800f800:	4605      	mov	r5, r0
 800f802:	6818      	ldr	r0, [r3, #0]
 800f804:	460c      	mov	r4, r1
 800f806:	b118      	cbz	r0, 800f810 <__swsetup_r+0x14>
 800f808:	6a03      	ldr	r3, [r0, #32]
 800f80a:	b90b      	cbnz	r3, 800f810 <__swsetup_r+0x14>
 800f80c:	f7ff fe82 	bl	800f514 <__sinit>
 800f810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f814:	0719      	lsls	r1, r3, #28
 800f816:	d422      	bmi.n	800f85e <__swsetup_r+0x62>
 800f818:	06da      	lsls	r2, r3, #27
 800f81a:	d407      	bmi.n	800f82c <__swsetup_r+0x30>
 800f81c:	2209      	movs	r2, #9
 800f81e:	602a      	str	r2, [r5, #0]
 800f820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f824:	81a3      	strh	r3, [r4, #12]
 800f826:	f04f 30ff 	mov.w	r0, #4294967295
 800f82a:	e033      	b.n	800f894 <__swsetup_r+0x98>
 800f82c:	0758      	lsls	r0, r3, #29
 800f82e:	d512      	bpl.n	800f856 <__swsetup_r+0x5a>
 800f830:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f832:	b141      	cbz	r1, 800f846 <__swsetup_r+0x4a>
 800f834:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f838:	4299      	cmp	r1, r3
 800f83a:	d002      	beq.n	800f842 <__swsetup_r+0x46>
 800f83c:	4628      	mov	r0, r5
 800f83e:	f000 ff3b 	bl	80106b8 <_free_r>
 800f842:	2300      	movs	r3, #0
 800f844:	6363      	str	r3, [r4, #52]	@ 0x34
 800f846:	89a3      	ldrh	r3, [r4, #12]
 800f848:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f84c:	81a3      	strh	r3, [r4, #12]
 800f84e:	2300      	movs	r3, #0
 800f850:	6063      	str	r3, [r4, #4]
 800f852:	6923      	ldr	r3, [r4, #16]
 800f854:	6023      	str	r3, [r4, #0]
 800f856:	89a3      	ldrh	r3, [r4, #12]
 800f858:	f043 0308 	orr.w	r3, r3, #8
 800f85c:	81a3      	strh	r3, [r4, #12]
 800f85e:	6923      	ldr	r3, [r4, #16]
 800f860:	b94b      	cbnz	r3, 800f876 <__swsetup_r+0x7a>
 800f862:	89a3      	ldrh	r3, [r4, #12]
 800f864:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f86c:	d003      	beq.n	800f876 <__swsetup_r+0x7a>
 800f86e:	4621      	mov	r1, r4
 800f870:	4628      	mov	r0, r5
 800f872:	f003 f8b5 	bl	80129e0 <__smakebuf_r>
 800f876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f87a:	f013 0201 	ands.w	r2, r3, #1
 800f87e:	d00a      	beq.n	800f896 <__swsetup_r+0x9a>
 800f880:	2200      	movs	r2, #0
 800f882:	60a2      	str	r2, [r4, #8]
 800f884:	6962      	ldr	r2, [r4, #20]
 800f886:	4252      	negs	r2, r2
 800f888:	61a2      	str	r2, [r4, #24]
 800f88a:	6922      	ldr	r2, [r4, #16]
 800f88c:	b942      	cbnz	r2, 800f8a0 <__swsetup_r+0xa4>
 800f88e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f892:	d1c5      	bne.n	800f820 <__swsetup_r+0x24>
 800f894:	bd38      	pop	{r3, r4, r5, pc}
 800f896:	0799      	lsls	r1, r3, #30
 800f898:	bf58      	it	pl
 800f89a:	6962      	ldrpl	r2, [r4, #20]
 800f89c:	60a2      	str	r2, [r4, #8]
 800f89e:	e7f4      	b.n	800f88a <__swsetup_r+0x8e>
 800f8a0:	2000      	movs	r0, #0
 800f8a2:	e7f7      	b.n	800f894 <__swsetup_r+0x98>
 800f8a4:	200001a0 	.word	0x200001a0

0800f8a8 <memset>:
 800f8a8:	4402      	add	r2, r0
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	4293      	cmp	r3, r2
 800f8ae:	d100      	bne.n	800f8b2 <memset+0xa>
 800f8b0:	4770      	bx	lr
 800f8b2:	f803 1b01 	strb.w	r1, [r3], #1
 800f8b6:	e7f9      	b.n	800f8ac <memset+0x4>

0800f8b8 <strncmp>:
 800f8b8:	b510      	push	{r4, lr}
 800f8ba:	b16a      	cbz	r2, 800f8d8 <strncmp+0x20>
 800f8bc:	3901      	subs	r1, #1
 800f8be:	1884      	adds	r4, r0, r2
 800f8c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d103      	bne.n	800f8d4 <strncmp+0x1c>
 800f8cc:	42a0      	cmp	r0, r4
 800f8ce:	d001      	beq.n	800f8d4 <strncmp+0x1c>
 800f8d0:	2a00      	cmp	r2, #0
 800f8d2:	d1f5      	bne.n	800f8c0 <strncmp+0x8>
 800f8d4:	1ad0      	subs	r0, r2, r3
 800f8d6:	bd10      	pop	{r4, pc}
 800f8d8:	4610      	mov	r0, r2
 800f8da:	e7fc      	b.n	800f8d6 <strncmp+0x1e>

0800f8dc <strstr>:
 800f8dc:	780a      	ldrb	r2, [r1, #0]
 800f8de:	b570      	push	{r4, r5, r6, lr}
 800f8e0:	b96a      	cbnz	r2, 800f8fe <strstr+0x22>
 800f8e2:	bd70      	pop	{r4, r5, r6, pc}
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d109      	bne.n	800f8fc <strstr+0x20>
 800f8e8:	460c      	mov	r4, r1
 800f8ea:	4605      	mov	r5, r0
 800f8ec:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d0f6      	beq.n	800f8e2 <strstr+0x6>
 800f8f4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f8f8:	429e      	cmp	r6, r3
 800f8fa:	d0f7      	beq.n	800f8ec <strstr+0x10>
 800f8fc:	3001      	adds	r0, #1
 800f8fe:	7803      	ldrb	r3, [r0, #0]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d1ef      	bne.n	800f8e4 <strstr+0x8>
 800f904:	4618      	mov	r0, r3
 800f906:	e7ec      	b.n	800f8e2 <strstr+0x6>

0800f908 <_localeconv_r>:
 800f908:	4800      	ldr	r0, [pc, #0]	@ (800f90c <_localeconv_r+0x4>)
 800f90a:	4770      	bx	lr
 800f90c:	200002e0 	.word	0x200002e0

0800f910 <_close_r>:
 800f910:	b538      	push	{r3, r4, r5, lr}
 800f912:	4d06      	ldr	r5, [pc, #24]	@ (800f92c <_close_r+0x1c>)
 800f914:	2300      	movs	r3, #0
 800f916:	4604      	mov	r4, r0
 800f918:	4608      	mov	r0, r1
 800f91a:	602b      	str	r3, [r5, #0]
 800f91c:	f7f3 f8bd 	bl	8002a9a <_close>
 800f920:	1c43      	adds	r3, r0, #1
 800f922:	d102      	bne.n	800f92a <_close_r+0x1a>
 800f924:	682b      	ldr	r3, [r5, #0]
 800f926:	b103      	cbz	r3, 800f92a <_close_r+0x1a>
 800f928:	6023      	str	r3, [r4, #0]
 800f92a:	bd38      	pop	{r3, r4, r5, pc}
 800f92c:	20002250 	.word	0x20002250

0800f930 <_lseek_r>:
 800f930:	b538      	push	{r3, r4, r5, lr}
 800f932:	4d07      	ldr	r5, [pc, #28]	@ (800f950 <_lseek_r+0x20>)
 800f934:	4604      	mov	r4, r0
 800f936:	4608      	mov	r0, r1
 800f938:	4611      	mov	r1, r2
 800f93a:	2200      	movs	r2, #0
 800f93c:	602a      	str	r2, [r5, #0]
 800f93e:	461a      	mov	r2, r3
 800f940:	f7f3 f8d2 	bl	8002ae8 <_lseek>
 800f944:	1c43      	adds	r3, r0, #1
 800f946:	d102      	bne.n	800f94e <_lseek_r+0x1e>
 800f948:	682b      	ldr	r3, [r5, #0]
 800f94a:	b103      	cbz	r3, 800f94e <_lseek_r+0x1e>
 800f94c:	6023      	str	r3, [r4, #0]
 800f94e:	bd38      	pop	{r3, r4, r5, pc}
 800f950:	20002250 	.word	0x20002250

0800f954 <_read_r>:
 800f954:	b538      	push	{r3, r4, r5, lr}
 800f956:	4d07      	ldr	r5, [pc, #28]	@ (800f974 <_read_r+0x20>)
 800f958:	4604      	mov	r4, r0
 800f95a:	4608      	mov	r0, r1
 800f95c:	4611      	mov	r1, r2
 800f95e:	2200      	movs	r2, #0
 800f960:	602a      	str	r2, [r5, #0]
 800f962:	461a      	mov	r2, r3
 800f964:	f7f3 f87c 	bl	8002a60 <_read>
 800f968:	1c43      	adds	r3, r0, #1
 800f96a:	d102      	bne.n	800f972 <_read_r+0x1e>
 800f96c:	682b      	ldr	r3, [r5, #0]
 800f96e:	b103      	cbz	r3, 800f972 <_read_r+0x1e>
 800f970:	6023      	str	r3, [r4, #0]
 800f972:	bd38      	pop	{r3, r4, r5, pc}
 800f974:	20002250 	.word	0x20002250

0800f978 <_write_r>:
 800f978:	b538      	push	{r3, r4, r5, lr}
 800f97a:	4d07      	ldr	r5, [pc, #28]	@ (800f998 <_write_r+0x20>)
 800f97c:	4604      	mov	r4, r0
 800f97e:	4608      	mov	r0, r1
 800f980:	4611      	mov	r1, r2
 800f982:	2200      	movs	r2, #0
 800f984:	602a      	str	r2, [r5, #0]
 800f986:	461a      	mov	r2, r3
 800f988:	f7f2 fdb8 	bl	80024fc <_write>
 800f98c:	1c43      	adds	r3, r0, #1
 800f98e:	d102      	bne.n	800f996 <_write_r+0x1e>
 800f990:	682b      	ldr	r3, [r5, #0]
 800f992:	b103      	cbz	r3, 800f996 <_write_r+0x1e>
 800f994:	6023      	str	r3, [r4, #0]
 800f996:	bd38      	pop	{r3, r4, r5, pc}
 800f998:	20002250 	.word	0x20002250

0800f99c <__errno>:
 800f99c:	4b01      	ldr	r3, [pc, #4]	@ (800f9a4 <__errno+0x8>)
 800f99e:	6818      	ldr	r0, [r3, #0]
 800f9a0:	4770      	bx	lr
 800f9a2:	bf00      	nop
 800f9a4:	200001a0 	.word	0x200001a0

0800f9a8 <__libc_init_array>:
 800f9a8:	b570      	push	{r4, r5, r6, lr}
 800f9aa:	4d0d      	ldr	r5, [pc, #52]	@ (800f9e0 <__libc_init_array+0x38>)
 800f9ac:	4c0d      	ldr	r4, [pc, #52]	@ (800f9e4 <__libc_init_array+0x3c>)
 800f9ae:	1b64      	subs	r4, r4, r5
 800f9b0:	10a4      	asrs	r4, r4, #2
 800f9b2:	2600      	movs	r6, #0
 800f9b4:	42a6      	cmp	r6, r4
 800f9b6:	d109      	bne.n	800f9cc <__libc_init_array+0x24>
 800f9b8:	4d0b      	ldr	r5, [pc, #44]	@ (800f9e8 <__libc_init_array+0x40>)
 800f9ba:	4c0c      	ldr	r4, [pc, #48]	@ (800f9ec <__libc_init_array+0x44>)
 800f9bc:	f003 fe20 	bl	8013600 <_init>
 800f9c0:	1b64      	subs	r4, r4, r5
 800f9c2:	10a4      	asrs	r4, r4, #2
 800f9c4:	2600      	movs	r6, #0
 800f9c6:	42a6      	cmp	r6, r4
 800f9c8:	d105      	bne.n	800f9d6 <__libc_init_array+0x2e>
 800f9ca:	bd70      	pop	{r4, r5, r6, pc}
 800f9cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9d0:	4798      	blx	r3
 800f9d2:	3601      	adds	r6, #1
 800f9d4:	e7ee      	b.n	800f9b4 <__libc_init_array+0xc>
 800f9d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9da:	4798      	blx	r3
 800f9dc:	3601      	adds	r6, #1
 800f9de:	e7f2      	b.n	800f9c6 <__libc_init_array+0x1e>
 800f9e0:	08013d70 	.word	0x08013d70
 800f9e4:	08013d70 	.word	0x08013d70
 800f9e8:	08013d70 	.word	0x08013d70
 800f9ec:	08013d74 	.word	0x08013d74

0800f9f0 <__retarget_lock_init_recursive>:
 800f9f0:	4770      	bx	lr

0800f9f2 <__retarget_lock_acquire_recursive>:
 800f9f2:	4770      	bx	lr

0800f9f4 <__retarget_lock_release_recursive>:
 800f9f4:	4770      	bx	lr

0800f9f6 <memcpy>:
 800f9f6:	440a      	add	r2, r1
 800f9f8:	4291      	cmp	r1, r2
 800f9fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800f9fe:	d100      	bne.n	800fa02 <memcpy+0xc>
 800fa00:	4770      	bx	lr
 800fa02:	b510      	push	{r4, lr}
 800fa04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa08:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa0c:	4291      	cmp	r1, r2
 800fa0e:	d1f9      	bne.n	800fa04 <memcpy+0xe>
 800fa10:	bd10      	pop	{r4, pc}
	...

0800fa14 <nanf>:
 800fa14:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fa1c <nanf+0x8>
 800fa18:	4770      	bx	lr
 800fa1a:	bf00      	nop
 800fa1c:	7fc00000 	.word	0x7fc00000

0800fa20 <quorem>:
 800fa20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa24:	6903      	ldr	r3, [r0, #16]
 800fa26:	690c      	ldr	r4, [r1, #16]
 800fa28:	42a3      	cmp	r3, r4
 800fa2a:	4607      	mov	r7, r0
 800fa2c:	db7e      	blt.n	800fb2c <quorem+0x10c>
 800fa2e:	3c01      	subs	r4, #1
 800fa30:	f101 0814 	add.w	r8, r1, #20
 800fa34:	00a3      	lsls	r3, r4, #2
 800fa36:	f100 0514 	add.w	r5, r0, #20
 800fa3a:	9300      	str	r3, [sp, #0]
 800fa3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa40:	9301      	str	r3, [sp, #4]
 800fa42:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fa46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa4a:	3301      	adds	r3, #1
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fa52:	fbb2 f6f3 	udiv	r6, r2, r3
 800fa56:	d32e      	bcc.n	800fab6 <quorem+0x96>
 800fa58:	f04f 0a00 	mov.w	sl, #0
 800fa5c:	46c4      	mov	ip, r8
 800fa5e:	46ae      	mov	lr, r5
 800fa60:	46d3      	mov	fp, sl
 800fa62:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fa66:	b298      	uxth	r0, r3
 800fa68:	fb06 a000 	mla	r0, r6, r0, sl
 800fa6c:	0c02      	lsrs	r2, r0, #16
 800fa6e:	0c1b      	lsrs	r3, r3, #16
 800fa70:	fb06 2303 	mla	r3, r6, r3, r2
 800fa74:	f8de 2000 	ldr.w	r2, [lr]
 800fa78:	b280      	uxth	r0, r0
 800fa7a:	b292      	uxth	r2, r2
 800fa7c:	1a12      	subs	r2, r2, r0
 800fa7e:	445a      	add	r2, fp
 800fa80:	f8de 0000 	ldr.w	r0, [lr]
 800fa84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fa8e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fa92:	b292      	uxth	r2, r2
 800fa94:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fa98:	45e1      	cmp	r9, ip
 800fa9a:	f84e 2b04 	str.w	r2, [lr], #4
 800fa9e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800faa2:	d2de      	bcs.n	800fa62 <quorem+0x42>
 800faa4:	9b00      	ldr	r3, [sp, #0]
 800faa6:	58eb      	ldr	r3, [r5, r3]
 800faa8:	b92b      	cbnz	r3, 800fab6 <quorem+0x96>
 800faaa:	9b01      	ldr	r3, [sp, #4]
 800faac:	3b04      	subs	r3, #4
 800faae:	429d      	cmp	r5, r3
 800fab0:	461a      	mov	r2, r3
 800fab2:	d32f      	bcc.n	800fb14 <quorem+0xf4>
 800fab4:	613c      	str	r4, [r7, #16]
 800fab6:	4638      	mov	r0, r7
 800fab8:	f001 f9c2 	bl	8010e40 <__mcmp>
 800fabc:	2800      	cmp	r0, #0
 800fabe:	db25      	blt.n	800fb0c <quorem+0xec>
 800fac0:	4629      	mov	r1, r5
 800fac2:	2000      	movs	r0, #0
 800fac4:	f858 2b04 	ldr.w	r2, [r8], #4
 800fac8:	f8d1 c000 	ldr.w	ip, [r1]
 800facc:	fa1f fe82 	uxth.w	lr, r2
 800fad0:	fa1f f38c 	uxth.w	r3, ip
 800fad4:	eba3 030e 	sub.w	r3, r3, lr
 800fad8:	4403      	add	r3, r0
 800fada:	0c12      	lsrs	r2, r2, #16
 800fadc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fae0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fae4:	b29b      	uxth	r3, r3
 800fae6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800faea:	45c1      	cmp	r9, r8
 800faec:	f841 3b04 	str.w	r3, [r1], #4
 800faf0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800faf4:	d2e6      	bcs.n	800fac4 <quorem+0xa4>
 800faf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fafa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fafe:	b922      	cbnz	r2, 800fb0a <quorem+0xea>
 800fb00:	3b04      	subs	r3, #4
 800fb02:	429d      	cmp	r5, r3
 800fb04:	461a      	mov	r2, r3
 800fb06:	d30b      	bcc.n	800fb20 <quorem+0x100>
 800fb08:	613c      	str	r4, [r7, #16]
 800fb0a:	3601      	adds	r6, #1
 800fb0c:	4630      	mov	r0, r6
 800fb0e:	b003      	add	sp, #12
 800fb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb14:	6812      	ldr	r2, [r2, #0]
 800fb16:	3b04      	subs	r3, #4
 800fb18:	2a00      	cmp	r2, #0
 800fb1a:	d1cb      	bne.n	800fab4 <quorem+0x94>
 800fb1c:	3c01      	subs	r4, #1
 800fb1e:	e7c6      	b.n	800faae <quorem+0x8e>
 800fb20:	6812      	ldr	r2, [r2, #0]
 800fb22:	3b04      	subs	r3, #4
 800fb24:	2a00      	cmp	r2, #0
 800fb26:	d1ef      	bne.n	800fb08 <quorem+0xe8>
 800fb28:	3c01      	subs	r4, #1
 800fb2a:	e7ea      	b.n	800fb02 <quorem+0xe2>
 800fb2c:	2000      	movs	r0, #0
 800fb2e:	e7ee      	b.n	800fb0e <quorem+0xee>

0800fb30 <_dtoa_r>:
 800fb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb34:	69c7      	ldr	r7, [r0, #28]
 800fb36:	b099      	sub	sp, #100	@ 0x64
 800fb38:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fb3c:	ec55 4b10 	vmov	r4, r5, d0
 800fb40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fb42:	9109      	str	r1, [sp, #36]	@ 0x24
 800fb44:	4683      	mov	fp, r0
 800fb46:	920e      	str	r2, [sp, #56]	@ 0x38
 800fb48:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fb4a:	b97f      	cbnz	r7, 800fb6c <_dtoa_r+0x3c>
 800fb4c:	2010      	movs	r0, #16
 800fb4e:	f000 fdfd 	bl	801074c <malloc>
 800fb52:	4602      	mov	r2, r0
 800fb54:	f8cb 001c 	str.w	r0, [fp, #28]
 800fb58:	b920      	cbnz	r0, 800fb64 <_dtoa_r+0x34>
 800fb5a:	4ba7      	ldr	r3, [pc, #668]	@ (800fdf8 <_dtoa_r+0x2c8>)
 800fb5c:	21ef      	movs	r1, #239	@ 0xef
 800fb5e:	48a7      	ldr	r0, [pc, #668]	@ (800fdfc <_dtoa_r+0x2cc>)
 800fb60:	f003 f842 	bl	8012be8 <__assert_func>
 800fb64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fb68:	6007      	str	r7, [r0, #0]
 800fb6a:	60c7      	str	r7, [r0, #12]
 800fb6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fb70:	6819      	ldr	r1, [r3, #0]
 800fb72:	b159      	cbz	r1, 800fb8c <_dtoa_r+0x5c>
 800fb74:	685a      	ldr	r2, [r3, #4]
 800fb76:	604a      	str	r2, [r1, #4]
 800fb78:	2301      	movs	r3, #1
 800fb7a:	4093      	lsls	r3, r2
 800fb7c:	608b      	str	r3, [r1, #8]
 800fb7e:	4658      	mov	r0, fp
 800fb80:	f000 feda 	bl	8010938 <_Bfree>
 800fb84:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	601a      	str	r2, [r3, #0]
 800fb8c:	1e2b      	subs	r3, r5, #0
 800fb8e:	bfb9      	ittee	lt
 800fb90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fb94:	9303      	strlt	r3, [sp, #12]
 800fb96:	2300      	movge	r3, #0
 800fb98:	6033      	strge	r3, [r6, #0]
 800fb9a:	9f03      	ldr	r7, [sp, #12]
 800fb9c:	4b98      	ldr	r3, [pc, #608]	@ (800fe00 <_dtoa_r+0x2d0>)
 800fb9e:	bfbc      	itt	lt
 800fba0:	2201      	movlt	r2, #1
 800fba2:	6032      	strlt	r2, [r6, #0]
 800fba4:	43bb      	bics	r3, r7
 800fba6:	d112      	bne.n	800fbce <_dtoa_r+0x9e>
 800fba8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fbaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fbae:	6013      	str	r3, [r2, #0]
 800fbb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fbb4:	4323      	orrs	r3, r4
 800fbb6:	f000 854d 	beq.w	8010654 <_dtoa_r+0xb24>
 800fbba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fbbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fe14 <_dtoa_r+0x2e4>
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	f000 854f 	beq.w	8010664 <_dtoa_r+0xb34>
 800fbc6:	f10a 0303 	add.w	r3, sl, #3
 800fbca:	f000 bd49 	b.w	8010660 <_dtoa_r+0xb30>
 800fbce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	ec51 0b17 	vmov	r0, r1, d7
 800fbd8:	2300      	movs	r3, #0
 800fbda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fbde:	f7f0 ff73 	bl	8000ac8 <__aeabi_dcmpeq>
 800fbe2:	4680      	mov	r8, r0
 800fbe4:	b158      	cbz	r0, 800fbfe <_dtoa_r+0xce>
 800fbe6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fbe8:	2301      	movs	r3, #1
 800fbea:	6013      	str	r3, [r2, #0]
 800fbec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fbee:	b113      	cbz	r3, 800fbf6 <_dtoa_r+0xc6>
 800fbf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fbf2:	4b84      	ldr	r3, [pc, #528]	@ (800fe04 <_dtoa_r+0x2d4>)
 800fbf4:	6013      	str	r3, [r2, #0]
 800fbf6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fe18 <_dtoa_r+0x2e8>
 800fbfa:	f000 bd33 	b.w	8010664 <_dtoa_r+0xb34>
 800fbfe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fc02:	aa16      	add	r2, sp, #88	@ 0x58
 800fc04:	a917      	add	r1, sp, #92	@ 0x5c
 800fc06:	4658      	mov	r0, fp
 800fc08:	f001 fa3a 	bl	8011080 <__d2b>
 800fc0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fc10:	4681      	mov	r9, r0
 800fc12:	2e00      	cmp	r6, #0
 800fc14:	d077      	beq.n	800fd06 <_dtoa_r+0x1d6>
 800fc16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fc18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fc1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fc24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fc28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fc2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fc30:	4619      	mov	r1, r3
 800fc32:	2200      	movs	r2, #0
 800fc34:	4b74      	ldr	r3, [pc, #464]	@ (800fe08 <_dtoa_r+0x2d8>)
 800fc36:	f7f0 fb27 	bl	8000288 <__aeabi_dsub>
 800fc3a:	a369      	add	r3, pc, #420	@ (adr r3, 800fde0 <_dtoa_r+0x2b0>)
 800fc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc40:	f7f0 fcda 	bl	80005f8 <__aeabi_dmul>
 800fc44:	a368      	add	r3, pc, #416	@ (adr r3, 800fde8 <_dtoa_r+0x2b8>)
 800fc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4a:	f7f0 fb1f 	bl	800028c <__adddf3>
 800fc4e:	4604      	mov	r4, r0
 800fc50:	4630      	mov	r0, r6
 800fc52:	460d      	mov	r5, r1
 800fc54:	f7f0 fc66 	bl	8000524 <__aeabi_i2d>
 800fc58:	a365      	add	r3, pc, #404	@ (adr r3, 800fdf0 <_dtoa_r+0x2c0>)
 800fc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5e:	f7f0 fccb 	bl	80005f8 <__aeabi_dmul>
 800fc62:	4602      	mov	r2, r0
 800fc64:	460b      	mov	r3, r1
 800fc66:	4620      	mov	r0, r4
 800fc68:	4629      	mov	r1, r5
 800fc6a:	f7f0 fb0f 	bl	800028c <__adddf3>
 800fc6e:	4604      	mov	r4, r0
 800fc70:	460d      	mov	r5, r1
 800fc72:	f7f0 ff71 	bl	8000b58 <__aeabi_d2iz>
 800fc76:	2200      	movs	r2, #0
 800fc78:	4607      	mov	r7, r0
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	4620      	mov	r0, r4
 800fc7e:	4629      	mov	r1, r5
 800fc80:	f7f0 ff2c 	bl	8000adc <__aeabi_dcmplt>
 800fc84:	b140      	cbz	r0, 800fc98 <_dtoa_r+0x168>
 800fc86:	4638      	mov	r0, r7
 800fc88:	f7f0 fc4c 	bl	8000524 <__aeabi_i2d>
 800fc8c:	4622      	mov	r2, r4
 800fc8e:	462b      	mov	r3, r5
 800fc90:	f7f0 ff1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc94:	b900      	cbnz	r0, 800fc98 <_dtoa_r+0x168>
 800fc96:	3f01      	subs	r7, #1
 800fc98:	2f16      	cmp	r7, #22
 800fc9a:	d851      	bhi.n	800fd40 <_dtoa_r+0x210>
 800fc9c:	4b5b      	ldr	r3, [pc, #364]	@ (800fe0c <_dtoa_r+0x2dc>)
 800fc9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fcaa:	f7f0 ff17 	bl	8000adc <__aeabi_dcmplt>
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	d048      	beq.n	800fd44 <_dtoa_r+0x214>
 800fcb2:	3f01      	subs	r7, #1
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	9312      	str	r3, [sp, #72]	@ 0x48
 800fcb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fcba:	1b9b      	subs	r3, r3, r6
 800fcbc:	1e5a      	subs	r2, r3, #1
 800fcbe:	bf44      	itt	mi
 800fcc0:	f1c3 0801 	rsbmi	r8, r3, #1
 800fcc4:	2300      	movmi	r3, #0
 800fcc6:	9208      	str	r2, [sp, #32]
 800fcc8:	bf54      	ite	pl
 800fcca:	f04f 0800 	movpl.w	r8, #0
 800fcce:	9308      	strmi	r3, [sp, #32]
 800fcd0:	2f00      	cmp	r7, #0
 800fcd2:	db39      	blt.n	800fd48 <_dtoa_r+0x218>
 800fcd4:	9b08      	ldr	r3, [sp, #32]
 800fcd6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fcd8:	443b      	add	r3, r7
 800fcda:	9308      	str	r3, [sp, #32]
 800fcdc:	2300      	movs	r3, #0
 800fcde:	930a      	str	r3, [sp, #40]	@ 0x28
 800fce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fce2:	2b09      	cmp	r3, #9
 800fce4:	d864      	bhi.n	800fdb0 <_dtoa_r+0x280>
 800fce6:	2b05      	cmp	r3, #5
 800fce8:	bfc4      	itt	gt
 800fcea:	3b04      	subgt	r3, #4
 800fcec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fcee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcf0:	f1a3 0302 	sub.w	r3, r3, #2
 800fcf4:	bfcc      	ite	gt
 800fcf6:	2400      	movgt	r4, #0
 800fcf8:	2401      	movle	r4, #1
 800fcfa:	2b03      	cmp	r3, #3
 800fcfc:	d863      	bhi.n	800fdc6 <_dtoa_r+0x296>
 800fcfe:	e8df f003 	tbb	[pc, r3]
 800fd02:	372a      	.short	0x372a
 800fd04:	5535      	.short	0x5535
 800fd06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fd0a:	441e      	add	r6, r3
 800fd0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fd10:	2b20      	cmp	r3, #32
 800fd12:	bfc1      	itttt	gt
 800fd14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fd18:	409f      	lslgt	r7, r3
 800fd1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fd1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fd22:	bfd6      	itet	le
 800fd24:	f1c3 0320 	rsble	r3, r3, #32
 800fd28:	ea47 0003 	orrgt.w	r0, r7, r3
 800fd2c:	fa04 f003 	lslle.w	r0, r4, r3
 800fd30:	f7f0 fbe8 	bl	8000504 <__aeabi_ui2d>
 800fd34:	2201      	movs	r2, #1
 800fd36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fd3a:	3e01      	subs	r6, #1
 800fd3c:	9214      	str	r2, [sp, #80]	@ 0x50
 800fd3e:	e777      	b.n	800fc30 <_dtoa_r+0x100>
 800fd40:	2301      	movs	r3, #1
 800fd42:	e7b8      	b.n	800fcb6 <_dtoa_r+0x186>
 800fd44:	9012      	str	r0, [sp, #72]	@ 0x48
 800fd46:	e7b7      	b.n	800fcb8 <_dtoa_r+0x188>
 800fd48:	427b      	negs	r3, r7
 800fd4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	eba8 0807 	sub.w	r8, r8, r7
 800fd52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd54:	e7c4      	b.n	800fce0 <_dtoa_r+0x1b0>
 800fd56:	2300      	movs	r3, #0
 800fd58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	dc35      	bgt.n	800fdcc <_dtoa_r+0x29c>
 800fd60:	2301      	movs	r3, #1
 800fd62:	9300      	str	r3, [sp, #0]
 800fd64:	9307      	str	r3, [sp, #28]
 800fd66:	461a      	mov	r2, r3
 800fd68:	920e      	str	r2, [sp, #56]	@ 0x38
 800fd6a:	e00b      	b.n	800fd84 <_dtoa_r+0x254>
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	e7f3      	b.n	800fd58 <_dtoa_r+0x228>
 800fd70:	2300      	movs	r3, #0
 800fd72:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd76:	18fb      	adds	r3, r7, r3
 800fd78:	9300      	str	r3, [sp, #0]
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	2b01      	cmp	r3, #1
 800fd7e:	9307      	str	r3, [sp, #28]
 800fd80:	bfb8      	it	lt
 800fd82:	2301      	movlt	r3, #1
 800fd84:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fd88:	2100      	movs	r1, #0
 800fd8a:	2204      	movs	r2, #4
 800fd8c:	f102 0514 	add.w	r5, r2, #20
 800fd90:	429d      	cmp	r5, r3
 800fd92:	d91f      	bls.n	800fdd4 <_dtoa_r+0x2a4>
 800fd94:	6041      	str	r1, [r0, #4]
 800fd96:	4658      	mov	r0, fp
 800fd98:	f000 fd8e 	bl	80108b8 <_Balloc>
 800fd9c:	4682      	mov	sl, r0
 800fd9e:	2800      	cmp	r0, #0
 800fda0:	d13c      	bne.n	800fe1c <_dtoa_r+0x2ec>
 800fda2:	4b1b      	ldr	r3, [pc, #108]	@ (800fe10 <_dtoa_r+0x2e0>)
 800fda4:	4602      	mov	r2, r0
 800fda6:	f240 11af 	movw	r1, #431	@ 0x1af
 800fdaa:	e6d8      	b.n	800fb5e <_dtoa_r+0x2e>
 800fdac:	2301      	movs	r3, #1
 800fdae:	e7e0      	b.n	800fd72 <_dtoa_r+0x242>
 800fdb0:	2401      	movs	r4, #1
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fdb8:	f04f 33ff 	mov.w	r3, #4294967295
 800fdbc:	9300      	str	r3, [sp, #0]
 800fdbe:	9307      	str	r3, [sp, #28]
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	2312      	movs	r3, #18
 800fdc4:	e7d0      	b.n	800fd68 <_dtoa_r+0x238>
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fdca:	e7f5      	b.n	800fdb8 <_dtoa_r+0x288>
 800fdcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fdce:	9300      	str	r3, [sp, #0]
 800fdd0:	9307      	str	r3, [sp, #28]
 800fdd2:	e7d7      	b.n	800fd84 <_dtoa_r+0x254>
 800fdd4:	3101      	adds	r1, #1
 800fdd6:	0052      	lsls	r2, r2, #1
 800fdd8:	e7d8      	b.n	800fd8c <_dtoa_r+0x25c>
 800fdda:	bf00      	nop
 800fddc:	f3af 8000 	nop.w
 800fde0:	636f4361 	.word	0x636f4361
 800fde4:	3fd287a7 	.word	0x3fd287a7
 800fde8:	8b60c8b3 	.word	0x8b60c8b3
 800fdec:	3fc68a28 	.word	0x3fc68a28
 800fdf0:	509f79fb 	.word	0x509f79fb
 800fdf4:	3fd34413 	.word	0x3fd34413
 800fdf8:	08013a69 	.word	0x08013a69
 800fdfc:	08013a80 	.word	0x08013a80
 800fe00:	7ff00000 	.word	0x7ff00000
 800fe04:	08013cc0 	.word	0x08013cc0
 800fe08:	3ff80000 	.word	0x3ff80000
 800fe0c:	08013b78 	.word	0x08013b78
 800fe10:	08013ad8 	.word	0x08013ad8
 800fe14:	08013a65 	.word	0x08013a65
 800fe18:	08013cbf 	.word	0x08013cbf
 800fe1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fe20:	6018      	str	r0, [r3, #0]
 800fe22:	9b07      	ldr	r3, [sp, #28]
 800fe24:	2b0e      	cmp	r3, #14
 800fe26:	f200 80a4 	bhi.w	800ff72 <_dtoa_r+0x442>
 800fe2a:	2c00      	cmp	r4, #0
 800fe2c:	f000 80a1 	beq.w	800ff72 <_dtoa_r+0x442>
 800fe30:	2f00      	cmp	r7, #0
 800fe32:	dd33      	ble.n	800fe9c <_dtoa_r+0x36c>
 800fe34:	4bad      	ldr	r3, [pc, #692]	@ (80100ec <_dtoa_r+0x5bc>)
 800fe36:	f007 020f 	and.w	r2, r7, #15
 800fe3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe3e:	ed93 7b00 	vldr	d7, [r3]
 800fe42:	05f8      	lsls	r0, r7, #23
 800fe44:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fe48:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fe4c:	d516      	bpl.n	800fe7c <_dtoa_r+0x34c>
 800fe4e:	4ba8      	ldr	r3, [pc, #672]	@ (80100f0 <_dtoa_r+0x5c0>)
 800fe50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fe54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fe58:	f7f0 fcf8 	bl	800084c <__aeabi_ddiv>
 800fe5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe60:	f004 040f 	and.w	r4, r4, #15
 800fe64:	2603      	movs	r6, #3
 800fe66:	4da2      	ldr	r5, [pc, #648]	@ (80100f0 <_dtoa_r+0x5c0>)
 800fe68:	b954      	cbnz	r4, 800fe80 <_dtoa_r+0x350>
 800fe6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe72:	f7f0 fceb 	bl	800084c <__aeabi_ddiv>
 800fe76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe7a:	e028      	b.n	800fece <_dtoa_r+0x39e>
 800fe7c:	2602      	movs	r6, #2
 800fe7e:	e7f2      	b.n	800fe66 <_dtoa_r+0x336>
 800fe80:	07e1      	lsls	r1, r4, #31
 800fe82:	d508      	bpl.n	800fe96 <_dtoa_r+0x366>
 800fe84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fe8c:	f7f0 fbb4 	bl	80005f8 <__aeabi_dmul>
 800fe90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe94:	3601      	adds	r6, #1
 800fe96:	1064      	asrs	r4, r4, #1
 800fe98:	3508      	adds	r5, #8
 800fe9a:	e7e5      	b.n	800fe68 <_dtoa_r+0x338>
 800fe9c:	f000 80d2 	beq.w	8010044 <_dtoa_r+0x514>
 800fea0:	427c      	negs	r4, r7
 800fea2:	4b92      	ldr	r3, [pc, #584]	@ (80100ec <_dtoa_r+0x5bc>)
 800fea4:	4d92      	ldr	r5, [pc, #584]	@ (80100f0 <_dtoa_r+0x5c0>)
 800fea6:	f004 020f 	and.w	r2, r4, #15
 800feaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800feae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800feb6:	f7f0 fb9f 	bl	80005f8 <__aeabi_dmul>
 800feba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800febe:	1124      	asrs	r4, r4, #4
 800fec0:	2300      	movs	r3, #0
 800fec2:	2602      	movs	r6, #2
 800fec4:	2c00      	cmp	r4, #0
 800fec6:	f040 80b2 	bne.w	801002e <_dtoa_r+0x4fe>
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d1d3      	bne.n	800fe76 <_dtoa_r+0x346>
 800fece:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fed0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	f000 80b7 	beq.w	8010048 <_dtoa_r+0x518>
 800feda:	4b86      	ldr	r3, [pc, #536]	@ (80100f4 <_dtoa_r+0x5c4>)
 800fedc:	2200      	movs	r2, #0
 800fede:	4620      	mov	r0, r4
 800fee0:	4629      	mov	r1, r5
 800fee2:	f7f0 fdfb 	bl	8000adc <__aeabi_dcmplt>
 800fee6:	2800      	cmp	r0, #0
 800fee8:	f000 80ae 	beq.w	8010048 <_dtoa_r+0x518>
 800feec:	9b07      	ldr	r3, [sp, #28]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	f000 80aa 	beq.w	8010048 <_dtoa_r+0x518>
 800fef4:	9b00      	ldr	r3, [sp, #0]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	dd37      	ble.n	800ff6a <_dtoa_r+0x43a>
 800fefa:	1e7b      	subs	r3, r7, #1
 800fefc:	9304      	str	r3, [sp, #16]
 800fefe:	4620      	mov	r0, r4
 800ff00:	4b7d      	ldr	r3, [pc, #500]	@ (80100f8 <_dtoa_r+0x5c8>)
 800ff02:	2200      	movs	r2, #0
 800ff04:	4629      	mov	r1, r5
 800ff06:	f7f0 fb77 	bl	80005f8 <__aeabi_dmul>
 800ff0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff0e:	9c00      	ldr	r4, [sp, #0]
 800ff10:	3601      	adds	r6, #1
 800ff12:	4630      	mov	r0, r6
 800ff14:	f7f0 fb06 	bl	8000524 <__aeabi_i2d>
 800ff18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff1c:	f7f0 fb6c 	bl	80005f8 <__aeabi_dmul>
 800ff20:	4b76      	ldr	r3, [pc, #472]	@ (80100fc <_dtoa_r+0x5cc>)
 800ff22:	2200      	movs	r2, #0
 800ff24:	f7f0 f9b2 	bl	800028c <__adddf3>
 800ff28:	4605      	mov	r5, r0
 800ff2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ff2e:	2c00      	cmp	r4, #0
 800ff30:	f040 808d 	bne.w	801004e <_dtoa_r+0x51e>
 800ff34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff38:	4b71      	ldr	r3, [pc, #452]	@ (8010100 <_dtoa_r+0x5d0>)
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	f7f0 f9a4 	bl	8000288 <__aeabi_dsub>
 800ff40:	4602      	mov	r2, r0
 800ff42:	460b      	mov	r3, r1
 800ff44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ff48:	462a      	mov	r2, r5
 800ff4a:	4633      	mov	r3, r6
 800ff4c:	f7f0 fde4 	bl	8000b18 <__aeabi_dcmpgt>
 800ff50:	2800      	cmp	r0, #0
 800ff52:	f040 828b 	bne.w	801046c <_dtoa_r+0x93c>
 800ff56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff5a:	462a      	mov	r2, r5
 800ff5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ff60:	f7f0 fdbc 	bl	8000adc <__aeabi_dcmplt>
 800ff64:	2800      	cmp	r0, #0
 800ff66:	f040 8128 	bne.w	80101ba <_dtoa_r+0x68a>
 800ff6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ff6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ff72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	f2c0 815a 	blt.w	801022e <_dtoa_r+0x6fe>
 800ff7a:	2f0e      	cmp	r7, #14
 800ff7c:	f300 8157 	bgt.w	801022e <_dtoa_r+0x6fe>
 800ff80:	4b5a      	ldr	r3, [pc, #360]	@ (80100ec <_dtoa_r+0x5bc>)
 800ff82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ff86:	ed93 7b00 	vldr	d7, [r3]
 800ff8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	ed8d 7b00 	vstr	d7, [sp]
 800ff92:	da03      	bge.n	800ff9c <_dtoa_r+0x46c>
 800ff94:	9b07      	ldr	r3, [sp, #28]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	f340 8101 	ble.w	801019e <_dtoa_r+0x66e>
 800ff9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ffa0:	4656      	mov	r6, sl
 800ffa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffa6:	4620      	mov	r0, r4
 800ffa8:	4629      	mov	r1, r5
 800ffaa:	f7f0 fc4f 	bl	800084c <__aeabi_ddiv>
 800ffae:	f7f0 fdd3 	bl	8000b58 <__aeabi_d2iz>
 800ffb2:	4680      	mov	r8, r0
 800ffb4:	f7f0 fab6 	bl	8000524 <__aeabi_i2d>
 800ffb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffbc:	f7f0 fb1c 	bl	80005f8 <__aeabi_dmul>
 800ffc0:	4602      	mov	r2, r0
 800ffc2:	460b      	mov	r3, r1
 800ffc4:	4620      	mov	r0, r4
 800ffc6:	4629      	mov	r1, r5
 800ffc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ffcc:	f7f0 f95c 	bl	8000288 <__aeabi_dsub>
 800ffd0:	f806 4b01 	strb.w	r4, [r6], #1
 800ffd4:	9d07      	ldr	r5, [sp, #28]
 800ffd6:	eba6 040a 	sub.w	r4, r6, sl
 800ffda:	42a5      	cmp	r5, r4
 800ffdc:	4602      	mov	r2, r0
 800ffde:	460b      	mov	r3, r1
 800ffe0:	f040 8117 	bne.w	8010212 <_dtoa_r+0x6e2>
 800ffe4:	f7f0 f952 	bl	800028c <__adddf3>
 800ffe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffec:	4604      	mov	r4, r0
 800ffee:	460d      	mov	r5, r1
 800fff0:	f7f0 fd92 	bl	8000b18 <__aeabi_dcmpgt>
 800fff4:	2800      	cmp	r0, #0
 800fff6:	f040 80f9 	bne.w	80101ec <_dtoa_r+0x6bc>
 800fffa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fffe:	4620      	mov	r0, r4
 8010000:	4629      	mov	r1, r5
 8010002:	f7f0 fd61 	bl	8000ac8 <__aeabi_dcmpeq>
 8010006:	b118      	cbz	r0, 8010010 <_dtoa_r+0x4e0>
 8010008:	f018 0f01 	tst.w	r8, #1
 801000c:	f040 80ee 	bne.w	80101ec <_dtoa_r+0x6bc>
 8010010:	4649      	mov	r1, r9
 8010012:	4658      	mov	r0, fp
 8010014:	f000 fc90 	bl	8010938 <_Bfree>
 8010018:	2300      	movs	r3, #0
 801001a:	7033      	strb	r3, [r6, #0]
 801001c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801001e:	3701      	adds	r7, #1
 8010020:	601f      	str	r7, [r3, #0]
 8010022:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010024:	2b00      	cmp	r3, #0
 8010026:	f000 831d 	beq.w	8010664 <_dtoa_r+0xb34>
 801002a:	601e      	str	r6, [r3, #0]
 801002c:	e31a      	b.n	8010664 <_dtoa_r+0xb34>
 801002e:	07e2      	lsls	r2, r4, #31
 8010030:	d505      	bpl.n	801003e <_dtoa_r+0x50e>
 8010032:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010036:	f7f0 fadf 	bl	80005f8 <__aeabi_dmul>
 801003a:	3601      	adds	r6, #1
 801003c:	2301      	movs	r3, #1
 801003e:	1064      	asrs	r4, r4, #1
 8010040:	3508      	adds	r5, #8
 8010042:	e73f      	b.n	800fec4 <_dtoa_r+0x394>
 8010044:	2602      	movs	r6, #2
 8010046:	e742      	b.n	800fece <_dtoa_r+0x39e>
 8010048:	9c07      	ldr	r4, [sp, #28]
 801004a:	9704      	str	r7, [sp, #16]
 801004c:	e761      	b.n	800ff12 <_dtoa_r+0x3e2>
 801004e:	4b27      	ldr	r3, [pc, #156]	@ (80100ec <_dtoa_r+0x5bc>)
 8010050:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010052:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010056:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801005a:	4454      	add	r4, sl
 801005c:	2900      	cmp	r1, #0
 801005e:	d053      	beq.n	8010108 <_dtoa_r+0x5d8>
 8010060:	4928      	ldr	r1, [pc, #160]	@ (8010104 <_dtoa_r+0x5d4>)
 8010062:	2000      	movs	r0, #0
 8010064:	f7f0 fbf2 	bl	800084c <__aeabi_ddiv>
 8010068:	4633      	mov	r3, r6
 801006a:	462a      	mov	r2, r5
 801006c:	f7f0 f90c 	bl	8000288 <__aeabi_dsub>
 8010070:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010074:	4656      	mov	r6, sl
 8010076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801007a:	f7f0 fd6d 	bl	8000b58 <__aeabi_d2iz>
 801007e:	4605      	mov	r5, r0
 8010080:	f7f0 fa50 	bl	8000524 <__aeabi_i2d>
 8010084:	4602      	mov	r2, r0
 8010086:	460b      	mov	r3, r1
 8010088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801008c:	f7f0 f8fc 	bl	8000288 <__aeabi_dsub>
 8010090:	3530      	adds	r5, #48	@ 0x30
 8010092:	4602      	mov	r2, r0
 8010094:	460b      	mov	r3, r1
 8010096:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801009a:	f806 5b01 	strb.w	r5, [r6], #1
 801009e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80100a2:	f7f0 fd1b 	bl	8000adc <__aeabi_dcmplt>
 80100a6:	2800      	cmp	r0, #0
 80100a8:	d171      	bne.n	801018e <_dtoa_r+0x65e>
 80100aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100ae:	4911      	ldr	r1, [pc, #68]	@ (80100f4 <_dtoa_r+0x5c4>)
 80100b0:	2000      	movs	r0, #0
 80100b2:	f7f0 f8e9 	bl	8000288 <__aeabi_dsub>
 80100b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80100ba:	f7f0 fd0f 	bl	8000adc <__aeabi_dcmplt>
 80100be:	2800      	cmp	r0, #0
 80100c0:	f040 8095 	bne.w	80101ee <_dtoa_r+0x6be>
 80100c4:	42a6      	cmp	r6, r4
 80100c6:	f43f af50 	beq.w	800ff6a <_dtoa_r+0x43a>
 80100ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80100ce:	4b0a      	ldr	r3, [pc, #40]	@ (80100f8 <_dtoa_r+0x5c8>)
 80100d0:	2200      	movs	r2, #0
 80100d2:	f7f0 fa91 	bl	80005f8 <__aeabi_dmul>
 80100d6:	4b08      	ldr	r3, [pc, #32]	@ (80100f8 <_dtoa_r+0x5c8>)
 80100d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80100dc:	2200      	movs	r2, #0
 80100de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100e2:	f7f0 fa89 	bl	80005f8 <__aeabi_dmul>
 80100e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100ea:	e7c4      	b.n	8010076 <_dtoa_r+0x546>
 80100ec:	08013b78 	.word	0x08013b78
 80100f0:	08013b50 	.word	0x08013b50
 80100f4:	3ff00000 	.word	0x3ff00000
 80100f8:	40240000 	.word	0x40240000
 80100fc:	401c0000 	.word	0x401c0000
 8010100:	40140000 	.word	0x40140000
 8010104:	3fe00000 	.word	0x3fe00000
 8010108:	4631      	mov	r1, r6
 801010a:	4628      	mov	r0, r5
 801010c:	f7f0 fa74 	bl	80005f8 <__aeabi_dmul>
 8010110:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010114:	9415      	str	r4, [sp, #84]	@ 0x54
 8010116:	4656      	mov	r6, sl
 8010118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801011c:	f7f0 fd1c 	bl	8000b58 <__aeabi_d2iz>
 8010120:	4605      	mov	r5, r0
 8010122:	f7f0 f9ff 	bl	8000524 <__aeabi_i2d>
 8010126:	4602      	mov	r2, r0
 8010128:	460b      	mov	r3, r1
 801012a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801012e:	f7f0 f8ab 	bl	8000288 <__aeabi_dsub>
 8010132:	3530      	adds	r5, #48	@ 0x30
 8010134:	f806 5b01 	strb.w	r5, [r6], #1
 8010138:	4602      	mov	r2, r0
 801013a:	460b      	mov	r3, r1
 801013c:	42a6      	cmp	r6, r4
 801013e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010142:	f04f 0200 	mov.w	r2, #0
 8010146:	d124      	bne.n	8010192 <_dtoa_r+0x662>
 8010148:	4bac      	ldr	r3, [pc, #688]	@ (80103fc <_dtoa_r+0x8cc>)
 801014a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801014e:	f7f0 f89d 	bl	800028c <__adddf3>
 8010152:	4602      	mov	r2, r0
 8010154:	460b      	mov	r3, r1
 8010156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801015a:	f7f0 fcdd 	bl	8000b18 <__aeabi_dcmpgt>
 801015e:	2800      	cmp	r0, #0
 8010160:	d145      	bne.n	80101ee <_dtoa_r+0x6be>
 8010162:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010166:	49a5      	ldr	r1, [pc, #660]	@ (80103fc <_dtoa_r+0x8cc>)
 8010168:	2000      	movs	r0, #0
 801016a:	f7f0 f88d 	bl	8000288 <__aeabi_dsub>
 801016e:	4602      	mov	r2, r0
 8010170:	460b      	mov	r3, r1
 8010172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010176:	f7f0 fcb1 	bl	8000adc <__aeabi_dcmplt>
 801017a:	2800      	cmp	r0, #0
 801017c:	f43f aef5 	beq.w	800ff6a <_dtoa_r+0x43a>
 8010180:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010182:	1e73      	subs	r3, r6, #1
 8010184:	9315      	str	r3, [sp, #84]	@ 0x54
 8010186:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801018a:	2b30      	cmp	r3, #48	@ 0x30
 801018c:	d0f8      	beq.n	8010180 <_dtoa_r+0x650>
 801018e:	9f04      	ldr	r7, [sp, #16]
 8010190:	e73e      	b.n	8010010 <_dtoa_r+0x4e0>
 8010192:	4b9b      	ldr	r3, [pc, #620]	@ (8010400 <_dtoa_r+0x8d0>)
 8010194:	f7f0 fa30 	bl	80005f8 <__aeabi_dmul>
 8010198:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801019c:	e7bc      	b.n	8010118 <_dtoa_r+0x5e8>
 801019e:	d10c      	bne.n	80101ba <_dtoa_r+0x68a>
 80101a0:	4b98      	ldr	r3, [pc, #608]	@ (8010404 <_dtoa_r+0x8d4>)
 80101a2:	2200      	movs	r2, #0
 80101a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80101a8:	f7f0 fa26 	bl	80005f8 <__aeabi_dmul>
 80101ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101b0:	f7f0 fca8 	bl	8000b04 <__aeabi_dcmpge>
 80101b4:	2800      	cmp	r0, #0
 80101b6:	f000 8157 	beq.w	8010468 <_dtoa_r+0x938>
 80101ba:	2400      	movs	r4, #0
 80101bc:	4625      	mov	r5, r4
 80101be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80101c0:	43db      	mvns	r3, r3
 80101c2:	9304      	str	r3, [sp, #16]
 80101c4:	4656      	mov	r6, sl
 80101c6:	2700      	movs	r7, #0
 80101c8:	4621      	mov	r1, r4
 80101ca:	4658      	mov	r0, fp
 80101cc:	f000 fbb4 	bl	8010938 <_Bfree>
 80101d0:	2d00      	cmp	r5, #0
 80101d2:	d0dc      	beq.n	801018e <_dtoa_r+0x65e>
 80101d4:	b12f      	cbz	r7, 80101e2 <_dtoa_r+0x6b2>
 80101d6:	42af      	cmp	r7, r5
 80101d8:	d003      	beq.n	80101e2 <_dtoa_r+0x6b2>
 80101da:	4639      	mov	r1, r7
 80101dc:	4658      	mov	r0, fp
 80101de:	f000 fbab 	bl	8010938 <_Bfree>
 80101e2:	4629      	mov	r1, r5
 80101e4:	4658      	mov	r0, fp
 80101e6:	f000 fba7 	bl	8010938 <_Bfree>
 80101ea:	e7d0      	b.n	801018e <_dtoa_r+0x65e>
 80101ec:	9704      	str	r7, [sp, #16]
 80101ee:	4633      	mov	r3, r6
 80101f0:	461e      	mov	r6, r3
 80101f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80101f6:	2a39      	cmp	r2, #57	@ 0x39
 80101f8:	d107      	bne.n	801020a <_dtoa_r+0x6da>
 80101fa:	459a      	cmp	sl, r3
 80101fc:	d1f8      	bne.n	80101f0 <_dtoa_r+0x6c0>
 80101fe:	9a04      	ldr	r2, [sp, #16]
 8010200:	3201      	adds	r2, #1
 8010202:	9204      	str	r2, [sp, #16]
 8010204:	2230      	movs	r2, #48	@ 0x30
 8010206:	f88a 2000 	strb.w	r2, [sl]
 801020a:	781a      	ldrb	r2, [r3, #0]
 801020c:	3201      	adds	r2, #1
 801020e:	701a      	strb	r2, [r3, #0]
 8010210:	e7bd      	b.n	801018e <_dtoa_r+0x65e>
 8010212:	4b7b      	ldr	r3, [pc, #492]	@ (8010400 <_dtoa_r+0x8d0>)
 8010214:	2200      	movs	r2, #0
 8010216:	f7f0 f9ef 	bl	80005f8 <__aeabi_dmul>
 801021a:	2200      	movs	r2, #0
 801021c:	2300      	movs	r3, #0
 801021e:	4604      	mov	r4, r0
 8010220:	460d      	mov	r5, r1
 8010222:	f7f0 fc51 	bl	8000ac8 <__aeabi_dcmpeq>
 8010226:	2800      	cmp	r0, #0
 8010228:	f43f aebb 	beq.w	800ffa2 <_dtoa_r+0x472>
 801022c:	e6f0      	b.n	8010010 <_dtoa_r+0x4e0>
 801022e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010230:	2a00      	cmp	r2, #0
 8010232:	f000 80db 	beq.w	80103ec <_dtoa_r+0x8bc>
 8010236:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010238:	2a01      	cmp	r2, #1
 801023a:	f300 80bf 	bgt.w	80103bc <_dtoa_r+0x88c>
 801023e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010240:	2a00      	cmp	r2, #0
 8010242:	f000 80b7 	beq.w	80103b4 <_dtoa_r+0x884>
 8010246:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801024a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801024c:	4646      	mov	r6, r8
 801024e:	9a08      	ldr	r2, [sp, #32]
 8010250:	2101      	movs	r1, #1
 8010252:	441a      	add	r2, r3
 8010254:	4658      	mov	r0, fp
 8010256:	4498      	add	r8, r3
 8010258:	9208      	str	r2, [sp, #32]
 801025a:	f000 fc6b 	bl	8010b34 <__i2b>
 801025e:	4605      	mov	r5, r0
 8010260:	b15e      	cbz	r6, 801027a <_dtoa_r+0x74a>
 8010262:	9b08      	ldr	r3, [sp, #32]
 8010264:	2b00      	cmp	r3, #0
 8010266:	dd08      	ble.n	801027a <_dtoa_r+0x74a>
 8010268:	42b3      	cmp	r3, r6
 801026a:	9a08      	ldr	r2, [sp, #32]
 801026c:	bfa8      	it	ge
 801026e:	4633      	movge	r3, r6
 8010270:	eba8 0803 	sub.w	r8, r8, r3
 8010274:	1af6      	subs	r6, r6, r3
 8010276:	1ad3      	subs	r3, r2, r3
 8010278:	9308      	str	r3, [sp, #32]
 801027a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801027c:	b1f3      	cbz	r3, 80102bc <_dtoa_r+0x78c>
 801027e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010280:	2b00      	cmp	r3, #0
 8010282:	f000 80b7 	beq.w	80103f4 <_dtoa_r+0x8c4>
 8010286:	b18c      	cbz	r4, 80102ac <_dtoa_r+0x77c>
 8010288:	4629      	mov	r1, r5
 801028a:	4622      	mov	r2, r4
 801028c:	4658      	mov	r0, fp
 801028e:	f000 fd11 	bl	8010cb4 <__pow5mult>
 8010292:	464a      	mov	r2, r9
 8010294:	4601      	mov	r1, r0
 8010296:	4605      	mov	r5, r0
 8010298:	4658      	mov	r0, fp
 801029a:	f000 fc61 	bl	8010b60 <__multiply>
 801029e:	4649      	mov	r1, r9
 80102a0:	9004      	str	r0, [sp, #16]
 80102a2:	4658      	mov	r0, fp
 80102a4:	f000 fb48 	bl	8010938 <_Bfree>
 80102a8:	9b04      	ldr	r3, [sp, #16]
 80102aa:	4699      	mov	r9, r3
 80102ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102ae:	1b1a      	subs	r2, r3, r4
 80102b0:	d004      	beq.n	80102bc <_dtoa_r+0x78c>
 80102b2:	4649      	mov	r1, r9
 80102b4:	4658      	mov	r0, fp
 80102b6:	f000 fcfd 	bl	8010cb4 <__pow5mult>
 80102ba:	4681      	mov	r9, r0
 80102bc:	2101      	movs	r1, #1
 80102be:	4658      	mov	r0, fp
 80102c0:	f000 fc38 	bl	8010b34 <__i2b>
 80102c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102c6:	4604      	mov	r4, r0
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	f000 81cf 	beq.w	801066c <_dtoa_r+0xb3c>
 80102ce:	461a      	mov	r2, r3
 80102d0:	4601      	mov	r1, r0
 80102d2:	4658      	mov	r0, fp
 80102d4:	f000 fcee 	bl	8010cb4 <__pow5mult>
 80102d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102da:	2b01      	cmp	r3, #1
 80102dc:	4604      	mov	r4, r0
 80102de:	f300 8095 	bgt.w	801040c <_dtoa_r+0x8dc>
 80102e2:	9b02      	ldr	r3, [sp, #8]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	f040 8087 	bne.w	80103f8 <_dtoa_r+0x8c8>
 80102ea:	9b03      	ldr	r3, [sp, #12]
 80102ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	f040 8089 	bne.w	8010408 <_dtoa_r+0x8d8>
 80102f6:	9b03      	ldr	r3, [sp, #12]
 80102f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80102fc:	0d1b      	lsrs	r3, r3, #20
 80102fe:	051b      	lsls	r3, r3, #20
 8010300:	b12b      	cbz	r3, 801030e <_dtoa_r+0x7de>
 8010302:	9b08      	ldr	r3, [sp, #32]
 8010304:	3301      	adds	r3, #1
 8010306:	9308      	str	r3, [sp, #32]
 8010308:	f108 0801 	add.w	r8, r8, #1
 801030c:	2301      	movs	r3, #1
 801030e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010310:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010312:	2b00      	cmp	r3, #0
 8010314:	f000 81b0 	beq.w	8010678 <_dtoa_r+0xb48>
 8010318:	6923      	ldr	r3, [r4, #16]
 801031a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801031e:	6918      	ldr	r0, [r3, #16]
 8010320:	f000 fbbc 	bl	8010a9c <__hi0bits>
 8010324:	f1c0 0020 	rsb	r0, r0, #32
 8010328:	9b08      	ldr	r3, [sp, #32]
 801032a:	4418      	add	r0, r3
 801032c:	f010 001f 	ands.w	r0, r0, #31
 8010330:	d077      	beq.n	8010422 <_dtoa_r+0x8f2>
 8010332:	f1c0 0320 	rsb	r3, r0, #32
 8010336:	2b04      	cmp	r3, #4
 8010338:	dd6b      	ble.n	8010412 <_dtoa_r+0x8e2>
 801033a:	9b08      	ldr	r3, [sp, #32]
 801033c:	f1c0 001c 	rsb	r0, r0, #28
 8010340:	4403      	add	r3, r0
 8010342:	4480      	add	r8, r0
 8010344:	4406      	add	r6, r0
 8010346:	9308      	str	r3, [sp, #32]
 8010348:	f1b8 0f00 	cmp.w	r8, #0
 801034c:	dd05      	ble.n	801035a <_dtoa_r+0x82a>
 801034e:	4649      	mov	r1, r9
 8010350:	4642      	mov	r2, r8
 8010352:	4658      	mov	r0, fp
 8010354:	f000 fd08 	bl	8010d68 <__lshift>
 8010358:	4681      	mov	r9, r0
 801035a:	9b08      	ldr	r3, [sp, #32]
 801035c:	2b00      	cmp	r3, #0
 801035e:	dd05      	ble.n	801036c <_dtoa_r+0x83c>
 8010360:	4621      	mov	r1, r4
 8010362:	461a      	mov	r2, r3
 8010364:	4658      	mov	r0, fp
 8010366:	f000 fcff 	bl	8010d68 <__lshift>
 801036a:	4604      	mov	r4, r0
 801036c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801036e:	2b00      	cmp	r3, #0
 8010370:	d059      	beq.n	8010426 <_dtoa_r+0x8f6>
 8010372:	4621      	mov	r1, r4
 8010374:	4648      	mov	r0, r9
 8010376:	f000 fd63 	bl	8010e40 <__mcmp>
 801037a:	2800      	cmp	r0, #0
 801037c:	da53      	bge.n	8010426 <_dtoa_r+0x8f6>
 801037e:	1e7b      	subs	r3, r7, #1
 8010380:	9304      	str	r3, [sp, #16]
 8010382:	4649      	mov	r1, r9
 8010384:	2300      	movs	r3, #0
 8010386:	220a      	movs	r2, #10
 8010388:	4658      	mov	r0, fp
 801038a:	f000 faf7 	bl	801097c <__multadd>
 801038e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010390:	4681      	mov	r9, r0
 8010392:	2b00      	cmp	r3, #0
 8010394:	f000 8172 	beq.w	801067c <_dtoa_r+0xb4c>
 8010398:	2300      	movs	r3, #0
 801039a:	4629      	mov	r1, r5
 801039c:	220a      	movs	r2, #10
 801039e:	4658      	mov	r0, fp
 80103a0:	f000 faec 	bl	801097c <__multadd>
 80103a4:	9b00      	ldr	r3, [sp, #0]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	4605      	mov	r5, r0
 80103aa:	dc67      	bgt.n	801047c <_dtoa_r+0x94c>
 80103ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103ae:	2b02      	cmp	r3, #2
 80103b0:	dc41      	bgt.n	8010436 <_dtoa_r+0x906>
 80103b2:	e063      	b.n	801047c <_dtoa_r+0x94c>
 80103b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80103b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80103ba:	e746      	b.n	801024a <_dtoa_r+0x71a>
 80103bc:	9b07      	ldr	r3, [sp, #28]
 80103be:	1e5c      	subs	r4, r3, #1
 80103c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103c2:	42a3      	cmp	r3, r4
 80103c4:	bfbf      	itttt	lt
 80103c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80103c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80103ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80103cc:	1ae3      	sublt	r3, r4, r3
 80103ce:	bfb4      	ite	lt
 80103d0:	18d2      	addlt	r2, r2, r3
 80103d2:	1b1c      	subge	r4, r3, r4
 80103d4:	9b07      	ldr	r3, [sp, #28]
 80103d6:	bfbc      	itt	lt
 80103d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80103da:	2400      	movlt	r4, #0
 80103dc:	2b00      	cmp	r3, #0
 80103de:	bfb5      	itete	lt
 80103e0:	eba8 0603 	sublt.w	r6, r8, r3
 80103e4:	9b07      	ldrge	r3, [sp, #28]
 80103e6:	2300      	movlt	r3, #0
 80103e8:	4646      	movge	r6, r8
 80103ea:	e730      	b.n	801024e <_dtoa_r+0x71e>
 80103ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80103ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80103f0:	4646      	mov	r6, r8
 80103f2:	e735      	b.n	8010260 <_dtoa_r+0x730>
 80103f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80103f6:	e75c      	b.n	80102b2 <_dtoa_r+0x782>
 80103f8:	2300      	movs	r3, #0
 80103fa:	e788      	b.n	801030e <_dtoa_r+0x7de>
 80103fc:	3fe00000 	.word	0x3fe00000
 8010400:	40240000 	.word	0x40240000
 8010404:	40140000 	.word	0x40140000
 8010408:	9b02      	ldr	r3, [sp, #8]
 801040a:	e780      	b.n	801030e <_dtoa_r+0x7de>
 801040c:	2300      	movs	r3, #0
 801040e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010410:	e782      	b.n	8010318 <_dtoa_r+0x7e8>
 8010412:	d099      	beq.n	8010348 <_dtoa_r+0x818>
 8010414:	9a08      	ldr	r2, [sp, #32]
 8010416:	331c      	adds	r3, #28
 8010418:	441a      	add	r2, r3
 801041a:	4498      	add	r8, r3
 801041c:	441e      	add	r6, r3
 801041e:	9208      	str	r2, [sp, #32]
 8010420:	e792      	b.n	8010348 <_dtoa_r+0x818>
 8010422:	4603      	mov	r3, r0
 8010424:	e7f6      	b.n	8010414 <_dtoa_r+0x8e4>
 8010426:	9b07      	ldr	r3, [sp, #28]
 8010428:	9704      	str	r7, [sp, #16]
 801042a:	2b00      	cmp	r3, #0
 801042c:	dc20      	bgt.n	8010470 <_dtoa_r+0x940>
 801042e:	9300      	str	r3, [sp, #0]
 8010430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010432:	2b02      	cmp	r3, #2
 8010434:	dd1e      	ble.n	8010474 <_dtoa_r+0x944>
 8010436:	9b00      	ldr	r3, [sp, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	f47f aec0 	bne.w	80101be <_dtoa_r+0x68e>
 801043e:	4621      	mov	r1, r4
 8010440:	2205      	movs	r2, #5
 8010442:	4658      	mov	r0, fp
 8010444:	f000 fa9a 	bl	801097c <__multadd>
 8010448:	4601      	mov	r1, r0
 801044a:	4604      	mov	r4, r0
 801044c:	4648      	mov	r0, r9
 801044e:	f000 fcf7 	bl	8010e40 <__mcmp>
 8010452:	2800      	cmp	r0, #0
 8010454:	f77f aeb3 	ble.w	80101be <_dtoa_r+0x68e>
 8010458:	4656      	mov	r6, sl
 801045a:	2331      	movs	r3, #49	@ 0x31
 801045c:	f806 3b01 	strb.w	r3, [r6], #1
 8010460:	9b04      	ldr	r3, [sp, #16]
 8010462:	3301      	adds	r3, #1
 8010464:	9304      	str	r3, [sp, #16]
 8010466:	e6ae      	b.n	80101c6 <_dtoa_r+0x696>
 8010468:	9c07      	ldr	r4, [sp, #28]
 801046a:	9704      	str	r7, [sp, #16]
 801046c:	4625      	mov	r5, r4
 801046e:	e7f3      	b.n	8010458 <_dtoa_r+0x928>
 8010470:	9b07      	ldr	r3, [sp, #28]
 8010472:	9300      	str	r3, [sp, #0]
 8010474:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010476:	2b00      	cmp	r3, #0
 8010478:	f000 8104 	beq.w	8010684 <_dtoa_r+0xb54>
 801047c:	2e00      	cmp	r6, #0
 801047e:	dd05      	ble.n	801048c <_dtoa_r+0x95c>
 8010480:	4629      	mov	r1, r5
 8010482:	4632      	mov	r2, r6
 8010484:	4658      	mov	r0, fp
 8010486:	f000 fc6f 	bl	8010d68 <__lshift>
 801048a:	4605      	mov	r5, r0
 801048c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801048e:	2b00      	cmp	r3, #0
 8010490:	d05a      	beq.n	8010548 <_dtoa_r+0xa18>
 8010492:	6869      	ldr	r1, [r5, #4]
 8010494:	4658      	mov	r0, fp
 8010496:	f000 fa0f 	bl	80108b8 <_Balloc>
 801049a:	4606      	mov	r6, r0
 801049c:	b928      	cbnz	r0, 80104aa <_dtoa_r+0x97a>
 801049e:	4b84      	ldr	r3, [pc, #528]	@ (80106b0 <_dtoa_r+0xb80>)
 80104a0:	4602      	mov	r2, r0
 80104a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80104a6:	f7ff bb5a 	b.w	800fb5e <_dtoa_r+0x2e>
 80104aa:	692a      	ldr	r2, [r5, #16]
 80104ac:	3202      	adds	r2, #2
 80104ae:	0092      	lsls	r2, r2, #2
 80104b0:	f105 010c 	add.w	r1, r5, #12
 80104b4:	300c      	adds	r0, #12
 80104b6:	f7ff fa9e 	bl	800f9f6 <memcpy>
 80104ba:	2201      	movs	r2, #1
 80104bc:	4631      	mov	r1, r6
 80104be:	4658      	mov	r0, fp
 80104c0:	f000 fc52 	bl	8010d68 <__lshift>
 80104c4:	f10a 0301 	add.w	r3, sl, #1
 80104c8:	9307      	str	r3, [sp, #28]
 80104ca:	9b00      	ldr	r3, [sp, #0]
 80104cc:	4453      	add	r3, sl
 80104ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80104d0:	9b02      	ldr	r3, [sp, #8]
 80104d2:	f003 0301 	and.w	r3, r3, #1
 80104d6:	462f      	mov	r7, r5
 80104d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80104da:	4605      	mov	r5, r0
 80104dc:	9b07      	ldr	r3, [sp, #28]
 80104de:	4621      	mov	r1, r4
 80104e0:	3b01      	subs	r3, #1
 80104e2:	4648      	mov	r0, r9
 80104e4:	9300      	str	r3, [sp, #0]
 80104e6:	f7ff fa9b 	bl	800fa20 <quorem>
 80104ea:	4639      	mov	r1, r7
 80104ec:	9002      	str	r0, [sp, #8]
 80104ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80104f2:	4648      	mov	r0, r9
 80104f4:	f000 fca4 	bl	8010e40 <__mcmp>
 80104f8:	462a      	mov	r2, r5
 80104fa:	9008      	str	r0, [sp, #32]
 80104fc:	4621      	mov	r1, r4
 80104fe:	4658      	mov	r0, fp
 8010500:	f000 fcba 	bl	8010e78 <__mdiff>
 8010504:	68c2      	ldr	r2, [r0, #12]
 8010506:	4606      	mov	r6, r0
 8010508:	bb02      	cbnz	r2, 801054c <_dtoa_r+0xa1c>
 801050a:	4601      	mov	r1, r0
 801050c:	4648      	mov	r0, r9
 801050e:	f000 fc97 	bl	8010e40 <__mcmp>
 8010512:	4602      	mov	r2, r0
 8010514:	4631      	mov	r1, r6
 8010516:	4658      	mov	r0, fp
 8010518:	920e      	str	r2, [sp, #56]	@ 0x38
 801051a:	f000 fa0d 	bl	8010938 <_Bfree>
 801051e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010520:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010522:	9e07      	ldr	r6, [sp, #28]
 8010524:	ea43 0102 	orr.w	r1, r3, r2
 8010528:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801052a:	4319      	orrs	r1, r3
 801052c:	d110      	bne.n	8010550 <_dtoa_r+0xa20>
 801052e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010532:	d029      	beq.n	8010588 <_dtoa_r+0xa58>
 8010534:	9b08      	ldr	r3, [sp, #32]
 8010536:	2b00      	cmp	r3, #0
 8010538:	dd02      	ble.n	8010540 <_dtoa_r+0xa10>
 801053a:	9b02      	ldr	r3, [sp, #8]
 801053c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010540:	9b00      	ldr	r3, [sp, #0]
 8010542:	f883 8000 	strb.w	r8, [r3]
 8010546:	e63f      	b.n	80101c8 <_dtoa_r+0x698>
 8010548:	4628      	mov	r0, r5
 801054a:	e7bb      	b.n	80104c4 <_dtoa_r+0x994>
 801054c:	2201      	movs	r2, #1
 801054e:	e7e1      	b.n	8010514 <_dtoa_r+0x9e4>
 8010550:	9b08      	ldr	r3, [sp, #32]
 8010552:	2b00      	cmp	r3, #0
 8010554:	db04      	blt.n	8010560 <_dtoa_r+0xa30>
 8010556:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010558:	430b      	orrs	r3, r1
 801055a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801055c:	430b      	orrs	r3, r1
 801055e:	d120      	bne.n	80105a2 <_dtoa_r+0xa72>
 8010560:	2a00      	cmp	r2, #0
 8010562:	dded      	ble.n	8010540 <_dtoa_r+0xa10>
 8010564:	4649      	mov	r1, r9
 8010566:	2201      	movs	r2, #1
 8010568:	4658      	mov	r0, fp
 801056a:	f000 fbfd 	bl	8010d68 <__lshift>
 801056e:	4621      	mov	r1, r4
 8010570:	4681      	mov	r9, r0
 8010572:	f000 fc65 	bl	8010e40 <__mcmp>
 8010576:	2800      	cmp	r0, #0
 8010578:	dc03      	bgt.n	8010582 <_dtoa_r+0xa52>
 801057a:	d1e1      	bne.n	8010540 <_dtoa_r+0xa10>
 801057c:	f018 0f01 	tst.w	r8, #1
 8010580:	d0de      	beq.n	8010540 <_dtoa_r+0xa10>
 8010582:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010586:	d1d8      	bne.n	801053a <_dtoa_r+0xa0a>
 8010588:	9a00      	ldr	r2, [sp, #0]
 801058a:	2339      	movs	r3, #57	@ 0x39
 801058c:	7013      	strb	r3, [r2, #0]
 801058e:	4633      	mov	r3, r6
 8010590:	461e      	mov	r6, r3
 8010592:	3b01      	subs	r3, #1
 8010594:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010598:	2a39      	cmp	r2, #57	@ 0x39
 801059a:	d052      	beq.n	8010642 <_dtoa_r+0xb12>
 801059c:	3201      	adds	r2, #1
 801059e:	701a      	strb	r2, [r3, #0]
 80105a0:	e612      	b.n	80101c8 <_dtoa_r+0x698>
 80105a2:	2a00      	cmp	r2, #0
 80105a4:	dd07      	ble.n	80105b6 <_dtoa_r+0xa86>
 80105a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80105aa:	d0ed      	beq.n	8010588 <_dtoa_r+0xa58>
 80105ac:	9a00      	ldr	r2, [sp, #0]
 80105ae:	f108 0301 	add.w	r3, r8, #1
 80105b2:	7013      	strb	r3, [r2, #0]
 80105b4:	e608      	b.n	80101c8 <_dtoa_r+0x698>
 80105b6:	9b07      	ldr	r3, [sp, #28]
 80105b8:	9a07      	ldr	r2, [sp, #28]
 80105ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80105be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80105c0:	4293      	cmp	r3, r2
 80105c2:	d028      	beq.n	8010616 <_dtoa_r+0xae6>
 80105c4:	4649      	mov	r1, r9
 80105c6:	2300      	movs	r3, #0
 80105c8:	220a      	movs	r2, #10
 80105ca:	4658      	mov	r0, fp
 80105cc:	f000 f9d6 	bl	801097c <__multadd>
 80105d0:	42af      	cmp	r7, r5
 80105d2:	4681      	mov	r9, r0
 80105d4:	f04f 0300 	mov.w	r3, #0
 80105d8:	f04f 020a 	mov.w	r2, #10
 80105dc:	4639      	mov	r1, r7
 80105de:	4658      	mov	r0, fp
 80105e0:	d107      	bne.n	80105f2 <_dtoa_r+0xac2>
 80105e2:	f000 f9cb 	bl	801097c <__multadd>
 80105e6:	4607      	mov	r7, r0
 80105e8:	4605      	mov	r5, r0
 80105ea:	9b07      	ldr	r3, [sp, #28]
 80105ec:	3301      	adds	r3, #1
 80105ee:	9307      	str	r3, [sp, #28]
 80105f0:	e774      	b.n	80104dc <_dtoa_r+0x9ac>
 80105f2:	f000 f9c3 	bl	801097c <__multadd>
 80105f6:	4629      	mov	r1, r5
 80105f8:	4607      	mov	r7, r0
 80105fa:	2300      	movs	r3, #0
 80105fc:	220a      	movs	r2, #10
 80105fe:	4658      	mov	r0, fp
 8010600:	f000 f9bc 	bl	801097c <__multadd>
 8010604:	4605      	mov	r5, r0
 8010606:	e7f0      	b.n	80105ea <_dtoa_r+0xaba>
 8010608:	9b00      	ldr	r3, [sp, #0]
 801060a:	2b00      	cmp	r3, #0
 801060c:	bfcc      	ite	gt
 801060e:	461e      	movgt	r6, r3
 8010610:	2601      	movle	r6, #1
 8010612:	4456      	add	r6, sl
 8010614:	2700      	movs	r7, #0
 8010616:	4649      	mov	r1, r9
 8010618:	2201      	movs	r2, #1
 801061a:	4658      	mov	r0, fp
 801061c:	f000 fba4 	bl	8010d68 <__lshift>
 8010620:	4621      	mov	r1, r4
 8010622:	4681      	mov	r9, r0
 8010624:	f000 fc0c 	bl	8010e40 <__mcmp>
 8010628:	2800      	cmp	r0, #0
 801062a:	dcb0      	bgt.n	801058e <_dtoa_r+0xa5e>
 801062c:	d102      	bne.n	8010634 <_dtoa_r+0xb04>
 801062e:	f018 0f01 	tst.w	r8, #1
 8010632:	d1ac      	bne.n	801058e <_dtoa_r+0xa5e>
 8010634:	4633      	mov	r3, r6
 8010636:	461e      	mov	r6, r3
 8010638:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801063c:	2a30      	cmp	r2, #48	@ 0x30
 801063e:	d0fa      	beq.n	8010636 <_dtoa_r+0xb06>
 8010640:	e5c2      	b.n	80101c8 <_dtoa_r+0x698>
 8010642:	459a      	cmp	sl, r3
 8010644:	d1a4      	bne.n	8010590 <_dtoa_r+0xa60>
 8010646:	9b04      	ldr	r3, [sp, #16]
 8010648:	3301      	adds	r3, #1
 801064a:	9304      	str	r3, [sp, #16]
 801064c:	2331      	movs	r3, #49	@ 0x31
 801064e:	f88a 3000 	strb.w	r3, [sl]
 8010652:	e5b9      	b.n	80101c8 <_dtoa_r+0x698>
 8010654:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010656:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80106b4 <_dtoa_r+0xb84>
 801065a:	b11b      	cbz	r3, 8010664 <_dtoa_r+0xb34>
 801065c:	f10a 0308 	add.w	r3, sl, #8
 8010660:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010662:	6013      	str	r3, [r2, #0]
 8010664:	4650      	mov	r0, sl
 8010666:	b019      	add	sp, #100	@ 0x64
 8010668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801066c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801066e:	2b01      	cmp	r3, #1
 8010670:	f77f ae37 	ble.w	80102e2 <_dtoa_r+0x7b2>
 8010674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010676:	930a      	str	r3, [sp, #40]	@ 0x28
 8010678:	2001      	movs	r0, #1
 801067a:	e655      	b.n	8010328 <_dtoa_r+0x7f8>
 801067c:	9b00      	ldr	r3, [sp, #0]
 801067e:	2b00      	cmp	r3, #0
 8010680:	f77f aed6 	ble.w	8010430 <_dtoa_r+0x900>
 8010684:	4656      	mov	r6, sl
 8010686:	4621      	mov	r1, r4
 8010688:	4648      	mov	r0, r9
 801068a:	f7ff f9c9 	bl	800fa20 <quorem>
 801068e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010692:	f806 8b01 	strb.w	r8, [r6], #1
 8010696:	9b00      	ldr	r3, [sp, #0]
 8010698:	eba6 020a 	sub.w	r2, r6, sl
 801069c:	4293      	cmp	r3, r2
 801069e:	ddb3      	ble.n	8010608 <_dtoa_r+0xad8>
 80106a0:	4649      	mov	r1, r9
 80106a2:	2300      	movs	r3, #0
 80106a4:	220a      	movs	r2, #10
 80106a6:	4658      	mov	r0, fp
 80106a8:	f000 f968 	bl	801097c <__multadd>
 80106ac:	4681      	mov	r9, r0
 80106ae:	e7ea      	b.n	8010686 <_dtoa_r+0xb56>
 80106b0:	08013ad8 	.word	0x08013ad8
 80106b4:	08013a5c 	.word	0x08013a5c

080106b8 <_free_r>:
 80106b8:	b538      	push	{r3, r4, r5, lr}
 80106ba:	4605      	mov	r5, r0
 80106bc:	2900      	cmp	r1, #0
 80106be:	d041      	beq.n	8010744 <_free_r+0x8c>
 80106c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106c4:	1f0c      	subs	r4, r1, #4
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	bfb8      	it	lt
 80106ca:	18e4      	addlt	r4, r4, r3
 80106cc:	f000 f8e8 	bl	80108a0 <__malloc_lock>
 80106d0:	4a1d      	ldr	r2, [pc, #116]	@ (8010748 <_free_r+0x90>)
 80106d2:	6813      	ldr	r3, [r2, #0]
 80106d4:	b933      	cbnz	r3, 80106e4 <_free_r+0x2c>
 80106d6:	6063      	str	r3, [r4, #4]
 80106d8:	6014      	str	r4, [r2, #0]
 80106da:	4628      	mov	r0, r5
 80106dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106e0:	f000 b8e4 	b.w	80108ac <__malloc_unlock>
 80106e4:	42a3      	cmp	r3, r4
 80106e6:	d908      	bls.n	80106fa <_free_r+0x42>
 80106e8:	6820      	ldr	r0, [r4, #0]
 80106ea:	1821      	adds	r1, r4, r0
 80106ec:	428b      	cmp	r3, r1
 80106ee:	bf01      	itttt	eq
 80106f0:	6819      	ldreq	r1, [r3, #0]
 80106f2:	685b      	ldreq	r3, [r3, #4]
 80106f4:	1809      	addeq	r1, r1, r0
 80106f6:	6021      	streq	r1, [r4, #0]
 80106f8:	e7ed      	b.n	80106d6 <_free_r+0x1e>
 80106fa:	461a      	mov	r2, r3
 80106fc:	685b      	ldr	r3, [r3, #4]
 80106fe:	b10b      	cbz	r3, 8010704 <_free_r+0x4c>
 8010700:	42a3      	cmp	r3, r4
 8010702:	d9fa      	bls.n	80106fa <_free_r+0x42>
 8010704:	6811      	ldr	r1, [r2, #0]
 8010706:	1850      	adds	r0, r2, r1
 8010708:	42a0      	cmp	r0, r4
 801070a:	d10b      	bne.n	8010724 <_free_r+0x6c>
 801070c:	6820      	ldr	r0, [r4, #0]
 801070e:	4401      	add	r1, r0
 8010710:	1850      	adds	r0, r2, r1
 8010712:	4283      	cmp	r3, r0
 8010714:	6011      	str	r1, [r2, #0]
 8010716:	d1e0      	bne.n	80106da <_free_r+0x22>
 8010718:	6818      	ldr	r0, [r3, #0]
 801071a:	685b      	ldr	r3, [r3, #4]
 801071c:	6053      	str	r3, [r2, #4]
 801071e:	4408      	add	r0, r1
 8010720:	6010      	str	r0, [r2, #0]
 8010722:	e7da      	b.n	80106da <_free_r+0x22>
 8010724:	d902      	bls.n	801072c <_free_r+0x74>
 8010726:	230c      	movs	r3, #12
 8010728:	602b      	str	r3, [r5, #0]
 801072a:	e7d6      	b.n	80106da <_free_r+0x22>
 801072c:	6820      	ldr	r0, [r4, #0]
 801072e:	1821      	adds	r1, r4, r0
 8010730:	428b      	cmp	r3, r1
 8010732:	bf04      	itt	eq
 8010734:	6819      	ldreq	r1, [r3, #0]
 8010736:	685b      	ldreq	r3, [r3, #4]
 8010738:	6063      	str	r3, [r4, #4]
 801073a:	bf04      	itt	eq
 801073c:	1809      	addeq	r1, r1, r0
 801073e:	6021      	streq	r1, [r4, #0]
 8010740:	6054      	str	r4, [r2, #4]
 8010742:	e7ca      	b.n	80106da <_free_r+0x22>
 8010744:	bd38      	pop	{r3, r4, r5, pc}
 8010746:	bf00      	nop
 8010748:	2000225c 	.word	0x2000225c

0801074c <malloc>:
 801074c:	4b02      	ldr	r3, [pc, #8]	@ (8010758 <malloc+0xc>)
 801074e:	4601      	mov	r1, r0
 8010750:	6818      	ldr	r0, [r3, #0]
 8010752:	f000 b825 	b.w	80107a0 <_malloc_r>
 8010756:	bf00      	nop
 8010758:	200001a0 	.word	0x200001a0

0801075c <sbrk_aligned>:
 801075c:	b570      	push	{r4, r5, r6, lr}
 801075e:	4e0f      	ldr	r6, [pc, #60]	@ (801079c <sbrk_aligned+0x40>)
 8010760:	460c      	mov	r4, r1
 8010762:	6831      	ldr	r1, [r6, #0]
 8010764:	4605      	mov	r5, r0
 8010766:	b911      	cbnz	r1, 801076e <sbrk_aligned+0x12>
 8010768:	f002 fa26 	bl	8012bb8 <_sbrk_r>
 801076c:	6030      	str	r0, [r6, #0]
 801076e:	4621      	mov	r1, r4
 8010770:	4628      	mov	r0, r5
 8010772:	f002 fa21 	bl	8012bb8 <_sbrk_r>
 8010776:	1c43      	adds	r3, r0, #1
 8010778:	d103      	bne.n	8010782 <sbrk_aligned+0x26>
 801077a:	f04f 34ff 	mov.w	r4, #4294967295
 801077e:	4620      	mov	r0, r4
 8010780:	bd70      	pop	{r4, r5, r6, pc}
 8010782:	1cc4      	adds	r4, r0, #3
 8010784:	f024 0403 	bic.w	r4, r4, #3
 8010788:	42a0      	cmp	r0, r4
 801078a:	d0f8      	beq.n	801077e <sbrk_aligned+0x22>
 801078c:	1a21      	subs	r1, r4, r0
 801078e:	4628      	mov	r0, r5
 8010790:	f002 fa12 	bl	8012bb8 <_sbrk_r>
 8010794:	3001      	adds	r0, #1
 8010796:	d1f2      	bne.n	801077e <sbrk_aligned+0x22>
 8010798:	e7ef      	b.n	801077a <sbrk_aligned+0x1e>
 801079a:	bf00      	nop
 801079c:	20002258 	.word	0x20002258

080107a0 <_malloc_r>:
 80107a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107a4:	1ccd      	adds	r5, r1, #3
 80107a6:	f025 0503 	bic.w	r5, r5, #3
 80107aa:	3508      	adds	r5, #8
 80107ac:	2d0c      	cmp	r5, #12
 80107ae:	bf38      	it	cc
 80107b0:	250c      	movcc	r5, #12
 80107b2:	2d00      	cmp	r5, #0
 80107b4:	4606      	mov	r6, r0
 80107b6:	db01      	blt.n	80107bc <_malloc_r+0x1c>
 80107b8:	42a9      	cmp	r1, r5
 80107ba:	d904      	bls.n	80107c6 <_malloc_r+0x26>
 80107bc:	230c      	movs	r3, #12
 80107be:	6033      	str	r3, [r6, #0]
 80107c0:	2000      	movs	r0, #0
 80107c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801089c <_malloc_r+0xfc>
 80107ca:	f000 f869 	bl	80108a0 <__malloc_lock>
 80107ce:	f8d8 3000 	ldr.w	r3, [r8]
 80107d2:	461c      	mov	r4, r3
 80107d4:	bb44      	cbnz	r4, 8010828 <_malloc_r+0x88>
 80107d6:	4629      	mov	r1, r5
 80107d8:	4630      	mov	r0, r6
 80107da:	f7ff ffbf 	bl	801075c <sbrk_aligned>
 80107de:	1c43      	adds	r3, r0, #1
 80107e0:	4604      	mov	r4, r0
 80107e2:	d158      	bne.n	8010896 <_malloc_r+0xf6>
 80107e4:	f8d8 4000 	ldr.w	r4, [r8]
 80107e8:	4627      	mov	r7, r4
 80107ea:	2f00      	cmp	r7, #0
 80107ec:	d143      	bne.n	8010876 <_malloc_r+0xd6>
 80107ee:	2c00      	cmp	r4, #0
 80107f0:	d04b      	beq.n	801088a <_malloc_r+0xea>
 80107f2:	6823      	ldr	r3, [r4, #0]
 80107f4:	4639      	mov	r1, r7
 80107f6:	4630      	mov	r0, r6
 80107f8:	eb04 0903 	add.w	r9, r4, r3
 80107fc:	f002 f9dc 	bl	8012bb8 <_sbrk_r>
 8010800:	4581      	cmp	r9, r0
 8010802:	d142      	bne.n	801088a <_malloc_r+0xea>
 8010804:	6821      	ldr	r1, [r4, #0]
 8010806:	1a6d      	subs	r5, r5, r1
 8010808:	4629      	mov	r1, r5
 801080a:	4630      	mov	r0, r6
 801080c:	f7ff ffa6 	bl	801075c <sbrk_aligned>
 8010810:	3001      	adds	r0, #1
 8010812:	d03a      	beq.n	801088a <_malloc_r+0xea>
 8010814:	6823      	ldr	r3, [r4, #0]
 8010816:	442b      	add	r3, r5
 8010818:	6023      	str	r3, [r4, #0]
 801081a:	f8d8 3000 	ldr.w	r3, [r8]
 801081e:	685a      	ldr	r2, [r3, #4]
 8010820:	bb62      	cbnz	r2, 801087c <_malloc_r+0xdc>
 8010822:	f8c8 7000 	str.w	r7, [r8]
 8010826:	e00f      	b.n	8010848 <_malloc_r+0xa8>
 8010828:	6822      	ldr	r2, [r4, #0]
 801082a:	1b52      	subs	r2, r2, r5
 801082c:	d420      	bmi.n	8010870 <_malloc_r+0xd0>
 801082e:	2a0b      	cmp	r2, #11
 8010830:	d917      	bls.n	8010862 <_malloc_r+0xc2>
 8010832:	1961      	adds	r1, r4, r5
 8010834:	42a3      	cmp	r3, r4
 8010836:	6025      	str	r5, [r4, #0]
 8010838:	bf18      	it	ne
 801083a:	6059      	strne	r1, [r3, #4]
 801083c:	6863      	ldr	r3, [r4, #4]
 801083e:	bf08      	it	eq
 8010840:	f8c8 1000 	streq.w	r1, [r8]
 8010844:	5162      	str	r2, [r4, r5]
 8010846:	604b      	str	r3, [r1, #4]
 8010848:	4630      	mov	r0, r6
 801084a:	f000 f82f 	bl	80108ac <__malloc_unlock>
 801084e:	f104 000b 	add.w	r0, r4, #11
 8010852:	1d23      	adds	r3, r4, #4
 8010854:	f020 0007 	bic.w	r0, r0, #7
 8010858:	1ac2      	subs	r2, r0, r3
 801085a:	bf1c      	itt	ne
 801085c:	1a1b      	subne	r3, r3, r0
 801085e:	50a3      	strne	r3, [r4, r2]
 8010860:	e7af      	b.n	80107c2 <_malloc_r+0x22>
 8010862:	6862      	ldr	r2, [r4, #4]
 8010864:	42a3      	cmp	r3, r4
 8010866:	bf0c      	ite	eq
 8010868:	f8c8 2000 	streq.w	r2, [r8]
 801086c:	605a      	strne	r2, [r3, #4]
 801086e:	e7eb      	b.n	8010848 <_malloc_r+0xa8>
 8010870:	4623      	mov	r3, r4
 8010872:	6864      	ldr	r4, [r4, #4]
 8010874:	e7ae      	b.n	80107d4 <_malloc_r+0x34>
 8010876:	463c      	mov	r4, r7
 8010878:	687f      	ldr	r7, [r7, #4]
 801087a:	e7b6      	b.n	80107ea <_malloc_r+0x4a>
 801087c:	461a      	mov	r2, r3
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	42a3      	cmp	r3, r4
 8010882:	d1fb      	bne.n	801087c <_malloc_r+0xdc>
 8010884:	2300      	movs	r3, #0
 8010886:	6053      	str	r3, [r2, #4]
 8010888:	e7de      	b.n	8010848 <_malloc_r+0xa8>
 801088a:	230c      	movs	r3, #12
 801088c:	6033      	str	r3, [r6, #0]
 801088e:	4630      	mov	r0, r6
 8010890:	f000 f80c 	bl	80108ac <__malloc_unlock>
 8010894:	e794      	b.n	80107c0 <_malloc_r+0x20>
 8010896:	6005      	str	r5, [r0, #0]
 8010898:	e7d6      	b.n	8010848 <_malloc_r+0xa8>
 801089a:	bf00      	nop
 801089c:	2000225c 	.word	0x2000225c

080108a0 <__malloc_lock>:
 80108a0:	4801      	ldr	r0, [pc, #4]	@ (80108a8 <__malloc_lock+0x8>)
 80108a2:	f7ff b8a6 	b.w	800f9f2 <__retarget_lock_acquire_recursive>
 80108a6:	bf00      	nop
 80108a8:	20002254 	.word	0x20002254

080108ac <__malloc_unlock>:
 80108ac:	4801      	ldr	r0, [pc, #4]	@ (80108b4 <__malloc_unlock+0x8>)
 80108ae:	f7ff b8a1 	b.w	800f9f4 <__retarget_lock_release_recursive>
 80108b2:	bf00      	nop
 80108b4:	20002254 	.word	0x20002254

080108b8 <_Balloc>:
 80108b8:	b570      	push	{r4, r5, r6, lr}
 80108ba:	69c6      	ldr	r6, [r0, #28]
 80108bc:	4604      	mov	r4, r0
 80108be:	460d      	mov	r5, r1
 80108c0:	b976      	cbnz	r6, 80108e0 <_Balloc+0x28>
 80108c2:	2010      	movs	r0, #16
 80108c4:	f7ff ff42 	bl	801074c <malloc>
 80108c8:	4602      	mov	r2, r0
 80108ca:	61e0      	str	r0, [r4, #28]
 80108cc:	b920      	cbnz	r0, 80108d8 <_Balloc+0x20>
 80108ce:	4b18      	ldr	r3, [pc, #96]	@ (8010930 <_Balloc+0x78>)
 80108d0:	4818      	ldr	r0, [pc, #96]	@ (8010934 <_Balloc+0x7c>)
 80108d2:	216b      	movs	r1, #107	@ 0x6b
 80108d4:	f002 f988 	bl	8012be8 <__assert_func>
 80108d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80108dc:	6006      	str	r6, [r0, #0]
 80108de:	60c6      	str	r6, [r0, #12]
 80108e0:	69e6      	ldr	r6, [r4, #28]
 80108e2:	68f3      	ldr	r3, [r6, #12]
 80108e4:	b183      	cbz	r3, 8010908 <_Balloc+0x50>
 80108e6:	69e3      	ldr	r3, [r4, #28]
 80108e8:	68db      	ldr	r3, [r3, #12]
 80108ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80108ee:	b9b8      	cbnz	r0, 8010920 <_Balloc+0x68>
 80108f0:	2101      	movs	r1, #1
 80108f2:	fa01 f605 	lsl.w	r6, r1, r5
 80108f6:	1d72      	adds	r2, r6, #5
 80108f8:	0092      	lsls	r2, r2, #2
 80108fa:	4620      	mov	r0, r4
 80108fc:	f002 f992 	bl	8012c24 <_calloc_r>
 8010900:	b160      	cbz	r0, 801091c <_Balloc+0x64>
 8010902:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010906:	e00e      	b.n	8010926 <_Balloc+0x6e>
 8010908:	2221      	movs	r2, #33	@ 0x21
 801090a:	2104      	movs	r1, #4
 801090c:	4620      	mov	r0, r4
 801090e:	f002 f989 	bl	8012c24 <_calloc_r>
 8010912:	69e3      	ldr	r3, [r4, #28]
 8010914:	60f0      	str	r0, [r6, #12]
 8010916:	68db      	ldr	r3, [r3, #12]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d1e4      	bne.n	80108e6 <_Balloc+0x2e>
 801091c:	2000      	movs	r0, #0
 801091e:	bd70      	pop	{r4, r5, r6, pc}
 8010920:	6802      	ldr	r2, [r0, #0]
 8010922:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010926:	2300      	movs	r3, #0
 8010928:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801092c:	e7f7      	b.n	801091e <_Balloc+0x66>
 801092e:	bf00      	nop
 8010930:	08013a69 	.word	0x08013a69
 8010934:	08013ae9 	.word	0x08013ae9

08010938 <_Bfree>:
 8010938:	b570      	push	{r4, r5, r6, lr}
 801093a:	69c6      	ldr	r6, [r0, #28]
 801093c:	4605      	mov	r5, r0
 801093e:	460c      	mov	r4, r1
 8010940:	b976      	cbnz	r6, 8010960 <_Bfree+0x28>
 8010942:	2010      	movs	r0, #16
 8010944:	f7ff ff02 	bl	801074c <malloc>
 8010948:	4602      	mov	r2, r0
 801094a:	61e8      	str	r0, [r5, #28]
 801094c:	b920      	cbnz	r0, 8010958 <_Bfree+0x20>
 801094e:	4b09      	ldr	r3, [pc, #36]	@ (8010974 <_Bfree+0x3c>)
 8010950:	4809      	ldr	r0, [pc, #36]	@ (8010978 <_Bfree+0x40>)
 8010952:	218f      	movs	r1, #143	@ 0x8f
 8010954:	f002 f948 	bl	8012be8 <__assert_func>
 8010958:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801095c:	6006      	str	r6, [r0, #0]
 801095e:	60c6      	str	r6, [r0, #12]
 8010960:	b13c      	cbz	r4, 8010972 <_Bfree+0x3a>
 8010962:	69eb      	ldr	r3, [r5, #28]
 8010964:	6862      	ldr	r2, [r4, #4]
 8010966:	68db      	ldr	r3, [r3, #12]
 8010968:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801096c:	6021      	str	r1, [r4, #0]
 801096e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010972:	bd70      	pop	{r4, r5, r6, pc}
 8010974:	08013a69 	.word	0x08013a69
 8010978:	08013ae9 	.word	0x08013ae9

0801097c <__multadd>:
 801097c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010980:	690d      	ldr	r5, [r1, #16]
 8010982:	4607      	mov	r7, r0
 8010984:	460c      	mov	r4, r1
 8010986:	461e      	mov	r6, r3
 8010988:	f101 0c14 	add.w	ip, r1, #20
 801098c:	2000      	movs	r0, #0
 801098e:	f8dc 3000 	ldr.w	r3, [ip]
 8010992:	b299      	uxth	r1, r3
 8010994:	fb02 6101 	mla	r1, r2, r1, r6
 8010998:	0c1e      	lsrs	r6, r3, #16
 801099a:	0c0b      	lsrs	r3, r1, #16
 801099c:	fb02 3306 	mla	r3, r2, r6, r3
 80109a0:	b289      	uxth	r1, r1
 80109a2:	3001      	adds	r0, #1
 80109a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80109a8:	4285      	cmp	r5, r0
 80109aa:	f84c 1b04 	str.w	r1, [ip], #4
 80109ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80109b2:	dcec      	bgt.n	801098e <__multadd+0x12>
 80109b4:	b30e      	cbz	r6, 80109fa <__multadd+0x7e>
 80109b6:	68a3      	ldr	r3, [r4, #8]
 80109b8:	42ab      	cmp	r3, r5
 80109ba:	dc19      	bgt.n	80109f0 <__multadd+0x74>
 80109bc:	6861      	ldr	r1, [r4, #4]
 80109be:	4638      	mov	r0, r7
 80109c0:	3101      	adds	r1, #1
 80109c2:	f7ff ff79 	bl	80108b8 <_Balloc>
 80109c6:	4680      	mov	r8, r0
 80109c8:	b928      	cbnz	r0, 80109d6 <__multadd+0x5a>
 80109ca:	4602      	mov	r2, r0
 80109cc:	4b0c      	ldr	r3, [pc, #48]	@ (8010a00 <__multadd+0x84>)
 80109ce:	480d      	ldr	r0, [pc, #52]	@ (8010a04 <__multadd+0x88>)
 80109d0:	21ba      	movs	r1, #186	@ 0xba
 80109d2:	f002 f909 	bl	8012be8 <__assert_func>
 80109d6:	6922      	ldr	r2, [r4, #16]
 80109d8:	3202      	adds	r2, #2
 80109da:	f104 010c 	add.w	r1, r4, #12
 80109de:	0092      	lsls	r2, r2, #2
 80109e0:	300c      	adds	r0, #12
 80109e2:	f7ff f808 	bl	800f9f6 <memcpy>
 80109e6:	4621      	mov	r1, r4
 80109e8:	4638      	mov	r0, r7
 80109ea:	f7ff ffa5 	bl	8010938 <_Bfree>
 80109ee:	4644      	mov	r4, r8
 80109f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80109f4:	3501      	adds	r5, #1
 80109f6:	615e      	str	r6, [r3, #20]
 80109f8:	6125      	str	r5, [r4, #16]
 80109fa:	4620      	mov	r0, r4
 80109fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a00:	08013ad8 	.word	0x08013ad8
 8010a04:	08013ae9 	.word	0x08013ae9

08010a08 <__s2b>:
 8010a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a0c:	460c      	mov	r4, r1
 8010a0e:	4615      	mov	r5, r2
 8010a10:	461f      	mov	r7, r3
 8010a12:	2209      	movs	r2, #9
 8010a14:	3308      	adds	r3, #8
 8010a16:	4606      	mov	r6, r0
 8010a18:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a1c:	2100      	movs	r1, #0
 8010a1e:	2201      	movs	r2, #1
 8010a20:	429a      	cmp	r2, r3
 8010a22:	db09      	blt.n	8010a38 <__s2b+0x30>
 8010a24:	4630      	mov	r0, r6
 8010a26:	f7ff ff47 	bl	80108b8 <_Balloc>
 8010a2a:	b940      	cbnz	r0, 8010a3e <__s2b+0x36>
 8010a2c:	4602      	mov	r2, r0
 8010a2e:	4b19      	ldr	r3, [pc, #100]	@ (8010a94 <__s2b+0x8c>)
 8010a30:	4819      	ldr	r0, [pc, #100]	@ (8010a98 <__s2b+0x90>)
 8010a32:	21d3      	movs	r1, #211	@ 0xd3
 8010a34:	f002 f8d8 	bl	8012be8 <__assert_func>
 8010a38:	0052      	lsls	r2, r2, #1
 8010a3a:	3101      	adds	r1, #1
 8010a3c:	e7f0      	b.n	8010a20 <__s2b+0x18>
 8010a3e:	9b08      	ldr	r3, [sp, #32]
 8010a40:	6143      	str	r3, [r0, #20]
 8010a42:	2d09      	cmp	r5, #9
 8010a44:	f04f 0301 	mov.w	r3, #1
 8010a48:	6103      	str	r3, [r0, #16]
 8010a4a:	dd16      	ble.n	8010a7a <__s2b+0x72>
 8010a4c:	f104 0909 	add.w	r9, r4, #9
 8010a50:	46c8      	mov	r8, r9
 8010a52:	442c      	add	r4, r5
 8010a54:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010a58:	4601      	mov	r1, r0
 8010a5a:	3b30      	subs	r3, #48	@ 0x30
 8010a5c:	220a      	movs	r2, #10
 8010a5e:	4630      	mov	r0, r6
 8010a60:	f7ff ff8c 	bl	801097c <__multadd>
 8010a64:	45a0      	cmp	r8, r4
 8010a66:	d1f5      	bne.n	8010a54 <__s2b+0x4c>
 8010a68:	f1a5 0408 	sub.w	r4, r5, #8
 8010a6c:	444c      	add	r4, r9
 8010a6e:	1b2d      	subs	r5, r5, r4
 8010a70:	1963      	adds	r3, r4, r5
 8010a72:	42bb      	cmp	r3, r7
 8010a74:	db04      	blt.n	8010a80 <__s2b+0x78>
 8010a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a7a:	340a      	adds	r4, #10
 8010a7c:	2509      	movs	r5, #9
 8010a7e:	e7f6      	b.n	8010a6e <__s2b+0x66>
 8010a80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010a84:	4601      	mov	r1, r0
 8010a86:	3b30      	subs	r3, #48	@ 0x30
 8010a88:	220a      	movs	r2, #10
 8010a8a:	4630      	mov	r0, r6
 8010a8c:	f7ff ff76 	bl	801097c <__multadd>
 8010a90:	e7ee      	b.n	8010a70 <__s2b+0x68>
 8010a92:	bf00      	nop
 8010a94:	08013ad8 	.word	0x08013ad8
 8010a98:	08013ae9 	.word	0x08013ae9

08010a9c <__hi0bits>:
 8010a9c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	bf36      	itet	cc
 8010aa4:	0403      	lslcc	r3, r0, #16
 8010aa6:	2000      	movcs	r0, #0
 8010aa8:	2010      	movcc	r0, #16
 8010aaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010aae:	bf3c      	itt	cc
 8010ab0:	021b      	lslcc	r3, r3, #8
 8010ab2:	3008      	addcc	r0, #8
 8010ab4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010ab8:	bf3c      	itt	cc
 8010aba:	011b      	lslcc	r3, r3, #4
 8010abc:	3004      	addcc	r0, #4
 8010abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ac2:	bf3c      	itt	cc
 8010ac4:	009b      	lslcc	r3, r3, #2
 8010ac6:	3002      	addcc	r0, #2
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	db05      	blt.n	8010ad8 <__hi0bits+0x3c>
 8010acc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010ad0:	f100 0001 	add.w	r0, r0, #1
 8010ad4:	bf08      	it	eq
 8010ad6:	2020      	moveq	r0, #32
 8010ad8:	4770      	bx	lr

08010ada <__lo0bits>:
 8010ada:	6803      	ldr	r3, [r0, #0]
 8010adc:	4602      	mov	r2, r0
 8010ade:	f013 0007 	ands.w	r0, r3, #7
 8010ae2:	d00b      	beq.n	8010afc <__lo0bits+0x22>
 8010ae4:	07d9      	lsls	r1, r3, #31
 8010ae6:	d421      	bmi.n	8010b2c <__lo0bits+0x52>
 8010ae8:	0798      	lsls	r0, r3, #30
 8010aea:	bf49      	itett	mi
 8010aec:	085b      	lsrmi	r3, r3, #1
 8010aee:	089b      	lsrpl	r3, r3, #2
 8010af0:	2001      	movmi	r0, #1
 8010af2:	6013      	strmi	r3, [r2, #0]
 8010af4:	bf5c      	itt	pl
 8010af6:	6013      	strpl	r3, [r2, #0]
 8010af8:	2002      	movpl	r0, #2
 8010afa:	4770      	bx	lr
 8010afc:	b299      	uxth	r1, r3
 8010afe:	b909      	cbnz	r1, 8010b04 <__lo0bits+0x2a>
 8010b00:	0c1b      	lsrs	r3, r3, #16
 8010b02:	2010      	movs	r0, #16
 8010b04:	b2d9      	uxtb	r1, r3
 8010b06:	b909      	cbnz	r1, 8010b0c <__lo0bits+0x32>
 8010b08:	3008      	adds	r0, #8
 8010b0a:	0a1b      	lsrs	r3, r3, #8
 8010b0c:	0719      	lsls	r1, r3, #28
 8010b0e:	bf04      	itt	eq
 8010b10:	091b      	lsreq	r3, r3, #4
 8010b12:	3004      	addeq	r0, #4
 8010b14:	0799      	lsls	r1, r3, #30
 8010b16:	bf04      	itt	eq
 8010b18:	089b      	lsreq	r3, r3, #2
 8010b1a:	3002      	addeq	r0, #2
 8010b1c:	07d9      	lsls	r1, r3, #31
 8010b1e:	d403      	bmi.n	8010b28 <__lo0bits+0x4e>
 8010b20:	085b      	lsrs	r3, r3, #1
 8010b22:	f100 0001 	add.w	r0, r0, #1
 8010b26:	d003      	beq.n	8010b30 <__lo0bits+0x56>
 8010b28:	6013      	str	r3, [r2, #0]
 8010b2a:	4770      	bx	lr
 8010b2c:	2000      	movs	r0, #0
 8010b2e:	4770      	bx	lr
 8010b30:	2020      	movs	r0, #32
 8010b32:	4770      	bx	lr

08010b34 <__i2b>:
 8010b34:	b510      	push	{r4, lr}
 8010b36:	460c      	mov	r4, r1
 8010b38:	2101      	movs	r1, #1
 8010b3a:	f7ff febd 	bl	80108b8 <_Balloc>
 8010b3e:	4602      	mov	r2, r0
 8010b40:	b928      	cbnz	r0, 8010b4e <__i2b+0x1a>
 8010b42:	4b05      	ldr	r3, [pc, #20]	@ (8010b58 <__i2b+0x24>)
 8010b44:	4805      	ldr	r0, [pc, #20]	@ (8010b5c <__i2b+0x28>)
 8010b46:	f240 1145 	movw	r1, #325	@ 0x145
 8010b4a:	f002 f84d 	bl	8012be8 <__assert_func>
 8010b4e:	2301      	movs	r3, #1
 8010b50:	6144      	str	r4, [r0, #20]
 8010b52:	6103      	str	r3, [r0, #16]
 8010b54:	bd10      	pop	{r4, pc}
 8010b56:	bf00      	nop
 8010b58:	08013ad8 	.word	0x08013ad8
 8010b5c:	08013ae9 	.word	0x08013ae9

08010b60 <__multiply>:
 8010b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b64:	4614      	mov	r4, r2
 8010b66:	690a      	ldr	r2, [r1, #16]
 8010b68:	6923      	ldr	r3, [r4, #16]
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	bfa8      	it	ge
 8010b6e:	4623      	movge	r3, r4
 8010b70:	460f      	mov	r7, r1
 8010b72:	bfa4      	itt	ge
 8010b74:	460c      	movge	r4, r1
 8010b76:	461f      	movge	r7, r3
 8010b78:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010b7c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010b80:	68a3      	ldr	r3, [r4, #8]
 8010b82:	6861      	ldr	r1, [r4, #4]
 8010b84:	eb0a 0609 	add.w	r6, sl, r9
 8010b88:	42b3      	cmp	r3, r6
 8010b8a:	b085      	sub	sp, #20
 8010b8c:	bfb8      	it	lt
 8010b8e:	3101      	addlt	r1, #1
 8010b90:	f7ff fe92 	bl	80108b8 <_Balloc>
 8010b94:	b930      	cbnz	r0, 8010ba4 <__multiply+0x44>
 8010b96:	4602      	mov	r2, r0
 8010b98:	4b44      	ldr	r3, [pc, #272]	@ (8010cac <__multiply+0x14c>)
 8010b9a:	4845      	ldr	r0, [pc, #276]	@ (8010cb0 <__multiply+0x150>)
 8010b9c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010ba0:	f002 f822 	bl	8012be8 <__assert_func>
 8010ba4:	f100 0514 	add.w	r5, r0, #20
 8010ba8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010bac:	462b      	mov	r3, r5
 8010bae:	2200      	movs	r2, #0
 8010bb0:	4543      	cmp	r3, r8
 8010bb2:	d321      	bcc.n	8010bf8 <__multiply+0x98>
 8010bb4:	f107 0114 	add.w	r1, r7, #20
 8010bb8:	f104 0214 	add.w	r2, r4, #20
 8010bbc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010bc0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010bc4:	9302      	str	r3, [sp, #8]
 8010bc6:	1b13      	subs	r3, r2, r4
 8010bc8:	3b15      	subs	r3, #21
 8010bca:	f023 0303 	bic.w	r3, r3, #3
 8010bce:	3304      	adds	r3, #4
 8010bd0:	f104 0715 	add.w	r7, r4, #21
 8010bd4:	42ba      	cmp	r2, r7
 8010bd6:	bf38      	it	cc
 8010bd8:	2304      	movcc	r3, #4
 8010bda:	9301      	str	r3, [sp, #4]
 8010bdc:	9b02      	ldr	r3, [sp, #8]
 8010bde:	9103      	str	r1, [sp, #12]
 8010be0:	428b      	cmp	r3, r1
 8010be2:	d80c      	bhi.n	8010bfe <__multiply+0x9e>
 8010be4:	2e00      	cmp	r6, #0
 8010be6:	dd03      	ble.n	8010bf0 <__multiply+0x90>
 8010be8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d05b      	beq.n	8010ca8 <__multiply+0x148>
 8010bf0:	6106      	str	r6, [r0, #16]
 8010bf2:	b005      	add	sp, #20
 8010bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bf8:	f843 2b04 	str.w	r2, [r3], #4
 8010bfc:	e7d8      	b.n	8010bb0 <__multiply+0x50>
 8010bfe:	f8b1 a000 	ldrh.w	sl, [r1]
 8010c02:	f1ba 0f00 	cmp.w	sl, #0
 8010c06:	d024      	beq.n	8010c52 <__multiply+0xf2>
 8010c08:	f104 0e14 	add.w	lr, r4, #20
 8010c0c:	46a9      	mov	r9, r5
 8010c0e:	f04f 0c00 	mov.w	ip, #0
 8010c12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010c16:	f8d9 3000 	ldr.w	r3, [r9]
 8010c1a:	fa1f fb87 	uxth.w	fp, r7
 8010c1e:	b29b      	uxth	r3, r3
 8010c20:	fb0a 330b 	mla	r3, sl, fp, r3
 8010c24:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010c28:	f8d9 7000 	ldr.w	r7, [r9]
 8010c2c:	4463      	add	r3, ip
 8010c2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010c32:	fb0a c70b 	mla	r7, sl, fp, ip
 8010c36:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010c3a:	b29b      	uxth	r3, r3
 8010c3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010c40:	4572      	cmp	r2, lr
 8010c42:	f849 3b04 	str.w	r3, [r9], #4
 8010c46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010c4a:	d8e2      	bhi.n	8010c12 <__multiply+0xb2>
 8010c4c:	9b01      	ldr	r3, [sp, #4]
 8010c4e:	f845 c003 	str.w	ip, [r5, r3]
 8010c52:	9b03      	ldr	r3, [sp, #12]
 8010c54:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010c58:	3104      	adds	r1, #4
 8010c5a:	f1b9 0f00 	cmp.w	r9, #0
 8010c5e:	d021      	beq.n	8010ca4 <__multiply+0x144>
 8010c60:	682b      	ldr	r3, [r5, #0]
 8010c62:	f104 0c14 	add.w	ip, r4, #20
 8010c66:	46ae      	mov	lr, r5
 8010c68:	f04f 0a00 	mov.w	sl, #0
 8010c6c:	f8bc b000 	ldrh.w	fp, [ip]
 8010c70:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010c74:	fb09 770b 	mla	r7, r9, fp, r7
 8010c78:	4457      	add	r7, sl
 8010c7a:	b29b      	uxth	r3, r3
 8010c7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010c80:	f84e 3b04 	str.w	r3, [lr], #4
 8010c84:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010c88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010c8c:	f8be 3000 	ldrh.w	r3, [lr]
 8010c90:	fb09 330a 	mla	r3, r9, sl, r3
 8010c94:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010c98:	4562      	cmp	r2, ip
 8010c9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010c9e:	d8e5      	bhi.n	8010c6c <__multiply+0x10c>
 8010ca0:	9f01      	ldr	r7, [sp, #4]
 8010ca2:	51eb      	str	r3, [r5, r7]
 8010ca4:	3504      	adds	r5, #4
 8010ca6:	e799      	b.n	8010bdc <__multiply+0x7c>
 8010ca8:	3e01      	subs	r6, #1
 8010caa:	e79b      	b.n	8010be4 <__multiply+0x84>
 8010cac:	08013ad8 	.word	0x08013ad8
 8010cb0:	08013ae9 	.word	0x08013ae9

08010cb4 <__pow5mult>:
 8010cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cb8:	4615      	mov	r5, r2
 8010cba:	f012 0203 	ands.w	r2, r2, #3
 8010cbe:	4607      	mov	r7, r0
 8010cc0:	460e      	mov	r6, r1
 8010cc2:	d007      	beq.n	8010cd4 <__pow5mult+0x20>
 8010cc4:	4c25      	ldr	r4, [pc, #148]	@ (8010d5c <__pow5mult+0xa8>)
 8010cc6:	3a01      	subs	r2, #1
 8010cc8:	2300      	movs	r3, #0
 8010cca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010cce:	f7ff fe55 	bl	801097c <__multadd>
 8010cd2:	4606      	mov	r6, r0
 8010cd4:	10ad      	asrs	r5, r5, #2
 8010cd6:	d03d      	beq.n	8010d54 <__pow5mult+0xa0>
 8010cd8:	69fc      	ldr	r4, [r7, #28]
 8010cda:	b97c      	cbnz	r4, 8010cfc <__pow5mult+0x48>
 8010cdc:	2010      	movs	r0, #16
 8010cde:	f7ff fd35 	bl	801074c <malloc>
 8010ce2:	4602      	mov	r2, r0
 8010ce4:	61f8      	str	r0, [r7, #28]
 8010ce6:	b928      	cbnz	r0, 8010cf4 <__pow5mult+0x40>
 8010ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8010d60 <__pow5mult+0xac>)
 8010cea:	481e      	ldr	r0, [pc, #120]	@ (8010d64 <__pow5mult+0xb0>)
 8010cec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010cf0:	f001 ff7a 	bl	8012be8 <__assert_func>
 8010cf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010cf8:	6004      	str	r4, [r0, #0]
 8010cfa:	60c4      	str	r4, [r0, #12]
 8010cfc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010d00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010d04:	b94c      	cbnz	r4, 8010d1a <__pow5mult+0x66>
 8010d06:	f240 2171 	movw	r1, #625	@ 0x271
 8010d0a:	4638      	mov	r0, r7
 8010d0c:	f7ff ff12 	bl	8010b34 <__i2b>
 8010d10:	2300      	movs	r3, #0
 8010d12:	f8c8 0008 	str.w	r0, [r8, #8]
 8010d16:	4604      	mov	r4, r0
 8010d18:	6003      	str	r3, [r0, #0]
 8010d1a:	f04f 0900 	mov.w	r9, #0
 8010d1e:	07eb      	lsls	r3, r5, #31
 8010d20:	d50a      	bpl.n	8010d38 <__pow5mult+0x84>
 8010d22:	4631      	mov	r1, r6
 8010d24:	4622      	mov	r2, r4
 8010d26:	4638      	mov	r0, r7
 8010d28:	f7ff ff1a 	bl	8010b60 <__multiply>
 8010d2c:	4631      	mov	r1, r6
 8010d2e:	4680      	mov	r8, r0
 8010d30:	4638      	mov	r0, r7
 8010d32:	f7ff fe01 	bl	8010938 <_Bfree>
 8010d36:	4646      	mov	r6, r8
 8010d38:	106d      	asrs	r5, r5, #1
 8010d3a:	d00b      	beq.n	8010d54 <__pow5mult+0xa0>
 8010d3c:	6820      	ldr	r0, [r4, #0]
 8010d3e:	b938      	cbnz	r0, 8010d50 <__pow5mult+0x9c>
 8010d40:	4622      	mov	r2, r4
 8010d42:	4621      	mov	r1, r4
 8010d44:	4638      	mov	r0, r7
 8010d46:	f7ff ff0b 	bl	8010b60 <__multiply>
 8010d4a:	6020      	str	r0, [r4, #0]
 8010d4c:	f8c0 9000 	str.w	r9, [r0]
 8010d50:	4604      	mov	r4, r0
 8010d52:	e7e4      	b.n	8010d1e <__pow5mult+0x6a>
 8010d54:	4630      	mov	r0, r6
 8010d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d5a:	bf00      	nop
 8010d5c:	08013b44 	.word	0x08013b44
 8010d60:	08013a69 	.word	0x08013a69
 8010d64:	08013ae9 	.word	0x08013ae9

08010d68 <__lshift>:
 8010d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d6c:	460c      	mov	r4, r1
 8010d6e:	6849      	ldr	r1, [r1, #4]
 8010d70:	6923      	ldr	r3, [r4, #16]
 8010d72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010d76:	68a3      	ldr	r3, [r4, #8]
 8010d78:	4607      	mov	r7, r0
 8010d7a:	4691      	mov	r9, r2
 8010d7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010d80:	f108 0601 	add.w	r6, r8, #1
 8010d84:	42b3      	cmp	r3, r6
 8010d86:	db0b      	blt.n	8010da0 <__lshift+0x38>
 8010d88:	4638      	mov	r0, r7
 8010d8a:	f7ff fd95 	bl	80108b8 <_Balloc>
 8010d8e:	4605      	mov	r5, r0
 8010d90:	b948      	cbnz	r0, 8010da6 <__lshift+0x3e>
 8010d92:	4602      	mov	r2, r0
 8010d94:	4b28      	ldr	r3, [pc, #160]	@ (8010e38 <__lshift+0xd0>)
 8010d96:	4829      	ldr	r0, [pc, #164]	@ (8010e3c <__lshift+0xd4>)
 8010d98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010d9c:	f001 ff24 	bl	8012be8 <__assert_func>
 8010da0:	3101      	adds	r1, #1
 8010da2:	005b      	lsls	r3, r3, #1
 8010da4:	e7ee      	b.n	8010d84 <__lshift+0x1c>
 8010da6:	2300      	movs	r3, #0
 8010da8:	f100 0114 	add.w	r1, r0, #20
 8010dac:	f100 0210 	add.w	r2, r0, #16
 8010db0:	4618      	mov	r0, r3
 8010db2:	4553      	cmp	r3, sl
 8010db4:	db33      	blt.n	8010e1e <__lshift+0xb6>
 8010db6:	6920      	ldr	r0, [r4, #16]
 8010db8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010dbc:	f104 0314 	add.w	r3, r4, #20
 8010dc0:	f019 091f 	ands.w	r9, r9, #31
 8010dc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010dc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010dcc:	d02b      	beq.n	8010e26 <__lshift+0xbe>
 8010dce:	f1c9 0e20 	rsb	lr, r9, #32
 8010dd2:	468a      	mov	sl, r1
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	6818      	ldr	r0, [r3, #0]
 8010dd8:	fa00 f009 	lsl.w	r0, r0, r9
 8010ddc:	4310      	orrs	r0, r2
 8010dde:	f84a 0b04 	str.w	r0, [sl], #4
 8010de2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010de6:	459c      	cmp	ip, r3
 8010de8:	fa22 f20e 	lsr.w	r2, r2, lr
 8010dec:	d8f3      	bhi.n	8010dd6 <__lshift+0x6e>
 8010dee:	ebac 0304 	sub.w	r3, ip, r4
 8010df2:	3b15      	subs	r3, #21
 8010df4:	f023 0303 	bic.w	r3, r3, #3
 8010df8:	3304      	adds	r3, #4
 8010dfa:	f104 0015 	add.w	r0, r4, #21
 8010dfe:	4584      	cmp	ip, r0
 8010e00:	bf38      	it	cc
 8010e02:	2304      	movcc	r3, #4
 8010e04:	50ca      	str	r2, [r1, r3]
 8010e06:	b10a      	cbz	r2, 8010e0c <__lshift+0xa4>
 8010e08:	f108 0602 	add.w	r6, r8, #2
 8010e0c:	3e01      	subs	r6, #1
 8010e0e:	4638      	mov	r0, r7
 8010e10:	612e      	str	r6, [r5, #16]
 8010e12:	4621      	mov	r1, r4
 8010e14:	f7ff fd90 	bl	8010938 <_Bfree>
 8010e18:	4628      	mov	r0, r5
 8010e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010e22:	3301      	adds	r3, #1
 8010e24:	e7c5      	b.n	8010db2 <__lshift+0x4a>
 8010e26:	3904      	subs	r1, #4
 8010e28:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010e30:	459c      	cmp	ip, r3
 8010e32:	d8f9      	bhi.n	8010e28 <__lshift+0xc0>
 8010e34:	e7ea      	b.n	8010e0c <__lshift+0xa4>
 8010e36:	bf00      	nop
 8010e38:	08013ad8 	.word	0x08013ad8
 8010e3c:	08013ae9 	.word	0x08013ae9

08010e40 <__mcmp>:
 8010e40:	690a      	ldr	r2, [r1, #16]
 8010e42:	4603      	mov	r3, r0
 8010e44:	6900      	ldr	r0, [r0, #16]
 8010e46:	1a80      	subs	r0, r0, r2
 8010e48:	b530      	push	{r4, r5, lr}
 8010e4a:	d10e      	bne.n	8010e6a <__mcmp+0x2a>
 8010e4c:	3314      	adds	r3, #20
 8010e4e:	3114      	adds	r1, #20
 8010e50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010e54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010e58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010e5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010e60:	4295      	cmp	r5, r2
 8010e62:	d003      	beq.n	8010e6c <__mcmp+0x2c>
 8010e64:	d205      	bcs.n	8010e72 <__mcmp+0x32>
 8010e66:	f04f 30ff 	mov.w	r0, #4294967295
 8010e6a:	bd30      	pop	{r4, r5, pc}
 8010e6c:	42a3      	cmp	r3, r4
 8010e6e:	d3f3      	bcc.n	8010e58 <__mcmp+0x18>
 8010e70:	e7fb      	b.n	8010e6a <__mcmp+0x2a>
 8010e72:	2001      	movs	r0, #1
 8010e74:	e7f9      	b.n	8010e6a <__mcmp+0x2a>
	...

08010e78 <__mdiff>:
 8010e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e7c:	4689      	mov	r9, r1
 8010e7e:	4606      	mov	r6, r0
 8010e80:	4611      	mov	r1, r2
 8010e82:	4648      	mov	r0, r9
 8010e84:	4614      	mov	r4, r2
 8010e86:	f7ff ffdb 	bl	8010e40 <__mcmp>
 8010e8a:	1e05      	subs	r5, r0, #0
 8010e8c:	d112      	bne.n	8010eb4 <__mdiff+0x3c>
 8010e8e:	4629      	mov	r1, r5
 8010e90:	4630      	mov	r0, r6
 8010e92:	f7ff fd11 	bl	80108b8 <_Balloc>
 8010e96:	4602      	mov	r2, r0
 8010e98:	b928      	cbnz	r0, 8010ea6 <__mdiff+0x2e>
 8010e9a:	4b3f      	ldr	r3, [pc, #252]	@ (8010f98 <__mdiff+0x120>)
 8010e9c:	f240 2137 	movw	r1, #567	@ 0x237
 8010ea0:	483e      	ldr	r0, [pc, #248]	@ (8010f9c <__mdiff+0x124>)
 8010ea2:	f001 fea1 	bl	8012be8 <__assert_func>
 8010ea6:	2301      	movs	r3, #1
 8010ea8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010eac:	4610      	mov	r0, r2
 8010eae:	b003      	add	sp, #12
 8010eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eb4:	bfbc      	itt	lt
 8010eb6:	464b      	movlt	r3, r9
 8010eb8:	46a1      	movlt	r9, r4
 8010eba:	4630      	mov	r0, r6
 8010ebc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010ec0:	bfba      	itte	lt
 8010ec2:	461c      	movlt	r4, r3
 8010ec4:	2501      	movlt	r5, #1
 8010ec6:	2500      	movge	r5, #0
 8010ec8:	f7ff fcf6 	bl	80108b8 <_Balloc>
 8010ecc:	4602      	mov	r2, r0
 8010ece:	b918      	cbnz	r0, 8010ed8 <__mdiff+0x60>
 8010ed0:	4b31      	ldr	r3, [pc, #196]	@ (8010f98 <__mdiff+0x120>)
 8010ed2:	f240 2145 	movw	r1, #581	@ 0x245
 8010ed6:	e7e3      	b.n	8010ea0 <__mdiff+0x28>
 8010ed8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010edc:	6926      	ldr	r6, [r4, #16]
 8010ede:	60c5      	str	r5, [r0, #12]
 8010ee0:	f109 0310 	add.w	r3, r9, #16
 8010ee4:	f109 0514 	add.w	r5, r9, #20
 8010ee8:	f104 0e14 	add.w	lr, r4, #20
 8010eec:	f100 0b14 	add.w	fp, r0, #20
 8010ef0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010ef4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010ef8:	9301      	str	r3, [sp, #4]
 8010efa:	46d9      	mov	r9, fp
 8010efc:	f04f 0c00 	mov.w	ip, #0
 8010f00:	9b01      	ldr	r3, [sp, #4]
 8010f02:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010f06:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010f0a:	9301      	str	r3, [sp, #4]
 8010f0c:	fa1f f38a 	uxth.w	r3, sl
 8010f10:	4619      	mov	r1, r3
 8010f12:	b283      	uxth	r3, r0
 8010f14:	1acb      	subs	r3, r1, r3
 8010f16:	0c00      	lsrs	r0, r0, #16
 8010f18:	4463      	add	r3, ip
 8010f1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010f1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010f22:	b29b      	uxth	r3, r3
 8010f24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010f28:	4576      	cmp	r6, lr
 8010f2a:	f849 3b04 	str.w	r3, [r9], #4
 8010f2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010f32:	d8e5      	bhi.n	8010f00 <__mdiff+0x88>
 8010f34:	1b33      	subs	r3, r6, r4
 8010f36:	3b15      	subs	r3, #21
 8010f38:	f023 0303 	bic.w	r3, r3, #3
 8010f3c:	3415      	adds	r4, #21
 8010f3e:	3304      	adds	r3, #4
 8010f40:	42a6      	cmp	r6, r4
 8010f42:	bf38      	it	cc
 8010f44:	2304      	movcc	r3, #4
 8010f46:	441d      	add	r5, r3
 8010f48:	445b      	add	r3, fp
 8010f4a:	461e      	mov	r6, r3
 8010f4c:	462c      	mov	r4, r5
 8010f4e:	4544      	cmp	r4, r8
 8010f50:	d30e      	bcc.n	8010f70 <__mdiff+0xf8>
 8010f52:	f108 0103 	add.w	r1, r8, #3
 8010f56:	1b49      	subs	r1, r1, r5
 8010f58:	f021 0103 	bic.w	r1, r1, #3
 8010f5c:	3d03      	subs	r5, #3
 8010f5e:	45a8      	cmp	r8, r5
 8010f60:	bf38      	it	cc
 8010f62:	2100      	movcc	r1, #0
 8010f64:	440b      	add	r3, r1
 8010f66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010f6a:	b191      	cbz	r1, 8010f92 <__mdiff+0x11a>
 8010f6c:	6117      	str	r7, [r2, #16]
 8010f6e:	e79d      	b.n	8010eac <__mdiff+0x34>
 8010f70:	f854 1b04 	ldr.w	r1, [r4], #4
 8010f74:	46e6      	mov	lr, ip
 8010f76:	0c08      	lsrs	r0, r1, #16
 8010f78:	fa1c fc81 	uxtah	ip, ip, r1
 8010f7c:	4471      	add	r1, lr
 8010f7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010f82:	b289      	uxth	r1, r1
 8010f84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010f88:	f846 1b04 	str.w	r1, [r6], #4
 8010f8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010f90:	e7dd      	b.n	8010f4e <__mdiff+0xd6>
 8010f92:	3f01      	subs	r7, #1
 8010f94:	e7e7      	b.n	8010f66 <__mdiff+0xee>
 8010f96:	bf00      	nop
 8010f98:	08013ad8 	.word	0x08013ad8
 8010f9c:	08013ae9 	.word	0x08013ae9

08010fa0 <__ulp>:
 8010fa0:	b082      	sub	sp, #8
 8010fa2:	ed8d 0b00 	vstr	d0, [sp]
 8010fa6:	9a01      	ldr	r2, [sp, #4]
 8010fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8010fe8 <__ulp+0x48>)
 8010faa:	4013      	ands	r3, r2
 8010fac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	dc08      	bgt.n	8010fc6 <__ulp+0x26>
 8010fb4:	425b      	negs	r3, r3
 8010fb6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010fba:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010fbe:	da04      	bge.n	8010fca <__ulp+0x2a>
 8010fc0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010fc4:	4113      	asrs	r3, r2
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	e008      	b.n	8010fdc <__ulp+0x3c>
 8010fca:	f1a2 0314 	sub.w	r3, r2, #20
 8010fce:	2b1e      	cmp	r3, #30
 8010fd0:	bfda      	itte	le
 8010fd2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010fd6:	40da      	lsrle	r2, r3
 8010fd8:	2201      	movgt	r2, #1
 8010fda:	2300      	movs	r3, #0
 8010fdc:	4619      	mov	r1, r3
 8010fde:	4610      	mov	r0, r2
 8010fe0:	ec41 0b10 	vmov	d0, r0, r1
 8010fe4:	b002      	add	sp, #8
 8010fe6:	4770      	bx	lr
 8010fe8:	7ff00000 	.word	0x7ff00000

08010fec <__b2d>:
 8010fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ff0:	6906      	ldr	r6, [r0, #16]
 8010ff2:	f100 0814 	add.w	r8, r0, #20
 8010ff6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010ffa:	1f37      	subs	r7, r6, #4
 8010ffc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011000:	4610      	mov	r0, r2
 8011002:	f7ff fd4b 	bl	8010a9c <__hi0bits>
 8011006:	f1c0 0320 	rsb	r3, r0, #32
 801100a:	280a      	cmp	r0, #10
 801100c:	600b      	str	r3, [r1, #0]
 801100e:	491b      	ldr	r1, [pc, #108]	@ (801107c <__b2d+0x90>)
 8011010:	dc15      	bgt.n	801103e <__b2d+0x52>
 8011012:	f1c0 0c0b 	rsb	ip, r0, #11
 8011016:	fa22 f30c 	lsr.w	r3, r2, ip
 801101a:	45b8      	cmp	r8, r7
 801101c:	ea43 0501 	orr.w	r5, r3, r1
 8011020:	bf34      	ite	cc
 8011022:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011026:	2300      	movcs	r3, #0
 8011028:	3015      	adds	r0, #21
 801102a:	fa02 f000 	lsl.w	r0, r2, r0
 801102e:	fa23 f30c 	lsr.w	r3, r3, ip
 8011032:	4303      	orrs	r3, r0
 8011034:	461c      	mov	r4, r3
 8011036:	ec45 4b10 	vmov	d0, r4, r5
 801103a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801103e:	45b8      	cmp	r8, r7
 8011040:	bf3a      	itte	cc
 8011042:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011046:	f1a6 0708 	subcc.w	r7, r6, #8
 801104a:	2300      	movcs	r3, #0
 801104c:	380b      	subs	r0, #11
 801104e:	d012      	beq.n	8011076 <__b2d+0x8a>
 8011050:	f1c0 0120 	rsb	r1, r0, #32
 8011054:	fa23 f401 	lsr.w	r4, r3, r1
 8011058:	4082      	lsls	r2, r0
 801105a:	4322      	orrs	r2, r4
 801105c:	4547      	cmp	r7, r8
 801105e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011062:	bf8c      	ite	hi
 8011064:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011068:	2200      	movls	r2, #0
 801106a:	4083      	lsls	r3, r0
 801106c:	40ca      	lsrs	r2, r1
 801106e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011072:	4313      	orrs	r3, r2
 8011074:	e7de      	b.n	8011034 <__b2d+0x48>
 8011076:	ea42 0501 	orr.w	r5, r2, r1
 801107a:	e7db      	b.n	8011034 <__b2d+0x48>
 801107c:	3ff00000 	.word	0x3ff00000

08011080 <__d2b>:
 8011080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011084:	460f      	mov	r7, r1
 8011086:	2101      	movs	r1, #1
 8011088:	ec59 8b10 	vmov	r8, r9, d0
 801108c:	4616      	mov	r6, r2
 801108e:	f7ff fc13 	bl	80108b8 <_Balloc>
 8011092:	4604      	mov	r4, r0
 8011094:	b930      	cbnz	r0, 80110a4 <__d2b+0x24>
 8011096:	4602      	mov	r2, r0
 8011098:	4b23      	ldr	r3, [pc, #140]	@ (8011128 <__d2b+0xa8>)
 801109a:	4824      	ldr	r0, [pc, #144]	@ (801112c <__d2b+0xac>)
 801109c:	f240 310f 	movw	r1, #783	@ 0x30f
 80110a0:	f001 fda2 	bl	8012be8 <__assert_func>
 80110a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80110a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80110ac:	b10d      	cbz	r5, 80110b2 <__d2b+0x32>
 80110ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80110b2:	9301      	str	r3, [sp, #4]
 80110b4:	f1b8 0300 	subs.w	r3, r8, #0
 80110b8:	d023      	beq.n	8011102 <__d2b+0x82>
 80110ba:	4668      	mov	r0, sp
 80110bc:	9300      	str	r3, [sp, #0]
 80110be:	f7ff fd0c 	bl	8010ada <__lo0bits>
 80110c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80110c6:	b1d0      	cbz	r0, 80110fe <__d2b+0x7e>
 80110c8:	f1c0 0320 	rsb	r3, r0, #32
 80110cc:	fa02 f303 	lsl.w	r3, r2, r3
 80110d0:	430b      	orrs	r3, r1
 80110d2:	40c2      	lsrs	r2, r0
 80110d4:	6163      	str	r3, [r4, #20]
 80110d6:	9201      	str	r2, [sp, #4]
 80110d8:	9b01      	ldr	r3, [sp, #4]
 80110da:	61a3      	str	r3, [r4, #24]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	bf0c      	ite	eq
 80110e0:	2201      	moveq	r2, #1
 80110e2:	2202      	movne	r2, #2
 80110e4:	6122      	str	r2, [r4, #16]
 80110e6:	b1a5      	cbz	r5, 8011112 <__d2b+0x92>
 80110e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80110ec:	4405      	add	r5, r0
 80110ee:	603d      	str	r5, [r7, #0]
 80110f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80110f4:	6030      	str	r0, [r6, #0]
 80110f6:	4620      	mov	r0, r4
 80110f8:	b003      	add	sp, #12
 80110fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110fe:	6161      	str	r1, [r4, #20]
 8011100:	e7ea      	b.n	80110d8 <__d2b+0x58>
 8011102:	a801      	add	r0, sp, #4
 8011104:	f7ff fce9 	bl	8010ada <__lo0bits>
 8011108:	9b01      	ldr	r3, [sp, #4]
 801110a:	6163      	str	r3, [r4, #20]
 801110c:	3020      	adds	r0, #32
 801110e:	2201      	movs	r2, #1
 8011110:	e7e8      	b.n	80110e4 <__d2b+0x64>
 8011112:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011116:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801111a:	6038      	str	r0, [r7, #0]
 801111c:	6918      	ldr	r0, [r3, #16]
 801111e:	f7ff fcbd 	bl	8010a9c <__hi0bits>
 8011122:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011126:	e7e5      	b.n	80110f4 <__d2b+0x74>
 8011128:	08013ad8 	.word	0x08013ad8
 801112c:	08013ae9 	.word	0x08013ae9

08011130 <__ratio>:
 8011130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011134:	b085      	sub	sp, #20
 8011136:	e9cd 1000 	strd	r1, r0, [sp]
 801113a:	a902      	add	r1, sp, #8
 801113c:	f7ff ff56 	bl	8010fec <__b2d>
 8011140:	9800      	ldr	r0, [sp, #0]
 8011142:	a903      	add	r1, sp, #12
 8011144:	ec55 4b10 	vmov	r4, r5, d0
 8011148:	f7ff ff50 	bl	8010fec <__b2d>
 801114c:	9b01      	ldr	r3, [sp, #4]
 801114e:	6919      	ldr	r1, [r3, #16]
 8011150:	9b00      	ldr	r3, [sp, #0]
 8011152:	691b      	ldr	r3, [r3, #16]
 8011154:	1ac9      	subs	r1, r1, r3
 8011156:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801115a:	1a9b      	subs	r3, r3, r2
 801115c:	ec5b ab10 	vmov	sl, fp, d0
 8011160:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011164:	2b00      	cmp	r3, #0
 8011166:	bfce      	itee	gt
 8011168:	462a      	movgt	r2, r5
 801116a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801116e:	465a      	movle	r2, fp
 8011170:	462f      	mov	r7, r5
 8011172:	46d9      	mov	r9, fp
 8011174:	bfcc      	ite	gt
 8011176:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801117a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801117e:	464b      	mov	r3, r9
 8011180:	4652      	mov	r2, sl
 8011182:	4620      	mov	r0, r4
 8011184:	4639      	mov	r1, r7
 8011186:	f7ef fb61 	bl	800084c <__aeabi_ddiv>
 801118a:	ec41 0b10 	vmov	d0, r0, r1
 801118e:	b005      	add	sp, #20
 8011190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011194 <__copybits>:
 8011194:	3901      	subs	r1, #1
 8011196:	b570      	push	{r4, r5, r6, lr}
 8011198:	1149      	asrs	r1, r1, #5
 801119a:	6914      	ldr	r4, [r2, #16]
 801119c:	3101      	adds	r1, #1
 801119e:	f102 0314 	add.w	r3, r2, #20
 80111a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80111a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80111aa:	1f05      	subs	r5, r0, #4
 80111ac:	42a3      	cmp	r3, r4
 80111ae:	d30c      	bcc.n	80111ca <__copybits+0x36>
 80111b0:	1aa3      	subs	r3, r4, r2
 80111b2:	3b11      	subs	r3, #17
 80111b4:	f023 0303 	bic.w	r3, r3, #3
 80111b8:	3211      	adds	r2, #17
 80111ba:	42a2      	cmp	r2, r4
 80111bc:	bf88      	it	hi
 80111be:	2300      	movhi	r3, #0
 80111c0:	4418      	add	r0, r3
 80111c2:	2300      	movs	r3, #0
 80111c4:	4288      	cmp	r0, r1
 80111c6:	d305      	bcc.n	80111d4 <__copybits+0x40>
 80111c8:	bd70      	pop	{r4, r5, r6, pc}
 80111ca:	f853 6b04 	ldr.w	r6, [r3], #4
 80111ce:	f845 6f04 	str.w	r6, [r5, #4]!
 80111d2:	e7eb      	b.n	80111ac <__copybits+0x18>
 80111d4:	f840 3b04 	str.w	r3, [r0], #4
 80111d8:	e7f4      	b.n	80111c4 <__copybits+0x30>

080111da <__any_on>:
 80111da:	f100 0214 	add.w	r2, r0, #20
 80111de:	6900      	ldr	r0, [r0, #16]
 80111e0:	114b      	asrs	r3, r1, #5
 80111e2:	4298      	cmp	r0, r3
 80111e4:	b510      	push	{r4, lr}
 80111e6:	db11      	blt.n	801120c <__any_on+0x32>
 80111e8:	dd0a      	ble.n	8011200 <__any_on+0x26>
 80111ea:	f011 011f 	ands.w	r1, r1, #31
 80111ee:	d007      	beq.n	8011200 <__any_on+0x26>
 80111f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80111f4:	fa24 f001 	lsr.w	r0, r4, r1
 80111f8:	fa00 f101 	lsl.w	r1, r0, r1
 80111fc:	428c      	cmp	r4, r1
 80111fe:	d10b      	bne.n	8011218 <__any_on+0x3e>
 8011200:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011204:	4293      	cmp	r3, r2
 8011206:	d803      	bhi.n	8011210 <__any_on+0x36>
 8011208:	2000      	movs	r0, #0
 801120a:	bd10      	pop	{r4, pc}
 801120c:	4603      	mov	r3, r0
 801120e:	e7f7      	b.n	8011200 <__any_on+0x26>
 8011210:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011214:	2900      	cmp	r1, #0
 8011216:	d0f5      	beq.n	8011204 <__any_on+0x2a>
 8011218:	2001      	movs	r0, #1
 801121a:	e7f6      	b.n	801120a <__any_on+0x30>

0801121c <sulp>:
 801121c:	b570      	push	{r4, r5, r6, lr}
 801121e:	4604      	mov	r4, r0
 8011220:	460d      	mov	r5, r1
 8011222:	ec45 4b10 	vmov	d0, r4, r5
 8011226:	4616      	mov	r6, r2
 8011228:	f7ff feba 	bl	8010fa0 <__ulp>
 801122c:	ec51 0b10 	vmov	r0, r1, d0
 8011230:	b17e      	cbz	r6, 8011252 <sulp+0x36>
 8011232:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011236:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801123a:	2b00      	cmp	r3, #0
 801123c:	dd09      	ble.n	8011252 <sulp+0x36>
 801123e:	051b      	lsls	r3, r3, #20
 8011240:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011244:	2400      	movs	r4, #0
 8011246:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801124a:	4622      	mov	r2, r4
 801124c:	462b      	mov	r3, r5
 801124e:	f7ef f9d3 	bl	80005f8 <__aeabi_dmul>
 8011252:	ec41 0b10 	vmov	d0, r0, r1
 8011256:	bd70      	pop	{r4, r5, r6, pc}

08011258 <_strtod_l>:
 8011258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801125c:	b09f      	sub	sp, #124	@ 0x7c
 801125e:	460c      	mov	r4, r1
 8011260:	9217      	str	r2, [sp, #92]	@ 0x5c
 8011262:	2200      	movs	r2, #0
 8011264:	921a      	str	r2, [sp, #104]	@ 0x68
 8011266:	9005      	str	r0, [sp, #20]
 8011268:	f04f 0a00 	mov.w	sl, #0
 801126c:	f04f 0b00 	mov.w	fp, #0
 8011270:	460a      	mov	r2, r1
 8011272:	9219      	str	r2, [sp, #100]	@ 0x64
 8011274:	7811      	ldrb	r1, [r2, #0]
 8011276:	292b      	cmp	r1, #43	@ 0x2b
 8011278:	d04a      	beq.n	8011310 <_strtod_l+0xb8>
 801127a:	d838      	bhi.n	80112ee <_strtod_l+0x96>
 801127c:	290d      	cmp	r1, #13
 801127e:	d832      	bhi.n	80112e6 <_strtod_l+0x8e>
 8011280:	2908      	cmp	r1, #8
 8011282:	d832      	bhi.n	80112ea <_strtod_l+0x92>
 8011284:	2900      	cmp	r1, #0
 8011286:	d03b      	beq.n	8011300 <_strtod_l+0xa8>
 8011288:	2200      	movs	r2, #0
 801128a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801128c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801128e:	782a      	ldrb	r2, [r5, #0]
 8011290:	2a30      	cmp	r2, #48	@ 0x30
 8011292:	f040 80b3 	bne.w	80113fc <_strtod_l+0x1a4>
 8011296:	786a      	ldrb	r2, [r5, #1]
 8011298:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801129c:	2a58      	cmp	r2, #88	@ 0x58
 801129e:	d16e      	bne.n	801137e <_strtod_l+0x126>
 80112a0:	9302      	str	r3, [sp, #8]
 80112a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80112a4:	9301      	str	r3, [sp, #4]
 80112a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80112a8:	9300      	str	r3, [sp, #0]
 80112aa:	4a8e      	ldr	r2, [pc, #568]	@ (80114e4 <_strtod_l+0x28c>)
 80112ac:	9805      	ldr	r0, [sp, #20]
 80112ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80112b0:	a919      	add	r1, sp, #100	@ 0x64
 80112b2:	f001 fd33 	bl	8012d1c <__gethex>
 80112b6:	f010 060f 	ands.w	r6, r0, #15
 80112ba:	4604      	mov	r4, r0
 80112bc:	d005      	beq.n	80112ca <_strtod_l+0x72>
 80112be:	2e06      	cmp	r6, #6
 80112c0:	d128      	bne.n	8011314 <_strtod_l+0xbc>
 80112c2:	3501      	adds	r5, #1
 80112c4:	2300      	movs	r3, #0
 80112c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80112c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80112ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	f040 858e 	bne.w	8011dee <_strtod_l+0xb96>
 80112d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80112d4:	b1cb      	cbz	r3, 801130a <_strtod_l+0xb2>
 80112d6:	4652      	mov	r2, sl
 80112d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80112dc:	ec43 2b10 	vmov	d0, r2, r3
 80112e0:	b01f      	add	sp, #124	@ 0x7c
 80112e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112e6:	2920      	cmp	r1, #32
 80112e8:	d1ce      	bne.n	8011288 <_strtod_l+0x30>
 80112ea:	3201      	adds	r2, #1
 80112ec:	e7c1      	b.n	8011272 <_strtod_l+0x1a>
 80112ee:	292d      	cmp	r1, #45	@ 0x2d
 80112f0:	d1ca      	bne.n	8011288 <_strtod_l+0x30>
 80112f2:	2101      	movs	r1, #1
 80112f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80112f6:	1c51      	adds	r1, r2, #1
 80112f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80112fa:	7852      	ldrb	r2, [r2, #1]
 80112fc:	2a00      	cmp	r2, #0
 80112fe:	d1c5      	bne.n	801128c <_strtod_l+0x34>
 8011300:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011302:	9419      	str	r4, [sp, #100]	@ 0x64
 8011304:	2b00      	cmp	r3, #0
 8011306:	f040 8570 	bne.w	8011dea <_strtod_l+0xb92>
 801130a:	4652      	mov	r2, sl
 801130c:	465b      	mov	r3, fp
 801130e:	e7e5      	b.n	80112dc <_strtod_l+0x84>
 8011310:	2100      	movs	r1, #0
 8011312:	e7ef      	b.n	80112f4 <_strtod_l+0x9c>
 8011314:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011316:	b13a      	cbz	r2, 8011328 <_strtod_l+0xd0>
 8011318:	2135      	movs	r1, #53	@ 0x35
 801131a:	a81c      	add	r0, sp, #112	@ 0x70
 801131c:	f7ff ff3a 	bl	8011194 <__copybits>
 8011320:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011322:	9805      	ldr	r0, [sp, #20]
 8011324:	f7ff fb08 	bl	8010938 <_Bfree>
 8011328:	3e01      	subs	r6, #1
 801132a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801132c:	2e04      	cmp	r6, #4
 801132e:	d806      	bhi.n	801133e <_strtod_l+0xe6>
 8011330:	e8df f006 	tbb	[pc, r6]
 8011334:	201d0314 	.word	0x201d0314
 8011338:	14          	.byte	0x14
 8011339:	00          	.byte	0x00
 801133a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801133e:	05e1      	lsls	r1, r4, #23
 8011340:	bf48      	it	mi
 8011342:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011346:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801134a:	0d1b      	lsrs	r3, r3, #20
 801134c:	051b      	lsls	r3, r3, #20
 801134e:	2b00      	cmp	r3, #0
 8011350:	d1bb      	bne.n	80112ca <_strtod_l+0x72>
 8011352:	f7fe fb23 	bl	800f99c <__errno>
 8011356:	2322      	movs	r3, #34	@ 0x22
 8011358:	6003      	str	r3, [r0, #0]
 801135a:	e7b6      	b.n	80112ca <_strtod_l+0x72>
 801135c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011360:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011364:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011368:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801136c:	e7e7      	b.n	801133e <_strtod_l+0xe6>
 801136e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80114ec <_strtod_l+0x294>
 8011372:	e7e4      	b.n	801133e <_strtod_l+0xe6>
 8011374:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011378:	f04f 3aff 	mov.w	sl, #4294967295
 801137c:	e7df      	b.n	801133e <_strtod_l+0xe6>
 801137e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011380:	1c5a      	adds	r2, r3, #1
 8011382:	9219      	str	r2, [sp, #100]	@ 0x64
 8011384:	785b      	ldrb	r3, [r3, #1]
 8011386:	2b30      	cmp	r3, #48	@ 0x30
 8011388:	d0f9      	beq.n	801137e <_strtod_l+0x126>
 801138a:	2b00      	cmp	r3, #0
 801138c:	d09d      	beq.n	80112ca <_strtod_l+0x72>
 801138e:	2301      	movs	r3, #1
 8011390:	9309      	str	r3, [sp, #36]	@ 0x24
 8011392:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011394:	930c      	str	r3, [sp, #48]	@ 0x30
 8011396:	2300      	movs	r3, #0
 8011398:	9308      	str	r3, [sp, #32]
 801139a:	930a      	str	r3, [sp, #40]	@ 0x28
 801139c:	461f      	mov	r7, r3
 801139e:	220a      	movs	r2, #10
 80113a0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80113a2:	7805      	ldrb	r5, [r0, #0]
 80113a4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80113a8:	b2d9      	uxtb	r1, r3
 80113aa:	2909      	cmp	r1, #9
 80113ac:	d928      	bls.n	8011400 <_strtod_l+0x1a8>
 80113ae:	494e      	ldr	r1, [pc, #312]	@ (80114e8 <_strtod_l+0x290>)
 80113b0:	2201      	movs	r2, #1
 80113b2:	f7fe fa81 	bl	800f8b8 <strncmp>
 80113b6:	2800      	cmp	r0, #0
 80113b8:	d032      	beq.n	8011420 <_strtod_l+0x1c8>
 80113ba:	2000      	movs	r0, #0
 80113bc:	462a      	mov	r2, r5
 80113be:	4681      	mov	r9, r0
 80113c0:	463d      	mov	r5, r7
 80113c2:	4603      	mov	r3, r0
 80113c4:	2a65      	cmp	r2, #101	@ 0x65
 80113c6:	d001      	beq.n	80113cc <_strtod_l+0x174>
 80113c8:	2a45      	cmp	r2, #69	@ 0x45
 80113ca:	d114      	bne.n	80113f6 <_strtod_l+0x19e>
 80113cc:	b91d      	cbnz	r5, 80113d6 <_strtod_l+0x17e>
 80113ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80113d0:	4302      	orrs	r2, r0
 80113d2:	d095      	beq.n	8011300 <_strtod_l+0xa8>
 80113d4:	2500      	movs	r5, #0
 80113d6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80113d8:	1c62      	adds	r2, r4, #1
 80113da:	9219      	str	r2, [sp, #100]	@ 0x64
 80113dc:	7862      	ldrb	r2, [r4, #1]
 80113de:	2a2b      	cmp	r2, #43	@ 0x2b
 80113e0:	d077      	beq.n	80114d2 <_strtod_l+0x27a>
 80113e2:	2a2d      	cmp	r2, #45	@ 0x2d
 80113e4:	d07b      	beq.n	80114de <_strtod_l+0x286>
 80113e6:	f04f 0c00 	mov.w	ip, #0
 80113ea:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80113ee:	2909      	cmp	r1, #9
 80113f0:	f240 8082 	bls.w	80114f8 <_strtod_l+0x2a0>
 80113f4:	9419      	str	r4, [sp, #100]	@ 0x64
 80113f6:	f04f 0800 	mov.w	r8, #0
 80113fa:	e0a2      	b.n	8011542 <_strtod_l+0x2ea>
 80113fc:	2300      	movs	r3, #0
 80113fe:	e7c7      	b.n	8011390 <_strtod_l+0x138>
 8011400:	2f08      	cmp	r7, #8
 8011402:	bfd5      	itete	le
 8011404:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8011406:	9908      	ldrgt	r1, [sp, #32]
 8011408:	fb02 3301 	mlale	r3, r2, r1, r3
 801140c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011410:	f100 0001 	add.w	r0, r0, #1
 8011414:	bfd4      	ite	le
 8011416:	930a      	strle	r3, [sp, #40]	@ 0x28
 8011418:	9308      	strgt	r3, [sp, #32]
 801141a:	3701      	adds	r7, #1
 801141c:	9019      	str	r0, [sp, #100]	@ 0x64
 801141e:	e7bf      	b.n	80113a0 <_strtod_l+0x148>
 8011420:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011422:	1c5a      	adds	r2, r3, #1
 8011424:	9219      	str	r2, [sp, #100]	@ 0x64
 8011426:	785a      	ldrb	r2, [r3, #1]
 8011428:	b37f      	cbz	r7, 801148a <_strtod_l+0x232>
 801142a:	4681      	mov	r9, r0
 801142c:	463d      	mov	r5, r7
 801142e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011432:	2b09      	cmp	r3, #9
 8011434:	d912      	bls.n	801145c <_strtod_l+0x204>
 8011436:	2301      	movs	r3, #1
 8011438:	e7c4      	b.n	80113c4 <_strtod_l+0x16c>
 801143a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801143c:	1c5a      	adds	r2, r3, #1
 801143e:	9219      	str	r2, [sp, #100]	@ 0x64
 8011440:	785a      	ldrb	r2, [r3, #1]
 8011442:	3001      	adds	r0, #1
 8011444:	2a30      	cmp	r2, #48	@ 0x30
 8011446:	d0f8      	beq.n	801143a <_strtod_l+0x1e2>
 8011448:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801144c:	2b08      	cmp	r3, #8
 801144e:	f200 84d3 	bhi.w	8011df8 <_strtod_l+0xba0>
 8011452:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011454:	930c      	str	r3, [sp, #48]	@ 0x30
 8011456:	4681      	mov	r9, r0
 8011458:	2000      	movs	r0, #0
 801145a:	4605      	mov	r5, r0
 801145c:	3a30      	subs	r2, #48	@ 0x30
 801145e:	f100 0301 	add.w	r3, r0, #1
 8011462:	d02a      	beq.n	80114ba <_strtod_l+0x262>
 8011464:	4499      	add	r9, r3
 8011466:	eb00 0c05 	add.w	ip, r0, r5
 801146a:	462b      	mov	r3, r5
 801146c:	210a      	movs	r1, #10
 801146e:	4563      	cmp	r3, ip
 8011470:	d10d      	bne.n	801148e <_strtod_l+0x236>
 8011472:	1c69      	adds	r1, r5, #1
 8011474:	4401      	add	r1, r0
 8011476:	4428      	add	r0, r5
 8011478:	2808      	cmp	r0, #8
 801147a:	dc16      	bgt.n	80114aa <_strtod_l+0x252>
 801147c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801147e:	230a      	movs	r3, #10
 8011480:	fb03 2300 	mla	r3, r3, r0, r2
 8011484:	930a      	str	r3, [sp, #40]	@ 0x28
 8011486:	2300      	movs	r3, #0
 8011488:	e018      	b.n	80114bc <_strtod_l+0x264>
 801148a:	4638      	mov	r0, r7
 801148c:	e7da      	b.n	8011444 <_strtod_l+0x1ec>
 801148e:	2b08      	cmp	r3, #8
 8011490:	f103 0301 	add.w	r3, r3, #1
 8011494:	dc03      	bgt.n	801149e <_strtod_l+0x246>
 8011496:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011498:	434e      	muls	r6, r1
 801149a:	960a      	str	r6, [sp, #40]	@ 0x28
 801149c:	e7e7      	b.n	801146e <_strtod_l+0x216>
 801149e:	2b10      	cmp	r3, #16
 80114a0:	bfde      	ittt	le
 80114a2:	9e08      	ldrle	r6, [sp, #32]
 80114a4:	434e      	mulle	r6, r1
 80114a6:	9608      	strle	r6, [sp, #32]
 80114a8:	e7e1      	b.n	801146e <_strtod_l+0x216>
 80114aa:	280f      	cmp	r0, #15
 80114ac:	dceb      	bgt.n	8011486 <_strtod_l+0x22e>
 80114ae:	9808      	ldr	r0, [sp, #32]
 80114b0:	230a      	movs	r3, #10
 80114b2:	fb03 2300 	mla	r3, r3, r0, r2
 80114b6:	9308      	str	r3, [sp, #32]
 80114b8:	e7e5      	b.n	8011486 <_strtod_l+0x22e>
 80114ba:	4629      	mov	r1, r5
 80114bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80114be:	1c50      	adds	r0, r2, #1
 80114c0:	9019      	str	r0, [sp, #100]	@ 0x64
 80114c2:	7852      	ldrb	r2, [r2, #1]
 80114c4:	4618      	mov	r0, r3
 80114c6:	460d      	mov	r5, r1
 80114c8:	e7b1      	b.n	801142e <_strtod_l+0x1d6>
 80114ca:	f04f 0900 	mov.w	r9, #0
 80114ce:	2301      	movs	r3, #1
 80114d0:	e77d      	b.n	80113ce <_strtod_l+0x176>
 80114d2:	f04f 0c00 	mov.w	ip, #0
 80114d6:	1ca2      	adds	r2, r4, #2
 80114d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80114da:	78a2      	ldrb	r2, [r4, #2]
 80114dc:	e785      	b.n	80113ea <_strtod_l+0x192>
 80114de:	f04f 0c01 	mov.w	ip, #1
 80114e2:	e7f8      	b.n	80114d6 <_strtod_l+0x27e>
 80114e4:	08013c58 	.word	0x08013c58
 80114e8:	08013c40 	.word	0x08013c40
 80114ec:	7ff00000 	.word	0x7ff00000
 80114f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80114f2:	1c51      	adds	r1, r2, #1
 80114f4:	9119      	str	r1, [sp, #100]	@ 0x64
 80114f6:	7852      	ldrb	r2, [r2, #1]
 80114f8:	2a30      	cmp	r2, #48	@ 0x30
 80114fa:	d0f9      	beq.n	80114f0 <_strtod_l+0x298>
 80114fc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011500:	2908      	cmp	r1, #8
 8011502:	f63f af78 	bhi.w	80113f6 <_strtod_l+0x19e>
 8011506:	3a30      	subs	r2, #48	@ 0x30
 8011508:	920e      	str	r2, [sp, #56]	@ 0x38
 801150a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801150c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801150e:	f04f 080a 	mov.w	r8, #10
 8011512:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011514:	1c56      	adds	r6, r2, #1
 8011516:	9619      	str	r6, [sp, #100]	@ 0x64
 8011518:	7852      	ldrb	r2, [r2, #1]
 801151a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801151e:	f1be 0f09 	cmp.w	lr, #9
 8011522:	d939      	bls.n	8011598 <_strtod_l+0x340>
 8011524:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011526:	1a76      	subs	r6, r6, r1
 8011528:	2e08      	cmp	r6, #8
 801152a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801152e:	dc03      	bgt.n	8011538 <_strtod_l+0x2e0>
 8011530:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011532:	4588      	cmp	r8, r1
 8011534:	bfa8      	it	ge
 8011536:	4688      	movge	r8, r1
 8011538:	f1bc 0f00 	cmp.w	ip, #0
 801153c:	d001      	beq.n	8011542 <_strtod_l+0x2ea>
 801153e:	f1c8 0800 	rsb	r8, r8, #0
 8011542:	2d00      	cmp	r5, #0
 8011544:	d14e      	bne.n	80115e4 <_strtod_l+0x38c>
 8011546:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011548:	4308      	orrs	r0, r1
 801154a:	f47f aebe 	bne.w	80112ca <_strtod_l+0x72>
 801154e:	2b00      	cmp	r3, #0
 8011550:	f47f aed6 	bne.w	8011300 <_strtod_l+0xa8>
 8011554:	2a69      	cmp	r2, #105	@ 0x69
 8011556:	d028      	beq.n	80115aa <_strtod_l+0x352>
 8011558:	dc25      	bgt.n	80115a6 <_strtod_l+0x34e>
 801155a:	2a49      	cmp	r2, #73	@ 0x49
 801155c:	d025      	beq.n	80115aa <_strtod_l+0x352>
 801155e:	2a4e      	cmp	r2, #78	@ 0x4e
 8011560:	f47f aece 	bne.w	8011300 <_strtod_l+0xa8>
 8011564:	499b      	ldr	r1, [pc, #620]	@ (80117d4 <_strtod_l+0x57c>)
 8011566:	a819      	add	r0, sp, #100	@ 0x64
 8011568:	f001 fdfa 	bl	8013160 <__match>
 801156c:	2800      	cmp	r0, #0
 801156e:	f43f aec7 	beq.w	8011300 <_strtod_l+0xa8>
 8011572:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011574:	781b      	ldrb	r3, [r3, #0]
 8011576:	2b28      	cmp	r3, #40	@ 0x28
 8011578:	d12e      	bne.n	80115d8 <_strtod_l+0x380>
 801157a:	4997      	ldr	r1, [pc, #604]	@ (80117d8 <_strtod_l+0x580>)
 801157c:	aa1c      	add	r2, sp, #112	@ 0x70
 801157e:	a819      	add	r0, sp, #100	@ 0x64
 8011580:	f001 fe02 	bl	8013188 <__hexnan>
 8011584:	2805      	cmp	r0, #5
 8011586:	d127      	bne.n	80115d8 <_strtod_l+0x380>
 8011588:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801158a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801158e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011592:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011596:	e698      	b.n	80112ca <_strtod_l+0x72>
 8011598:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801159a:	fb08 2101 	mla	r1, r8, r1, r2
 801159e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80115a2:	920e      	str	r2, [sp, #56]	@ 0x38
 80115a4:	e7b5      	b.n	8011512 <_strtod_l+0x2ba>
 80115a6:	2a6e      	cmp	r2, #110	@ 0x6e
 80115a8:	e7da      	b.n	8011560 <_strtod_l+0x308>
 80115aa:	498c      	ldr	r1, [pc, #560]	@ (80117dc <_strtod_l+0x584>)
 80115ac:	a819      	add	r0, sp, #100	@ 0x64
 80115ae:	f001 fdd7 	bl	8013160 <__match>
 80115b2:	2800      	cmp	r0, #0
 80115b4:	f43f aea4 	beq.w	8011300 <_strtod_l+0xa8>
 80115b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80115ba:	4989      	ldr	r1, [pc, #548]	@ (80117e0 <_strtod_l+0x588>)
 80115bc:	3b01      	subs	r3, #1
 80115be:	a819      	add	r0, sp, #100	@ 0x64
 80115c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80115c2:	f001 fdcd 	bl	8013160 <__match>
 80115c6:	b910      	cbnz	r0, 80115ce <_strtod_l+0x376>
 80115c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80115ca:	3301      	adds	r3, #1
 80115cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80115ce:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80117f0 <_strtod_l+0x598>
 80115d2:	f04f 0a00 	mov.w	sl, #0
 80115d6:	e678      	b.n	80112ca <_strtod_l+0x72>
 80115d8:	4882      	ldr	r0, [pc, #520]	@ (80117e4 <_strtod_l+0x58c>)
 80115da:	f001 fafd 	bl	8012bd8 <nan>
 80115de:	ec5b ab10 	vmov	sl, fp, d0
 80115e2:	e672      	b.n	80112ca <_strtod_l+0x72>
 80115e4:	eba8 0309 	sub.w	r3, r8, r9
 80115e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80115ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80115ec:	2f00      	cmp	r7, #0
 80115ee:	bf08      	it	eq
 80115f0:	462f      	moveq	r7, r5
 80115f2:	2d10      	cmp	r5, #16
 80115f4:	462c      	mov	r4, r5
 80115f6:	bfa8      	it	ge
 80115f8:	2410      	movge	r4, #16
 80115fa:	f7ee ff83 	bl	8000504 <__aeabi_ui2d>
 80115fe:	2d09      	cmp	r5, #9
 8011600:	4682      	mov	sl, r0
 8011602:	468b      	mov	fp, r1
 8011604:	dc13      	bgt.n	801162e <_strtod_l+0x3d6>
 8011606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011608:	2b00      	cmp	r3, #0
 801160a:	f43f ae5e 	beq.w	80112ca <_strtod_l+0x72>
 801160e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011610:	dd78      	ble.n	8011704 <_strtod_l+0x4ac>
 8011612:	2b16      	cmp	r3, #22
 8011614:	dc5f      	bgt.n	80116d6 <_strtod_l+0x47e>
 8011616:	4974      	ldr	r1, [pc, #464]	@ (80117e8 <_strtod_l+0x590>)
 8011618:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801161c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011620:	4652      	mov	r2, sl
 8011622:	465b      	mov	r3, fp
 8011624:	f7ee ffe8 	bl	80005f8 <__aeabi_dmul>
 8011628:	4682      	mov	sl, r0
 801162a:	468b      	mov	fp, r1
 801162c:	e64d      	b.n	80112ca <_strtod_l+0x72>
 801162e:	4b6e      	ldr	r3, [pc, #440]	@ (80117e8 <_strtod_l+0x590>)
 8011630:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011634:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011638:	f7ee ffde 	bl	80005f8 <__aeabi_dmul>
 801163c:	4682      	mov	sl, r0
 801163e:	9808      	ldr	r0, [sp, #32]
 8011640:	468b      	mov	fp, r1
 8011642:	f7ee ff5f 	bl	8000504 <__aeabi_ui2d>
 8011646:	4602      	mov	r2, r0
 8011648:	460b      	mov	r3, r1
 801164a:	4650      	mov	r0, sl
 801164c:	4659      	mov	r1, fp
 801164e:	f7ee fe1d 	bl	800028c <__adddf3>
 8011652:	2d0f      	cmp	r5, #15
 8011654:	4682      	mov	sl, r0
 8011656:	468b      	mov	fp, r1
 8011658:	ddd5      	ble.n	8011606 <_strtod_l+0x3ae>
 801165a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801165c:	1b2c      	subs	r4, r5, r4
 801165e:	441c      	add	r4, r3
 8011660:	2c00      	cmp	r4, #0
 8011662:	f340 8096 	ble.w	8011792 <_strtod_l+0x53a>
 8011666:	f014 030f 	ands.w	r3, r4, #15
 801166a:	d00a      	beq.n	8011682 <_strtod_l+0x42a>
 801166c:	495e      	ldr	r1, [pc, #376]	@ (80117e8 <_strtod_l+0x590>)
 801166e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011672:	4652      	mov	r2, sl
 8011674:	465b      	mov	r3, fp
 8011676:	e9d1 0100 	ldrd	r0, r1, [r1]
 801167a:	f7ee ffbd 	bl	80005f8 <__aeabi_dmul>
 801167e:	4682      	mov	sl, r0
 8011680:	468b      	mov	fp, r1
 8011682:	f034 040f 	bics.w	r4, r4, #15
 8011686:	d073      	beq.n	8011770 <_strtod_l+0x518>
 8011688:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801168c:	dd48      	ble.n	8011720 <_strtod_l+0x4c8>
 801168e:	2400      	movs	r4, #0
 8011690:	46a0      	mov	r8, r4
 8011692:	940a      	str	r4, [sp, #40]	@ 0x28
 8011694:	46a1      	mov	r9, r4
 8011696:	9a05      	ldr	r2, [sp, #20]
 8011698:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80117f0 <_strtod_l+0x598>
 801169c:	2322      	movs	r3, #34	@ 0x22
 801169e:	6013      	str	r3, [r2, #0]
 80116a0:	f04f 0a00 	mov.w	sl, #0
 80116a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	f43f ae0f 	beq.w	80112ca <_strtod_l+0x72>
 80116ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80116ae:	9805      	ldr	r0, [sp, #20]
 80116b0:	f7ff f942 	bl	8010938 <_Bfree>
 80116b4:	9805      	ldr	r0, [sp, #20]
 80116b6:	4649      	mov	r1, r9
 80116b8:	f7ff f93e 	bl	8010938 <_Bfree>
 80116bc:	9805      	ldr	r0, [sp, #20]
 80116be:	4641      	mov	r1, r8
 80116c0:	f7ff f93a 	bl	8010938 <_Bfree>
 80116c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80116c6:	9805      	ldr	r0, [sp, #20]
 80116c8:	f7ff f936 	bl	8010938 <_Bfree>
 80116cc:	9805      	ldr	r0, [sp, #20]
 80116ce:	4621      	mov	r1, r4
 80116d0:	f7ff f932 	bl	8010938 <_Bfree>
 80116d4:	e5f9      	b.n	80112ca <_strtod_l+0x72>
 80116d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80116d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80116dc:	4293      	cmp	r3, r2
 80116de:	dbbc      	blt.n	801165a <_strtod_l+0x402>
 80116e0:	4c41      	ldr	r4, [pc, #260]	@ (80117e8 <_strtod_l+0x590>)
 80116e2:	f1c5 050f 	rsb	r5, r5, #15
 80116e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80116ea:	4652      	mov	r2, sl
 80116ec:	465b      	mov	r3, fp
 80116ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116f2:	f7ee ff81 	bl	80005f8 <__aeabi_dmul>
 80116f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116f8:	1b5d      	subs	r5, r3, r5
 80116fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80116fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011702:	e78f      	b.n	8011624 <_strtod_l+0x3cc>
 8011704:	3316      	adds	r3, #22
 8011706:	dba8      	blt.n	801165a <_strtod_l+0x402>
 8011708:	4b37      	ldr	r3, [pc, #220]	@ (80117e8 <_strtod_l+0x590>)
 801170a:	eba9 0808 	sub.w	r8, r9, r8
 801170e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011712:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011716:	4650      	mov	r0, sl
 8011718:	4659      	mov	r1, fp
 801171a:	f7ef f897 	bl	800084c <__aeabi_ddiv>
 801171e:	e783      	b.n	8011628 <_strtod_l+0x3d0>
 8011720:	4b32      	ldr	r3, [pc, #200]	@ (80117ec <_strtod_l+0x594>)
 8011722:	9308      	str	r3, [sp, #32]
 8011724:	2300      	movs	r3, #0
 8011726:	1124      	asrs	r4, r4, #4
 8011728:	4650      	mov	r0, sl
 801172a:	4659      	mov	r1, fp
 801172c:	461e      	mov	r6, r3
 801172e:	2c01      	cmp	r4, #1
 8011730:	dc21      	bgt.n	8011776 <_strtod_l+0x51e>
 8011732:	b10b      	cbz	r3, 8011738 <_strtod_l+0x4e0>
 8011734:	4682      	mov	sl, r0
 8011736:	468b      	mov	fp, r1
 8011738:	492c      	ldr	r1, [pc, #176]	@ (80117ec <_strtod_l+0x594>)
 801173a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801173e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011742:	4652      	mov	r2, sl
 8011744:	465b      	mov	r3, fp
 8011746:	e9d1 0100 	ldrd	r0, r1, [r1]
 801174a:	f7ee ff55 	bl	80005f8 <__aeabi_dmul>
 801174e:	4b28      	ldr	r3, [pc, #160]	@ (80117f0 <_strtod_l+0x598>)
 8011750:	460a      	mov	r2, r1
 8011752:	400b      	ands	r3, r1
 8011754:	4927      	ldr	r1, [pc, #156]	@ (80117f4 <_strtod_l+0x59c>)
 8011756:	428b      	cmp	r3, r1
 8011758:	4682      	mov	sl, r0
 801175a:	d898      	bhi.n	801168e <_strtod_l+0x436>
 801175c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011760:	428b      	cmp	r3, r1
 8011762:	bf86      	itte	hi
 8011764:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80117f8 <_strtod_l+0x5a0>
 8011768:	f04f 3aff 	movhi.w	sl, #4294967295
 801176c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011770:	2300      	movs	r3, #0
 8011772:	9308      	str	r3, [sp, #32]
 8011774:	e07a      	b.n	801186c <_strtod_l+0x614>
 8011776:	07e2      	lsls	r2, r4, #31
 8011778:	d505      	bpl.n	8011786 <_strtod_l+0x52e>
 801177a:	9b08      	ldr	r3, [sp, #32]
 801177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011780:	f7ee ff3a 	bl	80005f8 <__aeabi_dmul>
 8011784:	2301      	movs	r3, #1
 8011786:	9a08      	ldr	r2, [sp, #32]
 8011788:	3208      	adds	r2, #8
 801178a:	3601      	adds	r6, #1
 801178c:	1064      	asrs	r4, r4, #1
 801178e:	9208      	str	r2, [sp, #32]
 8011790:	e7cd      	b.n	801172e <_strtod_l+0x4d6>
 8011792:	d0ed      	beq.n	8011770 <_strtod_l+0x518>
 8011794:	4264      	negs	r4, r4
 8011796:	f014 020f 	ands.w	r2, r4, #15
 801179a:	d00a      	beq.n	80117b2 <_strtod_l+0x55a>
 801179c:	4b12      	ldr	r3, [pc, #72]	@ (80117e8 <_strtod_l+0x590>)
 801179e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80117a2:	4650      	mov	r0, sl
 80117a4:	4659      	mov	r1, fp
 80117a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117aa:	f7ef f84f 	bl	800084c <__aeabi_ddiv>
 80117ae:	4682      	mov	sl, r0
 80117b0:	468b      	mov	fp, r1
 80117b2:	1124      	asrs	r4, r4, #4
 80117b4:	d0dc      	beq.n	8011770 <_strtod_l+0x518>
 80117b6:	2c1f      	cmp	r4, #31
 80117b8:	dd20      	ble.n	80117fc <_strtod_l+0x5a4>
 80117ba:	2400      	movs	r4, #0
 80117bc:	46a0      	mov	r8, r4
 80117be:	940a      	str	r4, [sp, #40]	@ 0x28
 80117c0:	46a1      	mov	r9, r4
 80117c2:	9a05      	ldr	r2, [sp, #20]
 80117c4:	2322      	movs	r3, #34	@ 0x22
 80117c6:	f04f 0a00 	mov.w	sl, #0
 80117ca:	f04f 0b00 	mov.w	fp, #0
 80117ce:	6013      	str	r3, [r2, #0]
 80117d0:	e768      	b.n	80116a4 <_strtod_l+0x44c>
 80117d2:	bf00      	nop
 80117d4:	08013a32 	.word	0x08013a32
 80117d8:	08013c44 	.word	0x08013c44
 80117dc:	08013a2a 	.word	0x08013a2a
 80117e0:	08013a5f 	.word	0x08013a5f
 80117e4:	08013d07 	.word	0x08013d07
 80117e8:	08013b78 	.word	0x08013b78
 80117ec:	08013b50 	.word	0x08013b50
 80117f0:	7ff00000 	.word	0x7ff00000
 80117f4:	7ca00000 	.word	0x7ca00000
 80117f8:	7fefffff 	.word	0x7fefffff
 80117fc:	f014 0310 	ands.w	r3, r4, #16
 8011800:	bf18      	it	ne
 8011802:	236a      	movne	r3, #106	@ 0x6a
 8011804:	4ea9      	ldr	r6, [pc, #676]	@ (8011aac <_strtod_l+0x854>)
 8011806:	9308      	str	r3, [sp, #32]
 8011808:	4650      	mov	r0, sl
 801180a:	4659      	mov	r1, fp
 801180c:	2300      	movs	r3, #0
 801180e:	07e2      	lsls	r2, r4, #31
 8011810:	d504      	bpl.n	801181c <_strtod_l+0x5c4>
 8011812:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011816:	f7ee feef 	bl	80005f8 <__aeabi_dmul>
 801181a:	2301      	movs	r3, #1
 801181c:	1064      	asrs	r4, r4, #1
 801181e:	f106 0608 	add.w	r6, r6, #8
 8011822:	d1f4      	bne.n	801180e <_strtod_l+0x5b6>
 8011824:	b10b      	cbz	r3, 801182a <_strtod_l+0x5d2>
 8011826:	4682      	mov	sl, r0
 8011828:	468b      	mov	fp, r1
 801182a:	9b08      	ldr	r3, [sp, #32]
 801182c:	b1b3      	cbz	r3, 801185c <_strtod_l+0x604>
 801182e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011832:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011836:	2b00      	cmp	r3, #0
 8011838:	4659      	mov	r1, fp
 801183a:	dd0f      	ble.n	801185c <_strtod_l+0x604>
 801183c:	2b1f      	cmp	r3, #31
 801183e:	dd55      	ble.n	80118ec <_strtod_l+0x694>
 8011840:	2b34      	cmp	r3, #52	@ 0x34
 8011842:	bfde      	ittt	le
 8011844:	f04f 33ff 	movle.w	r3, #4294967295
 8011848:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801184c:	4093      	lslle	r3, r2
 801184e:	f04f 0a00 	mov.w	sl, #0
 8011852:	bfcc      	ite	gt
 8011854:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011858:	ea03 0b01 	andle.w	fp, r3, r1
 801185c:	2200      	movs	r2, #0
 801185e:	2300      	movs	r3, #0
 8011860:	4650      	mov	r0, sl
 8011862:	4659      	mov	r1, fp
 8011864:	f7ef f930 	bl	8000ac8 <__aeabi_dcmpeq>
 8011868:	2800      	cmp	r0, #0
 801186a:	d1a6      	bne.n	80117ba <_strtod_l+0x562>
 801186c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801186e:	9300      	str	r3, [sp, #0]
 8011870:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011872:	9805      	ldr	r0, [sp, #20]
 8011874:	462b      	mov	r3, r5
 8011876:	463a      	mov	r2, r7
 8011878:	f7ff f8c6 	bl	8010a08 <__s2b>
 801187c:	900a      	str	r0, [sp, #40]	@ 0x28
 801187e:	2800      	cmp	r0, #0
 8011880:	f43f af05 	beq.w	801168e <_strtod_l+0x436>
 8011884:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011886:	2a00      	cmp	r2, #0
 8011888:	eba9 0308 	sub.w	r3, r9, r8
 801188c:	bfa8      	it	ge
 801188e:	2300      	movge	r3, #0
 8011890:	9312      	str	r3, [sp, #72]	@ 0x48
 8011892:	2400      	movs	r4, #0
 8011894:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011898:	9316      	str	r3, [sp, #88]	@ 0x58
 801189a:	46a0      	mov	r8, r4
 801189c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801189e:	9805      	ldr	r0, [sp, #20]
 80118a0:	6859      	ldr	r1, [r3, #4]
 80118a2:	f7ff f809 	bl	80108b8 <_Balloc>
 80118a6:	4681      	mov	r9, r0
 80118a8:	2800      	cmp	r0, #0
 80118aa:	f43f aef4 	beq.w	8011696 <_strtod_l+0x43e>
 80118ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80118b0:	691a      	ldr	r2, [r3, #16]
 80118b2:	3202      	adds	r2, #2
 80118b4:	f103 010c 	add.w	r1, r3, #12
 80118b8:	0092      	lsls	r2, r2, #2
 80118ba:	300c      	adds	r0, #12
 80118bc:	f7fe f89b 	bl	800f9f6 <memcpy>
 80118c0:	ec4b ab10 	vmov	d0, sl, fp
 80118c4:	9805      	ldr	r0, [sp, #20]
 80118c6:	aa1c      	add	r2, sp, #112	@ 0x70
 80118c8:	a91b      	add	r1, sp, #108	@ 0x6c
 80118ca:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80118ce:	f7ff fbd7 	bl	8011080 <__d2b>
 80118d2:	901a      	str	r0, [sp, #104]	@ 0x68
 80118d4:	2800      	cmp	r0, #0
 80118d6:	f43f aede 	beq.w	8011696 <_strtod_l+0x43e>
 80118da:	9805      	ldr	r0, [sp, #20]
 80118dc:	2101      	movs	r1, #1
 80118de:	f7ff f929 	bl	8010b34 <__i2b>
 80118e2:	4680      	mov	r8, r0
 80118e4:	b948      	cbnz	r0, 80118fa <_strtod_l+0x6a2>
 80118e6:	f04f 0800 	mov.w	r8, #0
 80118ea:	e6d4      	b.n	8011696 <_strtod_l+0x43e>
 80118ec:	f04f 32ff 	mov.w	r2, #4294967295
 80118f0:	fa02 f303 	lsl.w	r3, r2, r3
 80118f4:	ea03 0a0a 	and.w	sl, r3, sl
 80118f8:	e7b0      	b.n	801185c <_strtod_l+0x604>
 80118fa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80118fc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80118fe:	2d00      	cmp	r5, #0
 8011900:	bfab      	itete	ge
 8011902:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011904:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011906:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011908:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801190a:	bfac      	ite	ge
 801190c:	18ef      	addge	r7, r5, r3
 801190e:	1b5e      	sublt	r6, r3, r5
 8011910:	9b08      	ldr	r3, [sp, #32]
 8011912:	1aed      	subs	r5, r5, r3
 8011914:	4415      	add	r5, r2
 8011916:	4b66      	ldr	r3, [pc, #408]	@ (8011ab0 <_strtod_l+0x858>)
 8011918:	3d01      	subs	r5, #1
 801191a:	429d      	cmp	r5, r3
 801191c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011920:	da50      	bge.n	80119c4 <_strtod_l+0x76c>
 8011922:	1b5b      	subs	r3, r3, r5
 8011924:	2b1f      	cmp	r3, #31
 8011926:	eba2 0203 	sub.w	r2, r2, r3
 801192a:	f04f 0101 	mov.w	r1, #1
 801192e:	dc3d      	bgt.n	80119ac <_strtod_l+0x754>
 8011930:	fa01 f303 	lsl.w	r3, r1, r3
 8011934:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011936:	2300      	movs	r3, #0
 8011938:	9310      	str	r3, [sp, #64]	@ 0x40
 801193a:	18bd      	adds	r5, r7, r2
 801193c:	9b08      	ldr	r3, [sp, #32]
 801193e:	42af      	cmp	r7, r5
 8011940:	4416      	add	r6, r2
 8011942:	441e      	add	r6, r3
 8011944:	463b      	mov	r3, r7
 8011946:	bfa8      	it	ge
 8011948:	462b      	movge	r3, r5
 801194a:	42b3      	cmp	r3, r6
 801194c:	bfa8      	it	ge
 801194e:	4633      	movge	r3, r6
 8011950:	2b00      	cmp	r3, #0
 8011952:	bfc2      	ittt	gt
 8011954:	1aed      	subgt	r5, r5, r3
 8011956:	1af6      	subgt	r6, r6, r3
 8011958:	1aff      	subgt	r7, r7, r3
 801195a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801195c:	2b00      	cmp	r3, #0
 801195e:	dd16      	ble.n	801198e <_strtod_l+0x736>
 8011960:	4641      	mov	r1, r8
 8011962:	9805      	ldr	r0, [sp, #20]
 8011964:	461a      	mov	r2, r3
 8011966:	f7ff f9a5 	bl	8010cb4 <__pow5mult>
 801196a:	4680      	mov	r8, r0
 801196c:	2800      	cmp	r0, #0
 801196e:	d0ba      	beq.n	80118e6 <_strtod_l+0x68e>
 8011970:	4601      	mov	r1, r0
 8011972:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011974:	9805      	ldr	r0, [sp, #20]
 8011976:	f7ff f8f3 	bl	8010b60 <__multiply>
 801197a:	900e      	str	r0, [sp, #56]	@ 0x38
 801197c:	2800      	cmp	r0, #0
 801197e:	f43f ae8a 	beq.w	8011696 <_strtod_l+0x43e>
 8011982:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011984:	9805      	ldr	r0, [sp, #20]
 8011986:	f7fe ffd7 	bl	8010938 <_Bfree>
 801198a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801198c:	931a      	str	r3, [sp, #104]	@ 0x68
 801198e:	2d00      	cmp	r5, #0
 8011990:	dc1d      	bgt.n	80119ce <_strtod_l+0x776>
 8011992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011994:	2b00      	cmp	r3, #0
 8011996:	dd23      	ble.n	80119e0 <_strtod_l+0x788>
 8011998:	4649      	mov	r1, r9
 801199a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801199c:	9805      	ldr	r0, [sp, #20]
 801199e:	f7ff f989 	bl	8010cb4 <__pow5mult>
 80119a2:	4681      	mov	r9, r0
 80119a4:	b9e0      	cbnz	r0, 80119e0 <_strtod_l+0x788>
 80119a6:	f04f 0900 	mov.w	r9, #0
 80119aa:	e674      	b.n	8011696 <_strtod_l+0x43e>
 80119ac:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80119b0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80119b4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80119b8:	35e2      	adds	r5, #226	@ 0xe2
 80119ba:	fa01 f305 	lsl.w	r3, r1, r5
 80119be:	9310      	str	r3, [sp, #64]	@ 0x40
 80119c0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80119c2:	e7ba      	b.n	801193a <_strtod_l+0x6e2>
 80119c4:	2300      	movs	r3, #0
 80119c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80119c8:	2301      	movs	r3, #1
 80119ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 80119cc:	e7b5      	b.n	801193a <_strtod_l+0x6e2>
 80119ce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80119d0:	9805      	ldr	r0, [sp, #20]
 80119d2:	462a      	mov	r2, r5
 80119d4:	f7ff f9c8 	bl	8010d68 <__lshift>
 80119d8:	901a      	str	r0, [sp, #104]	@ 0x68
 80119da:	2800      	cmp	r0, #0
 80119dc:	d1d9      	bne.n	8011992 <_strtod_l+0x73a>
 80119de:	e65a      	b.n	8011696 <_strtod_l+0x43e>
 80119e0:	2e00      	cmp	r6, #0
 80119e2:	dd07      	ble.n	80119f4 <_strtod_l+0x79c>
 80119e4:	4649      	mov	r1, r9
 80119e6:	9805      	ldr	r0, [sp, #20]
 80119e8:	4632      	mov	r2, r6
 80119ea:	f7ff f9bd 	bl	8010d68 <__lshift>
 80119ee:	4681      	mov	r9, r0
 80119f0:	2800      	cmp	r0, #0
 80119f2:	d0d8      	beq.n	80119a6 <_strtod_l+0x74e>
 80119f4:	2f00      	cmp	r7, #0
 80119f6:	dd08      	ble.n	8011a0a <_strtod_l+0x7b2>
 80119f8:	4641      	mov	r1, r8
 80119fa:	9805      	ldr	r0, [sp, #20]
 80119fc:	463a      	mov	r2, r7
 80119fe:	f7ff f9b3 	bl	8010d68 <__lshift>
 8011a02:	4680      	mov	r8, r0
 8011a04:	2800      	cmp	r0, #0
 8011a06:	f43f ae46 	beq.w	8011696 <_strtod_l+0x43e>
 8011a0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011a0c:	9805      	ldr	r0, [sp, #20]
 8011a0e:	464a      	mov	r2, r9
 8011a10:	f7ff fa32 	bl	8010e78 <__mdiff>
 8011a14:	4604      	mov	r4, r0
 8011a16:	2800      	cmp	r0, #0
 8011a18:	f43f ae3d 	beq.w	8011696 <_strtod_l+0x43e>
 8011a1c:	68c3      	ldr	r3, [r0, #12]
 8011a1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011a20:	2300      	movs	r3, #0
 8011a22:	60c3      	str	r3, [r0, #12]
 8011a24:	4641      	mov	r1, r8
 8011a26:	f7ff fa0b 	bl	8010e40 <__mcmp>
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	da46      	bge.n	8011abc <_strtod_l+0x864>
 8011a2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a30:	ea53 030a 	orrs.w	r3, r3, sl
 8011a34:	d16c      	bne.n	8011b10 <_strtod_l+0x8b8>
 8011a36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d168      	bne.n	8011b10 <_strtod_l+0x8b8>
 8011a3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011a42:	0d1b      	lsrs	r3, r3, #20
 8011a44:	051b      	lsls	r3, r3, #20
 8011a46:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011a4a:	d961      	bls.n	8011b10 <_strtod_l+0x8b8>
 8011a4c:	6963      	ldr	r3, [r4, #20]
 8011a4e:	b913      	cbnz	r3, 8011a56 <_strtod_l+0x7fe>
 8011a50:	6923      	ldr	r3, [r4, #16]
 8011a52:	2b01      	cmp	r3, #1
 8011a54:	dd5c      	ble.n	8011b10 <_strtod_l+0x8b8>
 8011a56:	4621      	mov	r1, r4
 8011a58:	2201      	movs	r2, #1
 8011a5a:	9805      	ldr	r0, [sp, #20]
 8011a5c:	f7ff f984 	bl	8010d68 <__lshift>
 8011a60:	4641      	mov	r1, r8
 8011a62:	4604      	mov	r4, r0
 8011a64:	f7ff f9ec 	bl	8010e40 <__mcmp>
 8011a68:	2800      	cmp	r0, #0
 8011a6a:	dd51      	ble.n	8011b10 <_strtod_l+0x8b8>
 8011a6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011a70:	9a08      	ldr	r2, [sp, #32]
 8011a72:	0d1b      	lsrs	r3, r3, #20
 8011a74:	051b      	lsls	r3, r3, #20
 8011a76:	2a00      	cmp	r2, #0
 8011a78:	d06b      	beq.n	8011b52 <_strtod_l+0x8fa>
 8011a7a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011a7e:	d868      	bhi.n	8011b52 <_strtod_l+0x8fa>
 8011a80:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011a84:	f67f ae9d 	bls.w	80117c2 <_strtod_l+0x56a>
 8011a88:	4b0a      	ldr	r3, [pc, #40]	@ (8011ab4 <_strtod_l+0x85c>)
 8011a8a:	4650      	mov	r0, sl
 8011a8c:	4659      	mov	r1, fp
 8011a8e:	2200      	movs	r2, #0
 8011a90:	f7ee fdb2 	bl	80005f8 <__aeabi_dmul>
 8011a94:	4b08      	ldr	r3, [pc, #32]	@ (8011ab8 <_strtod_l+0x860>)
 8011a96:	400b      	ands	r3, r1
 8011a98:	4682      	mov	sl, r0
 8011a9a:	468b      	mov	fp, r1
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	f47f ae05 	bne.w	80116ac <_strtod_l+0x454>
 8011aa2:	9a05      	ldr	r2, [sp, #20]
 8011aa4:	2322      	movs	r3, #34	@ 0x22
 8011aa6:	6013      	str	r3, [r2, #0]
 8011aa8:	e600      	b.n	80116ac <_strtod_l+0x454>
 8011aaa:	bf00      	nop
 8011aac:	08013c70 	.word	0x08013c70
 8011ab0:	fffffc02 	.word	0xfffffc02
 8011ab4:	39500000 	.word	0x39500000
 8011ab8:	7ff00000 	.word	0x7ff00000
 8011abc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011ac0:	d165      	bne.n	8011b8e <_strtod_l+0x936>
 8011ac2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011ac4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011ac8:	b35a      	cbz	r2, 8011b22 <_strtod_l+0x8ca>
 8011aca:	4a9f      	ldr	r2, [pc, #636]	@ (8011d48 <_strtod_l+0xaf0>)
 8011acc:	4293      	cmp	r3, r2
 8011ace:	d12b      	bne.n	8011b28 <_strtod_l+0x8d0>
 8011ad0:	9b08      	ldr	r3, [sp, #32]
 8011ad2:	4651      	mov	r1, sl
 8011ad4:	b303      	cbz	r3, 8011b18 <_strtod_l+0x8c0>
 8011ad6:	4b9d      	ldr	r3, [pc, #628]	@ (8011d4c <_strtod_l+0xaf4>)
 8011ad8:	465a      	mov	r2, fp
 8011ada:	4013      	ands	r3, r2
 8011adc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8011ae4:	d81b      	bhi.n	8011b1e <_strtod_l+0x8c6>
 8011ae6:	0d1b      	lsrs	r3, r3, #20
 8011ae8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011aec:	fa02 f303 	lsl.w	r3, r2, r3
 8011af0:	4299      	cmp	r1, r3
 8011af2:	d119      	bne.n	8011b28 <_strtod_l+0x8d0>
 8011af4:	4b96      	ldr	r3, [pc, #600]	@ (8011d50 <_strtod_l+0xaf8>)
 8011af6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011af8:	429a      	cmp	r2, r3
 8011afa:	d102      	bne.n	8011b02 <_strtod_l+0x8aa>
 8011afc:	3101      	adds	r1, #1
 8011afe:	f43f adca 	beq.w	8011696 <_strtod_l+0x43e>
 8011b02:	4b92      	ldr	r3, [pc, #584]	@ (8011d4c <_strtod_l+0xaf4>)
 8011b04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011b06:	401a      	ands	r2, r3
 8011b08:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011b0c:	f04f 0a00 	mov.w	sl, #0
 8011b10:	9b08      	ldr	r3, [sp, #32]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d1b8      	bne.n	8011a88 <_strtod_l+0x830>
 8011b16:	e5c9      	b.n	80116ac <_strtod_l+0x454>
 8011b18:	f04f 33ff 	mov.w	r3, #4294967295
 8011b1c:	e7e8      	b.n	8011af0 <_strtod_l+0x898>
 8011b1e:	4613      	mov	r3, r2
 8011b20:	e7e6      	b.n	8011af0 <_strtod_l+0x898>
 8011b22:	ea53 030a 	orrs.w	r3, r3, sl
 8011b26:	d0a1      	beq.n	8011a6c <_strtod_l+0x814>
 8011b28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011b2a:	b1db      	cbz	r3, 8011b64 <_strtod_l+0x90c>
 8011b2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011b2e:	4213      	tst	r3, r2
 8011b30:	d0ee      	beq.n	8011b10 <_strtod_l+0x8b8>
 8011b32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b34:	9a08      	ldr	r2, [sp, #32]
 8011b36:	4650      	mov	r0, sl
 8011b38:	4659      	mov	r1, fp
 8011b3a:	b1bb      	cbz	r3, 8011b6c <_strtod_l+0x914>
 8011b3c:	f7ff fb6e 	bl	801121c <sulp>
 8011b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011b44:	ec53 2b10 	vmov	r2, r3, d0
 8011b48:	f7ee fba0 	bl	800028c <__adddf3>
 8011b4c:	4682      	mov	sl, r0
 8011b4e:	468b      	mov	fp, r1
 8011b50:	e7de      	b.n	8011b10 <_strtod_l+0x8b8>
 8011b52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011b56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011b5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011b5e:	f04f 3aff 	mov.w	sl, #4294967295
 8011b62:	e7d5      	b.n	8011b10 <_strtod_l+0x8b8>
 8011b64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011b66:	ea13 0f0a 	tst.w	r3, sl
 8011b6a:	e7e1      	b.n	8011b30 <_strtod_l+0x8d8>
 8011b6c:	f7ff fb56 	bl	801121c <sulp>
 8011b70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011b74:	ec53 2b10 	vmov	r2, r3, d0
 8011b78:	f7ee fb86 	bl	8000288 <__aeabi_dsub>
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	2300      	movs	r3, #0
 8011b80:	4682      	mov	sl, r0
 8011b82:	468b      	mov	fp, r1
 8011b84:	f7ee ffa0 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b88:	2800      	cmp	r0, #0
 8011b8a:	d0c1      	beq.n	8011b10 <_strtod_l+0x8b8>
 8011b8c:	e619      	b.n	80117c2 <_strtod_l+0x56a>
 8011b8e:	4641      	mov	r1, r8
 8011b90:	4620      	mov	r0, r4
 8011b92:	f7ff facd 	bl	8011130 <__ratio>
 8011b96:	ec57 6b10 	vmov	r6, r7, d0
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011ba0:	4630      	mov	r0, r6
 8011ba2:	4639      	mov	r1, r7
 8011ba4:	f7ee ffa4 	bl	8000af0 <__aeabi_dcmple>
 8011ba8:	2800      	cmp	r0, #0
 8011baa:	d06f      	beq.n	8011c8c <_strtod_l+0xa34>
 8011bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d17a      	bne.n	8011ca8 <_strtod_l+0xa50>
 8011bb2:	f1ba 0f00 	cmp.w	sl, #0
 8011bb6:	d158      	bne.n	8011c6a <_strtod_l+0xa12>
 8011bb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d15a      	bne.n	8011c78 <_strtod_l+0xa20>
 8011bc2:	4b64      	ldr	r3, [pc, #400]	@ (8011d54 <_strtod_l+0xafc>)
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	4630      	mov	r0, r6
 8011bc8:	4639      	mov	r1, r7
 8011bca:	f7ee ff87 	bl	8000adc <__aeabi_dcmplt>
 8011bce:	2800      	cmp	r0, #0
 8011bd0:	d159      	bne.n	8011c86 <_strtod_l+0xa2e>
 8011bd2:	4630      	mov	r0, r6
 8011bd4:	4639      	mov	r1, r7
 8011bd6:	4b60      	ldr	r3, [pc, #384]	@ (8011d58 <_strtod_l+0xb00>)
 8011bd8:	2200      	movs	r2, #0
 8011bda:	f7ee fd0d 	bl	80005f8 <__aeabi_dmul>
 8011bde:	4606      	mov	r6, r0
 8011be0:	460f      	mov	r7, r1
 8011be2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011be6:	9606      	str	r6, [sp, #24]
 8011be8:	9307      	str	r3, [sp, #28]
 8011bea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011bee:	4d57      	ldr	r5, [pc, #348]	@ (8011d4c <_strtod_l+0xaf4>)
 8011bf0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011bf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bf6:	401d      	ands	r5, r3
 8011bf8:	4b58      	ldr	r3, [pc, #352]	@ (8011d5c <_strtod_l+0xb04>)
 8011bfa:	429d      	cmp	r5, r3
 8011bfc:	f040 80b2 	bne.w	8011d64 <_strtod_l+0xb0c>
 8011c00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c02:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011c06:	ec4b ab10 	vmov	d0, sl, fp
 8011c0a:	f7ff f9c9 	bl	8010fa0 <__ulp>
 8011c0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011c12:	ec51 0b10 	vmov	r0, r1, d0
 8011c16:	f7ee fcef 	bl	80005f8 <__aeabi_dmul>
 8011c1a:	4652      	mov	r2, sl
 8011c1c:	465b      	mov	r3, fp
 8011c1e:	f7ee fb35 	bl	800028c <__adddf3>
 8011c22:	460b      	mov	r3, r1
 8011c24:	4949      	ldr	r1, [pc, #292]	@ (8011d4c <_strtod_l+0xaf4>)
 8011c26:	4a4e      	ldr	r2, [pc, #312]	@ (8011d60 <_strtod_l+0xb08>)
 8011c28:	4019      	ands	r1, r3
 8011c2a:	4291      	cmp	r1, r2
 8011c2c:	4682      	mov	sl, r0
 8011c2e:	d942      	bls.n	8011cb6 <_strtod_l+0xa5e>
 8011c30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011c32:	4b47      	ldr	r3, [pc, #284]	@ (8011d50 <_strtod_l+0xaf8>)
 8011c34:	429a      	cmp	r2, r3
 8011c36:	d103      	bne.n	8011c40 <_strtod_l+0x9e8>
 8011c38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c3a:	3301      	adds	r3, #1
 8011c3c:	f43f ad2b 	beq.w	8011696 <_strtod_l+0x43e>
 8011c40:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011d50 <_strtod_l+0xaf8>
 8011c44:	f04f 3aff 	mov.w	sl, #4294967295
 8011c48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011c4a:	9805      	ldr	r0, [sp, #20]
 8011c4c:	f7fe fe74 	bl	8010938 <_Bfree>
 8011c50:	9805      	ldr	r0, [sp, #20]
 8011c52:	4649      	mov	r1, r9
 8011c54:	f7fe fe70 	bl	8010938 <_Bfree>
 8011c58:	9805      	ldr	r0, [sp, #20]
 8011c5a:	4641      	mov	r1, r8
 8011c5c:	f7fe fe6c 	bl	8010938 <_Bfree>
 8011c60:	9805      	ldr	r0, [sp, #20]
 8011c62:	4621      	mov	r1, r4
 8011c64:	f7fe fe68 	bl	8010938 <_Bfree>
 8011c68:	e618      	b.n	801189c <_strtod_l+0x644>
 8011c6a:	f1ba 0f01 	cmp.w	sl, #1
 8011c6e:	d103      	bne.n	8011c78 <_strtod_l+0xa20>
 8011c70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	f43f ada5 	beq.w	80117c2 <_strtod_l+0x56a>
 8011c78:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011d28 <_strtod_l+0xad0>
 8011c7c:	4f35      	ldr	r7, [pc, #212]	@ (8011d54 <_strtod_l+0xafc>)
 8011c7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011c82:	2600      	movs	r6, #0
 8011c84:	e7b1      	b.n	8011bea <_strtod_l+0x992>
 8011c86:	4f34      	ldr	r7, [pc, #208]	@ (8011d58 <_strtod_l+0xb00>)
 8011c88:	2600      	movs	r6, #0
 8011c8a:	e7aa      	b.n	8011be2 <_strtod_l+0x98a>
 8011c8c:	4b32      	ldr	r3, [pc, #200]	@ (8011d58 <_strtod_l+0xb00>)
 8011c8e:	4630      	mov	r0, r6
 8011c90:	4639      	mov	r1, r7
 8011c92:	2200      	movs	r2, #0
 8011c94:	f7ee fcb0 	bl	80005f8 <__aeabi_dmul>
 8011c98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c9a:	4606      	mov	r6, r0
 8011c9c:	460f      	mov	r7, r1
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d09f      	beq.n	8011be2 <_strtod_l+0x98a>
 8011ca2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011ca6:	e7a0      	b.n	8011bea <_strtod_l+0x992>
 8011ca8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011d30 <_strtod_l+0xad8>
 8011cac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011cb0:	ec57 6b17 	vmov	r6, r7, d7
 8011cb4:	e799      	b.n	8011bea <_strtod_l+0x992>
 8011cb6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011cba:	9b08      	ldr	r3, [sp, #32]
 8011cbc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d1c1      	bne.n	8011c48 <_strtod_l+0x9f0>
 8011cc4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011cc8:	0d1b      	lsrs	r3, r3, #20
 8011cca:	051b      	lsls	r3, r3, #20
 8011ccc:	429d      	cmp	r5, r3
 8011cce:	d1bb      	bne.n	8011c48 <_strtod_l+0x9f0>
 8011cd0:	4630      	mov	r0, r6
 8011cd2:	4639      	mov	r1, r7
 8011cd4:	f7ee ffd8 	bl	8000c88 <__aeabi_d2lz>
 8011cd8:	f7ee fc60 	bl	800059c <__aeabi_l2d>
 8011cdc:	4602      	mov	r2, r0
 8011cde:	460b      	mov	r3, r1
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	4639      	mov	r1, r7
 8011ce4:	f7ee fad0 	bl	8000288 <__aeabi_dsub>
 8011ce8:	460b      	mov	r3, r1
 8011cea:	4602      	mov	r2, r0
 8011cec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011cf0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011cf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cf6:	ea46 060a 	orr.w	r6, r6, sl
 8011cfa:	431e      	orrs	r6, r3
 8011cfc:	d06f      	beq.n	8011dde <_strtod_l+0xb86>
 8011cfe:	a30e      	add	r3, pc, #56	@ (adr r3, 8011d38 <_strtod_l+0xae0>)
 8011d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d04:	f7ee feea 	bl	8000adc <__aeabi_dcmplt>
 8011d08:	2800      	cmp	r0, #0
 8011d0a:	f47f accf 	bne.w	80116ac <_strtod_l+0x454>
 8011d0e:	a30c      	add	r3, pc, #48	@ (adr r3, 8011d40 <_strtod_l+0xae8>)
 8011d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011d18:	f7ee fefe 	bl	8000b18 <__aeabi_dcmpgt>
 8011d1c:	2800      	cmp	r0, #0
 8011d1e:	d093      	beq.n	8011c48 <_strtod_l+0x9f0>
 8011d20:	e4c4      	b.n	80116ac <_strtod_l+0x454>
 8011d22:	bf00      	nop
 8011d24:	f3af 8000 	nop.w
 8011d28:	00000000 	.word	0x00000000
 8011d2c:	bff00000 	.word	0xbff00000
 8011d30:	00000000 	.word	0x00000000
 8011d34:	3ff00000 	.word	0x3ff00000
 8011d38:	94a03595 	.word	0x94a03595
 8011d3c:	3fdfffff 	.word	0x3fdfffff
 8011d40:	35afe535 	.word	0x35afe535
 8011d44:	3fe00000 	.word	0x3fe00000
 8011d48:	000fffff 	.word	0x000fffff
 8011d4c:	7ff00000 	.word	0x7ff00000
 8011d50:	7fefffff 	.word	0x7fefffff
 8011d54:	3ff00000 	.word	0x3ff00000
 8011d58:	3fe00000 	.word	0x3fe00000
 8011d5c:	7fe00000 	.word	0x7fe00000
 8011d60:	7c9fffff 	.word	0x7c9fffff
 8011d64:	9b08      	ldr	r3, [sp, #32]
 8011d66:	b323      	cbz	r3, 8011db2 <_strtod_l+0xb5a>
 8011d68:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8011d6c:	d821      	bhi.n	8011db2 <_strtod_l+0xb5a>
 8011d6e:	a328      	add	r3, pc, #160	@ (adr r3, 8011e10 <_strtod_l+0xbb8>)
 8011d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d74:	4630      	mov	r0, r6
 8011d76:	4639      	mov	r1, r7
 8011d78:	f7ee feba 	bl	8000af0 <__aeabi_dcmple>
 8011d7c:	b1a0      	cbz	r0, 8011da8 <_strtod_l+0xb50>
 8011d7e:	4639      	mov	r1, r7
 8011d80:	4630      	mov	r0, r6
 8011d82:	f7ee ff11 	bl	8000ba8 <__aeabi_d2uiz>
 8011d86:	2801      	cmp	r0, #1
 8011d88:	bf38      	it	cc
 8011d8a:	2001      	movcc	r0, #1
 8011d8c:	f7ee fbba 	bl	8000504 <__aeabi_ui2d>
 8011d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d92:	4606      	mov	r6, r0
 8011d94:	460f      	mov	r7, r1
 8011d96:	b9fb      	cbnz	r3, 8011dd8 <_strtod_l+0xb80>
 8011d98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011d9c:	9014      	str	r0, [sp, #80]	@ 0x50
 8011d9e:	9315      	str	r3, [sp, #84]	@ 0x54
 8011da0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011da4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011da8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011daa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011dae:	1b5b      	subs	r3, r3, r5
 8011db0:	9311      	str	r3, [sp, #68]	@ 0x44
 8011db2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011db6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011dba:	f7ff f8f1 	bl	8010fa0 <__ulp>
 8011dbe:	4650      	mov	r0, sl
 8011dc0:	ec53 2b10 	vmov	r2, r3, d0
 8011dc4:	4659      	mov	r1, fp
 8011dc6:	f7ee fc17 	bl	80005f8 <__aeabi_dmul>
 8011dca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011dce:	f7ee fa5d 	bl	800028c <__adddf3>
 8011dd2:	4682      	mov	sl, r0
 8011dd4:	468b      	mov	fp, r1
 8011dd6:	e770      	b.n	8011cba <_strtod_l+0xa62>
 8011dd8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011ddc:	e7e0      	b.n	8011da0 <_strtod_l+0xb48>
 8011dde:	a30e      	add	r3, pc, #56	@ (adr r3, 8011e18 <_strtod_l+0xbc0>)
 8011de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de4:	f7ee fe7a 	bl	8000adc <__aeabi_dcmplt>
 8011de8:	e798      	b.n	8011d1c <_strtod_l+0xac4>
 8011dea:	2300      	movs	r3, #0
 8011dec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011dee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011df0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011df2:	6013      	str	r3, [r2, #0]
 8011df4:	f7ff ba6d 	b.w	80112d2 <_strtod_l+0x7a>
 8011df8:	2a65      	cmp	r2, #101	@ 0x65
 8011dfa:	f43f ab66 	beq.w	80114ca <_strtod_l+0x272>
 8011dfe:	2a45      	cmp	r2, #69	@ 0x45
 8011e00:	f43f ab63 	beq.w	80114ca <_strtod_l+0x272>
 8011e04:	2301      	movs	r3, #1
 8011e06:	f7ff bb9e 	b.w	8011546 <_strtod_l+0x2ee>
 8011e0a:	bf00      	nop
 8011e0c:	f3af 8000 	nop.w
 8011e10:	ffc00000 	.word	0xffc00000
 8011e14:	41dfffff 	.word	0x41dfffff
 8011e18:	94a03595 	.word	0x94a03595
 8011e1c:	3fcfffff 	.word	0x3fcfffff

08011e20 <_strtod_r>:
 8011e20:	4b01      	ldr	r3, [pc, #4]	@ (8011e28 <_strtod_r+0x8>)
 8011e22:	f7ff ba19 	b.w	8011258 <_strtod_l>
 8011e26:	bf00      	nop
 8011e28:	200001f0 	.word	0x200001f0

08011e2c <__ssputs_r>:
 8011e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e30:	688e      	ldr	r6, [r1, #8]
 8011e32:	461f      	mov	r7, r3
 8011e34:	42be      	cmp	r6, r7
 8011e36:	680b      	ldr	r3, [r1, #0]
 8011e38:	4682      	mov	sl, r0
 8011e3a:	460c      	mov	r4, r1
 8011e3c:	4690      	mov	r8, r2
 8011e3e:	d82d      	bhi.n	8011e9c <__ssputs_r+0x70>
 8011e40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011e44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011e48:	d026      	beq.n	8011e98 <__ssputs_r+0x6c>
 8011e4a:	6965      	ldr	r5, [r4, #20]
 8011e4c:	6909      	ldr	r1, [r1, #16]
 8011e4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e52:	eba3 0901 	sub.w	r9, r3, r1
 8011e56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e5a:	1c7b      	adds	r3, r7, #1
 8011e5c:	444b      	add	r3, r9
 8011e5e:	106d      	asrs	r5, r5, #1
 8011e60:	429d      	cmp	r5, r3
 8011e62:	bf38      	it	cc
 8011e64:	461d      	movcc	r5, r3
 8011e66:	0553      	lsls	r3, r2, #21
 8011e68:	d527      	bpl.n	8011eba <__ssputs_r+0x8e>
 8011e6a:	4629      	mov	r1, r5
 8011e6c:	f7fe fc98 	bl	80107a0 <_malloc_r>
 8011e70:	4606      	mov	r6, r0
 8011e72:	b360      	cbz	r0, 8011ece <__ssputs_r+0xa2>
 8011e74:	6921      	ldr	r1, [r4, #16]
 8011e76:	464a      	mov	r2, r9
 8011e78:	f7fd fdbd 	bl	800f9f6 <memcpy>
 8011e7c:	89a3      	ldrh	r3, [r4, #12]
 8011e7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e86:	81a3      	strh	r3, [r4, #12]
 8011e88:	6126      	str	r6, [r4, #16]
 8011e8a:	6165      	str	r5, [r4, #20]
 8011e8c:	444e      	add	r6, r9
 8011e8e:	eba5 0509 	sub.w	r5, r5, r9
 8011e92:	6026      	str	r6, [r4, #0]
 8011e94:	60a5      	str	r5, [r4, #8]
 8011e96:	463e      	mov	r6, r7
 8011e98:	42be      	cmp	r6, r7
 8011e9a:	d900      	bls.n	8011e9e <__ssputs_r+0x72>
 8011e9c:	463e      	mov	r6, r7
 8011e9e:	6820      	ldr	r0, [r4, #0]
 8011ea0:	4632      	mov	r2, r6
 8011ea2:	4641      	mov	r1, r8
 8011ea4:	f000 fe4b 	bl	8012b3e <memmove>
 8011ea8:	68a3      	ldr	r3, [r4, #8]
 8011eaa:	1b9b      	subs	r3, r3, r6
 8011eac:	60a3      	str	r3, [r4, #8]
 8011eae:	6823      	ldr	r3, [r4, #0]
 8011eb0:	4433      	add	r3, r6
 8011eb2:	6023      	str	r3, [r4, #0]
 8011eb4:	2000      	movs	r0, #0
 8011eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011eba:	462a      	mov	r2, r5
 8011ebc:	f001 fa11 	bl	80132e2 <_realloc_r>
 8011ec0:	4606      	mov	r6, r0
 8011ec2:	2800      	cmp	r0, #0
 8011ec4:	d1e0      	bne.n	8011e88 <__ssputs_r+0x5c>
 8011ec6:	6921      	ldr	r1, [r4, #16]
 8011ec8:	4650      	mov	r0, sl
 8011eca:	f7fe fbf5 	bl	80106b8 <_free_r>
 8011ece:	230c      	movs	r3, #12
 8011ed0:	f8ca 3000 	str.w	r3, [sl]
 8011ed4:	89a3      	ldrh	r3, [r4, #12]
 8011ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011eda:	81a3      	strh	r3, [r4, #12]
 8011edc:	f04f 30ff 	mov.w	r0, #4294967295
 8011ee0:	e7e9      	b.n	8011eb6 <__ssputs_r+0x8a>
	...

08011ee4 <_svfiprintf_r>:
 8011ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ee8:	4698      	mov	r8, r3
 8011eea:	898b      	ldrh	r3, [r1, #12]
 8011eec:	061b      	lsls	r3, r3, #24
 8011eee:	b09d      	sub	sp, #116	@ 0x74
 8011ef0:	4607      	mov	r7, r0
 8011ef2:	460d      	mov	r5, r1
 8011ef4:	4614      	mov	r4, r2
 8011ef6:	d510      	bpl.n	8011f1a <_svfiprintf_r+0x36>
 8011ef8:	690b      	ldr	r3, [r1, #16]
 8011efa:	b973      	cbnz	r3, 8011f1a <_svfiprintf_r+0x36>
 8011efc:	2140      	movs	r1, #64	@ 0x40
 8011efe:	f7fe fc4f 	bl	80107a0 <_malloc_r>
 8011f02:	6028      	str	r0, [r5, #0]
 8011f04:	6128      	str	r0, [r5, #16]
 8011f06:	b930      	cbnz	r0, 8011f16 <_svfiprintf_r+0x32>
 8011f08:	230c      	movs	r3, #12
 8011f0a:	603b      	str	r3, [r7, #0]
 8011f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f10:	b01d      	add	sp, #116	@ 0x74
 8011f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f16:	2340      	movs	r3, #64	@ 0x40
 8011f18:	616b      	str	r3, [r5, #20]
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f1e:	2320      	movs	r3, #32
 8011f20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011f24:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f28:	2330      	movs	r3, #48	@ 0x30
 8011f2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80120c8 <_svfiprintf_r+0x1e4>
 8011f2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011f32:	f04f 0901 	mov.w	r9, #1
 8011f36:	4623      	mov	r3, r4
 8011f38:	469a      	mov	sl, r3
 8011f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f3e:	b10a      	cbz	r2, 8011f44 <_svfiprintf_r+0x60>
 8011f40:	2a25      	cmp	r2, #37	@ 0x25
 8011f42:	d1f9      	bne.n	8011f38 <_svfiprintf_r+0x54>
 8011f44:	ebba 0b04 	subs.w	fp, sl, r4
 8011f48:	d00b      	beq.n	8011f62 <_svfiprintf_r+0x7e>
 8011f4a:	465b      	mov	r3, fp
 8011f4c:	4622      	mov	r2, r4
 8011f4e:	4629      	mov	r1, r5
 8011f50:	4638      	mov	r0, r7
 8011f52:	f7ff ff6b 	bl	8011e2c <__ssputs_r>
 8011f56:	3001      	adds	r0, #1
 8011f58:	f000 80a7 	beq.w	80120aa <_svfiprintf_r+0x1c6>
 8011f5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011f5e:	445a      	add	r2, fp
 8011f60:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f62:	f89a 3000 	ldrb.w	r3, [sl]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	f000 809f 	beq.w	80120aa <_svfiprintf_r+0x1c6>
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8011f72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f76:	f10a 0a01 	add.w	sl, sl, #1
 8011f7a:	9304      	str	r3, [sp, #16]
 8011f7c:	9307      	str	r3, [sp, #28]
 8011f7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011f82:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f84:	4654      	mov	r4, sl
 8011f86:	2205      	movs	r2, #5
 8011f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f8c:	484e      	ldr	r0, [pc, #312]	@ (80120c8 <_svfiprintf_r+0x1e4>)
 8011f8e:	f7ee f91f 	bl	80001d0 <memchr>
 8011f92:	9a04      	ldr	r2, [sp, #16]
 8011f94:	b9d8      	cbnz	r0, 8011fce <_svfiprintf_r+0xea>
 8011f96:	06d0      	lsls	r0, r2, #27
 8011f98:	bf44      	itt	mi
 8011f9a:	2320      	movmi	r3, #32
 8011f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011fa0:	0711      	lsls	r1, r2, #28
 8011fa2:	bf44      	itt	mi
 8011fa4:	232b      	movmi	r3, #43	@ 0x2b
 8011fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011faa:	f89a 3000 	ldrb.w	r3, [sl]
 8011fae:	2b2a      	cmp	r3, #42	@ 0x2a
 8011fb0:	d015      	beq.n	8011fde <_svfiprintf_r+0xfa>
 8011fb2:	9a07      	ldr	r2, [sp, #28]
 8011fb4:	4654      	mov	r4, sl
 8011fb6:	2000      	movs	r0, #0
 8011fb8:	f04f 0c0a 	mov.w	ip, #10
 8011fbc:	4621      	mov	r1, r4
 8011fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fc2:	3b30      	subs	r3, #48	@ 0x30
 8011fc4:	2b09      	cmp	r3, #9
 8011fc6:	d94b      	bls.n	8012060 <_svfiprintf_r+0x17c>
 8011fc8:	b1b0      	cbz	r0, 8011ff8 <_svfiprintf_r+0x114>
 8011fca:	9207      	str	r2, [sp, #28]
 8011fcc:	e014      	b.n	8011ff8 <_svfiprintf_r+0x114>
 8011fce:	eba0 0308 	sub.w	r3, r0, r8
 8011fd2:	fa09 f303 	lsl.w	r3, r9, r3
 8011fd6:	4313      	orrs	r3, r2
 8011fd8:	9304      	str	r3, [sp, #16]
 8011fda:	46a2      	mov	sl, r4
 8011fdc:	e7d2      	b.n	8011f84 <_svfiprintf_r+0xa0>
 8011fde:	9b03      	ldr	r3, [sp, #12]
 8011fe0:	1d19      	adds	r1, r3, #4
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	9103      	str	r1, [sp, #12]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	bfbb      	ittet	lt
 8011fea:	425b      	neglt	r3, r3
 8011fec:	f042 0202 	orrlt.w	r2, r2, #2
 8011ff0:	9307      	strge	r3, [sp, #28]
 8011ff2:	9307      	strlt	r3, [sp, #28]
 8011ff4:	bfb8      	it	lt
 8011ff6:	9204      	strlt	r2, [sp, #16]
 8011ff8:	7823      	ldrb	r3, [r4, #0]
 8011ffa:	2b2e      	cmp	r3, #46	@ 0x2e
 8011ffc:	d10a      	bne.n	8012014 <_svfiprintf_r+0x130>
 8011ffe:	7863      	ldrb	r3, [r4, #1]
 8012000:	2b2a      	cmp	r3, #42	@ 0x2a
 8012002:	d132      	bne.n	801206a <_svfiprintf_r+0x186>
 8012004:	9b03      	ldr	r3, [sp, #12]
 8012006:	1d1a      	adds	r2, r3, #4
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	9203      	str	r2, [sp, #12]
 801200c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012010:	3402      	adds	r4, #2
 8012012:	9305      	str	r3, [sp, #20]
 8012014:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80120d8 <_svfiprintf_r+0x1f4>
 8012018:	7821      	ldrb	r1, [r4, #0]
 801201a:	2203      	movs	r2, #3
 801201c:	4650      	mov	r0, sl
 801201e:	f7ee f8d7 	bl	80001d0 <memchr>
 8012022:	b138      	cbz	r0, 8012034 <_svfiprintf_r+0x150>
 8012024:	9b04      	ldr	r3, [sp, #16]
 8012026:	eba0 000a 	sub.w	r0, r0, sl
 801202a:	2240      	movs	r2, #64	@ 0x40
 801202c:	4082      	lsls	r2, r0
 801202e:	4313      	orrs	r3, r2
 8012030:	3401      	adds	r4, #1
 8012032:	9304      	str	r3, [sp, #16]
 8012034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012038:	4824      	ldr	r0, [pc, #144]	@ (80120cc <_svfiprintf_r+0x1e8>)
 801203a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801203e:	2206      	movs	r2, #6
 8012040:	f7ee f8c6 	bl	80001d0 <memchr>
 8012044:	2800      	cmp	r0, #0
 8012046:	d036      	beq.n	80120b6 <_svfiprintf_r+0x1d2>
 8012048:	4b21      	ldr	r3, [pc, #132]	@ (80120d0 <_svfiprintf_r+0x1ec>)
 801204a:	bb1b      	cbnz	r3, 8012094 <_svfiprintf_r+0x1b0>
 801204c:	9b03      	ldr	r3, [sp, #12]
 801204e:	3307      	adds	r3, #7
 8012050:	f023 0307 	bic.w	r3, r3, #7
 8012054:	3308      	adds	r3, #8
 8012056:	9303      	str	r3, [sp, #12]
 8012058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801205a:	4433      	add	r3, r6
 801205c:	9309      	str	r3, [sp, #36]	@ 0x24
 801205e:	e76a      	b.n	8011f36 <_svfiprintf_r+0x52>
 8012060:	fb0c 3202 	mla	r2, ip, r2, r3
 8012064:	460c      	mov	r4, r1
 8012066:	2001      	movs	r0, #1
 8012068:	e7a8      	b.n	8011fbc <_svfiprintf_r+0xd8>
 801206a:	2300      	movs	r3, #0
 801206c:	3401      	adds	r4, #1
 801206e:	9305      	str	r3, [sp, #20]
 8012070:	4619      	mov	r1, r3
 8012072:	f04f 0c0a 	mov.w	ip, #10
 8012076:	4620      	mov	r0, r4
 8012078:	f810 2b01 	ldrb.w	r2, [r0], #1
 801207c:	3a30      	subs	r2, #48	@ 0x30
 801207e:	2a09      	cmp	r2, #9
 8012080:	d903      	bls.n	801208a <_svfiprintf_r+0x1a6>
 8012082:	2b00      	cmp	r3, #0
 8012084:	d0c6      	beq.n	8012014 <_svfiprintf_r+0x130>
 8012086:	9105      	str	r1, [sp, #20]
 8012088:	e7c4      	b.n	8012014 <_svfiprintf_r+0x130>
 801208a:	fb0c 2101 	mla	r1, ip, r1, r2
 801208e:	4604      	mov	r4, r0
 8012090:	2301      	movs	r3, #1
 8012092:	e7f0      	b.n	8012076 <_svfiprintf_r+0x192>
 8012094:	ab03      	add	r3, sp, #12
 8012096:	9300      	str	r3, [sp, #0]
 8012098:	462a      	mov	r2, r5
 801209a:	4b0e      	ldr	r3, [pc, #56]	@ (80120d4 <_svfiprintf_r+0x1f0>)
 801209c:	a904      	add	r1, sp, #16
 801209e:	4638      	mov	r0, r7
 80120a0:	f7fc fb20 	bl	800e6e4 <_printf_float>
 80120a4:	1c42      	adds	r2, r0, #1
 80120a6:	4606      	mov	r6, r0
 80120a8:	d1d6      	bne.n	8012058 <_svfiprintf_r+0x174>
 80120aa:	89ab      	ldrh	r3, [r5, #12]
 80120ac:	065b      	lsls	r3, r3, #25
 80120ae:	f53f af2d 	bmi.w	8011f0c <_svfiprintf_r+0x28>
 80120b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80120b4:	e72c      	b.n	8011f10 <_svfiprintf_r+0x2c>
 80120b6:	ab03      	add	r3, sp, #12
 80120b8:	9300      	str	r3, [sp, #0]
 80120ba:	462a      	mov	r2, r5
 80120bc:	4b05      	ldr	r3, [pc, #20]	@ (80120d4 <_svfiprintf_r+0x1f0>)
 80120be:	a904      	add	r1, sp, #16
 80120c0:	4638      	mov	r0, r7
 80120c2:	f7fc fda7 	bl	800ec14 <_printf_i>
 80120c6:	e7ed      	b.n	80120a4 <_svfiprintf_r+0x1c0>
 80120c8:	08013c98 	.word	0x08013c98
 80120cc:	08013ca2 	.word	0x08013ca2
 80120d0:	0800e6e5 	.word	0x0800e6e5
 80120d4:	08011e2d 	.word	0x08011e2d
 80120d8:	08013c9e 	.word	0x08013c9e

080120dc <_sungetc_r>:
 80120dc:	b538      	push	{r3, r4, r5, lr}
 80120de:	1c4b      	adds	r3, r1, #1
 80120e0:	4614      	mov	r4, r2
 80120e2:	d103      	bne.n	80120ec <_sungetc_r+0x10>
 80120e4:	f04f 35ff 	mov.w	r5, #4294967295
 80120e8:	4628      	mov	r0, r5
 80120ea:	bd38      	pop	{r3, r4, r5, pc}
 80120ec:	8993      	ldrh	r3, [r2, #12]
 80120ee:	f023 0320 	bic.w	r3, r3, #32
 80120f2:	8193      	strh	r3, [r2, #12]
 80120f4:	6853      	ldr	r3, [r2, #4]
 80120f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80120f8:	b2cd      	uxtb	r5, r1
 80120fa:	b18a      	cbz	r2, 8012120 <_sungetc_r+0x44>
 80120fc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80120fe:	429a      	cmp	r2, r3
 8012100:	dd08      	ble.n	8012114 <_sungetc_r+0x38>
 8012102:	6823      	ldr	r3, [r4, #0]
 8012104:	1e5a      	subs	r2, r3, #1
 8012106:	6022      	str	r2, [r4, #0]
 8012108:	f803 5c01 	strb.w	r5, [r3, #-1]
 801210c:	6863      	ldr	r3, [r4, #4]
 801210e:	3301      	adds	r3, #1
 8012110:	6063      	str	r3, [r4, #4]
 8012112:	e7e9      	b.n	80120e8 <_sungetc_r+0xc>
 8012114:	4621      	mov	r1, r4
 8012116:	f000 fcd8 	bl	8012aca <__submore>
 801211a:	2800      	cmp	r0, #0
 801211c:	d0f1      	beq.n	8012102 <_sungetc_r+0x26>
 801211e:	e7e1      	b.n	80120e4 <_sungetc_r+0x8>
 8012120:	6921      	ldr	r1, [r4, #16]
 8012122:	6822      	ldr	r2, [r4, #0]
 8012124:	b141      	cbz	r1, 8012138 <_sungetc_r+0x5c>
 8012126:	4291      	cmp	r1, r2
 8012128:	d206      	bcs.n	8012138 <_sungetc_r+0x5c>
 801212a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801212e:	42a9      	cmp	r1, r5
 8012130:	d102      	bne.n	8012138 <_sungetc_r+0x5c>
 8012132:	3a01      	subs	r2, #1
 8012134:	6022      	str	r2, [r4, #0]
 8012136:	e7ea      	b.n	801210e <_sungetc_r+0x32>
 8012138:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 801213c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012140:	6363      	str	r3, [r4, #52]	@ 0x34
 8012142:	2303      	movs	r3, #3
 8012144:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012146:	4623      	mov	r3, r4
 8012148:	f803 5f46 	strb.w	r5, [r3, #70]!
 801214c:	6023      	str	r3, [r4, #0]
 801214e:	2301      	movs	r3, #1
 8012150:	e7de      	b.n	8012110 <_sungetc_r+0x34>

08012152 <__ssrefill_r>:
 8012152:	b510      	push	{r4, lr}
 8012154:	460c      	mov	r4, r1
 8012156:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012158:	b169      	cbz	r1, 8012176 <__ssrefill_r+0x24>
 801215a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801215e:	4299      	cmp	r1, r3
 8012160:	d001      	beq.n	8012166 <__ssrefill_r+0x14>
 8012162:	f7fe faa9 	bl	80106b8 <_free_r>
 8012166:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012168:	6063      	str	r3, [r4, #4]
 801216a:	2000      	movs	r0, #0
 801216c:	6360      	str	r0, [r4, #52]	@ 0x34
 801216e:	b113      	cbz	r3, 8012176 <__ssrefill_r+0x24>
 8012170:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012172:	6023      	str	r3, [r4, #0]
 8012174:	bd10      	pop	{r4, pc}
 8012176:	6923      	ldr	r3, [r4, #16]
 8012178:	6023      	str	r3, [r4, #0]
 801217a:	2300      	movs	r3, #0
 801217c:	6063      	str	r3, [r4, #4]
 801217e:	89a3      	ldrh	r3, [r4, #12]
 8012180:	f043 0320 	orr.w	r3, r3, #32
 8012184:	81a3      	strh	r3, [r4, #12]
 8012186:	f04f 30ff 	mov.w	r0, #4294967295
 801218a:	e7f3      	b.n	8012174 <__ssrefill_r+0x22>

0801218c <__ssvfiscanf_r>:
 801218c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012190:	460c      	mov	r4, r1
 8012192:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012196:	2100      	movs	r1, #0
 8012198:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801219c:	49a5      	ldr	r1, [pc, #660]	@ (8012434 <__ssvfiscanf_r+0x2a8>)
 801219e:	91a0      	str	r1, [sp, #640]	@ 0x280
 80121a0:	f10d 0804 	add.w	r8, sp, #4
 80121a4:	49a4      	ldr	r1, [pc, #656]	@ (8012438 <__ssvfiscanf_r+0x2ac>)
 80121a6:	4fa5      	ldr	r7, [pc, #660]	@ (801243c <__ssvfiscanf_r+0x2b0>)
 80121a8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80121ac:	4606      	mov	r6, r0
 80121ae:	91a1      	str	r1, [sp, #644]	@ 0x284
 80121b0:	9300      	str	r3, [sp, #0]
 80121b2:	7813      	ldrb	r3, [r2, #0]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	f000 8158 	beq.w	801246a <__ssvfiscanf_r+0x2de>
 80121ba:	5cf9      	ldrb	r1, [r7, r3]
 80121bc:	f011 0108 	ands.w	r1, r1, #8
 80121c0:	f102 0501 	add.w	r5, r2, #1
 80121c4:	d019      	beq.n	80121fa <__ssvfiscanf_r+0x6e>
 80121c6:	6863      	ldr	r3, [r4, #4]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	dd0f      	ble.n	80121ec <__ssvfiscanf_r+0x60>
 80121cc:	6823      	ldr	r3, [r4, #0]
 80121ce:	781a      	ldrb	r2, [r3, #0]
 80121d0:	5cba      	ldrb	r2, [r7, r2]
 80121d2:	0712      	lsls	r2, r2, #28
 80121d4:	d401      	bmi.n	80121da <__ssvfiscanf_r+0x4e>
 80121d6:	462a      	mov	r2, r5
 80121d8:	e7eb      	b.n	80121b2 <__ssvfiscanf_r+0x26>
 80121da:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80121dc:	3201      	adds	r2, #1
 80121de:	9245      	str	r2, [sp, #276]	@ 0x114
 80121e0:	6862      	ldr	r2, [r4, #4]
 80121e2:	3301      	adds	r3, #1
 80121e4:	3a01      	subs	r2, #1
 80121e6:	6062      	str	r2, [r4, #4]
 80121e8:	6023      	str	r3, [r4, #0]
 80121ea:	e7ec      	b.n	80121c6 <__ssvfiscanf_r+0x3a>
 80121ec:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80121ee:	4621      	mov	r1, r4
 80121f0:	4630      	mov	r0, r6
 80121f2:	4798      	blx	r3
 80121f4:	2800      	cmp	r0, #0
 80121f6:	d0e9      	beq.n	80121cc <__ssvfiscanf_r+0x40>
 80121f8:	e7ed      	b.n	80121d6 <__ssvfiscanf_r+0x4a>
 80121fa:	2b25      	cmp	r3, #37	@ 0x25
 80121fc:	d012      	beq.n	8012224 <__ssvfiscanf_r+0x98>
 80121fe:	4699      	mov	r9, r3
 8012200:	6863      	ldr	r3, [r4, #4]
 8012202:	2b00      	cmp	r3, #0
 8012204:	f340 8093 	ble.w	801232e <__ssvfiscanf_r+0x1a2>
 8012208:	6822      	ldr	r2, [r4, #0]
 801220a:	7813      	ldrb	r3, [r2, #0]
 801220c:	454b      	cmp	r3, r9
 801220e:	f040 812c 	bne.w	801246a <__ssvfiscanf_r+0x2de>
 8012212:	6863      	ldr	r3, [r4, #4]
 8012214:	3b01      	subs	r3, #1
 8012216:	6063      	str	r3, [r4, #4]
 8012218:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801221a:	3201      	adds	r2, #1
 801221c:	3301      	adds	r3, #1
 801221e:	6022      	str	r2, [r4, #0]
 8012220:	9345      	str	r3, [sp, #276]	@ 0x114
 8012222:	e7d8      	b.n	80121d6 <__ssvfiscanf_r+0x4a>
 8012224:	9141      	str	r1, [sp, #260]	@ 0x104
 8012226:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012228:	7853      	ldrb	r3, [r2, #1]
 801222a:	2b2a      	cmp	r3, #42	@ 0x2a
 801222c:	bf02      	ittt	eq
 801222e:	2310      	moveq	r3, #16
 8012230:	1c95      	addeq	r5, r2, #2
 8012232:	9341      	streq	r3, [sp, #260]	@ 0x104
 8012234:	220a      	movs	r2, #10
 8012236:	46a9      	mov	r9, r5
 8012238:	f819 1b01 	ldrb.w	r1, [r9], #1
 801223c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8012240:	2b09      	cmp	r3, #9
 8012242:	d91e      	bls.n	8012282 <__ssvfiscanf_r+0xf6>
 8012244:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8012440 <__ssvfiscanf_r+0x2b4>
 8012248:	2203      	movs	r2, #3
 801224a:	4650      	mov	r0, sl
 801224c:	f7ed ffc0 	bl	80001d0 <memchr>
 8012250:	b138      	cbz	r0, 8012262 <__ssvfiscanf_r+0xd6>
 8012252:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012254:	eba0 000a 	sub.w	r0, r0, sl
 8012258:	2301      	movs	r3, #1
 801225a:	4083      	lsls	r3, r0
 801225c:	4313      	orrs	r3, r2
 801225e:	9341      	str	r3, [sp, #260]	@ 0x104
 8012260:	464d      	mov	r5, r9
 8012262:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012266:	2b78      	cmp	r3, #120	@ 0x78
 8012268:	d806      	bhi.n	8012278 <__ssvfiscanf_r+0xec>
 801226a:	2b57      	cmp	r3, #87	@ 0x57
 801226c:	d810      	bhi.n	8012290 <__ssvfiscanf_r+0x104>
 801226e:	2b25      	cmp	r3, #37	@ 0x25
 8012270:	d0c5      	beq.n	80121fe <__ssvfiscanf_r+0x72>
 8012272:	d857      	bhi.n	8012324 <__ssvfiscanf_r+0x198>
 8012274:	2b00      	cmp	r3, #0
 8012276:	d065      	beq.n	8012344 <__ssvfiscanf_r+0x1b8>
 8012278:	2303      	movs	r3, #3
 801227a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801227c:	230a      	movs	r3, #10
 801227e:	9342      	str	r3, [sp, #264]	@ 0x108
 8012280:	e078      	b.n	8012374 <__ssvfiscanf_r+0x1e8>
 8012282:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012284:	fb02 1103 	mla	r1, r2, r3, r1
 8012288:	3930      	subs	r1, #48	@ 0x30
 801228a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801228c:	464d      	mov	r5, r9
 801228e:	e7d2      	b.n	8012236 <__ssvfiscanf_r+0xaa>
 8012290:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012294:	2a20      	cmp	r2, #32
 8012296:	d8ef      	bhi.n	8012278 <__ssvfiscanf_r+0xec>
 8012298:	a101      	add	r1, pc, #4	@ (adr r1, 80122a0 <__ssvfiscanf_r+0x114>)
 801229a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801229e:	bf00      	nop
 80122a0:	08012353 	.word	0x08012353
 80122a4:	08012279 	.word	0x08012279
 80122a8:	08012279 	.word	0x08012279
 80122ac:	080123ad 	.word	0x080123ad
 80122b0:	08012279 	.word	0x08012279
 80122b4:	08012279 	.word	0x08012279
 80122b8:	08012279 	.word	0x08012279
 80122bc:	08012279 	.word	0x08012279
 80122c0:	08012279 	.word	0x08012279
 80122c4:	08012279 	.word	0x08012279
 80122c8:	08012279 	.word	0x08012279
 80122cc:	080123c3 	.word	0x080123c3
 80122d0:	080123a9 	.word	0x080123a9
 80122d4:	0801232b 	.word	0x0801232b
 80122d8:	0801232b 	.word	0x0801232b
 80122dc:	0801232b 	.word	0x0801232b
 80122e0:	08012279 	.word	0x08012279
 80122e4:	08012365 	.word	0x08012365
 80122e8:	08012279 	.word	0x08012279
 80122ec:	08012279 	.word	0x08012279
 80122f0:	08012279 	.word	0x08012279
 80122f4:	08012279 	.word	0x08012279
 80122f8:	080123d3 	.word	0x080123d3
 80122fc:	0801236d 	.word	0x0801236d
 8012300:	0801234b 	.word	0x0801234b
 8012304:	08012279 	.word	0x08012279
 8012308:	08012279 	.word	0x08012279
 801230c:	080123cf 	.word	0x080123cf
 8012310:	08012279 	.word	0x08012279
 8012314:	080123a9 	.word	0x080123a9
 8012318:	08012279 	.word	0x08012279
 801231c:	08012279 	.word	0x08012279
 8012320:	08012353 	.word	0x08012353
 8012324:	3b45      	subs	r3, #69	@ 0x45
 8012326:	2b02      	cmp	r3, #2
 8012328:	d8a6      	bhi.n	8012278 <__ssvfiscanf_r+0xec>
 801232a:	2305      	movs	r3, #5
 801232c:	e021      	b.n	8012372 <__ssvfiscanf_r+0x1e6>
 801232e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012330:	4621      	mov	r1, r4
 8012332:	4630      	mov	r0, r6
 8012334:	4798      	blx	r3
 8012336:	2800      	cmp	r0, #0
 8012338:	f43f af66 	beq.w	8012208 <__ssvfiscanf_r+0x7c>
 801233c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801233e:	2800      	cmp	r0, #0
 8012340:	f040 808b 	bne.w	801245a <__ssvfiscanf_r+0x2ce>
 8012344:	f04f 30ff 	mov.w	r0, #4294967295
 8012348:	e08b      	b.n	8012462 <__ssvfiscanf_r+0x2d6>
 801234a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801234c:	f042 0220 	orr.w	r2, r2, #32
 8012350:	9241      	str	r2, [sp, #260]	@ 0x104
 8012352:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012354:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012358:	9241      	str	r2, [sp, #260]	@ 0x104
 801235a:	2210      	movs	r2, #16
 801235c:	2b6e      	cmp	r3, #110	@ 0x6e
 801235e:	9242      	str	r2, [sp, #264]	@ 0x108
 8012360:	d902      	bls.n	8012368 <__ssvfiscanf_r+0x1dc>
 8012362:	e005      	b.n	8012370 <__ssvfiscanf_r+0x1e4>
 8012364:	2300      	movs	r3, #0
 8012366:	9342      	str	r3, [sp, #264]	@ 0x108
 8012368:	2303      	movs	r3, #3
 801236a:	e002      	b.n	8012372 <__ssvfiscanf_r+0x1e6>
 801236c:	2308      	movs	r3, #8
 801236e:	9342      	str	r3, [sp, #264]	@ 0x108
 8012370:	2304      	movs	r3, #4
 8012372:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012374:	6863      	ldr	r3, [r4, #4]
 8012376:	2b00      	cmp	r3, #0
 8012378:	dd39      	ble.n	80123ee <__ssvfiscanf_r+0x262>
 801237a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801237c:	0659      	lsls	r1, r3, #25
 801237e:	d404      	bmi.n	801238a <__ssvfiscanf_r+0x1fe>
 8012380:	6823      	ldr	r3, [r4, #0]
 8012382:	781a      	ldrb	r2, [r3, #0]
 8012384:	5cba      	ldrb	r2, [r7, r2]
 8012386:	0712      	lsls	r2, r2, #28
 8012388:	d438      	bmi.n	80123fc <__ssvfiscanf_r+0x270>
 801238a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801238c:	2b02      	cmp	r3, #2
 801238e:	dc47      	bgt.n	8012420 <__ssvfiscanf_r+0x294>
 8012390:	466b      	mov	r3, sp
 8012392:	4622      	mov	r2, r4
 8012394:	a941      	add	r1, sp, #260	@ 0x104
 8012396:	4630      	mov	r0, r6
 8012398:	f000 f9ae 	bl	80126f8 <_scanf_chars>
 801239c:	2801      	cmp	r0, #1
 801239e:	d064      	beq.n	801246a <__ssvfiscanf_r+0x2de>
 80123a0:	2802      	cmp	r0, #2
 80123a2:	f47f af18 	bne.w	80121d6 <__ssvfiscanf_r+0x4a>
 80123a6:	e7c9      	b.n	801233c <__ssvfiscanf_r+0x1b0>
 80123a8:	220a      	movs	r2, #10
 80123aa:	e7d7      	b.n	801235c <__ssvfiscanf_r+0x1d0>
 80123ac:	4629      	mov	r1, r5
 80123ae:	4640      	mov	r0, r8
 80123b0:	f000 fb52 	bl	8012a58 <__sccl>
 80123b4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80123b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123ba:	9341      	str	r3, [sp, #260]	@ 0x104
 80123bc:	4605      	mov	r5, r0
 80123be:	2301      	movs	r3, #1
 80123c0:	e7d7      	b.n	8012372 <__ssvfiscanf_r+0x1e6>
 80123c2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80123c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123c8:	9341      	str	r3, [sp, #260]	@ 0x104
 80123ca:	2300      	movs	r3, #0
 80123cc:	e7d1      	b.n	8012372 <__ssvfiscanf_r+0x1e6>
 80123ce:	2302      	movs	r3, #2
 80123d0:	e7cf      	b.n	8012372 <__ssvfiscanf_r+0x1e6>
 80123d2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80123d4:	06c3      	lsls	r3, r0, #27
 80123d6:	f53f aefe 	bmi.w	80121d6 <__ssvfiscanf_r+0x4a>
 80123da:	9b00      	ldr	r3, [sp, #0]
 80123dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80123de:	1d19      	adds	r1, r3, #4
 80123e0:	9100      	str	r1, [sp, #0]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	07c0      	lsls	r0, r0, #31
 80123e6:	bf4c      	ite	mi
 80123e8:	801a      	strhmi	r2, [r3, #0]
 80123ea:	601a      	strpl	r2, [r3, #0]
 80123ec:	e6f3      	b.n	80121d6 <__ssvfiscanf_r+0x4a>
 80123ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80123f0:	4621      	mov	r1, r4
 80123f2:	4630      	mov	r0, r6
 80123f4:	4798      	blx	r3
 80123f6:	2800      	cmp	r0, #0
 80123f8:	d0bf      	beq.n	801237a <__ssvfiscanf_r+0x1ee>
 80123fa:	e79f      	b.n	801233c <__ssvfiscanf_r+0x1b0>
 80123fc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80123fe:	3201      	adds	r2, #1
 8012400:	9245      	str	r2, [sp, #276]	@ 0x114
 8012402:	6862      	ldr	r2, [r4, #4]
 8012404:	3a01      	subs	r2, #1
 8012406:	2a00      	cmp	r2, #0
 8012408:	6062      	str	r2, [r4, #4]
 801240a:	dd02      	ble.n	8012412 <__ssvfiscanf_r+0x286>
 801240c:	3301      	adds	r3, #1
 801240e:	6023      	str	r3, [r4, #0]
 8012410:	e7b6      	b.n	8012380 <__ssvfiscanf_r+0x1f4>
 8012412:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012414:	4621      	mov	r1, r4
 8012416:	4630      	mov	r0, r6
 8012418:	4798      	blx	r3
 801241a:	2800      	cmp	r0, #0
 801241c:	d0b0      	beq.n	8012380 <__ssvfiscanf_r+0x1f4>
 801241e:	e78d      	b.n	801233c <__ssvfiscanf_r+0x1b0>
 8012420:	2b04      	cmp	r3, #4
 8012422:	dc0f      	bgt.n	8012444 <__ssvfiscanf_r+0x2b8>
 8012424:	466b      	mov	r3, sp
 8012426:	4622      	mov	r2, r4
 8012428:	a941      	add	r1, sp, #260	@ 0x104
 801242a:	4630      	mov	r0, r6
 801242c:	f000 f9be 	bl	80127ac <_scanf_i>
 8012430:	e7b4      	b.n	801239c <__ssvfiscanf_r+0x210>
 8012432:	bf00      	nop
 8012434:	080120dd 	.word	0x080120dd
 8012438:	08012153 	.word	0x08012153
 801243c:	08013925 	.word	0x08013925
 8012440:	08013c9e 	.word	0x08013c9e
 8012444:	4b0a      	ldr	r3, [pc, #40]	@ (8012470 <__ssvfiscanf_r+0x2e4>)
 8012446:	2b00      	cmp	r3, #0
 8012448:	f43f aec5 	beq.w	80121d6 <__ssvfiscanf_r+0x4a>
 801244c:	466b      	mov	r3, sp
 801244e:	4622      	mov	r2, r4
 8012450:	a941      	add	r1, sp, #260	@ 0x104
 8012452:	4630      	mov	r0, r6
 8012454:	f7fc fcfe 	bl	800ee54 <_scanf_float>
 8012458:	e7a0      	b.n	801239c <__ssvfiscanf_r+0x210>
 801245a:	89a3      	ldrh	r3, [r4, #12]
 801245c:	065b      	lsls	r3, r3, #25
 801245e:	f53f af71 	bmi.w	8012344 <__ssvfiscanf_r+0x1b8>
 8012462:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8012466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801246a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801246c:	e7f9      	b.n	8012462 <__ssvfiscanf_r+0x2d6>
 801246e:	bf00      	nop
 8012470:	0800ee55 	.word	0x0800ee55

08012474 <__sfputc_r>:
 8012474:	6893      	ldr	r3, [r2, #8]
 8012476:	3b01      	subs	r3, #1
 8012478:	2b00      	cmp	r3, #0
 801247a:	b410      	push	{r4}
 801247c:	6093      	str	r3, [r2, #8]
 801247e:	da08      	bge.n	8012492 <__sfputc_r+0x1e>
 8012480:	6994      	ldr	r4, [r2, #24]
 8012482:	42a3      	cmp	r3, r4
 8012484:	db01      	blt.n	801248a <__sfputc_r+0x16>
 8012486:	290a      	cmp	r1, #10
 8012488:	d103      	bne.n	8012492 <__sfputc_r+0x1e>
 801248a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801248e:	f7fd b976 	b.w	800f77e <__swbuf_r>
 8012492:	6813      	ldr	r3, [r2, #0]
 8012494:	1c58      	adds	r0, r3, #1
 8012496:	6010      	str	r0, [r2, #0]
 8012498:	7019      	strb	r1, [r3, #0]
 801249a:	4608      	mov	r0, r1
 801249c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124a0:	4770      	bx	lr

080124a2 <__sfputs_r>:
 80124a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124a4:	4606      	mov	r6, r0
 80124a6:	460f      	mov	r7, r1
 80124a8:	4614      	mov	r4, r2
 80124aa:	18d5      	adds	r5, r2, r3
 80124ac:	42ac      	cmp	r4, r5
 80124ae:	d101      	bne.n	80124b4 <__sfputs_r+0x12>
 80124b0:	2000      	movs	r0, #0
 80124b2:	e007      	b.n	80124c4 <__sfputs_r+0x22>
 80124b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124b8:	463a      	mov	r2, r7
 80124ba:	4630      	mov	r0, r6
 80124bc:	f7ff ffda 	bl	8012474 <__sfputc_r>
 80124c0:	1c43      	adds	r3, r0, #1
 80124c2:	d1f3      	bne.n	80124ac <__sfputs_r+0xa>
 80124c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080124c8 <_vfiprintf_r>:
 80124c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124cc:	460d      	mov	r5, r1
 80124ce:	b09d      	sub	sp, #116	@ 0x74
 80124d0:	4614      	mov	r4, r2
 80124d2:	4698      	mov	r8, r3
 80124d4:	4606      	mov	r6, r0
 80124d6:	b118      	cbz	r0, 80124e0 <_vfiprintf_r+0x18>
 80124d8:	6a03      	ldr	r3, [r0, #32]
 80124da:	b90b      	cbnz	r3, 80124e0 <_vfiprintf_r+0x18>
 80124dc:	f7fd f81a 	bl	800f514 <__sinit>
 80124e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124e2:	07d9      	lsls	r1, r3, #31
 80124e4:	d405      	bmi.n	80124f2 <_vfiprintf_r+0x2a>
 80124e6:	89ab      	ldrh	r3, [r5, #12]
 80124e8:	059a      	lsls	r2, r3, #22
 80124ea:	d402      	bmi.n	80124f2 <_vfiprintf_r+0x2a>
 80124ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124ee:	f7fd fa80 	bl	800f9f2 <__retarget_lock_acquire_recursive>
 80124f2:	89ab      	ldrh	r3, [r5, #12]
 80124f4:	071b      	lsls	r3, r3, #28
 80124f6:	d501      	bpl.n	80124fc <_vfiprintf_r+0x34>
 80124f8:	692b      	ldr	r3, [r5, #16]
 80124fa:	b99b      	cbnz	r3, 8012524 <_vfiprintf_r+0x5c>
 80124fc:	4629      	mov	r1, r5
 80124fe:	4630      	mov	r0, r6
 8012500:	f7fd f97c 	bl	800f7fc <__swsetup_r>
 8012504:	b170      	cbz	r0, 8012524 <_vfiprintf_r+0x5c>
 8012506:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012508:	07dc      	lsls	r4, r3, #31
 801250a:	d504      	bpl.n	8012516 <_vfiprintf_r+0x4e>
 801250c:	f04f 30ff 	mov.w	r0, #4294967295
 8012510:	b01d      	add	sp, #116	@ 0x74
 8012512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012516:	89ab      	ldrh	r3, [r5, #12]
 8012518:	0598      	lsls	r0, r3, #22
 801251a:	d4f7      	bmi.n	801250c <_vfiprintf_r+0x44>
 801251c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801251e:	f7fd fa69 	bl	800f9f4 <__retarget_lock_release_recursive>
 8012522:	e7f3      	b.n	801250c <_vfiprintf_r+0x44>
 8012524:	2300      	movs	r3, #0
 8012526:	9309      	str	r3, [sp, #36]	@ 0x24
 8012528:	2320      	movs	r3, #32
 801252a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801252e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012532:	2330      	movs	r3, #48	@ 0x30
 8012534:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80126e4 <_vfiprintf_r+0x21c>
 8012538:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801253c:	f04f 0901 	mov.w	r9, #1
 8012540:	4623      	mov	r3, r4
 8012542:	469a      	mov	sl, r3
 8012544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012548:	b10a      	cbz	r2, 801254e <_vfiprintf_r+0x86>
 801254a:	2a25      	cmp	r2, #37	@ 0x25
 801254c:	d1f9      	bne.n	8012542 <_vfiprintf_r+0x7a>
 801254e:	ebba 0b04 	subs.w	fp, sl, r4
 8012552:	d00b      	beq.n	801256c <_vfiprintf_r+0xa4>
 8012554:	465b      	mov	r3, fp
 8012556:	4622      	mov	r2, r4
 8012558:	4629      	mov	r1, r5
 801255a:	4630      	mov	r0, r6
 801255c:	f7ff ffa1 	bl	80124a2 <__sfputs_r>
 8012560:	3001      	adds	r0, #1
 8012562:	f000 80a7 	beq.w	80126b4 <_vfiprintf_r+0x1ec>
 8012566:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012568:	445a      	add	r2, fp
 801256a:	9209      	str	r2, [sp, #36]	@ 0x24
 801256c:	f89a 3000 	ldrb.w	r3, [sl]
 8012570:	2b00      	cmp	r3, #0
 8012572:	f000 809f 	beq.w	80126b4 <_vfiprintf_r+0x1ec>
 8012576:	2300      	movs	r3, #0
 8012578:	f04f 32ff 	mov.w	r2, #4294967295
 801257c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012580:	f10a 0a01 	add.w	sl, sl, #1
 8012584:	9304      	str	r3, [sp, #16]
 8012586:	9307      	str	r3, [sp, #28]
 8012588:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801258c:	931a      	str	r3, [sp, #104]	@ 0x68
 801258e:	4654      	mov	r4, sl
 8012590:	2205      	movs	r2, #5
 8012592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012596:	4853      	ldr	r0, [pc, #332]	@ (80126e4 <_vfiprintf_r+0x21c>)
 8012598:	f7ed fe1a 	bl	80001d0 <memchr>
 801259c:	9a04      	ldr	r2, [sp, #16]
 801259e:	b9d8      	cbnz	r0, 80125d8 <_vfiprintf_r+0x110>
 80125a0:	06d1      	lsls	r1, r2, #27
 80125a2:	bf44      	itt	mi
 80125a4:	2320      	movmi	r3, #32
 80125a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125aa:	0713      	lsls	r3, r2, #28
 80125ac:	bf44      	itt	mi
 80125ae:	232b      	movmi	r3, #43	@ 0x2b
 80125b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125b4:	f89a 3000 	ldrb.w	r3, [sl]
 80125b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80125ba:	d015      	beq.n	80125e8 <_vfiprintf_r+0x120>
 80125bc:	9a07      	ldr	r2, [sp, #28]
 80125be:	4654      	mov	r4, sl
 80125c0:	2000      	movs	r0, #0
 80125c2:	f04f 0c0a 	mov.w	ip, #10
 80125c6:	4621      	mov	r1, r4
 80125c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125cc:	3b30      	subs	r3, #48	@ 0x30
 80125ce:	2b09      	cmp	r3, #9
 80125d0:	d94b      	bls.n	801266a <_vfiprintf_r+0x1a2>
 80125d2:	b1b0      	cbz	r0, 8012602 <_vfiprintf_r+0x13a>
 80125d4:	9207      	str	r2, [sp, #28]
 80125d6:	e014      	b.n	8012602 <_vfiprintf_r+0x13a>
 80125d8:	eba0 0308 	sub.w	r3, r0, r8
 80125dc:	fa09 f303 	lsl.w	r3, r9, r3
 80125e0:	4313      	orrs	r3, r2
 80125e2:	9304      	str	r3, [sp, #16]
 80125e4:	46a2      	mov	sl, r4
 80125e6:	e7d2      	b.n	801258e <_vfiprintf_r+0xc6>
 80125e8:	9b03      	ldr	r3, [sp, #12]
 80125ea:	1d19      	adds	r1, r3, #4
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	9103      	str	r1, [sp, #12]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	bfbb      	ittet	lt
 80125f4:	425b      	neglt	r3, r3
 80125f6:	f042 0202 	orrlt.w	r2, r2, #2
 80125fa:	9307      	strge	r3, [sp, #28]
 80125fc:	9307      	strlt	r3, [sp, #28]
 80125fe:	bfb8      	it	lt
 8012600:	9204      	strlt	r2, [sp, #16]
 8012602:	7823      	ldrb	r3, [r4, #0]
 8012604:	2b2e      	cmp	r3, #46	@ 0x2e
 8012606:	d10a      	bne.n	801261e <_vfiprintf_r+0x156>
 8012608:	7863      	ldrb	r3, [r4, #1]
 801260a:	2b2a      	cmp	r3, #42	@ 0x2a
 801260c:	d132      	bne.n	8012674 <_vfiprintf_r+0x1ac>
 801260e:	9b03      	ldr	r3, [sp, #12]
 8012610:	1d1a      	adds	r2, r3, #4
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	9203      	str	r2, [sp, #12]
 8012616:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801261a:	3402      	adds	r4, #2
 801261c:	9305      	str	r3, [sp, #20]
 801261e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80126f4 <_vfiprintf_r+0x22c>
 8012622:	7821      	ldrb	r1, [r4, #0]
 8012624:	2203      	movs	r2, #3
 8012626:	4650      	mov	r0, sl
 8012628:	f7ed fdd2 	bl	80001d0 <memchr>
 801262c:	b138      	cbz	r0, 801263e <_vfiprintf_r+0x176>
 801262e:	9b04      	ldr	r3, [sp, #16]
 8012630:	eba0 000a 	sub.w	r0, r0, sl
 8012634:	2240      	movs	r2, #64	@ 0x40
 8012636:	4082      	lsls	r2, r0
 8012638:	4313      	orrs	r3, r2
 801263a:	3401      	adds	r4, #1
 801263c:	9304      	str	r3, [sp, #16]
 801263e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012642:	4829      	ldr	r0, [pc, #164]	@ (80126e8 <_vfiprintf_r+0x220>)
 8012644:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012648:	2206      	movs	r2, #6
 801264a:	f7ed fdc1 	bl	80001d0 <memchr>
 801264e:	2800      	cmp	r0, #0
 8012650:	d03f      	beq.n	80126d2 <_vfiprintf_r+0x20a>
 8012652:	4b26      	ldr	r3, [pc, #152]	@ (80126ec <_vfiprintf_r+0x224>)
 8012654:	bb1b      	cbnz	r3, 801269e <_vfiprintf_r+0x1d6>
 8012656:	9b03      	ldr	r3, [sp, #12]
 8012658:	3307      	adds	r3, #7
 801265a:	f023 0307 	bic.w	r3, r3, #7
 801265e:	3308      	adds	r3, #8
 8012660:	9303      	str	r3, [sp, #12]
 8012662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012664:	443b      	add	r3, r7
 8012666:	9309      	str	r3, [sp, #36]	@ 0x24
 8012668:	e76a      	b.n	8012540 <_vfiprintf_r+0x78>
 801266a:	fb0c 3202 	mla	r2, ip, r2, r3
 801266e:	460c      	mov	r4, r1
 8012670:	2001      	movs	r0, #1
 8012672:	e7a8      	b.n	80125c6 <_vfiprintf_r+0xfe>
 8012674:	2300      	movs	r3, #0
 8012676:	3401      	adds	r4, #1
 8012678:	9305      	str	r3, [sp, #20]
 801267a:	4619      	mov	r1, r3
 801267c:	f04f 0c0a 	mov.w	ip, #10
 8012680:	4620      	mov	r0, r4
 8012682:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012686:	3a30      	subs	r2, #48	@ 0x30
 8012688:	2a09      	cmp	r2, #9
 801268a:	d903      	bls.n	8012694 <_vfiprintf_r+0x1cc>
 801268c:	2b00      	cmp	r3, #0
 801268e:	d0c6      	beq.n	801261e <_vfiprintf_r+0x156>
 8012690:	9105      	str	r1, [sp, #20]
 8012692:	e7c4      	b.n	801261e <_vfiprintf_r+0x156>
 8012694:	fb0c 2101 	mla	r1, ip, r1, r2
 8012698:	4604      	mov	r4, r0
 801269a:	2301      	movs	r3, #1
 801269c:	e7f0      	b.n	8012680 <_vfiprintf_r+0x1b8>
 801269e:	ab03      	add	r3, sp, #12
 80126a0:	9300      	str	r3, [sp, #0]
 80126a2:	462a      	mov	r2, r5
 80126a4:	4b12      	ldr	r3, [pc, #72]	@ (80126f0 <_vfiprintf_r+0x228>)
 80126a6:	a904      	add	r1, sp, #16
 80126a8:	4630      	mov	r0, r6
 80126aa:	f7fc f81b 	bl	800e6e4 <_printf_float>
 80126ae:	4607      	mov	r7, r0
 80126b0:	1c78      	adds	r0, r7, #1
 80126b2:	d1d6      	bne.n	8012662 <_vfiprintf_r+0x19a>
 80126b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80126b6:	07d9      	lsls	r1, r3, #31
 80126b8:	d405      	bmi.n	80126c6 <_vfiprintf_r+0x1fe>
 80126ba:	89ab      	ldrh	r3, [r5, #12]
 80126bc:	059a      	lsls	r2, r3, #22
 80126be:	d402      	bmi.n	80126c6 <_vfiprintf_r+0x1fe>
 80126c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80126c2:	f7fd f997 	bl	800f9f4 <__retarget_lock_release_recursive>
 80126c6:	89ab      	ldrh	r3, [r5, #12]
 80126c8:	065b      	lsls	r3, r3, #25
 80126ca:	f53f af1f 	bmi.w	801250c <_vfiprintf_r+0x44>
 80126ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80126d0:	e71e      	b.n	8012510 <_vfiprintf_r+0x48>
 80126d2:	ab03      	add	r3, sp, #12
 80126d4:	9300      	str	r3, [sp, #0]
 80126d6:	462a      	mov	r2, r5
 80126d8:	4b05      	ldr	r3, [pc, #20]	@ (80126f0 <_vfiprintf_r+0x228>)
 80126da:	a904      	add	r1, sp, #16
 80126dc:	4630      	mov	r0, r6
 80126de:	f7fc fa99 	bl	800ec14 <_printf_i>
 80126e2:	e7e4      	b.n	80126ae <_vfiprintf_r+0x1e6>
 80126e4:	08013c98 	.word	0x08013c98
 80126e8:	08013ca2 	.word	0x08013ca2
 80126ec:	0800e6e5 	.word	0x0800e6e5
 80126f0:	080124a3 	.word	0x080124a3
 80126f4:	08013c9e 	.word	0x08013c9e

080126f8 <_scanf_chars>:
 80126f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126fc:	4615      	mov	r5, r2
 80126fe:	688a      	ldr	r2, [r1, #8]
 8012700:	4680      	mov	r8, r0
 8012702:	460c      	mov	r4, r1
 8012704:	b932      	cbnz	r2, 8012714 <_scanf_chars+0x1c>
 8012706:	698a      	ldr	r2, [r1, #24]
 8012708:	2a00      	cmp	r2, #0
 801270a:	bf14      	ite	ne
 801270c:	f04f 32ff 	movne.w	r2, #4294967295
 8012710:	2201      	moveq	r2, #1
 8012712:	608a      	str	r2, [r1, #8]
 8012714:	6822      	ldr	r2, [r4, #0]
 8012716:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80127a8 <_scanf_chars+0xb0>
 801271a:	06d1      	lsls	r1, r2, #27
 801271c:	bf5f      	itttt	pl
 801271e:	681a      	ldrpl	r2, [r3, #0]
 8012720:	1d11      	addpl	r1, r2, #4
 8012722:	6019      	strpl	r1, [r3, #0]
 8012724:	6816      	ldrpl	r6, [r2, #0]
 8012726:	2700      	movs	r7, #0
 8012728:	69a0      	ldr	r0, [r4, #24]
 801272a:	b188      	cbz	r0, 8012750 <_scanf_chars+0x58>
 801272c:	2801      	cmp	r0, #1
 801272e:	d107      	bne.n	8012740 <_scanf_chars+0x48>
 8012730:	682b      	ldr	r3, [r5, #0]
 8012732:	781a      	ldrb	r2, [r3, #0]
 8012734:	6963      	ldr	r3, [r4, #20]
 8012736:	5c9b      	ldrb	r3, [r3, r2]
 8012738:	b953      	cbnz	r3, 8012750 <_scanf_chars+0x58>
 801273a:	2f00      	cmp	r7, #0
 801273c:	d031      	beq.n	80127a2 <_scanf_chars+0xaa>
 801273e:	e022      	b.n	8012786 <_scanf_chars+0x8e>
 8012740:	2802      	cmp	r0, #2
 8012742:	d120      	bne.n	8012786 <_scanf_chars+0x8e>
 8012744:	682b      	ldr	r3, [r5, #0]
 8012746:	781b      	ldrb	r3, [r3, #0]
 8012748:	f819 3003 	ldrb.w	r3, [r9, r3]
 801274c:	071b      	lsls	r3, r3, #28
 801274e:	d41a      	bmi.n	8012786 <_scanf_chars+0x8e>
 8012750:	6823      	ldr	r3, [r4, #0]
 8012752:	06da      	lsls	r2, r3, #27
 8012754:	bf5e      	ittt	pl
 8012756:	682b      	ldrpl	r3, [r5, #0]
 8012758:	781b      	ldrbpl	r3, [r3, #0]
 801275a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801275e:	682a      	ldr	r2, [r5, #0]
 8012760:	686b      	ldr	r3, [r5, #4]
 8012762:	3201      	adds	r2, #1
 8012764:	602a      	str	r2, [r5, #0]
 8012766:	68a2      	ldr	r2, [r4, #8]
 8012768:	3b01      	subs	r3, #1
 801276a:	3a01      	subs	r2, #1
 801276c:	606b      	str	r3, [r5, #4]
 801276e:	3701      	adds	r7, #1
 8012770:	60a2      	str	r2, [r4, #8]
 8012772:	b142      	cbz	r2, 8012786 <_scanf_chars+0x8e>
 8012774:	2b00      	cmp	r3, #0
 8012776:	dcd7      	bgt.n	8012728 <_scanf_chars+0x30>
 8012778:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801277c:	4629      	mov	r1, r5
 801277e:	4640      	mov	r0, r8
 8012780:	4798      	blx	r3
 8012782:	2800      	cmp	r0, #0
 8012784:	d0d0      	beq.n	8012728 <_scanf_chars+0x30>
 8012786:	6823      	ldr	r3, [r4, #0]
 8012788:	f013 0310 	ands.w	r3, r3, #16
 801278c:	d105      	bne.n	801279a <_scanf_chars+0xa2>
 801278e:	68e2      	ldr	r2, [r4, #12]
 8012790:	3201      	adds	r2, #1
 8012792:	60e2      	str	r2, [r4, #12]
 8012794:	69a2      	ldr	r2, [r4, #24]
 8012796:	b102      	cbz	r2, 801279a <_scanf_chars+0xa2>
 8012798:	7033      	strb	r3, [r6, #0]
 801279a:	6923      	ldr	r3, [r4, #16]
 801279c:	443b      	add	r3, r7
 801279e:	6123      	str	r3, [r4, #16]
 80127a0:	2000      	movs	r0, #0
 80127a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127a6:	bf00      	nop
 80127a8:	08013925 	.word	0x08013925

080127ac <_scanf_i>:
 80127ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127b0:	4698      	mov	r8, r3
 80127b2:	4b74      	ldr	r3, [pc, #464]	@ (8012984 <_scanf_i+0x1d8>)
 80127b4:	460c      	mov	r4, r1
 80127b6:	4682      	mov	sl, r0
 80127b8:	4616      	mov	r6, r2
 80127ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80127be:	b087      	sub	sp, #28
 80127c0:	ab03      	add	r3, sp, #12
 80127c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80127c6:	4b70      	ldr	r3, [pc, #448]	@ (8012988 <_scanf_i+0x1dc>)
 80127c8:	69a1      	ldr	r1, [r4, #24]
 80127ca:	4a70      	ldr	r2, [pc, #448]	@ (801298c <_scanf_i+0x1e0>)
 80127cc:	2903      	cmp	r1, #3
 80127ce:	bf08      	it	eq
 80127d0:	461a      	moveq	r2, r3
 80127d2:	68a3      	ldr	r3, [r4, #8]
 80127d4:	9201      	str	r2, [sp, #4]
 80127d6:	1e5a      	subs	r2, r3, #1
 80127d8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80127dc:	bf88      	it	hi
 80127de:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80127e2:	4627      	mov	r7, r4
 80127e4:	bf82      	ittt	hi
 80127e6:	eb03 0905 	addhi.w	r9, r3, r5
 80127ea:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80127ee:	60a3      	strhi	r3, [r4, #8]
 80127f0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80127f4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80127f8:	bf98      	it	ls
 80127fa:	f04f 0900 	movls.w	r9, #0
 80127fe:	6023      	str	r3, [r4, #0]
 8012800:	463d      	mov	r5, r7
 8012802:	f04f 0b00 	mov.w	fp, #0
 8012806:	6831      	ldr	r1, [r6, #0]
 8012808:	ab03      	add	r3, sp, #12
 801280a:	7809      	ldrb	r1, [r1, #0]
 801280c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012810:	2202      	movs	r2, #2
 8012812:	f7ed fcdd 	bl	80001d0 <memchr>
 8012816:	b328      	cbz	r0, 8012864 <_scanf_i+0xb8>
 8012818:	f1bb 0f01 	cmp.w	fp, #1
 801281c:	d159      	bne.n	80128d2 <_scanf_i+0x126>
 801281e:	6862      	ldr	r2, [r4, #4]
 8012820:	b92a      	cbnz	r2, 801282e <_scanf_i+0x82>
 8012822:	6822      	ldr	r2, [r4, #0]
 8012824:	2108      	movs	r1, #8
 8012826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801282a:	6061      	str	r1, [r4, #4]
 801282c:	6022      	str	r2, [r4, #0]
 801282e:	6822      	ldr	r2, [r4, #0]
 8012830:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012834:	6022      	str	r2, [r4, #0]
 8012836:	68a2      	ldr	r2, [r4, #8]
 8012838:	1e51      	subs	r1, r2, #1
 801283a:	60a1      	str	r1, [r4, #8]
 801283c:	b192      	cbz	r2, 8012864 <_scanf_i+0xb8>
 801283e:	6832      	ldr	r2, [r6, #0]
 8012840:	1c51      	adds	r1, r2, #1
 8012842:	6031      	str	r1, [r6, #0]
 8012844:	7812      	ldrb	r2, [r2, #0]
 8012846:	f805 2b01 	strb.w	r2, [r5], #1
 801284a:	6872      	ldr	r2, [r6, #4]
 801284c:	3a01      	subs	r2, #1
 801284e:	2a00      	cmp	r2, #0
 8012850:	6072      	str	r2, [r6, #4]
 8012852:	dc07      	bgt.n	8012864 <_scanf_i+0xb8>
 8012854:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012858:	4631      	mov	r1, r6
 801285a:	4650      	mov	r0, sl
 801285c:	4790      	blx	r2
 801285e:	2800      	cmp	r0, #0
 8012860:	f040 8085 	bne.w	801296e <_scanf_i+0x1c2>
 8012864:	f10b 0b01 	add.w	fp, fp, #1
 8012868:	f1bb 0f03 	cmp.w	fp, #3
 801286c:	d1cb      	bne.n	8012806 <_scanf_i+0x5a>
 801286e:	6863      	ldr	r3, [r4, #4]
 8012870:	b90b      	cbnz	r3, 8012876 <_scanf_i+0xca>
 8012872:	230a      	movs	r3, #10
 8012874:	6063      	str	r3, [r4, #4]
 8012876:	6863      	ldr	r3, [r4, #4]
 8012878:	4945      	ldr	r1, [pc, #276]	@ (8012990 <_scanf_i+0x1e4>)
 801287a:	6960      	ldr	r0, [r4, #20]
 801287c:	1ac9      	subs	r1, r1, r3
 801287e:	f000 f8eb 	bl	8012a58 <__sccl>
 8012882:	f04f 0b00 	mov.w	fp, #0
 8012886:	68a3      	ldr	r3, [r4, #8]
 8012888:	6822      	ldr	r2, [r4, #0]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d03d      	beq.n	801290a <_scanf_i+0x15e>
 801288e:	6831      	ldr	r1, [r6, #0]
 8012890:	6960      	ldr	r0, [r4, #20]
 8012892:	f891 c000 	ldrb.w	ip, [r1]
 8012896:	f810 000c 	ldrb.w	r0, [r0, ip]
 801289a:	2800      	cmp	r0, #0
 801289c:	d035      	beq.n	801290a <_scanf_i+0x15e>
 801289e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80128a2:	d124      	bne.n	80128ee <_scanf_i+0x142>
 80128a4:	0510      	lsls	r0, r2, #20
 80128a6:	d522      	bpl.n	80128ee <_scanf_i+0x142>
 80128a8:	f10b 0b01 	add.w	fp, fp, #1
 80128ac:	f1b9 0f00 	cmp.w	r9, #0
 80128b0:	d003      	beq.n	80128ba <_scanf_i+0x10e>
 80128b2:	3301      	adds	r3, #1
 80128b4:	f109 39ff 	add.w	r9, r9, #4294967295
 80128b8:	60a3      	str	r3, [r4, #8]
 80128ba:	6873      	ldr	r3, [r6, #4]
 80128bc:	3b01      	subs	r3, #1
 80128be:	2b00      	cmp	r3, #0
 80128c0:	6073      	str	r3, [r6, #4]
 80128c2:	dd1b      	ble.n	80128fc <_scanf_i+0x150>
 80128c4:	6833      	ldr	r3, [r6, #0]
 80128c6:	3301      	adds	r3, #1
 80128c8:	6033      	str	r3, [r6, #0]
 80128ca:	68a3      	ldr	r3, [r4, #8]
 80128cc:	3b01      	subs	r3, #1
 80128ce:	60a3      	str	r3, [r4, #8]
 80128d0:	e7d9      	b.n	8012886 <_scanf_i+0xda>
 80128d2:	f1bb 0f02 	cmp.w	fp, #2
 80128d6:	d1ae      	bne.n	8012836 <_scanf_i+0x8a>
 80128d8:	6822      	ldr	r2, [r4, #0]
 80128da:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80128de:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80128e2:	d1bf      	bne.n	8012864 <_scanf_i+0xb8>
 80128e4:	2110      	movs	r1, #16
 80128e6:	6061      	str	r1, [r4, #4]
 80128e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80128ec:	e7a2      	b.n	8012834 <_scanf_i+0x88>
 80128ee:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80128f2:	6022      	str	r2, [r4, #0]
 80128f4:	780b      	ldrb	r3, [r1, #0]
 80128f6:	f805 3b01 	strb.w	r3, [r5], #1
 80128fa:	e7de      	b.n	80128ba <_scanf_i+0x10e>
 80128fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012900:	4631      	mov	r1, r6
 8012902:	4650      	mov	r0, sl
 8012904:	4798      	blx	r3
 8012906:	2800      	cmp	r0, #0
 8012908:	d0df      	beq.n	80128ca <_scanf_i+0x11e>
 801290a:	6823      	ldr	r3, [r4, #0]
 801290c:	05d9      	lsls	r1, r3, #23
 801290e:	d50d      	bpl.n	801292c <_scanf_i+0x180>
 8012910:	42bd      	cmp	r5, r7
 8012912:	d909      	bls.n	8012928 <_scanf_i+0x17c>
 8012914:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012918:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801291c:	4632      	mov	r2, r6
 801291e:	4650      	mov	r0, sl
 8012920:	4798      	blx	r3
 8012922:	f105 39ff 	add.w	r9, r5, #4294967295
 8012926:	464d      	mov	r5, r9
 8012928:	42bd      	cmp	r5, r7
 801292a:	d028      	beq.n	801297e <_scanf_i+0x1d2>
 801292c:	6822      	ldr	r2, [r4, #0]
 801292e:	f012 0210 	ands.w	r2, r2, #16
 8012932:	d113      	bne.n	801295c <_scanf_i+0x1b0>
 8012934:	702a      	strb	r2, [r5, #0]
 8012936:	6863      	ldr	r3, [r4, #4]
 8012938:	9e01      	ldr	r6, [sp, #4]
 801293a:	4639      	mov	r1, r7
 801293c:	4650      	mov	r0, sl
 801293e:	47b0      	blx	r6
 8012940:	f8d8 3000 	ldr.w	r3, [r8]
 8012944:	6821      	ldr	r1, [r4, #0]
 8012946:	1d1a      	adds	r2, r3, #4
 8012948:	f8c8 2000 	str.w	r2, [r8]
 801294c:	f011 0f20 	tst.w	r1, #32
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	d00f      	beq.n	8012974 <_scanf_i+0x1c8>
 8012954:	6018      	str	r0, [r3, #0]
 8012956:	68e3      	ldr	r3, [r4, #12]
 8012958:	3301      	adds	r3, #1
 801295a:	60e3      	str	r3, [r4, #12]
 801295c:	6923      	ldr	r3, [r4, #16]
 801295e:	1bed      	subs	r5, r5, r7
 8012960:	445d      	add	r5, fp
 8012962:	442b      	add	r3, r5
 8012964:	6123      	str	r3, [r4, #16]
 8012966:	2000      	movs	r0, #0
 8012968:	b007      	add	sp, #28
 801296a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801296e:	f04f 0b00 	mov.w	fp, #0
 8012972:	e7ca      	b.n	801290a <_scanf_i+0x15e>
 8012974:	07ca      	lsls	r2, r1, #31
 8012976:	bf4c      	ite	mi
 8012978:	8018      	strhmi	r0, [r3, #0]
 801297a:	6018      	strpl	r0, [r3, #0]
 801297c:	e7eb      	b.n	8012956 <_scanf_i+0x1aa>
 801297e:	2001      	movs	r0, #1
 8012980:	e7f2      	b.n	8012968 <_scanf_i+0x1bc>
 8012982:	bf00      	nop
 8012984:	080138e0 	.word	0x080138e0
 8012988:	0800e58d 	.word	0x0800e58d
 801298c:	0801341d 	.word	0x0801341d
 8012990:	08013cb9 	.word	0x08013cb9

08012994 <__swhatbuf_r>:
 8012994:	b570      	push	{r4, r5, r6, lr}
 8012996:	460c      	mov	r4, r1
 8012998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801299c:	2900      	cmp	r1, #0
 801299e:	b096      	sub	sp, #88	@ 0x58
 80129a0:	4615      	mov	r5, r2
 80129a2:	461e      	mov	r6, r3
 80129a4:	da0d      	bge.n	80129c2 <__swhatbuf_r+0x2e>
 80129a6:	89a3      	ldrh	r3, [r4, #12]
 80129a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80129ac:	f04f 0100 	mov.w	r1, #0
 80129b0:	bf14      	ite	ne
 80129b2:	2340      	movne	r3, #64	@ 0x40
 80129b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80129b8:	2000      	movs	r0, #0
 80129ba:	6031      	str	r1, [r6, #0]
 80129bc:	602b      	str	r3, [r5, #0]
 80129be:	b016      	add	sp, #88	@ 0x58
 80129c0:	bd70      	pop	{r4, r5, r6, pc}
 80129c2:	466a      	mov	r2, sp
 80129c4:	f000 f8d6 	bl	8012b74 <_fstat_r>
 80129c8:	2800      	cmp	r0, #0
 80129ca:	dbec      	blt.n	80129a6 <__swhatbuf_r+0x12>
 80129cc:	9901      	ldr	r1, [sp, #4]
 80129ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80129d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80129d6:	4259      	negs	r1, r3
 80129d8:	4159      	adcs	r1, r3
 80129da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80129de:	e7eb      	b.n	80129b8 <__swhatbuf_r+0x24>

080129e0 <__smakebuf_r>:
 80129e0:	898b      	ldrh	r3, [r1, #12]
 80129e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80129e4:	079d      	lsls	r5, r3, #30
 80129e6:	4606      	mov	r6, r0
 80129e8:	460c      	mov	r4, r1
 80129ea:	d507      	bpl.n	80129fc <__smakebuf_r+0x1c>
 80129ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80129f0:	6023      	str	r3, [r4, #0]
 80129f2:	6123      	str	r3, [r4, #16]
 80129f4:	2301      	movs	r3, #1
 80129f6:	6163      	str	r3, [r4, #20]
 80129f8:	b003      	add	sp, #12
 80129fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129fc:	ab01      	add	r3, sp, #4
 80129fe:	466a      	mov	r2, sp
 8012a00:	f7ff ffc8 	bl	8012994 <__swhatbuf_r>
 8012a04:	9f00      	ldr	r7, [sp, #0]
 8012a06:	4605      	mov	r5, r0
 8012a08:	4639      	mov	r1, r7
 8012a0a:	4630      	mov	r0, r6
 8012a0c:	f7fd fec8 	bl	80107a0 <_malloc_r>
 8012a10:	b948      	cbnz	r0, 8012a26 <__smakebuf_r+0x46>
 8012a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a16:	059a      	lsls	r2, r3, #22
 8012a18:	d4ee      	bmi.n	80129f8 <__smakebuf_r+0x18>
 8012a1a:	f023 0303 	bic.w	r3, r3, #3
 8012a1e:	f043 0302 	orr.w	r3, r3, #2
 8012a22:	81a3      	strh	r3, [r4, #12]
 8012a24:	e7e2      	b.n	80129ec <__smakebuf_r+0xc>
 8012a26:	89a3      	ldrh	r3, [r4, #12]
 8012a28:	6020      	str	r0, [r4, #0]
 8012a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a2e:	81a3      	strh	r3, [r4, #12]
 8012a30:	9b01      	ldr	r3, [sp, #4]
 8012a32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012a36:	b15b      	cbz	r3, 8012a50 <__smakebuf_r+0x70>
 8012a38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a3c:	4630      	mov	r0, r6
 8012a3e:	f000 f8ab 	bl	8012b98 <_isatty_r>
 8012a42:	b128      	cbz	r0, 8012a50 <__smakebuf_r+0x70>
 8012a44:	89a3      	ldrh	r3, [r4, #12]
 8012a46:	f023 0303 	bic.w	r3, r3, #3
 8012a4a:	f043 0301 	orr.w	r3, r3, #1
 8012a4e:	81a3      	strh	r3, [r4, #12]
 8012a50:	89a3      	ldrh	r3, [r4, #12]
 8012a52:	431d      	orrs	r5, r3
 8012a54:	81a5      	strh	r5, [r4, #12]
 8012a56:	e7cf      	b.n	80129f8 <__smakebuf_r+0x18>

08012a58 <__sccl>:
 8012a58:	b570      	push	{r4, r5, r6, lr}
 8012a5a:	780b      	ldrb	r3, [r1, #0]
 8012a5c:	4604      	mov	r4, r0
 8012a5e:	2b5e      	cmp	r3, #94	@ 0x5e
 8012a60:	bf0b      	itete	eq
 8012a62:	784b      	ldrbeq	r3, [r1, #1]
 8012a64:	1c4a      	addne	r2, r1, #1
 8012a66:	1c8a      	addeq	r2, r1, #2
 8012a68:	2100      	movne	r1, #0
 8012a6a:	bf08      	it	eq
 8012a6c:	2101      	moveq	r1, #1
 8012a6e:	3801      	subs	r0, #1
 8012a70:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012a74:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012a78:	42a8      	cmp	r0, r5
 8012a7a:	d1fb      	bne.n	8012a74 <__sccl+0x1c>
 8012a7c:	b90b      	cbnz	r3, 8012a82 <__sccl+0x2a>
 8012a7e:	1e50      	subs	r0, r2, #1
 8012a80:	bd70      	pop	{r4, r5, r6, pc}
 8012a82:	f081 0101 	eor.w	r1, r1, #1
 8012a86:	54e1      	strb	r1, [r4, r3]
 8012a88:	4610      	mov	r0, r2
 8012a8a:	4602      	mov	r2, r0
 8012a8c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012a90:	2d2d      	cmp	r5, #45	@ 0x2d
 8012a92:	d005      	beq.n	8012aa0 <__sccl+0x48>
 8012a94:	2d5d      	cmp	r5, #93	@ 0x5d
 8012a96:	d016      	beq.n	8012ac6 <__sccl+0x6e>
 8012a98:	2d00      	cmp	r5, #0
 8012a9a:	d0f1      	beq.n	8012a80 <__sccl+0x28>
 8012a9c:	462b      	mov	r3, r5
 8012a9e:	e7f2      	b.n	8012a86 <__sccl+0x2e>
 8012aa0:	7846      	ldrb	r6, [r0, #1]
 8012aa2:	2e5d      	cmp	r6, #93	@ 0x5d
 8012aa4:	d0fa      	beq.n	8012a9c <__sccl+0x44>
 8012aa6:	42b3      	cmp	r3, r6
 8012aa8:	dcf8      	bgt.n	8012a9c <__sccl+0x44>
 8012aaa:	3002      	adds	r0, #2
 8012aac:	461a      	mov	r2, r3
 8012aae:	3201      	adds	r2, #1
 8012ab0:	4296      	cmp	r6, r2
 8012ab2:	54a1      	strb	r1, [r4, r2]
 8012ab4:	dcfb      	bgt.n	8012aae <__sccl+0x56>
 8012ab6:	1af2      	subs	r2, r6, r3
 8012ab8:	3a01      	subs	r2, #1
 8012aba:	1c5d      	adds	r5, r3, #1
 8012abc:	42b3      	cmp	r3, r6
 8012abe:	bfa8      	it	ge
 8012ac0:	2200      	movge	r2, #0
 8012ac2:	18ab      	adds	r3, r5, r2
 8012ac4:	e7e1      	b.n	8012a8a <__sccl+0x32>
 8012ac6:	4610      	mov	r0, r2
 8012ac8:	e7da      	b.n	8012a80 <__sccl+0x28>

08012aca <__submore>:
 8012aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ace:	460c      	mov	r4, r1
 8012ad0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012ad2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012ad6:	4299      	cmp	r1, r3
 8012ad8:	d11d      	bne.n	8012b16 <__submore+0x4c>
 8012ada:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012ade:	f7fd fe5f 	bl	80107a0 <_malloc_r>
 8012ae2:	b918      	cbnz	r0, 8012aec <__submore+0x22>
 8012ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012af0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012af2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012af6:	6360      	str	r0, [r4, #52]	@ 0x34
 8012af8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012afc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012b00:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012b04:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012b08:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012b0c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012b10:	6020      	str	r0, [r4, #0]
 8012b12:	2000      	movs	r0, #0
 8012b14:	e7e8      	b.n	8012ae8 <__submore+0x1e>
 8012b16:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012b18:	0077      	lsls	r7, r6, #1
 8012b1a:	463a      	mov	r2, r7
 8012b1c:	f000 fbe1 	bl	80132e2 <_realloc_r>
 8012b20:	4605      	mov	r5, r0
 8012b22:	2800      	cmp	r0, #0
 8012b24:	d0de      	beq.n	8012ae4 <__submore+0x1a>
 8012b26:	eb00 0806 	add.w	r8, r0, r6
 8012b2a:	4601      	mov	r1, r0
 8012b2c:	4632      	mov	r2, r6
 8012b2e:	4640      	mov	r0, r8
 8012b30:	f7fc ff61 	bl	800f9f6 <memcpy>
 8012b34:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012b38:	f8c4 8000 	str.w	r8, [r4]
 8012b3c:	e7e9      	b.n	8012b12 <__submore+0x48>

08012b3e <memmove>:
 8012b3e:	4288      	cmp	r0, r1
 8012b40:	b510      	push	{r4, lr}
 8012b42:	eb01 0402 	add.w	r4, r1, r2
 8012b46:	d902      	bls.n	8012b4e <memmove+0x10>
 8012b48:	4284      	cmp	r4, r0
 8012b4a:	4623      	mov	r3, r4
 8012b4c:	d807      	bhi.n	8012b5e <memmove+0x20>
 8012b4e:	1e43      	subs	r3, r0, #1
 8012b50:	42a1      	cmp	r1, r4
 8012b52:	d008      	beq.n	8012b66 <memmove+0x28>
 8012b54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b58:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b5c:	e7f8      	b.n	8012b50 <memmove+0x12>
 8012b5e:	4402      	add	r2, r0
 8012b60:	4601      	mov	r1, r0
 8012b62:	428a      	cmp	r2, r1
 8012b64:	d100      	bne.n	8012b68 <memmove+0x2a>
 8012b66:	bd10      	pop	{r4, pc}
 8012b68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b6c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b70:	e7f7      	b.n	8012b62 <memmove+0x24>
	...

08012b74 <_fstat_r>:
 8012b74:	b538      	push	{r3, r4, r5, lr}
 8012b76:	4d07      	ldr	r5, [pc, #28]	@ (8012b94 <_fstat_r+0x20>)
 8012b78:	2300      	movs	r3, #0
 8012b7a:	4604      	mov	r4, r0
 8012b7c:	4608      	mov	r0, r1
 8012b7e:	4611      	mov	r1, r2
 8012b80:	602b      	str	r3, [r5, #0]
 8012b82:	f7ef ff96 	bl	8002ab2 <_fstat>
 8012b86:	1c43      	adds	r3, r0, #1
 8012b88:	d102      	bne.n	8012b90 <_fstat_r+0x1c>
 8012b8a:	682b      	ldr	r3, [r5, #0]
 8012b8c:	b103      	cbz	r3, 8012b90 <_fstat_r+0x1c>
 8012b8e:	6023      	str	r3, [r4, #0]
 8012b90:	bd38      	pop	{r3, r4, r5, pc}
 8012b92:	bf00      	nop
 8012b94:	20002250 	.word	0x20002250

08012b98 <_isatty_r>:
 8012b98:	b538      	push	{r3, r4, r5, lr}
 8012b9a:	4d06      	ldr	r5, [pc, #24]	@ (8012bb4 <_isatty_r+0x1c>)
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	4604      	mov	r4, r0
 8012ba0:	4608      	mov	r0, r1
 8012ba2:	602b      	str	r3, [r5, #0]
 8012ba4:	f7ef ff95 	bl	8002ad2 <_isatty>
 8012ba8:	1c43      	adds	r3, r0, #1
 8012baa:	d102      	bne.n	8012bb2 <_isatty_r+0x1a>
 8012bac:	682b      	ldr	r3, [r5, #0]
 8012bae:	b103      	cbz	r3, 8012bb2 <_isatty_r+0x1a>
 8012bb0:	6023      	str	r3, [r4, #0]
 8012bb2:	bd38      	pop	{r3, r4, r5, pc}
 8012bb4:	20002250 	.word	0x20002250

08012bb8 <_sbrk_r>:
 8012bb8:	b538      	push	{r3, r4, r5, lr}
 8012bba:	4d06      	ldr	r5, [pc, #24]	@ (8012bd4 <_sbrk_r+0x1c>)
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	4604      	mov	r4, r0
 8012bc0:	4608      	mov	r0, r1
 8012bc2:	602b      	str	r3, [r5, #0]
 8012bc4:	f7ef ff9e 	bl	8002b04 <_sbrk>
 8012bc8:	1c43      	adds	r3, r0, #1
 8012bca:	d102      	bne.n	8012bd2 <_sbrk_r+0x1a>
 8012bcc:	682b      	ldr	r3, [r5, #0]
 8012bce:	b103      	cbz	r3, 8012bd2 <_sbrk_r+0x1a>
 8012bd0:	6023      	str	r3, [r4, #0]
 8012bd2:	bd38      	pop	{r3, r4, r5, pc}
 8012bd4:	20002250 	.word	0x20002250

08012bd8 <nan>:
 8012bd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012be0 <nan+0x8>
 8012bdc:	4770      	bx	lr
 8012bde:	bf00      	nop
 8012be0:	00000000 	.word	0x00000000
 8012be4:	7ff80000 	.word	0x7ff80000

08012be8 <__assert_func>:
 8012be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012bea:	4614      	mov	r4, r2
 8012bec:	461a      	mov	r2, r3
 8012bee:	4b09      	ldr	r3, [pc, #36]	@ (8012c14 <__assert_func+0x2c>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	4605      	mov	r5, r0
 8012bf4:	68d8      	ldr	r0, [r3, #12]
 8012bf6:	b954      	cbnz	r4, 8012c0e <__assert_func+0x26>
 8012bf8:	4b07      	ldr	r3, [pc, #28]	@ (8012c18 <__assert_func+0x30>)
 8012bfa:	461c      	mov	r4, r3
 8012bfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012c00:	9100      	str	r1, [sp, #0]
 8012c02:	462b      	mov	r3, r5
 8012c04:	4905      	ldr	r1, [pc, #20]	@ (8012c1c <__assert_func+0x34>)
 8012c06:	f000 fc19 	bl	801343c <fiprintf>
 8012c0a:	f000 fc29 	bl	8013460 <abort>
 8012c0e:	4b04      	ldr	r3, [pc, #16]	@ (8012c20 <__assert_func+0x38>)
 8012c10:	e7f4      	b.n	8012bfc <__assert_func+0x14>
 8012c12:	bf00      	nop
 8012c14:	200001a0 	.word	0x200001a0
 8012c18:	08013d07 	.word	0x08013d07
 8012c1c:	08013cd9 	.word	0x08013cd9
 8012c20:	08013ccc 	.word	0x08013ccc

08012c24 <_calloc_r>:
 8012c24:	b570      	push	{r4, r5, r6, lr}
 8012c26:	fba1 5402 	umull	r5, r4, r1, r2
 8012c2a:	b93c      	cbnz	r4, 8012c3c <_calloc_r+0x18>
 8012c2c:	4629      	mov	r1, r5
 8012c2e:	f7fd fdb7 	bl	80107a0 <_malloc_r>
 8012c32:	4606      	mov	r6, r0
 8012c34:	b928      	cbnz	r0, 8012c42 <_calloc_r+0x1e>
 8012c36:	2600      	movs	r6, #0
 8012c38:	4630      	mov	r0, r6
 8012c3a:	bd70      	pop	{r4, r5, r6, pc}
 8012c3c:	220c      	movs	r2, #12
 8012c3e:	6002      	str	r2, [r0, #0]
 8012c40:	e7f9      	b.n	8012c36 <_calloc_r+0x12>
 8012c42:	462a      	mov	r2, r5
 8012c44:	4621      	mov	r1, r4
 8012c46:	f7fc fe2f 	bl	800f8a8 <memset>
 8012c4a:	e7f5      	b.n	8012c38 <_calloc_r+0x14>

08012c4c <rshift>:
 8012c4c:	6903      	ldr	r3, [r0, #16]
 8012c4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012c52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012c56:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012c5a:	f100 0414 	add.w	r4, r0, #20
 8012c5e:	dd45      	ble.n	8012cec <rshift+0xa0>
 8012c60:	f011 011f 	ands.w	r1, r1, #31
 8012c64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012c68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012c6c:	d10c      	bne.n	8012c88 <rshift+0x3c>
 8012c6e:	f100 0710 	add.w	r7, r0, #16
 8012c72:	4629      	mov	r1, r5
 8012c74:	42b1      	cmp	r1, r6
 8012c76:	d334      	bcc.n	8012ce2 <rshift+0x96>
 8012c78:	1a9b      	subs	r3, r3, r2
 8012c7a:	009b      	lsls	r3, r3, #2
 8012c7c:	1eea      	subs	r2, r5, #3
 8012c7e:	4296      	cmp	r6, r2
 8012c80:	bf38      	it	cc
 8012c82:	2300      	movcc	r3, #0
 8012c84:	4423      	add	r3, r4
 8012c86:	e015      	b.n	8012cb4 <rshift+0x68>
 8012c88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012c8c:	f1c1 0820 	rsb	r8, r1, #32
 8012c90:	40cf      	lsrs	r7, r1
 8012c92:	f105 0e04 	add.w	lr, r5, #4
 8012c96:	46a1      	mov	r9, r4
 8012c98:	4576      	cmp	r6, lr
 8012c9a:	46f4      	mov	ip, lr
 8012c9c:	d815      	bhi.n	8012cca <rshift+0x7e>
 8012c9e:	1a9a      	subs	r2, r3, r2
 8012ca0:	0092      	lsls	r2, r2, #2
 8012ca2:	3a04      	subs	r2, #4
 8012ca4:	3501      	adds	r5, #1
 8012ca6:	42ae      	cmp	r6, r5
 8012ca8:	bf38      	it	cc
 8012caa:	2200      	movcc	r2, #0
 8012cac:	18a3      	adds	r3, r4, r2
 8012cae:	50a7      	str	r7, [r4, r2]
 8012cb0:	b107      	cbz	r7, 8012cb4 <rshift+0x68>
 8012cb2:	3304      	adds	r3, #4
 8012cb4:	1b1a      	subs	r2, r3, r4
 8012cb6:	42a3      	cmp	r3, r4
 8012cb8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012cbc:	bf08      	it	eq
 8012cbe:	2300      	moveq	r3, #0
 8012cc0:	6102      	str	r2, [r0, #16]
 8012cc2:	bf08      	it	eq
 8012cc4:	6143      	streq	r3, [r0, #20]
 8012cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012cca:	f8dc c000 	ldr.w	ip, [ip]
 8012cce:	fa0c fc08 	lsl.w	ip, ip, r8
 8012cd2:	ea4c 0707 	orr.w	r7, ip, r7
 8012cd6:	f849 7b04 	str.w	r7, [r9], #4
 8012cda:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012cde:	40cf      	lsrs	r7, r1
 8012ce0:	e7da      	b.n	8012c98 <rshift+0x4c>
 8012ce2:	f851 cb04 	ldr.w	ip, [r1], #4
 8012ce6:	f847 cf04 	str.w	ip, [r7, #4]!
 8012cea:	e7c3      	b.n	8012c74 <rshift+0x28>
 8012cec:	4623      	mov	r3, r4
 8012cee:	e7e1      	b.n	8012cb4 <rshift+0x68>

08012cf0 <__hexdig_fun>:
 8012cf0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012cf4:	2b09      	cmp	r3, #9
 8012cf6:	d802      	bhi.n	8012cfe <__hexdig_fun+0xe>
 8012cf8:	3820      	subs	r0, #32
 8012cfa:	b2c0      	uxtb	r0, r0
 8012cfc:	4770      	bx	lr
 8012cfe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012d02:	2b05      	cmp	r3, #5
 8012d04:	d801      	bhi.n	8012d0a <__hexdig_fun+0x1a>
 8012d06:	3847      	subs	r0, #71	@ 0x47
 8012d08:	e7f7      	b.n	8012cfa <__hexdig_fun+0xa>
 8012d0a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012d0e:	2b05      	cmp	r3, #5
 8012d10:	d801      	bhi.n	8012d16 <__hexdig_fun+0x26>
 8012d12:	3827      	subs	r0, #39	@ 0x27
 8012d14:	e7f1      	b.n	8012cfa <__hexdig_fun+0xa>
 8012d16:	2000      	movs	r0, #0
 8012d18:	4770      	bx	lr
	...

08012d1c <__gethex>:
 8012d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d20:	b085      	sub	sp, #20
 8012d22:	468a      	mov	sl, r1
 8012d24:	9302      	str	r3, [sp, #8]
 8012d26:	680b      	ldr	r3, [r1, #0]
 8012d28:	9001      	str	r0, [sp, #4]
 8012d2a:	4690      	mov	r8, r2
 8012d2c:	1c9c      	adds	r4, r3, #2
 8012d2e:	46a1      	mov	r9, r4
 8012d30:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012d34:	2830      	cmp	r0, #48	@ 0x30
 8012d36:	d0fa      	beq.n	8012d2e <__gethex+0x12>
 8012d38:	eba9 0303 	sub.w	r3, r9, r3
 8012d3c:	f1a3 0b02 	sub.w	fp, r3, #2
 8012d40:	f7ff ffd6 	bl	8012cf0 <__hexdig_fun>
 8012d44:	4605      	mov	r5, r0
 8012d46:	2800      	cmp	r0, #0
 8012d48:	d168      	bne.n	8012e1c <__gethex+0x100>
 8012d4a:	49a0      	ldr	r1, [pc, #640]	@ (8012fcc <__gethex+0x2b0>)
 8012d4c:	2201      	movs	r2, #1
 8012d4e:	4648      	mov	r0, r9
 8012d50:	f7fc fdb2 	bl	800f8b8 <strncmp>
 8012d54:	4607      	mov	r7, r0
 8012d56:	2800      	cmp	r0, #0
 8012d58:	d167      	bne.n	8012e2a <__gethex+0x10e>
 8012d5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012d5e:	4626      	mov	r6, r4
 8012d60:	f7ff ffc6 	bl	8012cf0 <__hexdig_fun>
 8012d64:	2800      	cmp	r0, #0
 8012d66:	d062      	beq.n	8012e2e <__gethex+0x112>
 8012d68:	4623      	mov	r3, r4
 8012d6a:	7818      	ldrb	r0, [r3, #0]
 8012d6c:	2830      	cmp	r0, #48	@ 0x30
 8012d6e:	4699      	mov	r9, r3
 8012d70:	f103 0301 	add.w	r3, r3, #1
 8012d74:	d0f9      	beq.n	8012d6a <__gethex+0x4e>
 8012d76:	f7ff ffbb 	bl	8012cf0 <__hexdig_fun>
 8012d7a:	fab0 f580 	clz	r5, r0
 8012d7e:	096d      	lsrs	r5, r5, #5
 8012d80:	f04f 0b01 	mov.w	fp, #1
 8012d84:	464a      	mov	r2, r9
 8012d86:	4616      	mov	r6, r2
 8012d88:	3201      	adds	r2, #1
 8012d8a:	7830      	ldrb	r0, [r6, #0]
 8012d8c:	f7ff ffb0 	bl	8012cf0 <__hexdig_fun>
 8012d90:	2800      	cmp	r0, #0
 8012d92:	d1f8      	bne.n	8012d86 <__gethex+0x6a>
 8012d94:	498d      	ldr	r1, [pc, #564]	@ (8012fcc <__gethex+0x2b0>)
 8012d96:	2201      	movs	r2, #1
 8012d98:	4630      	mov	r0, r6
 8012d9a:	f7fc fd8d 	bl	800f8b8 <strncmp>
 8012d9e:	2800      	cmp	r0, #0
 8012da0:	d13f      	bne.n	8012e22 <__gethex+0x106>
 8012da2:	b944      	cbnz	r4, 8012db6 <__gethex+0x9a>
 8012da4:	1c74      	adds	r4, r6, #1
 8012da6:	4622      	mov	r2, r4
 8012da8:	4616      	mov	r6, r2
 8012daa:	3201      	adds	r2, #1
 8012dac:	7830      	ldrb	r0, [r6, #0]
 8012dae:	f7ff ff9f 	bl	8012cf0 <__hexdig_fun>
 8012db2:	2800      	cmp	r0, #0
 8012db4:	d1f8      	bne.n	8012da8 <__gethex+0x8c>
 8012db6:	1ba4      	subs	r4, r4, r6
 8012db8:	00a7      	lsls	r7, r4, #2
 8012dba:	7833      	ldrb	r3, [r6, #0]
 8012dbc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012dc0:	2b50      	cmp	r3, #80	@ 0x50
 8012dc2:	d13e      	bne.n	8012e42 <__gethex+0x126>
 8012dc4:	7873      	ldrb	r3, [r6, #1]
 8012dc6:	2b2b      	cmp	r3, #43	@ 0x2b
 8012dc8:	d033      	beq.n	8012e32 <__gethex+0x116>
 8012dca:	2b2d      	cmp	r3, #45	@ 0x2d
 8012dcc:	d034      	beq.n	8012e38 <__gethex+0x11c>
 8012dce:	1c71      	adds	r1, r6, #1
 8012dd0:	2400      	movs	r4, #0
 8012dd2:	7808      	ldrb	r0, [r1, #0]
 8012dd4:	f7ff ff8c 	bl	8012cf0 <__hexdig_fun>
 8012dd8:	1e43      	subs	r3, r0, #1
 8012dda:	b2db      	uxtb	r3, r3
 8012ddc:	2b18      	cmp	r3, #24
 8012dde:	d830      	bhi.n	8012e42 <__gethex+0x126>
 8012de0:	f1a0 0210 	sub.w	r2, r0, #16
 8012de4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012de8:	f7ff ff82 	bl	8012cf0 <__hexdig_fun>
 8012dec:	f100 3cff 	add.w	ip, r0, #4294967295
 8012df0:	fa5f fc8c 	uxtb.w	ip, ip
 8012df4:	f1bc 0f18 	cmp.w	ip, #24
 8012df8:	f04f 030a 	mov.w	r3, #10
 8012dfc:	d91e      	bls.n	8012e3c <__gethex+0x120>
 8012dfe:	b104      	cbz	r4, 8012e02 <__gethex+0xe6>
 8012e00:	4252      	negs	r2, r2
 8012e02:	4417      	add	r7, r2
 8012e04:	f8ca 1000 	str.w	r1, [sl]
 8012e08:	b1ed      	cbz	r5, 8012e46 <__gethex+0x12a>
 8012e0a:	f1bb 0f00 	cmp.w	fp, #0
 8012e0e:	bf0c      	ite	eq
 8012e10:	2506      	moveq	r5, #6
 8012e12:	2500      	movne	r5, #0
 8012e14:	4628      	mov	r0, r5
 8012e16:	b005      	add	sp, #20
 8012e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e1c:	2500      	movs	r5, #0
 8012e1e:	462c      	mov	r4, r5
 8012e20:	e7b0      	b.n	8012d84 <__gethex+0x68>
 8012e22:	2c00      	cmp	r4, #0
 8012e24:	d1c7      	bne.n	8012db6 <__gethex+0x9a>
 8012e26:	4627      	mov	r7, r4
 8012e28:	e7c7      	b.n	8012dba <__gethex+0x9e>
 8012e2a:	464e      	mov	r6, r9
 8012e2c:	462f      	mov	r7, r5
 8012e2e:	2501      	movs	r5, #1
 8012e30:	e7c3      	b.n	8012dba <__gethex+0x9e>
 8012e32:	2400      	movs	r4, #0
 8012e34:	1cb1      	adds	r1, r6, #2
 8012e36:	e7cc      	b.n	8012dd2 <__gethex+0xb6>
 8012e38:	2401      	movs	r4, #1
 8012e3a:	e7fb      	b.n	8012e34 <__gethex+0x118>
 8012e3c:	fb03 0002 	mla	r0, r3, r2, r0
 8012e40:	e7ce      	b.n	8012de0 <__gethex+0xc4>
 8012e42:	4631      	mov	r1, r6
 8012e44:	e7de      	b.n	8012e04 <__gethex+0xe8>
 8012e46:	eba6 0309 	sub.w	r3, r6, r9
 8012e4a:	3b01      	subs	r3, #1
 8012e4c:	4629      	mov	r1, r5
 8012e4e:	2b07      	cmp	r3, #7
 8012e50:	dc0a      	bgt.n	8012e68 <__gethex+0x14c>
 8012e52:	9801      	ldr	r0, [sp, #4]
 8012e54:	f7fd fd30 	bl	80108b8 <_Balloc>
 8012e58:	4604      	mov	r4, r0
 8012e5a:	b940      	cbnz	r0, 8012e6e <__gethex+0x152>
 8012e5c:	4b5c      	ldr	r3, [pc, #368]	@ (8012fd0 <__gethex+0x2b4>)
 8012e5e:	4602      	mov	r2, r0
 8012e60:	21e4      	movs	r1, #228	@ 0xe4
 8012e62:	485c      	ldr	r0, [pc, #368]	@ (8012fd4 <__gethex+0x2b8>)
 8012e64:	f7ff fec0 	bl	8012be8 <__assert_func>
 8012e68:	3101      	adds	r1, #1
 8012e6a:	105b      	asrs	r3, r3, #1
 8012e6c:	e7ef      	b.n	8012e4e <__gethex+0x132>
 8012e6e:	f100 0a14 	add.w	sl, r0, #20
 8012e72:	2300      	movs	r3, #0
 8012e74:	4655      	mov	r5, sl
 8012e76:	469b      	mov	fp, r3
 8012e78:	45b1      	cmp	r9, r6
 8012e7a:	d337      	bcc.n	8012eec <__gethex+0x1d0>
 8012e7c:	f845 bb04 	str.w	fp, [r5], #4
 8012e80:	eba5 050a 	sub.w	r5, r5, sl
 8012e84:	10ad      	asrs	r5, r5, #2
 8012e86:	6125      	str	r5, [r4, #16]
 8012e88:	4658      	mov	r0, fp
 8012e8a:	f7fd fe07 	bl	8010a9c <__hi0bits>
 8012e8e:	016d      	lsls	r5, r5, #5
 8012e90:	f8d8 6000 	ldr.w	r6, [r8]
 8012e94:	1a2d      	subs	r5, r5, r0
 8012e96:	42b5      	cmp	r5, r6
 8012e98:	dd54      	ble.n	8012f44 <__gethex+0x228>
 8012e9a:	1bad      	subs	r5, r5, r6
 8012e9c:	4629      	mov	r1, r5
 8012e9e:	4620      	mov	r0, r4
 8012ea0:	f7fe f99b 	bl	80111da <__any_on>
 8012ea4:	4681      	mov	r9, r0
 8012ea6:	b178      	cbz	r0, 8012ec8 <__gethex+0x1ac>
 8012ea8:	1e6b      	subs	r3, r5, #1
 8012eaa:	1159      	asrs	r1, r3, #5
 8012eac:	f003 021f 	and.w	r2, r3, #31
 8012eb0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012eb4:	f04f 0901 	mov.w	r9, #1
 8012eb8:	fa09 f202 	lsl.w	r2, r9, r2
 8012ebc:	420a      	tst	r2, r1
 8012ebe:	d003      	beq.n	8012ec8 <__gethex+0x1ac>
 8012ec0:	454b      	cmp	r3, r9
 8012ec2:	dc36      	bgt.n	8012f32 <__gethex+0x216>
 8012ec4:	f04f 0902 	mov.w	r9, #2
 8012ec8:	4629      	mov	r1, r5
 8012eca:	4620      	mov	r0, r4
 8012ecc:	f7ff febe 	bl	8012c4c <rshift>
 8012ed0:	442f      	add	r7, r5
 8012ed2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012ed6:	42bb      	cmp	r3, r7
 8012ed8:	da42      	bge.n	8012f60 <__gethex+0x244>
 8012eda:	9801      	ldr	r0, [sp, #4]
 8012edc:	4621      	mov	r1, r4
 8012ede:	f7fd fd2b 	bl	8010938 <_Bfree>
 8012ee2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	6013      	str	r3, [r2, #0]
 8012ee8:	25a3      	movs	r5, #163	@ 0xa3
 8012eea:	e793      	b.n	8012e14 <__gethex+0xf8>
 8012eec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012ef0:	2a2e      	cmp	r2, #46	@ 0x2e
 8012ef2:	d012      	beq.n	8012f1a <__gethex+0x1fe>
 8012ef4:	2b20      	cmp	r3, #32
 8012ef6:	d104      	bne.n	8012f02 <__gethex+0x1e6>
 8012ef8:	f845 bb04 	str.w	fp, [r5], #4
 8012efc:	f04f 0b00 	mov.w	fp, #0
 8012f00:	465b      	mov	r3, fp
 8012f02:	7830      	ldrb	r0, [r6, #0]
 8012f04:	9303      	str	r3, [sp, #12]
 8012f06:	f7ff fef3 	bl	8012cf0 <__hexdig_fun>
 8012f0a:	9b03      	ldr	r3, [sp, #12]
 8012f0c:	f000 000f 	and.w	r0, r0, #15
 8012f10:	4098      	lsls	r0, r3
 8012f12:	ea4b 0b00 	orr.w	fp, fp, r0
 8012f16:	3304      	adds	r3, #4
 8012f18:	e7ae      	b.n	8012e78 <__gethex+0x15c>
 8012f1a:	45b1      	cmp	r9, r6
 8012f1c:	d8ea      	bhi.n	8012ef4 <__gethex+0x1d8>
 8012f1e:	492b      	ldr	r1, [pc, #172]	@ (8012fcc <__gethex+0x2b0>)
 8012f20:	9303      	str	r3, [sp, #12]
 8012f22:	2201      	movs	r2, #1
 8012f24:	4630      	mov	r0, r6
 8012f26:	f7fc fcc7 	bl	800f8b8 <strncmp>
 8012f2a:	9b03      	ldr	r3, [sp, #12]
 8012f2c:	2800      	cmp	r0, #0
 8012f2e:	d1e1      	bne.n	8012ef4 <__gethex+0x1d8>
 8012f30:	e7a2      	b.n	8012e78 <__gethex+0x15c>
 8012f32:	1ea9      	subs	r1, r5, #2
 8012f34:	4620      	mov	r0, r4
 8012f36:	f7fe f950 	bl	80111da <__any_on>
 8012f3a:	2800      	cmp	r0, #0
 8012f3c:	d0c2      	beq.n	8012ec4 <__gethex+0x1a8>
 8012f3e:	f04f 0903 	mov.w	r9, #3
 8012f42:	e7c1      	b.n	8012ec8 <__gethex+0x1ac>
 8012f44:	da09      	bge.n	8012f5a <__gethex+0x23e>
 8012f46:	1b75      	subs	r5, r6, r5
 8012f48:	4621      	mov	r1, r4
 8012f4a:	9801      	ldr	r0, [sp, #4]
 8012f4c:	462a      	mov	r2, r5
 8012f4e:	f7fd ff0b 	bl	8010d68 <__lshift>
 8012f52:	1b7f      	subs	r7, r7, r5
 8012f54:	4604      	mov	r4, r0
 8012f56:	f100 0a14 	add.w	sl, r0, #20
 8012f5a:	f04f 0900 	mov.w	r9, #0
 8012f5e:	e7b8      	b.n	8012ed2 <__gethex+0x1b6>
 8012f60:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012f64:	42bd      	cmp	r5, r7
 8012f66:	dd6f      	ble.n	8013048 <__gethex+0x32c>
 8012f68:	1bed      	subs	r5, r5, r7
 8012f6a:	42ae      	cmp	r6, r5
 8012f6c:	dc34      	bgt.n	8012fd8 <__gethex+0x2bc>
 8012f6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012f72:	2b02      	cmp	r3, #2
 8012f74:	d022      	beq.n	8012fbc <__gethex+0x2a0>
 8012f76:	2b03      	cmp	r3, #3
 8012f78:	d024      	beq.n	8012fc4 <__gethex+0x2a8>
 8012f7a:	2b01      	cmp	r3, #1
 8012f7c:	d115      	bne.n	8012faa <__gethex+0x28e>
 8012f7e:	42ae      	cmp	r6, r5
 8012f80:	d113      	bne.n	8012faa <__gethex+0x28e>
 8012f82:	2e01      	cmp	r6, #1
 8012f84:	d10b      	bne.n	8012f9e <__gethex+0x282>
 8012f86:	9a02      	ldr	r2, [sp, #8]
 8012f88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012f8c:	6013      	str	r3, [r2, #0]
 8012f8e:	2301      	movs	r3, #1
 8012f90:	6123      	str	r3, [r4, #16]
 8012f92:	f8ca 3000 	str.w	r3, [sl]
 8012f96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f98:	2562      	movs	r5, #98	@ 0x62
 8012f9a:	601c      	str	r4, [r3, #0]
 8012f9c:	e73a      	b.n	8012e14 <__gethex+0xf8>
 8012f9e:	1e71      	subs	r1, r6, #1
 8012fa0:	4620      	mov	r0, r4
 8012fa2:	f7fe f91a 	bl	80111da <__any_on>
 8012fa6:	2800      	cmp	r0, #0
 8012fa8:	d1ed      	bne.n	8012f86 <__gethex+0x26a>
 8012faa:	9801      	ldr	r0, [sp, #4]
 8012fac:	4621      	mov	r1, r4
 8012fae:	f7fd fcc3 	bl	8010938 <_Bfree>
 8012fb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	6013      	str	r3, [r2, #0]
 8012fb8:	2550      	movs	r5, #80	@ 0x50
 8012fba:	e72b      	b.n	8012e14 <__gethex+0xf8>
 8012fbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d1f3      	bne.n	8012faa <__gethex+0x28e>
 8012fc2:	e7e0      	b.n	8012f86 <__gethex+0x26a>
 8012fc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d1dd      	bne.n	8012f86 <__gethex+0x26a>
 8012fca:	e7ee      	b.n	8012faa <__gethex+0x28e>
 8012fcc:	08013c40 	.word	0x08013c40
 8012fd0:	08013ad8 	.word	0x08013ad8
 8012fd4:	08013d08 	.word	0x08013d08
 8012fd8:	1e6f      	subs	r7, r5, #1
 8012fda:	f1b9 0f00 	cmp.w	r9, #0
 8012fde:	d130      	bne.n	8013042 <__gethex+0x326>
 8012fe0:	b127      	cbz	r7, 8012fec <__gethex+0x2d0>
 8012fe2:	4639      	mov	r1, r7
 8012fe4:	4620      	mov	r0, r4
 8012fe6:	f7fe f8f8 	bl	80111da <__any_on>
 8012fea:	4681      	mov	r9, r0
 8012fec:	117a      	asrs	r2, r7, #5
 8012fee:	2301      	movs	r3, #1
 8012ff0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012ff4:	f007 071f 	and.w	r7, r7, #31
 8012ff8:	40bb      	lsls	r3, r7
 8012ffa:	4213      	tst	r3, r2
 8012ffc:	4629      	mov	r1, r5
 8012ffe:	4620      	mov	r0, r4
 8013000:	bf18      	it	ne
 8013002:	f049 0902 	orrne.w	r9, r9, #2
 8013006:	f7ff fe21 	bl	8012c4c <rshift>
 801300a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801300e:	1b76      	subs	r6, r6, r5
 8013010:	2502      	movs	r5, #2
 8013012:	f1b9 0f00 	cmp.w	r9, #0
 8013016:	d047      	beq.n	80130a8 <__gethex+0x38c>
 8013018:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801301c:	2b02      	cmp	r3, #2
 801301e:	d015      	beq.n	801304c <__gethex+0x330>
 8013020:	2b03      	cmp	r3, #3
 8013022:	d017      	beq.n	8013054 <__gethex+0x338>
 8013024:	2b01      	cmp	r3, #1
 8013026:	d109      	bne.n	801303c <__gethex+0x320>
 8013028:	f019 0f02 	tst.w	r9, #2
 801302c:	d006      	beq.n	801303c <__gethex+0x320>
 801302e:	f8da 3000 	ldr.w	r3, [sl]
 8013032:	ea49 0903 	orr.w	r9, r9, r3
 8013036:	f019 0f01 	tst.w	r9, #1
 801303a:	d10e      	bne.n	801305a <__gethex+0x33e>
 801303c:	f045 0510 	orr.w	r5, r5, #16
 8013040:	e032      	b.n	80130a8 <__gethex+0x38c>
 8013042:	f04f 0901 	mov.w	r9, #1
 8013046:	e7d1      	b.n	8012fec <__gethex+0x2d0>
 8013048:	2501      	movs	r5, #1
 801304a:	e7e2      	b.n	8013012 <__gethex+0x2f6>
 801304c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801304e:	f1c3 0301 	rsb	r3, r3, #1
 8013052:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013056:	2b00      	cmp	r3, #0
 8013058:	d0f0      	beq.n	801303c <__gethex+0x320>
 801305a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801305e:	f104 0314 	add.w	r3, r4, #20
 8013062:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013066:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801306a:	f04f 0c00 	mov.w	ip, #0
 801306e:	4618      	mov	r0, r3
 8013070:	f853 2b04 	ldr.w	r2, [r3], #4
 8013074:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013078:	d01b      	beq.n	80130b2 <__gethex+0x396>
 801307a:	3201      	adds	r2, #1
 801307c:	6002      	str	r2, [r0, #0]
 801307e:	2d02      	cmp	r5, #2
 8013080:	f104 0314 	add.w	r3, r4, #20
 8013084:	d13c      	bne.n	8013100 <__gethex+0x3e4>
 8013086:	f8d8 2000 	ldr.w	r2, [r8]
 801308a:	3a01      	subs	r2, #1
 801308c:	42b2      	cmp	r2, r6
 801308e:	d109      	bne.n	80130a4 <__gethex+0x388>
 8013090:	1171      	asrs	r1, r6, #5
 8013092:	2201      	movs	r2, #1
 8013094:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013098:	f006 061f 	and.w	r6, r6, #31
 801309c:	fa02 f606 	lsl.w	r6, r2, r6
 80130a0:	421e      	tst	r6, r3
 80130a2:	d13a      	bne.n	801311a <__gethex+0x3fe>
 80130a4:	f045 0520 	orr.w	r5, r5, #32
 80130a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80130aa:	601c      	str	r4, [r3, #0]
 80130ac:	9b02      	ldr	r3, [sp, #8]
 80130ae:	601f      	str	r7, [r3, #0]
 80130b0:	e6b0      	b.n	8012e14 <__gethex+0xf8>
 80130b2:	4299      	cmp	r1, r3
 80130b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80130b8:	d8d9      	bhi.n	801306e <__gethex+0x352>
 80130ba:	68a3      	ldr	r3, [r4, #8]
 80130bc:	459b      	cmp	fp, r3
 80130be:	db17      	blt.n	80130f0 <__gethex+0x3d4>
 80130c0:	6861      	ldr	r1, [r4, #4]
 80130c2:	9801      	ldr	r0, [sp, #4]
 80130c4:	3101      	adds	r1, #1
 80130c6:	f7fd fbf7 	bl	80108b8 <_Balloc>
 80130ca:	4681      	mov	r9, r0
 80130cc:	b918      	cbnz	r0, 80130d6 <__gethex+0x3ba>
 80130ce:	4b1a      	ldr	r3, [pc, #104]	@ (8013138 <__gethex+0x41c>)
 80130d0:	4602      	mov	r2, r0
 80130d2:	2184      	movs	r1, #132	@ 0x84
 80130d4:	e6c5      	b.n	8012e62 <__gethex+0x146>
 80130d6:	6922      	ldr	r2, [r4, #16]
 80130d8:	3202      	adds	r2, #2
 80130da:	f104 010c 	add.w	r1, r4, #12
 80130de:	0092      	lsls	r2, r2, #2
 80130e0:	300c      	adds	r0, #12
 80130e2:	f7fc fc88 	bl	800f9f6 <memcpy>
 80130e6:	4621      	mov	r1, r4
 80130e8:	9801      	ldr	r0, [sp, #4]
 80130ea:	f7fd fc25 	bl	8010938 <_Bfree>
 80130ee:	464c      	mov	r4, r9
 80130f0:	6923      	ldr	r3, [r4, #16]
 80130f2:	1c5a      	adds	r2, r3, #1
 80130f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80130f8:	6122      	str	r2, [r4, #16]
 80130fa:	2201      	movs	r2, #1
 80130fc:	615a      	str	r2, [r3, #20]
 80130fe:	e7be      	b.n	801307e <__gethex+0x362>
 8013100:	6922      	ldr	r2, [r4, #16]
 8013102:	455a      	cmp	r2, fp
 8013104:	dd0b      	ble.n	801311e <__gethex+0x402>
 8013106:	2101      	movs	r1, #1
 8013108:	4620      	mov	r0, r4
 801310a:	f7ff fd9f 	bl	8012c4c <rshift>
 801310e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013112:	3701      	adds	r7, #1
 8013114:	42bb      	cmp	r3, r7
 8013116:	f6ff aee0 	blt.w	8012eda <__gethex+0x1be>
 801311a:	2501      	movs	r5, #1
 801311c:	e7c2      	b.n	80130a4 <__gethex+0x388>
 801311e:	f016 061f 	ands.w	r6, r6, #31
 8013122:	d0fa      	beq.n	801311a <__gethex+0x3fe>
 8013124:	4453      	add	r3, sl
 8013126:	f1c6 0620 	rsb	r6, r6, #32
 801312a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801312e:	f7fd fcb5 	bl	8010a9c <__hi0bits>
 8013132:	42b0      	cmp	r0, r6
 8013134:	dbe7      	blt.n	8013106 <__gethex+0x3ea>
 8013136:	e7f0      	b.n	801311a <__gethex+0x3fe>
 8013138:	08013ad8 	.word	0x08013ad8

0801313c <L_shift>:
 801313c:	f1c2 0208 	rsb	r2, r2, #8
 8013140:	0092      	lsls	r2, r2, #2
 8013142:	b570      	push	{r4, r5, r6, lr}
 8013144:	f1c2 0620 	rsb	r6, r2, #32
 8013148:	6843      	ldr	r3, [r0, #4]
 801314a:	6804      	ldr	r4, [r0, #0]
 801314c:	fa03 f506 	lsl.w	r5, r3, r6
 8013150:	432c      	orrs	r4, r5
 8013152:	40d3      	lsrs	r3, r2
 8013154:	6004      	str	r4, [r0, #0]
 8013156:	f840 3f04 	str.w	r3, [r0, #4]!
 801315a:	4288      	cmp	r0, r1
 801315c:	d3f4      	bcc.n	8013148 <L_shift+0xc>
 801315e:	bd70      	pop	{r4, r5, r6, pc}

08013160 <__match>:
 8013160:	b530      	push	{r4, r5, lr}
 8013162:	6803      	ldr	r3, [r0, #0]
 8013164:	3301      	adds	r3, #1
 8013166:	f811 4b01 	ldrb.w	r4, [r1], #1
 801316a:	b914      	cbnz	r4, 8013172 <__match+0x12>
 801316c:	6003      	str	r3, [r0, #0]
 801316e:	2001      	movs	r0, #1
 8013170:	bd30      	pop	{r4, r5, pc}
 8013172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013176:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801317a:	2d19      	cmp	r5, #25
 801317c:	bf98      	it	ls
 801317e:	3220      	addls	r2, #32
 8013180:	42a2      	cmp	r2, r4
 8013182:	d0f0      	beq.n	8013166 <__match+0x6>
 8013184:	2000      	movs	r0, #0
 8013186:	e7f3      	b.n	8013170 <__match+0x10>

08013188 <__hexnan>:
 8013188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801318c:	680b      	ldr	r3, [r1, #0]
 801318e:	6801      	ldr	r1, [r0, #0]
 8013190:	115e      	asrs	r6, r3, #5
 8013192:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013196:	f013 031f 	ands.w	r3, r3, #31
 801319a:	b087      	sub	sp, #28
 801319c:	bf18      	it	ne
 801319e:	3604      	addne	r6, #4
 80131a0:	2500      	movs	r5, #0
 80131a2:	1f37      	subs	r7, r6, #4
 80131a4:	4682      	mov	sl, r0
 80131a6:	4690      	mov	r8, r2
 80131a8:	9301      	str	r3, [sp, #4]
 80131aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80131ae:	46b9      	mov	r9, r7
 80131b0:	463c      	mov	r4, r7
 80131b2:	9502      	str	r5, [sp, #8]
 80131b4:	46ab      	mov	fp, r5
 80131b6:	784a      	ldrb	r2, [r1, #1]
 80131b8:	1c4b      	adds	r3, r1, #1
 80131ba:	9303      	str	r3, [sp, #12]
 80131bc:	b342      	cbz	r2, 8013210 <__hexnan+0x88>
 80131be:	4610      	mov	r0, r2
 80131c0:	9105      	str	r1, [sp, #20]
 80131c2:	9204      	str	r2, [sp, #16]
 80131c4:	f7ff fd94 	bl	8012cf0 <__hexdig_fun>
 80131c8:	2800      	cmp	r0, #0
 80131ca:	d151      	bne.n	8013270 <__hexnan+0xe8>
 80131cc:	9a04      	ldr	r2, [sp, #16]
 80131ce:	9905      	ldr	r1, [sp, #20]
 80131d0:	2a20      	cmp	r2, #32
 80131d2:	d818      	bhi.n	8013206 <__hexnan+0x7e>
 80131d4:	9b02      	ldr	r3, [sp, #8]
 80131d6:	459b      	cmp	fp, r3
 80131d8:	dd13      	ble.n	8013202 <__hexnan+0x7a>
 80131da:	454c      	cmp	r4, r9
 80131dc:	d206      	bcs.n	80131ec <__hexnan+0x64>
 80131de:	2d07      	cmp	r5, #7
 80131e0:	dc04      	bgt.n	80131ec <__hexnan+0x64>
 80131e2:	462a      	mov	r2, r5
 80131e4:	4649      	mov	r1, r9
 80131e6:	4620      	mov	r0, r4
 80131e8:	f7ff ffa8 	bl	801313c <L_shift>
 80131ec:	4544      	cmp	r4, r8
 80131ee:	d952      	bls.n	8013296 <__hexnan+0x10e>
 80131f0:	2300      	movs	r3, #0
 80131f2:	f1a4 0904 	sub.w	r9, r4, #4
 80131f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80131fa:	f8cd b008 	str.w	fp, [sp, #8]
 80131fe:	464c      	mov	r4, r9
 8013200:	461d      	mov	r5, r3
 8013202:	9903      	ldr	r1, [sp, #12]
 8013204:	e7d7      	b.n	80131b6 <__hexnan+0x2e>
 8013206:	2a29      	cmp	r2, #41	@ 0x29
 8013208:	d157      	bne.n	80132ba <__hexnan+0x132>
 801320a:	3102      	adds	r1, #2
 801320c:	f8ca 1000 	str.w	r1, [sl]
 8013210:	f1bb 0f00 	cmp.w	fp, #0
 8013214:	d051      	beq.n	80132ba <__hexnan+0x132>
 8013216:	454c      	cmp	r4, r9
 8013218:	d206      	bcs.n	8013228 <__hexnan+0xa0>
 801321a:	2d07      	cmp	r5, #7
 801321c:	dc04      	bgt.n	8013228 <__hexnan+0xa0>
 801321e:	462a      	mov	r2, r5
 8013220:	4649      	mov	r1, r9
 8013222:	4620      	mov	r0, r4
 8013224:	f7ff ff8a 	bl	801313c <L_shift>
 8013228:	4544      	cmp	r4, r8
 801322a:	d936      	bls.n	801329a <__hexnan+0x112>
 801322c:	f1a8 0204 	sub.w	r2, r8, #4
 8013230:	4623      	mov	r3, r4
 8013232:	f853 1b04 	ldr.w	r1, [r3], #4
 8013236:	f842 1f04 	str.w	r1, [r2, #4]!
 801323a:	429f      	cmp	r7, r3
 801323c:	d2f9      	bcs.n	8013232 <__hexnan+0xaa>
 801323e:	1b3b      	subs	r3, r7, r4
 8013240:	f023 0303 	bic.w	r3, r3, #3
 8013244:	3304      	adds	r3, #4
 8013246:	3401      	adds	r4, #1
 8013248:	3e03      	subs	r6, #3
 801324a:	42b4      	cmp	r4, r6
 801324c:	bf88      	it	hi
 801324e:	2304      	movhi	r3, #4
 8013250:	4443      	add	r3, r8
 8013252:	2200      	movs	r2, #0
 8013254:	f843 2b04 	str.w	r2, [r3], #4
 8013258:	429f      	cmp	r7, r3
 801325a:	d2fb      	bcs.n	8013254 <__hexnan+0xcc>
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	b91b      	cbnz	r3, 8013268 <__hexnan+0xe0>
 8013260:	4547      	cmp	r7, r8
 8013262:	d128      	bne.n	80132b6 <__hexnan+0x12e>
 8013264:	2301      	movs	r3, #1
 8013266:	603b      	str	r3, [r7, #0]
 8013268:	2005      	movs	r0, #5
 801326a:	b007      	add	sp, #28
 801326c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013270:	3501      	adds	r5, #1
 8013272:	2d08      	cmp	r5, #8
 8013274:	f10b 0b01 	add.w	fp, fp, #1
 8013278:	dd06      	ble.n	8013288 <__hexnan+0x100>
 801327a:	4544      	cmp	r4, r8
 801327c:	d9c1      	bls.n	8013202 <__hexnan+0x7a>
 801327e:	2300      	movs	r3, #0
 8013280:	f844 3c04 	str.w	r3, [r4, #-4]
 8013284:	2501      	movs	r5, #1
 8013286:	3c04      	subs	r4, #4
 8013288:	6822      	ldr	r2, [r4, #0]
 801328a:	f000 000f 	and.w	r0, r0, #15
 801328e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013292:	6020      	str	r0, [r4, #0]
 8013294:	e7b5      	b.n	8013202 <__hexnan+0x7a>
 8013296:	2508      	movs	r5, #8
 8013298:	e7b3      	b.n	8013202 <__hexnan+0x7a>
 801329a:	9b01      	ldr	r3, [sp, #4]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d0dd      	beq.n	801325c <__hexnan+0xd4>
 80132a0:	f1c3 0320 	rsb	r3, r3, #32
 80132a4:	f04f 32ff 	mov.w	r2, #4294967295
 80132a8:	40da      	lsrs	r2, r3
 80132aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80132ae:	4013      	ands	r3, r2
 80132b0:	f846 3c04 	str.w	r3, [r6, #-4]
 80132b4:	e7d2      	b.n	801325c <__hexnan+0xd4>
 80132b6:	3f04      	subs	r7, #4
 80132b8:	e7d0      	b.n	801325c <__hexnan+0xd4>
 80132ba:	2004      	movs	r0, #4
 80132bc:	e7d5      	b.n	801326a <__hexnan+0xe2>

080132be <__ascii_mbtowc>:
 80132be:	b082      	sub	sp, #8
 80132c0:	b901      	cbnz	r1, 80132c4 <__ascii_mbtowc+0x6>
 80132c2:	a901      	add	r1, sp, #4
 80132c4:	b142      	cbz	r2, 80132d8 <__ascii_mbtowc+0x1a>
 80132c6:	b14b      	cbz	r3, 80132dc <__ascii_mbtowc+0x1e>
 80132c8:	7813      	ldrb	r3, [r2, #0]
 80132ca:	600b      	str	r3, [r1, #0]
 80132cc:	7812      	ldrb	r2, [r2, #0]
 80132ce:	1e10      	subs	r0, r2, #0
 80132d0:	bf18      	it	ne
 80132d2:	2001      	movne	r0, #1
 80132d4:	b002      	add	sp, #8
 80132d6:	4770      	bx	lr
 80132d8:	4610      	mov	r0, r2
 80132da:	e7fb      	b.n	80132d4 <__ascii_mbtowc+0x16>
 80132dc:	f06f 0001 	mvn.w	r0, #1
 80132e0:	e7f8      	b.n	80132d4 <__ascii_mbtowc+0x16>

080132e2 <_realloc_r>:
 80132e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132e6:	4680      	mov	r8, r0
 80132e8:	4615      	mov	r5, r2
 80132ea:	460c      	mov	r4, r1
 80132ec:	b921      	cbnz	r1, 80132f8 <_realloc_r+0x16>
 80132ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132f2:	4611      	mov	r1, r2
 80132f4:	f7fd ba54 	b.w	80107a0 <_malloc_r>
 80132f8:	b92a      	cbnz	r2, 8013306 <_realloc_r+0x24>
 80132fa:	f7fd f9dd 	bl	80106b8 <_free_r>
 80132fe:	2400      	movs	r4, #0
 8013300:	4620      	mov	r0, r4
 8013302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013306:	f000 f8b2 	bl	801346e <_malloc_usable_size_r>
 801330a:	4285      	cmp	r5, r0
 801330c:	4606      	mov	r6, r0
 801330e:	d802      	bhi.n	8013316 <_realloc_r+0x34>
 8013310:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013314:	d8f4      	bhi.n	8013300 <_realloc_r+0x1e>
 8013316:	4629      	mov	r1, r5
 8013318:	4640      	mov	r0, r8
 801331a:	f7fd fa41 	bl	80107a0 <_malloc_r>
 801331e:	4607      	mov	r7, r0
 8013320:	2800      	cmp	r0, #0
 8013322:	d0ec      	beq.n	80132fe <_realloc_r+0x1c>
 8013324:	42b5      	cmp	r5, r6
 8013326:	462a      	mov	r2, r5
 8013328:	4621      	mov	r1, r4
 801332a:	bf28      	it	cs
 801332c:	4632      	movcs	r2, r6
 801332e:	f7fc fb62 	bl	800f9f6 <memcpy>
 8013332:	4621      	mov	r1, r4
 8013334:	4640      	mov	r0, r8
 8013336:	f7fd f9bf 	bl	80106b8 <_free_r>
 801333a:	463c      	mov	r4, r7
 801333c:	e7e0      	b.n	8013300 <_realloc_r+0x1e>
	...

08013340 <_strtoul_l.constprop.0>:
 8013340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013344:	4e34      	ldr	r6, [pc, #208]	@ (8013418 <_strtoul_l.constprop.0+0xd8>)
 8013346:	4686      	mov	lr, r0
 8013348:	460d      	mov	r5, r1
 801334a:	4628      	mov	r0, r5
 801334c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013350:	5d37      	ldrb	r7, [r6, r4]
 8013352:	f017 0708 	ands.w	r7, r7, #8
 8013356:	d1f8      	bne.n	801334a <_strtoul_l.constprop.0+0xa>
 8013358:	2c2d      	cmp	r4, #45	@ 0x2d
 801335a:	d12f      	bne.n	80133bc <_strtoul_l.constprop.0+0x7c>
 801335c:	782c      	ldrb	r4, [r5, #0]
 801335e:	2701      	movs	r7, #1
 8013360:	1c85      	adds	r5, r0, #2
 8013362:	f033 0010 	bics.w	r0, r3, #16
 8013366:	d109      	bne.n	801337c <_strtoul_l.constprop.0+0x3c>
 8013368:	2c30      	cmp	r4, #48	@ 0x30
 801336a:	d12c      	bne.n	80133c6 <_strtoul_l.constprop.0+0x86>
 801336c:	7828      	ldrb	r0, [r5, #0]
 801336e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8013372:	2858      	cmp	r0, #88	@ 0x58
 8013374:	d127      	bne.n	80133c6 <_strtoul_l.constprop.0+0x86>
 8013376:	786c      	ldrb	r4, [r5, #1]
 8013378:	2310      	movs	r3, #16
 801337a:	3502      	adds	r5, #2
 801337c:	f04f 38ff 	mov.w	r8, #4294967295
 8013380:	2600      	movs	r6, #0
 8013382:	fbb8 f8f3 	udiv	r8, r8, r3
 8013386:	fb03 f908 	mul.w	r9, r3, r8
 801338a:	ea6f 0909 	mvn.w	r9, r9
 801338e:	4630      	mov	r0, r6
 8013390:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8013394:	f1bc 0f09 	cmp.w	ip, #9
 8013398:	d81c      	bhi.n	80133d4 <_strtoul_l.constprop.0+0x94>
 801339a:	4664      	mov	r4, ip
 801339c:	42a3      	cmp	r3, r4
 801339e:	dd2a      	ble.n	80133f6 <_strtoul_l.constprop.0+0xb6>
 80133a0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80133a4:	d007      	beq.n	80133b6 <_strtoul_l.constprop.0+0x76>
 80133a6:	4580      	cmp	r8, r0
 80133a8:	d322      	bcc.n	80133f0 <_strtoul_l.constprop.0+0xb0>
 80133aa:	d101      	bne.n	80133b0 <_strtoul_l.constprop.0+0x70>
 80133ac:	45a1      	cmp	r9, r4
 80133ae:	db1f      	blt.n	80133f0 <_strtoul_l.constprop.0+0xb0>
 80133b0:	fb00 4003 	mla	r0, r0, r3, r4
 80133b4:	2601      	movs	r6, #1
 80133b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80133ba:	e7e9      	b.n	8013390 <_strtoul_l.constprop.0+0x50>
 80133bc:	2c2b      	cmp	r4, #43	@ 0x2b
 80133be:	bf04      	itt	eq
 80133c0:	782c      	ldrbeq	r4, [r5, #0]
 80133c2:	1c85      	addeq	r5, r0, #2
 80133c4:	e7cd      	b.n	8013362 <_strtoul_l.constprop.0+0x22>
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d1d8      	bne.n	801337c <_strtoul_l.constprop.0+0x3c>
 80133ca:	2c30      	cmp	r4, #48	@ 0x30
 80133cc:	bf0c      	ite	eq
 80133ce:	2308      	moveq	r3, #8
 80133d0:	230a      	movne	r3, #10
 80133d2:	e7d3      	b.n	801337c <_strtoul_l.constprop.0+0x3c>
 80133d4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80133d8:	f1bc 0f19 	cmp.w	ip, #25
 80133dc:	d801      	bhi.n	80133e2 <_strtoul_l.constprop.0+0xa2>
 80133de:	3c37      	subs	r4, #55	@ 0x37
 80133e0:	e7dc      	b.n	801339c <_strtoul_l.constprop.0+0x5c>
 80133e2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80133e6:	f1bc 0f19 	cmp.w	ip, #25
 80133ea:	d804      	bhi.n	80133f6 <_strtoul_l.constprop.0+0xb6>
 80133ec:	3c57      	subs	r4, #87	@ 0x57
 80133ee:	e7d5      	b.n	801339c <_strtoul_l.constprop.0+0x5c>
 80133f0:	f04f 36ff 	mov.w	r6, #4294967295
 80133f4:	e7df      	b.n	80133b6 <_strtoul_l.constprop.0+0x76>
 80133f6:	1c73      	adds	r3, r6, #1
 80133f8:	d106      	bne.n	8013408 <_strtoul_l.constprop.0+0xc8>
 80133fa:	2322      	movs	r3, #34	@ 0x22
 80133fc:	f8ce 3000 	str.w	r3, [lr]
 8013400:	4630      	mov	r0, r6
 8013402:	b932      	cbnz	r2, 8013412 <_strtoul_l.constprop.0+0xd2>
 8013404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013408:	b107      	cbz	r7, 801340c <_strtoul_l.constprop.0+0xcc>
 801340a:	4240      	negs	r0, r0
 801340c:	2a00      	cmp	r2, #0
 801340e:	d0f9      	beq.n	8013404 <_strtoul_l.constprop.0+0xc4>
 8013410:	b106      	cbz	r6, 8013414 <_strtoul_l.constprop.0+0xd4>
 8013412:	1e69      	subs	r1, r5, #1
 8013414:	6011      	str	r1, [r2, #0]
 8013416:	e7f5      	b.n	8013404 <_strtoul_l.constprop.0+0xc4>
 8013418:	08013925 	.word	0x08013925

0801341c <_strtoul_r>:
 801341c:	f7ff bf90 	b.w	8013340 <_strtoul_l.constprop.0>

08013420 <__ascii_wctomb>:
 8013420:	4603      	mov	r3, r0
 8013422:	4608      	mov	r0, r1
 8013424:	b141      	cbz	r1, 8013438 <__ascii_wctomb+0x18>
 8013426:	2aff      	cmp	r2, #255	@ 0xff
 8013428:	d904      	bls.n	8013434 <__ascii_wctomb+0x14>
 801342a:	228a      	movs	r2, #138	@ 0x8a
 801342c:	601a      	str	r2, [r3, #0]
 801342e:	f04f 30ff 	mov.w	r0, #4294967295
 8013432:	4770      	bx	lr
 8013434:	700a      	strb	r2, [r1, #0]
 8013436:	2001      	movs	r0, #1
 8013438:	4770      	bx	lr
	...

0801343c <fiprintf>:
 801343c:	b40e      	push	{r1, r2, r3}
 801343e:	b503      	push	{r0, r1, lr}
 8013440:	4601      	mov	r1, r0
 8013442:	ab03      	add	r3, sp, #12
 8013444:	4805      	ldr	r0, [pc, #20]	@ (801345c <fiprintf+0x20>)
 8013446:	f853 2b04 	ldr.w	r2, [r3], #4
 801344a:	6800      	ldr	r0, [r0, #0]
 801344c:	9301      	str	r3, [sp, #4]
 801344e:	f7ff f83b 	bl	80124c8 <_vfiprintf_r>
 8013452:	b002      	add	sp, #8
 8013454:	f85d eb04 	ldr.w	lr, [sp], #4
 8013458:	b003      	add	sp, #12
 801345a:	4770      	bx	lr
 801345c:	200001a0 	.word	0x200001a0

08013460 <abort>:
 8013460:	b508      	push	{r3, lr}
 8013462:	2006      	movs	r0, #6
 8013464:	f000 f834 	bl	80134d0 <raise>
 8013468:	2001      	movs	r0, #1
 801346a:	f7ef faef 	bl	8002a4c <_exit>

0801346e <_malloc_usable_size_r>:
 801346e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013472:	1f18      	subs	r0, r3, #4
 8013474:	2b00      	cmp	r3, #0
 8013476:	bfbc      	itt	lt
 8013478:	580b      	ldrlt	r3, [r1, r0]
 801347a:	18c0      	addlt	r0, r0, r3
 801347c:	4770      	bx	lr

0801347e <_raise_r>:
 801347e:	291f      	cmp	r1, #31
 8013480:	b538      	push	{r3, r4, r5, lr}
 8013482:	4605      	mov	r5, r0
 8013484:	460c      	mov	r4, r1
 8013486:	d904      	bls.n	8013492 <_raise_r+0x14>
 8013488:	2316      	movs	r3, #22
 801348a:	6003      	str	r3, [r0, #0]
 801348c:	f04f 30ff 	mov.w	r0, #4294967295
 8013490:	bd38      	pop	{r3, r4, r5, pc}
 8013492:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013494:	b112      	cbz	r2, 801349c <_raise_r+0x1e>
 8013496:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801349a:	b94b      	cbnz	r3, 80134b0 <_raise_r+0x32>
 801349c:	4628      	mov	r0, r5
 801349e:	f000 f831 	bl	8013504 <_getpid_r>
 80134a2:	4622      	mov	r2, r4
 80134a4:	4601      	mov	r1, r0
 80134a6:	4628      	mov	r0, r5
 80134a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134ac:	f000 b818 	b.w	80134e0 <_kill_r>
 80134b0:	2b01      	cmp	r3, #1
 80134b2:	d00a      	beq.n	80134ca <_raise_r+0x4c>
 80134b4:	1c59      	adds	r1, r3, #1
 80134b6:	d103      	bne.n	80134c0 <_raise_r+0x42>
 80134b8:	2316      	movs	r3, #22
 80134ba:	6003      	str	r3, [r0, #0]
 80134bc:	2001      	movs	r0, #1
 80134be:	e7e7      	b.n	8013490 <_raise_r+0x12>
 80134c0:	2100      	movs	r1, #0
 80134c2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80134c6:	4620      	mov	r0, r4
 80134c8:	4798      	blx	r3
 80134ca:	2000      	movs	r0, #0
 80134cc:	e7e0      	b.n	8013490 <_raise_r+0x12>
	...

080134d0 <raise>:
 80134d0:	4b02      	ldr	r3, [pc, #8]	@ (80134dc <raise+0xc>)
 80134d2:	4601      	mov	r1, r0
 80134d4:	6818      	ldr	r0, [r3, #0]
 80134d6:	f7ff bfd2 	b.w	801347e <_raise_r>
 80134da:	bf00      	nop
 80134dc:	200001a0 	.word	0x200001a0

080134e0 <_kill_r>:
 80134e0:	b538      	push	{r3, r4, r5, lr}
 80134e2:	4d07      	ldr	r5, [pc, #28]	@ (8013500 <_kill_r+0x20>)
 80134e4:	2300      	movs	r3, #0
 80134e6:	4604      	mov	r4, r0
 80134e8:	4608      	mov	r0, r1
 80134ea:	4611      	mov	r1, r2
 80134ec:	602b      	str	r3, [r5, #0]
 80134ee:	f7ef fa9d 	bl	8002a2c <_kill>
 80134f2:	1c43      	adds	r3, r0, #1
 80134f4:	d102      	bne.n	80134fc <_kill_r+0x1c>
 80134f6:	682b      	ldr	r3, [r5, #0]
 80134f8:	b103      	cbz	r3, 80134fc <_kill_r+0x1c>
 80134fa:	6023      	str	r3, [r4, #0]
 80134fc:	bd38      	pop	{r3, r4, r5, pc}
 80134fe:	bf00      	nop
 8013500:	20002250 	.word	0x20002250

08013504 <_getpid_r>:
 8013504:	f7ef ba8a 	b.w	8002a1c <_getpid>

08013508 <floor>:
 8013508:	ec51 0b10 	vmov	r0, r1, d0
 801350c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013514:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013518:	2e13      	cmp	r6, #19
 801351a:	460c      	mov	r4, r1
 801351c:	4605      	mov	r5, r0
 801351e:	4680      	mov	r8, r0
 8013520:	dc34      	bgt.n	801358c <floor+0x84>
 8013522:	2e00      	cmp	r6, #0
 8013524:	da17      	bge.n	8013556 <floor+0x4e>
 8013526:	a332      	add	r3, pc, #200	@ (adr r3, 80135f0 <floor+0xe8>)
 8013528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801352c:	f7ec feae 	bl	800028c <__adddf3>
 8013530:	2200      	movs	r2, #0
 8013532:	2300      	movs	r3, #0
 8013534:	f7ed faf0 	bl	8000b18 <__aeabi_dcmpgt>
 8013538:	b150      	cbz	r0, 8013550 <floor+0x48>
 801353a:	2c00      	cmp	r4, #0
 801353c:	da55      	bge.n	80135ea <floor+0xe2>
 801353e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8013542:	432c      	orrs	r4, r5
 8013544:	2500      	movs	r5, #0
 8013546:	42ac      	cmp	r4, r5
 8013548:	4c2b      	ldr	r4, [pc, #172]	@ (80135f8 <floor+0xf0>)
 801354a:	bf08      	it	eq
 801354c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8013550:	4621      	mov	r1, r4
 8013552:	4628      	mov	r0, r5
 8013554:	e023      	b.n	801359e <floor+0x96>
 8013556:	4f29      	ldr	r7, [pc, #164]	@ (80135fc <floor+0xf4>)
 8013558:	4137      	asrs	r7, r6
 801355a:	ea01 0307 	and.w	r3, r1, r7
 801355e:	4303      	orrs	r3, r0
 8013560:	d01d      	beq.n	801359e <floor+0x96>
 8013562:	a323      	add	r3, pc, #140	@ (adr r3, 80135f0 <floor+0xe8>)
 8013564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013568:	f7ec fe90 	bl	800028c <__adddf3>
 801356c:	2200      	movs	r2, #0
 801356e:	2300      	movs	r3, #0
 8013570:	f7ed fad2 	bl	8000b18 <__aeabi_dcmpgt>
 8013574:	2800      	cmp	r0, #0
 8013576:	d0eb      	beq.n	8013550 <floor+0x48>
 8013578:	2c00      	cmp	r4, #0
 801357a:	bfbe      	ittt	lt
 801357c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013580:	4133      	asrlt	r3, r6
 8013582:	18e4      	addlt	r4, r4, r3
 8013584:	ea24 0407 	bic.w	r4, r4, r7
 8013588:	2500      	movs	r5, #0
 801358a:	e7e1      	b.n	8013550 <floor+0x48>
 801358c:	2e33      	cmp	r6, #51	@ 0x33
 801358e:	dd0a      	ble.n	80135a6 <floor+0x9e>
 8013590:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8013594:	d103      	bne.n	801359e <floor+0x96>
 8013596:	4602      	mov	r2, r0
 8013598:	460b      	mov	r3, r1
 801359a:	f7ec fe77 	bl	800028c <__adddf3>
 801359e:	ec41 0b10 	vmov	d0, r0, r1
 80135a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135a6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80135aa:	f04f 37ff 	mov.w	r7, #4294967295
 80135ae:	40df      	lsrs	r7, r3
 80135b0:	4207      	tst	r7, r0
 80135b2:	d0f4      	beq.n	801359e <floor+0x96>
 80135b4:	a30e      	add	r3, pc, #56	@ (adr r3, 80135f0 <floor+0xe8>)
 80135b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ba:	f7ec fe67 	bl	800028c <__adddf3>
 80135be:	2200      	movs	r2, #0
 80135c0:	2300      	movs	r3, #0
 80135c2:	f7ed faa9 	bl	8000b18 <__aeabi_dcmpgt>
 80135c6:	2800      	cmp	r0, #0
 80135c8:	d0c2      	beq.n	8013550 <floor+0x48>
 80135ca:	2c00      	cmp	r4, #0
 80135cc:	da0a      	bge.n	80135e4 <floor+0xdc>
 80135ce:	2e14      	cmp	r6, #20
 80135d0:	d101      	bne.n	80135d6 <floor+0xce>
 80135d2:	3401      	adds	r4, #1
 80135d4:	e006      	b.n	80135e4 <floor+0xdc>
 80135d6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80135da:	2301      	movs	r3, #1
 80135dc:	40b3      	lsls	r3, r6
 80135de:	441d      	add	r5, r3
 80135e0:	4545      	cmp	r5, r8
 80135e2:	d3f6      	bcc.n	80135d2 <floor+0xca>
 80135e4:	ea25 0507 	bic.w	r5, r5, r7
 80135e8:	e7b2      	b.n	8013550 <floor+0x48>
 80135ea:	2500      	movs	r5, #0
 80135ec:	462c      	mov	r4, r5
 80135ee:	e7af      	b.n	8013550 <floor+0x48>
 80135f0:	8800759c 	.word	0x8800759c
 80135f4:	7e37e43c 	.word	0x7e37e43c
 80135f8:	bff00000 	.word	0xbff00000
 80135fc:	000fffff 	.word	0x000fffff

08013600 <_init>:
 8013600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013602:	bf00      	nop
 8013604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013606:	bc08      	pop	{r3}
 8013608:	469e      	mov	lr, r3
 801360a:	4770      	bx	lr

0801360c <_fini>:
 801360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801360e:	bf00      	nop
 8013610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013612:	bc08      	pop	{r3}
 8013614:	469e      	mov	lr, r3
 8013616:	4770      	bx	lr
