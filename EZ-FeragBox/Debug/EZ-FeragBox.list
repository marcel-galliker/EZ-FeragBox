
EZ-FeragBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc90  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  0800ce20  0800ce20  0000de20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5e8  0800d5e8  0000f1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5e8  0800d5e8  0000e5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5f0  0800d5f0  0000f1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5f0  0800d5f0  0000e5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5f4  0800d5f4  0000e5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800d5f8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d5c  200001ec  0800d7e4  0000f1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f48  0800d7e4  0000ff48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153c5  00000000  00000000  0000f21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003259  00000000  00000000  000245e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00027840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea4  00000000  00000000  00028b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e08d  00000000  00000000  000299a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a70  00000000  00000000  00047a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9f79  00000000  00000000  000604a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a41a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000662c  00000000  00000000  0010a460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00110a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ce08 	.word	0x0800ce08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800ce08 	.word	0x0800ce08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <AD55936_init>:
#define _ADAC_ADC_READ        0b01000000
#define _ADAC_DAC_READ        0b01010000
#define _ADAC_GPIO_READ       0b01100000
#define _ADAC_REG_READ        0b01110000

HAL_StatusTypeDef AD55936_init(I2C_HandleTypeDef *hi2c, uint16_t DevAddress) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	uint8_t data[3];

	data[0] = _ADAC_GP_CONTROL;
 8000d00:	2303      	movs	r3, #3
 8000d02:	733b      	strb	r3, [r7, #12]
	data[1] = 0x01;
 8000d04:	2301      	movs	r3, #1
 8000d06:	737b      	strb	r3, [r7, #13]
	data[2] = 0x00;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, 3, HAL_MAX_DELAY);
 8000d0c:	f107 020c 	add.w	r2, r7, #12
 8000d10:	8879      	ldrh	r1, [r7, #2]
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2303      	movs	r3, #3
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f002 fd1c 	bl	8003758 <HAL_I2C_Master_Transmit>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <AD55936_init+0x3a>
		return status;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	e029      	b.n	8000d82 <AD55936_init+0x8e>

	data[0] = _ADAC_POWER_REF_CTRL;
 8000d2e:	230b      	movs	r3, #11
 8000d30:	733b      	strb	r3, [r7, #12]
	data[1] = 0x02;
 8000d32:	2302      	movs	r3, #2
 8000d34:	737b      	strb	r3, [r7, #13]
	data[2] = 0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, 3, HAL_MAX_DELAY);
 8000d3a:	f107 020c 	add.w	r2, r7, #12
 8000d3e:	8879      	ldrh	r1, [r7, #2]
 8000d40:	f04f 33ff 	mov.w	r3, #4294967295
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2303      	movs	r3, #3
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f002 fd05 	bl	8003758 <HAL_I2C_Master_Transmit>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <AD55936_init+0x68>
		return status;
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	e012      	b.n	8000d82 <AD55936_init+0x8e>

	data[0] = _ADAC_ADC_CONFIG;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	733b      	strb	r3, [r7, #12]
	data[1] = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	737b      	strb	r3, [r7, #13]
	data[2] = 0xFF;
 8000d64:	23ff      	movs	r3, #255	@ 0xff
 8000d66:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, 3, HAL_MAX_DELAY);
 8000d68:	f107 020c 	add.w	r2, r7, #12
 8000d6c:	8879      	ldrh	r1, [r7, #2]
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2303      	movs	r3, #3
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f002 fcee 	bl	8003758 <HAL_I2C_Master_Transmit>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	73fb      	strb	r3, [r7, #15]

	return status;
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <AD5593R_ReadADC>:

HAL_StatusTypeDef AD5593R_ReadADC(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t channel, uint16_t *adcValue) {
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b08a      	sub	sp, #40	@ 0x28
 8000d8e:	af02      	add	r7, sp, #8
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	817b      	strh	r3, [r7, #10]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	727b      	strb	r3, [r7, #9]
    uint16_t channelBit = 1 << channel;
 8000d9c:	7a7b      	ldrb	r3, [r7, #9]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	83fb      	strh	r3, [r7, #30]

	if (channel > 8) {
 8000da6:	7a7b      	ldrb	r3, [r7, #9]
 8000da8:	2b08      	cmp	r3, #8
 8000daa:	d901      	bls.n	8000db0 <AD5593R_ReadADC+0x26>
        // Invalid channel, return error (0-7 = ADC Inputs, 8 = Internal Temperature Sensor)
        return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e04a      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    HAL_StatusTypeDef status;
    uint8_t command[3];
    uint8_t data[2];

    // Configure the ADC channel
    command[0] = _ADAC_ADC_SEQUENCE;
 8000db0:	2302      	movs	r3, #2
 8000db2:	763b      	strb	r3, [r7, #24]

    // Select Channel
    command[1] = (uint8_t)(channelBit >> 8);
 8000db4:	8bfb      	ldrh	r3, [r7, #30]
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	767b      	strb	r3, [r7, #25]
    command[2] = (uint8_t)(channelBit & 0xFF);
 8000dbe:	8bfb      	ldrh	r3, [r7, #30]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	76bb      	strb	r3, [r7, #26]

    status = HAL_I2C_Master_Transmit(hi2c, DevAddress, command, sizeof(command), HAL_MAX_DELAY);
 8000dc4:	f107 0218 	add.w	r2, r7, #24
 8000dc8:	8979      	ldrh	r1, [r7, #10]
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	68f8      	ldr	r0, [r7, #12]
 8000dd4:	f002 fcc0 	bl	8003758 <HAL_I2C_Master_Transmit>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	777b      	strb	r3, [r7, #29]

    if (status != HAL_OK) {
 8000ddc:	7f7b      	ldrb	r3, [r7, #29]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <AD5593R_ReadADC+0x5c>
        // Handle error here
        return status;
 8000de2:	7f7b      	ldrb	r3, [r7, #29]
 8000de4:	e02f      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    }

	// Initiate an ADC read
	command[0] = _ADAC_ADC_READ;
 8000de6:	2340      	movs	r3, #64	@ 0x40
 8000de8:	763b      	strb	r3, [r7, #24]

    // Begin transmission to set the ADC read pointer
    status = HAL_I2C_Master_Transmit(hi2c, DevAddress, command, 1, HAL_MAX_DELAY);
 8000dea:	f107 0218 	add.w	r2, r7, #24
 8000dee:	8979      	ldrh	r1, [r7, #10]
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2301      	movs	r3, #1
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f002 fcad 	bl	8003758 <HAL_I2C_Master_Transmit>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	777b      	strb	r3, [r7, #29]

    if (status != HAL_OK) {
 8000e02:	7f7b      	ldrb	r3, [r7, #29]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <AD5593R_ReadADC+0x82>
        // Handle error here
        return status;
 8000e08:	7f7b      	ldrb	r3, [r7, #29]
 8000e0a:	e01c      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    }

    // Read the ADC value (2 bytes)
    status = HAL_I2C_Master_Receive(hi2c, DevAddress, data, 2, HAL_MAX_DELAY);
 8000e0c:	f107 0214 	add.w	r2, r7, #20
 8000e10:	8979      	ldrh	r1, [r7, #10]
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2302      	movs	r3, #2
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f002 fd90 	bl	8003940 <HAL_I2C_Master_Receive>
 8000e20:	4603      	mov	r3, r0
 8000e22:	777b      	strb	r3, [r7, #29]

    if (status != HAL_OK) {
 8000e24:	7f7b      	ldrb	r3, [r7, #29]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <AD5593R_ReadADC+0xa4>
        // Handle error here
        return status;
 8000e2a:	7f7b      	ldrb	r3, [r7, #29]
 8000e2c:	e00b      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    }

    // Convert the two received bytes into a single 16-bit value
    *adcValue = (uint16_t)((data[0] & 0x0F) << 8) + data[1];
 8000e2e:	7d3b      	ldrb	r3, [r7, #20]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	7d7a      	ldrb	r2, [r7, #21]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	801a      	strh	r2, [r3, #0]

    return status;
 8000e44:	7f7b      	ldrb	r3, [r7, #29]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <box_init>:
static void _check_printer_ready(void);
static void _send_print_done(void);

//--- box_init -------------------------------
void box_init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	memset(&_Status, 0, sizeof(_Status));
 8000e54:	223c      	movs	r2, #60	@ 0x3c
 8000e56:	2100      	movs	r1, #0
 8000e58:	4812      	ldr	r0, [pc, #72]	@ (8000ea4 <box_init+0x54>)
 8000e5a:	f008 f93d 	bl	80090d8 <memset>
	_FeragMsgIn      = 0;
 8000e5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <box_init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
	_FeragMsgOut     = 0;
 8000e64:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <box_init+0x5c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
	_TrackInIdx  	 = 0;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <box_init+0x60>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
	_TrackOutIdx 	 = 0;
 8000e70:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <box_init+0x64>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
	_PrintDoneDelay  = 0;
 8000e76:	4b10      	ldr	r3, [pc, #64]	@ (8000eb8 <box_init+0x68>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
	_PrinterReadyIn  = -1;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <box_init+0x6c>)
 8000e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e82:	601a      	str	r2, [r3, #0]
	_PrintDoneIn	 = HAL_GPIO_ReadPin(PRINT_DONE_GPIO_Port, PRINT_DONE_Pin);
 8000e84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e88:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <box_init+0x70>)
 8000e8a:	f002 fba5 	bl	80035d8 <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <box_init+0x74>)
 8000e94:	601a      	str	r2, [r3, #0]
	box_start();
 8000e96:	f000 f82d 	bl	8000ef4 <box_start>
	printf("LOG: box_init\n");
 8000e9a:	480b      	ldr	r0, [pc, #44]	@ (8000ec8 <box_init+0x78>)
 8000e9c:	f007 fff0 	bl	8008e80 <puts>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000020c 	.word	0x2000020c
 8000ea8:	20000254 	.word	0x20000254
 8000eac:	20000258 	.word	0x20000258
 8000eb0:	200002bc 	.word	0x200002bc
 8000eb4:	200002c0 	.word	0x200002c0
 8000eb8:	200002d0 	.word	0x200002d0
 8000ebc:	20000004 	.word	0x20000004
 8000ec0:	48001000 	.word	0x48001000
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	0800ce20 	.word	0x0800ce20

08000ecc <box_set_pgDelay>:

//--- box_set_pgDelay ------------------------------------
void box_set_pgDelay(int delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	_PrintGoDelay = delay;
 8000ed4:	4a05      	ldr	r2, [pc, #20]	@ (8000eec <box_set_pgDelay+0x20>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
	printf("set pgDelay=%d\n", delay);
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	4804      	ldr	r0, [pc, #16]	@ (8000ef0 <box_set_pgDelay+0x24>)
 8000ede:	f007 ff67 	bl	8008db0 <iprintf>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	0800ce30 	.word	0x0800ce30

08000ef4 <box_start>:

//--- box_start -------------------------
void box_start(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	printf("start\n");
 8000ef8:	4825      	ldr	r0, [pc, #148]	@ (8000f90 <box_start+0x9c>)
 8000efa:	f007 ffc1 	bl	8008e80 <puts>
	_FeragMsgIn   = 0;
 8000efe:	4b25      	ldr	r3, [pc, #148]	@ (8000f94 <box_start+0xa0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
	_FeragMsgOut  = 0;
 8000f04:	4b24      	ldr	r3, [pc, #144]	@ (8000f98 <box_start+0xa4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
	_TrackInIdx  	  = 0;
 8000f0a:	4b24      	ldr	r3, [pc, #144]	@ (8000f9c <box_start+0xa8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
	_TrackOutIdx 	  = 0;
 8000f10:	4b23      	ldr	r3, [pc, #140]	@ (8000fa0 <box_start+0xac>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
	_Status.dtCnt = 0;
 8000f16:	4b23      	ldr	r3, [pc, #140]	@ (8000fa4 <box_start+0xb0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	625a      	str	r2, [r3, #36]	@ 0x24
	_Status.pgCnt = 0;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	@ (8000fa4 <box_start+0xb0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	635a      	str	r2, [r3, #52]	@ 0x34
	_Status.pdCnt = 0;
 8000f22:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <box_start+0xb0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	639a      	str	r2, [r3, #56]	@ 0x38
	_Status.emptyGoCnt = 0;
 8000f28:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa4 <box_start+0xb0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	62da      	str	r2, [r3, #44]	@ 0x2c
	_Status.emptyDoneCnt = 0;
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa4 <box_start+0xb0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	631a      	str	r2, [r3, #48]	@ 0x30
	_Status.paceId   = 0;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <box_start+0xb0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	621a      	str	r2, [r3, #32]
	_EncoderPos   	 = 0;
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <box_start+0xb4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
	_TrackingError   = FALSE;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <box_start+0xb8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
	_PrintDoneDelay  = 0;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb0 <box_start+0xbc>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
	_PrinterReadyIn  = -1;
 8000f4c:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <box_start+0xc0>)
 8000f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f52:	601a      	str	r2, [r3, #0]
	_PrintDoneIn	 = -1;
 8000f54:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <box_start+0xc4>)
 8000f56:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5a:	601a      	str	r2, [r3, #0]
	_PaceId		     = -1;
 8000f5c:	4b17      	ldr	r3, [pc, #92]	@ (8000fbc <box_start+0xc8>)
 8000f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f62:	601a      	str	r2, [r3, #0]
	box_send_status();
 8000f64:	f000 fc50 	bl	8001808 <box_send_status>
	_Running = TRUE;
 8000f68:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <box_start+0xcc>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f74:	4813      	ldr	r0, [pc, #76]	@ (8000fc4 <box_start+0xd0>)
 8000f76:	f002 fb47 	bl	8003608 <HAL_GPIO_WritePin>
	enc_start();
 8000f7a:	f000 fe5f 	bl	8001c3c <enc_start>
	_Status.flags |= FLAG_encoder_running;
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <box_start+0xb0>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	f043 0308 	orr.w	r3, r3, #8
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <box_start+0xb0>)
 8000f8a:	701a      	strb	r2, [r3, #0]
		enc_set_speed(100);
		//--- PaceId 10 ----
		box_handle_ferag_char(0x11);
		box_handle_ferag_char(0x8a);
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	0800ce40 	.word	0x0800ce40
 8000f94:	20000254 	.word	0x20000254
 8000f98:	20000258 	.word	0x20000258
 8000f9c:	200002bc 	.word	0x200002bc
 8000fa0:	200002c0 	.word	0x200002c0
 8000fa4:	2000020c 	.word	0x2000020c
 8000fa8:	200002cc 	.word	0x200002cc
 8000fac:	200002d4 	.word	0x200002d4
 8000fb0:	200002d0 	.word	0x200002d0
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	200002c4 	.word	0x200002c4
 8000fc0:	20000208 	.word	0x20000208
 8000fc4:	48001000 	.word	0x48001000

08000fc8 <box_stop>:

//--- box_stop ----------------------------
void box_stop(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	if (_Running)
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <box_stop+0x3c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d014      	beq.n	8000ffe <box_stop+0x36>
	{
		printf("stop\n");
 8000fd4:	480c      	ldr	r0, [pc, #48]	@ (8001008 <box_stop+0x40>)
 8000fd6:	f007 ff53 	bl	8008e80 <puts>
		_Running = FALSE;
 8000fda:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <box_stop+0x3c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
		_Status.flags &= ~FLAG_encoder_running;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <box_stop+0x44>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	f023 0308 	bic.w	r3, r3, #8
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b08      	ldr	r3, [pc, #32]	@ (800100c <box_stop+0x44>)
 8000fec:	701a      	strb	r2, [r3, #0]
		enc_stop();
 8000fee:	f000 fe37 	bl	8001c60 <enc_stop>
		HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ff8:	4805      	ldr	r0, [pc, #20]	@ (8001010 <box_stop+0x48>)
 8000ffa:	f002 fb05 	bl	8003608 <HAL_GPIO_WritePin>
	}
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000208 	.word	0x20000208
 8001008:	0800ce48 	.word	0x0800ce48
 800100c:	2000020c 	.word	0x2000020c
 8001010:	48001000 	.word	0x48001000

08001014 <box_idle>:

//--- box_idle ----------------------------------------
void box_idle(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	_handle_feragMsg();
 8001018:	f000 f936 	bl	8001288 <_handle_feragMsg>
	_handle_encoder();
 800101c:	f000 f9fa 	bl	8001414 <_handle_encoder>
//	_check_printer_ready();
	if (!SIMULATION) _check_print_done();
 8001020:	f000 fa8e 	bl	8001540 <_check_print_done>
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <box_tick_10ms>:

//--- box_tick_10ms ------------------
void box_tick_10ms(int ticks)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	_Ticks = ticks;
 8001030:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <box_tick_10ms+0x34>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]

	if (_Ticks > _TicksSysCheck)
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <box_tick_10ms+0x34>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <box_tick_10ms+0x38>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	dd07      	ble.n	8001052 <box_tick_10ms+0x2a>
	{
		_TicksSysCheck = _Ticks+500;
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <box_tick_10ms+0x34>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800104a:	4a05      	ldr	r2, [pc, #20]	@ (8001060 <box_tick_10ms+0x38>)
 800104c:	6013      	str	r3, [r2, #0]
		_check_system();
 800104e:	f000 f809 	bl	8001064 <_check_system>
	}
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000248 	.word	0x20000248
 8001060:	2000024c 	.word	0x2000024c

08001064 <_check_system>:

//--- _check_system -----------------
static void _check_system(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
	_Status.voltages.voltage24V 			= (INT8)(10*adc_get_value(0, 30.0));
 800106a:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 800106e:	2000      	movs	r0, #0
 8001070:	f001 fa0c 	bl	800248c <adc_get_value>
 8001074:	eef0 7a40 	vmov.f32	s15, s0
 8001078:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800107c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001084:	edc7 7a01 	vstr	s15, [r7, #4]
 8001088:	793b      	ldrb	r3, [r7, #4]
 800108a:	b25b      	sxtb	r3, r3
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b62      	ldr	r3, [pc, #392]	@ (8001218 <_check_system+0x1b4>)
 8001090:	725a      	strb	r2, [r3, #9]
	_Status.voltages.voltage12V 			= (INT8)(10*adc_get_value(1, 15.0));
 8001092:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001096:	2001      	movs	r0, #1
 8001098:	f001 f9f8 	bl	800248c <adc_get_value>
 800109c:	eef0 7a40 	vmov.f32	s15, s0
 80010a0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80010a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80010b0:	793b      	ldrb	r3, [r7, #4]
 80010b2:	b25b      	sxtb	r3, r3
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b58      	ldr	r3, [pc, #352]	@ (8001218 <_check_system+0x1b4>)
 80010b8:	719a      	strb	r2, [r3, #6]
	_Status.voltages.voltage12VNuc 			= (INT8)(10*adc_get_value(2, 15.0));
 80010ba:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 80010be:	2002      	movs	r0, #2
 80010c0:	f001 f9e4 	bl	800248c <adc_get_value>
 80010c4:	eef0 7a40 	vmov.f32	s15, s0
 80010c8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80010cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d4:	edc7 7a01 	vstr	s15, [r7, #4]
 80010d8:	793b      	ldrb	r3, [r7, #4]
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b4e      	ldr	r3, [pc, #312]	@ (8001218 <_check_system+0x1b4>)
 80010e0:	71da      	strb	r2, [r3, #7]
	_Status.voltages.voltage12VDisplay 		= (INT8)(10*adc_get_value(3, 15.0));
 80010e2:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 80010e6:	2003      	movs	r0, #3
 80010e8:	f001 f9d0 	bl	800248c <adc_get_value>
 80010ec:	eef0 7a40 	vmov.f32	s15, s0
 80010f0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80010f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fc:	edc7 7a01 	vstr	s15, [r7, #4]
 8001100:	793b      	ldrb	r3, [r7, #4]
 8001102:	b25b      	sxtb	r3, r3
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b44      	ldr	r3, [pc, #272]	@ (8001218 <_check_system+0x1b4>)
 8001108:	721a      	strb	r2, [r3, #8]
	_Status.voltages.voltage5V 				= (INT8)(10*adc_get_value(4, 6.25));
 800110a:	eeb1 0a09 	vmov.f32	s0, #25	@ 0x40c80000  6.250
 800110e:	2004      	movs	r0, #4
 8001110:	f001 f9bc 	bl	800248c <adc_get_value>
 8001114:	eef0 7a40 	vmov.f32	s15, s0
 8001118:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800111c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001124:	edc7 7a01 	vstr	s15, [r7, #4]
 8001128:	793b      	ldrb	r3, [r7, #4]
 800112a:	b25b      	sxtb	r3, r3
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4b3a      	ldr	r3, [pc, #232]	@ (8001218 <_check_system+0x1b4>)
 8001130:	715a      	strb	r2, [r3, #5]
	_Status.voltages.voltage3V3 			= (INT8)(10*adc_get_value(5, 4.125));
 8001132:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 800121c <_check_system+0x1b8>
 8001136:	2005      	movs	r0, #5
 8001138:	f001 f9a8 	bl	800248c <adc_get_value>
 800113c:	eef0 7a40 	vmov.f32	s15, s0
 8001140:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001144:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800114c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001150:	793b      	ldrb	r3, [r7, #4]
 8001152:	b25b      	sxtb	r3, r3
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b30      	ldr	r3, [pc, #192]	@ (8001218 <_check_system+0x1b4>)
 8001158:	711a      	strb	r2, [r3, #4]
	_Status.voltages.voltagePcbRevision 	= (INT8)(10*adc_get_value(6, 4.125));
 800115a:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 800121c <_check_system+0x1b8>
 800115e:	2006      	movs	r0, #6
 8001160:	f001 f994 	bl	800248c <adc_get_value>
 8001164:	eef0 7a40 	vmov.f32	s15, s0
 8001168:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800116c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001170:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001174:	edc7 7a01 	vstr	s15, [r7, #4]
 8001178:	793b      	ldrb	r3, [r7, #4]
 800117a:	b25b      	sxtb	r3, r3
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b26      	ldr	r3, [pc, #152]	@ (8001218 <_check_system+0x1b4>)
 8001180:	729a      	strb	r2, [r3, #10]
	_Status.pcbRevision 					= adc_get_revision(_Status.voltages.voltagePcbRevision);
 8001182:	4b25      	ldr	r3, [pc, #148]	@ (8001218 <_check_system+0x1b4>)
 8001184:	7a9b      	ldrb	r3, [r3, #10]
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800118e:	eeb0 0a67 	vmov.f32	s0, s15
 8001192:	f001 f9cb 	bl	800252c <adc_get_revision>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b1f      	ldr	r3, [pc, #124]	@ (8001218 <_check_system+0x1b4>)
 800119c:	72da      	strb	r2, [r3, #11]
	_Status.boardTemperature 				= (INT8)(10*adc_get_temp());
 800119e:	f001 f99b 	bl	80024d8 <adc_get_temp>
 80011a2:	eef0 7a40 	vmov.f32	s15, s0
 80011a6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80011aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b2:	edc7 7a01 	vstr	s15, [r7, #4]
 80011b6:	793b      	ldrb	r3, [r7, #4]
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <_check_system+0x1b4>)
 80011be:	70da      	strb	r2, [r3, #3]

	// Update DIP Switch inputs
	_Status.dipSwitch						= gpio_get_dipswitches();
 80011c0:	f001 f9fc 	bl	80025bc <gpio_get_dipswitches>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <_check_system+0x1b4>)
 80011ca:	709a      	strb	r2, [r3, #2]

	// Update encoder generator parameters
	enc_get_status(&_Status.enc);
 80011cc:	4814      	ldr	r0, [pc, #80]	@ (8001220 <_check_system+0x1bc>)
 80011ce:	f000 fc29 	bl	8001a24 <enc_get_status>

	// Update Power Status
	_Status.flags=0;
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <_check_system+0x1b4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin)) _Status.flags |= FLAG_nucPower;
 80011d8:	2140      	movs	r1, #64	@ 0x40
 80011da:	4812      	ldr	r0, [pc, #72]	@ (8001224 <_check_system+0x1c0>)
 80011dc:	f002 f9fc 	bl	80035d8 <HAL_GPIO_ReadPin>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d006      	beq.n	80011f4 <_check_system+0x190>
 80011e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <_check_system+0x1b4>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <_check_system+0x1b4>)
 80011f2:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin)) _Status.flags |= FLAG_displayPower;
 80011f4:	2180      	movs	r1, #128	@ 0x80
 80011f6:	480b      	ldr	r0, [pc, #44]	@ (8001224 <_check_system+0x1c0>)
 80011f8:	f002 f9ee 	bl	80035d8 <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d006      	beq.n	8001210 <_check_system+0x1ac>
 8001202:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <_check_system+0x1b4>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	f043 0302 	orr.w	r3, r3, #2
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b02      	ldr	r3, [pc, #8]	@ (8001218 <_check_system+0x1b4>)
 800120e:	701a      	strb	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	2000020c 	.word	0x2000020c
 800121c:	40840000 	.word	0x40840000
 8001220:	20000218 	.word	0x20000218
 8001224:	48001400 	.word	0x48001400

08001228 <box_handle_ferag_char>:

//--- box_handle_ferag_char -----------------------------
void box_handle_ferag_char(char data)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	if (data & 0x80)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	da18      	bge.n	800126c <box_handle_ferag_char+0x44>
	{
		_FeragMsg.data[1]=data;
 800123a:	4a10      	ldr	r2, [pc, #64]	@ (800127c <box_handle_ferag_char+0x54>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	7053      	strb	r3, [r2, #1]
		_Status.paceId = _FeragMsg.paceId;
 8001240:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <box_handle_ferag_char+0x54>)
 8001242:	785b      	ldrb	r3, [r3, #1]
 8001244:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461a      	mov	r2, r3
 800124c:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <box_handle_ferag_char+0x58>)
 800124e:	621a      	str	r2, [r3, #32]
	//	printf("FERAG in 0x%02x 0x%02x, type=%d, info=%d, paceId=0x%02x\n", _FeragMsg.data[0], _FeragMsg.data[1], _FeragMsg.type, _FeragMsg.info, _FeragMsg.paceId);

		_Status.feragMsgInCnt++;
 8001250:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <box_handle_ferag_char+0x58>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	3301      	adds	r3, #1
 8001256:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <box_handle_ferag_char+0x58>)
 8001258:	6193      	str	r3, [r2, #24]
		_FeragMsgIn++;
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <box_handle_ferag_char+0x5c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	3301      	adds	r3, #1
 8001260:	4a08      	ldr	r2, [pc, #32]	@ (8001284 <box_handle_ferag_char+0x5c>)
 8001262:	6013      	str	r3, [r2, #0]
		ferag_send_char(0x80);
 8001264:	2080      	movs	r0, #128	@ 0x80
 8001266:	f001 f8f1 	bl	800244c <ferag_send_char>
	}
	else
	{
		_FeragMsg.data[0]=data;
	}
}
 800126a:	e002      	b.n	8001272 <box_handle_ferag_char+0x4a>
		_FeragMsg.data[0]=data;
 800126c:	4a03      	ldr	r2, [pc, #12]	@ (800127c <box_handle_ferag_char+0x54>)
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	7013      	strb	r3, [r2, #0]
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000250 	.word	0x20000250
 8001280:	2000020c 	.word	0x2000020c
 8001284:	20000254 	.word	0x20000254

08001288 <_handle_feragMsg>:

//--- _handle_feragMsg ---------------------
static void _handle_feragMsg(void)
{
 8001288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128a:	b087      	sub	sp, #28
 800128c:	af04      	add	r7, sp, #16
	if (_FeragMsgOut!=_FeragMsgIn)
 800128e:	4b53      	ldr	r3, [pc, #332]	@ (80013dc <_handle_feragMsg+0x154>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4b53      	ldr	r3, [pc, #332]	@ (80013e0 <_handle_feragMsg+0x158>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	f000 809b 	beq.w	80013d2 <_handle_feragMsg+0x14a>
	{
		int idx;
		switch (_FeragMsg.type)
 800129c:	4b51      	ldr	r3, [pc, #324]	@ (80013e4 <_handle_feragMsg+0x15c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d002      	beq.n	80012b0 <_handle_feragMsg+0x28>
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d077      	beq.n	800139e <_handle_feragMsg+0x116>
 80012ae:	e07c      	b.n	80013aa <_handle_feragMsg+0x122>
		{
		case 1:	idx=(_TrackInIdx+1)% TRACKING_CNT;
 80012b0:	4b4d      	ldr	r3, [pc, #308]	@ (80013e8 <_handle_feragMsg+0x160>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	425a      	negs	r2, r3
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	f002 020f 	and.w	r2, r2, #15
 80012c0:	bf58      	it	pl
 80012c2:	4253      	negpl	r3, r2
 80012c4:	607b      	str	r3, [r7, #4]
				if (idx==_TrackOutIdx)
 80012c6:	4b49      	ldr	r3, [pc, #292]	@ (80013ec <_handle_feragMsg+0x164>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d10a      	bne.n	80012e6 <_handle_feragMsg+0x5e>
				{
					if (!_TrackingError)
 80012d0:	4b47      	ldr	r3, [pc, #284]	@ (80013f0 <_handle_feragMsg+0x168>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <_handle_feragMsg+0x56>
					 printf("ERROR: Tracking overflow\n");
 80012d8:	4846      	ldr	r0, [pc, #280]	@ (80013f4 <_handle_feragMsg+0x16c>)
 80012da:	f007 fdd1 	bl	8008e80 <puts>
					_TrackingError= TRUE;
 80012de:	4b44      	ldr	r3, [pc, #272]	@ (80013f0 <_handle_feragMsg+0x168>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
					_TrackInIdx=idx;
					if (_FeragMsg.info&1) printf("ProductDetect %d: PaceId=%d, pos=%d-%d, delay=%d\n", _Status.dtCnt, _FeragMsg.paceId, enc_get_pos(), _EncoderPos, _PrintGoDelay);
					else printf("ProductDetect %d: PaceId=%d (EMPTY, pos=%d-%d, delay=%d, run=%d, speed=%d)\n", _Status.dtCnt, _FeragMsg.paceId, enc_get_pos(), _EncoderPos, _PrintGoDelay, _Status.flags, _Status.enc.encInSpeed);
					_Status.dtCnt++;
				}
				break;
 80012e4:	e06b      	b.n	80013be <_handle_feragMsg+0x136>
					memcpy(&_Tracking[idx].prod, &_FeragMsg,  sizeof(_Tracking[idx].prod));
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4a41      	ldr	r2, [pc, #260]	@ (80013f8 <_handle_feragMsg+0x170>)
 80012f2:	4413      	add	r3, r2
 80012f4:	3304      	adds	r3, #4
 80012f6:	4a3b      	ldr	r2, [pc, #236]	@ (80013e4 <_handle_feragMsg+0x15c>)
 80012f8:	8812      	ldrh	r2, [r2, #0]
 80012fa:	801a      	strh	r2, [r3, #0]
					_Tracking[idx].delay = _PrintGoDelay;
 80012fc:	4b3f      	ldr	r3, [pc, #252]	@ (80013fc <_handle_feragMsg+0x174>)
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	483d      	ldr	r0, [pc, #244]	@ (80013f8 <_handle_feragMsg+0x170>)
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4403      	add	r3, r0
 800130e:	6019      	str	r1, [r3, #0]
					_TrackInIdx=idx;
 8001310:	4a35      	ldr	r2, [pc, #212]	@ (80013e8 <_handle_feragMsg+0x160>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
					if (_FeragMsg.info&1) printf("ProductDetect %d: PaceId=%d, pos=%d-%d, delay=%d\n", _Status.dtCnt, _FeragMsg.paceId, enc_get_pos(), _EncoderPos, _PrintGoDelay);
 8001316:	4b33      	ldr	r3, [pc, #204]	@ (80013e4 <_handle_feragMsg+0x15c>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	d017      	beq.n	8001358 <_handle_feragMsg+0xd0>
 8001328:	4b35      	ldr	r3, [pc, #212]	@ (8001400 <_handle_feragMsg+0x178>)
 800132a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800132c:	4b2d      	ldr	r3, [pc, #180]	@ (80013e4 <_handle_feragMsg+0x15c>)
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001334:	b2db      	uxtb	r3, r3
 8001336:	461d      	mov	r5, r3
 8001338:	f001 f846 	bl	80023c8 <enc_get_pos>
 800133c:	4601      	mov	r1, r0
 800133e:	4b31      	ldr	r3, [pc, #196]	@ (8001404 <_handle_feragMsg+0x17c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a2e      	ldr	r2, [pc, #184]	@ (80013fc <_handle_feragMsg+0x174>)
 8001344:	6812      	ldr	r2, [r2, #0]
 8001346:	9201      	str	r2, [sp, #4]
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	460b      	mov	r3, r1
 800134c:	462a      	mov	r2, r5
 800134e:	4621      	mov	r1, r4
 8001350:	482d      	ldr	r0, [pc, #180]	@ (8001408 <_handle_feragMsg+0x180>)
 8001352:	f007 fd2d 	bl	8008db0 <iprintf>
 8001356:	e01c      	b.n	8001392 <_handle_feragMsg+0x10a>
					else printf("ProductDetect %d: PaceId=%d (EMPTY, pos=%d-%d, delay=%d, run=%d, speed=%d)\n", _Status.dtCnt, _FeragMsg.paceId, enc_get_pos(), _EncoderPos, _PrintGoDelay, _Status.flags, _Status.enc.encInSpeed);
 8001358:	4b29      	ldr	r3, [pc, #164]	@ (8001400 <_handle_feragMsg+0x178>)
 800135a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800135c:	4b21      	ldr	r3, [pc, #132]	@ (80013e4 <_handle_feragMsg+0x15c>)
 800135e:	785b      	ldrb	r3, [r3, #1]
 8001360:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001364:	b2db      	uxtb	r3, r3
 8001366:	461e      	mov	r6, r3
 8001368:	f001 f82e 	bl	80023c8 <enc_get_pos>
 800136c:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <_handle_feragMsg+0x17c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a22      	ldr	r2, [pc, #136]	@ (80013fc <_handle_feragMsg+0x174>)
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	4922      	ldr	r1, [pc, #136]	@ (8001400 <_handle_feragMsg+0x178>)
 8001376:	7809      	ldrb	r1, [r1, #0]
 8001378:	460d      	mov	r5, r1
 800137a:	4921      	ldr	r1, [pc, #132]	@ (8001400 <_handle_feragMsg+0x178>)
 800137c:	68c9      	ldr	r1, [r1, #12]
 800137e:	9103      	str	r1, [sp, #12]
 8001380:	9502      	str	r5, [sp, #8]
 8001382:	9201      	str	r2, [sp, #4]
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	4603      	mov	r3, r0
 8001388:	4632      	mov	r2, r6
 800138a:	4621      	mov	r1, r4
 800138c:	481f      	ldr	r0, [pc, #124]	@ (800140c <_handle_feragMsg+0x184>)
 800138e:	f007 fd0f 	bl	8008db0 <iprintf>
					_Status.dtCnt++;
 8001392:	4b1b      	ldr	r3, [pc, #108]	@ (8001400 <_handle_feragMsg+0x178>)
 8001394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001396:	3301      	adds	r3, #1
 8001398:	4a19      	ldr	r2, [pc, #100]	@ (8001400 <_handle_feragMsg+0x178>)
 800139a:	6253      	str	r3, [r2, #36]	@ 0x24
				break;
 800139c:	e00f      	b.n	80013be <_handle_feragMsg+0x136>

		case 2:		// printf("Alive\n");
					_Status.aliveCnt++; break;
 800139e:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <_handle_feragMsg+0x178>)
 80013a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a2:	3301      	adds	r3, #1
 80013a4:	4a16      	ldr	r2, [pc, #88]	@ (8001400 <_handle_feragMsg+0x178>)
 80013a6:	6293      	str	r3, [r2, #40]	@ 0x28
 80013a8:	e009      	b.n	80013be <_handle_feragMsg+0x136>
		default: 	printf("Unknown Message Type=%d\n", _FeragMsg.type);
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <_handle_feragMsg+0x15c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4619      	mov	r1, r3
 80013b6:	4816      	ldr	r0, [pc, #88]	@ (8001410 <_handle_feragMsg+0x188>)
 80013b8:	f007 fcfa 	bl	8008db0 <iprintf>
					break;
 80013bc:	bf00      	nop
		}
		_Status.feragMsgOutCnt++;
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <_handle_feragMsg+0x178>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	3301      	adds	r3, #1
 80013c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001400 <_handle_feragMsg+0x178>)
 80013c6:	61d3      	str	r3, [r2, #28]
		_FeragMsgOut++;
 80013c8:	4b04      	ldr	r3, [pc, #16]	@ (80013dc <_handle_feragMsg+0x154>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	3301      	adds	r3, #1
 80013ce:	4a03      	ldr	r2, [pc, #12]	@ (80013dc <_handle_feragMsg+0x154>)
 80013d0:	6013      	str	r3, [r2, #0]
	}
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000258 	.word	0x20000258
 80013e0:	20000254 	.word	0x20000254
 80013e4:	20000250 	.word	0x20000250
 80013e8:	200002bc 	.word	0x200002bc
 80013ec:	200002c0 	.word	0x200002c0
 80013f0:	200002d4 	.word	0x200002d4
 80013f4:	0800ce50 	.word	0x0800ce50
 80013f8:	2000025c 	.word	0x2000025c
 80013fc:	20000000 	.word	0x20000000
 8001400:	2000020c 	.word	0x2000020c
 8001404:	200002cc 	.word	0x200002cc
 8001408:	0800ce6c 	.word	0x0800ce6c
 800140c:	0800cea0 	.word	0x0800cea0
 8001410:	0800ceec 	.word	0x0800ceec

08001414 <_handle_encoder>:

//--- _handle_encoder -------------------------------------
static void _handle_encoder(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
	if (_EncoderPos!=EZ_EncoderOutPos)
 800141a:	4b32      	ldr	r3, [pc, #200]	@ (80014e4 <_handle_encoder+0xd0>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b32      	ldr	r3, [pc, #200]	@ (80014e8 <_handle_encoder+0xd4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d059      	beq.n	80014da <_handle_encoder+0xc6>
	{
		_EncoderPos++;
 8001426:	4b2f      	ldr	r3, [pc, #188]	@ (80014e4 <_handle_encoder+0xd0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	4a2d      	ldr	r2, [pc, #180]	@ (80014e4 <_handle_encoder+0xd0>)
 800142e:	6013      	str	r3, [r2, #0]
	//	if (_EncoderPos%1000==0)
	//		printf("Enc=%d: DELAY=%d, %d, %d ,%d, %d, %d, %d, %d\n", _EncoderPos, _Tracking[0].delay, _Tracking[1].delay, _Tracking[2].delay, _Tracking[3].delay, _Tracking[4].delay, _Tracking[5].delay, _Tracking[6].delay, _Tracking[7].delay);
		for (int i=0; i<TRACKING_CNT; i++)
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	e02c      	b.n	8001490 <_handle_encoder+0x7c>
		{
			if (_Tracking[i].delay>0 && (--_Tracking[i].delay)==0)
 8001436:	492d      	ldr	r1, [pc, #180]	@ (80014ec <_handle_encoder+0xd8>)
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	440b      	add	r3, r1
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	dd1f      	ble.n	800148a <_handle_encoder+0x76>
 800144a:	4928      	ldr	r1, [pc, #160]	@ (80014ec <_handle_encoder+0xd8>)
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	440b      	add	r3, r1
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	1e59      	subs	r1, r3, #1
 800145c:	4823      	ldr	r0, [pc, #140]	@ (80014ec <_handle_encoder+0xd8>)
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4403      	add	r3, r0
 800146a:	6019      	str	r1, [r3, #0]
 800146c:	491f      	ldr	r1, [pc, #124]	@ (80014ec <_handle_encoder+0xd8>)
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	440b      	add	r3, r1
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d104      	bne.n	800148a <_handle_encoder+0x76>
			{
				_TrackOutIdx=i;
 8001480:	4a1b      	ldr	r2, [pc, #108]	@ (80014f0 <_handle_encoder+0xdc>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
			//	printf("PrintGo PaceId=%d, ok=%d\n", _Tracking[i].prod.paceId, _Tracking[i].prod.info);
				box_printGo();
 8001486:	f000 f90d 	bl	80016a4 <box_printGo>
		for (int i=0; i<TRACKING_CNT; i++)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3301      	adds	r3, #1
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b0f      	cmp	r3, #15
 8001494:	ddcf      	ble.n	8001436 <_handle_encoder+0x22>
			}
		}
		if (_PrintGoOffDelay>0)
 8001496:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <_handle_encoder+0xe0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	dd0e      	ble.n	80014bc <_handle_encoder+0xa8>
		{
			if ((--_PrintGoOffDelay)==0)
 800149e:	4b15      	ldr	r3, [pc, #84]	@ (80014f4 <_handle_encoder+0xe0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	4a13      	ldr	r2, [pc, #76]	@ (80014f4 <_handle_encoder+0xe0>)
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <_handle_encoder+0xe0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d105      	bne.n	80014bc <_handle_encoder+0xa8>
				HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014b6:	4810      	ldr	r0, [pc, #64]	@ (80014f8 <_handle_encoder+0xe4>)
 80014b8:	f002 f8a6 	bl	8003608 <HAL_GPIO_WritePin>
		}

		if (_PrintDoneDelay>0)
 80014bc:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <_handle_encoder+0xe8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	dd0a      	ble.n	80014da <_handle_encoder+0xc6>
		{
			if ((--_PrintDoneDelay)==0)
 80014c4:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <_handle_encoder+0xe8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	4a0c      	ldr	r2, [pc, #48]	@ (80014fc <_handle_encoder+0xe8>)
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <_handle_encoder+0xe8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <_handle_encoder+0xc6>
				_send_print_done();
 80014d6:	f000 f859 	bl	800158c <_send_print_done>
		}
	}
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200002cc 	.word	0x200002cc
 80014e8:	200002fc 	.word	0x200002fc
 80014ec:	2000025c 	.word	0x2000025c
 80014f0:	200002c0 	.word	0x200002c0
 80014f4:	200002c8 	.word	0x200002c8
 80014f8:	48001000 	.word	0x48001000
 80014fc:	200002d0 	.word	0x200002d0

08001500 <box_test>:

void box_test(int on)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	printf("box_test(%d)\n", on);
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	480b      	ldr	r0, [pc, #44]	@ (8001538 <box_test+0x38>)
 800150c:	f007 fc50 	bl	8008db0 <iprintf>
	if (on) HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_SET);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d006      	beq.n	8001524 <box_test+0x24>
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800151c:	4807      	ldr	r0, [pc, #28]	@ (800153c <box_test+0x3c>)
 800151e:	f002 f873 	bl	8003608 <HAL_GPIO_WritePin>
	else	HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
}
 8001522:	e005      	b.n	8001530 <box_test+0x30>
	else	HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800152a:	4804      	ldr	r0, [pc, #16]	@ (800153c <box_test+0x3c>)
 800152c:	f002 f86c 	bl	8003608 <HAL_GPIO_WritePin>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	0800cf08 	.word	0x0800cf08
 800153c:	48001000 	.word	0x48001000

08001540 <_check_print_done>:

//--- _check_print_done --------------------------------------------------
static void _check_print_done(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	int pd=HAL_GPIO_ReadPin(PRINT_DONE_GPIO_Port, PRINT_DONE_Pin);
 8001546:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800154a:	480c      	ldr	r0, [pc, #48]	@ (800157c <_check_print_done+0x3c>)
 800154c:	f002 f844 	bl	80035d8 <HAL_GPIO_ReadPin>
 8001550:	4603      	mov	r3, r0
 8001552:	607b      	str	r3, [r7, #4]
//	if (_PrintDoneIn<0) _PrintDoneIn=pd;
	if (_PrintDoneIn!=pd)
 8001554:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <_check_print_done+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	429a      	cmp	r2, r3
 800155c:	d006      	beq.n	800156c <_check_print_done+0x2c>
		printf("FeragBox: PrintDone=%d, pgCnt=%d\n", pd, _Status.pgCnt);
 800155e:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <_check_print_done+0x44>)
 8001560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001562:	461a      	mov	r2, r3
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4808      	ldr	r0, [pc, #32]	@ (8001588 <_check_print_done+0x48>)
 8001568:	f007 fc22 	bl	8008db0 <iprintf>
	{
		printf("PRINT DONE: edge detected\n");
		_send_print_done();
	}
	*/
	_PrintDoneIn = pd;
 800156c:	4a04      	ldr	r2, [pc, #16]	@ (8001580 <_check_print_done+0x40>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	48001000 	.word	0x48001000
 8001580:	20000008 	.word	0x20000008
 8001584:	2000020c 	.word	0x2000020c
 8001588:	0800cf18 	.word	0x0800cf18

0800158c <_send_print_done>:
	_PrinterReadyIn = ready;
}

//--- _send_print_done ----------------------------------------
static void _send_print_done(void)
{
 800158c:	b5b0      	push	{r4, r5, r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af02      	add	r7, sp, #8
	if (enc_fixSpeed() || _Tracking[_TrackOutIdx].prod.info&0x01)
 8001592:	f000 fab3 	bl	8001afc <enc_fixSpeed>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10f      	bne.n	80015bc <_send_print_done+0x30>
 800159c:	4b3a      	ldr	r3, [pc, #232]	@ (8001688 <_send_print_done+0xfc>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	493a      	ldr	r1, [pc, #232]	@ (800168c <_send_print_done+0x100>)
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	440b      	add	r3, r1
 80015ac:	791b      	ldrb	r3, [r3, #4]
 80015ae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d02f      	beq.n	800161c <_send_print_done+0x90>
	{
		printf("PrintDone %d: PaceId[%d]=%d, ok=%d, pos=%d\n", _Status.pdCnt+_Status.emptyDoneCnt, _TrackOutIdx, _Tracking[_TrackOutIdx].prod.paceId, _Tracking[_TrackOutIdx].prod.info,_EncoderPos);
 80015bc:	4b34      	ldr	r3, [pc, #208]	@ (8001690 <_send_print_done+0x104>)
 80015be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015c0:	4b33      	ldr	r3, [pc, #204]	@ (8001690 <_send_print_done+0x104>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c4:	18d1      	adds	r1, r2, r3
 80015c6:	4b30      	ldr	r3, [pc, #192]	@ (8001688 <_send_print_done+0xfc>)
 80015c8:	6818      	ldr	r0, [r3, #0]
 80015ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001688 <_send_print_done+0xfc>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4c2f      	ldr	r4, [pc, #188]	@ (800168c <_send_print_done+0x100>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4423      	add	r3, r4
 80015da:	795b      	ldrb	r3, [r3, #5]
 80015dc:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	461d      	mov	r5, r3
 80015e4:	4b28      	ldr	r3, [pc, #160]	@ (8001688 <_send_print_done+0xfc>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4c28      	ldr	r4, [pc, #160]	@ (800168c <_send_print_done+0x100>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4423      	add	r3, r4
 80015f4:	791b      	ldrb	r3, [r3, #4]
 80015f6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b25      	ldr	r3, [pc, #148]	@ (8001694 <_send_print_done+0x108>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	9200      	str	r2, [sp, #0]
 8001606:	462b      	mov	r3, r5
 8001608:	4602      	mov	r2, r0
 800160a:	4823      	ldr	r0, [pc, #140]	@ (8001698 <_send_print_done+0x10c>)
 800160c:	f007 fbd0 	bl	8008db0 <iprintf>
		_Status.pdCnt++;
 8001610:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <_send_print_done+0x104>)
 8001612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001614:	3301      	adds	r3, #1
 8001616:	4a1e      	ldr	r2, [pc, #120]	@ (8001690 <_send_print_done+0x104>)
 8001618:	6393      	str	r3, [r2, #56]	@ 0x38
 800161a:	e02e      	b.n	800167a <_send_print_done+0xee>
	}
	else
	{
		printf("EmptyDone %d: PaceId[%d]=%d, ok=%d. pos=%d\n", _Status.pdCnt+_Status.emptyDoneCnt, _TrackOutIdx, _Tracking[_TrackOutIdx].prod.paceId, _Tracking[_TrackOutIdx].prod.info, _EncoderPos);
 800161c:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <_send_print_done+0x104>)
 800161e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001620:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <_send_print_done+0x104>)
 8001622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001624:	18d1      	adds	r1, r2, r3
 8001626:	4b18      	ldr	r3, [pc, #96]	@ (8001688 <_send_print_done+0xfc>)
 8001628:	6818      	ldr	r0, [r3, #0]
 800162a:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <_send_print_done+0xfc>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4c17      	ldr	r4, [pc, #92]	@ (800168c <_send_print_done+0x100>)
 8001630:	4613      	mov	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4413      	add	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4423      	add	r3, r4
 800163a:	795b      	ldrb	r3, [r3, #5]
 800163c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001640:	b2db      	uxtb	r3, r3
 8001642:	461d      	mov	r5, r3
 8001644:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <_send_print_done+0xfc>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4c10      	ldr	r4, [pc, #64]	@ (800168c <_send_print_done+0x100>)
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4423      	add	r3, r4
 8001654:	791b      	ldrb	r3, [r3, #4]
 8001656:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800165a:	b2db      	uxtb	r3, r3
 800165c:	461a      	mov	r2, r3
 800165e:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <_send_print_done+0x108>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	9200      	str	r2, [sp, #0]
 8001666:	462b      	mov	r3, r5
 8001668:	4602      	mov	r2, r0
 800166a:	480c      	ldr	r0, [pc, #48]	@ (800169c <_send_print_done+0x110>)
 800166c:	f007 fba0 	bl	8008db0 <iprintf>
		_Status.emptyDoneCnt++;
 8001670:	4b07      	ldr	r3, [pc, #28]	@ (8001690 <_send_print_done+0x104>)
 8001672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001674:	3301      	adds	r3, #1
 8001676:	4a06      	ldr	r2, [pc, #24]	@ (8001690 <_send_print_done+0x104>)
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	_PaceId = -1;
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <_send_print_done+0x114>)
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	601a      	str	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	bdb0      	pop	{r4, r5, r7, pc}
 8001688:	200002c0 	.word	0x200002c0
 800168c:	2000025c 	.word	0x2000025c
 8001690:	2000020c 	.word	0x2000020c
 8001694:	200002cc 	.word	0x200002cc
 8001698:	0800cf5c 	.word	0x0800cf5c
 800169c:	0800cf88 	.word	0x0800cf88
 80016a0:	200002c4 	.word	0x200002c4

080016a4 <box_printGo>:

//--- box_printGo ----------------------
void box_printGo(void)
{
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af02      	add	r7, sp, #8
//	printf("PrintGo ON %d\n",  _Ticks);
	_Status.paceId = _Tracking[_TrackOutIdx].prod.paceId;
 80016aa:	4b4b      	ldr	r3, [pc, #300]	@ (80017d8 <box_printGo+0x134>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	494b      	ldr	r1, [pc, #300]	@ (80017dc <box_printGo+0x138>)
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	440b      	add	r3, r1
 80016ba:	795b      	ldrb	r3, [r3, #5]
 80016bc:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b46      	ldr	r3, [pc, #280]	@ (80017e0 <box_printGo+0x13c>)
 80016c6:	621a      	str	r2, [r3, #32]
	_PaceId = _Tracking[_TrackOutIdx].prod.paceId;
 80016c8:	4b43      	ldr	r3, [pc, #268]	@ (80017d8 <box_printGo+0x134>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4943      	ldr	r1, [pc, #268]	@ (80017dc <box_printGo+0x138>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	440b      	add	r3, r1
 80016d8:	795b      	ldrb	r3, [r3, #5]
 80016da:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b40      	ldr	r3, [pc, #256]	@ (80017e4 <box_printGo+0x140>)
 80016e4:	601a      	str	r2, [r3, #0]
	if (enc_fixSpeed() || _Tracking[_TrackOutIdx].prod.info&0x01)
 80016e6:	f000 fa09 	bl	8001afc <enc_fixSpeed>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10f      	bne.n	8001710 <box_printGo+0x6c>
 80016f0:	4b39      	ldr	r3, [pc, #228]	@ (80017d8 <box_printGo+0x134>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4939      	ldr	r1, [pc, #228]	@ (80017dc <box_printGo+0x138>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	440b      	add	r3, r1
 8001700:	791b      	ldrb	r3, [r3, #4]
 8001702:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001706:	b2db      	uxtb	r3, r3
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d027      	beq.n	8001760 <box_printGo+0xbc>
	{
		HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_SET);
 8001710:	2201      	movs	r2, #1
 8001712:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001716:	4834      	ldr	r0, [pc, #208]	@ (80017e8 <box_printGo+0x144>)
 8001718:	f001 ff76 	bl	8003608 <HAL_GPIO_WritePin>
		printf("PrintGo %d: PaceId[%d]=%d, pos=%d\n", _Status.pgCnt+_Status.emptyGoCnt, _TrackOutIdx, _Tracking[_TrackOutIdx].prod.paceId, _EncoderPos);
 800171c:	4b30      	ldr	r3, [pc, #192]	@ (80017e0 <box_printGo+0x13c>)
 800171e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001720:	4b2f      	ldr	r3, [pc, #188]	@ (80017e0 <box_printGo+0x13c>)
 8001722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001724:	18d1      	adds	r1, r2, r3
 8001726:	4b2c      	ldr	r3, [pc, #176]	@ (80017d8 <box_printGo+0x134>)
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	4b2b      	ldr	r3, [pc, #172]	@ (80017d8 <box_printGo+0x134>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4c2b      	ldr	r4, [pc, #172]	@ (80017dc <box_printGo+0x138>)
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4423      	add	r3, r4
 800173a:	795b      	ldrb	r3, [r3, #5]
 800173c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001740:	b2db      	uxtb	r3, r3
 8001742:	461a      	mov	r2, r3
 8001744:	4b29      	ldr	r3, [pc, #164]	@ (80017ec <box_printGo+0x148>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	4613      	mov	r3, r2
 800174c:	4602      	mov	r2, r0
 800174e:	4828      	ldr	r0, [pc, #160]	@ (80017f0 <box_printGo+0x14c>)
 8001750:	f007 fb2e 	bl	8008db0 <iprintf>
		_Status.pgCnt++;
 8001754:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <box_printGo+0x13c>)
 8001756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001758:	3301      	adds	r3, #1
 800175a:	4a21      	ldr	r2, [pc, #132]	@ (80017e0 <box_printGo+0x13c>)
 800175c:	6353      	str	r3, [r2, #52]	@ 0x34
 800175e:	e020      	b.n	80017a2 <box_printGo+0xfe>
	}
	else
	{
		printf("EmptyGo %d: PaceId[%d]=%d, pos=%d\n", _Status.pgCnt+_Status.emptyGoCnt, _TrackOutIdx, _Tracking[_TrackOutIdx].prod.paceId, _EncoderPos);
 8001760:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <box_printGo+0x13c>)
 8001762:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001764:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <box_printGo+0x13c>)
 8001766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001768:	18d1      	adds	r1, r2, r3
 800176a:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <box_printGo+0x134>)
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <box_printGo+0x134>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4c1a      	ldr	r4, [pc, #104]	@ (80017dc <box_printGo+0x138>)
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4423      	add	r3, r4
 800177e:	795b      	ldrb	r3, [r3, #5]
 8001780:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001784:	b2db      	uxtb	r3, r3
 8001786:	461a      	mov	r2, r3
 8001788:	4b18      	ldr	r3, [pc, #96]	@ (80017ec <box_printGo+0x148>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	4613      	mov	r3, r2
 8001790:	4602      	mov	r2, r0
 8001792:	4818      	ldr	r0, [pc, #96]	@ (80017f4 <box_printGo+0x150>)
 8001794:	f007 fb0c 	bl	8008db0 <iprintf>
		_Status.emptyGoCnt++;
 8001798:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <box_printGo+0x13c>)
 800179a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179c:	3301      	adds	r3, #1
 800179e:	4a10      	ldr	r2, [pc, #64]	@ (80017e0 <box_printGo+0x13c>)
 80017a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
	}
	if (_PrintDoneDelay)
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <box_printGo+0x154>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00b      	beq.n	80017c2 <box_printGo+0x11e>
	{
		printf("PringGo while still printing _PrintDoneDelay=%d\n",_PrintDoneDelay);
 80017aa:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <box_printGo+0x154>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4619      	mov	r1, r3
 80017b0:	4812      	ldr	r0, [pc, #72]	@ (80017fc <box_printGo+0x158>)
 80017b2:	f007 fafd 	bl	8008db0 <iprintf>
		printf("ERROR: PringGo while still printing _PrintDoneDelay=%d\n",_PrintDoneDelay);
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <box_printGo+0x154>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4619      	mov	r1, r3
 80017bc:	4810      	ldr	r0, [pc, #64]	@ (8001800 <box_printGo+0x15c>)
 80017be:	f007 faf7 	bl	8008db0 <iprintf>
	}
	_PrintGoOffDelay = 5;
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <box_printGo+0x160>)
 80017c4:	2205      	movs	r2, #5
 80017c6:	601a      	str	r2, [r3, #0]
	_PrintDoneDelay = 7;
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <box_printGo+0x154>)
 80017ca:	2207      	movs	r2, #7
 80017cc:	601a      	str	r2, [r3, #0]
}
 80017ce:	bf00      	nop
 80017d0:	3704      	adds	r7, #4
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd90      	pop	{r4, r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200002c0 	.word	0x200002c0
 80017dc:	2000025c 	.word	0x2000025c
 80017e0:	2000020c 	.word	0x2000020c
 80017e4:	200002c4 	.word	0x200002c4
 80017e8:	48001000 	.word	0x48001000
 80017ec:	200002cc 	.word	0x200002cc
 80017f0:	0800cfb4 	.word	0x0800cfb4
 80017f4:	0800cfd8 	.word	0x0800cfd8
 80017f8:	200002d0 	.word	0x200002d0
 80017fc:	0800cffc 	.word	0x0800cffc
 8001800:	0800d030 	.word	0x0800d030
 8001804:	200002c8 	.word	0x200002c8

08001808 <box_send_status>:

//--- box_send_status ----------------------------------------
void box_send_status(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800180e:	af00      	add	r7, sp, #0
	printf("encOut Pos:     %d\n",    (int)_Status.enc.encOutPos);
	printf("PrintGo Cnt:    %d\n",    (int)_Status.pgCnt);
	printf("\n");
	 */
	char msg[512];
	_Status.test++;
 8001810:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <box_send_status+0x40>)
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	3301      	adds	r3, #1
 8001816:	4a0c      	ldr	r2, [pc, #48]	@ (8001848 <box_send_status+0x40>)
 8001818:	6153      	str	r3, [r2, #20]
		printf(&msg[start]);
		msg[start+l]=ch;
		start+=l;
	}
	*/
	printf("STATUS %s\n", bin2hex(msg, &_Status, sizeof(_Status)));
 800181a:	463b      	mov	r3, r7
 800181c:	223c      	movs	r2, #60	@ 0x3c
 800181e:	490a      	ldr	r1, [pc, #40]	@ (8001848 <box_send_status+0x40>)
 8001820:	4618      	mov	r0, r3
 8001822:	f000 fa69 	bl	8001cf8 <bin2hex>
 8001826:	4603      	mov	r3, r0
 8001828:	4619      	mov	r1, r3
 800182a:	4808      	ldr	r0, [pc, #32]	@ (800184c <box_send_status+0x44>)
 800182c:	f007 fac0 	bl	8008db0 <iprintf>
	fflush(stdout);
 8001830:	4b07      	ldr	r3, [pc, #28]	@ (8001850 <box_send_status+0x48>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	4618      	mov	r0, r3
 8001838:	f007 f9e4 	bl	8008c04 <fflush>
}
 800183c:	bf00      	nop
 800183e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	2000020c 	.word	0x2000020c
 800184c:	0800d068 	.word	0x0800d068
 8001850:	20000030 	.word	0x20000030

08001854 <enc_init>:

static void _set_speed(int32_t speed);

//--- enc_init ----------------------------------
void enc_init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	_Timer_clock_frequency = HAL_RCC_GetPCLK1Freq(); // Adjust based on your clock tree settings
 8001858:	f003 fec4 	bl	80055e4 <HAL_RCC_GetPCLK1Freq>
 800185c:	4603      	mov	r3, r0
 800185e:	4a05      	ldr	r2, [pc, #20]	@ (8001874 <enc_init+0x20>)
 8001860:	6013      	str	r3, [r2, #0]
	_Prescaler=1;
 8001862:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <enc_init+0x24>)
 8001864:	2201      	movs	r2, #1
 8001866:	601a      	str	r2, [r3, #0]
	EZ_EncoderInPos = 0;
 8001868:	4b04      	ldr	r3, [pc, #16]	@ (800187c <enc_init+0x28>)
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200002d8 	.word	0x200002d8
 8001878:	200002dc 	.word	0x200002dc
 800187c:	200002f8 	.word	0x200002f8

08001880 <enc_in_irq>:

static int test=0;

//--- enc_irq ------------------------
void enc_in_irq(TIM_HandleTypeDef *htim)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	int time=HAL_GetTick();
 8001888:	f001 fb98 	bl	8002fbc <HAL_GetTick>
 800188c:	4603      	mov	r3, r0
 800188e:	61fb      	str	r3, [r7, #28]
	int pos = EZ_EncoderInPos;
 8001890:	4b24      	ldr	r3, [pc, #144]	@ (8001924 <enc_in_irq+0xa4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	61bb      	str	r3, [r7, #24]
	EZ_EncoderInPos = enc_get_pos();
 8001896:	f000 fd97 	bl	80023c8 <enc_get_pos>
 800189a:	4603      	mov	r3, r0
 800189c:	4a21      	ldr	r2, [pc, #132]	@ (8001924 <enc_in_irq+0xa4>)
 800189e:	6013      	str	r3, [r2, #0]
	int dist=EZ_EncoderInPos-pos;
 80018a0:	4b20      	ldr	r3, [pc, #128]	@ (8001924 <enc_in_irq+0xa4>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	617b      	str	r3, [r7, #20]
	int t=time-_EncInTime;
 80018aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001928 <enc_in_irq+0xa8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	613b      	str	r3, [r7, #16]
	if (t==0) _EncStatus.encInSpeed=0;
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d103      	bne.n	80018c2 <enc_in_irq+0x42>
 80018ba:	4b1c      	ldr	r3, [pc, #112]	@ (800192c <enc_in_irq+0xac>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	e009      	b.n	80018d6 <enc_in_irq+0x56>
	else
		_EncStatus.encInSpeed = (dist*1000)/t;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018c8:	fb03 f202 	mul.w	r2, r3, r2
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80018d2:	4a16      	ldr	r2, [pc, #88]	@ (800192c <enc_in_irq+0xac>)
 80018d4:	6013      	str	r3, [r2, #0]

	_EncInTime=time;
 80018d6:	4a14      	ldr	r2, [pc, #80]	@ (8001928 <enc_in_irq+0xa8>)
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	6013      	str	r3, [r2, #0]

	//--- set output speed ------
	int speed = (int)(_EncStatus.encInSpeed*_EncOut_incPM/_EncIn_incPM/2);
 80018dc:	4b13      	ldr	r3, [pc, #76]	@ (800192c <enc_in_irq+0xac>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	ee07 3a90 	vmov	s15, r3
 80018e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018e8:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <enc_in_irq+0xb0>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ee67 6a27 	vmul.f32	s13, s14, s15
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <enc_in_irq+0xb4>)
 80018f4:	edd3 7a00 	vldr	s15, [r3]
 80018f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018fc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001908:	ee17 3a90 	vmov	r3, s15
 800190c:	60fb      	str	r3, [r7, #12]
	if (!_FixedSpeed)
 800190e:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <enc_in_irq+0xb8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d102      	bne.n	800191c <enc_in_irq+0x9c>
		enc_set_speed(speed);
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 f8ba 	bl	8001a90 <enc_set_speed>
}
 800191c:	bf00      	nop
 800191e:	3720      	adds	r7, #32
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200002f8 	.word	0x200002f8
 8001928:	200002f4 	.word	0x200002f4
 800192c:	200002e0 	.word	0x200002e0
 8001930:	20000010 	.word	0x20000010
 8001934:	2000000c 	.word	0x2000000c
 8001938:	20000310 	.word	0x20000310

0800193c <enc_tick_10ms>:

//--- enc_tick_10ms ---------------------------
void enc_tick_10ms(int ticks)
{
 800193c:	b5b0      	push	{r4, r5, r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	if (ticks-_EncOutTime>1000)
 8001944:	4b2f      	ldr	r3, [pc, #188]	@ (8001a04 <enc_tick_10ms+0xc8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001950:	dd54      	ble.n	80019fc <enc_tick_10ms+0xc0>
	{
		float t=(float)(ticks-_EncOutTime);
 8001952:	4b2c      	ldr	r3, [pc, #176]	@ (8001a04 <enc_tick_10ms+0xc8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001962:	edc7 7a03 	vstr	s15, [r7, #12]
		_EncStatus.encOutSpeed = (int32_t) (1000.0*_EncOutSpeedCnt/t/2);
 8001966:	4b28      	ldr	r3, [pc, #160]	@ (8001a08 <enc_tick_10ms+0xcc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fdda 	bl	8000524 <__aeabi_i2d>
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	4b25      	ldr	r3, [pc, #148]	@ (8001a0c <enc_tick_10ms+0xd0>)
 8001976:	f7fe fe3f 	bl	80005f8 <__aeabi_dmul>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4614      	mov	r4, r2
 8001980:	461d      	mov	r5, r3
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f7fe fde0 	bl	8000548 <__aeabi_f2d>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4620      	mov	r0, r4
 800198e:	4629      	mov	r1, r5
 8001990:	f7fe ff5c 	bl	800084c <__aeabi_ddiv>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019a4:	f7fe ff52 	bl	800084c <__aeabi_ddiv>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	f7ff f8d2 	bl	8000b58 <__aeabi_d2iz>
 80019b4:	4603      	mov	r3, r0
 80019b6:	4a16      	ldr	r2, [pc, #88]	@ (8001a10 <enc_tick_10ms+0xd4>)
 80019b8:	6053      	str	r3, [r2, #4]
		_EncOutTime=ticks;
 80019ba:	4a12      	ldr	r2, [pc, #72]	@ (8001a04 <enc_tick_10ms+0xc8>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6013      	str	r3, [r2, #0]
		_EncOutSpeedCnt=0;
 80019c0:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <enc_tick_10ms+0xcc>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
		if (_FixedSpeed==777 && _SpeedOutSet<20000)
 80019c6:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <enc_tick_10ms+0xd8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f240 3209 	movw	r2, #777	@ 0x309
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d114      	bne.n	80019fc <enc_tick_10ms+0xc0>
 80019d2:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <enc_tick_10ms+0xdc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80019da:	4293      	cmp	r3, r2
 80019dc:	dc0e      	bgt.n	80019fc <enc_tick_10ms+0xc0>
		{
			_SpeedOutSet    += 1000;
 80019de:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <enc_tick_10ms+0xdc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80019e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001a18 <enc_tick_10ms+0xdc>)
 80019e8:	6013      	str	r3, [r2, #0]
			_SpeedOutChange = TRUE;
 80019ea:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <enc_tick_10ms+0xe0>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
			printf("LOG: SetSpeed=%d Hz\n", _SpeedOutSet);
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <enc_tick_10ms+0xdc>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4619      	mov	r1, r3
 80019f6:	480a      	ldr	r0, [pc, #40]	@ (8001a20 <enc_tick_10ms+0xe4>)
 80019f8:	f007 f9da 	bl	8008db0 <iprintf>
		}
	}
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bdb0      	pop	{r4, r5, r7, pc}
 8001a04:	20000308 	.word	0x20000308
 8001a08:	2000030c 	.word	0x2000030c
 8001a0c:	408f4000 	.word	0x408f4000
 8001a10:	200002e0 	.word	0x200002e0
 8001a14:	20000310 	.word	0x20000310
 8001a18:	20000300 	.word	0x20000300
 8001a1c:	20000304 	.word	0x20000304
 8001a20:	0800d074 	.word	0x0800d074

08001a24 <enc_get_status>:

//--- enc_get_status -------------------------------
void enc_get_status(SEZFB_EncStatus *pstatus)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	memcpy(pstatus, &_EncStatus, sizeof(_EncStatus));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4906      	ldr	r1, [pc, #24]	@ (8001a48 <enc_get_status+0x24>)
 8001a30:	461a      	mov	r2, r3
 8001a32:	460b      	mov	r3, r1
 8001a34:	cb03      	ldmia	r3!, {r0, r1}
 8001a36:	6010      	str	r0, [r2, #0]
 8001a38:	6051      	str	r1, [r2, #4]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	200002e0 	.word	0x200002e0

08001a4c <enc_command>:

//--- enc_command ----------------------------------
void enc_command(const char *args)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
    int cnt=0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]

   // Parse the command arguments for action type
  //  if (strstr(args, "start")) 		enc_start();
  //  else if (strstr(args, "stop"))	enc_stop();
  //  else
    if ((cnt=sscanf(args, "speed %d", &_FixedSpeed)))
 8001a58:	4a0a      	ldr	r2, [pc, #40]	@ (8001a84 <enc_command+0x38>)
 8001a5a:	490b      	ldr	r1, [pc, #44]	@ (8001a88 <enc_command+0x3c>)
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f007 fa37 	bl	8008ed0 <siscanf>
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d005      	beq.n	8001a76 <enc_command+0x2a>
    {
    //	printf("LOG: enc_command speed=%d Hz\n", _FixedSpeed);
    	enc_set_speed(_FixedSpeed);
 8001a6a:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <enc_command+0x38>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f80e 	bl	8001a90 <enc_set_speed>
    }
    else
    {
        printf("Unknown command. Use 'encoder start', 'encoder stop', or 'encoder speed ...'\n");
    }
}
 8001a74:	e002      	b.n	8001a7c <enc_command+0x30>
        printf("Unknown command. Use 'encoder start', 'encoder stop', or 'encoder speed ...'\n");
 8001a76:	4805      	ldr	r0, [pc, #20]	@ (8001a8c <enc_command+0x40>)
 8001a78:	f007 fa02 	bl	8008e80 <puts>
}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000310 	.word	0x20000310
 8001a88:	0800d08c 	.word	0x0800d08c
 8001a8c:	0800d098 	.word	0x0800d098

08001a90 <enc_set_speed>:

//--- enc_set_speed ---------------------------
void enc_set_speed(int32_t speed)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	if (_FixedSpeed) speed=_FixedSpeed;
 8001a98:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <enc_set_speed+0x58>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <enc_set_speed+0x16>
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <enc_set_speed+0x58>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	607b      	str	r3, [r7, #4]
	if (!_Init) _set_speed(speed);
 8001aa6:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <enc_set_speed+0x5c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d103      	bne.n	8001ab6 <enc_set_speed+0x26>
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f830 	bl	8001b14 <_set_speed>
 8001ab4:	e011      	b.n	8001ada <enc_set_speed+0x4a>
	else if (speed!=_SpeedOutSet)
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8001af0 <enc_set_speed+0x60>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d00c      	beq.n	8001ada <enc_set_speed+0x4a>
	{
		_SpeedOutSet = speed;
 8001ac0:	4a0b      	ldr	r2, [pc, #44]	@ (8001af0 <enc_set_speed+0x60>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6013      	str	r3, [r2, #0]
		_SpeedOutChange = TRUE;
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <enc_set_speed+0x64>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	601a      	str	r2, [r3, #0]
	//	printf("Encoder Speedchange=%d\n", speed);
		if (!_TimerRunning) _set_speed(speed);
 8001acc:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <enc_set_speed+0x68>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d102      	bne.n	8001ada <enc_set_speed+0x4a>
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f81d 	bl	8001b14 <_set_speed>
	}
	_Init=TRUE;
 8001ada:	4b04      	ldr	r3, [pc, #16]	@ (8001aec <enc_set_speed+0x5c>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000310 	.word	0x20000310
 8001aec:	200002e8 	.word	0x200002e8
 8001af0:	20000300 	.word	0x20000300
 8001af4:	20000304 	.word	0x20000304
 8001af8:	200002f0 	.word	0x200002f0

08001afc <enc_fixSpeed>:

//--- enc_fixSpeed ----------------------------
int  enc_fixSpeed(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
	return _FixedSpeed;
 8001b00:	4b03      	ldr	r3, [pc, #12]	@ (8001b10 <enc_fixSpeed+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000310 	.word	0x20000310

08001b14 <_set_speed>:

//--- _set_speed ------------------------------
static void _set_speed(int32_t speed)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	if (htim2.Instance)
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b8c <_set_speed+0x78>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d02f      	beq.n	8001b84 <_set_speed+0x70>
	{
		printf("_set_speed(%d)\n", speed);
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	481a      	ldr	r0, [pc, #104]	@ (8001b90 <_set_speed+0x7c>)
 8001b28:	f007 f942 	bl	8008db0 <iprintf>
		if (speed==0)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <_set_speed+0x2c>
		{
		//	printf("LOG: encoder HAL_TIM_Base_Stop\n");
			HAL_TIM_Base_Stop(&htim2);
 8001b32:	4816      	ldr	r0, [pc, #88]	@ (8001b8c <_set_speed+0x78>)
 8001b34:	f003 ffbe 	bl	8005ab4 <HAL_TIM_Base_Stop>
			_TimerRunning = FALSE;
 8001b38:	4b16      	ldr	r3, [pc, #88]	@ (8001b94 <_set_speed+0x80>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
				}
				HAL_TIM_Base_Start(&htim2);
			}
		}
	}
}
 8001b3e:	e021      	b.n	8001b84 <_set_speed+0x70>
			uint32_t period = ((_Timer_clock_frequency / (_Prescaler * speed)) / 2) - 1;
 8001b40:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <_set_speed+0x84>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <_set_speed+0x88>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	fb01 f303 	mul.w	r3, r1, r3
 8001b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b52:	085b      	lsrs	r3, r3, #1
 8001b54:	3b01      	subs	r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
			TIM2->ARR = period;
 8001b58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
			if (!_TimerRunning)
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <_set_speed+0x80>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10d      	bne.n	8001b84 <_set_speed+0x70>
				_TimerRunning = TRUE;
 8001b68:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <_set_speed+0x80>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]
				if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8001b6e:	4807      	ldr	r0, [pc, #28]	@ (8001b8c <_set_speed+0x78>)
 8001b70:	f003 ffc8 	bl	8005b04 <HAL_TIM_Base_Start_IT>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <_set_speed+0x6a>
					Error_Handler();
 8001b7a:	f000 fe37 	bl	80027ec <Error_Handler>
				HAL_TIM_Base_Start(&htim2);
 8001b7e:	4803      	ldr	r0, [pc, #12]	@ (8001b8c <_set_speed+0x78>)
 8001b80:	f003 ff38 	bl	80059f4 <HAL_TIM_Base_Start>
}
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000368 	.word	0x20000368
 8001b90:	0800d0e8 	.word	0x0800d0e8
 8001b94:	200002f0 	.word	0x200002f0
 8001b98:	200002d8 	.word	0x200002d8
 8001b9c:	200002dc 	.word	0x200002dc

08001ba0 <enc_out_irq>:

//--- enc_out_irq -------------------------------
void enc_out_irq(TIM_HandleTypeDef *htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  EZ_EncoderOutPos++;
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c28 <enc_out_irq+0x88>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	3301      	adds	r3, #1
 8001bae:	4a1e      	ldr	r2, [pc, #120]	@ (8001c28 <enc_out_irq+0x88>)
 8001bb0:	6013      	str	r3, [r2, #0]
  _EncOutSpeedCnt++;
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c2c <enc_out_irq+0x8c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8001c2c <enc_out_irq+0x8c>)
 8001bba:	6013      	str	r3, [r2, #0]
  switch(EZ_EncoderOutPos&0x03)
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <enc_out_irq+0x88>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d81f      	bhi.n	8001c08 <enc_out_irq+0x68>
 8001bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8001bd0 <enc_out_irq+0x30>)
 8001bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bce:	bf00      	nop
 8001bd0:	08001be1 	.word	0x08001be1
 8001bd4:	08001bed 	.word	0x08001bed
 8001bd8:	08001bf5 	.word	0x08001bf5
 8001bdc:	08001c01 	.word	0x08001c01
  {
  case 0: ENCODER_A_GPIO_Port->BRR  = ENCODER_A_Pin; break;
 8001be0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001be4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001be8:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bea:	e00d      	b.n	8001c08 <enc_out_irq+0x68>
  case 1: ENCODER_B_GPIO_Port->BRR  = ENCODER_B_Pin; break;
 8001bec:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <enc_out_irq+0x90>)
 8001bee:	2208      	movs	r2, #8
 8001bf0:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bf2:	e009      	b.n	8001c08 <enc_out_irq+0x68>
  case 2: ENCODER_A_GPIO_Port->BSRR = ENCODER_A_Pin; break;
 8001bf4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001bf8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001bfc:	619a      	str	r2, [r3, #24]
 8001bfe:	e003      	b.n	8001c08 <enc_out_irq+0x68>
  case 3: ENCODER_B_GPIO_Port->BSRR = ENCODER_B_Pin; break;
 8001c00:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <enc_out_irq+0x90>)
 8001c02:	2208      	movs	r2, #8
 8001c04:	619a      	str	r2, [r3, #24]
 8001c06:	bf00      	nop
  }
  if (_SpeedOutChange)
 8001c08:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <enc_out_irq+0x94>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d004      	beq.n	8001c1a <enc_out_irq+0x7a>
	  _set_speed(_SpeedOutSet);
 8001c10:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <enc_out_irq+0x98>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff7d 	bl	8001b14 <_set_speed>
  _SpeedOutChange = FALSE;
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <enc_out_irq+0x94>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200002fc 	.word	0x200002fc
 8001c2c:	2000030c 	.word	0x2000030c
 8001c30:	48000400 	.word	0x48000400
 8001c34:	20000304 	.word	0x20000304
 8001c38:	20000300 	.word	0x20000300

08001c3c <enc_start>:

//--- enc_start ---------------------------
void enc_start(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
//	if (_FixedSpeed) printf("WARN: Encoder speed fixed to %d Hz\n", _FixedSpeed);

    // Apply the last configured settings and start PWM
	_Running = TRUE;
 8001c40:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <enc_start+0x1c>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
	EZ_EncoderOutPos=0;
 8001c46:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <enc_start+0x20>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	200002ec 	.word	0x200002ec
 8001c5c:	200002fc 	.word	0x200002fc

08001c60 <enc_stop>:

//--- enc_stop ---------------------------------
void enc_stop(void) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
    // Stop the PWM and ensure both outputs are low
	if (_Running)
 8001c64:	4b0d      	ldr	r3, [pc, #52]	@ (8001c9c <enc_stop+0x3c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d012      	beq.n	8001c92 <enc_stop+0x32>
	{
		_SpeedOutSet=0;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <enc_stop+0x40>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
		_SpeedOutChange=TRUE;
 8001c72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <enc_stop+0x44>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(ENCODER_A_GPIO_Port, ENCODER_A_Pin, GPIO_PIN_SET);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c82:	f001 fcc1 	bl	8003608 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENCODER_B_GPIO_Port, ENCODER_A_Pin, GPIO_PIN_SET);
 8001c86:	2201      	movs	r2, #1
 8001c88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c8c:	4806      	ldr	r0, [pc, #24]	@ (8001ca8 <enc_stop+0x48>)
 8001c8e:	f001 fcbb 	bl	8003608 <HAL_GPIO_WritePin>
	}
	_Running = FALSE;
 8001c92:	4b02      	ldr	r3, [pc, #8]	@ (8001c9c <enc_stop+0x3c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	200002ec 	.word	0x200002ec
 8001ca0:	20000300 	.word	0x20000300
 8001ca4:	20000304 	.word	0x20000304
 8001ca8:	48000400 	.word	0x48000400

08001cac <strstart>:
#include <stdlib.h>
#include "ge_common.h"

//--- strstart ---------------------------------------
char *strstart(const char *str, const char *start)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
	int len=strlen(start);
 8001cb6:	6838      	ldr	r0, [r7, #0]
 8001cb8:	f7fe fada 	bl	8000270 <strlen>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	60fb      	str	r3, [r7, #12]
	if (!strncmp(str, start, len))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	6839      	ldr	r1, [r7, #0]
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f007 fa0e 	bl	80090e8 <strncmp>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10d      	bne.n	8001cee <strstart+0x42>
	{
		while (str[len]==' ') len++;
 8001cd2:	e002      	b.n	8001cda <strstart+0x2e>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	d0f6      	beq.n	8001cd4 <strstart+0x28>
		return (char*)&str[len];
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	e000      	b.n	8001cf0 <strstart+0x44>
	}
	return 0;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <bin2hex>:

//--- bin2hex ------------------------------
char *bin2hex(char *str, void *data, int len)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
	UINT8 *src=(UINT8*)data;
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	61fb      	str	r3, [r7, #28]
	char *dst = str;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	61bb      	str	r3, [r7, #24]
	dst+= sprintf(dst, "%03d ", len);
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	4913      	ldr	r1, [pc, #76]	@ (8001d5c <bin2hex+0x64>)
 8001d10:	69b8      	ldr	r0, [r7, #24]
 8001d12:	f007 f8bd 	bl	8008e90 <siprintf>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
	for(int i=0; i<len; i++, src++)
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	e011      	b.n	8001d4a <bin2hex+0x52>
	{
		dst+=sprintf(dst, "%02x ", *src);
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	490c      	ldr	r1, [pc, #48]	@ (8001d60 <bin2hex+0x68>)
 8001d2e:	69b8      	ldr	r0, [r7, #24]
 8001d30:	f007 f8ae 	bl	8008e90 <siprintf>
 8001d34:	4603      	mov	r3, r0
 8001d36:	461a      	mov	r2, r3
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
	for(int i=0; i<len; i++, src++)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3301      	adds	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	3301      	adds	r3, #1
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	dbe9      	blt.n	8001d26 <bin2hex+0x2e>
	}
	return str;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	0800d0f8 	.word	0x0800d0f8
 8001d60:	0800d100 	.word	0x0800d100

08001d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d6a:	f001 f8cd 	bl	8002f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d6e:	f000 f85d 	bl	8001e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d72:	f000 fa59 	bl	8002228 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001d76:	f000 fa27 	bl	80021c8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001d7a:	f000 f945 	bl	8002008 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001d7e:	f000 f8b5 	bl	8001eec <MX_I2C1_Init>
  MX_TIM2_Init();
 8001d82:	f000 f8f3 	bl	8001f6c <MX_TIM2_Init>
  MX_TIM5_Init();
 8001d86:	f000 f999 	bl	80020bc <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001d8a:	f000 f9eb 	bl	8002164 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001d8e:	213c      	movs	r1, #60	@ 0x3c
 8001d90:	481f      	ldr	r0, [pc, #124]	@ (8001e10 <main+0xac>)
 8001d92:	f003 ffc5 	bl	8005d20 <HAL_TIM_Encoder_Start>

  // Kick off asynchronous UART RCV
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&RxDataFERAG, 1);
 8001d96:	2201      	movs	r2, #1
 8001d98:	491e      	ldr	r1, [pc, #120]	@ (8001e14 <main+0xb0>)
 8001d9a:	481f      	ldr	r0, [pc, #124]	@ (8001e18 <main+0xb4>)
 8001d9c:	f004 fd5e 	bl	800685c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&RxDataNUC, 1);
 8001da0:	2201      	movs	r2, #1
 8001da2:	491e      	ldr	r1, [pc, #120]	@ (8001e1c <main+0xb8>)
 8001da4:	481e      	ldr	r0, [pc, #120]	@ (8001e20 <main+0xbc>)
 8001da6:	f004 fd59 	bl	800685c <HAL_UART_Receive_IT>

  term_init();
 8001daa:	f000 ffc3 	bl	8002d34 <term_init>
  enc_init();
 8001dae:	f7ff fd51 	bl	8001854 <enc_init>
  box_init();
 8001db2:	f7ff f84d 	bl	8000e50 <box_init>

  power_nuc(TRUE);
 8001db6:	2001      	movs	r0, #1
 8001db8:	f000 fc54 	bl	8002664 <power_nuc>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	AD55936_init(&hi2c1, 0x10 << 1);
 8001dbc:	2120      	movs	r1, #32
 8001dbe:	4819      	ldr	r0, [pc, #100]	@ (8001e24 <main+0xc0>)
 8001dc0:	f7fe ff98 	bl	8000cf4 <AD55936_init>
	int _ticks=0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	607b      	str	r3, [r7, #4]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		int ticks= HAL_GetTick();
 8001dc8:	f001 f8f8 	bl	8002fbc <HAL_GetTick>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	603b      	str	r3, [r7, #0]

		while (ticks-_ticks>9)
 8001dd0:	e013      	b.n	8001dfa <main+0x96>
		{
			_tick_10ms(ticks);
 8001dd2:	6838      	ldr	r0, [r7, #0]
 8001dd4:	f000 fb4c 	bl	8002470 <_tick_10ms>
			_ticks=ticks;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	607b      	str	r3, [r7, #4]
			if (_powerDisplay && _ticks>_powerDisplay)
 8001ddc:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <main+0xc4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00a      	beq.n	8001dfa <main+0x96>
 8001de4:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <main+0xc4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	dd05      	ble.n	8001dfa <main+0x96>
			{
				_powerDisplay=0;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <main+0xc4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
				power_display(TRUE);
 8001df4:	2001      	movs	r0, #1
 8001df6:	f000 fc4d 	bl	8002694 <power_display>
		while (ticks-_ticks>9)
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b09      	cmp	r3, #9
 8001e02:	dce6      	bgt.n	8001dd2 <main+0x6e>
			}
		}
		box_idle();
 8001e04:	f7ff f906 	bl	8001014 <box_idle>
		term_idle();
 8001e08:	f000 ffc0 	bl	8002d8c <term_idle>
	{
 8001e0c:	e7dc      	b.n	8001dc8 <main+0x64>
 8001e0e:	bf00      	nop
 8001e10:	20000400 	.word	0x20000400
 8001e14:	2000055d 	.word	0x2000055d
 8001e18:	2000044c 	.word	0x2000044c
 8001e1c:	2000055c 	.word	0x2000055c
 8001e20:	200004d4 	.word	0x200004d4
 8001e24:	20000314 	.word	0x20000314
 8001e28:	20000014 	.word	0x20000014

08001e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b09a      	sub	sp, #104	@ 0x68
 8001e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e32:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e36:	2228      	movs	r2, #40	@ 0x28
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f007 f94c 	bl	80090d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e50:	463b      	mov	r3, r7
 8001e52:	222c      	movs	r2, #44	@ 0x2c
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f007 f93e 	bl	80090d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e64:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e66:	2300      	movs	r3, #0
 8001e68:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e6e:	2310      	movs	r3, #16
 8001e70:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e72:	2302      	movs	r3, #2
 8001e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e7a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001e7c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e80:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e82:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 f97a 	bl	8004180 <HAL_RCC_OscConfig>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001e92:	f000 fcab 	bl	80027ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e96:	230f      	movs	r3, #15
 8001e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ea2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 f9a2 	bl	80051fc <HAL_RCC_ClockConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001ebe:	f000 fc95 	bl	80027ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8001ec2:	2325      	movs	r3, #37	@ 0x25
 8001ec4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ed2:	463b      	mov	r3, r7
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f003 fbc9 	bl	800566c <HAL_RCCEx_PeriphCLKConfig>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001ee0:	f000 fc84 	bl	80027ec <Error_Handler>
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	3768      	adds	r7, #104	@ 0x68
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f60 <MX_I2C1_Init+0x74>)
 8001ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f64 <MX_I2C1_Init+0x78>)
 8001ef4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f60 <MX_I2C1_Init+0x74>)
 8001ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f68 <MX_I2C1_Init+0x7c>)
 8001efa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001efc:	4b18      	ldr	r3, [pc, #96]	@ (8001f60 <MX_I2C1_Init+0x74>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f02:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <MX_I2C1_Init+0x74>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f08:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <MX_I2C1_Init+0x74>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f0e:	4b14      	ldr	r3, [pc, #80]	@ (8001f60 <MX_I2C1_Init+0x74>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f14:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <MX_I2C1_Init+0x74>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f1a:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <MX_I2C1_Init+0x74>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f20:	4b0f      	ldr	r3, [pc, #60]	@ (8001f60 <MX_I2C1_Init+0x74>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f26:	480e      	ldr	r0, [pc, #56]	@ (8001f60 <MX_I2C1_Init+0x74>)
 8001f28:	f001 fb86 	bl	8003638 <HAL_I2C_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f32:	f000 fc5b 	bl	80027ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f36:	2100      	movs	r1, #0
 8001f38:	4809      	ldr	r0, [pc, #36]	@ (8001f60 <MX_I2C1_Init+0x74>)
 8001f3a:	f002 f889 	bl	8004050 <HAL_I2CEx_ConfigAnalogFilter>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f44:	f000 fc52 	bl	80027ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4805      	ldr	r0, [pc, #20]	@ (8001f60 <MX_I2C1_Init+0x74>)
 8001f4c:	f002 f8cb 	bl	80040e6 <HAL_I2CEx_ConfigDigitalFilter>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f56:	f000 fc49 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000314 	.word	0x20000314
 8001f64:	40005400 	.word	0x40005400
 8001f68:	2000090e 	.word	0x2000090e

08001f6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
//	PWM for encoder output
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f72:	f107 0308 	add.w	r3, r7, #8
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f80:	463b      	mov	r3, r7
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f88:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <MX_TIM2_Init+0x94>)
 8001f8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	@ (8002000 <MX_TIM2_Init+0x94>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f96:	4b1a      	ldr	r3, [pc, #104]	@ (8002000 <MX_TIM2_Init+0x94>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 8001f9c:	4b18      	ldr	r3, [pc, #96]	@ (8002000 <MX_TIM2_Init+0x94>)
 8001f9e:	4a19      	ldr	r2, [pc, #100]	@ (8002004 <MX_TIM2_Init+0x98>)
 8001fa0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa2:	4b17      	ldr	r3, [pc, #92]	@ (8002000 <MX_TIM2_Init+0x94>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa8:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <MX_TIM2_Init+0x94>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fae:	4814      	ldr	r0, [pc, #80]	@ (8002000 <MX_TIM2_Init+0x94>)
 8001fb0:	f003 fcd0 	bl	8005954 <HAL_TIM_Base_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001fba:	f000 fc17 	bl	80027ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fc4:	f107 0308 	add.w	r3, r7, #8
 8001fc8:	4619      	mov	r1, r3
 8001fca:	480d      	ldr	r0, [pc, #52]	@ (8002000 <MX_TIM2_Init+0x94>)
 8001fcc:	f004 f83e 	bl	800604c <HAL_TIM_ConfigClockSource>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001fd6:	f000 fc09 	bl	80027ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4806      	ldr	r0, [pc, #24]	@ (8002000 <MX_TIM2_Init+0x94>)
 8001fe8:	f004 fa7a 	bl	80064e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001ff2:	f000 fbfb 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000368 	.word	0x20000368
 8002004:	000186a0 	.word	0x000186a0

08002008 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800200e:	f107 0308 	add.w	r3, r7, #8
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800201c:	463b      	mov	r3, r7
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002024:	4b23      	ldr	r3, [pc, #140]	@ (80020b4 <MX_TIM3_Init+0xac>)
 8002026:	4a24      	ldr	r2, [pc, #144]	@ (80020b8 <MX_TIM3_Init+0xb0>)
 8002028:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 800202a:	4b22      	ldr	r3, [pc, #136]	@ (80020b4 <MX_TIM3_Init+0xac>)
 800202c:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8002030:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002032:	4b20      	ldr	r3, [pc, #128]	@ (80020b4 <MX_TIM3_Init+0xac>)
 8002034:	2210      	movs	r2, #16
 8002036:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8002038:	4b1e      	ldr	r3, [pc, #120]	@ (80020b4 <MX_TIM3_Init+0xac>)
 800203a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800203e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002040:	4b1c      	ldr	r3, [pc, #112]	@ (80020b4 <MX_TIM3_Init+0xac>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002046:	4b1b      	ldr	r3, [pc, #108]	@ (80020b4 <MX_TIM3_Init+0xac>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800204c:	4819      	ldr	r0, [pc, #100]	@ (80020b4 <MX_TIM3_Init+0xac>)
 800204e:	f003 fc81 	bl	8005954 <HAL_TIM_Base_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002058:	f000 fbc8 	bl	80027ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800205c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002062:	f107 0308 	add.w	r3, r7, #8
 8002066:	4619      	mov	r1, r3
 8002068:	4812      	ldr	r0, [pc, #72]	@ (80020b4 <MX_TIM3_Init+0xac>)
 800206a:	f003 ffef 	bl	800604c <HAL_TIM_ConfigClockSource>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002074:	f000 fbba 	bl	80027ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002078:	2300      	movs	r3, #0
 800207a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002080:	463b      	mov	r3, r7
 8002082:	4619      	mov	r1, r3
 8002084:	480b      	ldr	r0, [pc, #44]	@ (80020b4 <MX_TIM3_Init+0xac>)
 8002086:	f004 fa2b 	bl	80064e0 <HAL_TIMEx_MasterConfigSynchronization>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002090:	f000 fbac 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK) {
 8002094:	4807      	ldr	r0, [pc, #28]	@ (80020b4 <MX_TIM3_Init+0xac>)
 8002096:	f003 fd35 	bl	8005b04 <HAL_TIM_Base_Start_IT>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM3_Init+0x9c>
		Error_Handler();
 80020a0:	f000 fba4 	bl	80027ec <Error_Handler>
	}
	HAL_TIM_Base_Start(&htim3);
 80020a4:	4803      	ldr	r0, [pc, #12]	@ (80020b4 <MX_TIM3_Init+0xac>)
 80020a6:	f003 fca5 	bl	80059f4 <HAL_TIM_Base_Start>
  /* USER CODE END TIM3_Init 2 */

}
 80020aa:	bf00      	nop
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200003b4 	.word	0x200003b4
 80020b8:	40000400 	.word	0x40000400

080020bc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	@ 0x30
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	2224      	movs	r2, #36	@ 0x24
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f007 f804 	bl	80090d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80020d8:	4b20      	ldr	r3, [pc, #128]	@ (800215c <MX_TIM5_Init+0xa0>)
 80020da:	4a21      	ldr	r2, [pc, #132]	@ (8002160 <MX_TIM5_Init+0xa4>)
 80020dc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80020de:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <MX_TIM5_Init+0xa0>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e4:	4b1d      	ldr	r3, [pc, #116]	@ (800215c <MX_TIM5_Init+0xa0>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <MX_TIM5_Init+0xa0>)
 80020ec:	f04f 32ff 	mov.w	r2, #4294967295
 80020f0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <MX_TIM5_Init+0xa0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020f8:	4b18      	ldr	r3, [pc, #96]	@ (800215c <MX_TIM5_Init+0xa0>)
 80020fa:	2280      	movs	r2, #128	@ 0x80
 80020fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020fe:	2303      	movs	r3, #3
 8002100:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002106:	2301      	movs	r3, #1
 8002108:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800210e:	230a      	movs	r3, #10
 8002110:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002116:	2301      	movs	r3, #1
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800211a:	2300      	movs	r3, #0
 800211c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800211e:	230a      	movs	r3, #10
 8002120:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	4619      	mov	r1, r3
 8002128:	480c      	ldr	r0, [pc, #48]	@ (800215c <MX_TIM5_Init+0xa0>)
 800212a:	f003 fd53 	bl	8005bd4 <HAL_TIM_Encoder_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002134:	f000 fb5a 	bl	80027ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	4619      	mov	r1, r3
 8002144:	4805      	ldr	r0, [pc, #20]	@ (800215c <MX_TIM5_Init+0xa0>)
 8002146:	f004 f9cb 	bl	80064e0 <HAL_TIMEx_MasterConfigSynchronization>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002150:	f000 fb4c 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002154:	bf00      	nop
 8002156:	3730      	adds	r7, #48	@ 0x30
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000400 	.word	0x20000400
 8002160:	40000c00 	.word	0x40000c00

08002164 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002168:	4b15      	ldr	r3, [pc, #84]	@ (80021c0 <MX_USART1_UART_Init+0x5c>)
 800216a:	4a16      	ldr	r2, [pc, #88]	@ (80021c4 <MX_USART1_UART_Init+0x60>)
 800216c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800216e:	4b14      	ldr	r3, [pc, #80]	@ (80021c0 <MX_USART1_UART_Init+0x5c>)
 8002170:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8002174:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002176:	4b12      	ldr	r3, [pc, #72]	@ (80021c0 <MX_USART1_UART_Init+0x5c>)
 8002178:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800217c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800217e:	4b10      	ldr	r3, [pc, #64]	@ (80021c0 <MX_USART1_UART_Init+0x5c>)
 8002180:	2200      	movs	r2, #0
 8002182:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8002184:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <MX_USART1_UART_Init+0x5c>)
 8002186:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800218a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800218c:	4b0c      	ldr	r3, [pc, #48]	@ (80021c0 <MX_USART1_UART_Init+0x5c>)
 800218e:	220c      	movs	r2, #12
 8002190:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002192:	4b0b      	ldr	r3, [pc, #44]	@ (80021c0 <MX_USART1_UART_Init+0x5c>)
 8002194:	2200      	movs	r2, #0
 8002196:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002198:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <MX_USART1_UART_Init+0x5c>)
 800219a:	2200      	movs	r2, #0
 800219c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800219e:	4b08      	ldr	r3, [pc, #32]	@ (80021c0 <MX_USART1_UART_Init+0x5c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021a4:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <MX_USART1_UART_Init+0x5c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021aa:	4805      	ldr	r0, [pc, #20]	@ (80021c0 <MX_USART1_UART_Init+0x5c>)
 80021ac:	f004 fa20 	bl	80065f0 <HAL_UART_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80021b6:	f000 fb19 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	2000044c 	.word	0x2000044c
 80021c4:	40013800 	.word	0x40013800

080021c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021cc:	4b14      	ldr	r3, [pc, #80]	@ (8002220 <MX_USART3_UART_Init+0x58>)
 80021ce:	4a15      	ldr	r2, [pc, #84]	@ (8002224 <MX_USART3_UART_Init+0x5c>)
 80021d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021d2:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <MX_USART3_UART_Init+0x58>)
 80021d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021da:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <MX_USART3_UART_Init+0x58>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002220 <MX_USART3_UART_Init+0x58>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <MX_USART3_UART_Init+0x58>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <MX_USART3_UART_Init+0x58>)
 80021ee:	220c      	movs	r2, #12
 80021f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <MX_USART3_UART_Init+0x58>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f8:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <MX_USART3_UART_Init+0x58>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021fe:	4b08      	ldr	r3, [pc, #32]	@ (8002220 <MX_USART3_UART_Init+0x58>)
 8002200:	2200      	movs	r2, #0
 8002202:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002204:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <MX_USART3_UART_Init+0x58>)
 8002206:	2200      	movs	r2, #0
 8002208:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800220a:	4805      	ldr	r0, [pc, #20]	@ (8002220 <MX_USART3_UART_Init+0x58>)
 800220c:	f004 f9f0 	bl	80065f0 <HAL_UART_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002216:	f000 fae9 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200004d4 	.word	0x200004d4
 8002224:	40004800 	.word	0x40004800

08002228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	@ 0x28
 800222c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	60da      	str	r2, [r3, #12]
 800223c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800223e:	4b50      	ldr	r3, [pc, #320]	@ (8002380 <MX_GPIO_Init+0x158>)
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	4a4f      	ldr	r2, [pc, #316]	@ (8002380 <MX_GPIO_Init+0x158>)
 8002244:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002248:	6153      	str	r3, [r2, #20]
 800224a:	4b4d      	ldr	r3, [pc, #308]	@ (8002380 <MX_GPIO_Init+0x158>)
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	4b4a      	ldr	r3, [pc, #296]	@ (8002380 <MX_GPIO_Init+0x158>)
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	4a49      	ldr	r2, [pc, #292]	@ (8002380 <MX_GPIO_Init+0x158>)
 800225c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002260:	6153      	str	r3, [r2, #20]
 8002262:	4b47      	ldr	r3, [pc, #284]	@ (8002380 <MX_GPIO_Init+0x158>)
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800226e:	4b44      	ldr	r3, [pc, #272]	@ (8002380 <MX_GPIO_Init+0x158>)
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	4a43      	ldr	r2, [pc, #268]	@ (8002380 <MX_GPIO_Init+0x158>)
 8002274:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002278:	6153      	str	r3, [r2, #20]
 800227a:	4b41      	ldr	r3, [pc, #260]	@ (8002380 <MX_GPIO_Init+0x158>)
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002286:	4b3e      	ldr	r3, [pc, #248]	@ (8002380 <MX_GPIO_Init+0x158>)
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	4a3d      	ldr	r2, [pc, #244]	@ (8002380 <MX_GPIO_Init+0x158>)
 800228c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002290:	6153      	str	r3, [r2, #20]
 8002292:	4b3b      	ldr	r3, [pc, #236]	@ (8002380 <MX_GPIO_Init+0x158>)
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 800229e:	2200      	movs	r2, #0
 80022a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022a4:	4837      	ldr	r0, [pc, #220]	@ (8002384 <MX_GPIO_Init+0x15c>)
 80022a6:	f001 f9af 	bl	8003608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, NUC_PWR_EN_Pin|DISPLAY_PWR_EN_Pin, GPIO_PIN_RESET);
 80022aa:	2200      	movs	r2, #0
 80022ac:	21c0      	movs	r1, #192	@ 0xc0
 80022ae:	4836      	ldr	r0, [pc, #216]	@ (8002388 <MX_GPIO_Init+0x160>)
 80022b0:	f001 f9aa 	bl	8003608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER_A_GPIO_Port, ENCODER_A_Pin, GPIO_PIN_SET);
 80022b4:	2201      	movs	r2, #1
 80022b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022be:	f001 f9a3 	bl	8003608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER_B_GPIO_Port, ENCODER_B_Pin, GPIO_PIN_SET);
 80022c2:	2201      	movs	r2, #1
 80022c4:	2108      	movs	r1, #8
 80022c6:	4831      	ldr	r0, [pc, #196]	@ (800238c <MX_GPIO_Init+0x164>)
 80022c8:	f001 f99e 	bl	8003608 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIP_5_Pin DIP_4_Pin DIP_3_Pin DIP_2_Pin
                           DIP_1_Pin DIP_0_Pin */
  GPIO_InitStruct.Pin = DIP_5_Pin|DIP_4_Pin|DIP_3_Pin|DIP_2_Pin
 80022cc:	f44f 73be 	mov.w	r3, #380	@ 0x17c
 80022d0:	617b      	str	r3, [r7, #20]
                          |DIP_1_Pin|DIP_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	4619      	mov	r1, r3
 80022e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022e4:	f000 fffe 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PRINT_GO_Pin */
  GPIO_InitStruct.Pin = PRINT_GO_Pin;
 80022e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ee:	2301      	movs	r3, #1
 80022f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PRINT_GO_GPIO_Port, &GPIO_InitStruct);
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	4619      	mov	r1, r3
 8002300:	4820      	ldr	r0, [pc, #128]	@ (8002384 <MX_GPIO_Init+0x15c>)
 8002302:	f000 ffef 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PRINT_DONE_Pin */
  GPIO_InitStruct.Pin = PRINT_DONE_Pin;
 8002306:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800230a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230c:	2300      	movs	r3, #0
 800230e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PRINT_DONE_GPIO_Port, &GPIO_InitStruct);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4619      	mov	r1, r3
 800231a:	481a      	ldr	r0, [pc, #104]	@ (8002384 <MX_GPIO_Init+0x15c>)
 800231c:	f000 ffe2 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NUC_PWR_EN_Pin DISPLAY_PWR_EN_Pin */
  GPIO_InitStruct.Pin = NUC_PWR_EN_Pin|DISPLAY_PWR_EN_Pin;
 8002320:	23c0      	movs	r3, #192	@ 0xc0
 8002322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002324:	2301      	movs	r3, #1
 8002326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	4619      	mov	r1, r3
 8002336:	4814      	ldr	r0, [pc, #80]	@ (8002388 <MX_GPIO_Init+0x160>)
 8002338:	f000 ffd4 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_A_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin;
 800233c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002342:	2301      	movs	r3, #1
 8002344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800234a:	2303      	movs	r3, #3
 800234c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	4619      	mov	r1, r3
 8002354:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002358:	f000 ffc4 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_B_Pin;
 800235c:	2308      	movs	r3, #8
 800235e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002360:	2301      	movs	r3, #1
 8002362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002368:	2303      	movs	r3, #3
 800236a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4619      	mov	r1, r3
 8002372:	4806      	ldr	r0, [pc, #24]	@ (800238c <MX_GPIO_Init+0x164>)
 8002374:	f000 ffb6 	bl	80032e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002378:	bf00      	nop
 800237a:	3728      	adds	r7, #40	@ 0x28
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40021000 	.word	0x40021000
 8002384:	48001000 	.word	0x48001000
 8002388:	48001400 	.word	0x48001400
 800238c:	48000400 	.word	0x48000400

08002390 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//--- HAL_TIM_PeriodElapsedCallback -------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	if (htim==&htim3) 		enc_in_irq(htim);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a09      	ldr	r2, [pc, #36]	@ (80023c0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d103      	bne.n	80023a8 <HAL_TIM_PeriodElapsedCallback+0x18>
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff fa6d 	bl	8001880 <enc_in_irq>
	else if (htim==&htim2) 	enc_out_irq(htim);
}
 80023a6:	e006      	b.n	80023b6 <HAL_TIM_PeriodElapsedCallback+0x26>
	else if (htim==&htim2) 	enc_out_irq(htim);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a06      	ldr	r2, [pc, #24]	@ (80023c4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d102      	bne.n	80023b6 <HAL_TIM_PeriodElapsedCallback+0x26>
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff fbf5 	bl	8001ba0 <enc_out_irq>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200003b4 	.word	0x200003b4
 80023c4:	20000368 	.word	0x20000368

080023c8 <enc_get_pos>:

//--- enc_get_pos -------------------------------------
int32_t	enc_get_pos(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5);
 80023cc:	4b03      	ldr	r3, [pc, #12]	@ (80023dc <enc_get_pos+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	20000400 	.word	0x20000400

080023e0 <HAL_UART_RxCpltCallback>:

// UART RX Interrupt function override
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a11      	ldr	r2, [pc, #68]	@ (8002434 <HAL_UART_RxCpltCallback+0x54>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10b      	bne.n	800240a <HAL_UART_RxCpltCallback+0x2a>
	{
		box_handle_ferag_char(RxDataFERAG);
 80023f2:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <HAL_UART_RxCpltCallback+0x58>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe ff15 	bl	8001228 <box_handle_ferag_char>
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&RxDataFERAG, 1);
 80023fe:	2201      	movs	r2, #1
 8002400:	490d      	ldr	r1, [pc, #52]	@ (8002438 <HAL_UART_RxCpltCallback+0x58>)
 8002402:	480e      	ldr	r0, [pc, #56]	@ (800243c <HAL_UART_RxCpltCallback+0x5c>)
 8002404:	f004 fa2a 	bl	800685c <HAL_UART_Receive_IT>
	else if (huart->Instance == USART3)
	{
		term_handle_char(RxDataNUC);
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&RxDataNUC, 1);
	}
}
 8002408:	e00f      	b.n	800242a <HAL_UART_RxCpltCallback+0x4a>
	else if (huart->Instance == USART3)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a0c      	ldr	r2, [pc, #48]	@ (8002440 <HAL_UART_RxCpltCallback+0x60>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d10a      	bne.n	800242a <HAL_UART_RxCpltCallback+0x4a>
		term_handle_char(RxDataNUC);
 8002414:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <HAL_UART_RxCpltCallback+0x64>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fc96 	bl	8002d4c <term_handle_char>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&RxDataNUC, 1);
 8002420:	2201      	movs	r2, #1
 8002422:	4908      	ldr	r1, [pc, #32]	@ (8002444 <HAL_UART_RxCpltCallback+0x64>)
 8002424:	4808      	ldr	r0, [pc, #32]	@ (8002448 <HAL_UART_RxCpltCallback+0x68>)
 8002426:	f004 fa19 	bl	800685c <HAL_UART_Receive_IT>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40013800 	.word	0x40013800
 8002438:	2000055d 	.word	0x2000055d
 800243c:	2000044c 	.word	0x2000044c
 8002440:	40004800 	.word	0x40004800
 8002444:	2000055c 	.word	0x2000055c
 8002448:	200004d4 	.word	0x200004d4

0800244c <ferag_send_char>:

//--- ferag_send_char -----------------------
void ferag_send_char(char data)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 8002456:	1df9      	adds	r1, r7, #7
 8002458:	f04f 33ff 	mov.w	r3, #4294967295
 800245c:	2201      	movs	r2, #1
 800245e:	4803      	ldr	r0, [pc, #12]	@ (800246c <ferag_send_char+0x20>)
 8002460:	f004 f914 	bl	800668c <HAL_UART_Transmit>
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	2000044c 	.word	0x2000044c

08002470 <_tick_10ms>:

//--- _tick_10ms ---------------------
static void _tick_10ms(int ticks)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	box_tick_10ms(ticks);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7fe fdd5 	bl	8001028 <box_tick_10ms>
	enc_tick_10ms(ticks);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff fa5c 	bl	800193c <enc_tick_10ms>
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <adc_get_value>:

//--- adc_get_value --------------------------
float adc_get_value(int no, float factor)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	ed87 0a00 	vstr	s0, [r7]
	uint16_t val;
	AD5593R_ReadADC(&hi2c1, 0x10 << 1, no, &val);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	f107 030e 	add.w	r3, r7, #14
 80024a0:	2120      	movs	r1, #32
 80024a2:	480b      	ldr	r0, [pc, #44]	@ (80024d0 <adc_get_value+0x44>)
 80024a4:	f7fe fc71 	bl	8000d8a <AD5593R_ReadADC>
	return ((float)val * factor) / 4095.0;
 80024a8:	89fb      	ldrh	r3, [r7, #14]
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024b2:	edd7 7a00 	vldr	s15, [r7]
 80024b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ba:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80024d4 <adc_get_value+0x48>
 80024be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80024c2:	eef0 7a66 	vmov.f32	s15, s13
}
 80024c6:	eeb0 0a67 	vmov.f32	s0, s15
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000314 	.word	0x20000314
 80024d4:	457ff000 	.word	0x457ff000

080024d8 <adc_get_temp>:

//--- adc_get_temp --------------------------------------
float adc_get_temp(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
    const float ADC_25 = 819.0; // ADC value at 25 degrees Celsius
 80024de:	4b10      	ldr	r3, [pc, #64]	@ (8002520 <adc_get_temp+0x48>)
 80024e0:	60fb      	str	r3, [r7, #12]
    const float SLOPE = 2.654; // ADC counts per degree Celsius
 80024e2:	4b10      	ldr	r3, [pc, #64]	@ (8002524 <adc_get_temp+0x4c>)
 80024e4:	60bb      	str	r3, [r7, #8]
	uint16_t val;
	AD5593R_ReadADC(&hi2c1, 0x10 << 1, 8, &val);
 80024e6:	1dbb      	adds	r3, r7, #6
 80024e8:	2208      	movs	r2, #8
 80024ea:	2120      	movs	r1, #32
 80024ec:	480e      	ldr	r0, [pc, #56]	@ (8002528 <adc_get_temp+0x50>)
 80024ee:	f7fe fc4c 	bl	8000d8a <AD5593R_ReadADC>
    return 25.0 + ((float)val - ADC_25) / SLOPE;
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002500:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002504:	ed97 7a02 	vldr	s14, [r7, #8]
 8002508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800250c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002510:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8002514:	eeb0 0a67 	vmov.f32	s0, s15
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	444cc000 	.word	0x444cc000
 8002524:	4029db23 	.word	0x4029db23
 8002528:	20000314 	.word	0x20000314

0800252c <adc_get_revision>:

//--- adc_get_revision ------------------------------------
uint8_t adc_get_revision(float val)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	ed87 0a01 	vstr	s0, [r7, #4]
	const float baseVoltage = 0.075f; // Base voltage (0.1V - 0.025V)
 8002536:	4b1e      	ldr	r3, [pc, #120]	@ (80025b0 <adc_get_revision+0x84>)
 8002538:	617b      	str	r3, [r7, #20]
    const float increment = 0.1f; // Voltage increment per revision
 800253a:	4b1e      	ldr	r3, [pc, #120]	@ (80025b4 <adc_get_revision+0x88>)
 800253c:	613b      	str	r3, [r7, #16]
    const float maxValidVoltage = 26.0f; // Example: max expected voltage, adjust based on your last revision
 800253e:	4b1e      	ldr	r3, [pc, #120]	@ (80025b8 <adc_get_revision+0x8c>)
 8002540:	60fb      	str	r3, [r7, #12]

    if (val < baseVoltage || val > maxValidVoltage) return 0; // Invalid voltage
 8002542:	ed97 7a01 	vldr	s14, [r7, #4]
 8002546:	edd7 7a05 	vldr	s15, [r7, #20]
 800254a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800254e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002552:	d408      	bmi.n	8002566 <adc_get_revision+0x3a>
 8002554:	ed97 7a01 	vldr	s14, [r7, #4]
 8002558:	edd7 7a03 	vldr	s15, [r7, #12]
 800255c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002564:	dd01      	ble.n	800256a <adc_get_revision+0x3e>
 8002566:	2300      	movs	r3, #0
 8002568:	e01d      	b.n	80025a6 <adc_get_revision+0x7a>

    return (uint8_t)floor((val - baseVoltage) / increment) + 1;
 800256a:	ed97 7a01 	vldr	s14, [r7, #4]
 800256e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002572:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002576:	edd7 7a04 	vldr	s15, [r7, #16]
 800257a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800257e:	ee16 0a90 	vmov	r0, s13
 8002582:	f7fd ffe1 	bl	8000548 <__aeabi_f2d>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	ec43 2b10 	vmov	d0, r2, r3
 800258e:	f00a fbbf 	bl	800cd10 <floor>
 8002592:	ec53 2b10 	vmov	r2, r3, d0
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	f7fe fb05 	bl	8000ba8 <__aeabi_d2uiz>
 800259e:	4603      	mov	r3, r0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	b2db      	uxtb	r3, r3
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	3d99999a 	.word	0x3d99999a
 80025b4:	3dcccccd 	.word	0x3dcccccd
 80025b8:	41d00000 	.word	0x41d00000

080025bc <gpio_get_dipswitches>:

//--- gpio_get_dipswitches -------------------------------
uint8_t gpio_get_dipswitches(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
    uint8_t dipswitches = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	71fb      	strb	r3, [r7, #7]

    if (HAL_GPIO_ReadPin(DIP_0_GPIO_Port, DIP_0_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 0;
 80025c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025ce:	f001 f803 	bl	80035d8 <HAL_GPIO_ReadPin>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d103      	bne.n	80025e0 <gpio_get_dipswitches+0x24>
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_1_GPIO_Port, DIP_1_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 1;
 80025e0:	2140      	movs	r1, #64	@ 0x40
 80025e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025e6:	f000 fff7 	bl	80035d8 <HAL_GPIO_ReadPin>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d103      	bne.n	80025f8 <gpio_get_dipswitches+0x3c>
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	f043 0302 	orr.w	r3, r3, #2
 80025f6:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_2_GPIO_Port, DIP_2_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 2;
 80025f8:	2120      	movs	r1, #32
 80025fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025fe:	f000 ffeb 	bl	80035d8 <HAL_GPIO_ReadPin>
 8002602:	4603      	mov	r3, r0
 8002604:	2b01      	cmp	r3, #1
 8002606:	d103      	bne.n	8002610 <gpio_get_dipswitches+0x54>
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	f043 0304 	orr.w	r3, r3, #4
 800260e:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_3_GPIO_Port, DIP_3_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 3;
 8002610:	2110      	movs	r1, #16
 8002612:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002616:	f000 ffdf 	bl	80035d8 <HAL_GPIO_ReadPin>
 800261a:	4603      	mov	r3, r0
 800261c:	2b01      	cmp	r3, #1
 800261e:	d103      	bne.n	8002628 <gpio_get_dipswitches+0x6c>
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f043 0308 	orr.w	r3, r3, #8
 8002626:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_4_GPIO_Port, DIP_4_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 4;
 8002628:	2108      	movs	r1, #8
 800262a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800262e:	f000 ffd3 	bl	80035d8 <HAL_GPIO_ReadPin>
 8002632:	4603      	mov	r3, r0
 8002634:	2b01      	cmp	r3, #1
 8002636:	d103      	bne.n	8002640 <gpio_get_dipswitches+0x84>
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	f043 0310 	orr.w	r3, r3, #16
 800263e:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_5_GPIO_Port, DIP_5_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 5;
 8002640:	2104      	movs	r1, #4
 8002642:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002646:	f000 ffc7 	bl	80035d8 <HAL_GPIO_ReadPin>
 800264a:	4603      	mov	r3, r0
 800264c:	2b01      	cmp	r3, #1
 800264e:	d103      	bne.n	8002658 <gpio_get_dipswitches+0x9c>
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f043 0320 	orr.w	r3, r3, #32
 8002656:	71fb      	strb	r3, [r7, #7]

    return dipswitches;
 8002658:	79fb      	ldrb	r3, [r7, #7]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <power_nuc>:

//--- power_nuc -----------------------------
void    power_nuc(int on)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	if (on) HAL_GPIO_WritePin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin, GPIO_PIN_SET);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <power_nuc+0x1a>
 8002672:	2201      	movs	r2, #1
 8002674:	2140      	movs	r1, #64	@ 0x40
 8002676:	4806      	ldr	r0, [pc, #24]	@ (8002690 <power_nuc+0x2c>)
 8002678:	f000 ffc6 	bl	8003608 <HAL_GPIO_WritePin>
	else 	HAL_GPIO_WritePin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin, GPIO_PIN_RESET);
}
 800267c:	e004      	b.n	8002688 <power_nuc+0x24>
	else 	HAL_GPIO_WritePin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin, GPIO_PIN_RESET);
 800267e:	2200      	movs	r2, #0
 8002680:	2140      	movs	r1, #64	@ 0x40
 8002682:	4803      	ldr	r0, [pc, #12]	@ (8002690 <power_nuc+0x2c>)
 8002684:	f000 ffc0 	bl	8003608 <HAL_GPIO_WritePin>
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	48001400 	.word	0x48001400

08002694 <power_display>:

//--- power_display -------------------------
void    power_display(int on)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	if (on) HAL_GPIO_WritePin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin, GPIO_PIN_SET);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <power_display+0x1a>
 80026a2:	2201      	movs	r2, #1
 80026a4:	2180      	movs	r1, #128	@ 0x80
 80026a6:	4806      	ldr	r0, [pc, #24]	@ (80026c0 <power_display+0x2c>)
 80026a8:	f000 ffae 	bl	8003608 <HAL_GPIO_WritePin>
	else 	HAL_GPIO_WritePin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin, GPIO_PIN_RESET);
}
 80026ac:	e004      	b.n	80026b8 <power_display+0x24>
	else 	HAL_GPIO_WritePin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin, GPIO_PIN_RESET);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2180      	movs	r1, #128	@ 0x80
 80026b2:	4803      	ldr	r0, [pc, #12]	@ (80026c0 <power_display+0x2c>)
 80026b4:	f000 ffa8 	bl	8003608 <HAL_GPIO_WritePin>
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	48001400 	.word	0x48001400

080026c4 <_nuc_send_next>:

void _nuc_send_next()
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
	if (_NUC_InIdx!=_NUC_StartIdx && !_NUC_Busy)
 80026ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002744 <_nuc_send_next+0x80>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002748 <_nuc_send_next+0x84>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d031      	beq.n	800273a <_nuc_send_next+0x76>
 80026d6:	4b1d      	ldr	r3, [pc, #116]	@ (800274c <_nuc_send_next+0x88>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d12d      	bne.n	800273a <_nuc_send_next+0x76>
	{
		int time=HAL_GetTick();
 80026de:	f000 fc6d 	bl	8002fbc <HAL_GetTick>
 80026e2:	4603      	mov	r3, r0
 80026e4:	607b      	str	r3, [r7, #4]
		_NUC_Busy = TRUE;
 80026e6:	4b19      	ldr	r3, [pc, #100]	@ (800274c <_nuc_send_next+0x88>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, TxDataNuc[_NUC_StartIdx], TxDataLenNuc[_NUC_StartIdx]); // NUC
 80026ec:	4b16      	ldr	r3, [pc, #88]	@ (8002748 <_nuc_send_next+0x84>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	025b      	lsls	r3, r3, #9
 80026f2:	4a17      	ldr	r2, [pc, #92]	@ (8002750 <_nuc_send_next+0x8c>)
 80026f4:	1899      	adds	r1, r3, r2
 80026f6:	4b14      	ldr	r3, [pc, #80]	@ (8002748 <_nuc_send_next+0x84>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a16      	ldr	r2, [pc, #88]	@ (8002754 <_nuc_send_next+0x90>)
 80026fc:	5cd3      	ldrb	r3, [r2, r3]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	4815      	ldr	r0, [pc, #84]	@ (8002758 <_nuc_send_next+0x94>)
 8002704:	f004 f84c 	bl	80067a0 <HAL_UART_Transmit_IT>
		_NUC_StartIdx = (_NUC_StartIdx+1) % NUC_FIFO_CNT;
 8002708:	4b0f      	ldr	r3, [pc, #60]	@ (8002748 <_nuc_send_next+0x84>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3301      	adds	r3, #1
 800270e:	425a      	negs	r2, r3
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	f002 0203 	and.w	r2, r2, #3
 8002718:	bf58      	it	pl
 800271a:	4253      	negpl	r3, r2
 800271c:	4a0a      	ldr	r2, [pc, #40]	@ (8002748 <_nuc_send_next+0x84>)
 800271e:	6013      	str	r3, [r2, #0]
	    time=HAL_GetTick()-time;
 8002720:	f000 fc4c 	bl	8002fbc <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	607b      	str	r3, [r7, #4]
	    if (time>1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b01      	cmp	r3, #1
 8002730:	dd03      	ble.n	800273a <_nuc_send_next+0x76>
	    	printf("WARN: UART send time=%d\n", time);
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4809      	ldr	r0, [pc, #36]	@ (800275c <_nuc_send_next+0x98>)
 8002736:	f006 fb3b 	bl	8008db0 <iprintf>
	}
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000d64 	.word	0x20000d64
 8002748:	20000d68 	.word	0x20000d68
 800274c:	20000d6c 	.word	0x20000d6c
 8002750:	20000560 	.word	0x20000560
 8002754:	20000d60 	.word	0x20000d60
 8002758:	200004d4 	.word	0x200004d4
 800275c:	0800d110 	.word	0x0800d110

08002760 <HAL_UART_TxCpltCallback>:

//--- HAL_UART_TxCpltCallback ---------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	_NUC_Busy = FALSE;
 8002768:	4b04      	ldr	r3, [pc, #16]	@ (800277c <HAL_UART_TxCpltCallback+0x1c>)
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
	_nuc_send_next();
 800276e:	f7ff ffa9 	bl	80026c4 <_nuc_send_next>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000d6c 	.word	0x20000d6c

08002780 <_write>:

//--- WRITE_PROTOTYPE ----------------------------------------------------
// Retarget stdout to UART and CDC
WRITE_PROTOTYPE {
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
	int idx = (_NUC_InIdx+1) % NUC_FIFO_CNT;
 800278c:	4b14      	ldr	r3, [pc, #80]	@ (80027e0 <_write+0x60>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	425a      	negs	r2, r3
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	f002 0203 	and.w	r2, r2, #3
 800279c:	bf58      	it	pl
 800279e:	4253      	negpl	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027a2:	b672      	cpsid	i
}
 80027a4:	bf00      	nop
	__disable_irq();
	TxDataLenNuc[_NUC_InIdx] = len;
 80027a6:	4b0e      	ldr	r3, [pc, #56]	@ (80027e0 <_write+0x60>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	b2d1      	uxtb	r1, r2
 80027ae:	4a0d      	ldr	r2, [pc, #52]	@ (80027e4 <_write+0x64>)
 80027b0:	54d1      	strb	r1, [r2, r3]
	memcpy(&TxDataNuc[_NUC_InIdx], ptr, len);
 80027b2:	4b0b      	ldr	r3, [pc, #44]	@ (80027e0 <_write+0x60>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	025b      	lsls	r3, r3, #9
 80027b8:	4a0b      	ldr	r2, [pc, #44]	@ (80027e8 <_write+0x68>)
 80027ba:	4413      	add	r3, r2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f006 fd1a 	bl	80091fa <memcpy>
	_NUC_InIdx = idx;
 80027c6:	4a06      	ldr	r2, [pc, #24]	@ (80027e0 <_write+0x60>)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027cc:	b662      	cpsie	i
}
 80027ce:	bf00      	nop
	__enable_irq();

	_nuc_send_next();
 80027d0:	f7ff ff78 	bl	80026c4 <_nuc_send_next>
  //  HAL_UART_Transmit_IT(&huart1, ptr, len); // debugging
    time=HAL_GetTick()-time;
    if (time>0)
    	printf("WARN: UART send time=%d\n", time);
    	*/
    return len; // Return the number of characters written
 80027d4:	687b      	ldr	r3, [r7, #4]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000d64 	.word	0x20000d64
 80027e4:	20000d60 	.word	0x20000d60
 80027e8:	20000560 	.word	0x20000560

080027ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80027f0:	b672      	cpsid	i
}
 80027f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80027f4:	e7fe      	b.n	80027f4 <Error_Handler+0x8>
	...

080027f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fe:	4b12      	ldr	r3, [pc, #72]	@ (8002848 <HAL_MspInit+0x50>)
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	4a11      	ldr	r2, [pc, #68]	@ (8002848 <HAL_MspInit+0x50>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6193      	str	r3, [r2, #24]
 800280a:	4b0f      	ldr	r3, [pc, #60]	@ (8002848 <HAL_MspInit+0x50>)
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <HAL_MspInit+0x50>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	4a0b      	ldr	r2, [pc, #44]	@ (8002848 <HAL_MspInit+0x50>)
 800281c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002820:	61d3      	str	r3, [r2, #28]
 8002822:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <HAL_MspInit+0x50>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2100      	movs	r1, #0
 8002832:	2005      	movs	r0, #5
 8002834:	f000 fca9 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002838:	2005      	movs	r0, #5
 800283a:	f000 fcc2 	bl	80031c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	@ 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a17      	ldr	r2, [pc, #92]	@ (80028c8 <HAL_I2C_MspInit+0x7c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d127      	bne.n	80028be <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286e:	4b17      	ldr	r3, [pc, #92]	@ (80028cc <HAL_I2C_MspInit+0x80>)
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	4a16      	ldr	r2, [pc, #88]	@ (80028cc <HAL_I2C_MspInit+0x80>)
 8002874:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002878:	6153      	str	r3, [r2, #20]
 800287a:	4b14      	ldr	r3, [pc, #80]	@ (80028cc <HAL_I2C_MspInit+0x80>)
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002886:	23c0      	movs	r3, #192	@ 0xc0
 8002888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800288a:	2312      	movs	r3, #18
 800288c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002892:	2303      	movs	r3, #3
 8002894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002896:	2304      	movs	r3, #4
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289a:	f107 0314 	add.w	r3, r7, #20
 800289e:	4619      	mov	r1, r3
 80028a0:	480b      	ldr	r0, [pc, #44]	@ (80028d0 <HAL_I2C_MspInit+0x84>)
 80028a2:	f000 fd1f 	bl	80032e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028a6:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <HAL_I2C_MspInit+0x80>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4a08      	ldr	r2, [pc, #32]	@ (80028cc <HAL_I2C_MspInit+0x80>)
 80028ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028b0:	61d3      	str	r3, [r2, #28]
 80028b2:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <HAL_I2C_MspInit+0x80>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028be:	bf00      	nop
 80028c0:	3728      	adds	r7, #40	@ 0x28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40005400 	.word	0x40005400
 80028cc:	40021000 	.word	0x40021000
 80028d0:	48000400 	.word	0x48000400

080028d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e4:	d114      	bne.n	8002910 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028e6:	4b19      	ldr	r3, [pc, #100]	@ (800294c <HAL_TIM_Base_MspInit+0x78>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	4a18      	ldr	r2, [pc, #96]	@ (800294c <HAL_TIM_Base_MspInit+0x78>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	61d3      	str	r3, [r2, #28]
 80028f2:	4b16      	ldr	r3, [pc, #88]	@ (800294c <HAL_TIM_Base_MspInit+0x78>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	2101      	movs	r1, #1
 8002902:	201c      	movs	r0, #28
 8002904:	f000 fc41 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002908:	201c      	movs	r0, #28
 800290a:	f000 fc5a 	bl	80031c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800290e:	e018      	b.n	8002942 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a0e      	ldr	r2, [pc, #56]	@ (8002950 <HAL_TIM_Base_MspInit+0x7c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d113      	bne.n	8002942 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800291a:	4b0c      	ldr	r3, [pc, #48]	@ (800294c <HAL_TIM_Base_MspInit+0x78>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	4a0b      	ldr	r2, [pc, #44]	@ (800294c <HAL_TIM_Base_MspInit+0x78>)
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	61d3      	str	r3, [r2, #28]
 8002926:	4b09      	ldr	r3, [pc, #36]	@ (800294c <HAL_TIM_Base_MspInit+0x78>)
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	201d      	movs	r0, #29
 8002938:	f000 fc27 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800293c:	201d      	movs	r0, #29
 800293e:	f000 fc40 	bl	80031c2 <HAL_NVIC_EnableIRQ>
}
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
 8002950:	40000400 	.word	0x40000400

08002954 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	@ 0x28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a1b      	ldr	r2, [pc, #108]	@ (80029e0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d130      	bne.n	80029d8 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002976:	4b1b      	ldr	r3, [pc, #108]	@ (80029e4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	4a1a      	ldr	r2, [pc, #104]	@ (80029e4 <HAL_TIM_Encoder_MspInit+0x90>)
 800297c:	f043 0308 	orr.w	r3, r3, #8
 8002980:	61d3      	str	r3, [r2, #28]
 8002982:	4b18      	ldr	r3, [pc, #96]	@ (80029e4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298e:	4b15      	ldr	r3, [pc, #84]	@ (80029e4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	4a14      	ldr	r2, [pc, #80]	@ (80029e4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002998:	6153      	str	r3, [r2, #20]
 800299a:	4b12      	ldr	r3, [pc, #72]	@ (80029e4 <HAL_TIM_Encoder_MspInit+0x90>)
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029a6:	2303      	movs	r3, #3
 80029a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029aa:	2302      	movs	r3, #2
 80029ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	2300      	movs	r3, #0
 80029b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029b6:	2302      	movs	r3, #2
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ba:	f107 0314 	add.w	r3, r7, #20
 80029be:	4619      	mov	r1, r3
 80029c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029c4:	f000 fc8e 	bl	80032e4 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80029c8:	2200      	movs	r2, #0
 80029ca:	2100      	movs	r1, #0
 80029cc:	2032      	movs	r0, #50	@ 0x32
 80029ce:	f000 fbdc 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80029d2:	2032      	movs	r0, #50	@ 0x32
 80029d4:	f000 fbf5 	bl	80031c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80029d8:	bf00      	nop
 80029da:	3728      	adds	r7, #40	@ 0x28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40000c00 	.word	0x40000c00
 80029e4:	40021000 	.word	0x40021000

080029e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08c      	sub	sp, #48	@ 0x30
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 031c 	add.w	r3, r7, #28
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a37      	ldr	r2, [pc, #220]	@ (8002ae4 <HAL_UART_MspInit+0xfc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d132      	bne.n	8002a70 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a0a:	4b37      	ldr	r3, [pc, #220]	@ (8002ae8 <HAL_UART_MspInit+0x100>)
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	4a36      	ldr	r2, [pc, #216]	@ (8002ae8 <HAL_UART_MspInit+0x100>)
 8002a10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a14:	6193      	str	r3, [r2, #24]
 8002a16:	4b34      	ldr	r3, [pc, #208]	@ (8002ae8 <HAL_UART_MspInit+0x100>)
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	4b31      	ldr	r3, [pc, #196]	@ (8002ae8 <HAL_UART_MspInit+0x100>)
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	4a30      	ldr	r2, [pc, #192]	@ (8002ae8 <HAL_UART_MspInit+0x100>)
 8002a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a2c:	6153      	str	r3, [r2, #20]
 8002a2e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ae8 <HAL_UART_MspInit+0x100>)
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS422_COM_TX_Pin|RS422_COM_RX_Pin;
 8002a3a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a40:	2302      	movs	r3, #2
 8002a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a4c:	2307      	movs	r3, #7
 8002a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a50:	f107 031c 	add.w	r3, r7, #28
 8002a54:	4619      	mov	r1, r3
 8002a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a5a:	f000 fc43 	bl	80032e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2100      	movs	r1, #0
 8002a62:	2025      	movs	r0, #37	@ 0x25
 8002a64:	f000 fb91 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a68:	2025      	movs	r0, #37	@ 0x25
 8002a6a:	f000 fbaa 	bl	80031c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a6e:	e035      	b.n	8002adc <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1d      	ldr	r2, [pc, #116]	@ (8002aec <HAL_UART_MspInit+0x104>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d130      	bne.n	8002adc <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae8 <HAL_UART_MspInit+0x100>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ae8 <HAL_UART_MspInit+0x100>)
 8002a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a84:	61d3      	str	r3, [r2, #28]
 8002a86:	4b18      	ldr	r3, [pc, #96]	@ (8002ae8 <HAL_UART_MspInit+0x100>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a92:	4b15      	ldr	r3, [pc, #84]	@ (8002ae8 <HAL_UART_MspInit+0x100>)
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	4a14      	ldr	r2, [pc, #80]	@ (8002ae8 <HAL_UART_MspInit+0x100>)
 8002a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a9c:	6153      	str	r3, [r2, #20]
 8002a9e:	4b12      	ldr	r3, [pc, #72]	@ (8002ae8 <HAL_UART_MspInit+0x100>)
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_NUC_TX_Pin|UART_NUC_RX_Pin;
 8002aaa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002abc:	2307      	movs	r3, #7
 8002abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac0:	f107 031c 	add.w	r3, r7, #28
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	480a      	ldr	r0, [pc, #40]	@ (8002af0 <HAL_UART_MspInit+0x108>)
 8002ac8:	f000 fc0c 	bl	80032e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002acc:	2200      	movs	r2, #0
 8002ace:	2100      	movs	r1, #0
 8002ad0:	2027      	movs	r0, #39	@ 0x27
 8002ad2:	f000 fb5a 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ad6:	2027      	movs	r0, #39	@ 0x27
 8002ad8:	f000 fb73 	bl	80031c2 <HAL_NVIC_EnableIRQ>
}
 8002adc:	bf00      	nop
 8002ade:	3730      	adds	r7, #48	@ 0x30
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40013800 	.word	0x40013800
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40004800 	.word	0x40004800
 8002af0:	48000400 	.word	0x48000400

08002af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002af8:	e7fe      	b.n	8002af8 <NMI_Handler+0x4>

08002afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002afe:	e7fe      	b.n	8002afe <HardFault_Handler+0x4>

08002b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b04:	e7fe      	b.n	8002b04 <MemManage_Handler+0x4>

08002b06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b0a:	e7fe      	b.n	8002b0a <BusFault_Handler+0x4>

08002b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <UsageFault_Handler+0x4>

08002b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b40:	f000 fa28 	bl	8002f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b44:	bf00      	nop
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b5c:	4802      	ldr	r0, [pc, #8]	@ (8002b68 <TIM2_IRQHandler+0x10>)
 8002b5e:	f003 f96d 	bl	8005e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000368 	.word	0x20000368

08002b6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b70:	4802      	ldr	r0, [pc, #8]	@ (8002b7c <TIM3_IRQHandler+0x10>)
 8002b72:	f003 f963 	bl	8005e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	200003b4 	.word	0x200003b4

08002b80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b84:	4802      	ldr	r0, [pc, #8]	@ (8002b90 <USART1_IRQHandler+0x10>)
 8002b86:	f003 fead 	bl	80068e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	2000044c 	.word	0x2000044c

08002b94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b98:	4802      	ldr	r0, [pc, #8]	@ (8002ba4 <USART3_IRQHandler+0x10>)
 8002b9a:	f003 fea3 	bl	80068e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200004d4 	.word	0x200004d4

08002ba8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002bac:	4802      	ldr	r0, [pc, #8]	@ (8002bb8 <TIM5_IRQHandler+0x10>)
 8002bae:	f003 f945 	bl	8005e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000400 	.word	0x20000400

08002bbc <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
	return 1;
 8002bc0:	2301      	movs	r3, #1
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <_kill>:

int _kill(int pid, int sig) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8002bd6:	f006 fae3 	bl	80091a0 <__errno>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2216      	movs	r2, #22
 8002bde:	601a      	str	r2, [r3, #0]
	return -1;
 8002be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <_exit>:

void _exit(int status) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff ffe7 	bl	8002bcc <_kill>
	while (1) {
 8002bfe:	e7fe      	b.n	8002bfe <_exit+0x12>

08002c00 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	e00a      	b.n	8002c28 <_read+0x28>
		*ptr++ = __io_getchar();
 8002c12:	f3af 8000 	nop.w
 8002c16:	4601      	mov	r1, r0
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	60ba      	str	r2, [r7, #8]
 8002c1e:	b2ca      	uxtb	r2, r1
 8002c20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	3301      	adds	r3, #1
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	dbf0      	blt.n	8002c12 <_read+0x12>
	}

	return len;
 8002c30:	687b      	ldr	r3, [r7, #4]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002c42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c62:	605a      	str	r2, [r3, #4]
	return 0;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <_isatty>:

int _isatty(int file) {
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002c7a:	2301      	movs	r3, #1
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002cac:	4a14      	ldr	r2, [pc, #80]	@ (8002d00 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002cae:	4b15      	ldr	r3, [pc, #84]	@ (8002d04 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002cb8:	4b13      	ldr	r3, [pc, #76]	@ (8002d08 <_sbrk+0x64>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d102      	bne.n	8002cc6 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002cc0:	4b11      	ldr	r3, [pc, #68]	@ (8002d08 <_sbrk+0x64>)
 8002cc2:	4a12      	ldr	r2, [pc, #72]	@ (8002d0c <_sbrk+0x68>)
 8002cc4:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002cc6:	4b10      	ldr	r3, [pc, #64]	@ (8002d08 <_sbrk+0x64>)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4413      	add	r3, r2
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d207      	bcs.n	8002ce4 <_sbrk+0x40>
		errno = ENOMEM;
 8002cd4:	f006 fa64 	bl	80091a0 <__errno>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	220c      	movs	r2, #12
 8002cdc:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002cde:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce2:	e009      	b.n	8002cf8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002ce4:	4b08      	ldr	r3, [pc, #32]	@ (8002d08 <_sbrk+0x64>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002cea:	4b07      	ldr	r3, [pc, #28]	@ (8002d08 <_sbrk+0x64>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	4a05      	ldr	r2, [pc, #20]	@ (8002d08 <_sbrk+0x64>)
 8002cf4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20008000 	.word	0x20008000
 8002d04:	00000400 	.word	0x00000400
 8002d08:	20000d70 	.word	0x20000d70
 8002d0c:	20000f48 	.word	0x20000f48

08002d10 <SystemInit>:
/**
 * @brief  Setup the microcontroller system
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
	/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002d14:	4b06      	ldr	r3, [pc, #24]	@ (8002d30 <SystemInit+0x20>)
 8002d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1a:	4a05      	ldr	r2, [pc, #20]	@ (8002d30 <SystemInit+0x20>)
 8002d1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <term_init>:
static char _Input[128];
static int	_InputLen=0;

//--- terminal_init --------------------------------
void term_init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
	memset(_Input, 0, sizeof(_Input));
 8002d38:	2280      	movs	r2, #128	@ 0x80
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4802      	ldr	r0, [pc, #8]	@ (8002d48 <term_init+0x14>)
 8002d3e:	f006 f9cb 	bl	80090d8 <memset>
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000d74 	.word	0x20000d74

08002d4c <term_handle_char>:
//--- term_handle_char -------------------------
void term_handle_char(char ch)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	71fb      	strb	r3, [r7, #7]
	if (_InputLen<sizeof(_Input)) _Input[_InputLen++] = ch;
 8002d56:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <term_handle_char+0x38>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d5c:	d808      	bhi.n	8002d70 <term_handle_char+0x24>
 8002d5e:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <term_handle_char+0x38>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	4907      	ldr	r1, [pc, #28]	@ (8002d84 <term_handle_char+0x38>)
 8002d66:	600a      	str	r2, [r1, #0]
 8002d68:	4907      	ldr	r1, [pc, #28]	@ (8002d88 <term_handle_char+0x3c>)
 8002d6a:	79fa      	ldrb	r2, [r7, #7]
 8002d6c:	54ca      	strb	r2, [r1, r3]
	else _InputLen=0;
//	putchar(ch);
}
 8002d6e:	e002      	b.n	8002d76 <term_handle_char+0x2a>
	else _InputLen=0;
 8002d70:	4b04      	ldr	r3, [pc, #16]	@ (8002d84 <term_handle_char+0x38>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000df4 	.word	0x20000df4
 8002d88:	20000d74 	.word	0x20000d74

08002d8c <term_idle>:

//--- term_idle -------------------------------
void term_idle(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
    if (_InputLen>1 && (_Input[_InputLen-1]=='\r' || _Input[_InputLen-1]=='\n'))
 8002d92:	4b3e      	ldr	r3, [pc, #248]	@ (8002e8c <term_idle+0x100>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	dd73      	ble.n	8002e82 <term_idle+0xf6>
 8002d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8002e8c <term_idle+0x100>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	4a3b      	ldr	r2, [pc, #236]	@ (8002e90 <term_idle+0x104>)
 8002da2:	5cd3      	ldrb	r3, [r2, r3]
 8002da4:	2b0d      	cmp	r3, #13
 8002da6:	d006      	beq.n	8002db6 <term_idle+0x2a>
 8002da8:	4b38      	ldr	r3, [pc, #224]	@ (8002e8c <term_idle+0x100>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	4a38      	ldr	r2, [pc, #224]	@ (8002e90 <term_idle+0x104>)
 8002db0:	5cd3      	ldrb	r3, [r2, r3]
 8002db2:	2b0a      	cmp	r3, #10
 8002db4:	d165      	bne.n	8002e82 <term_idle+0xf6>
    {
    	char *args;
    //	printf("TERM: >>%s<<\n", _Input);
    	if (strstart(_Input, "status")) 		  		box_send_status();
 8002db6:	4937      	ldr	r1, [pc, #220]	@ (8002e94 <term_idle+0x108>)
 8002db8:	4835      	ldr	r0, [pc, #212]	@ (8002e90 <term_idle+0x104>)
 8002dba:	f7fe ff77 	bl	8001cac <strstart>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <term_idle+0x3e>
 8002dc4:	f7fe fd20 	bl	8001808 <box_send_status>
 8002dc8:	e053      	b.n	8002e72 <term_idle+0xe6>
    	else if ((args=strstart(_Input, "encoder"))) 	enc_command(args);
 8002dca:	4933      	ldr	r1, [pc, #204]	@ (8002e98 <term_idle+0x10c>)
 8002dcc:	4830      	ldr	r0, [pc, #192]	@ (8002e90 <term_idle+0x104>)
 8002dce:	f7fe ff6d 	bl	8001cac <strstart>
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <term_idle+0x56>
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe fe36 	bl	8001a4c <enc_command>
 8002de0:	e047      	b.n	8002e72 <term_idle+0xe6>
    	else if ((args=strstart(_Input, "start"))) 		box_start();
 8002de2:	492e      	ldr	r1, [pc, #184]	@ (8002e9c <term_idle+0x110>)
 8002de4:	482a      	ldr	r0, [pc, #168]	@ (8002e90 <term_idle+0x104>)
 8002de6:	f7fe ff61 	bl	8001cac <strstart>
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <term_idle+0x6c>
 8002df2:	f7fe f87f 	bl	8000ef4 <box_start>
 8002df6:	e03c      	b.n	8002e72 <term_idle+0xe6>
    	else if ((args=strstart(_Input, "stop"))) 		box_stop();
 8002df8:	4929      	ldr	r1, [pc, #164]	@ (8002ea0 <term_idle+0x114>)
 8002dfa:	4825      	ldr	r0, [pc, #148]	@ (8002e90 <term_idle+0x104>)
 8002dfc:	f7fe ff56 	bl	8001cac <strstart>
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <term_idle+0x82>
 8002e08:	f7fe f8de 	bl	8000fc8 <box_stop>
 8002e0c:	e031      	b.n	8002e72 <term_idle+0xe6>
    	else if ((args=strstart(_Input, "pgDelay"))) 	box_set_pgDelay(atoi(args));
 8002e0e:	4925      	ldr	r1, [pc, #148]	@ (8002ea4 <term_idle+0x118>)
 8002e10:	481f      	ldr	r0, [pc, #124]	@ (8002e90 <term_idle+0x104>)
 8002e12:	f7fe ff4b 	bl	8001cac <strstart>
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d007      	beq.n	8002e2e <term_idle+0xa2>
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f004 ff4d 	bl	8007cbe <atoi>
 8002e24:	4603      	mov	r3, r0
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe f850 	bl	8000ecc <box_set_pgDelay>
 8002e2c:	e021      	b.n	8002e72 <term_idle+0xe6>
    	else if ((args=strstart(_Input, "pg"))) 		box_printGo();
 8002e2e:	491e      	ldr	r1, [pc, #120]	@ (8002ea8 <term_idle+0x11c>)
 8002e30:	4817      	ldr	r0, [pc, #92]	@ (8002e90 <term_idle+0x104>)
 8002e32:	f7fe ff3b 	bl	8001cac <strstart>
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <term_idle+0xb8>
 8002e3e:	f7fe fc31 	bl	80016a4 <box_printGo>
 8002e42:	e016      	b.n	8002e72 <term_idle+0xe6>
    	else if ((args=strstart(_Input, "h"))) 			box_test(TRUE);
 8002e44:	4919      	ldr	r1, [pc, #100]	@ (8002eac <term_idle+0x120>)
 8002e46:	4812      	ldr	r0, [pc, #72]	@ (8002e90 <term_idle+0x104>)
 8002e48:	f7fe ff30 	bl	8001cac <strstart>
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <term_idle+0xd0>
 8002e54:	2001      	movs	r0, #1
 8002e56:	f7fe fb53 	bl	8001500 <box_test>
 8002e5a:	e00a      	b.n	8002e72 <term_idle+0xe6>
    	else if ((args=strstart(_Input, "l"))) 			box_test(FALSE);
 8002e5c:	4914      	ldr	r1, [pc, #80]	@ (8002eb0 <term_idle+0x124>)
 8002e5e:	480c      	ldr	r0, [pc, #48]	@ (8002e90 <term_idle+0x104>)
 8002e60:	f7fe ff24 	bl	8001cac <strstart>
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <term_idle+0xe6>
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f7fe fb47 	bl	8001500 <box_test>

    	memset(_Input, 0, sizeof(_Input));
 8002e72:	2280      	movs	r2, #128	@ 0x80
 8002e74:	2100      	movs	r1, #0
 8002e76:	4806      	ldr	r0, [pc, #24]	@ (8002e90 <term_idle+0x104>)
 8002e78:	f006 f92e 	bl	80090d8 <memset>
    	_InputLen=0;
 8002e7c:	4b03      	ldr	r3, [pc, #12]	@ (8002e8c <term_idle+0x100>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
    }
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000df4 	.word	0x20000df4
 8002e90:	20000d74 	.word	0x20000d74
 8002e94:	0800d12c 	.word	0x0800d12c
 8002e98:	0800d134 	.word	0x0800d134
 8002e9c:	0800d13c 	.word	0x0800d13c
 8002ea0:	0800d144 	.word	0x0800d144
 8002ea4:	0800d14c 	.word	0x0800d14c
 8002ea8:	0800d154 	.word	0x0800d154
 8002eac:	0800d158 	.word	0x0800d158
 8002eb0:	0800d15c 	.word	0x0800d15c

08002eb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002eb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002eec <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002eb8:	f7ff ff2a 	bl	8002d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ebc:	480c      	ldr	r0, [pc, #48]	@ (8002ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ebe:	490d      	ldr	r1, [pc, #52]	@ (8002ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef8 <LoopForever+0xe>)
  movs r3, #0
 8002ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec4:	e002      	b.n	8002ecc <LoopCopyDataInit>

08002ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eca:	3304      	adds	r3, #4

08002ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ed0:	d3f9      	bcc.n	8002ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8002f00 <LoopForever+0x16>)
  movs r3, #0
 8002ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed8:	e001      	b.n	8002ede <LoopFillZerobss>

08002eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002edc:	3204      	adds	r2, #4

08002ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ee0:	d3fb      	bcc.n	8002eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ee2:	f006 f963 	bl	80091ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ee6:	f7fe ff3d 	bl	8001d64 <main>

08002eea <LoopForever>:

LoopForever:
    b LoopForever
 8002eea:	e7fe      	b.n	8002eea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002eec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ef4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002ef8:	0800d5f8 	.word	0x0800d5f8
  ldr r2, =_sbss
 8002efc:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002f00:	20000f48 	.word	0x20000f48

08002f04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f04:	e7fe      	b.n	8002f04 <ADC1_IRQHandler>
	...

08002f08 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f0c:	4b08      	ldr	r3, [pc, #32]	@ (8002f30 <HAL_Init+0x28>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a07      	ldr	r2, [pc, #28]	@ (8002f30 <HAL_Init+0x28>)
 8002f12:	f043 0310 	orr.w	r3, r3, #16
 8002f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f18:	2003      	movs	r0, #3
 8002f1a:	f000 f92b 	bl	8003174 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f1e:	200f      	movs	r0, #15
 8002f20:	f000 f808 	bl	8002f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f24:	f7ff fc68 	bl	80027f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40022000 	.word	0x40022000

08002f34 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f3c:	4b12      	ldr	r3, [pc, #72]	@ (8002f88 <HAL_InitTick+0x54>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b12      	ldr	r3, [pc, #72]	@ (8002f8c <HAL_InitTick+0x58>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	4619      	mov	r1, r3
 8002f46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 f943 	bl	80031de <HAL_SYSTICK_Config>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e00e      	b.n	8002f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b0f      	cmp	r3, #15
 8002f66:	d80a      	bhi.n	8002f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f70:	f000 f90b 	bl	800318a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f74:	4a06      	ldr	r2, [pc, #24]	@ (8002f90 <HAL_InitTick+0x5c>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e000      	b.n	8002f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000018 	.word	0x20000018
 8002f8c:	20000020 	.word	0x20000020
 8002f90:	2000001c 	.word	0x2000001c

08002f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f98:	4b06      	ldr	r3, [pc, #24]	@ (8002fb4 <HAL_IncTick+0x20>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <HAL_IncTick+0x24>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	4a04      	ldr	r2, [pc, #16]	@ (8002fb8 <HAL_IncTick+0x24>)
 8002fa6:	6013      	str	r3, [r2, #0]
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20000020 	.word	0x20000020
 8002fb8:	20000df8 	.word	0x20000df8

08002fbc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return uwTick;  
 8002fc0:	4b03      	ldr	r3, [pc, #12]	@ (8002fd0 <HAL_GetTick+0x14>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	20000df8 	.word	0x20000df8

08002fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8003018 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ffc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003006:	4a04      	ldr	r2, [pc, #16]	@ (8003018 <__NVIC_SetPriorityGrouping+0x44>)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	60d3      	str	r3, [r2, #12]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003020:	4b04      	ldr	r3, [pc, #16]	@ (8003034 <__NVIC_GetPriorityGrouping+0x18>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	0a1b      	lsrs	r3, r3, #8
 8003026:	f003 0307 	and.w	r3, r3, #7
}
 800302a:	4618      	mov	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	2b00      	cmp	r3, #0
 8003048:	db0b      	blt.n	8003062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	f003 021f 	and.w	r2, r3, #31
 8003050:	4907      	ldr	r1, [pc, #28]	@ (8003070 <__NVIC_EnableIRQ+0x38>)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	2001      	movs	r0, #1
 800305a:	fa00 f202 	lsl.w	r2, r0, r2
 800305e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000e100 	.word	0xe000e100

08003074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003084:	2b00      	cmp	r3, #0
 8003086:	db0a      	blt.n	800309e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	b2da      	uxtb	r2, r3
 800308c:	490c      	ldr	r1, [pc, #48]	@ (80030c0 <__NVIC_SetPriority+0x4c>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	0112      	lsls	r2, r2, #4
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	440b      	add	r3, r1
 8003098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800309c:	e00a      	b.n	80030b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4908      	ldr	r1, [pc, #32]	@ (80030c4 <__NVIC_SetPriority+0x50>)
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	3b04      	subs	r3, #4
 80030ac:	0112      	lsls	r2, r2, #4
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	440b      	add	r3, r1
 80030b2:	761a      	strb	r2, [r3, #24]
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000e100 	.word	0xe000e100
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	@ 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f1c3 0307 	rsb	r3, r3, #7
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	bf28      	it	cs
 80030e6:	2304      	movcs	r3, #4
 80030e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2b06      	cmp	r3, #6
 80030f0:	d902      	bls.n	80030f8 <NVIC_EncodePriority+0x30>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3b03      	subs	r3, #3
 80030f6:	e000      	b.n	80030fa <NVIC_EncodePriority+0x32>
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43da      	mvns	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	401a      	ands	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003110:	f04f 31ff 	mov.w	r1, #4294967295
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	43d9      	mvns	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003120:	4313      	orrs	r3, r2
         );
}
 8003122:	4618      	mov	r0, r3
 8003124:	3724      	adds	r7, #36	@ 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3b01      	subs	r3, #1
 800313c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003140:	d301      	bcc.n	8003146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003142:	2301      	movs	r3, #1
 8003144:	e00f      	b.n	8003166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003146:	4a0a      	ldr	r2, [pc, #40]	@ (8003170 <SysTick_Config+0x40>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314e:	210f      	movs	r1, #15
 8003150:	f04f 30ff 	mov.w	r0, #4294967295
 8003154:	f7ff ff8e 	bl	8003074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003158:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <SysTick_Config+0x40>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315e:	4b04      	ldr	r3, [pc, #16]	@ (8003170 <SysTick_Config+0x40>)
 8003160:	2207      	movs	r2, #7
 8003162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	e000e010 	.word	0xe000e010

08003174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff ff29 	bl	8002fd4 <__NVIC_SetPriorityGrouping>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b086      	sub	sp, #24
 800318e:	af00      	add	r7, sp, #0
 8003190:	4603      	mov	r3, r0
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800319c:	f7ff ff3e 	bl	800301c <__NVIC_GetPriorityGrouping>
 80031a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	6978      	ldr	r0, [r7, #20]
 80031a8:	f7ff ff8e 	bl	80030c8 <NVIC_EncodePriority>
 80031ac:	4602      	mov	r2, r0
 80031ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff5d 	bl	8003074 <__NVIC_SetPriority>
}
 80031ba:	bf00      	nop
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	4603      	mov	r3, r0
 80031ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff31 	bl	8003038 <__NVIC_EnableIRQ>
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ffa2 	bl	8003130 <SysTick_Config>
 80031ec:	4603      	mov	r3, r0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003204:	2b02      	cmp	r3, #2
 8003206:	d008      	beq.n	800321a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2204      	movs	r2, #4
 800320c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e020      	b.n	800325c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 020e 	bic.w	r2, r2, #14
 8003228:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0201 	bic.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003242:	2101      	movs	r1, #1
 8003244:	fa01 f202 	lsl.w	r2, r1, r2
 8003248:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800327a:	2b02      	cmp	r3, #2
 800327c:	d005      	beq.n	800328a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2204      	movs	r2, #4
 8003282:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	73fb      	strb	r3, [r7, #15]
 8003288:	e027      	b.n	80032da <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 020e 	bic.w	r2, r2, #14
 8003298:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0201 	bic.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b2:	2101      	movs	r1, #1
 80032b4:	fa01 f202 	lsl.w	r2, r1, r2
 80032b8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	4798      	blx	r3
    } 
  }
  return status;
 80032da:	7bfb      	ldrb	r3, [r7, #15]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032f2:	e154      	b.n	800359e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	2101      	movs	r1, #1
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	4013      	ands	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 8146 	beq.w	8003598 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d005      	beq.n	8003324 <HAL_GPIO_Init+0x40>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d130      	bne.n	8003386 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	2203      	movs	r2, #3
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800335a:	2201      	movs	r2, #1
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4013      	ands	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	091b      	lsrs	r3, r3, #4
 8003370:	f003 0201 	and.w	r2, r3, #1
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b03      	cmp	r3, #3
 8003390:	d017      	beq.n	80033c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	2203      	movs	r2, #3
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d123      	bne.n	8003416 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	08da      	lsrs	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3208      	adds	r2, #8
 80033d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	220f      	movs	r2, #15
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4013      	ands	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	08da      	lsrs	r2, r3, #3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3208      	adds	r2, #8
 8003410:	6939      	ldr	r1, [r7, #16]
 8003412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	2203      	movs	r2, #3
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4013      	ands	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0203 	and.w	r2, r3, #3
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 80a0 	beq.w	8003598 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003458:	4b58      	ldr	r3, [pc, #352]	@ (80035bc <HAL_GPIO_Init+0x2d8>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	4a57      	ldr	r2, [pc, #348]	@ (80035bc <HAL_GPIO_Init+0x2d8>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6193      	str	r3, [r2, #24]
 8003464:	4b55      	ldr	r3, [pc, #340]	@ (80035bc <HAL_GPIO_Init+0x2d8>)
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003470:	4a53      	ldr	r2, [pc, #332]	@ (80035c0 <HAL_GPIO_Init+0x2dc>)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	089b      	lsrs	r3, r3, #2
 8003476:	3302      	adds	r3, #2
 8003478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	220f      	movs	r2, #15
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4013      	ands	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800349a:	d019      	beq.n	80034d0 <HAL_GPIO_Init+0x1ec>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a49      	ldr	r2, [pc, #292]	@ (80035c4 <HAL_GPIO_Init+0x2e0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d013      	beq.n	80034cc <HAL_GPIO_Init+0x1e8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a48      	ldr	r2, [pc, #288]	@ (80035c8 <HAL_GPIO_Init+0x2e4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d00d      	beq.n	80034c8 <HAL_GPIO_Init+0x1e4>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a47      	ldr	r2, [pc, #284]	@ (80035cc <HAL_GPIO_Init+0x2e8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d007      	beq.n	80034c4 <HAL_GPIO_Init+0x1e0>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a46      	ldr	r2, [pc, #280]	@ (80035d0 <HAL_GPIO_Init+0x2ec>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d101      	bne.n	80034c0 <HAL_GPIO_Init+0x1dc>
 80034bc:	2304      	movs	r3, #4
 80034be:	e008      	b.n	80034d2 <HAL_GPIO_Init+0x1ee>
 80034c0:	2305      	movs	r3, #5
 80034c2:	e006      	b.n	80034d2 <HAL_GPIO_Init+0x1ee>
 80034c4:	2303      	movs	r3, #3
 80034c6:	e004      	b.n	80034d2 <HAL_GPIO_Init+0x1ee>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e002      	b.n	80034d2 <HAL_GPIO_Init+0x1ee>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <HAL_GPIO_Init+0x1ee>
 80034d0:	2300      	movs	r3, #0
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	f002 0203 	and.w	r2, r2, #3
 80034d8:	0092      	lsls	r2, r2, #2
 80034da:	4093      	lsls	r3, r2
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034e2:	4937      	ldr	r1, [pc, #220]	@ (80035c0 <HAL_GPIO_Init+0x2dc>)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	089b      	lsrs	r3, r3, #2
 80034e8:	3302      	adds	r3, #2
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034f0:	4b38      	ldr	r3, [pc, #224]	@ (80035d4 <HAL_GPIO_Init+0x2f0>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003514:	4a2f      	ldr	r2, [pc, #188]	@ (80035d4 <HAL_GPIO_Init+0x2f0>)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800351a:	4b2e      	ldr	r3, [pc, #184]	@ (80035d4 <HAL_GPIO_Init+0x2f0>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	43db      	mvns	r3, r3
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4013      	ands	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800353e:	4a25      	ldr	r2, [pc, #148]	@ (80035d4 <HAL_GPIO_Init+0x2f0>)
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003544:	4b23      	ldr	r3, [pc, #140]	@ (80035d4 <HAL_GPIO_Init+0x2f0>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	43db      	mvns	r3, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4013      	ands	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003568:	4a1a      	ldr	r2, [pc, #104]	@ (80035d4 <HAL_GPIO_Init+0x2f0>)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800356e:	4b19      	ldr	r3, [pc, #100]	@ (80035d4 <HAL_GPIO_Init+0x2f0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	43db      	mvns	r3, r3
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4013      	ands	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003592:	4a10      	ldr	r2, [pc, #64]	@ (80035d4 <HAL_GPIO_Init+0x2f0>)
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	3301      	adds	r3, #1
 800359c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f47f aea3 	bne.w	80032f4 <HAL_GPIO_Init+0x10>
  }
}
 80035ae:	bf00      	nop
 80035b0:	bf00      	nop
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40010000 	.word	0x40010000
 80035c4:	48000400 	.word	0x48000400
 80035c8:	48000800 	.word	0x48000800
 80035cc:	48000c00 	.word	0x48000c00
 80035d0:	48001000 	.word	0x48001000
 80035d4:	40010400 	.word	0x40010400

080035d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	887b      	ldrh	r3, [r7, #2]
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
 80035f4:	e001      	b.n	80035fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	807b      	strh	r3, [r7, #2]
 8003614:	4613      	mov	r3, r2
 8003616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003618:	787b      	ldrb	r3, [r7, #1]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800361e:	887a      	ldrh	r2, [r7, #2]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003624:	e002      	b.n	800362c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003626:	887a      	ldrh	r2, [r7, #2]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e081      	b.n	800374e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff f8f4 	bl	800284c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2224      	movs	r2, #36	@ 0x24
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003688:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003698:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d107      	bne.n	80036b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	e006      	b.n	80036c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80036be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d104      	bne.n	80036d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69d9      	ldr	r1, [r3, #28]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1a      	ldr	r2, [r3, #32]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	461a      	mov	r2, r3
 8003764:	460b      	mov	r3, r1
 8003766:	817b      	strh	r3, [r7, #10]
 8003768:	4613      	mov	r3, r2
 800376a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b20      	cmp	r3, #32
 8003776:	f040 80da 	bne.w	800392e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_I2C_Master_Transmit+0x30>
 8003784:	2302      	movs	r3, #2
 8003786:	e0d3      	b.n	8003930 <HAL_I2C_Master_Transmit+0x1d8>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003790:	f7ff fc14 	bl	8002fbc <HAL_GetTick>
 8003794:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	2319      	movs	r3, #25
 800379c:	2201      	movs	r2, #1
 800379e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f9e6 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e0be      	b.n	8003930 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2221      	movs	r2, #33	@ 0x21
 80037b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2210      	movs	r2, #16
 80037be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	893a      	ldrh	r2, [r7, #8]
 80037d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2bff      	cmp	r3, #255	@ 0xff
 80037e2:	d90e      	bls.n	8003802 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	22ff      	movs	r2, #255	@ 0xff
 80037e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	8979      	ldrh	r1, [r7, #10]
 80037f2:	4b51      	ldr	r3, [pc, #324]	@ (8003938 <HAL_I2C_Master_Transmit+0x1e0>)
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fbf6 	bl	8003fec <I2C_TransferConfig>
 8003800:	e06c      	b.n	80038dc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003810:	b2da      	uxtb	r2, r3
 8003812:	8979      	ldrh	r1, [r7, #10]
 8003814:	4b48      	ldr	r3, [pc, #288]	@ (8003938 <HAL_I2C_Master_Transmit+0x1e0>)
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fbe5 	bl	8003fec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003822:	e05b      	b.n	80038dc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	6a39      	ldr	r1, [r7, #32]
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 f9f2 	bl	8003c12 <I2C_WaitOnTXISFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e07b      	b.n	8003930 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	781a      	ldrb	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d034      	beq.n	80038dc <HAL_I2C_Master_Transmit+0x184>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003876:	2b00      	cmp	r3, #0
 8003878:	d130      	bne.n	80038dc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	2200      	movs	r2, #0
 8003882:	2180      	movs	r1, #128	@ 0x80
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f975 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e04d      	b.n	8003930 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	2bff      	cmp	r3, #255	@ 0xff
 800389c:	d90e      	bls.n	80038bc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	22ff      	movs	r2, #255	@ 0xff
 80038a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	8979      	ldrh	r1, [r7, #10]
 80038ac:	2300      	movs	r3, #0
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 fb99 	bl	8003fec <I2C_TransferConfig>
 80038ba:	e00f      	b.n	80038dc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	8979      	ldrh	r1, [r7, #10]
 80038ce:	2300      	movs	r3, #0
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fb88 	bl	8003fec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d19e      	bne.n	8003824 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	6a39      	ldr	r1, [r7, #32]
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f9d8 	bl	8003ca0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e01a      	b.n	8003930 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2220      	movs	r2, #32
 8003900:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <HAL_I2C_Master_Transmit+0x1e4>)
 800390e:	400b      	ands	r3, r1
 8003910:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	80002000 	.word	0x80002000
 800393c:	fe00e800 	.word	0xfe00e800

08003940 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af02      	add	r7, sp, #8
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	607a      	str	r2, [r7, #4]
 800394a:	461a      	mov	r2, r3
 800394c:	460b      	mov	r3, r1
 800394e:	817b      	strh	r3, [r7, #10]
 8003950:	4613      	mov	r3, r2
 8003952:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b20      	cmp	r3, #32
 800395e:	f040 80db 	bne.w	8003b18 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_I2C_Master_Receive+0x30>
 800396c:	2302      	movs	r3, #2
 800396e:	e0d4      	b.n	8003b1a <HAL_I2C_Master_Receive+0x1da>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003978:	f7ff fb20 	bl	8002fbc <HAL_GetTick>
 800397c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	2319      	movs	r3, #25
 8003984:	2201      	movs	r2, #1
 8003986:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f8f2 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0bf      	b.n	8003b1a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2222      	movs	r2, #34	@ 0x22
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2210      	movs	r2, #16
 80039a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	893a      	ldrh	r2, [r7, #8]
 80039ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2bff      	cmp	r3, #255	@ 0xff
 80039ca:	d90e      	bls.n	80039ea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	22ff      	movs	r2, #255	@ 0xff
 80039d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	8979      	ldrh	r1, [r7, #10]
 80039da:	4b52      	ldr	r3, [pc, #328]	@ (8003b24 <HAL_I2C_Master_Receive+0x1e4>)
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 fb02 	bl	8003fec <I2C_TransferConfig>
 80039e8:	e06d      	b.n	8003ac6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	8979      	ldrh	r1, [r7, #10]
 80039fc:	4b49      	ldr	r3, [pc, #292]	@ (8003b24 <HAL_I2C_Master_Receive+0x1e4>)
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 faf1 	bl	8003fec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003a0a:	e05c      	b.n	8003ac6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	6a39      	ldr	r1, [r7, #32]
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 f989 	bl	8003d28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e07c      	b.n	8003b1a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d034      	beq.n	8003ac6 <HAL_I2C_Master_Receive+0x186>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d130      	bne.n	8003ac6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2180      	movs	r1, #128	@ 0x80
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f880 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e04d      	b.n	8003b1a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2bff      	cmp	r3, #255	@ 0xff
 8003a86:	d90e      	bls.n	8003aa6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	22ff      	movs	r2, #255	@ 0xff
 8003a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	8979      	ldrh	r1, [r7, #10]
 8003a96:	2300      	movs	r3, #0
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 faa4 	bl	8003fec <I2C_TransferConfig>
 8003aa4:	e00f      	b.n	8003ac6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	8979      	ldrh	r1, [r7, #10]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 fa93 	bl	8003fec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d19d      	bne.n	8003a0c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	6a39      	ldr	r1, [r7, #32]
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f8e3 	bl	8003ca0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e01a      	b.n	8003b1a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6859      	ldr	r1, [r3, #4]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b28 <HAL_I2C_Master_Receive+0x1e8>)
 8003af8:	400b      	ands	r3, r1
 8003afa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	e000      	b.n	8003b1a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
  }
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	80002400 	.word	0x80002400
 8003b28:	fe00e800 	.word	0xfe00e800

08003b2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d103      	bne.n	8003b4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2200      	movs	r2, #0
 8003b48:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d007      	beq.n	8003b68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	619a      	str	r2, [r3, #24]
  }
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b84:	e031      	b.n	8003bea <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8c:	d02d      	beq.n	8003bea <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8e:	f7ff fa15 	bl	8002fbc <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d122      	bne.n	8003bea <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	4013      	ands	r3, r2
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2301      	moveq	r3, #1
 8003bb6:	2300      	movne	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d113      	bne.n	8003bea <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc6:	f043 0220 	orr.w	r2, r3, #32
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e00f      	b.n	8003c0a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699a      	ldr	r2, [r3, #24]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	bf0c      	ite	eq
 8003bfa:	2301      	moveq	r3, #1
 8003bfc:	2300      	movne	r3, #0
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	461a      	mov	r2, r3
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d0be      	beq.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b084      	sub	sp, #16
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c1e:	e033      	b.n	8003c88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	68b9      	ldr	r1, [r7, #8]
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f901 	bl	8003e2c <I2C_IsErrorOccurred>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e031      	b.n	8003c98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3a:	d025      	beq.n	8003c88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3c:	f7ff f9be 	bl	8002fbc <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d302      	bcc.n	8003c52 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d11a      	bne.n	8003c88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d013      	beq.n	8003c88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c64:	f043 0220 	orr.w	r2, r3, #32
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e007      	b.n	8003c98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d1c4      	bne.n	8003c20 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cac:	e02f      	b.n	8003d0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f8ba 	bl	8003e2c <I2C_IsErrorOccurred>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e02d      	b.n	8003d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc2:	f7ff f97b 	bl	8002fbc <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d302      	bcc.n	8003cd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d11a      	bne.n	8003d0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d013      	beq.n	8003d0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cea:	f043 0220 	orr.w	r2, r3, #32
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e007      	b.n	8003d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	d1c8      	bne.n	8003cae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d34:	e06b      	b.n	8003e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	68b9      	ldr	r1, [r7, #8]
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f876 	bl	8003e2c <I2C_IsErrorOccurred>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e069      	b.n	8003e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	2b20      	cmp	r3, #32
 8003d56:	d138      	bne.n	8003dca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d105      	bne.n	8003d72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e055      	b.n	8003e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d107      	bne.n	8003d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2210      	movs	r2, #16
 8003d86:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	645a      	str	r2, [r3, #68]	@ 0x44
 8003d8e:	e002      	b.n	8003d96 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6859      	ldr	r1, [r3, #4]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4b1f      	ldr	r3, [pc, #124]	@ (8003e28 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003daa:	400b      	ands	r3, r1
 8003dac:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e029      	b.n	8003e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dca:	f7ff f8f7 	bl	8002fbc <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d302      	bcc.n	8003de0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d116      	bne.n	8003e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d00f      	beq.n	8003e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df2:	f043 0220 	orr.w	r2, r3, #32
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e007      	b.n	8003e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d18c      	bne.n	8003d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	fe00e800 	.word	0xfe00e800

08003e2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	@ 0x28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d068      	beq.n	8003f2a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2210      	movs	r2, #16
 8003e5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e60:	e049      	b.n	8003ef6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e68:	d045      	beq.n	8003ef6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e6a:	f7ff f8a7 	bl	8002fbc <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d302      	bcc.n	8003e80 <I2C_IsErrorOccurred+0x54>
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d13a      	bne.n	8003ef6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ea2:	d121      	bne.n	8003ee8 <I2C_IsErrorOccurred+0xbc>
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eaa:	d01d      	beq.n	8003ee8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003eac:	7cfb      	ldrb	r3, [r7, #19]
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d01a      	beq.n	8003ee8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ec0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ec2:	f7ff f87b 	bl	8002fbc <HAL_GetTick>
 8003ec6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ec8:	e00e      	b.n	8003ee8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003eca:	f7ff f877 	bl	8002fbc <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b19      	cmp	r3, #25
 8003ed6:	d907      	bls.n	8003ee8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	f043 0320 	orr.w	r3, r3, #32
 8003ede:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003ee6:	e006      	b.n	8003ef6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	d1e9      	bne.n	8003eca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	f003 0320 	and.w	r3, r3, #32
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	d003      	beq.n	8003f0c <I2C_IsErrorOccurred+0xe0>
 8003f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0aa      	beq.n	8003e62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d103      	bne.n	8003f1c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	f043 0304 	orr.w	r3, r3, #4
 8003f22:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00b      	beq.n	8003f54 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00b      	beq.n	8003f76 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	f043 0308 	orr.w	r3, r3, #8
 8003f64:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00b      	beq.n	8003f98 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	f043 0302 	orr.w	r3, r3, #2
 8003f86:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003f98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d01c      	beq.n	8003fda <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f7ff fdc3 	bl	8003b2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6859      	ldr	r1, [r3, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe8 <I2C_IsErrorOccurred+0x1bc>)
 8003fb2:	400b      	ands	r3, r1
 8003fb4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003fda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3728      	adds	r7, #40	@ 0x28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	fe00e800 	.word	0xfe00e800

08003fec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	607b      	str	r3, [r7, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	817b      	strh	r3, [r7, #10]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ffe:	897b      	ldrh	r3, [r7, #10]
 8004000:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004004:	7a7b      	ldrb	r3, [r7, #9]
 8004006:	041b      	lsls	r3, r3, #16
 8004008:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800400c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	4313      	orrs	r3, r2
 8004016:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800401a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	0d5b      	lsrs	r3, r3, #21
 8004026:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800402a:	4b08      	ldr	r3, [pc, #32]	@ (800404c <I2C_TransferConfig+0x60>)
 800402c:	430b      	orrs	r3, r1
 800402e:	43db      	mvns	r3, r3
 8004030:	ea02 0103 	and.w	r1, r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	03ff63ff 	.word	0x03ff63ff

08004050 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b20      	cmp	r3, #32
 8004064:	d138      	bne.n	80040d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004070:	2302      	movs	r3, #2
 8004072:	e032      	b.n	80040da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2224      	movs	r2, #36	@ 0x24
 8004080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0201 	bic.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6819      	ldr	r1, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	e000      	b.n	80040da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040d8:	2302      	movs	r3, #2
  }
}
 80040da:	4618      	mov	r0, r3
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b085      	sub	sp, #20
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	d139      	bne.n	8004170 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004106:	2302      	movs	r3, #2
 8004108:	e033      	b.n	8004172 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2224      	movs	r2, #36	@ 0x24
 8004116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0201 	bic.w	r2, r2, #1
 8004128:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004138:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	021b      	lsls	r3, r3, #8
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	e000      	b.n	8004172 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004170:	2302      	movs	r3, #2
  }
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
	...

08004180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8004186:	af00      	add	r7, sp, #0
 8004188:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800418c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004190:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004196:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	f001 b823 	b.w	80051ec <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 817d 	beq.w	80044b6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80041bc:	4bbc      	ldr	r3, [pc, #752]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 030c 	and.w	r3, r3, #12
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d00c      	beq.n	80041e2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041c8:	4bb9      	ldr	r3, [pc, #740]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d15c      	bne.n	800428e <HAL_RCC_OscConfig+0x10e>
 80041d4:	4bb6      	ldr	r3, [pc, #728]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041e0:	d155      	bne.n	800428e <HAL_RCC_OscConfig+0x10e>
 80041e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041e6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80041ee:	fa93 f3a3 	rbit	r3, r3
 80041f2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041f6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fa:	fab3 f383 	clz	r3, r3
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	d102      	bne.n	8004214 <HAL_RCC_OscConfig+0x94>
 800420e:	4ba8      	ldr	r3, [pc, #672]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	e015      	b.n	8004240 <HAL_RCC_OscConfig+0xc0>
 8004214:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004218:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8004220:	fa93 f3a3 	rbit	r3, r3
 8004224:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004228:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800422c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004230:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004234:	fa93 f3a3 	rbit	r3, r3
 8004238:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800423c:	4b9c      	ldr	r3, [pc, #624]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004244:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8004248:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800424c:	fa92 f2a2 	rbit	r2, r2
 8004250:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8004254:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8004258:	fab2 f282 	clz	r2, r2
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	f042 0220 	orr.w	r2, r2, #32
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	f002 021f 	and.w	r2, r2, #31
 8004268:	2101      	movs	r1, #1
 800426a:	fa01 f202 	lsl.w	r2, r1, r2
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 811f 	beq.w	80044b4 <HAL_RCC_OscConfig+0x334>
 8004276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800427a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f040 8116 	bne.w	80044b4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	f000 bfaf 	b.w	80051ec <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800428e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004292:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800429e:	d106      	bne.n	80042ae <HAL_RCC_OscConfig+0x12e>
 80042a0:	4b83      	ldr	r3, [pc, #524]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a82      	ldr	r2, [pc, #520]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 80042a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	e036      	b.n	800431c <HAL_RCC_OscConfig+0x19c>
 80042ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCC_OscConfig+0x158>
 80042be:	4b7c      	ldr	r3, [pc, #496]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a7b      	ldr	r2, [pc, #492]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 80042c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	4b79      	ldr	r3, [pc, #484]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a78      	ldr	r2, [pc, #480]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 80042d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	e021      	b.n	800431c <HAL_RCC_OscConfig+0x19c>
 80042d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042e8:	d10c      	bne.n	8004304 <HAL_RCC_OscConfig+0x184>
 80042ea:	4b71      	ldr	r3, [pc, #452]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a70      	ldr	r2, [pc, #448]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 80042f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	4b6e      	ldr	r3, [pc, #440]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a6d      	ldr	r2, [pc, #436]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 80042fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	e00b      	b.n	800431c <HAL_RCC_OscConfig+0x19c>
 8004304:	4b6a      	ldr	r3, [pc, #424]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a69      	ldr	r2, [pc, #420]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 800430a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	4b67      	ldr	r3, [pc, #412]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a66      	ldr	r2, [pc, #408]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 8004316:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800431a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800431c:	4b64      	ldr	r3, [pc, #400]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 800431e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004320:	f023 020f 	bic.w	r2, r3, #15
 8004324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004328:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	495f      	ldr	r1, [pc, #380]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 8004332:	4313      	orrs	r3, r2
 8004334:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800433a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d059      	beq.n	80043fa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004346:	f7fe fe39 	bl	8002fbc <HAL_GetTick>
 800434a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	e00a      	b.n	8004366 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004350:	f7fe fe34 	bl	8002fbc <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b64      	cmp	r3, #100	@ 0x64
 800435e:	d902      	bls.n	8004366 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	f000 bf43 	b.w	80051ec <HAL_RCC_OscConfig+0x106c>
 8004366:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800436a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8004372:	fa93 f3a3 	rbit	r3, r3
 8004376:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800437a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437e:	fab3 f383 	clz	r3, r3
 8004382:	b2db      	uxtb	r3, r3
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	b2db      	uxtb	r3, r3
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b01      	cmp	r3, #1
 8004390:	d102      	bne.n	8004398 <HAL_RCC_OscConfig+0x218>
 8004392:	4b47      	ldr	r3, [pc, #284]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	e015      	b.n	80043c4 <HAL_RCC_OscConfig+0x244>
 8004398:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800439c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80043a4:	fa93 f3a3 	rbit	r3, r3
 80043a8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80043ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043b0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80043b4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80043b8:	fa93 f3a3 	rbit	r3, r3
 80043bc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80043c0:	4b3b      	ldr	r3, [pc, #236]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 80043c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80043c8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80043cc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80043d0:	fa92 f2a2 	rbit	r2, r2
 80043d4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80043d8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80043dc:	fab2 f282 	clz	r2, r2
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	f042 0220 	orr.w	r2, r2, #32
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	f002 021f 	and.w	r2, r2, #31
 80043ec:	2101      	movs	r1, #1
 80043ee:	fa01 f202 	lsl.w	r2, r1, r2
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ab      	beq.n	8004350 <HAL_RCC_OscConfig+0x1d0>
 80043f8:	e05d      	b.n	80044b6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fa:	f7fe fddf 	bl	8002fbc <HAL_GetTick>
 80043fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004402:	e00a      	b.n	800441a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004404:	f7fe fdda 	bl	8002fbc <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b64      	cmp	r3, #100	@ 0x64
 8004412:	d902      	bls.n	800441a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	f000 bee9 	b.w	80051ec <HAL_RCC_OscConfig+0x106c>
 800441a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800441e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004422:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8004426:	fa93 f3a3 	rbit	r3, r3
 800442a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800442e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004432:	fab3 f383 	clz	r3, r3
 8004436:	b2db      	uxtb	r3, r3
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	b2db      	uxtb	r3, r3
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b01      	cmp	r3, #1
 8004444:	d102      	bne.n	800444c <HAL_RCC_OscConfig+0x2cc>
 8004446:	4b1a      	ldr	r3, [pc, #104]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	e015      	b.n	8004478 <HAL_RCC_OscConfig+0x2f8>
 800444c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004450:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004454:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004458:	fa93 f3a3 	rbit	r3, r3
 800445c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004460:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004464:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004468:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800446c:	fa93 f3a3 	rbit	r3, r3
 8004470:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004474:	4b0e      	ldr	r3, [pc, #56]	@ (80044b0 <HAL_RCC_OscConfig+0x330>)
 8004476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004478:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800447c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8004480:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004484:	fa92 f2a2 	rbit	r2, r2
 8004488:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800448c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8004490:	fab2 f282 	clz	r2, r2
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	f042 0220 	orr.w	r2, r2, #32
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	f002 021f 	and.w	r2, r2, #31
 80044a0:	2101      	movs	r1, #1
 80044a2:	fa01 f202 	lsl.w	r2, r1, r2
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1ab      	bne.n	8004404 <HAL_RCC_OscConfig+0x284>
 80044ac:	e003      	b.n	80044b6 <HAL_RCC_OscConfig+0x336>
 80044ae:	bf00      	nop
 80044b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 817d 	beq.w	80047c6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80044cc:	4ba6      	ldr	r3, [pc, #664]	@ (8004768 <HAL_RCC_OscConfig+0x5e8>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 030c 	and.w	r3, r3, #12
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00b      	beq.n	80044f0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80044d8:	4ba3      	ldr	r3, [pc, #652]	@ (8004768 <HAL_RCC_OscConfig+0x5e8>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f003 030c 	and.w	r3, r3, #12
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d172      	bne.n	80045ca <HAL_RCC_OscConfig+0x44a>
 80044e4:	4ba0      	ldr	r3, [pc, #640]	@ (8004768 <HAL_RCC_OscConfig+0x5e8>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d16c      	bne.n	80045ca <HAL_RCC_OscConfig+0x44a>
 80044f0:	2302      	movs	r3, #2
 80044f2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80044fa:	fa93 f3a3 	rbit	r3, r3
 80044fe:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8004502:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004506:	fab3 f383 	clz	r3, r3
 800450a:	b2db      	uxtb	r3, r3
 800450c:	095b      	lsrs	r3, r3, #5
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b01      	cmp	r3, #1
 8004518:	d102      	bne.n	8004520 <HAL_RCC_OscConfig+0x3a0>
 800451a:	4b93      	ldr	r3, [pc, #588]	@ (8004768 <HAL_RCC_OscConfig+0x5e8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	e013      	b.n	8004548 <HAL_RCC_OscConfig+0x3c8>
 8004520:	2302      	movs	r3, #2
 8004522:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800452a:	fa93 f3a3 	rbit	r3, r3
 800452e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004532:	2302      	movs	r3, #2
 8004534:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004538:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800453c:	fa93 f3a3 	rbit	r3, r3
 8004540:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004544:	4b88      	ldr	r3, [pc, #544]	@ (8004768 <HAL_RCC_OscConfig+0x5e8>)
 8004546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004548:	2202      	movs	r2, #2
 800454a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800454e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004552:	fa92 f2a2 	rbit	r2, r2
 8004556:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800455a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800455e:	fab2 f282 	clz	r2, r2
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	f042 0220 	orr.w	r2, r2, #32
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	f002 021f 	and.w	r2, r2, #31
 800456e:	2101      	movs	r1, #1
 8004570:	fa01 f202 	lsl.w	r2, r1, r2
 8004574:	4013      	ands	r3, r2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCC_OscConfig+0x410>
 800457a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800457e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d002      	beq.n	8004590 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	f000 be2e 	b.w	80051ec <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004590:	4b75      	ldr	r3, [pc, #468]	@ (8004768 <HAL_RCC_OscConfig+0x5e8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800459c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	21f8      	movs	r1, #248	@ 0xf8
 80045a6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045aa:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80045ae:	fa91 f1a1 	rbit	r1, r1
 80045b2:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80045b6:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80045ba:	fab1 f181 	clz	r1, r1
 80045be:	b2c9      	uxtb	r1, r1
 80045c0:	408b      	lsls	r3, r1
 80045c2:	4969      	ldr	r1, [pc, #420]	@ (8004768 <HAL_RCC_OscConfig+0x5e8>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c8:	e0fd      	b.n	80047c6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 8088 	beq.w	80046ec <HAL_RCC_OscConfig+0x56c>
 80045dc:	2301      	movs	r3, #1
 80045de:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80045e6:	fa93 f3a3 	rbit	r3, r3
 80045ea:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80045ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045f2:	fab3 f383 	clz	r3, r3
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80045fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	461a      	mov	r2, r3
 8004604:	2301      	movs	r3, #1
 8004606:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fe fcd8 	bl	8002fbc <HAL_GetTick>
 800460c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004610:	e00a      	b.n	8004628 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004612:	f7fe fcd3 	bl	8002fbc <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d902      	bls.n	8004628 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	f000 bde2 	b.w	80051ec <HAL_RCC_OscConfig+0x106c>
 8004628:	2302      	movs	r3, #2
 800462a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004632:	fa93 f3a3 	rbit	r3, r3
 8004636:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800463a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463e:	fab3 f383 	clz	r3, r3
 8004642:	b2db      	uxtb	r3, r3
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f043 0301 	orr.w	r3, r3, #1
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	d102      	bne.n	8004658 <HAL_RCC_OscConfig+0x4d8>
 8004652:	4b45      	ldr	r3, [pc, #276]	@ (8004768 <HAL_RCC_OscConfig+0x5e8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	e013      	b.n	8004680 <HAL_RCC_OscConfig+0x500>
 8004658:	2302      	movs	r3, #2
 800465a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004662:	fa93 f3a3 	rbit	r3, r3
 8004666:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800466a:	2302      	movs	r3, #2
 800466c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004670:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004674:	fa93 f3a3 	rbit	r3, r3
 8004678:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800467c:	4b3a      	ldr	r3, [pc, #232]	@ (8004768 <HAL_RCC_OscConfig+0x5e8>)
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	2202      	movs	r2, #2
 8004682:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8004686:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800468a:	fa92 f2a2 	rbit	r2, r2
 800468e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8004692:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8004696:	fab2 f282 	clz	r2, r2
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	f042 0220 	orr.w	r2, r2, #32
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	f002 021f 	and.w	r2, r2, #31
 80046a6:	2101      	movs	r1, #1
 80046a8:	fa01 f202 	lsl.w	r2, r1, r2
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0af      	beq.n	8004612 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004768 <HAL_RCC_OscConfig+0x5e8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	21f8      	movs	r1, #248	@ 0xf8
 80046c8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046cc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80046d0:	fa91 f1a1 	rbit	r1, r1
 80046d4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80046d8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80046dc:	fab1 f181 	clz	r1, r1
 80046e0:	b2c9      	uxtb	r1, r1
 80046e2:	408b      	lsls	r3, r1
 80046e4:	4920      	ldr	r1, [pc, #128]	@ (8004768 <HAL_RCC_OscConfig+0x5e8>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	600b      	str	r3, [r1, #0]
 80046ea:	e06c      	b.n	80047c6 <HAL_RCC_OscConfig+0x646>
 80046ec:	2301      	movs	r3, #1
 80046ee:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80046f6:	fa93 f3a3 	rbit	r3, r3
 80046fa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80046fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004702:	fab3 f383 	clz	r3, r3
 8004706:	b2db      	uxtb	r3, r3
 8004708:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800470c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	461a      	mov	r2, r3
 8004714:	2300      	movs	r3, #0
 8004716:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004718:	f7fe fc50 	bl	8002fbc <HAL_GetTick>
 800471c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004720:	e00a      	b.n	8004738 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004722:	f7fe fc4b 	bl	8002fbc <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d902      	bls.n	8004738 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	f000 bd5a 	b.w	80051ec <HAL_RCC_OscConfig+0x106c>
 8004738:	2302      	movs	r3, #2
 800473a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004742:	fa93 f3a3 	rbit	r3, r3
 8004746:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800474a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800474e:	fab3 f383 	clz	r3, r3
 8004752:	b2db      	uxtb	r3, r3
 8004754:	095b      	lsrs	r3, r3, #5
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b01      	cmp	r3, #1
 8004760:	d104      	bne.n	800476c <HAL_RCC_OscConfig+0x5ec>
 8004762:	4b01      	ldr	r3, [pc, #4]	@ (8004768 <HAL_RCC_OscConfig+0x5e8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	e015      	b.n	8004794 <HAL_RCC_OscConfig+0x614>
 8004768:	40021000 	.word	0x40021000
 800476c:	2302      	movs	r3, #2
 800476e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004772:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004776:	fa93 f3a3 	rbit	r3, r3
 800477a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800477e:	2302      	movs	r3, #2
 8004780:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004784:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004788:	fa93 f3a3 	rbit	r3, r3
 800478c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004790:	4bc8      	ldr	r3, [pc, #800]	@ (8004ab4 <HAL_RCC_OscConfig+0x934>)
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	2202      	movs	r2, #2
 8004796:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800479a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800479e:	fa92 f2a2 	rbit	r2, r2
 80047a2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80047a6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80047aa:	fab2 f282 	clz	r2, r2
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	f042 0220 	orr.w	r2, r2, #32
 80047b4:	b2d2      	uxtb	r2, r2
 80047b6:	f002 021f 	and.w	r2, r2, #31
 80047ba:	2101      	movs	r1, #1
 80047bc:	fa01 f202 	lsl.w	r2, r1, r2
 80047c0:	4013      	ands	r3, r2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1ad      	bne.n	8004722 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 8110 	beq.w	80049fc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d079      	beq.n	80048e0 <HAL_RCC_OscConfig+0x760>
 80047ec:	2301      	movs	r3, #1
 80047ee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80047f6:	fa93 f3a3 	rbit	r3, r3
 80047fa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80047fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004802:	fab3 f383 	clz	r3, r3
 8004806:	b2db      	uxtb	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	4bab      	ldr	r3, [pc, #684]	@ (8004ab8 <HAL_RCC_OscConfig+0x938>)
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	461a      	mov	r2, r3
 8004812:	2301      	movs	r3, #1
 8004814:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004816:	f7fe fbd1 	bl	8002fbc <HAL_GetTick>
 800481a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800481e:	e00a      	b.n	8004836 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004820:	f7fe fbcc 	bl	8002fbc <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d902      	bls.n	8004836 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	f000 bcdb 	b.w	80051ec <HAL_RCC_OscConfig+0x106c>
 8004836:	2302      	movs	r3, #2
 8004838:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004840:	fa93 f3a3 	rbit	r3, r3
 8004844:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800484c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004850:	2202      	movs	r2, #2
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004858:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	fa93 f2a3 	rbit	r2, r3
 8004862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004866:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004874:	2202      	movs	r2, #2
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800487c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	fa93 f2a3 	rbit	r2, r3
 8004886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800488a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800488e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004890:	4b88      	ldr	r3, [pc, #544]	@ (8004ab4 <HAL_RCC_OscConfig+0x934>)
 8004892:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004898:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800489c:	2102      	movs	r1, #2
 800489e:	6019      	str	r1, [r3, #0]
 80048a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	fa93 f1a3 	rbit	r1, r3
 80048ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80048b6:	6019      	str	r1, [r3, #0]
  return result;
 80048b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	fab3 f383 	clz	r3, r3
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	f003 031f 	and.w	r3, r3, #31
 80048d2:	2101      	movs	r1, #1
 80048d4:	fa01 f303 	lsl.w	r3, r1, r3
 80048d8:	4013      	ands	r3, r2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0a0      	beq.n	8004820 <HAL_RCC_OscConfig+0x6a0>
 80048de:	e08d      	b.n	80049fc <HAL_RCC_OscConfig+0x87c>
 80048e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048e4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048f0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	fa93 f2a3 	rbit	r2, r3
 80048fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048fe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004902:	601a      	str	r2, [r3, #0]
  return result;
 8004904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004908:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800490c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800490e:	fab3 f383 	clz	r3, r3
 8004912:	b2db      	uxtb	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	4b68      	ldr	r3, [pc, #416]	@ (8004ab8 <HAL_RCC_OscConfig+0x938>)
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	461a      	mov	r2, r3
 800491e:	2300      	movs	r3, #0
 8004920:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004922:	f7fe fb4b 	bl	8002fbc <HAL_GetTick>
 8004926:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800492a:	e00a      	b.n	8004942 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800492c:	f7fe fb46 	bl	8002fbc <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d902      	bls.n	8004942 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	f000 bc55 	b.w	80051ec <HAL_RCC_OscConfig+0x106c>
 8004942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004946:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800494a:	2202      	movs	r2, #2
 800494c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004952:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	fa93 f2a3 	rbit	r2, r3
 800495c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004960:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800496a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800496e:	2202      	movs	r2, #2
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004976:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	fa93 f2a3 	rbit	r2, r3
 8004980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004984:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800498e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004992:	2202      	movs	r2, #2
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800499a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	fa93 f2a3 	rbit	r2, r3
 80049a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80049ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ae:	4b41      	ldr	r3, [pc, #260]	@ (8004ab4 <HAL_RCC_OscConfig+0x934>)
 80049b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049b6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80049ba:	2102      	movs	r1, #2
 80049bc:	6019      	str	r1, [r3, #0]
 80049be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	fa93 f1a3 	rbit	r1, r3
 80049cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80049d4:	6019      	str	r1, [r3, #0]
  return result;
 80049d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049da:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	fab3 f383 	clz	r3, r3
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	2101      	movs	r1, #1
 80049f2:	fa01 f303 	lsl.w	r3, r1, r3
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d197      	bne.n	800492c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 81a1 	beq.w	8004d54 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a18:	4b26      	ldr	r3, [pc, #152]	@ (8004ab4 <HAL_RCC_OscConfig+0x934>)
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d116      	bne.n	8004a52 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a24:	4b23      	ldr	r3, [pc, #140]	@ (8004ab4 <HAL_RCC_OscConfig+0x934>)
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	4a22      	ldr	r2, [pc, #136]	@ (8004ab4 <HAL_RCC_OscConfig+0x934>)
 8004a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a2e:	61d3      	str	r3, [r2, #28]
 8004a30:	4b20      	ldr	r3, [pc, #128]	@ (8004ab4 <HAL_RCC_OscConfig+0x934>)
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a3c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a46:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004a4a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a52:	4b1a      	ldr	r3, [pc, #104]	@ (8004abc <HAL_RCC_OscConfig+0x93c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d11a      	bne.n	8004a94 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a5e:	4b17      	ldr	r3, [pc, #92]	@ (8004abc <HAL_RCC_OscConfig+0x93c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a16      	ldr	r2, [pc, #88]	@ (8004abc <HAL_RCC_OscConfig+0x93c>)
 8004a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a6a:	f7fe faa7 	bl	8002fbc <HAL_GetTick>
 8004a6e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a72:	e009      	b.n	8004a88 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a74:	f7fe faa2 	bl	8002fbc <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b64      	cmp	r3, #100	@ 0x64
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e3b1      	b.n	80051ec <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a88:	4b0c      	ldr	r3, [pc, #48]	@ (8004abc <HAL_RCC_OscConfig+0x93c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0ef      	beq.n	8004a74 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d10d      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x940>
 8004aa4:	4b03      	ldr	r3, [pc, #12]	@ (8004ab4 <HAL_RCC_OscConfig+0x934>)
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	4a02      	ldr	r2, [pc, #8]	@ (8004ab4 <HAL_RCC_OscConfig+0x934>)
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	6213      	str	r3, [r2, #32]
 8004ab0:	e03c      	b.n	8004b2c <HAL_RCC_OscConfig+0x9ac>
 8004ab2:	bf00      	nop
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	10908120 	.word	0x10908120
 8004abc:	40007000 	.word	0x40007000
 8004ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ac4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10c      	bne.n	8004aea <HAL_RCC_OscConfig+0x96a>
 8004ad0:	4bc1      	ldr	r3, [pc, #772]	@ (8004dd8 <HAL_RCC_OscConfig+0xc58>)
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	4ac0      	ldr	r2, [pc, #768]	@ (8004dd8 <HAL_RCC_OscConfig+0xc58>)
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	6213      	str	r3, [r2, #32]
 8004adc:	4bbe      	ldr	r3, [pc, #760]	@ (8004dd8 <HAL_RCC_OscConfig+0xc58>)
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	4abd      	ldr	r2, [pc, #756]	@ (8004dd8 <HAL_RCC_OscConfig+0xc58>)
 8004ae2:	f023 0304 	bic.w	r3, r3, #4
 8004ae6:	6213      	str	r3, [r2, #32]
 8004ae8:	e020      	b.n	8004b2c <HAL_RCC_OscConfig+0x9ac>
 8004aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	2b05      	cmp	r3, #5
 8004af8:	d10c      	bne.n	8004b14 <HAL_RCC_OscConfig+0x994>
 8004afa:	4bb7      	ldr	r3, [pc, #732]	@ (8004dd8 <HAL_RCC_OscConfig+0xc58>)
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	4ab6      	ldr	r2, [pc, #728]	@ (8004dd8 <HAL_RCC_OscConfig+0xc58>)
 8004b00:	f043 0304 	orr.w	r3, r3, #4
 8004b04:	6213      	str	r3, [r2, #32]
 8004b06:	4bb4      	ldr	r3, [pc, #720]	@ (8004dd8 <HAL_RCC_OscConfig+0xc58>)
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	4ab3      	ldr	r2, [pc, #716]	@ (8004dd8 <HAL_RCC_OscConfig+0xc58>)
 8004b0c:	f043 0301 	orr.w	r3, r3, #1
 8004b10:	6213      	str	r3, [r2, #32]
 8004b12:	e00b      	b.n	8004b2c <HAL_RCC_OscConfig+0x9ac>
 8004b14:	4bb0      	ldr	r3, [pc, #704]	@ (8004dd8 <HAL_RCC_OscConfig+0xc58>)
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	4aaf      	ldr	r2, [pc, #700]	@ (8004dd8 <HAL_RCC_OscConfig+0xc58>)
 8004b1a:	f023 0301 	bic.w	r3, r3, #1
 8004b1e:	6213      	str	r3, [r2, #32]
 8004b20:	4bad      	ldr	r3, [pc, #692]	@ (8004dd8 <HAL_RCC_OscConfig+0xc58>)
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	4aac      	ldr	r2, [pc, #688]	@ (8004dd8 <HAL_RCC_OscConfig+0xc58>)
 8004b26:	f023 0304 	bic.w	r3, r3, #4
 8004b2a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 8081 	beq.w	8004c40 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b3e:	f7fe fa3d 	bl	8002fbc <HAL_GetTick>
 8004b42:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b46:	e00b      	b.n	8004b60 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b48:	f7fe fa38 	bl	8002fbc <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e345      	b.n	80051ec <HAL_RCC_OscConfig+0x106c>
 8004b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b64:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004b68:	2202      	movs	r2, #2
 8004b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b70:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	fa93 f2a3 	rbit	r2, r3
 8004b7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b7e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b88:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b94:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	fa93 f2a3 	rbit	r2, r3
 8004b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ba2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004ba6:	601a      	str	r2, [r3, #0]
  return result;
 8004ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bac:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004bb0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb2:	fab3 f383 	clz	r3, r3
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	f043 0302 	orr.w	r3, r3, #2
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d102      	bne.n	8004bcc <HAL_RCC_OscConfig+0xa4c>
 8004bc6:	4b84      	ldr	r3, [pc, #528]	@ (8004dd8 <HAL_RCC_OscConfig+0xc58>)
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	e013      	b.n	8004bf4 <HAL_RCC_OscConfig+0xa74>
 8004bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bd0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bdc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	fa93 f2a3 	rbit	r2, r3
 8004be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bea:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	4b79      	ldr	r3, [pc, #484]	@ (8004dd8 <HAL_RCC_OscConfig+0xc58>)
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bf8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004bfc:	2102      	movs	r1, #2
 8004bfe:	6011      	str	r1, [r2, #0]
 8004c00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c04:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004c08:	6812      	ldr	r2, [r2, #0]
 8004c0a:	fa92 f1a2 	rbit	r1, r2
 8004c0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c12:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004c16:	6011      	str	r1, [r2, #0]
  return result;
 8004c18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c1c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004c20:	6812      	ldr	r2, [r2, #0]
 8004c22:	fab2 f282 	clz	r2, r2
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	f002 021f 	and.w	r2, r2, #31
 8004c32:	2101      	movs	r1, #1
 8004c34:	fa01 f202 	lsl.w	r2, r1, r2
 8004c38:	4013      	ands	r3, r2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d084      	beq.n	8004b48 <HAL_RCC_OscConfig+0x9c8>
 8004c3e:	e07f      	b.n	8004d40 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c40:	f7fe f9bc 	bl	8002fbc <HAL_GetTick>
 8004c44:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c48:	e00b      	b.n	8004c62 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c4a:	f7fe f9b7 	bl	8002fbc <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e2c4      	b.n	80051ec <HAL_RCC_OscConfig+0x106c>
 8004c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c66:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c72:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	fa93 f2a3 	rbit	r2, r3
 8004c7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c80:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c8a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004c8e:	2202      	movs	r2, #2
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c96:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	fa93 f2a3 	rbit	r2, r3
 8004ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ca4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004ca8:	601a      	str	r2, [r3, #0]
  return result;
 8004caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cae:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004cb2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cb4:	fab3 f383 	clz	r3, r3
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	f043 0302 	orr.w	r3, r3, #2
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d102      	bne.n	8004cce <HAL_RCC_OscConfig+0xb4e>
 8004cc8:	4b43      	ldr	r3, [pc, #268]	@ (8004dd8 <HAL_RCC_OscConfig+0xc58>)
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	e013      	b.n	8004cf6 <HAL_RCC_OscConfig+0xb76>
 8004cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cd2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cde:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	fa93 f2a3 	rbit	r2, r3
 8004ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cec:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	4b39      	ldr	r3, [pc, #228]	@ (8004dd8 <HAL_RCC_OscConfig+0xc58>)
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004cfa:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004cfe:	2102      	movs	r1, #2
 8004d00:	6011      	str	r1, [r2, #0]
 8004d02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d06:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004d0a:	6812      	ldr	r2, [r2, #0]
 8004d0c:	fa92 f1a2 	rbit	r1, r2
 8004d10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d14:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004d18:	6011      	str	r1, [r2, #0]
  return result;
 8004d1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d1e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004d22:	6812      	ldr	r2, [r2, #0]
 8004d24:	fab2 f282 	clz	r2, r2
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	f002 021f 	and.w	r2, r2, #31
 8004d34:	2101      	movs	r1, #1
 8004d36:	fa01 f202 	lsl.w	r2, r1, r2
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d184      	bne.n	8004c4a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d40:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d105      	bne.n	8004d54 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d48:	4b23      	ldr	r3, [pc, #140]	@ (8004dd8 <HAL_RCC_OscConfig+0xc58>)
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	4a22      	ldr	r2, [pc, #136]	@ (8004dd8 <HAL_RCC_OscConfig+0xc58>)
 8004d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d52:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8242 	beq.w	80051ea <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d66:	4b1c      	ldr	r3, [pc, #112]	@ (8004dd8 <HAL_RCC_OscConfig+0xc58>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	f000 8213 	beq.w	800519a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	f040 8162 	bne.w	800504a <HAL_RCC_OscConfig+0xeca>
 8004d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d8a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004d8e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d98:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	fa93 f2a3 	rbit	r2, r3
 8004da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004da6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004daa:	601a      	str	r2, [r3, #0]
  return result;
 8004dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004db0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004db4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db6:	fab3 f383 	clz	r3, r3
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004dc0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	2300      	movs	r3, #0
 8004dca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dcc:	f7fe f8f6 	bl	8002fbc <HAL_GetTick>
 8004dd0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dd4:	e00c      	b.n	8004df0 <HAL_RCC_OscConfig+0xc70>
 8004dd6:	bf00      	nop
 8004dd8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ddc:	f7fe f8ee 	bl	8002fbc <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e1fd      	b.n	80051ec <HAL_RCC_OscConfig+0x106c>
 8004df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004df4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004df8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e02:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	fa93 f2a3 	rbit	r2, r3
 8004e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e10:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004e14:	601a      	str	r2, [r3, #0]
  return result;
 8004e16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e1a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004e1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e20:	fab3 f383 	clz	r3, r3
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d102      	bne.n	8004e3a <HAL_RCC_OscConfig+0xcba>
 8004e34:	4bb0      	ldr	r3, [pc, #704]	@ (80050f8 <HAL_RCC_OscConfig+0xf78>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	e027      	b.n	8004e8a <HAL_RCC_OscConfig+0xd0a>
 8004e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e3e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004e42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e4c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	fa93 f2a3 	rbit	r2, r3
 8004e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e5a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e64:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004e68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e72:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	fa93 f2a3 	rbit	r2, r3
 8004e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e80:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	4b9c      	ldr	r3, [pc, #624]	@ (80050f8 <HAL_RCC_OscConfig+0xf78>)
 8004e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e8e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004e92:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004e96:	6011      	str	r1, [r2, #0]
 8004e98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e9c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004ea0:	6812      	ldr	r2, [r2, #0]
 8004ea2:	fa92 f1a2 	rbit	r1, r2
 8004ea6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004eaa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004eae:	6011      	str	r1, [r2, #0]
  return result;
 8004eb0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004eb4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	fab2 f282 	clz	r2, r2
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	f042 0220 	orr.w	r2, r2, #32
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	f002 021f 	and.w	r2, r2, #31
 8004eca:	2101      	movs	r1, #1
 8004ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d182      	bne.n	8004ddc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ed6:	4b88      	ldr	r3, [pc, #544]	@ (80050f8 <HAL_RCC_OscConfig+0xf78>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ee2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	430b      	orrs	r3, r1
 8004ef8:	497f      	ldr	r1, [pc, #508]	@ (80050f8 <HAL_RCC_OscConfig+0xf78>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	604b      	str	r3, [r1, #4]
 8004efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f02:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004f06:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f10:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	fa93 f2a3 	rbit	r2, r3
 8004f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f1e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004f22:	601a      	str	r2, [r3, #0]
  return result;
 8004f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f28:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004f2c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f2e:	fab3 f383 	clz	r3, r3
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004f38:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	461a      	mov	r2, r3
 8004f40:	2301      	movs	r3, #1
 8004f42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f44:	f7fe f83a 	bl	8002fbc <HAL_GetTick>
 8004f48:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f4c:	e009      	b.n	8004f62 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f4e:	f7fe f835 	bl	8002fbc <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e144      	b.n	80051ec <HAL_RCC_OscConfig+0x106c>
 8004f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f66:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004f6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f74:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	fa93 f2a3 	rbit	r2, r3
 8004f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f82:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004f86:	601a      	str	r2, [r3, #0]
  return result;
 8004f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f8c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004f90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f92:	fab3 f383 	clz	r3, r3
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	095b      	lsrs	r3, r3, #5
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	f043 0301 	orr.w	r3, r3, #1
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d102      	bne.n	8004fac <HAL_RCC_OscConfig+0xe2c>
 8004fa6:	4b54      	ldr	r3, [pc, #336]	@ (80050f8 <HAL_RCC_OscConfig+0xf78>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	e027      	b.n	8004ffc <HAL_RCC_OscConfig+0xe7c>
 8004fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fb0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004fb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fbe:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	fa93 f2a3 	rbit	r2, r3
 8004fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fcc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fd6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004fda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fe4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	fa93 f2a3 	rbit	r2, r3
 8004fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ff2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	4b3f      	ldr	r3, [pc, #252]	@ (80050f8 <HAL_RCC_OscConfig+0xf78>)
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005000:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005004:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005008:	6011      	str	r1, [r2, #0]
 800500a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800500e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005012:	6812      	ldr	r2, [r2, #0]
 8005014:	fa92 f1a2 	rbit	r1, r2
 8005018:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800501c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005020:	6011      	str	r1, [r2, #0]
  return result;
 8005022:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005026:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800502a:	6812      	ldr	r2, [r2, #0]
 800502c:	fab2 f282 	clz	r2, r2
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	f042 0220 	orr.w	r2, r2, #32
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	f002 021f 	and.w	r2, r2, #31
 800503c:	2101      	movs	r1, #1
 800503e:	fa01 f202 	lsl.w	r2, r1, r2
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d082      	beq.n	8004f4e <HAL_RCC_OscConfig+0xdce>
 8005048:	e0cf      	b.n	80051ea <HAL_RCC_OscConfig+0x106a>
 800504a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800504e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005052:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005056:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800505c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	fa93 f2a3 	rbit	r2, r3
 8005066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800506a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800506e:	601a      	str	r2, [r3, #0]
  return result;
 8005070:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005074:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005078:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800507a:	fab3 f383 	clz	r3, r3
 800507e:	b2db      	uxtb	r3, r3
 8005080:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005084:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	461a      	mov	r2, r3
 800508c:	2300      	movs	r3, #0
 800508e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005090:	f7fd ff94 	bl	8002fbc <HAL_GetTick>
 8005094:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005098:	e009      	b.n	80050ae <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800509a:	f7fd ff8f 	bl	8002fbc <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e09e      	b.n	80051ec <HAL_RCC_OscConfig+0x106c>
 80050ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050b2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80050b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050c0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	fa93 f2a3 	rbit	r2, r3
 80050ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050ce:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80050d2:	601a      	str	r2, [r3, #0]
  return result;
 80050d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050d8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80050dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050de:	fab3 f383 	clz	r3, r3
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d104      	bne.n	80050fc <HAL_RCC_OscConfig+0xf7c>
 80050f2:	4b01      	ldr	r3, [pc, #4]	@ (80050f8 <HAL_RCC_OscConfig+0xf78>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	e029      	b.n	800514c <HAL_RCC_OscConfig+0xfcc>
 80050f8:	40021000 	.word	0x40021000
 80050fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005100:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005104:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005108:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800510e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	fa93 f2a3 	rbit	r2, r3
 8005118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800511c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005126:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800512a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005134:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	fa93 f2a3 	rbit	r2, r3
 800513e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005142:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	4b2b      	ldr	r3, [pc, #172]	@ (80051f8 <HAL_RCC_OscConfig+0x1078>)
 800514a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005150:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005154:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005158:	6011      	str	r1, [r2, #0]
 800515a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800515e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	fa92 f1a2 	rbit	r1, r2
 8005168:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800516c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005170:	6011      	str	r1, [r2, #0]
  return result;
 8005172:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005176:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	fab2 f282 	clz	r2, r2
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	f042 0220 	orr.w	r2, r2, #32
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	f002 021f 	and.w	r2, r2, #31
 800518c:	2101      	movs	r1, #1
 800518e:	fa01 f202 	lsl.w	r2, r1, r2
 8005192:	4013      	ands	r3, r2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d180      	bne.n	800509a <HAL_RCC_OscConfig+0xf1a>
 8005198:	e027      	b.n	80051ea <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800519a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800519e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e01e      	b.n	80051ec <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051ae:	4b12      	ldr	r3, [pc, #72]	@ (80051f8 <HAL_RCC_OscConfig+0x1078>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80051b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80051ba:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80051be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d10b      	bne.n	80051e6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80051ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80051d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80051d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d001      	beq.n	80051ea <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40021000 	.word	0x40021000

080051fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b09e      	sub	sp, #120	@ 0x78
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e162      	b.n	80054da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005214:	4b90      	ldr	r3, [pc, #576]	@ (8005458 <HAL_RCC_ClockConfig+0x25c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d910      	bls.n	8005244 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005222:	4b8d      	ldr	r3, [pc, #564]	@ (8005458 <HAL_RCC_ClockConfig+0x25c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f023 0207 	bic.w	r2, r3, #7
 800522a:	498b      	ldr	r1, [pc, #556]	@ (8005458 <HAL_RCC_ClockConfig+0x25c>)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	4313      	orrs	r3, r2
 8005230:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005232:	4b89      	ldr	r3, [pc, #548]	@ (8005458 <HAL_RCC_ClockConfig+0x25c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	429a      	cmp	r2, r3
 800523e:	d001      	beq.n	8005244 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e14a      	b.n	80054da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d008      	beq.n	8005262 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005250:	4b82      	ldr	r3, [pc, #520]	@ (800545c <HAL_RCC_ClockConfig+0x260>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	497f      	ldr	r1, [pc, #508]	@ (800545c <HAL_RCC_ClockConfig+0x260>)
 800525e:	4313      	orrs	r3, r2
 8005260:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 80dc 	beq.w	8005428 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d13c      	bne.n	80052f2 <HAL_RCC_ClockConfig+0xf6>
 8005278:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800527c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005280:	fa93 f3a3 	rbit	r3, r3
 8005284:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005286:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005288:	fab3 f383 	clz	r3, r3
 800528c:	b2db      	uxtb	r3, r3
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	b2db      	uxtb	r3, r3
 8005292:	f043 0301 	orr.w	r3, r3, #1
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b01      	cmp	r3, #1
 800529a:	d102      	bne.n	80052a2 <HAL_RCC_ClockConfig+0xa6>
 800529c:	4b6f      	ldr	r3, [pc, #444]	@ (800545c <HAL_RCC_ClockConfig+0x260>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	e00f      	b.n	80052c2 <HAL_RCC_ClockConfig+0xc6>
 80052a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80052a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052aa:	fa93 f3a3 	rbit	r3, r3
 80052ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80052b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80052b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80052b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052b8:	fa93 f3a3 	rbit	r3, r3
 80052bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052be:	4b67      	ldr	r3, [pc, #412]	@ (800545c <HAL_RCC_ClockConfig+0x260>)
 80052c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80052c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80052c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052ca:	fa92 f2a2 	rbit	r2, r2
 80052ce:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80052d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80052d2:	fab2 f282 	clz	r2, r2
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	f042 0220 	orr.w	r2, r2, #32
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	f002 021f 	and.w	r2, r2, #31
 80052e2:	2101      	movs	r1, #1
 80052e4:	fa01 f202 	lsl.w	r2, r1, r2
 80052e8:	4013      	ands	r3, r2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d17b      	bne.n	80053e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e0f3      	b.n	80054da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d13c      	bne.n	8005374 <HAL_RCC_ClockConfig+0x178>
 80052fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052fe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005302:	fa93 f3a3 	rbit	r3, r3
 8005306:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800530a:	fab3 f383 	clz	r3, r3
 800530e:	b2db      	uxtb	r3, r3
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f043 0301 	orr.w	r3, r3, #1
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b01      	cmp	r3, #1
 800531c:	d102      	bne.n	8005324 <HAL_RCC_ClockConfig+0x128>
 800531e:	4b4f      	ldr	r3, [pc, #316]	@ (800545c <HAL_RCC_ClockConfig+0x260>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	e00f      	b.n	8005344 <HAL_RCC_ClockConfig+0x148>
 8005324:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005328:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800532c:	fa93 f3a3 	rbit	r3, r3
 8005330:	647b      	str	r3, [r7, #68]	@ 0x44
 8005332:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005336:	643b      	str	r3, [r7, #64]	@ 0x40
 8005338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800533a:	fa93 f3a3 	rbit	r3, r3
 800533e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005340:	4b46      	ldr	r3, [pc, #280]	@ (800545c <HAL_RCC_ClockConfig+0x260>)
 8005342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005344:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005348:	63ba      	str	r2, [r7, #56]	@ 0x38
 800534a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800534c:	fa92 f2a2 	rbit	r2, r2
 8005350:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8005352:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005354:	fab2 f282 	clz	r2, r2
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	f042 0220 	orr.w	r2, r2, #32
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	f002 021f 	and.w	r2, r2, #31
 8005364:	2101      	movs	r1, #1
 8005366:	fa01 f202 	lsl.w	r2, r1, r2
 800536a:	4013      	ands	r3, r2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d13a      	bne.n	80053e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e0b2      	b.n	80054da <HAL_RCC_ClockConfig+0x2de>
 8005374:	2302      	movs	r3, #2
 8005376:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537a:	fa93 f3a3 	rbit	r3, r3
 800537e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005382:	fab3 f383 	clz	r3, r3
 8005386:	b2db      	uxtb	r3, r3
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	b2db      	uxtb	r3, r3
 800538c:	f043 0301 	orr.w	r3, r3, #1
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b01      	cmp	r3, #1
 8005394:	d102      	bne.n	800539c <HAL_RCC_ClockConfig+0x1a0>
 8005396:	4b31      	ldr	r3, [pc, #196]	@ (800545c <HAL_RCC_ClockConfig+0x260>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	e00d      	b.n	80053b8 <HAL_RCC_ClockConfig+0x1bc>
 800539c:	2302      	movs	r3, #2
 800539e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a2:	fa93 f3a3 	rbit	r3, r3
 80053a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80053a8:	2302      	movs	r3, #2
 80053aa:	623b      	str	r3, [r7, #32]
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	fa93 f3a3 	rbit	r3, r3
 80053b2:	61fb      	str	r3, [r7, #28]
 80053b4:	4b29      	ldr	r3, [pc, #164]	@ (800545c <HAL_RCC_ClockConfig+0x260>)
 80053b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b8:	2202      	movs	r2, #2
 80053ba:	61ba      	str	r2, [r7, #24]
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	fa92 f2a2 	rbit	r2, r2
 80053c2:	617a      	str	r2, [r7, #20]
  return result;
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	fab2 f282 	clz	r2, r2
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	f042 0220 	orr.w	r2, r2, #32
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	f002 021f 	and.w	r2, r2, #31
 80053d6:	2101      	movs	r1, #1
 80053d8:	fa01 f202 	lsl.w	r2, r1, r2
 80053dc:	4013      	ands	r3, r2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e079      	b.n	80054da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053e6:	4b1d      	ldr	r3, [pc, #116]	@ (800545c <HAL_RCC_ClockConfig+0x260>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f023 0203 	bic.w	r2, r3, #3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	491a      	ldr	r1, [pc, #104]	@ (800545c <HAL_RCC_ClockConfig+0x260>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053f8:	f7fd fde0 	bl	8002fbc <HAL_GetTick>
 80053fc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fe:	e00a      	b.n	8005416 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005400:	f7fd fddc 	bl	8002fbc <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800540e:	4293      	cmp	r3, r2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e061      	b.n	80054da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005416:	4b11      	ldr	r3, [pc, #68]	@ (800545c <HAL_RCC_ClockConfig+0x260>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f003 020c 	and.w	r2, r3, #12
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	429a      	cmp	r2, r3
 8005426:	d1eb      	bne.n	8005400 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005428:	4b0b      	ldr	r3, [pc, #44]	@ (8005458 <HAL_RCC_ClockConfig+0x25c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d214      	bcs.n	8005460 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005436:	4b08      	ldr	r3, [pc, #32]	@ (8005458 <HAL_RCC_ClockConfig+0x25c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f023 0207 	bic.w	r2, r3, #7
 800543e:	4906      	ldr	r1, [pc, #24]	@ (8005458 <HAL_RCC_ClockConfig+0x25c>)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	4313      	orrs	r3, r2
 8005444:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005446:	4b04      	ldr	r3, [pc, #16]	@ (8005458 <HAL_RCC_ClockConfig+0x25c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d005      	beq.n	8005460 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e040      	b.n	80054da <HAL_RCC_ClockConfig+0x2de>
 8005458:	40022000 	.word	0x40022000
 800545c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d008      	beq.n	800547e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800546c:	4b1d      	ldr	r3, [pc, #116]	@ (80054e4 <HAL_RCC_ClockConfig+0x2e8>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	491a      	ldr	r1, [pc, #104]	@ (80054e4 <HAL_RCC_ClockConfig+0x2e8>)
 800547a:	4313      	orrs	r3, r2
 800547c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	2b00      	cmp	r3, #0
 8005488:	d009      	beq.n	800549e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800548a:	4b16      	ldr	r3, [pc, #88]	@ (80054e4 <HAL_RCC_ClockConfig+0x2e8>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	4912      	ldr	r1, [pc, #72]	@ (80054e4 <HAL_RCC_ClockConfig+0x2e8>)
 800549a:	4313      	orrs	r3, r2
 800549c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800549e:	f000 f829 	bl	80054f4 <HAL_RCC_GetSysClockFreq>
 80054a2:	4601      	mov	r1, r0
 80054a4:	4b0f      	ldr	r3, [pc, #60]	@ (80054e4 <HAL_RCC_ClockConfig+0x2e8>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054ac:	22f0      	movs	r2, #240	@ 0xf0
 80054ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	fa92 f2a2 	rbit	r2, r2
 80054b6:	60fa      	str	r2, [r7, #12]
  return result;
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	fab2 f282 	clz	r2, r2
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	40d3      	lsrs	r3, r2
 80054c2:	4a09      	ldr	r2, [pc, #36]	@ (80054e8 <HAL_RCC_ClockConfig+0x2ec>)
 80054c4:	5cd3      	ldrb	r3, [r2, r3]
 80054c6:	fa21 f303 	lsr.w	r3, r1, r3
 80054ca:	4a08      	ldr	r2, [pc, #32]	@ (80054ec <HAL_RCC_ClockConfig+0x2f0>)
 80054cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80054ce:	4b08      	ldr	r3, [pc, #32]	@ (80054f0 <HAL_RCC_ClockConfig+0x2f4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fd fd2e 	bl	8002f34 <HAL_InitTick>
  
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3778      	adds	r7, #120	@ 0x78
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40021000 	.word	0x40021000
 80054e8:	0800d16c 	.word	0x0800d16c
 80054ec:	20000018 	.word	0x20000018
 80054f0:	2000001c 	.word	0x2000001c

080054f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b08b      	sub	sp, #44	@ 0x2c
 80054f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	61fb      	str	r3, [r7, #28]
 80054fe:	2300      	movs	r3, #0
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	2300      	movs	r3, #0
 8005504:	627b      	str	r3, [r7, #36]	@ 0x24
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800550e:	4b29      	ldr	r3, [pc, #164]	@ (80055b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	f003 030c 	and.w	r3, r3, #12
 800551a:	2b04      	cmp	r3, #4
 800551c:	d002      	beq.n	8005524 <HAL_RCC_GetSysClockFreq+0x30>
 800551e:	2b08      	cmp	r3, #8
 8005520:	d003      	beq.n	800552a <HAL_RCC_GetSysClockFreq+0x36>
 8005522:	e03c      	b.n	800559e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005524:	4b24      	ldr	r3, [pc, #144]	@ (80055b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005526:	623b      	str	r3, [r7, #32]
      break;
 8005528:	e03c      	b.n	80055a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8005530:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8005534:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	fa92 f2a2 	rbit	r2, r2
 800553c:	607a      	str	r2, [r7, #4]
  return result;
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	fab2 f282 	clz	r2, r2
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	40d3      	lsrs	r3, r2
 8005548:	4a1c      	ldr	r2, [pc, #112]	@ (80055bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800554a:	5cd3      	ldrb	r3, [r2, r3]
 800554c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800554e:	4b19      	ldr	r3, [pc, #100]	@ (80055b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	220f      	movs	r2, #15
 8005558:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	fa92 f2a2 	rbit	r2, r2
 8005560:	60fa      	str	r2, [r7, #12]
  return result;
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	fab2 f282 	clz	r2, r2
 8005568:	b2d2      	uxtb	r2, r2
 800556a:	40d3      	lsrs	r3, r2
 800556c:	4a14      	ldr	r2, [pc, #80]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800556e:	5cd3      	ldrb	r3, [r2, r3]
 8005570:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d008      	beq.n	800558e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800557c:	4a0e      	ldr	r2, [pc, #56]	@ (80055b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	fbb2 f2f3 	udiv	r2, r2, r3
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	fb02 f303 	mul.w	r3, r2, r3
 800558a:	627b      	str	r3, [r7, #36]	@ 0x24
 800558c:	e004      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	4a0c      	ldr	r2, [pc, #48]	@ (80055c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005592:	fb02 f303 	mul.w	r3, r2, r3
 8005596:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	623b      	str	r3, [r7, #32]
      break;
 800559c:	e002      	b.n	80055a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800559e:	4b0a      	ldr	r3, [pc, #40]	@ (80055c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80055a0:	623b      	str	r3, [r7, #32]
      break;
 80055a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055a4:	6a3b      	ldr	r3, [r7, #32]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	372c      	adds	r7, #44	@ 0x2c
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40021000 	.word	0x40021000
 80055b8:	00b71b00 	.word	0x00b71b00
 80055bc:	0800d184 	.word	0x0800d184
 80055c0:	0800d194 	.word	0x0800d194
 80055c4:	003d0900 	.word	0x003d0900
 80055c8:	007a1200 	.word	0x007a1200

080055cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055d0:	4b03      	ldr	r3, [pc, #12]	@ (80055e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055d2:	681b      	ldr	r3, [r3, #0]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	20000018 	.word	0x20000018

080055e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80055ea:	f7ff ffef 	bl	80055cc <HAL_RCC_GetHCLKFreq>
 80055ee:	4601      	mov	r1, r0
 80055f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005620 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055f8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80055fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	fa92 f2a2 	rbit	r2, r2
 8005604:	603a      	str	r2, [r7, #0]
  return result;
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	fab2 f282 	clz	r2, r2
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	40d3      	lsrs	r3, r2
 8005610:	4a04      	ldr	r2, [pc, #16]	@ (8005624 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005612:	5cd3      	ldrb	r3, [r2, r3]
 8005614:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005618:	4618      	mov	r0, r3
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40021000 	.word	0x40021000
 8005624:	0800d17c 	.word	0x0800d17c

08005628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800562e:	f7ff ffcd 	bl	80055cc <HAL_RCC_GetHCLKFreq>
 8005632:	4601      	mov	r1, r0
 8005634:	4b0b      	ldr	r3, [pc, #44]	@ (8005664 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800563c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005640:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	fa92 f2a2 	rbit	r2, r2
 8005648:	603a      	str	r2, [r7, #0]
  return result;
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	fab2 f282 	clz	r2, r2
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	40d3      	lsrs	r3, r2
 8005654:	4a04      	ldr	r2, [pc, #16]	@ (8005668 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005656:	5cd3      	ldrb	r3, [r2, r3]
 8005658:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40021000 	.word	0x40021000
 8005668:	0800d17c 	.word	0x0800d17c

0800566c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b092      	sub	sp, #72	@ 0x48
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800567c:	2300      	movs	r3, #0
 800567e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 80d4 	beq.w	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005690:	4b4e      	ldr	r3, [pc, #312]	@ (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10e      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800569c:	4b4b      	ldr	r3, [pc, #300]	@ (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	4a4a      	ldr	r2, [pc, #296]	@ (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056a6:	61d3      	str	r3, [r2, #28]
 80056a8:	4b48      	ldr	r3, [pc, #288]	@ (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ba:	4b45      	ldr	r3, [pc, #276]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d118      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056c6:	4b42      	ldr	r3, [pc, #264]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a41      	ldr	r2, [pc, #260]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056d2:	f7fd fc73 	bl	8002fbc <HAL_GetTick>
 80056d6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d8:	e008      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056da:	f7fd fc6f 	bl	8002fbc <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b64      	cmp	r3, #100	@ 0x64
 80056e6:	d901      	bls.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e12d      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ec:	4b38      	ldr	r3, [pc, #224]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0f0      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056f8:	4b34      	ldr	r3, [pc, #208]	@ (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005700:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 8084 	beq.w	8005812 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005712:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005714:	429a      	cmp	r2, r3
 8005716:	d07c      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005718:	4b2c      	ldr	r3, [pc, #176]	@ (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005720:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005722:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005726:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572a:	fa93 f3a3 	rbit	r3, r3
 800572e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005732:	fab3 f383 	clz	r3, r3
 8005736:	b2db      	uxtb	r3, r3
 8005738:	461a      	mov	r2, r3
 800573a:	4b26      	ldr	r3, [pc, #152]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800573c:	4413      	add	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	461a      	mov	r2, r3
 8005742:	2301      	movs	r3, #1
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800574a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574e:	fa93 f3a3 	rbit	r3, r3
 8005752:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005756:	fab3 f383 	clz	r3, r3
 800575a:	b2db      	uxtb	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	4b1d      	ldr	r3, [pc, #116]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005760:	4413      	add	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	461a      	mov	r2, r3
 8005766:	2300      	movs	r3, #0
 8005768:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800576a:	4a18      	ldr	r2, [pc, #96]	@ (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800576c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800576e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d04b      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577a:	f7fd fc1f 	bl	8002fbc <HAL_GetTick>
 800577e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005780:	e00a      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005782:	f7fd fc1b 	bl	8002fbc <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005790:	4293      	cmp	r3, r2
 8005792:	d901      	bls.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e0d7      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8005798:	2302      	movs	r3, #2
 800579a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579e:	fa93 f3a3 	rbit	r3, r3
 80057a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80057a4:	2302      	movs	r3, #2
 80057a6:	623b      	str	r3, [r7, #32]
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	fa93 f3a3 	rbit	r3, r3
 80057ae:	61fb      	str	r3, [r7, #28]
  return result;
 80057b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057b2:	fab3 f383 	clz	r3, r3
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	095b      	lsrs	r3, r3, #5
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f043 0302 	orr.w	r3, r3, #2
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d108      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80057c6:	4b01      	ldr	r3, [pc, #4]	@ (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	e00d      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80057cc:	40021000 	.word	0x40021000
 80057d0:	40007000 	.word	0x40007000
 80057d4:	10908100 	.word	0x10908100
 80057d8:	2302      	movs	r3, #2
 80057da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	fa93 f3a3 	rbit	r3, r3
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	4b5a      	ldr	r3, [pc, #360]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80057e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e8:	2202      	movs	r2, #2
 80057ea:	613a      	str	r2, [r7, #16]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	fa92 f2a2 	rbit	r2, r2
 80057f2:	60fa      	str	r2, [r7, #12]
  return result;
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	fab2 f282 	clz	r2, r2
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	f002 021f 	and.w	r2, r2, #31
 8005806:	2101      	movs	r1, #1
 8005808:	fa01 f202 	lsl.w	r2, r1, r2
 800580c:	4013      	ands	r3, r2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0b7      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005812:	4b4f      	ldr	r3, [pc, #316]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	494c      	ldr	r1, [pc, #304]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005820:	4313      	orrs	r3, r2
 8005822:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005824:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005828:	2b01      	cmp	r3, #1
 800582a:	d105      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800582c:	4b48      	ldr	r3, [pc, #288]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	4a47      	ldr	r2, [pc, #284]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005832:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005836:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005844:	4b42      	ldr	r3, [pc, #264]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005848:	f023 0203 	bic.w	r2, r3, #3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	493f      	ldr	r1, [pc, #252]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005852:	4313      	orrs	r3, r2
 8005854:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d008      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005862:	4b3b      	ldr	r3, [pc, #236]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005866:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	4938      	ldr	r1, [pc, #224]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005870:	4313      	orrs	r3, r2
 8005872:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d008      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005880:	4b33      	ldr	r3, [pc, #204]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005884:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	4930      	ldr	r1, [pc, #192]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800588e:	4313      	orrs	r3, r2
 8005890:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0320 	and.w	r3, r3, #32
 800589a:	2b00      	cmp	r3, #0
 800589c:	d008      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800589e:	4b2c      	ldr	r3, [pc, #176]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80058a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a2:	f023 0210 	bic.w	r2, r3, #16
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	4929      	ldr	r1, [pc, #164]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80058bc:	4b24      	ldr	r3, [pc, #144]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c8:	4921      	ldr	r1, [pc, #132]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d008      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058da:	4b1d      	ldr	r3, [pc, #116]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80058dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058de:	f023 0220 	bic.w	r2, r3, #32
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	491a      	ldr	r1, [pc, #104]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d008      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80058f8:	4b15      	ldr	r3, [pc, #84]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	4912      	ldr	r1, [pc, #72]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005906:	4313      	orrs	r3, r2
 8005908:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005912:	2b00      	cmp	r3, #0
 8005914:	d008      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8005916:	4b0e      	ldr	r3, [pc, #56]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	490b      	ldr	r1, [pc, #44]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005924:	4313      	orrs	r3, r2
 8005926:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005930:	2b00      	cmp	r3, #0
 8005932:	d008      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005934:	4b06      	ldr	r3, [pc, #24]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005938:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005940:	4903      	ldr	r1, [pc, #12]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005942:	4313      	orrs	r3, r2
 8005944:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3748      	adds	r7, #72	@ 0x48
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40021000 	.word	0x40021000

08005954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e041      	b.n	80059ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fc ffaa 	bl	80028d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	4619      	mov	r1, r3
 8005992:	4610      	mov	r0, r2
 8005994:	f000 fc4a 	bl	800622c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
	...

080059f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d001      	beq.n	8005a0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e041      	b.n	8005a90 <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a1c:	d01d      	beq.n	8005a5a <HAL_TIM_Base_Start+0x66>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a1e      	ldr	r2, [pc, #120]	@ (8005a9c <HAL_TIM_Base_Start+0xa8>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d018      	beq.n	8005a5a <HAL_TIM_Base_Start+0x66>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005aa0 <HAL_TIM_Base_Start+0xac>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d013      	beq.n	8005a5a <HAL_TIM_Base_Start+0x66>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a1b      	ldr	r2, [pc, #108]	@ (8005aa4 <HAL_TIM_Base_Start+0xb0>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d00e      	beq.n	8005a5a <HAL_TIM_Base_Start+0x66>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a19      	ldr	r2, [pc, #100]	@ (8005aa8 <HAL_TIM_Base_Start+0xb4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d009      	beq.n	8005a5a <HAL_TIM_Base_Start+0x66>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a18      	ldr	r2, [pc, #96]	@ (8005aac <HAL_TIM_Base_Start+0xb8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d004      	beq.n	8005a5a <HAL_TIM_Base_Start+0x66>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a16      	ldr	r2, [pc, #88]	@ (8005ab0 <HAL_TIM_Base_Start+0xbc>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d111      	bne.n	8005a7e <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b06      	cmp	r3, #6
 8005a6a:	d010      	beq.n	8005a8e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7c:	e007      	b.n	8005a8e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0201 	orr.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	40000400 	.word	0x40000400
 8005aa0:	40000800 	.word	0x40000800
 8005aa4:	40000c00 	.word	0x40000c00
 8005aa8:	40001800 	.word	0x40001800
 8005aac:	40014000 	.word	0x40014000
 8005ab0:	40015c00 	.word	0x40015c00

08005ab4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6a1a      	ldr	r2, [r3, #32]
 8005ac2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10f      	bne.n	8005aec <HAL_TIM_Base_Stop+0x38>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6a1a      	ldr	r2, [r3, #32]
 8005ad2:	f240 4344 	movw	r3, #1092	@ 0x444
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d107      	bne.n	8005aec <HAL_TIM_Base_Stop+0x38>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0201 	bic.w	r2, r2, #1
 8005aea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d001      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e049      	b.n	8005bb0 <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0201 	orr.w	r2, r2, #1
 8005b32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b3c:	d01d      	beq.n	8005b7a <HAL_TIM_Base_Start_IT+0x76>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a1e      	ldr	r2, [pc, #120]	@ (8005bbc <HAL_TIM_Base_Start_IT+0xb8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d018      	beq.n	8005b7a <HAL_TIM_Base_Start_IT+0x76>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <HAL_TIM_Base_Start_IT+0x76>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc4 <HAL_TIM_Base_Start_IT+0xc0>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00e      	beq.n	8005b7a <HAL_TIM_Base_Start_IT+0x76>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a19      	ldr	r2, [pc, #100]	@ (8005bc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d009      	beq.n	8005b7a <HAL_TIM_Base_Start_IT+0x76>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a18      	ldr	r2, [pc, #96]	@ (8005bcc <HAL_TIM_Base_Start_IT+0xc8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d004      	beq.n	8005b7a <HAL_TIM_Base_Start_IT+0x76>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a16      	ldr	r2, [pc, #88]	@ (8005bd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d111      	bne.n	8005b9e <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b06      	cmp	r3, #6
 8005b8a:	d010      	beq.n	8005bae <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0201 	orr.w	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b9c:	e007      	b.n	8005bae <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f042 0201 	orr.w	r2, r2, #1
 8005bac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	40000400 	.word	0x40000400
 8005bc0:	40000800 	.word	0x40000800
 8005bc4:	40000c00 	.word	0x40000c00
 8005bc8:	40001800 	.word	0x40001800
 8005bcc:	40014000 	.word	0x40014000
 8005bd0:	40015c00 	.word	0x40015c00

08005bd4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e097      	b.n	8005d18 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d106      	bne.n	8005c02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7fc fea9 	bl	8002954 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2202      	movs	r2, #2
 8005c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	6812      	ldr	r2, [r2, #0]
 8005c14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c18:	f023 0307 	bic.w	r3, r3, #7
 8005c1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	3304      	adds	r3, #4
 8005c26:	4619      	mov	r1, r3
 8005c28:	4610      	mov	r0, r2
 8005c2a:	f000 faff 	bl	800622c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c56:	f023 0303 	bic.w	r3, r3, #3
 8005c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	4313      	orrs	r3, r2
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005c74:	f023 030c 	bic.w	r3, r3, #12
 8005c78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	021b      	lsls	r3, r3, #8
 8005c90:	4313      	orrs	r3, r2
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	011a      	lsls	r2, r3, #4
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	031b      	lsls	r3, r3, #12
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005cb2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005cba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d110      	bne.n	8005d72 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d102      	bne.n	8005d5c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d56:	7b7b      	ldrb	r3, [r7, #13]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d001      	beq.n	8005d60 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e069      	b.n	8005e34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d70:	e031      	b.n	8005dd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2b04      	cmp	r3, #4
 8005d76:	d110      	bne.n	8005d9a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d78:	7bbb      	ldrb	r3, [r7, #14]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d102      	bne.n	8005d84 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d7e:	7b3b      	ldrb	r3, [r7, #12]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d001      	beq.n	8005d88 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e055      	b.n	8005e34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d98:	e01d      	b.n	8005dd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d108      	bne.n	8005db2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005da0:	7bbb      	ldrb	r3, [r7, #14]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d105      	bne.n	8005db2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005da6:	7b7b      	ldrb	r3, [r7, #13]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d102      	bne.n	8005db2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dac:	7b3b      	ldrb	r3, [r7, #12]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d001      	beq.n	8005db6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e03e      	b.n	8005e34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2202      	movs	r2, #2
 8005dba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2202      	movs	r2, #2
 8005dca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <HAL_TIM_Encoder_Start+0xc4>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d008      	beq.n	8005df4 <HAL_TIM_Encoder_Start+0xd4>
 8005de2:	e00f      	b.n	8005e04 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2201      	movs	r2, #1
 8005dea:	2100      	movs	r1, #0
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 fb51 	bl	8006494 <TIM_CCxChannelCmd>
      break;
 8005df2:	e016      	b.n	8005e22 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	2104      	movs	r1, #4
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 fb49 	bl	8006494 <TIM_CCxChannelCmd>
      break;
 8005e02:	e00e      	b.n	8005e22 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 fb41 	bl	8006494 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2201      	movs	r2, #1
 8005e18:	2104      	movs	r1, #4
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fb3a 	bl	8006494 <TIM_CCxChannelCmd>
      break;
 8005e20:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f042 0201 	orr.w	r2, r2, #1
 8005e30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d122      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d11b      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0202 	mvn.w	r2, #2
 8005e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f9b5 	bl	80061ee <HAL_TIM_IC_CaptureCallback>
 8005e84:	e005      	b.n	8005e92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f9a7 	bl	80061da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f9b8 	bl	8006202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d122      	bne.n	8005eec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f003 0304 	and.w	r3, r3, #4
 8005eb0:	2b04      	cmp	r3, #4
 8005eb2:	d11b      	bne.n	8005eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0204 	mvn.w	r2, #4
 8005ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f98b 	bl	80061ee <HAL_TIM_IC_CaptureCallback>
 8005ed8:	e005      	b.n	8005ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f97d 	bl	80061da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f98e 	bl	8006202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0308 	and.w	r3, r3, #8
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d122      	bne.n	8005f40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f003 0308 	and.w	r3, r3, #8
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d11b      	bne.n	8005f40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0208 	mvn.w	r2, #8
 8005f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2204      	movs	r2, #4
 8005f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f961 	bl	80061ee <HAL_TIM_IC_CaptureCallback>
 8005f2c:	e005      	b.n	8005f3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f953 	bl	80061da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f964 	bl	8006202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f003 0310 	and.w	r3, r3, #16
 8005f4a:	2b10      	cmp	r3, #16
 8005f4c:	d122      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b10      	cmp	r3, #16
 8005f5a:	d11b      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f06f 0210 	mvn.w	r2, #16
 8005f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2208      	movs	r2, #8
 8005f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f937 	bl	80061ee <HAL_TIM_IC_CaptureCallback>
 8005f80:	e005      	b.n	8005f8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f929 	bl	80061da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f93a 	bl	8006202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d10e      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d107      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f06f 0201 	mvn.w	r2, #1
 8005fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7fc f9e8 	bl	8002390 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fca:	2b80      	cmp	r3, #128	@ 0x80
 8005fcc:	d10e      	bne.n	8005fec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd8:	2b80      	cmp	r3, #128	@ 0x80
 8005fda:	d107      	bne.n	8005fec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 faf8 	bl	80065dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff6:	2b40      	cmp	r3, #64	@ 0x40
 8005ff8:	d10e      	bne.n	8006018 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006004:	2b40      	cmp	r3, #64	@ 0x40
 8006006:	d107      	bne.n	8006018 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f8ff 	bl	8006216 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b20      	cmp	r3, #32
 8006024:	d10e      	bne.n	8006044 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b20      	cmp	r3, #32
 8006032:	d107      	bne.n	8006044 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f06f 0220 	mvn.w	r2, #32
 800603c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fac2 	bl	80065c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006044:	bf00      	nop
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_TIM_ConfigClockSource+0x1c>
 8006064:	2302      	movs	r3, #2
 8006066:	e0b4      	b.n	80061d2 <HAL_TIM_ConfigClockSource+0x186>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800608e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060a0:	d03e      	beq.n	8006120 <HAL_TIM_ConfigClockSource+0xd4>
 80060a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060a6:	f200 8087 	bhi.w	80061b8 <HAL_TIM_ConfigClockSource+0x16c>
 80060aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ae:	f000 8086 	beq.w	80061be <HAL_TIM_ConfigClockSource+0x172>
 80060b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060b6:	d87f      	bhi.n	80061b8 <HAL_TIM_ConfigClockSource+0x16c>
 80060b8:	2b70      	cmp	r3, #112	@ 0x70
 80060ba:	d01a      	beq.n	80060f2 <HAL_TIM_ConfigClockSource+0xa6>
 80060bc:	2b70      	cmp	r3, #112	@ 0x70
 80060be:	d87b      	bhi.n	80061b8 <HAL_TIM_ConfigClockSource+0x16c>
 80060c0:	2b60      	cmp	r3, #96	@ 0x60
 80060c2:	d050      	beq.n	8006166 <HAL_TIM_ConfigClockSource+0x11a>
 80060c4:	2b60      	cmp	r3, #96	@ 0x60
 80060c6:	d877      	bhi.n	80061b8 <HAL_TIM_ConfigClockSource+0x16c>
 80060c8:	2b50      	cmp	r3, #80	@ 0x50
 80060ca:	d03c      	beq.n	8006146 <HAL_TIM_ConfigClockSource+0xfa>
 80060cc:	2b50      	cmp	r3, #80	@ 0x50
 80060ce:	d873      	bhi.n	80061b8 <HAL_TIM_ConfigClockSource+0x16c>
 80060d0:	2b40      	cmp	r3, #64	@ 0x40
 80060d2:	d058      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x13a>
 80060d4:	2b40      	cmp	r3, #64	@ 0x40
 80060d6:	d86f      	bhi.n	80061b8 <HAL_TIM_ConfigClockSource+0x16c>
 80060d8:	2b30      	cmp	r3, #48	@ 0x30
 80060da:	d064      	beq.n	80061a6 <HAL_TIM_ConfigClockSource+0x15a>
 80060dc:	2b30      	cmp	r3, #48	@ 0x30
 80060de:	d86b      	bhi.n	80061b8 <HAL_TIM_ConfigClockSource+0x16c>
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	d060      	beq.n	80061a6 <HAL_TIM_ConfigClockSource+0x15a>
 80060e4:	2b20      	cmp	r3, #32
 80060e6:	d867      	bhi.n	80061b8 <HAL_TIM_ConfigClockSource+0x16c>
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d05c      	beq.n	80061a6 <HAL_TIM_ConfigClockSource+0x15a>
 80060ec:	2b10      	cmp	r3, #16
 80060ee:	d05a      	beq.n	80061a6 <HAL_TIM_ConfigClockSource+0x15a>
 80060f0:	e062      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006102:	f000 f9a7 	bl	8006454 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006114:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	609a      	str	r2, [r3, #8]
      break;
 800611e:	e04f      	b.n	80061c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006130:	f000 f990 	bl	8006454 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006142:	609a      	str	r2, [r3, #8]
      break;
 8006144:	e03c      	b.n	80061c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006152:	461a      	mov	r2, r3
 8006154:	f000 f904 	bl	8006360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2150      	movs	r1, #80	@ 0x50
 800615e:	4618      	mov	r0, r3
 8006160:	f000 f95d 	bl	800641e <TIM_ITRx_SetConfig>
      break;
 8006164:	e02c      	b.n	80061c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006172:	461a      	mov	r2, r3
 8006174:	f000 f923 	bl	80063be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2160      	movs	r1, #96	@ 0x60
 800617e:	4618      	mov	r0, r3
 8006180:	f000 f94d 	bl	800641e <TIM_ITRx_SetConfig>
      break;
 8006184:	e01c      	b.n	80061c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006192:	461a      	mov	r2, r3
 8006194:	f000 f8e4 	bl	8006360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2140      	movs	r1, #64	@ 0x40
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 f93d 	bl	800641e <TIM_ITRx_SetConfig>
      break;
 80061a4:	e00c      	b.n	80061c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4619      	mov	r1, r3
 80061b0:	4610      	mov	r0, r2
 80061b2:	f000 f934 	bl	800641e <TIM_ITRx_SetConfig>
      break;
 80061b6:	e003      	b.n	80061c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	73fb      	strb	r3, [r7, #15]
      break;
 80061bc:	e000      	b.n	80061c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006202:	b480      	push	{r7}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800620a:	bf00      	nop
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800621e:	bf00      	nop
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
	...

0800622c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006242:	d00f      	beq.n	8006264 <TIM_Base_SetConfig+0x38>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a3c      	ldr	r2, [pc, #240]	@ (8006338 <TIM_Base_SetConfig+0x10c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d00b      	beq.n	8006264 <TIM_Base_SetConfig+0x38>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a3b      	ldr	r2, [pc, #236]	@ (800633c <TIM_Base_SetConfig+0x110>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d007      	beq.n	8006264 <TIM_Base_SetConfig+0x38>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a3a      	ldr	r2, [pc, #232]	@ (8006340 <TIM_Base_SetConfig+0x114>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d003      	beq.n	8006264 <TIM_Base_SetConfig+0x38>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a39      	ldr	r2, [pc, #228]	@ (8006344 <TIM_Base_SetConfig+0x118>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d108      	bne.n	8006276 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800627c:	d027      	beq.n	80062ce <TIM_Base_SetConfig+0xa2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a2d      	ldr	r2, [pc, #180]	@ (8006338 <TIM_Base_SetConfig+0x10c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d023      	beq.n	80062ce <TIM_Base_SetConfig+0xa2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a2c      	ldr	r2, [pc, #176]	@ (800633c <TIM_Base_SetConfig+0x110>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d01f      	beq.n	80062ce <TIM_Base_SetConfig+0xa2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a2b      	ldr	r2, [pc, #172]	@ (8006340 <TIM_Base_SetConfig+0x114>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d01b      	beq.n	80062ce <TIM_Base_SetConfig+0xa2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a2b      	ldr	r2, [pc, #172]	@ (8006348 <TIM_Base_SetConfig+0x11c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d017      	beq.n	80062ce <TIM_Base_SetConfig+0xa2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a2a      	ldr	r2, [pc, #168]	@ (800634c <TIM_Base_SetConfig+0x120>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <TIM_Base_SetConfig+0xa2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a29      	ldr	r2, [pc, #164]	@ (8006350 <TIM_Base_SetConfig+0x124>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00f      	beq.n	80062ce <TIM_Base_SetConfig+0xa2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a28      	ldr	r2, [pc, #160]	@ (8006354 <TIM_Base_SetConfig+0x128>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00b      	beq.n	80062ce <TIM_Base_SetConfig+0xa2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a27      	ldr	r2, [pc, #156]	@ (8006358 <TIM_Base_SetConfig+0x12c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d007      	beq.n	80062ce <TIM_Base_SetConfig+0xa2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a26      	ldr	r2, [pc, #152]	@ (800635c <TIM_Base_SetConfig+0x130>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d003      	beq.n	80062ce <TIM_Base_SetConfig+0xa2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a1e      	ldr	r2, [pc, #120]	@ (8006344 <TIM_Base_SetConfig+0x118>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d108      	bne.n	80062e0 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	4313      	orrs	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a13      	ldr	r2, [pc, #76]	@ (8006354 <TIM_Base_SetConfig+0x128>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d007      	beq.n	800631c <TIM_Base_SetConfig+0xf0>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a12      	ldr	r2, [pc, #72]	@ (8006358 <TIM_Base_SetConfig+0x12c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d003      	beq.n	800631c <TIM_Base_SetConfig+0xf0>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a11      	ldr	r2, [pc, #68]	@ (800635c <TIM_Base_SetConfig+0x130>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d103      	bne.n	8006324 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	691a      	ldr	r2, [r3, #16]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	615a      	str	r2, [r3, #20]
}
 800632a:	bf00      	nop
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	40000400 	.word	0x40000400
 800633c:	40000800 	.word	0x40000800
 8006340:	40000c00 	.word	0x40000c00
 8006344:	40015c00 	.word	0x40015c00
 8006348:	40001800 	.word	0x40001800
 800634c:	40001c00 	.word	0x40001c00
 8006350:	40002000 	.word	0x40002000
 8006354:	40014000 	.word	0x40014000
 8006358:	40014400 	.word	0x40014400
 800635c:	40014800 	.word	0x40014800

08006360 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	f023 0201 	bic.w	r2, r3, #1
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800638a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	4313      	orrs	r3, r2
 8006394:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f023 030a 	bic.w	r3, r3, #10
 800639c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	621a      	str	r2, [r3, #32]
}
 80063b2:	bf00      	nop
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063be:	b480      	push	{r7}
 80063c0:	b087      	sub	sp, #28
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	60f8      	str	r0, [r7, #12]
 80063c6:	60b9      	str	r1, [r7, #8]
 80063c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	f023 0210 	bic.w	r2, r3, #16
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	031b      	lsls	r3, r3, #12
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	011b      	lsls	r3, r3, #4
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4313      	orrs	r3, r2
 8006404:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	621a      	str	r2, [r3, #32]
}
 8006412:	bf00      	nop
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800641e:	b480      	push	{r7}
 8006420:	b085      	sub	sp, #20
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006434:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	f043 0307 	orr.w	r3, r3, #7
 8006440:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	609a      	str	r2, [r3, #8]
}
 8006448:	bf00      	nop
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
 8006460:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800646e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	021a      	lsls	r2, r3, #8
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	431a      	orrs	r2, r3
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4313      	orrs	r3, r2
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	4313      	orrs	r3, r2
 8006480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	609a      	str	r2, [r3, #8]
}
 8006488:	bf00      	nop
 800648a:	371c      	adds	r7, #28
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	2201      	movs	r2, #1
 80064a8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6a1a      	ldr	r2, [r3, #32]
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	43db      	mvns	r3, r3
 80064b6:	401a      	ands	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6a1a      	ldr	r2, [r3, #32]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f003 031f 	and.w	r3, r3, #31
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	fa01 f303 	lsl.w	r3, r1, r3
 80064cc:	431a      	orrs	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	621a      	str	r2, [r3, #32]
}
 80064d2:	bf00      	nop
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
	...

080064e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d101      	bne.n	80064f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064f4:	2302      	movs	r3, #2
 80064f6:	e055      	b.n	80065a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800651e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800653a:	d01d      	beq.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a1b      	ldr	r2, [pc, #108]	@ (80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d018      	beq.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a1a      	ldr	r2, [pc, #104]	@ (80065b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d013      	beq.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a18      	ldr	r2, [pc, #96]	@ (80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00e      	beq.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a17      	ldr	r2, [pc, #92]	@ (80065bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d009      	beq.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a15      	ldr	r2, [pc, #84]	@ (80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d004      	beq.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a14      	ldr	r2, [pc, #80]	@ (80065c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d10c      	bne.n	8006592 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800657e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	4313      	orrs	r3, r2
 8006588:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	40000400 	.word	0x40000400
 80065b4:	40000800 	.word	0x40000800
 80065b8:	40000c00 	.word	0x40000c00
 80065bc:	40001800 	.word	0x40001800
 80065c0:	40014000 	.word	0x40014000
 80065c4:	40015c00 	.word	0x40015c00

080065c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e040      	b.n	8006684 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006606:	2b00      	cmp	r3, #0
 8006608:	d106      	bne.n	8006618 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fc f9e8 	bl	80029e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2224      	movs	r2, #36	@ 0x24
 800661c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0201 	bic.w	r2, r2, #1
 800662c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fc54 	bl	8006edc <UART_SetConfig>
 8006634:	4603      	mov	r3, r0
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e022      	b.n	8006684 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fdc2 	bl	80071d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800665a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800666a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0201 	orr.w	r2, r2, #1
 800667a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fe49 	bl	8007314 <UART_CheckIdleState>
 8006682:	4603      	mov	r3, r0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08a      	sub	sp, #40	@ 0x28
 8006690:	af02      	add	r7, sp, #8
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	603b      	str	r3, [r7, #0]
 8006698:	4613      	mov	r3, r2
 800669a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066a0:	2b20      	cmp	r3, #32
 80066a2:	d177      	bne.n	8006794 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <HAL_UART_Transmit+0x24>
 80066aa:	88fb      	ldrh	r3, [r7, #6]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e070      	b.n	8006796 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2221      	movs	r2, #33	@ 0x21
 80066c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066c2:	f7fc fc7b 	bl	8002fbc <HAL_GetTick>
 80066c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	88fa      	ldrh	r2, [r7, #6]
 80066cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	88fa      	ldrh	r2, [r7, #6]
 80066d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066e0:	d108      	bne.n	80066f4 <HAL_UART_Transmit+0x68>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d104      	bne.n	80066f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80066ea:	2300      	movs	r3, #0
 80066ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	61bb      	str	r3, [r7, #24]
 80066f2:	e003      	b.n	80066fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066f8:	2300      	movs	r3, #0
 80066fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066fc:	e02f      	b.n	800675e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2200      	movs	r2, #0
 8006706:	2180      	movs	r1, #128	@ 0x80
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f000 feab 	bl	8007464 <UART_WaitOnFlagUntilTimeout>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d004      	beq.n	800671e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2220      	movs	r2, #32
 8006718:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e03b      	b.n	8006796 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10b      	bne.n	800673c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	881a      	ldrh	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006730:	b292      	uxth	r2, r2
 8006732:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	3302      	adds	r3, #2
 8006738:	61bb      	str	r3, [r7, #24]
 800673a:	e007      	b.n	800674c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	781a      	ldrb	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	3301      	adds	r3, #1
 800674a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006764:	b29b      	uxth	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1c9      	bne.n	80066fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2200      	movs	r2, #0
 8006772:	2140      	movs	r1, #64	@ 0x40
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 fe75 	bl	8007464 <UART_WaitOnFlagUntilTimeout>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d004      	beq.n	800678a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2220      	movs	r2, #32
 8006784:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e005      	b.n	8006796 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2220      	movs	r2, #32
 800678e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	e000      	b.n	8006796 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006794:	2302      	movs	r3, #2
  }
}
 8006796:	4618      	mov	r0, r3
 8006798:	3720      	adds	r7, #32
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b08b      	sub	sp, #44	@ 0x2c
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	4613      	mov	r3, r2
 80067ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	d147      	bne.n	8006846 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <HAL_UART_Transmit_IT+0x22>
 80067bc:	88fb      	ldrh	r3, [r7, #6]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e040      	b.n	8006848 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	88fa      	ldrh	r2, [r7, #6]
 80067d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	88fa      	ldrh	r2, [r7, #6]
 80067d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2221      	movs	r2, #33	@ 0x21
 80067ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067f8:	d107      	bne.n	800680a <HAL_UART_Transmit_IT+0x6a>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d103      	bne.n	800680a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4a13      	ldr	r2, [pc, #76]	@ (8006854 <HAL_UART_Transmit_IT+0xb4>)
 8006806:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006808:	e002      	b.n	8006810 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	4a12      	ldr	r2, [pc, #72]	@ (8006858 <HAL_UART_Transmit_IT+0xb8>)
 800680e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	613b      	str	r3, [r7, #16]
   return(result);
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006824:	627b      	str	r3, [r7, #36]	@ 0x24
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682e:	623b      	str	r3, [r7, #32]
 8006830:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	69f9      	ldr	r1, [r7, #28]
 8006834:	6a3a      	ldr	r2, [r7, #32]
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	61bb      	str	r3, [r7, #24]
   return(result);
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e6      	bne.n	8006810 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	e000      	b.n	8006848 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006846:	2302      	movs	r3, #2
  }
}
 8006848:	4618      	mov	r0, r3
 800684a:	372c      	adds	r7, #44	@ 0x2c
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	08007847 	.word	0x08007847
 8006858:	08007791 	.word	0x08007791

0800685c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08a      	sub	sp, #40	@ 0x28
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	4613      	mov	r3, r2
 8006868:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006870:	2b20      	cmp	r3, #32
 8006872:	d132      	bne.n	80068da <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <HAL_UART_Receive_IT+0x24>
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e02b      	b.n	80068dc <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d018      	beq.n	80068ca <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	e853 3f00 	ldrex	r3, [r3]
 80068a4:	613b      	str	r3, [r7, #16]
   return(result);
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b6:	623b      	str	r3, [r7, #32]
 80068b8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	69f9      	ldr	r1, [r7, #28]
 80068bc:	6a3a      	ldr	r2, [r7, #32]
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e6      	bne.n	8006898 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80068ca:	88fb      	ldrh	r3, [r7, #6]
 80068cc:	461a      	mov	r2, r3
 80068ce:	68b9      	ldr	r1, [r7, #8]
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f000 fe2f 	bl	8007534 <UART_Start_Receive_IT>
 80068d6:	4603      	mov	r3, r0
 80068d8:	e000      	b.n	80068dc <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80068da:	2302      	movs	r3, #2
  }
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3728      	adds	r7, #40	@ 0x28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b0ba      	sub	sp, #232	@ 0xe8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800690a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800690e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006912:	4013      	ands	r3, r2
 8006914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800691c:	2b00      	cmp	r3, #0
 800691e:	d115      	bne.n	800694c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006924:	f003 0320 	and.w	r3, r3, #32
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00f      	beq.n	800694c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800692c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006930:	f003 0320 	and.w	r3, r3, #32
 8006934:	2b00      	cmp	r3, #0
 8006936:	d009      	beq.n	800694c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 82ab 	beq.w	8006e98 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	4798      	blx	r3
      }
      return;
 800694a:	e2a5      	b.n	8006e98 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800694c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 8117 	beq.w	8006b84 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d106      	bne.n	8006970 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006962:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006966:	4b85      	ldr	r3, [pc, #532]	@ (8006b7c <HAL_UART_IRQHandler+0x298>)
 8006968:	4013      	ands	r3, r2
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 810a 	beq.w	8006b84 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	d011      	beq.n	80069a0 <HAL_UART_IRQHandler+0xbc>
 800697c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00b      	beq.n	80069a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2201      	movs	r2, #1
 800698e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006996:	f043 0201 	orr.w	r2, r3, #1
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d011      	beq.n	80069d0 <HAL_UART_IRQHandler+0xec>
 80069ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00b      	beq.n	80069d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2202      	movs	r2, #2
 80069be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069c6:	f043 0204 	orr.w	r2, r3, #4
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d011      	beq.n	8006a00 <HAL_UART_IRQHandler+0x11c>
 80069dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00b      	beq.n	8006a00 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2204      	movs	r2, #4
 80069ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069f6:	f043 0202 	orr.w	r2, r3, #2
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a04:	f003 0308 	and.w	r3, r3, #8
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d017      	beq.n	8006a3c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a10:	f003 0320 	and.w	r3, r3, #32
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d105      	bne.n	8006a24 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00b      	beq.n	8006a3c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2208      	movs	r2, #8
 8006a2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a32:	f043 0208 	orr.w	r2, r3, #8
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d012      	beq.n	8006a6e <HAL_UART_IRQHandler+0x18a>
 8006a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00c      	beq.n	8006a6e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a64:	f043 0220 	orr.w	r2, r3, #32
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8211 	beq.w	8006e9c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00d      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a8a:	f003 0320 	and.w	r3, r3, #32
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d007      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aa8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab6:	2b40      	cmp	r3, #64	@ 0x40
 8006ab8:	d005      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006abe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d04f      	beq.n	8006b66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fde8 	bl	800769c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad6:	2b40      	cmp	r3, #64	@ 0x40
 8006ad8:	d141      	bne.n	8006b5e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3308      	adds	r3, #8
 8006ae0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006af4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006af8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3308      	adds	r3, #8
 8006b02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006b12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1d9      	bne.n	8006ada <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d013      	beq.n	8006b56 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b32:	4a13      	ldr	r2, [pc, #76]	@ (8006b80 <HAL_UART_IRQHandler+0x29c>)
 8006b34:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fc fb94 	bl	8003268 <HAL_DMA_Abort_IT>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d017      	beq.n	8006b76 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006b50:	4610      	mov	r0, r2
 8006b52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b54:	e00f      	b.n	8006b76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f9aa 	bl	8006eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b5c:	e00b      	b.n	8006b76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f9a6 	bl	8006eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b64:	e007      	b.n	8006b76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f9a2 	bl	8006eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006b74:	e192      	b.n	8006e9c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b76:	bf00      	nop
    return;
 8006b78:	e190      	b.n	8006e9c <HAL_UART_IRQHandler+0x5b8>
 8006b7a:	bf00      	nop
 8006b7c:	04000120 	.word	0x04000120
 8006b80:	08007765 	.word	0x08007765

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	f040 814b 	bne.w	8006e24 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b92:	f003 0310 	and.w	r3, r3, #16
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f000 8144 	beq.w	8006e24 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ba0:	f003 0310 	and.w	r3, r3, #16
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 813d 	beq.w	8006e24 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2210      	movs	r2, #16
 8006bb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bbc:	2b40      	cmp	r3, #64	@ 0x40
 8006bbe:	f040 80b5 	bne.w	8006d2c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 8164 	beq.w	8006ea0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006be2:	429a      	cmp	r2, r3
 8006be4:	f080 815c 	bcs.w	8006ea0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	f000 8086 	beq.w	8006d0a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c0a:	e853 3f00 	ldrex	r3, [r3]
 8006c0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006c12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c1a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	461a      	mov	r2, r3
 8006c24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c2c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c34:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c38:	e841 2300 	strex	r3, r2, [r1]
 8006c3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1da      	bne.n	8006bfe <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c52:	e853 3f00 	ldrex	r3, [r3]
 8006c56:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c5a:	f023 0301 	bic.w	r3, r3, #1
 8006c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3308      	adds	r3, #8
 8006c68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c6c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c70:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c72:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c74:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e1      	bne.n	8006c48 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3308      	adds	r3, #8
 8006c8a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c8e:	e853 3f00 	ldrex	r3, [r3]
 8006c92:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ca8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006caa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006cae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006cb0:	e841 2300 	strex	r3, r2, [r1]
 8006cb4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006cb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e3      	bne.n	8006c84 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cda:	f023 0310 	bic.w	r3, r3, #16
 8006cde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cf2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cf4:	e841 2300 	strex	r3, r2, [r1]
 8006cf8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1e4      	bne.n	8006cca <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7fc fa76 	bl	80031f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f8cd 	bl	8006ec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d2a:	e0b9      	b.n	8006ea0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 80ab 	beq.w	8006ea4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006d4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 80a6 	beq.w	8006ea4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	461a      	mov	r2, r3
 8006d76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d7c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e4      	bne.n	8006d58 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3308      	adds	r3, #8
 8006d94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	f023 0301 	bic.w	r3, r3, #1
 8006da4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3308      	adds	r3, #8
 8006dae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006db2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dba:	e841 2300 	strex	r3, r2, [r1]
 8006dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1e3      	bne.n	8006d8e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	e853 3f00 	ldrex	r3, [r3]
 8006de6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0310 	bic.w	r3, r3, #16
 8006dee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	461a      	mov	r2, r3
 8006df8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006dfc:	61fb      	str	r3, [r7, #28]
 8006dfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e00:	69b9      	ldr	r1, [r7, #24]
 8006e02:	69fa      	ldr	r2, [r7, #28]
 8006e04:	e841 2300 	strex	r3, r2, [r1]
 8006e08:	617b      	str	r3, [r7, #20]
   return(result);
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1e4      	bne.n	8006dda <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f851 	bl	8006ec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e22:	e03f      	b.n	8006ea4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00e      	beq.n	8006e4e <HAL_UART_IRQHandler+0x56a>
 8006e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d008      	beq.n	8006e4e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006e44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 ff2f 	bl	8007caa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e4c:	e02d      	b.n	8006eaa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00e      	beq.n	8006e78 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d008      	beq.n	8006e78 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d01c      	beq.n	8006ea8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	4798      	blx	r3
    }
    return;
 8006e76:	e017      	b.n	8006ea8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d012      	beq.n	8006eaa <HAL_UART_IRQHandler+0x5c6>
 8006e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00c      	beq.n	8006eaa <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fd38 	bl	8007906 <UART_EndTransmit_IT>
    return;
 8006e96:	e008      	b.n	8006eaa <HAL_UART_IRQHandler+0x5c6>
      return;
 8006e98:	bf00      	nop
 8006e9a:	e006      	b.n	8006eaa <HAL_UART_IRQHandler+0x5c6>
    return;
 8006e9c:	bf00      	nop
 8006e9e:	e004      	b.n	8006eaa <HAL_UART_IRQHandler+0x5c6>
      return;
 8006ea0:	bf00      	nop
 8006ea2:	e002      	b.n	8006eaa <HAL_UART_IRQHandler+0x5c6>
      return;
 8006ea4:	bf00      	nop
 8006ea6:	e000      	b.n	8006eaa <HAL_UART_IRQHandler+0x5c6>
    return;
 8006ea8:	bf00      	nop
  }

}
 8006eaa:	37e8      	adds	r7, #232	@ 0xe8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	69db      	ldr	r3, [r3, #28]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8006f0a:	f023 030c 	bic.w	r3, r3, #12
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	6812      	ldr	r2, [r2, #0]
 8006f12:	6979      	ldr	r1, [r7, #20]
 8006f14:	430b      	orrs	r3, r1
 8006f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68da      	ldr	r2, [r3, #12]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a99      	ldr	r2, [pc, #612]	@ (80071bc <UART_SetConfig+0x2e0>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d120      	bne.n	8006f9e <UART_SetConfig+0xc2>
 8006f5c:	4b98      	ldr	r3, [pc, #608]	@ (80071c0 <UART_SetConfig+0x2e4>)
 8006f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f60:	f003 0303 	and.w	r3, r3, #3
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d817      	bhi.n	8006f98 <UART_SetConfig+0xbc>
 8006f68:	a201      	add	r2, pc, #4	@ (adr r2, 8006f70 <UART_SetConfig+0x94>)
 8006f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6e:	bf00      	nop
 8006f70:	08006f81 	.word	0x08006f81
 8006f74:	08006f8d 	.word	0x08006f8d
 8006f78:	08006f93 	.word	0x08006f93
 8006f7c:	08006f87 	.word	0x08006f87
 8006f80:	2301      	movs	r3, #1
 8006f82:	77fb      	strb	r3, [r7, #31]
 8006f84:	e061      	b.n	800704a <UART_SetConfig+0x16e>
 8006f86:	2302      	movs	r3, #2
 8006f88:	77fb      	strb	r3, [r7, #31]
 8006f8a:	e05e      	b.n	800704a <UART_SetConfig+0x16e>
 8006f8c:	2304      	movs	r3, #4
 8006f8e:	77fb      	strb	r3, [r7, #31]
 8006f90:	e05b      	b.n	800704a <UART_SetConfig+0x16e>
 8006f92:	2308      	movs	r3, #8
 8006f94:	77fb      	strb	r3, [r7, #31]
 8006f96:	e058      	b.n	800704a <UART_SetConfig+0x16e>
 8006f98:	2310      	movs	r3, #16
 8006f9a:	77fb      	strb	r3, [r7, #31]
 8006f9c:	e055      	b.n	800704a <UART_SetConfig+0x16e>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a88      	ldr	r2, [pc, #544]	@ (80071c4 <UART_SetConfig+0x2e8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d124      	bne.n	8006ff2 <UART_SetConfig+0x116>
 8006fa8:	4b85      	ldr	r3, [pc, #532]	@ (80071c0 <UART_SetConfig+0x2e4>)
 8006faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006fb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006fb4:	d011      	beq.n	8006fda <UART_SetConfig+0xfe>
 8006fb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006fba:	d817      	bhi.n	8006fec <UART_SetConfig+0x110>
 8006fbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fc0:	d011      	beq.n	8006fe6 <UART_SetConfig+0x10a>
 8006fc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fc6:	d811      	bhi.n	8006fec <UART_SetConfig+0x110>
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <UART_SetConfig+0xf8>
 8006fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fd0:	d006      	beq.n	8006fe0 <UART_SetConfig+0x104>
 8006fd2:	e00b      	b.n	8006fec <UART_SetConfig+0x110>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	77fb      	strb	r3, [r7, #31]
 8006fd8:	e037      	b.n	800704a <UART_SetConfig+0x16e>
 8006fda:	2302      	movs	r3, #2
 8006fdc:	77fb      	strb	r3, [r7, #31]
 8006fde:	e034      	b.n	800704a <UART_SetConfig+0x16e>
 8006fe0:	2304      	movs	r3, #4
 8006fe2:	77fb      	strb	r3, [r7, #31]
 8006fe4:	e031      	b.n	800704a <UART_SetConfig+0x16e>
 8006fe6:	2308      	movs	r3, #8
 8006fe8:	77fb      	strb	r3, [r7, #31]
 8006fea:	e02e      	b.n	800704a <UART_SetConfig+0x16e>
 8006fec:	2310      	movs	r3, #16
 8006fee:	77fb      	strb	r3, [r7, #31]
 8006ff0:	e02b      	b.n	800704a <UART_SetConfig+0x16e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a74      	ldr	r2, [pc, #464]	@ (80071c8 <UART_SetConfig+0x2ec>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d124      	bne.n	8007046 <UART_SetConfig+0x16a>
 8006ffc:	4b70      	ldr	r3, [pc, #448]	@ (80071c0 <UART_SetConfig+0x2e4>)
 8006ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007000:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007004:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007008:	d011      	beq.n	800702e <UART_SetConfig+0x152>
 800700a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800700e:	d817      	bhi.n	8007040 <UART_SetConfig+0x164>
 8007010:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007014:	d011      	beq.n	800703a <UART_SetConfig+0x15e>
 8007016:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800701a:	d811      	bhi.n	8007040 <UART_SetConfig+0x164>
 800701c:	2b00      	cmp	r3, #0
 800701e:	d003      	beq.n	8007028 <UART_SetConfig+0x14c>
 8007020:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007024:	d006      	beq.n	8007034 <UART_SetConfig+0x158>
 8007026:	e00b      	b.n	8007040 <UART_SetConfig+0x164>
 8007028:	2300      	movs	r3, #0
 800702a:	77fb      	strb	r3, [r7, #31]
 800702c:	e00d      	b.n	800704a <UART_SetConfig+0x16e>
 800702e:	2302      	movs	r3, #2
 8007030:	77fb      	strb	r3, [r7, #31]
 8007032:	e00a      	b.n	800704a <UART_SetConfig+0x16e>
 8007034:	2304      	movs	r3, #4
 8007036:	77fb      	strb	r3, [r7, #31]
 8007038:	e007      	b.n	800704a <UART_SetConfig+0x16e>
 800703a:	2308      	movs	r3, #8
 800703c:	77fb      	strb	r3, [r7, #31]
 800703e:	e004      	b.n	800704a <UART_SetConfig+0x16e>
 8007040:	2310      	movs	r3, #16
 8007042:	77fb      	strb	r3, [r7, #31]
 8007044:	e001      	b.n	800704a <UART_SetConfig+0x16e>
 8007046:	2310      	movs	r3, #16
 8007048:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007052:	d15a      	bne.n	800710a <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 8007054:	7ffb      	ldrb	r3, [r7, #31]
 8007056:	2b08      	cmp	r3, #8
 8007058:	d827      	bhi.n	80070aa <UART_SetConfig+0x1ce>
 800705a:	a201      	add	r2, pc, #4	@ (adr r2, 8007060 <UART_SetConfig+0x184>)
 800705c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007060:	08007085 	.word	0x08007085
 8007064:	0800708d 	.word	0x0800708d
 8007068:	08007095 	.word	0x08007095
 800706c:	080070ab 	.word	0x080070ab
 8007070:	0800709b 	.word	0x0800709b
 8007074:	080070ab 	.word	0x080070ab
 8007078:	080070ab 	.word	0x080070ab
 800707c:	080070ab 	.word	0x080070ab
 8007080:	080070a3 	.word	0x080070a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007084:	f7fe faae 	bl	80055e4 <HAL_RCC_GetPCLK1Freq>
 8007088:	61b8      	str	r0, [r7, #24]
        break;
 800708a:	e013      	b.n	80070b4 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800708c:	f7fe facc 	bl	8005628 <HAL_RCC_GetPCLK2Freq>
 8007090:	61b8      	str	r0, [r7, #24]
        break;
 8007092:	e00f      	b.n	80070b4 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007094:	4b4d      	ldr	r3, [pc, #308]	@ (80071cc <UART_SetConfig+0x2f0>)
 8007096:	61bb      	str	r3, [r7, #24]
        break;
 8007098:	e00c      	b.n	80070b4 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800709a:	f7fe fa2b 	bl	80054f4 <HAL_RCC_GetSysClockFreq>
 800709e:	61b8      	str	r0, [r7, #24]
        break;
 80070a0:	e008      	b.n	80070b4 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070a6:	61bb      	str	r3, [r7, #24]
        break;
 80070a8:	e004      	b.n	80070b4 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	77bb      	strb	r3, [r7, #30]
        break;
 80070b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d074      	beq.n	80071a4 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	005a      	lsls	r2, r3, #1
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	085b      	lsrs	r3, r3, #1
 80070c4:	441a      	add	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	2b0f      	cmp	r3, #15
 80070d4:	d916      	bls.n	8007104 <UART_SetConfig+0x228>
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070dc:	d212      	bcs.n	8007104 <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f023 030f 	bic.w	r3, r3, #15
 80070e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	085b      	lsrs	r3, r3, #1
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	f003 0307 	and.w	r3, r3, #7
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	89fb      	ldrh	r3, [r7, #14]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	89fa      	ldrh	r2, [r7, #14]
 8007100:	60da      	str	r2, [r3, #12]
 8007102:	e04f      	b.n	80071a4 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	77bb      	strb	r3, [r7, #30]
 8007108:	e04c      	b.n	80071a4 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800710a:	7ffb      	ldrb	r3, [r7, #31]
 800710c:	2b08      	cmp	r3, #8
 800710e:	d828      	bhi.n	8007162 <UART_SetConfig+0x286>
 8007110:	a201      	add	r2, pc, #4	@ (adr r2, 8007118 <UART_SetConfig+0x23c>)
 8007112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007116:	bf00      	nop
 8007118:	0800713d 	.word	0x0800713d
 800711c:	08007145 	.word	0x08007145
 8007120:	0800714d 	.word	0x0800714d
 8007124:	08007163 	.word	0x08007163
 8007128:	08007153 	.word	0x08007153
 800712c:	08007163 	.word	0x08007163
 8007130:	08007163 	.word	0x08007163
 8007134:	08007163 	.word	0x08007163
 8007138:	0800715b 	.word	0x0800715b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800713c:	f7fe fa52 	bl	80055e4 <HAL_RCC_GetPCLK1Freq>
 8007140:	61b8      	str	r0, [r7, #24]
        break;
 8007142:	e013      	b.n	800716c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007144:	f7fe fa70 	bl	8005628 <HAL_RCC_GetPCLK2Freq>
 8007148:	61b8      	str	r0, [r7, #24]
        break;
 800714a:	e00f      	b.n	800716c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800714c:	4b1f      	ldr	r3, [pc, #124]	@ (80071cc <UART_SetConfig+0x2f0>)
 800714e:	61bb      	str	r3, [r7, #24]
        break;
 8007150:	e00c      	b.n	800716c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007152:	f7fe f9cf 	bl	80054f4 <HAL_RCC_GetSysClockFreq>
 8007156:	61b8      	str	r0, [r7, #24]
        break;
 8007158:	e008      	b.n	800716c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800715a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800715e:	61bb      	str	r3, [r7, #24]
        break;
 8007160:	e004      	b.n	800716c <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8007162:	2300      	movs	r3, #0
 8007164:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	77bb      	strb	r3, [r7, #30]
        break;
 800716a:	bf00      	nop
    }

    if (pclk != 0U)
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d018      	beq.n	80071a4 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	085a      	lsrs	r2, r3, #1
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	441a      	add	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	fbb2 f3f3 	udiv	r3, r2, r3
 8007184:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	2b0f      	cmp	r3, #15
 800718a:	d909      	bls.n	80071a0 <UART_SetConfig+0x2c4>
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007192:	d205      	bcs.n	80071a0 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	b29a      	uxth	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	60da      	str	r2, [r3, #12]
 800719e:	e001      	b.n	80071a4 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80071b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3720      	adds	r7, #32
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	40013800 	.word	0x40013800
 80071c0:	40021000 	.word	0x40021000
 80071c4:	40004400 	.word	0x40004400
 80071c8:	40004800 	.word	0x40004800
 80071cc:	007a1200 	.word	0x007a1200

080071d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00a      	beq.n	80071fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00a      	beq.n	800723e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007242:	f003 0308 	and.w	r3, r3, #8
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00a      	beq.n	8007260 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007264:	f003 0310 	and.w	r3, r3, #16
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00a      	beq.n	8007282 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007286:	f003 0320 	and.w	r3, r3, #32
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d01a      	beq.n	80072e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072ce:	d10a      	bne.n	80072e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00a      	beq.n	8007308 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	605a      	str	r2, [r3, #4]
  }
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b098      	sub	sp, #96	@ 0x60
 8007318:	af02      	add	r7, sp, #8
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007324:	f7fb fe4a 	bl	8002fbc <HAL_GetTick>
 8007328:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0308 	and.w	r3, r3, #8
 8007334:	2b08      	cmp	r3, #8
 8007336:	d12e      	bne.n	8007396 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007338:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007340:	2200      	movs	r2, #0
 8007342:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f88c 	bl	8007464 <UART_WaitOnFlagUntilTimeout>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d021      	beq.n	8007396 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735a:	e853 3f00 	ldrex	r3, [r3]
 800735e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007362:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007366:	653b      	str	r3, [r7, #80]	@ 0x50
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	461a      	mov	r2, r3
 800736e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007370:	647b      	str	r3, [r7, #68]	@ 0x44
 8007372:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007374:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007376:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007378:	e841 2300 	strex	r3, r2, [r1]
 800737c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800737e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1e6      	bne.n	8007352 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2220      	movs	r2, #32
 8007388:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e062      	b.n	800745c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	2b04      	cmp	r3, #4
 80073a2:	d149      	bne.n	8007438 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073ac:	2200      	movs	r2, #0
 80073ae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f856 	bl	8007464 <UART_WaitOnFlagUntilTimeout>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d03c      	beq.n	8007438 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c6:	e853 3f00 	ldrex	r3, [r3]
 80073ca:	623b      	str	r3, [r7, #32]
   return(result);
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	461a      	mov	r2, r3
 80073da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80073de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073e4:	e841 2300 	strex	r3, r2, [r1]
 80073e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e6      	bne.n	80073be <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3308      	adds	r3, #8
 80073f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	e853 3f00 	ldrex	r3, [r3]
 80073fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0301 	bic.w	r3, r3, #1
 8007406:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3308      	adds	r3, #8
 800740e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007410:	61fa      	str	r2, [r7, #28]
 8007412:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	69b9      	ldr	r1, [r7, #24]
 8007416:	69fa      	ldr	r2, [r7, #28]
 8007418:	e841 2300 	strex	r3, r2, [r1]
 800741c:	617b      	str	r3, [r7, #20]
   return(result);
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e5      	bne.n	80073f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2220      	movs	r2, #32
 8007428:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e011      	b.n	800745c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2220      	movs	r2, #32
 800743c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2220      	movs	r2, #32
 8007442:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3758      	adds	r7, #88	@ 0x58
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	4613      	mov	r3, r2
 8007472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007474:	e049      	b.n	800750a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747c:	d045      	beq.n	800750a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800747e:	f7fb fd9d 	bl	8002fbc <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	69ba      	ldr	r2, [r7, #24]
 800748a:	429a      	cmp	r2, r3
 800748c:	d302      	bcc.n	8007494 <UART_WaitOnFlagUntilTimeout+0x30>
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e048      	b.n	800752a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0304 	and.w	r3, r3, #4
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d031      	beq.n	800750a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	f003 0308 	and.w	r3, r3, #8
 80074b0:	2b08      	cmp	r3, #8
 80074b2:	d110      	bne.n	80074d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2208      	movs	r2, #8
 80074ba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f8ed 	bl	800769c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2208      	movs	r2, #8
 80074c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e029      	b.n	800752a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074e4:	d111      	bne.n	800750a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f000 f8d3 	bl	800769c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2220      	movs	r2, #32
 80074fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e00f      	b.n	800752a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	69da      	ldr	r2, [r3, #28]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	4013      	ands	r3, r2
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	429a      	cmp	r2, r3
 8007518:	bf0c      	ite	eq
 800751a:	2301      	moveq	r3, #1
 800751c:	2300      	movne	r3, #0
 800751e:	b2db      	uxtb	r3, r3
 8007520:	461a      	mov	r2, r3
 8007522:	79fb      	ldrb	r3, [r7, #7]
 8007524:	429a      	cmp	r2, r3
 8007526:	d0a6      	beq.n	8007476 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007534:	b480      	push	{r7}
 8007536:	b097      	sub	sp, #92	@ 0x5c
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	4613      	mov	r3, r2
 8007540:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	88fa      	ldrh	r2, [r7, #6]
 800754c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	88fa      	ldrh	r2, [r7, #6]
 8007554:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007566:	d10e      	bne.n	8007586 <UART_Start_Receive_IT+0x52>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d105      	bne.n	800757c <UART_Start_Receive_IT+0x48>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007576:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800757a:	e01a      	b.n	80075b2 <UART_Start_Receive_IT+0x7e>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	22ff      	movs	r2, #255	@ 0xff
 8007580:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007584:	e015      	b.n	80075b2 <UART_Start_Receive_IT+0x7e>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10d      	bne.n	80075aa <UART_Start_Receive_IT+0x76>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d104      	bne.n	80075a0 <UART_Start_Receive_IT+0x6c>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	22ff      	movs	r2, #255	@ 0xff
 800759a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800759e:	e008      	b.n	80075b2 <UART_Start_Receive_IT+0x7e>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	227f      	movs	r2, #127	@ 0x7f
 80075a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80075a8:	e003      	b.n	80075b2 <UART_Start_Receive_IT+0x7e>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2222      	movs	r2, #34	@ 0x22
 80075be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3308      	adds	r3, #8
 80075c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d4:	f043 0301 	orr.w	r3, r3, #1
 80075d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3308      	adds	r3, #8
 80075e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80075e2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80075e4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80075e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075ea:	e841 2300 	strex	r3, r2, [r1]
 80075ee:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80075f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1e5      	bne.n	80075c2 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075fe:	d107      	bne.n	8007610 <UART_Start_Receive_IT+0xdc>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d103      	bne.n	8007610 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	4a22      	ldr	r2, [pc, #136]	@ (8007694 <UART_Start_Receive_IT+0x160>)
 800760c:	669a      	str	r2, [r3, #104]	@ 0x68
 800760e:	e002      	b.n	8007616 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4a21      	ldr	r2, [pc, #132]	@ (8007698 <UART_Start_Receive_IT+0x164>)
 8007614:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d019      	beq.n	8007652 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007626:	e853 3f00 	ldrex	r3, [r3]
 800762a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800762c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800763c:	637b      	str	r3, [r7, #52]	@ 0x34
 800763e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007642:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800764a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e6      	bne.n	800761e <UART_Start_Receive_IT+0xea>
 8007650:	e018      	b.n	8007684 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	e853 3f00 	ldrex	r3, [r3]
 800765e:	613b      	str	r3, [r7, #16]
   return(result);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f043 0320 	orr.w	r3, r3, #32
 8007666:	653b      	str	r3, [r7, #80]	@ 0x50
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007670:	623b      	str	r3, [r7, #32]
 8007672:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	69f9      	ldr	r1, [r7, #28]
 8007676:	6a3a      	ldr	r2, [r7, #32]
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	61bb      	str	r3, [r7, #24]
   return(result);
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e6      	bne.n	8007652 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	375c      	adds	r7, #92	@ 0x5c
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	08007b03 	.word	0x08007b03
 8007698:	0800795b 	.word	0x0800795b

0800769c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800769c:	b480      	push	{r7}
 800769e:	b095      	sub	sp, #84	@ 0x54
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	461a      	mov	r2, r3
 80076c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80076c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e6      	bne.n	80076a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3308      	adds	r3, #8
 80076dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	f023 0301 	bic.w	r3, r3, #1
 80076ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3308      	adds	r3, #8
 80076f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e5      	bne.n	80076d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800770e:	2b01      	cmp	r3, #1
 8007710:	d118      	bne.n	8007744 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	e853 3f00 	ldrex	r3, [r3]
 800771e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f023 0310 	bic.w	r3, r3, #16
 8007726:	647b      	str	r3, [r7, #68]	@ 0x44
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007730:	61bb      	str	r3, [r7, #24]
 8007732:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	6979      	ldr	r1, [r7, #20]
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	e841 2300 	strex	r3, r2, [r1]
 800773c:	613b      	str	r3, [r7, #16]
   return(result);
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1e6      	bne.n	8007712 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2220      	movs	r2, #32
 8007748:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007758:	bf00      	nop
 800775a:	3754      	adds	r7, #84	@ 0x54
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007770:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f7ff fb94 	bl	8006eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007788:	bf00      	nop
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007790:	b480      	push	{r7}
 8007792:	b08f      	sub	sp, #60	@ 0x3c
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800779c:	2b21      	cmp	r3, #33	@ 0x21
 800779e:	d14c      	bne.n	800783a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d132      	bne.n	8007812 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	461a      	mov	r2, r3
 80077c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077cc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e6      	bne.n	80077ac <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	e853 3f00 	ldrex	r3, [r3]
 80077ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	461a      	mov	r2, r3
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	61bb      	str	r3, [r7, #24]
 80077fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007800:	6979      	ldr	r1, [r7, #20]
 8007802:	69ba      	ldr	r2, [r7, #24]
 8007804:	e841 2300 	strex	r3, r2, [r1]
 8007808:	613b      	str	r3, [r7, #16]
   return(result);
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e6      	bne.n	80077de <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007810:	e013      	b.n	800783a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007816:	781a      	ldrb	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007822:	1c5a      	adds	r2, r3, #1
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800782e:	b29b      	uxth	r3, r3
 8007830:	3b01      	subs	r3, #1
 8007832:	b29a      	uxth	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800783a:	bf00      	nop
 800783c:	373c      	adds	r7, #60	@ 0x3c
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007846:	b480      	push	{r7}
 8007848:	b091      	sub	sp, #68	@ 0x44
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007852:	2b21      	cmp	r3, #33	@ 0x21
 8007854:	d151      	bne.n	80078fa <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d132      	bne.n	80078c8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786a:	e853 3f00 	ldrex	r3, [r3]
 800786e:	623b      	str	r3, [r7, #32]
   return(result);
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007876:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	461a      	mov	r2, r3
 800787e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007880:	633b      	str	r3, [r7, #48]	@ 0x30
 8007882:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007884:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007888:	e841 2300 	strex	r3, r2, [r1]
 800788c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800788e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1e6      	bne.n	8007862 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	e853 3f00 	ldrex	r3, [r3]
 80078a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b2:	61fb      	str	r3, [r7, #28]
 80078b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b6:	69b9      	ldr	r1, [r7, #24]
 80078b8:	69fa      	ldr	r2, [r7, #28]
 80078ba:	e841 2300 	strex	r3, r2, [r1]
 80078be:	617b      	str	r3, [r7, #20]
   return(result);
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1e6      	bne.n	8007894 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80078c6:	e018      	b.n	80078fa <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80078ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078d0:	881a      	ldrh	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078da:	b292      	uxth	r2, r2
 80078dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078e2:	1c9a      	adds	r2, r3, #2
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	3b01      	subs	r3, #1
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80078fa:	bf00      	nop
 80078fc:	3744      	adds	r7, #68	@ 0x44
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b088      	sub	sp, #32
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	e853 3f00 	ldrex	r3, [r3]
 800791a:	60bb      	str	r3, [r7, #8]
   return(result);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007922:	61fb      	str	r3, [r7, #28]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	461a      	mov	r2, r3
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	61bb      	str	r3, [r7, #24]
 800792e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007930:	6979      	ldr	r1, [r7, #20]
 8007932:	69ba      	ldr	r2, [r7, #24]
 8007934:	e841 2300 	strex	r3, r2, [r1]
 8007938:	613b      	str	r3, [r7, #16]
   return(result);
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e6      	bne.n	800790e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2220      	movs	r2, #32
 8007944:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7fa ff07 	bl	8002760 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007952:	bf00      	nop
 8007954:	3720      	adds	r7, #32
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b09c      	sub	sp, #112	@ 0x70
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007968:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007972:	2b22      	cmp	r3, #34	@ 0x22
 8007974:	f040 80b9 	bne.w	8007aea <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800797e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007982:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007986:	b2d9      	uxtb	r1, r3
 8007988:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800798c:	b2da      	uxtb	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007992:	400a      	ands	r2, r1
 8007994:	b2d2      	uxtb	r2, r2
 8007996:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f040 809c 	bne.w	8007afa <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079ca:	e853 3f00 	ldrex	r3, [r3]
 80079ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80079d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	461a      	mov	r2, r3
 80079de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80079e2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80079e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80079e8:	e841 2300 	strex	r3, r2, [r1]
 80079ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80079ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1e6      	bne.n	80079c2 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	3308      	adds	r3, #8
 80079fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fe:	e853 3f00 	ldrex	r3, [r3]
 8007a02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a06:	f023 0301 	bic.w	r3, r3, #1
 8007a0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3308      	adds	r3, #8
 8007a12:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007a14:	647a      	str	r2, [r7, #68]	@ 0x44
 8007a16:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a1c:	e841 2300 	strex	r3, r2, [r1]
 8007a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e5      	bne.n	80079f4 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d018      	beq.n	8007a7c <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a52:	e853 3f00 	ldrex	r3, [r3]
 8007a56:	623b      	str	r3, [r7, #32]
   return(result);
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	461a      	mov	r2, r3
 8007a66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a68:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a70:	e841 2300 	strex	r3, r2, [r1]
 8007a74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1e6      	bne.n	8007a4a <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d12e      	bne.n	8007ae2 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	e853 3f00 	ldrex	r3, [r3]
 8007a96:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f023 0310 	bic.w	r3, r3, #16
 8007a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007aa8:	61fb      	str	r3, [r7, #28]
 8007aaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aac:	69b9      	ldr	r1, [r7, #24]
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	e841 2300 	strex	r3, r2, [r1]
 8007ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1e6      	bne.n	8007a8a <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	f003 0310 	and.w	r3, r3, #16
 8007ac6:	2b10      	cmp	r3, #16
 8007ac8:	d103      	bne.n	8007ad2 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2210      	movs	r2, #16
 8007ad0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7ff f9f2 	bl	8006ec4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ae0:	e00b      	b.n	8007afa <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7fa fc7c 	bl	80023e0 <HAL_UART_RxCpltCallback>
}
 8007ae8:	e007      	b.n	8007afa <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	699a      	ldr	r2, [r3, #24]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f042 0208 	orr.w	r2, r2, #8
 8007af8:	619a      	str	r2, [r3, #24]
}
 8007afa:	bf00      	nop
 8007afc:	3770      	adds	r7, #112	@ 0x70
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b09c      	sub	sp, #112	@ 0x70
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b10:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b1a:	2b22      	cmp	r3, #34	@ 0x22
 8007b1c:	f040 80b9 	bne.w	8007c92 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007b26:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b2e:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b30:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007b34:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007b38:	4013      	ands	r3, r2
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b3e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b44:	1c9a      	adds	r2, r3, #2
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	3b01      	subs	r3, #1
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f040 809c 	bne.w	8007ca2 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b88:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b8a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b90:	e841 2300 	strex	r3, r2, [r1]
 8007b94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007b96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e6      	bne.n	8007b6a <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ba6:	e853 3f00 	ldrex	r3, [r3]
 8007baa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bae:	f023 0301 	bic.w	r3, r3, #1
 8007bb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3308      	adds	r3, #8
 8007bba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007bbc:	643a      	str	r2, [r7, #64]	@ 0x40
 8007bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bc4:	e841 2300 	strex	r3, r2, [r1]
 8007bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1e5      	bne.n	8007b9c <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d018      	beq.n	8007c24 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	e853 3f00 	ldrex	r3, [r3]
 8007bfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007c06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c12:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c18:	e841 2300 	strex	r3, r2, [r1]
 8007c1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e6      	bne.n	8007bf2 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d12e      	bne.n	8007c8a <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	e853 3f00 	ldrex	r3, [r3]
 8007c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	f023 0310 	bic.w	r3, r3, #16
 8007c46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c50:	61bb      	str	r3, [r7, #24]
 8007c52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c54:	6979      	ldr	r1, [r7, #20]
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	e841 2300 	strex	r3, r2, [r1]
 8007c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e6      	bne.n	8007c32 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	f003 0310 	and.w	r3, r3, #16
 8007c6e:	2b10      	cmp	r3, #16
 8007c70:	d103      	bne.n	8007c7a <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2210      	movs	r2, #16
 8007c78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7ff f91e 	bl	8006ec4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c88:	e00b      	b.n	8007ca2 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7fa fba8 	bl	80023e0 <HAL_UART_RxCpltCallback>
}
 8007c90:	e007      	b.n	8007ca2 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	699a      	ldr	r2, [r3, #24]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f042 0208 	orr.w	r2, r2, #8
 8007ca0:	619a      	str	r2, [r3, #24]
}
 8007ca2:	bf00      	nop
 8007ca4:	3770      	adds	r7, #112	@ 0x70
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <atoi>:
 8007cbe:	220a      	movs	r2, #10
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	f000 b87d 	b.w	8007dc0 <strtol>
	...

08007cc8 <_strtol_l.constprop.0>:
 8007cc8:	2b24      	cmp	r3, #36	@ 0x24
 8007cca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cce:	4686      	mov	lr, r0
 8007cd0:	4690      	mov	r8, r2
 8007cd2:	d801      	bhi.n	8007cd8 <_strtol_l.constprop.0+0x10>
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d106      	bne.n	8007ce6 <_strtol_l.constprop.0+0x1e>
 8007cd8:	f001 fa62 	bl	80091a0 <__errno>
 8007cdc:	2316      	movs	r3, #22
 8007cde:	6003      	str	r3, [r0, #0]
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce6:	4834      	ldr	r0, [pc, #208]	@ (8007db8 <_strtol_l.constprop.0+0xf0>)
 8007ce8:	460d      	mov	r5, r1
 8007cea:	462a      	mov	r2, r5
 8007cec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cf0:	5d06      	ldrb	r6, [r0, r4]
 8007cf2:	f016 0608 	ands.w	r6, r6, #8
 8007cf6:	d1f8      	bne.n	8007cea <_strtol_l.constprop.0+0x22>
 8007cf8:	2c2d      	cmp	r4, #45	@ 0x2d
 8007cfa:	d12d      	bne.n	8007d58 <_strtol_l.constprop.0+0x90>
 8007cfc:	782c      	ldrb	r4, [r5, #0]
 8007cfe:	2601      	movs	r6, #1
 8007d00:	1c95      	adds	r5, r2, #2
 8007d02:	f033 0210 	bics.w	r2, r3, #16
 8007d06:	d109      	bne.n	8007d1c <_strtol_l.constprop.0+0x54>
 8007d08:	2c30      	cmp	r4, #48	@ 0x30
 8007d0a:	d12a      	bne.n	8007d62 <_strtol_l.constprop.0+0x9a>
 8007d0c:	782a      	ldrb	r2, [r5, #0]
 8007d0e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007d12:	2a58      	cmp	r2, #88	@ 0x58
 8007d14:	d125      	bne.n	8007d62 <_strtol_l.constprop.0+0x9a>
 8007d16:	786c      	ldrb	r4, [r5, #1]
 8007d18:	2310      	movs	r3, #16
 8007d1a:	3502      	adds	r5, #2
 8007d1c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007d20:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007d24:	2200      	movs	r2, #0
 8007d26:	fbbc f9f3 	udiv	r9, ip, r3
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007d30:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007d34:	2f09      	cmp	r7, #9
 8007d36:	d81b      	bhi.n	8007d70 <_strtol_l.constprop.0+0xa8>
 8007d38:	463c      	mov	r4, r7
 8007d3a:	42a3      	cmp	r3, r4
 8007d3c:	dd27      	ble.n	8007d8e <_strtol_l.constprop.0+0xc6>
 8007d3e:	1c57      	adds	r7, r2, #1
 8007d40:	d007      	beq.n	8007d52 <_strtol_l.constprop.0+0x8a>
 8007d42:	4581      	cmp	r9, r0
 8007d44:	d320      	bcc.n	8007d88 <_strtol_l.constprop.0+0xc0>
 8007d46:	d101      	bne.n	8007d4c <_strtol_l.constprop.0+0x84>
 8007d48:	45a2      	cmp	sl, r4
 8007d4a:	db1d      	blt.n	8007d88 <_strtol_l.constprop.0+0xc0>
 8007d4c:	fb00 4003 	mla	r0, r0, r3, r4
 8007d50:	2201      	movs	r2, #1
 8007d52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d56:	e7eb      	b.n	8007d30 <_strtol_l.constprop.0+0x68>
 8007d58:	2c2b      	cmp	r4, #43	@ 0x2b
 8007d5a:	bf04      	itt	eq
 8007d5c:	782c      	ldrbeq	r4, [r5, #0]
 8007d5e:	1c95      	addeq	r5, r2, #2
 8007d60:	e7cf      	b.n	8007d02 <_strtol_l.constprop.0+0x3a>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1da      	bne.n	8007d1c <_strtol_l.constprop.0+0x54>
 8007d66:	2c30      	cmp	r4, #48	@ 0x30
 8007d68:	bf0c      	ite	eq
 8007d6a:	2308      	moveq	r3, #8
 8007d6c:	230a      	movne	r3, #10
 8007d6e:	e7d5      	b.n	8007d1c <_strtol_l.constprop.0+0x54>
 8007d70:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007d74:	2f19      	cmp	r7, #25
 8007d76:	d801      	bhi.n	8007d7c <_strtol_l.constprop.0+0xb4>
 8007d78:	3c37      	subs	r4, #55	@ 0x37
 8007d7a:	e7de      	b.n	8007d3a <_strtol_l.constprop.0+0x72>
 8007d7c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007d80:	2f19      	cmp	r7, #25
 8007d82:	d804      	bhi.n	8007d8e <_strtol_l.constprop.0+0xc6>
 8007d84:	3c57      	subs	r4, #87	@ 0x57
 8007d86:	e7d8      	b.n	8007d3a <_strtol_l.constprop.0+0x72>
 8007d88:	f04f 32ff 	mov.w	r2, #4294967295
 8007d8c:	e7e1      	b.n	8007d52 <_strtol_l.constprop.0+0x8a>
 8007d8e:	1c53      	adds	r3, r2, #1
 8007d90:	d108      	bne.n	8007da4 <_strtol_l.constprop.0+0xdc>
 8007d92:	2322      	movs	r3, #34	@ 0x22
 8007d94:	f8ce 3000 	str.w	r3, [lr]
 8007d98:	4660      	mov	r0, ip
 8007d9a:	f1b8 0f00 	cmp.w	r8, #0
 8007d9e:	d0a0      	beq.n	8007ce2 <_strtol_l.constprop.0+0x1a>
 8007da0:	1e69      	subs	r1, r5, #1
 8007da2:	e006      	b.n	8007db2 <_strtol_l.constprop.0+0xea>
 8007da4:	b106      	cbz	r6, 8007da8 <_strtol_l.constprop.0+0xe0>
 8007da6:	4240      	negs	r0, r0
 8007da8:	f1b8 0f00 	cmp.w	r8, #0
 8007dac:	d099      	beq.n	8007ce2 <_strtol_l.constprop.0+0x1a>
 8007dae:	2a00      	cmp	r2, #0
 8007db0:	d1f6      	bne.n	8007da0 <_strtol_l.constprop.0+0xd8>
 8007db2:	f8c8 1000 	str.w	r1, [r8]
 8007db6:	e794      	b.n	8007ce2 <_strtol_l.constprop.0+0x1a>
 8007db8:	0800d1a5 	.word	0x0800d1a5

08007dbc <_strtol_r>:
 8007dbc:	f7ff bf84 	b.w	8007cc8 <_strtol_l.constprop.0>

08007dc0 <strtol>:
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	460a      	mov	r2, r1
 8007dc4:	4601      	mov	r1, r0
 8007dc6:	4802      	ldr	r0, [pc, #8]	@ (8007dd0 <strtol+0x10>)
 8007dc8:	6800      	ldr	r0, [r0, #0]
 8007dca:	f7ff bf7d 	b.w	8007cc8 <_strtol_l.constprop.0>
 8007dce:	bf00      	nop
 8007dd0:	20000030 	.word	0x20000030

08007dd4 <__cvt>:
 8007dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd8:	ec57 6b10 	vmov	r6, r7, d0
 8007ddc:	2f00      	cmp	r7, #0
 8007dde:	460c      	mov	r4, r1
 8007de0:	4619      	mov	r1, r3
 8007de2:	463b      	mov	r3, r7
 8007de4:	bfbb      	ittet	lt
 8007de6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007dea:	461f      	movlt	r7, r3
 8007dec:	2300      	movge	r3, #0
 8007dee:	232d      	movlt	r3, #45	@ 0x2d
 8007df0:	700b      	strb	r3, [r1, #0]
 8007df2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007df4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007df8:	4691      	mov	r9, r2
 8007dfa:	f023 0820 	bic.w	r8, r3, #32
 8007dfe:	bfbc      	itt	lt
 8007e00:	4632      	movlt	r2, r6
 8007e02:	4616      	movlt	r6, r2
 8007e04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e08:	d005      	beq.n	8007e16 <__cvt+0x42>
 8007e0a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007e0e:	d100      	bne.n	8007e12 <__cvt+0x3e>
 8007e10:	3401      	adds	r4, #1
 8007e12:	2102      	movs	r1, #2
 8007e14:	e000      	b.n	8007e18 <__cvt+0x44>
 8007e16:	2103      	movs	r1, #3
 8007e18:	ab03      	add	r3, sp, #12
 8007e1a:	9301      	str	r3, [sp, #4]
 8007e1c:	ab02      	add	r3, sp, #8
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	ec47 6b10 	vmov	d0, r6, r7
 8007e24:	4653      	mov	r3, sl
 8007e26:	4622      	mov	r2, r4
 8007e28:	f001 fa86 	bl	8009338 <_dtoa_r>
 8007e2c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007e30:	4605      	mov	r5, r0
 8007e32:	d119      	bne.n	8007e68 <__cvt+0x94>
 8007e34:	f019 0f01 	tst.w	r9, #1
 8007e38:	d00e      	beq.n	8007e58 <__cvt+0x84>
 8007e3a:	eb00 0904 	add.w	r9, r0, r4
 8007e3e:	2200      	movs	r2, #0
 8007e40:	2300      	movs	r3, #0
 8007e42:	4630      	mov	r0, r6
 8007e44:	4639      	mov	r1, r7
 8007e46:	f7f8 fe3f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e4a:	b108      	cbz	r0, 8007e50 <__cvt+0x7c>
 8007e4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e50:	2230      	movs	r2, #48	@ 0x30
 8007e52:	9b03      	ldr	r3, [sp, #12]
 8007e54:	454b      	cmp	r3, r9
 8007e56:	d31e      	bcc.n	8007e96 <__cvt+0xc2>
 8007e58:	9b03      	ldr	r3, [sp, #12]
 8007e5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e5c:	1b5b      	subs	r3, r3, r5
 8007e5e:	4628      	mov	r0, r5
 8007e60:	6013      	str	r3, [r2, #0]
 8007e62:	b004      	add	sp, #16
 8007e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e6c:	eb00 0904 	add.w	r9, r0, r4
 8007e70:	d1e5      	bne.n	8007e3e <__cvt+0x6a>
 8007e72:	7803      	ldrb	r3, [r0, #0]
 8007e74:	2b30      	cmp	r3, #48	@ 0x30
 8007e76:	d10a      	bne.n	8007e8e <__cvt+0xba>
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	4639      	mov	r1, r7
 8007e80:	f7f8 fe22 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e84:	b918      	cbnz	r0, 8007e8e <__cvt+0xba>
 8007e86:	f1c4 0401 	rsb	r4, r4, #1
 8007e8a:	f8ca 4000 	str.w	r4, [sl]
 8007e8e:	f8da 3000 	ldr.w	r3, [sl]
 8007e92:	4499      	add	r9, r3
 8007e94:	e7d3      	b.n	8007e3e <__cvt+0x6a>
 8007e96:	1c59      	adds	r1, r3, #1
 8007e98:	9103      	str	r1, [sp, #12]
 8007e9a:	701a      	strb	r2, [r3, #0]
 8007e9c:	e7d9      	b.n	8007e52 <__cvt+0x7e>

08007e9e <__exponent>:
 8007e9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ea0:	2900      	cmp	r1, #0
 8007ea2:	bfba      	itte	lt
 8007ea4:	4249      	neglt	r1, r1
 8007ea6:	232d      	movlt	r3, #45	@ 0x2d
 8007ea8:	232b      	movge	r3, #43	@ 0x2b
 8007eaa:	2909      	cmp	r1, #9
 8007eac:	7002      	strb	r2, [r0, #0]
 8007eae:	7043      	strb	r3, [r0, #1]
 8007eb0:	dd29      	ble.n	8007f06 <__exponent+0x68>
 8007eb2:	f10d 0307 	add.w	r3, sp, #7
 8007eb6:	461d      	mov	r5, r3
 8007eb8:	270a      	movs	r7, #10
 8007eba:	461a      	mov	r2, r3
 8007ebc:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ec0:	fb07 1416 	mls	r4, r7, r6, r1
 8007ec4:	3430      	adds	r4, #48	@ 0x30
 8007ec6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007eca:	460c      	mov	r4, r1
 8007ecc:	2c63      	cmp	r4, #99	@ 0x63
 8007ece:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	dcf1      	bgt.n	8007eba <__exponent+0x1c>
 8007ed6:	3130      	adds	r1, #48	@ 0x30
 8007ed8:	1e94      	subs	r4, r2, #2
 8007eda:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007ede:	1c41      	adds	r1, r0, #1
 8007ee0:	4623      	mov	r3, r4
 8007ee2:	42ab      	cmp	r3, r5
 8007ee4:	d30a      	bcc.n	8007efc <__exponent+0x5e>
 8007ee6:	f10d 0309 	add.w	r3, sp, #9
 8007eea:	1a9b      	subs	r3, r3, r2
 8007eec:	42ac      	cmp	r4, r5
 8007eee:	bf88      	it	hi
 8007ef0:	2300      	movhi	r3, #0
 8007ef2:	3302      	adds	r3, #2
 8007ef4:	4403      	add	r3, r0
 8007ef6:	1a18      	subs	r0, r3, r0
 8007ef8:	b003      	add	sp, #12
 8007efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007efc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007f00:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007f04:	e7ed      	b.n	8007ee2 <__exponent+0x44>
 8007f06:	2330      	movs	r3, #48	@ 0x30
 8007f08:	3130      	adds	r1, #48	@ 0x30
 8007f0a:	7083      	strb	r3, [r0, #2]
 8007f0c:	70c1      	strb	r1, [r0, #3]
 8007f0e:	1d03      	adds	r3, r0, #4
 8007f10:	e7f1      	b.n	8007ef6 <__exponent+0x58>
	...

08007f14 <_printf_float>:
 8007f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f18:	b08d      	sub	sp, #52	@ 0x34
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007f20:	4616      	mov	r6, r2
 8007f22:	461f      	mov	r7, r3
 8007f24:	4605      	mov	r5, r0
 8007f26:	f001 f8f1 	bl	800910c <_localeconv_r>
 8007f2a:	6803      	ldr	r3, [r0, #0]
 8007f2c:	9304      	str	r3, [sp, #16]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7f8 f99e 	bl	8000270 <strlen>
 8007f34:	2300      	movs	r3, #0
 8007f36:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f38:	f8d8 3000 	ldr.w	r3, [r8]
 8007f3c:	9005      	str	r0, [sp, #20]
 8007f3e:	3307      	adds	r3, #7
 8007f40:	f023 0307 	bic.w	r3, r3, #7
 8007f44:	f103 0208 	add.w	r2, r3, #8
 8007f48:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007f4c:	f8d4 b000 	ldr.w	fp, [r4]
 8007f50:	f8c8 2000 	str.w	r2, [r8]
 8007f54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f58:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007f5c:	9307      	str	r3, [sp, #28]
 8007f5e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f62:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007f66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f6a:	4b9c      	ldr	r3, [pc, #624]	@ (80081dc <_printf_float+0x2c8>)
 8007f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f70:	f7f8 fddc 	bl	8000b2c <__aeabi_dcmpun>
 8007f74:	bb70      	cbnz	r0, 8007fd4 <_printf_float+0xc0>
 8007f76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f7a:	4b98      	ldr	r3, [pc, #608]	@ (80081dc <_printf_float+0x2c8>)
 8007f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f80:	f7f8 fdb6 	bl	8000af0 <__aeabi_dcmple>
 8007f84:	bb30      	cbnz	r0, 8007fd4 <_printf_float+0xc0>
 8007f86:	2200      	movs	r2, #0
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4640      	mov	r0, r8
 8007f8c:	4649      	mov	r1, r9
 8007f8e:	f7f8 fda5 	bl	8000adc <__aeabi_dcmplt>
 8007f92:	b110      	cbz	r0, 8007f9a <_printf_float+0x86>
 8007f94:	232d      	movs	r3, #45	@ 0x2d
 8007f96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f9a:	4a91      	ldr	r2, [pc, #580]	@ (80081e0 <_printf_float+0x2cc>)
 8007f9c:	4b91      	ldr	r3, [pc, #580]	@ (80081e4 <_printf_float+0x2d0>)
 8007f9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007fa2:	bf94      	ite	ls
 8007fa4:	4690      	movls	r8, r2
 8007fa6:	4698      	movhi	r8, r3
 8007fa8:	2303      	movs	r3, #3
 8007faa:	6123      	str	r3, [r4, #16]
 8007fac:	f02b 0304 	bic.w	r3, fp, #4
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	f04f 0900 	mov.w	r9, #0
 8007fb6:	9700      	str	r7, [sp, #0]
 8007fb8:	4633      	mov	r3, r6
 8007fba:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	f000 f9d2 	bl	8008368 <_printf_common>
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	f040 808d 	bne.w	80080e4 <_printf_float+0x1d0>
 8007fca:	f04f 30ff 	mov.w	r0, #4294967295
 8007fce:	b00d      	add	sp, #52	@ 0x34
 8007fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd4:	4642      	mov	r2, r8
 8007fd6:	464b      	mov	r3, r9
 8007fd8:	4640      	mov	r0, r8
 8007fda:	4649      	mov	r1, r9
 8007fdc:	f7f8 fda6 	bl	8000b2c <__aeabi_dcmpun>
 8007fe0:	b140      	cbz	r0, 8007ff4 <_printf_float+0xe0>
 8007fe2:	464b      	mov	r3, r9
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	bfbc      	itt	lt
 8007fe8:	232d      	movlt	r3, #45	@ 0x2d
 8007fea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007fee:	4a7e      	ldr	r2, [pc, #504]	@ (80081e8 <_printf_float+0x2d4>)
 8007ff0:	4b7e      	ldr	r3, [pc, #504]	@ (80081ec <_printf_float+0x2d8>)
 8007ff2:	e7d4      	b.n	8007f9e <_printf_float+0x8a>
 8007ff4:	6863      	ldr	r3, [r4, #4]
 8007ff6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007ffa:	9206      	str	r2, [sp, #24]
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	d13b      	bne.n	8008078 <_printf_float+0x164>
 8008000:	2306      	movs	r3, #6
 8008002:	6063      	str	r3, [r4, #4]
 8008004:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008008:	2300      	movs	r3, #0
 800800a:	6022      	str	r2, [r4, #0]
 800800c:	9303      	str	r3, [sp, #12]
 800800e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008010:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008014:	ab09      	add	r3, sp, #36	@ 0x24
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	6861      	ldr	r1, [r4, #4]
 800801a:	ec49 8b10 	vmov	d0, r8, r9
 800801e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008022:	4628      	mov	r0, r5
 8008024:	f7ff fed6 	bl	8007dd4 <__cvt>
 8008028:	9b06      	ldr	r3, [sp, #24]
 800802a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800802c:	2b47      	cmp	r3, #71	@ 0x47
 800802e:	4680      	mov	r8, r0
 8008030:	d129      	bne.n	8008086 <_printf_float+0x172>
 8008032:	1cc8      	adds	r0, r1, #3
 8008034:	db02      	blt.n	800803c <_printf_float+0x128>
 8008036:	6863      	ldr	r3, [r4, #4]
 8008038:	4299      	cmp	r1, r3
 800803a:	dd41      	ble.n	80080c0 <_printf_float+0x1ac>
 800803c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008040:	fa5f fa8a 	uxtb.w	sl, sl
 8008044:	3901      	subs	r1, #1
 8008046:	4652      	mov	r2, sl
 8008048:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800804c:	9109      	str	r1, [sp, #36]	@ 0x24
 800804e:	f7ff ff26 	bl	8007e9e <__exponent>
 8008052:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008054:	1813      	adds	r3, r2, r0
 8008056:	2a01      	cmp	r2, #1
 8008058:	4681      	mov	r9, r0
 800805a:	6123      	str	r3, [r4, #16]
 800805c:	dc02      	bgt.n	8008064 <_printf_float+0x150>
 800805e:	6822      	ldr	r2, [r4, #0]
 8008060:	07d2      	lsls	r2, r2, #31
 8008062:	d501      	bpl.n	8008068 <_printf_float+0x154>
 8008064:	3301      	adds	r3, #1
 8008066:	6123      	str	r3, [r4, #16]
 8008068:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800806c:	2b00      	cmp	r3, #0
 800806e:	d0a2      	beq.n	8007fb6 <_printf_float+0xa2>
 8008070:	232d      	movs	r3, #45	@ 0x2d
 8008072:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008076:	e79e      	b.n	8007fb6 <_printf_float+0xa2>
 8008078:	9a06      	ldr	r2, [sp, #24]
 800807a:	2a47      	cmp	r2, #71	@ 0x47
 800807c:	d1c2      	bne.n	8008004 <_printf_float+0xf0>
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1c0      	bne.n	8008004 <_printf_float+0xf0>
 8008082:	2301      	movs	r3, #1
 8008084:	e7bd      	b.n	8008002 <_printf_float+0xee>
 8008086:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800808a:	d9db      	bls.n	8008044 <_printf_float+0x130>
 800808c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008090:	d118      	bne.n	80080c4 <_printf_float+0x1b0>
 8008092:	2900      	cmp	r1, #0
 8008094:	6863      	ldr	r3, [r4, #4]
 8008096:	dd0b      	ble.n	80080b0 <_printf_float+0x19c>
 8008098:	6121      	str	r1, [r4, #16]
 800809a:	b913      	cbnz	r3, 80080a2 <_printf_float+0x18e>
 800809c:	6822      	ldr	r2, [r4, #0]
 800809e:	07d0      	lsls	r0, r2, #31
 80080a0:	d502      	bpl.n	80080a8 <_printf_float+0x194>
 80080a2:	3301      	adds	r3, #1
 80080a4:	440b      	add	r3, r1
 80080a6:	6123      	str	r3, [r4, #16]
 80080a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80080aa:	f04f 0900 	mov.w	r9, #0
 80080ae:	e7db      	b.n	8008068 <_printf_float+0x154>
 80080b0:	b913      	cbnz	r3, 80080b8 <_printf_float+0x1a4>
 80080b2:	6822      	ldr	r2, [r4, #0]
 80080b4:	07d2      	lsls	r2, r2, #31
 80080b6:	d501      	bpl.n	80080bc <_printf_float+0x1a8>
 80080b8:	3302      	adds	r3, #2
 80080ba:	e7f4      	b.n	80080a6 <_printf_float+0x192>
 80080bc:	2301      	movs	r3, #1
 80080be:	e7f2      	b.n	80080a6 <_printf_float+0x192>
 80080c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80080c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080c6:	4299      	cmp	r1, r3
 80080c8:	db05      	blt.n	80080d6 <_printf_float+0x1c2>
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	6121      	str	r1, [r4, #16]
 80080ce:	07d8      	lsls	r0, r3, #31
 80080d0:	d5ea      	bpl.n	80080a8 <_printf_float+0x194>
 80080d2:	1c4b      	adds	r3, r1, #1
 80080d4:	e7e7      	b.n	80080a6 <_printf_float+0x192>
 80080d6:	2900      	cmp	r1, #0
 80080d8:	bfd4      	ite	le
 80080da:	f1c1 0202 	rsble	r2, r1, #2
 80080de:	2201      	movgt	r2, #1
 80080e0:	4413      	add	r3, r2
 80080e2:	e7e0      	b.n	80080a6 <_printf_float+0x192>
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	055a      	lsls	r2, r3, #21
 80080e8:	d407      	bmi.n	80080fa <_printf_float+0x1e6>
 80080ea:	6923      	ldr	r3, [r4, #16]
 80080ec:	4642      	mov	r2, r8
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	d12b      	bne.n	8008150 <_printf_float+0x23c>
 80080f8:	e767      	b.n	8007fca <_printf_float+0xb6>
 80080fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80080fe:	f240 80dd 	bls.w	80082bc <_printf_float+0x3a8>
 8008102:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008106:	2200      	movs	r2, #0
 8008108:	2300      	movs	r3, #0
 800810a:	f7f8 fcdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800810e:	2800      	cmp	r0, #0
 8008110:	d033      	beq.n	800817a <_printf_float+0x266>
 8008112:	4a37      	ldr	r2, [pc, #220]	@ (80081f0 <_printf_float+0x2dc>)
 8008114:	2301      	movs	r3, #1
 8008116:	4631      	mov	r1, r6
 8008118:	4628      	mov	r0, r5
 800811a:	47b8      	blx	r7
 800811c:	3001      	adds	r0, #1
 800811e:	f43f af54 	beq.w	8007fca <_printf_float+0xb6>
 8008122:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008126:	4543      	cmp	r3, r8
 8008128:	db02      	blt.n	8008130 <_printf_float+0x21c>
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	07d8      	lsls	r0, r3, #31
 800812e:	d50f      	bpl.n	8008150 <_printf_float+0x23c>
 8008130:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008134:	4631      	mov	r1, r6
 8008136:	4628      	mov	r0, r5
 8008138:	47b8      	blx	r7
 800813a:	3001      	adds	r0, #1
 800813c:	f43f af45 	beq.w	8007fca <_printf_float+0xb6>
 8008140:	f04f 0900 	mov.w	r9, #0
 8008144:	f108 38ff 	add.w	r8, r8, #4294967295
 8008148:	f104 0a1a 	add.w	sl, r4, #26
 800814c:	45c8      	cmp	r8, r9
 800814e:	dc09      	bgt.n	8008164 <_printf_float+0x250>
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	079b      	lsls	r3, r3, #30
 8008154:	f100 8103 	bmi.w	800835e <_printf_float+0x44a>
 8008158:	68e0      	ldr	r0, [r4, #12]
 800815a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800815c:	4298      	cmp	r0, r3
 800815e:	bfb8      	it	lt
 8008160:	4618      	movlt	r0, r3
 8008162:	e734      	b.n	8007fce <_printf_float+0xba>
 8008164:	2301      	movs	r3, #1
 8008166:	4652      	mov	r2, sl
 8008168:	4631      	mov	r1, r6
 800816a:	4628      	mov	r0, r5
 800816c:	47b8      	blx	r7
 800816e:	3001      	adds	r0, #1
 8008170:	f43f af2b 	beq.w	8007fca <_printf_float+0xb6>
 8008174:	f109 0901 	add.w	r9, r9, #1
 8008178:	e7e8      	b.n	800814c <_printf_float+0x238>
 800817a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800817c:	2b00      	cmp	r3, #0
 800817e:	dc39      	bgt.n	80081f4 <_printf_float+0x2e0>
 8008180:	4a1b      	ldr	r2, [pc, #108]	@ (80081f0 <_printf_float+0x2dc>)
 8008182:	2301      	movs	r3, #1
 8008184:	4631      	mov	r1, r6
 8008186:	4628      	mov	r0, r5
 8008188:	47b8      	blx	r7
 800818a:	3001      	adds	r0, #1
 800818c:	f43f af1d 	beq.w	8007fca <_printf_float+0xb6>
 8008190:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008194:	ea59 0303 	orrs.w	r3, r9, r3
 8008198:	d102      	bne.n	80081a0 <_printf_float+0x28c>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	07d9      	lsls	r1, r3, #31
 800819e:	d5d7      	bpl.n	8008150 <_printf_float+0x23c>
 80081a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081a4:	4631      	mov	r1, r6
 80081a6:	4628      	mov	r0, r5
 80081a8:	47b8      	blx	r7
 80081aa:	3001      	adds	r0, #1
 80081ac:	f43f af0d 	beq.w	8007fca <_printf_float+0xb6>
 80081b0:	f04f 0a00 	mov.w	sl, #0
 80081b4:	f104 0b1a 	add.w	fp, r4, #26
 80081b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ba:	425b      	negs	r3, r3
 80081bc:	4553      	cmp	r3, sl
 80081be:	dc01      	bgt.n	80081c4 <_printf_float+0x2b0>
 80081c0:	464b      	mov	r3, r9
 80081c2:	e793      	b.n	80080ec <_printf_float+0x1d8>
 80081c4:	2301      	movs	r3, #1
 80081c6:	465a      	mov	r2, fp
 80081c8:	4631      	mov	r1, r6
 80081ca:	4628      	mov	r0, r5
 80081cc:	47b8      	blx	r7
 80081ce:	3001      	adds	r0, #1
 80081d0:	f43f aefb 	beq.w	8007fca <_printf_float+0xb6>
 80081d4:	f10a 0a01 	add.w	sl, sl, #1
 80081d8:	e7ee      	b.n	80081b8 <_printf_float+0x2a4>
 80081da:	bf00      	nop
 80081dc:	7fefffff 	.word	0x7fefffff
 80081e0:	0800d2a5 	.word	0x0800d2a5
 80081e4:	0800d2a9 	.word	0x0800d2a9
 80081e8:	0800d2ad 	.word	0x0800d2ad
 80081ec:	0800d2b1 	.word	0x0800d2b1
 80081f0:	0800d53f 	.word	0x0800d53f
 80081f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80081f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80081fa:	4553      	cmp	r3, sl
 80081fc:	bfa8      	it	ge
 80081fe:	4653      	movge	r3, sl
 8008200:	2b00      	cmp	r3, #0
 8008202:	4699      	mov	r9, r3
 8008204:	dc36      	bgt.n	8008274 <_printf_float+0x360>
 8008206:	f04f 0b00 	mov.w	fp, #0
 800820a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800820e:	f104 021a 	add.w	r2, r4, #26
 8008212:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008214:	9306      	str	r3, [sp, #24]
 8008216:	eba3 0309 	sub.w	r3, r3, r9
 800821a:	455b      	cmp	r3, fp
 800821c:	dc31      	bgt.n	8008282 <_printf_float+0x36e>
 800821e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008220:	459a      	cmp	sl, r3
 8008222:	dc3a      	bgt.n	800829a <_printf_float+0x386>
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	07da      	lsls	r2, r3, #31
 8008228:	d437      	bmi.n	800829a <_printf_float+0x386>
 800822a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800822c:	ebaa 0903 	sub.w	r9, sl, r3
 8008230:	9b06      	ldr	r3, [sp, #24]
 8008232:	ebaa 0303 	sub.w	r3, sl, r3
 8008236:	4599      	cmp	r9, r3
 8008238:	bfa8      	it	ge
 800823a:	4699      	movge	r9, r3
 800823c:	f1b9 0f00 	cmp.w	r9, #0
 8008240:	dc33      	bgt.n	80082aa <_printf_float+0x396>
 8008242:	f04f 0800 	mov.w	r8, #0
 8008246:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800824a:	f104 0b1a 	add.w	fp, r4, #26
 800824e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008250:	ebaa 0303 	sub.w	r3, sl, r3
 8008254:	eba3 0309 	sub.w	r3, r3, r9
 8008258:	4543      	cmp	r3, r8
 800825a:	f77f af79 	ble.w	8008150 <_printf_float+0x23c>
 800825e:	2301      	movs	r3, #1
 8008260:	465a      	mov	r2, fp
 8008262:	4631      	mov	r1, r6
 8008264:	4628      	mov	r0, r5
 8008266:	47b8      	blx	r7
 8008268:	3001      	adds	r0, #1
 800826a:	f43f aeae 	beq.w	8007fca <_printf_float+0xb6>
 800826e:	f108 0801 	add.w	r8, r8, #1
 8008272:	e7ec      	b.n	800824e <_printf_float+0x33a>
 8008274:	4642      	mov	r2, r8
 8008276:	4631      	mov	r1, r6
 8008278:	4628      	mov	r0, r5
 800827a:	47b8      	blx	r7
 800827c:	3001      	adds	r0, #1
 800827e:	d1c2      	bne.n	8008206 <_printf_float+0x2f2>
 8008280:	e6a3      	b.n	8007fca <_printf_float+0xb6>
 8008282:	2301      	movs	r3, #1
 8008284:	4631      	mov	r1, r6
 8008286:	4628      	mov	r0, r5
 8008288:	9206      	str	r2, [sp, #24]
 800828a:	47b8      	blx	r7
 800828c:	3001      	adds	r0, #1
 800828e:	f43f ae9c 	beq.w	8007fca <_printf_float+0xb6>
 8008292:	9a06      	ldr	r2, [sp, #24]
 8008294:	f10b 0b01 	add.w	fp, fp, #1
 8008298:	e7bb      	b.n	8008212 <_printf_float+0x2fe>
 800829a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800829e:	4631      	mov	r1, r6
 80082a0:	4628      	mov	r0, r5
 80082a2:	47b8      	blx	r7
 80082a4:	3001      	adds	r0, #1
 80082a6:	d1c0      	bne.n	800822a <_printf_float+0x316>
 80082a8:	e68f      	b.n	8007fca <_printf_float+0xb6>
 80082aa:	9a06      	ldr	r2, [sp, #24]
 80082ac:	464b      	mov	r3, r9
 80082ae:	4442      	add	r2, r8
 80082b0:	4631      	mov	r1, r6
 80082b2:	4628      	mov	r0, r5
 80082b4:	47b8      	blx	r7
 80082b6:	3001      	adds	r0, #1
 80082b8:	d1c3      	bne.n	8008242 <_printf_float+0x32e>
 80082ba:	e686      	b.n	8007fca <_printf_float+0xb6>
 80082bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80082c0:	f1ba 0f01 	cmp.w	sl, #1
 80082c4:	dc01      	bgt.n	80082ca <_printf_float+0x3b6>
 80082c6:	07db      	lsls	r3, r3, #31
 80082c8:	d536      	bpl.n	8008338 <_printf_float+0x424>
 80082ca:	2301      	movs	r3, #1
 80082cc:	4642      	mov	r2, r8
 80082ce:	4631      	mov	r1, r6
 80082d0:	4628      	mov	r0, r5
 80082d2:	47b8      	blx	r7
 80082d4:	3001      	adds	r0, #1
 80082d6:	f43f ae78 	beq.w	8007fca <_printf_float+0xb6>
 80082da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082de:	4631      	mov	r1, r6
 80082e0:	4628      	mov	r0, r5
 80082e2:	47b8      	blx	r7
 80082e4:	3001      	adds	r0, #1
 80082e6:	f43f ae70 	beq.w	8007fca <_printf_float+0xb6>
 80082ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80082ee:	2200      	movs	r2, #0
 80082f0:	2300      	movs	r3, #0
 80082f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082f6:	f7f8 fbe7 	bl	8000ac8 <__aeabi_dcmpeq>
 80082fa:	b9c0      	cbnz	r0, 800832e <_printf_float+0x41a>
 80082fc:	4653      	mov	r3, sl
 80082fe:	f108 0201 	add.w	r2, r8, #1
 8008302:	4631      	mov	r1, r6
 8008304:	4628      	mov	r0, r5
 8008306:	47b8      	blx	r7
 8008308:	3001      	adds	r0, #1
 800830a:	d10c      	bne.n	8008326 <_printf_float+0x412>
 800830c:	e65d      	b.n	8007fca <_printf_float+0xb6>
 800830e:	2301      	movs	r3, #1
 8008310:	465a      	mov	r2, fp
 8008312:	4631      	mov	r1, r6
 8008314:	4628      	mov	r0, r5
 8008316:	47b8      	blx	r7
 8008318:	3001      	adds	r0, #1
 800831a:	f43f ae56 	beq.w	8007fca <_printf_float+0xb6>
 800831e:	f108 0801 	add.w	r8, r8, #1
 8008322:	45d0      	cmp	r8, sl
 8008324:	dbf3      	blt.n	800830e <_printf_float+0x3fa>
 8008326:	464b      	mov	r3, r9
 8008328:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800832c:	e6df      	b.n	80080ee <_printf_float+0x1da>
 800832e:	f04f 0800 	mov.w	r8, #0
 8008332:	f104 0b1a 	add.w	fp, r4, #26
 8008336:	e7f4      	b.n	8008322 <_printf_float+0x40e>
 8008338:	2301      	movs	r3, #1
 800833a:	4642      	mov	r2, r8
 800833c:	e7e1      	b.n	8008302 <_printf_float+0x3ee>
 800833e:	2301      	movs	r3, #1
 8008340:	464a      	mov	r2, r9
 8008342:	4631      	mov	r1, r6
 8008344:	4628      	mov	r0, r5
 8008346:	47b8      	blx	r7
 8008348:	3001      	adds	r0, #1
 800834a:	f43f ae3e 	beq.w	8007fca <_printf_float+0xb6>
 800834e:	f108 0801 	add.w	r8, r8, #1
 8008352:	68e3      	ldr	r3, [r4, #12]
 8008354:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008356:	1a5b      	subs	r3, r3, r1
 8008358:	4543      	cmp	r3, r8
 800835a:	dcf0      	bgt.n	800833e <_printf_float+0x42a>
 800835c:	e6fc      	b.n	8008158 <_printf_float+0x244>
 800835e:	f04f 0800 	mov.w	r8, #0
 8008362:	f104 0919 	add.w	r9, r4, #25
 8008366:	e7f4      	b.n	8008352 <_printf_float+0x43e>

08008368 <_printf_common>:
 8008368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800836c:	4616      	mov	r6, r2
 800836e:	4698      	mov	r8, r3
 8008370:	688a      	ldr	r2, [r1, #8]
 8008372:	690b      	ldr	r3, [r1, #16]
 8008374:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008378:	4293      	cmp	r3, r2
 800837a:	bfb8      	it	lt
 800837c:	4613      	movlt	r3, r2
 800837e:	6033      	str	r3, [r6, #0]
 8008380:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008384:	4607      	mov	r7, r0
 8008386:	460c      	mov	r4, r1
 8008388:	b10a      	cbz	r2, 800838e <_printf_common+0x26>
 800838a:	3301      	adds	r3, #1
 800838c:	6033      	str	r3, [r6, #0]
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	0699      	lsls	r1, r3, #26
 8008392:	bf42      	ittt	mi
 8008394:	6833      	ldrmi	r3, [r6, #0]
 8008396:	3302      	addmi	r3, #2
 8008398:	6033      	strmi	r3, [r6, #0]
 800839a:	6825      	ldr	r5, [r4, #0]
 800839c:	f015 0506 	ands.w	r5, r5, #6
 80083a0:	d106      	bne.n	80083b0 <_printf_common+0x48>
 80083a2:	f104 0a19 	add.w	sl, r4, #25
 80083a6:	68e3      	ldr	r3, [r4, #12]
 80083a8:	6832      	ldr	r2, [r6, #0]
 80083aa:	1a9b      	subs	r3, r3, r2
 80083ac:	42ab      	cmp	r3, r5
 80083ae:	dc26      	bgt.n	80083fe <_printf_common+0x96>
 80083b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083b4:	6822      	ldr	r2, [r4, #0]
 80083b6:	3b00      	subs	r3, #0
 80083b8:	bf18      	it	ne
 80083ba:	2301      	movne	r3, #1
 80083bc:	0692      	lsls	r2, r2, #26
 80083be:	d42b      	bmi.n	8008418 <_printf_common+0xb0>
 80083c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083c4:	4641      	mov	r1, r8
 80083c6:	4638      	mov	r0, r7
 80083c8:	47c8      	blx	r9
 80083ca:	3001      	adds	r0, #1
 80083cc:	d01e      	beq.n	800840c <_printf_common+0xa4>
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	6922      	ldr	r2, [r4, #16]
 80083d2:	f003 0306 	and.w	r3, r3, #6
 80083d6:	2b04      	cmp	r3, #4
 80083d8:	bf02      	ittt	eq
 80083da:	68e5      	ldreq	r5, [r4, #12]
 80083dc:	6833      	ldreq	r3, [r6, #0]
 80083de:	1aed      	subeq	r5, r5, r3
 80083e0:	68a3      	ldr	r3, [r4, #8]
 80083e2:	bf0c      	ite	eq
 80083e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083e8:	2500      	movne	r5, #0
 80083ea:	4293      	cmp	r3, r2
 80083ec:	bfc4      	itt	gt
 80083ee:	1a9b      	subgt	r3, r3, r2
 80083f0:	18ed      	addgt	r5, r5, r3
 80083f2:	2600      	movs	r6, #0
 80083f4:	341a      	adds	r4, #26
 80083f6:	42b5      	cmp	r5, r6
 80083f8:	d11a      	bne.n	8008430 <_printf_common+0xc8>
 80083fa:	2000      	movs	r0, #0
 80083fc:	e008      	b.n	8008410 <_printf_common+0xa8>
 80083fe:	2301      	movs	r3, #1
 8008400:	4652      	mov	r2, sl
 8008402:	4641      	mov	r1, r8
 8008404:	4638      	mov	r0, r7
 8008406:	47c8      	blx	r9
 8008408:	3001      	adds	r0, #1
 800840a:	d103      	bne.n	8008414 <_printf_common+0xac>
 800840c:	f04f 30ff 	mov.w	r0, #4294967295
 8008410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008414:	3501      	adds	r5, #1
 8008416:	e7c6      	b.n	80083a6 <_printf_common+0x3e>
 8008418:	18e1      	adds	r1, r4, r3
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	2030      	movs	r0, #48	@ 0x30
 800841e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008422:	4422      	add	r2, r4
 8008424:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008428:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800842c:	3302      	adds	r3, #2
 800842e:	e7c7      	b.n	80083c0 <_printf_common+0x58>
 8008430:	2301      	movs	r3, #1
 8008432:	4622      	mov	r2, r4
 8008434:	4641      	mov	r1, r8
 8008436:	4638      	mov	r0, r7
 8008438:	47c8      	blx	r9
 800843a:	3001      	adds	r0, #1
 800843c:	d0e6      	beq.n	800840c <_printf_common+0xa4>
 800843e:	3601      	adds	r6, #1
 8008440:	e7d9      	b.n	80083f6 <_printf_common+0x8e>
	...

08008444 <_printf_i>:
 8008444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008448:	7e0f      	ldrb	r7, [r1, #24]
 800844a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800844c:	2f78      	cmp	r7, #120	@ 0x78
 800844e:	4691      	mov	r9, r2
 8008450:	4680      	mov	r8, r0
 8008452:	460c      	mov	r4, r1
 8008454:	469a      	mov	sl, r3
 8008456:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800845a:	d807      	bhi.n	800846c <_printf_i+0x28>
 800845c:	2f62      	cmp	r7, #98	@ 0x62
 800845e:	d80a      	bhi.n	8008476 <_printf_i+0x32>
 8008460:	2f00      	cmp	r7, #0
 8008462:	f000 80d2 	beq.w	800860a <_printf_i+0x1c6>
 8008466:	2f58      	cmp	r7, #88	@ 0x58
 8008468:	f000 80b9 	beq.w	80085de <_printf_i+0x19a>
 800846c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008470:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008474:	e03a      	b.n	80084ec <_printf_i+0xa8>
 8008476:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800847a:	2b15      	cmp	r3, #21
 800847c:	d8f6      	bhi.n	800846c <_printf_i+0x28>
 800847e:	a101      	add	r1, pc, #4	@ (adr r1, 8008484 <_printf_i+0x40>)
 8008480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008484:	080084dd 	.word	0x080084dd
 8008488:	080084f1 	.word	0x080084f1
 800848c:	0800846d 	.word	0x0800846d
 8008490:	0800846d 	.word	0x0800846d
 8008494:	0800846d 	.word	0x0800846d
 8008498:	0800846d 	.word	0x0800846d
 800849c:	080084f1 	.word	0x080084f1
 80084a0:	0800846d 	.word	0x0800846d
 80084a4:	0800846d 	.word	0x0800846d
 80084a8:	0800846d 	.word	0x0800846d
 80084ac:	0800846d 	.word	0x0800846d
 80084b0:	080085f1 	.word	0x080085f1
 80084b4:	0800851b 	.word	0x0800851b
 80084b8:	080085ab 	.word	0x080085ab
 80084bc:	0800846d 	.word	0x0800846d
 80084c0:	0800846d 	.word	0x0800846d
 80084c4:	08008613 	.word	0x08008613
 80084c8:	0800846d 	.word	0x0800846d
 80084cc:	0800851b 	.word	0x0800851b
 80084d0:	0800846d 	.word	0x0800846d
 80084d4:	0800846d 	.word	0x0800846d
 80084d8:	080085b3 	.word	0x080085b3
 80084dc:	6833      	ldr	r3, [r6, #0]
 80084de:	1d1a      	adds	r2, r3, #4
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	6032      	str	r2, [r6, #0]
 80084e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084ec:	2301      	movs	r3, #1
 80084ee:	e09d      	b.n	800862c <_printf_i+0x1e8>
 80084f0:	6833      	ldr	r3, [r6, #0]
 80084f2:	6820      	ldr	r0, [r4, #0]
 80084f4:	1d19      	adds	r1, r3, #4
 80084f6:	6031      	str	r1, [r6, #0]
 80084f8:	0606      	lsls	r6, r0, #24
 80084fa:	d501      	bpl.n	8008500 <_printf_i+0xbc>
 80084fc:	681d      	ldr	r5, [r3, #0]
 80084fe:	e003      	b.n	8008508 <_printf_i+0xc4>
 8008500:	0645      	lsls	r5, r0, #25
 8008502:	d5fb      	bpl.n	80084fc <_printf_i+0xb8>
 8008504:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008508:	2d00      	cmp	r5, #0
 800850a:	da03      	bge.n	8008514 <_printf_i+0xd0>
 800850c:	232d      	movs	r3, #45	@ 0x2d
 800850e:	426d      	negs	r5, r5
 8008510:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008514:	4859      	ldr	r0, [pc, #356]	@ (800867c <_printf_i+0x238>)
 8008516:	230a      	movs	r3, #10
 8008518:	e011      	b.n	800853e <_printf_i+0xfa>
 800851a:	6821      	ldr	r1, [r4, #0]
 800851c:	6833      	ldr	r3, [r6, #0]
 800851e:	0608      	lsls	r0, r1, #24
 8008520:	f853 5b04 	ldr.w	r5, [r3], #4
 8008524:	d402      	bmi.n	800852c <_printf_i+0xe8>
 8008526:	0649      	lsls	r1, r1, #25
 8008528:	bf48      	it	mi
 800852a:	b2ad      	uxthmi	r5, r5
 800852c:	2f6f      	cmp	r7, #111	@ 0x6f
 800852e:	4853      	ldr	r0, [pc, #332]	@ (800867c <_printf_i+0x238>)
 8008530:	6033      	str	r3, [r6, #0]
 8008532:	bf14      	ite	ne
 8008534:	230a      	movne	r3, #10
 8008536:	2308      	moveq	r3, #8
 8008538:	2100      	movs	r1, #0
 800853a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800853e:	6866      	ldr	r6, [r4, #4]
 8008540:	60a6      	str	r6, [r4, #8]
 8008542:	2e00      	cmp	r6, #0
 8008544:	bfa2      	ittt	ge
 8008546:	6821      	ldrge	r1, [r4, #0]
 8008548:	f021 0104 	bicge.w	r1, r1, #4
 800854c:	6021      	strge	r1, [r4, #0]
 800854e:	b90d      	cbnz	r5, 8008554 <_printf_i+0x110>
 8008550:	2e00      	cmp	r6, #0
 8008552:	d04b      	beq.n	80085ec <_printf_i+0x1a8>
 8008554:	4616      	mov	r6, r2
 8008556:	fbb5 f1f3 	udiv	r1, r5, r3
 800855a:	fb03 5711 	mls	r7, r3, r1, r5
 800855e:	5dc7      	ldrb	r7, [r0, r7]
 8008560:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008564:	462f      	mov	r7, r5
 8008566:	42bb      	cmp	r3, r7
 8008568:	460d      	mov	r5, r1
 800856a:	d9f4      	bls.n	8008556 <_printf_i+0x112>
 800856c:	2b08      	cmp	r3, #8
 800856e:	d10b      	bne.n	8008588 <_printf_i+0x144>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	07df      	lsls	r7, r3, #31
 8008574:	d508      	bpl.n	8008588 <_printf_i+0x144>
 8008576:	6923      	ldr	r3, [r4, #16]
 8008578:	6861      	ldr	r1, [r4, #4]
 800857a:	4299      	cmp	r1, r3
 800857c:	bfde      	ittt	le
 800857e:	2330      	movle	r3, #48	@ 0x30
 8008580:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008584:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008588:	1b92      	subs	r2, r2, r6
 800858a:	6122      	str	r2, [r4, #16]
 800858c:	f8cd a000 	str.w	sl, [sp]
 8008590:	464b      	mov	r3, r9
 8008592:	aa03      	add	r2, sp, #12
 8008594:	4621      	mov	r1, r4
 8008596:	4640      	mov	r0, r8
 8008598:	f7ff fee6 	bl	8008368 <_printf_common>
 800859c:	3001      	adds	r0, #1
 800859e:	d14a      	bne.n	8008636 <_printf_i+0x1f2>
 80085a0:	f04f 30ff 	mov.w	r0, #4294967295
 80085a4:	b004      	add	sp, #16
 80085a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	f043 0320 	orr.w	r3, r3, #32
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	4833      	ldr	r0, [pc, #204]	@ (8008680 <_printf_i+0x23c>)
 80085b4:	2778      	movs	r7, #120	@ 0x78
 80085b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	6831      	ldr	r1, [r6, #0]
 80085be:	061f      	lsls	r7, r3, #24
 80085c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80085c4:	d402      	bmi.n	80085cc <_printf_i+0x188>
 80085c6:	065f      	lsls	r7, r3, #25
 80085c8:	bf48      	it	mi
 80085ca:	b2ad      	uxthmi	r5, r5
 80085cc:	6031      	str	r1, [r6, #0]
 80085ce:	07d9      	lsls	r1, r3, #31
 80085d0:	bf44      	itt	mi
 80085d2:	f043 0320 	orrmi.w	r3, r3, #32
 80085d6:	6023      	strmi	r3, [r4, #0]
 80085d8:	b11d      	cbz	r5, 80085e2 <_printf_i+0x19e>
 80085da:	2310      	movs	r3, #16
 80085dc:	e7ac      	b.n	8008538 <_printf_i+0xf4>
 80085de:	4827      	ldr	r0, [pc, #156]	@ (800867c <_printf_i+0x238>)
 80085e0:	e7e9      	b.n	80085b6 <_printf_i+0x172>
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	f023 0320 	bic.w	r3, r3, #32
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	e7f6      	b.n	80085da <_printf_i+0x196>
 80085ec:	4616      	mov	r6, r2
 80085ee:	e7bd      	b.n	800856c <_printf_i+0x128>
 80085f0:	6833      	ldr	r3, [r6, #0]
 80085f2:	6825      	ldr	r5, [r4, #0]
 80085f4:	6961      	ldr	r1, [r4, #20]
 80085f6:	1d18      	adds	r0, r3, #4
 80085f8:	6030      	str	r0, [r6, #0]
 80085fa:	062e      	lsls	r6, r5, #24
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	d501      	bpl.n	8008604 <_printf_i+0x1c0>
 8008600:	6019      	str	r1, [r3, #0]
 8008602:	e002      	b.n	800860a <_printf_i+0x1c6>
 8008604:	0668      	lsls	r0, r5, #25
 8008606:	d5fb      	bpl.n	8008600 <_printf_i+0x1bc>
 8008608:	8019      	strh	r1, [r3, #0]
 800860a:	2300      	movs	r3, #0
 800860c:	6123      	str	r3, [r4, #16]
 800860e:	4616      	mov	r6, r2
 8008610:	e7bc      	b.n	800858c <_printf_i+0x148>
 8008612:	6833      	ldr	r3, [r6, #0]
 8008614:	1d1a      	adds	r2, r3, #4
 8008616:	6032      	str	r2, [r6, #0]
 8008618:	681e      	ldr	r6, [r3, #0]
 800861a:	6862      	ldr	r2, [r4, #4]
 800861c:	2100      	movs	r1, #0
 800861e:	4630      	mov	r0, r6
 8008620:	f7f7 fdd6 	bl	80001d0 <memchr>
 8008624:	b108      	cbz	r0, 800862a <_printf_i+0x1e6>
 8008626:	1b80      	subs	r0, r0, r6
 8008628:	6060      	str	r0, [r4, #4]
 800862a:	6863      	ldr	r3, [r4, #4]
 800862c:	6123      	str	r3, [r4, #16]
 800862e:	2300      	movs	r3, #0
 8008630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008634:	e7aa      	b.n	800858c <_printf_i+0x148>
 8008636:	6923      	ldr	r3, [r4, #16]
 8008638:	4632      	mov	r2, r6
 800863a:	4649      	mov	r1, r9
 800863c:	4640      	mov	r0, r8
 800863e:	47d0      	blx	sl
 8008640:	3001      	adds	r0, #1
 8008642:	d0ad      	beq.n	80085a0 <_printf_i+0x15c>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	079b      	lsls	r3, r3, #30
 8008648:	d413      	bmi.n	8008672 <_printf_i+0x22e>
 800864a:	68e0      	ldr	r0, [r4, #12]
 800864c:	9b03      	ldr	r3, [sp, #12]
 800864e:	4298      	cmp	r0, r3
 8008650:	bfb8      	it	lt
 8008652:	4618      	movlt	r0, r3
 8008654:	e7a6      	b.n	80085a4 <_printf_i+0x160>
 8008656:	2301      	movs	r3, #1
 8008658:	4632      	mov	r2, r6
 800865a:	4649      	mov	r1, r9
 800865c:	4640      	mov	r0, r8
 800865e:	47d0      	blx	sl
 8008660:	3001      	adds	r0, #1
 8008662:	d09d      	beq.n	80085a0 <_printf_i+0x15c>
 8008664:	3501      	adds	r5, #1
 8008666:	68e3      	ldr	r3, [r4, #12]
 8008668:	9903      	ldr	r1, [sp, #12]
 800866a:	1a5b      	subs	r3, r3, r1
 800866c:	42ab      	cmp	r3, r5
 800866e:	dcf2      	bgt.n	8008656 <_printf_i+0x212>
 8008670:	e7eb      	b.n	800864a <_printf_i+0x206>
 8008672:	2500      	movs	r5, #0
 8008674:	f104 0619 	add.w	r6, r4, #25
 8008678:	e7f5      	b.n	8008666 <_printf_i+0x222>
 800867a:	bf00      	nop
 800867c:	0800d2b5 	.word	0x0800d2b5
 8008680:	0800d2c6 	.word	0x0800d2c6

08008684 <_scanf_float>:
 8008684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	b087      	sub	sp, #28
 800868a:	4617      	mov	r7, r2
 800868c:	9303      	str	r3, [sp, #12]
 800868e:	688b      	ldr	r3, [r1, #8]
 8008690:	1e5a      	subs	r2, r3, #1
 8008692:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008696:	bf81      	itttt	hi
 8008698:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800869c:	eb03 0b05 	addhi.w	fp, r3, r5
 80086a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80086a4:	608b      	strhi	r3, [r1, #8]
 80086a6:	680b      	ldr	r3, [r1, #0]
 80086a8:	460a      	mov	r2, r1
 80086aa:	f04f 0500 	mov.w	r5, #0
 80086ae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80086b2:	f842 3b1c 	str.w	r3, [r2], #28
 80086b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80086ba:	4680      	mov	r8, r0
 80086bc:	460c      	mov	r4, r1
 80086be:	bf98      	it	ls
 80086c0:	f04f 0b00 	movls.w	fp, #0
 80086c4:	9201      	str	r2, [sp, #4]
 80086c6:	4616      	mov	r6, r2
 80086c8:	46aa      	mov	sl, r5
 80086ca:	46a9      	mov	r9, r5
 80086cc:	9502      	str	r5, [sp, #8]
 80086ce:	68a2      	ldr	r2, [r4, #8]
 80086d0:	b152      	cbz	r2, 80086e8 <_scanf_float+0x64>
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	2b4e      	cmp	r3, #78	@ 0x4e
 80086d8:	d864      	bhi.n	80087a4 <_scanf_float+0x120>
 80086da:	2b40      	cmp	r3, #64	@ 0x40
 80086dc:	d83c      	bhi.n	8008758 <_scanf_float+0xd4>
 80086de:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80086e2:	b2c8      	uxtb	r0, r1
 80086e4:	280e      	cmp	r0, #14
 80086e6:	d93a      	bls.n	800875e <_scanf_float+0xda>
 80086e8:	f1b9 0f00 	cmp.w	r9, #0
 80086ec:	d003      	beq.n	80086f6 <_scanf_float+0x72>
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086fa:	f1ba 0f01 	cmp.w	sl, #1
 80086fe:	f200 8117 	bhi.w	8008930 <_scanf_float+0x2ac>
 8008702:	9b01      	ldr	r3, [sp, #4]
 8008704:	429e      	cmp	r6, r3
 8008706:	f200 8108 	bhi.w	800891a <_scanf_float+0x296>
 800870a:	2001      	movs	r0, #1
 800870c:	b007      	add	sp, #28
 800870e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008712:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008716:	2a0d      	cmp	r2, #13
 8008718:	d8e6      	bhi.n	80086e8 <_scanf_float+0x64>
 800871a:	a101      	add	r1, pc, #4	@ (adr r1, 8008720 <_scanf_float+0x9c>)
 800871c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008720:	08008867 	.word	0x08008867
 8008724:	080086e9 	.word	0x080086e9
 8008728:	080086e9 	.word	0x080086e9
 800872c:	080086e9 	.word	0x080086e9
 8008730:	080088c7 	.word	0x080088c7
 8008734:	0800889f 	.word	0x0800889f
 8008738:	080086e9 	.word	0x080086e9
 800873c:	080086e9 	.word	0x080086e9
 8008740:	08008875 	.word	0x08008875
 8008744:	080086e9 	.word	0x080086e9
 8008748:	080086e9 	.word	0x080086e9
 800874c:	080086e9 	.word	0x080086e9
 8008750:	080086e9 	.word	0x080086e9
 8008754:	0800882d 	.word	0x0800882d
 8008758:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800875c:	e7db      	b.n	8008716 <_scanf_float+0x92>
 800875e:	290e      	cmp	r1, #14
 8008760:	d8c2      	bhi.n	80086e8 <_scanf_float+0x64>
 8008762:	a001      	add	r0, pc, #4	@ (adr r0, 8008768 <_scanf_float+0xe4>)
 8008764:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008768:	0800881d 	.word	0x0800881d
 800876c:	080086e9 	.word	0x080086e9
 8008770:	0800881d 	.word	0x0800881d
 8008774:	080088b3 	.word	0x080088b3
 8008778:	080086e9 	.word	0x080086e9
 800877c:	080087c5 	.word	0x080087c5
 8008780:	08008803 	.word	0x08008803
 8008784:	08008803 	.word	0x08008803
 8008788:	08008803 	.word	0x08008803
 800878c:	08008803 	.word	0x08008803
 8008790:	08008803 	.word	0x08008803
 8008794:	08008803 	.word	0x08008803
 8008798:	08008803 	.word	0x08008803
 800879c:	08008803 	.word	0x08008803
 80087a0:	08008803 	.word	0x08008803
 80087a4:	2b6e      	cmp	r3, #110	@ 0x6e
 80087a6:	d809      	bhi.n	80087bc <_scanf_float+0x138>
 80087a8:	2b60      	cmp	r3, #96	@ 0x60
 80087aa:	d8b2      	bhi.n	8008712 <_scanf_float+0x8e>
 80087ac:	2b54      	cmp	r3, #84	@ 0x54
 80087ae:	d07b      	beq.n	80088a8 <_scanf_float+0x224>
 80087b0:	2b59      	cmp	r3, #89	@ 0x59
 80087b2:	d199      	bne.n	80086e8 <_scanf_float+0x64>
 80087b4:	2d07      	cmp	r5, #7
 80087b6:	d197      	bne.n	80086e8 <_scanf_float+0x64>
 80087b8:	2508      	movs	r5, #8
 80087ba:	e02c      	b.n	8008816 <_scanf_float+0x192>
 80087bc:	2b74      	cmp	r3, #116	@ 0x74
 80087be:	d073      	beq.n	80088a8 <_scanf_float+0x224>
 80087c0:	2b79      	cmp	r3, #121	@ 0x79
 80087c2:	e7f6      	b.n	80087b2 <_scanf_float+0x12e>
 80087c4:	6821      	ldr	r1, [r4, #0]
 80087c6:	05c8      	lsls	r0, r1, #23
 80087c8:	d51b      	bpl.n	8008802 <_scanf_float+0x17e>
 80087ca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80087ce:	6021      	str	r1, [r4, #0]
 80087d0:	f109 0901 	add.w	r9, r9, #1
 80087d4:	f1bb 0f00 	cmp.w	fp, #0
 80087d8:	d003      	beq.n	80087e2 <_scanf_float+0x15e>
 80087da:	3201      	adds	r2, #1
 80087dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087e0:	60a2      	str	r2, [r4, #8]
 80087e2:	68a3      	ldr	r3, [r4, #8]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	60a3      	str	r3, [r4, #8]
 80087e8:	6923      	ldr	r3, [r4, #16]
 80087ea:	3301      	adds	r3, #1
 80087ec:	6123      	str	r3, [r4, #16]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	607b      	str	r3, [r7, #4]
 80087f6:	f340 8087 	ble.w	8008908 <_scanf_float+0x284>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	3301      	adds	r3, #1
 80087fe:	603b      	str	r3, [r7, #0]
 8008800:	e765      	b.n	80086ce <_scanf_float+0x4a>
 8008802:	eb1a 0105 	adds.w	r1, sl, r5
 8008806:	f47f af6f 	bne.w	80086e8 <_scanf_float+0x64>
 800880a:	6822      	ldr	r2, [r4, #0]
 800880c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008810:	6022      	str	r2, [r4, #0]
 8008812:	460d      	mov	r5, r1
 8008814:	468a      	mov	sl, r1
 8008816:	f806 3b01 	strb.w	r3, [r6], #1
 800881a:	e7e2      	b.n	80087e2 <_scanf_float+0x15e>
 800881c:	6822      	ldr	r2, [r4, #0]
 800881e:	0610      	lsls	r0, r2, #24
 8008820:	f57f af62 	bpl.w	80086e8 <_scanf_float+0x64>
 8008824:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008828:	6022      	str	r2, [r4, #0]
 800882a:	e7f4      	b.n	8008816 <_scanf_float+0x192>
 800882c:	f1ba 0f00 	cmp.w	sl, #0
 8008830:	d10e      	bne.n	8008850 <_scanf_float+0x1cc>
 8008832:	f1b9 0f00 	cmp.w	r9, #0
 8008836:	d10e      	bne.n	8008856 <_scanf_float+0x1d2>
 8008838:	6822      	ldr	r2, [r4, #0]
 800883a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800883e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008842:	d108      	bne.n	8008856 <_scanf_float+0x1d2>
 8008844:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008848:	6022      	str	r2, [r4, #0]
 800884a:	f04f 0a01 	mov.w	sl, #1
 800884e:	e7e2      	b.n	8008816 <_scanf_float+0x192>
 8008850:	f1ba 0f02 	cmp.w	sl, #2
 8008854:	d055      	beq.n	8008902 <_scanf_float+0x27e>
 8008856:	2d01      	cmp	r5, #1
 8008858:	d002      	beq.n	8008860 <_scanf_float+0x1dc>
 800885a:	2d04      	cmp	r5, #4
 800885c:	f47f af44 	bne.w	80086e8 <_scanf_float+0x64>
 8008860:	3501      	adds	r5, #1
 8008862:	b2ed      	uxtb	r5, r5
 8008864:	e7d7      	b.n	8008816 <_scanf_float+0x192>
 8008866:	f1ba 0f01 	cmp.w	sl, #1
 800886a:	f47f af3d 	bne.w	80086e8 <_scanf_float+0x64>
 800886e:	f04f 0a02 	mov.w	sl, #2
 8008872:	e7d0      	b.n	8008816 <_scanf_float+0x192>
 8008874:	b97d      	cbnz	r5, 8008896 <_scanf_float+0x212>
 8008876:	f1b9 0f00 	cmp.w	r9, #0
 800887a:	f47f af38 	bne.w	80086ee <_scanf_float+0x6a>
 800887e:	6822      	ldr	r2, [r4, #0]
 8008880:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008884:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008888:	f040 8108 	bne.w	8008a9c <_scanf_float+0x418>
 800888c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008890:	6022      	str	r2, [r4, #0]
 8008892:	2501      	movs	r5, #1
 8008894:	e7bf      	b.n	8008816 <_scanf_float+0x192>
 8008896:	2d03      	cmp	r5, #3
 8008898:	d0e2      	beq.n	8008860 <_scanf_float+0x1dc>
 800889a:	2d05      	cmp	r5, #5
 800889c:	e7de      	b.n	800885c <_scanf_float+0x1d8>
 800889e:	2d02      	cmp	r5, #2
 80088a0:	f47f af22 	bne.w	80086e8 <_scanf_float+0x64>
 80088a4:	2503      	movs	r5, #3
 80088a6:	e7b6      	b.n	8008816 <_scanf_float+0x192>
 80088a8:	2d06      	cmp	r5, #6
 80088aa:	f47f af1d 	bne.w	80086e8 <_scanf_float+0x64>
 80088ae:	2507      	movs	r5, #7
 80088b0:	e7b1      	b.n	8008816 <_scanf_float+0x192>
 80088b2:	6822      	ldr	r2, [r4, #0]
 80088b4:	0591      	lsls	r1, r2, #22
 80088b6:	f57f af17 	bpl.w	80086e8 <_scanf_float+0x64>
 80088ba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80088be:	6022      	str	r2, [r4, #0]
 80088c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80088c4:	e7a7      	b.n	8008816 <_scanf_float+0x192>
 80088c6:	6822      	ldr	r2, [r4, #0]
 80088c8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80088cc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80088d0:	d006      	beq.n	80088e0 <_scanf_float+0x25c>
 80088d2:	0550      	lsls	r0, r2, #21
 80088d4:	f57f af08 	bpl.w	80086e8 <_scanf_float+0x64>
 80088d8:	f1b9 0f00 	cmp.w	r9, #0
 80088dc:	f000 80de 	beq.w	8008a9c <_scanf_float+0x418>
 80088e0:	0591      	lsls	r1, r2, #22
 80088e2:	bf58      	it	pl
 80088e4:	9902      	ldrpl	r1, [sp, #8]
 80088e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80088ea:	bf58      	it	pl
 80088ec:	eba9 0101 	subpl.w	r1, r9, r1
 80088f0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80088f4:	bf58      	it	pl
 80088f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80088fa:	6022      	str	r2, [r4, #0]
 80088fc:	f04f 0900 	mov.w	r9, #0
 8008900:	e789      	b.n	8008816 <_scanf_float+0x192>
 8008902:	f04f 0a03 	mov.w	sl, #3
 8008906:	e786      	b.n	8008816 <_scanf_float+0x192>
 8008908:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800890c:	4639      	mov	r1, r7
 800890e:	4640      	mov	r0, r8
 8008910:	4798      	blx	r3
 8008912:	2800      	cmp	r0, #0
 8008914:	f43f aedb 	beq.w	80086ce <_scanf_float+0x4a>
 8008918:	e6e6      	b.n	80086e8 <_scanf_float+0x64>
 800891a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800891e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008922:	463a      	mov	r2, r7
 8008924:	4640      	mov	r0, r8
 8008926:	4798      	blx	r3
 8008928:	6923      	ldr	r3, [r4, #16]
 800892a:	3b01      	subs	r3, #1
 800892c:	6123      	str	r3, [r4, #16]
 800892e:	e6e8      	b.n	8008702 <_scanf_float+0x7e>
 8008930:	1e6b      	subs	r3, r5, #1
 8008932:	2b06      	cmp	r3, #6
 8008934:	d824      	bhi.n	8008980 <_scanf_float+0x2fc>
 8008936:	2d02      	cmp	r5, #2
 8008938:	d836      	bhi.n	80089a8 <_scanf_float+0x324>
 800893a:	9b01      	ldr	r3, [sp, #4]
 800893c:	429e      	cmp	r6, r3
 800893e:	f67f aee4 	bls.w	800870a <_scanf_float+0x86>
 8008942:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008946:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800894a:	463a      	mov	r2, r7
 800894c:	4640      	mov	r0, r8
 800894e:	4798      	blx	r3
 8008950:	6923      	ldr	r3, [r4, #16]
 8008952:	3b01      	subs	r3, #1
 8008954:	6123      	str	r3, [r4, #16]
 8008956:	e7f0      	b.n	800893a <_scanf_float+0x2b6>
 8008958:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800895c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008960:	463a      	mov	r2, r7
 8008962:	4640      	mov	r0, r8
 8008964:	4798      	blx	r3
 8008966:	6923      	ldr	r3, [r4, #16]
 8008968:	3b01      	subs	r3, #1
 800896a:	6123      	str	r3, [r4, #16]
 800896c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008970:	fa5f fa8a 	uxtb.w	sl, sl
 8008974:	f1ba 0f02 	cmp.w	sl, #2
 8008978:	d1ee      	bne.n	8008958 <_scanf_float+0x2d4>
 800897a:	3d03      	subs	r5, #3
 800897c:	b2ed      	uxtb	r5, r5
 800897e:	1b76      	subs	r6, r6, r5
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	05da      	lsls	r2, r3, #23
 8008984:	d530      	bpl.n	80089e8 <_scanf_float+0x364>
 8008986:	055b      	lsls	r3, r3, #21
 8008988:	d511      	bpl.n	80089ae <_scanf_float+0x32a>
 800898a:	9b01      	ldr	r3, [sp, #4]
 800898c:	429e      	cmp	r6, r3
 800898e:	f67f aebc 	bls.w	800870a <_scanf_float+0x86>
 8008992:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008996:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800899a:	463a      	mov	r2, r7
 800899c:	4640      	mov	r0, r8
 800899e:	4798      	blx	r3
 80089a0:	6923      	ldr	r3, [r4, #16]
 80089a2:	3b01      	subs	r3, #1
 80089a4:	6123      	str	r3, [r4, #16]
 80089a6:	e7f0      	b.n	800898a <_scanf_float+0x306>
 80089a8:	46aa      	mov	sl, r5
 80089aa:	46b3      	mov	fp, r6
 80089ac:	e7de      	b.n	800896c <_scanf_float+0x2e8>
 80089ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80089b2:	6923      	ldr	r3, [r4, #16]
 80089b4:	2965      	cmp	r1, #101	@ 0x65
 80089b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80089ba:	f106 35ff 	add.w	r5, r6, #4294967295
 80089be:	6123      	str	r3, [r4, #16]
 80089c0:	d00c      	beq.n	80089dc <_scanf_float+0x358>
 80089c2:	2945      	cmp	r1, #69	@ 0x45
 80089c4:	d00a      	beq.n	80089dc <_scanf_float+0x358>
 80089c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089ca:	463a      	mov	r2, r7
 80089cc:	4640      	mov	r0, r8
 80089ce:	4798      	blx	r3
 80089d0:	6923      	ldr	r3, [r4, #16]
 80089d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	1eb5      	subs	r5, r6, #2
 80089da:	6123      	str	r3, [r4, #16]
 80089dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089e0:	463a      	mov	r2, r7
 80089e2:	4640      	mov	r0, r8
 80089e4:	4798      	blx	r3
 80089e6:	462e      	mov	r6, r5
 80089e8:	6822      	ldr	r2, [r4, #0]
 80089ea:	f012 0210 	ands.w	r2, r2, #16
 80089ee:	d001      	beq.n	80089f4 <_scanf_float+0x370>
 80089f0:	2000      	movs	r0, #0
 80089f2:	e68b      	b.n	800870c <_scanf_float+0x88>
 80089f4:	7032      	strb	r2, [r6, #0]
 80089f6:	6823      	ldr	r3, [r4, #0]
 80089f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80089fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a00:	d11c      	bne.n	8008a3c <_scanf_float+0x3b8>
 8008a02:	9b02      	ldr	r3, [sp, #8]
 8008a04:	454b      	cmp	r3, r9
 8008a06:	eba3 0209 	sub.w	r2, r3, r9
 8008a0a:	d123      	bne.n	8008a54 <_scanf_float+0x3d0>
 8008a0c:	9901      	ldr	r1, [sp, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	4640      	mov	r0, r8
 8008a12:	f002 fe09 	bl	800b628 <_strtod_r>
 8008a16:	9b03      	ldr	r3, [sp, #12]
 8008a18:	6821      	ldr	r1, [r4, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f011 0f02 	tst.w	r1, #2
 8008a20:	ec57 6b10 	vmov	r6, r7, d0
 8008a24:	f103 0204 	add.w	r2, r3, #4
 8008a28:	d01f      	beq.n	8008a6a <_scanf_float+0x3e6>
 8008a2a:	9903      	ldr	r1, [sp, #12]
 8008a2c:	600a      	str	r2, [r1, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	e9c3 6700 	strd	r6, r7, [r3]
 8008a34:	68e3      	ldr	r3, [r4, #12]
 8008a36:	3301      	adds	r3, #1
 8008a38:	60e3      	str	r3, [r4, #12]
 8008a3a:	e7d9      	b.n	80089f0 <_scanf_float+0x36c>
 8008a3c:	9b04      	ldr	r3, [sp, #16]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0e4      	beq.n	8008a0c <_scanf_float+0x388>
 8008a42:	9905      	ldr	r1, [sp, #20]
 8008a44:	230a      	movs	r3, #10
 8008a46:	3101      	adds	r1, #1
 8008a48:	4640      	mov	r0, r8
 8008a4a:	f7ff f9b7 	bl	8007dbc <_strtol_r>
 8008a4e:	9b04      	ldr	r3, [sp, #16]
 8008a50:	9e05      	ldr	r6, [sp, #20]
 8008a52:	1ac2      	subs	r2, r0, r3
 8008a54:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008a58:	429e      	cmp	r6, r3
 8008a5a:	bf28      	it	cs
 8008a5c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008a60:	4910      	ldr	r1, [pc, #64]	@ (8008aa4 <_scanf_float+0x420>)
 8008a62:	4630      	mov	r0, r6
 8008a64:	f000 fa14 	bl	8008e90 <siprintf>
 8008a68:	e7d0      	b.n	8008a0c <_scanf_float+0x388>
 8008a6a:	f011 0f04 	tst.w	r1, #4
 8008a6e:	9903      	ldr	r1, [sp, #12]
 8008a70:	600a      	str	r2, [r1, #0]
 8008a72:	d1dc      	bne.n	8008a2e <_scanf_float+0x3aa>
 8008a74:	681d      	ldr	r5, [r3, #0]
 8008a76:	4632      	mov	r2, r6
 8008a78:	463b      	mov	r3, r7
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	4639      	mov	r1, r7
 8008a7e:	f7f8 f855 	bl	8000b2c <__aeabi_dcmpun>
 8008a82:	b128      	cbz	r0, 8008a90 <_scanf_float+0x40c>
 8008a84:	4808      	ldr	r0, [pc, #32]	@ (8008aa8 <_scanf_float+0x424>)
 8008a86:	f000 fbc7 	bl	8009218 <nanf>
 8008a8a:	ed85 0a00 	vstr	s0, [r5]
 8008a8e:	e7d1      	b.n	8008a34 <_scanf_float+0x3b0>
 8008a90:	4630      	mov	r0, r6
 8008a92:	4639      	mov	r1, r7
 8008a94:	f7f8 f8a8 	bl	8000be8 <__aeabi_d2f>
 8008a98:	6028      	str	r0, [r5, #0]
 8008a9a:	e7cb      	b.n	8008a34 <_scanf_float+0x3b0>
 8008a9c:	f04f 0900 	mov.w	r9, #0
 8008aa0:	e629      	b.n	80086f6 <_scanf_float+0x72>
 8008aa2:	bf00      	nop
 8008aa4:	0800d2d7 	.word	0x0800d2d7
 8008aa8:	0800d587 	.word	0x0800d587

08008aac <__sflush_r>:
 8008aac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab4:	0716      	lsls	r6, r2, #28
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	460c      	mov	r4, r1
 8008aba:	d454      	bmi.n	8008b66 <__sflush_r+0xba>
 8008abc:	684b      	ldr	r3, [r1, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	dc02      	bgt.n	8008ac8 <__sflush_r+0x1c>
 8008ac2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	dd48      	ble.n	8008b5a <__sflush_r+0xae>
 8008ac8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008aca:	2e00      	cmp	r6, #0
 8008acc:	d045      	beq.n	8008b5a <__sflush_r+0xae>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ad4:	682f      	ldr	r7, [r5, #0]
 8008ad6:	6a21      	ldr	r1, [r4, #32]
 8008ad8:	602b      	str	r3, [r5, #0]
 8008ada:	d030      	beq.n	8008b3e <__sflush_r+0x92>
 8008adc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ade:	89a3      	ldrh	r3, [r4, #12]
 8008ae0:	0759      	lsls	r1, r3, #29
 8008ae2:	d505      	bpl.n	8008af0 <__sflush_r+0x44>
 8008ae4:	6863      	ldr	r3, [r4, #4]
 8008ae6:	1ad2      	subs	r2, r2, r3
 8008ae8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008aea:	b10b      	cbz	r3, 8008af0 <__sflush_r+0x44>
 8008aec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008aee:	1ad2      	subs	r2, r2, r3
 8008af0:	2300      	movs	r3, #0
 8008af2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008af4:	6a21      	ldr	r1, [r4, #32]
 8008af6:	4628      	mov	r0, r5
 8008af8:	47b0      	blx	r6
 8008afa:	1c43      	adds	r3, r0, #1
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	d106      	bne.n	8008b0e <__sflush_r+0x62>
 8008b00:	6829      	ldr	r1, [r5, #0]
 8008b02:	291d      	cmp	r1, #29
 8008b04:	d82b      	bhi.n	8008b5e <__sflush_r+0xb2>
 8008b06:	4a2a      	ldr	r2, [pc, #168]	@ (8008bb0 <__sflush_r+0x104>)
 8008b08:	410a      	asrs	r2, r1
 8008b0a:	07d6      	lsls	r6, r2, #31
 8008b0c:	d427      	bmi.n	8008b5e <__sflush_r+0xb2>
 8008b0e:	2200      	movs	r2, #0
 8008b10:	6062      	str	r2, [r4, #4]
 8008b12:	04d9      	lsls	r1, r3, #19
 8008b14:	6922      	ldr	r2, [r4, #16]
 8008b16:	6022      	str	r2, [r4, #0]
 8008b18:	d504      	bpl.n	8008b24 <__sflush_r+0x78>
 8008b1a:	1c42      	adds	r2, r0, #1
 8008b1c:	d101      	bne.n	8008b22 <__sflush_r+0x76>
 8008b1e:	682b      	ldr	r3, [r5, #0]
 8008b20:	b903      	cbnz	r3, 8008b24 <__sflush_r+0x78>
 8008b22:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b26:	602f      	str	r7, [r5, #0]
 8008b28:	b1b9      	cbz	r1, 8008b5a <__sflush_r+0xae>
 8008b2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b2e:	4299      	cmp	r1, r3
 8008b30:	d002      	beq.n	8008b38 <__sflush_r+0x8c>
 8008b32:	4628      	mov	r0, r5
 8008b34:	f001 f9c4 	bl	8009ec0 <_free_r>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b3c:	e00d      	b.n	8008b5a <__sflush_r+0xae>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	4628      	mov	r0, r5
 8008b42:	47b0      	blx	r6
 8008b44:	4602      	mov	r2, r0
 8008b46:	1c50      	adds	r0, r2, #1
 8008b48:	d1c9      	bne.n	8008ade <__sflush_r+0x32>
 8008b4a:	682b      	ldr	r3, [r5, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d0c6      	beq.n	8008ade <__sflush_r+0x32>
 8008b50:	2b1d      	cmp	r3, #29
 8008b52:	d001      	beq.n	8008b58 <__sflush_r+0xac>
 8008b54:	2b16      	cmp	r3, #22
 8008b56:	d11e      	bne.n	8008b96 <__sflush_r+0xea>
 8008b58:	602f      	str	r7, [r5, #0]
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	e022      	b.n	8008ba4 <__sflush_r+0xf8>
 8008b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b62:	b21b      	sxth	r3, r3
 8008b64:	e01b      	b.n	8008b9e <__sflush_r+0xf2>
 8008b66:	690f      	ldr	r7, [r1, #16]
 8008b68:	2f00      	cmp	r7, #0
 8008b6a:	d0f6      	beq.n	8008b5a <__sflush_r+0xae>
 8008b6c:	0793      	lsls	r3, r2, #30
 8008b6e:	680e      	ldr	r6, [r1, #0]
 8008b70:	bf08      	it	eq
 8008b72:	694b      	ldreq	r3, [r1, #20]
 8008b74:	600f      	str	r7, [r1, #0]
 8008b76:	bf18      	it	ne
 8008b78:	2300      	movne	r3, #0
 8008b7a:	eba6 0807 	sub.w	r8, r6, r7
 8008b7e:	608b      	str	r3, [r1, #8]
 8008b80:	f1b8 0f00 	cmp.w	r8, #0
 8008b84:	dde9      	ble.n	8008b5a <__sflush_r+0xae>
 8008b86:	6a21      	ldr	r1, [r4, #32]
 8008b88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b8a:	4643      	mov	r3, r8
 8008b8c:	463a      	mov	r2, r7
 8008b8e:	4628      	mov	r0, r5
 8008b90:	47b0      	blx	r6
 8008b92:	2800      	cmp	r0, #0
 8008b94:	dc08      	bgt.n	8008ba8 <__sflush_r+0xfc>
 8008b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b9e:	81a3      	strh	r3, [r4, #12]
 8008ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ba8:	4407      	add	r7, r0
 8008baa:	eba8 0800 	sub.w	r8, r8, r0
 8008bae:	e7e7      	b.n	8008b80 <__sflush_r+0xd4>
 8008bb0:	dfbffffe 	.word	0xdfbffffe

08008bb4 <_fflush_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	690b      	ldr	r3, [r1, #16]
 8008bb8:	4605      	mov	r5, r0
 8008bba:	460c      	mov	r4, r1
 8008bbc:	b913      	cbnz	r3, 8008bc4 <_fflush_r+0x10>
 8008bbe:	2500      	movs	r5, #0
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	b118      	cbz	r0, 8008bce <_fflush_r+0x1a>
 8008bc6:	6a03      	ldr	r3, [r0, #32]
 8008bc8:	b90b      	cbnz	r3, 8008bce <_fflush_r+0x1a>
 8008bca:	f000 f8bb 	bl	8008d44 <__sinit>
 8008bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d0f3      	beq.n	8008bbe <_fflush_r+0xa>
 8008bd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008bd8:	07d0      	lsls	r0, r2, #31
 8008bda:	d404      	bmi.n	8008be6 <_fflush_r+0x32>
 8008bdc:	0599      	lsls	r1, r3, #22
 8008bde:	d402      	bmi.n	8008be6 <_fflush_r+0x32>
 8008be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008be2:	f000 fb08 	bl	80091f6 <__retarget_lock_acquire_recursive>
 8008be6:	4628      	mov	r0, r5
 8008be8:	4621      	mov	r1, r4
 8008bea:	f7ff ff5f 	bl	8008aac <__sflush_r>
 8008bee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bf0:	07da      	lsls	r2, r3, #31
 8008bf2:	4605      	mov	r5, r0
 8008bf4:	d4e4      	bmi.n	8008bc0 <_fflush_r+0xc>
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	059b      	lsls	r3, r3, #22
 8008bfa:	d4e1      	bmi.n	8008bc0 <_fflush_r+0xc>
 8008bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bfe:	f000 fafb 	bl	80091f8 <__retarget_lock_release_recursive>
 8008c02:	e7dd      	b.n	8008bc0 <_fflush_r+0xc>

08008c04 <fflush>:
 8008c04:	4601      	mov	r1, r0
 8008c06:	b920      	cbnz	r0, 8008c12 <fflush+0xe>
 8008c08:	4a04      	ldr	r2, [pc, #16]	@ (8008c1c <fflush+0x18>)
 8008c0a:	4905      	ldr	r1, [pc, #20]	@ (8008c20 <fflush+0x1c>)
 8008c0c:	4805      	ldr	r0, [pc, #20]	@ (8008c24 <fflush+0x20>)
 8008c0e:	f000 b8b1 	b.w	8008d74 <_fwalk_sglue>
 8008c12:	4b05      	ldr	r3, [pc, #20]	@ (8008c28 <fflush+0x24>)
 8008c14:	6818      	ldr	r0, [r3, #0]
 8008c16:	f7ff bfcd 	b.w	8008bb4 <_fflush_r>
 8008c1a:	bf00      	nop
 8008c1c:	20000024 	.word	0x20000024
 8008c20:	08008bb5 	.word	0x08008bb5
 8008c24:	20000034 	.word	0x20000034
 8008c28:	20000030 	.word	0x20000030

08008c2c <std>:
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	b510      	push	{r4, lr}
 8008c30:	4604      	mov	r4, r0
 8008c32:	e9c0 3300 	strd	r3, r3, [r0]
 8008c36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c3a:	6083      	str	r3, [r0, #8]
 8008c3c:	8181      	strh	r1, [r0, #12]
 8008c3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c40:	81c2      	strh	r2, [r0, #14]
 8008c42:	6183      	str	r3, [r0, #24]
 8008c44:	4619      	mov	r1, r3
 8008c46:	2208      	movs	r2, #8
 8008c48:	305c      	adds	r0, #92	@ 0x5c
 8008c4a:	f000 fa45 	bl	80090d8 <memset>
 8008c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c84 <std+0x58>)
 8008c50:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c52:	4b0d      	ldr	r3, [pc, #52]	@ (8008c88 <std+0x5c>)
 8008c54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c56:	4b0d      	ldr	r3, [pc, #52]	@ (8008c8c <std+0x60>)
 8008c58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008c90 <std+0x64>)
 8008c5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c94 <std+0x68>)
 8008c60:	6224      	str	r4, [r4, #32]
 8008c62:	429c      	cmp	r4, r3
 8008c64:	d006      	beq.n	8008c74 <std+0x48>
 8008c66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008c6a:	4294      	cmp	r4, r2
 8008c6c:	d002      	beq.n	8008c74 <std+0x48>
 8008c6e:	33d0      	adds	r3, #208	@ 0xd0
 8008c70:	429c      	cmp	r4, r3
 8008c72:	d105      	bne.n	8008c80 <std+0x54>
 8008c74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c7c:	f000 baba 	b.w	80091f4 <__retarget_lock_init_recursive>
 8008c80:	bd10      	pop	{r4, pc}
 8008c82:	bf00      	nop
 8008c84:	08008f25 	.word	0x08008f25
 8008c88:	08008f4b 	.word	0x08008f4b
 8008c8c:	08008f83 	.word	0x08008f83
 8008c90:	08008fa7 	.word	0x08008fa7
 8008c94:	20000dfc 	.word	0x20000dfc

08008c98 <stdio_exit_handler>:
 8008c98:	4a02      	ldr	r2, [pc, #8]	@ (8008ca4 <stdio_exit_handler+0xc>)
 8008c9a:	4903      	ldr	r1, [pc, #12]	@ (8008ca8 <stdio_exit_handler+0x10>)
 8008c9c:	4803      	ldr	r0, [pc, #12]	@ (8008cac <stdio_exit_handler+0x14>)
 8008c9e:	f000 b869 	b.w	8008d74 <_fwalk_sglue>
 8008ca2:	bf00      	nop
 8008ca4:	20000024 	.word	0x20000024
 8008ca8:	08008bb5 	.word	0x08008bb5
 8008cac:	20000034 	.word	0x20000034

08008cb0 <cleanup_stdio>:
 8008cb0:	6841      	ldr	r1, [r0, #4]
 8008cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ce4 <cleanup_stdio+0x34>)
 8008cb4:	4299      	cmp	r1, r3
 8008cb6:	b510      	push	{r4, lr}
 8008cb8:	4604      	mov	r4, r0
 8008cba:	d001      	beq.n	8008cc0 <cleanup_stdio+0x10>
 8008cbc:	f7ff ff7a 	bl	8008bb4 <_fflush_r>
 8008cc0:	68a1      	ldr	r1, [r4, #8]
 8008cc2:	4b09      	ldr	r3, [pc, #36]	@ (8008ce8 <cleanup_stdio+0x38>)
 8008cc4:	4299      	cmp	r1, r3
 8008cc6:	d002      	beq.n	8008cce <cleanup_stdio+0x1e>
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f7ff ff73 	bl	8008bb4 <_fflush_r>
 8008cce:	68e1      	ldr	r1, [r4, #12]
 8008cd0:	4b06      	ldr	r3, [pc, #24]	@ (8008cec <cleanup_stdio+0x3c>)
 8008cd2:	4299      	cmp	r1, r3
 8008cd4:	d004      	beq.n	8008ce0 <cleanup_stdio+0x30>
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cdc:	f7ff bf6a 	b.w	8008bb4 <_fflush_r>
 8008ce0:	bd10      	pop	{r4, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20000dfc 	.word	0x20000dfc
 8008ce8:	20000e64 	.word	0x20000e64
 8008cec:	20000ecc 	.word	0x20000ecc

08008cf0 <global_stdio_init.part.0>:
 8008cf0:	b510      	push	{r4, lr}
 8008cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8008d20 <global_stdio_init.part.0+0x30>)
 8008cf4:	4c0b      	ldr	r4, [pc, #44]	@ (8008d24 <global_stdio_init.part.0+0x34>)
 8008cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8008d28 <global_stdio_init.part.0+0x38>)
 8008cf8:	601a      	str	r2, [r3, #0]
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	2104      	movs	r1, #4
 8008d00:	f7ff ff94 	bl	8008c2c <std>
 8008d04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d08:	2201      	movs	r2, #1
 8008d0a:	2109      	movs	r1, #9
 8008d0c:	f7ff ff8e 	bl	8008c2c <std>
 8008d10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d14:	2202      	movs	r2, #2
 8008d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d1a:	2112      	movs	r1, #18
 8008d1c:	f7ff bf86 	b.w	8008c2c <std>
 8008d20:	20000f34 	.word	0x20000f34
 8008d24:	20000dfc 	.word	0x20000dfc
 8008d28:	08008c99 	.word	0x08008c99

08008d2c <__sfp_lock_acquire>:
 8008d2c:	4801      	ldr	r0, [pc, #4]	@ (8008d34 <__sfp_lock_acquire+0x8>)
 8008d2e:	f000 ba62 	b.w	80091f6 <__retarget_lock_acquire_recursive>
 8008d32:	bf00      	nop
 8008d34:	20000f3d 	.word	0x20000f3d

08008d38 <__sfp_lock_release>:
 8008d38:	4801      	ldr	r0, [pc, #4]	@ (8008d40 <__sfp_lock_release+0x8>)
 8008d3a:	f000 ba5d 	b.w	80091f8 <__retarget_lock_release_recursive>
 8008d3e:	bf00      	nop
 8008d40:	20000f3d 	.word	0x20000f3d

08008d44 <__sinit>:
 8008d44:	b510      	push	{r4, lr}
 8008d46:	4604      	mov	r4, r0
 8008d48:	f7ff fff0 	bl	8008d2c <__sfp_lock_acquire>
 8008d4c:	6a23      	ldr	r3, [r4, #32]
 8008d4e:	b11b      	cbz	r3, 8008d58 <__sinit+0x14>
 8008d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d54:	f7ff bff0 	b.w	8008d38 <__sfp_lock_release>
 8008d58:	4b04      	ldr	r3, [pc, #16]	@ (8008d6c <__sinit+0x28>)
 8008d5a:	6223      	str	r3, [r4, #32]
 8008d5c:	4b04      	ldr	r3, [pc, #16]	@ (8008d70 <__sinit+0x2c>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1f5      	bne.n	8008d50 <__sinit+0xc>
 8008d64:	f7ff ffc4 	bl	8008cf0 <global_stdio_init.part.0>
 8008d68:	e7f2      	b.n	8008d50 <__sinit+0xc>
 8008d6a:	bf00      	nop
 8008d6c:	08008cb1 	.word	0x08008cb1
 8008d70:	20000f34 	.word	0x20000f34

08008d74 <_fwalk_sglue>:
 8008d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d78:	4607      	mov	r7, r0
 8008d7a:	4688      	mov	r8, r1
 8008d7c:	4614      	mov	r4, r2
 8008d7e:	2600      	movs	r6, #0
 8008d80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d84:	f1b9 0901 	subs.w	r9, r9, #1
 8008d88:	d505      	bpl.n	8008d96 <_fwalk_sglue+0x22>
 8008d8a:	6824      	ldr	r4, [r4, #0]
 8008d8c:	2c00      	cmp	r4, #0
 8008d8e:	d1f7      	bne.n	8008d80 <_fwalk_sglue+0xc>
 8008d90:	4630      	mov	r0, r6
 8008d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d96:	89ab      	ldrh	r3, [r5, #12]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d907      	bls.n	8008dac <_fwalk_sglue+0x38>
 8008d9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008da0:	3301      	adds	r3, #1
 8008da2:	d003      	beq.n	8008dac <_fwalk_sglue+0x38>
 8008da4:	4629      	mov	r1, r5
 8008da6:	4638      	mov	r0, r7
 8008da8:	47c0      	blx	r8
 8008daa:	4306      	orrs	r6, r0
 8008dac:	3568      	adds	r5, #104	@ 0x68
 8008dae:	e7e9      	b.n	8008d84 <_fwalk_sglue+0x10>

08008db0 <iprintf>:
 8008db0:	b40f      	push	{r0, r1, r2, r3}
 8008db2:	b507      	push	{r0, r1, r2, lr}
 8008db4:	4906      	ldr	r1, [pc, #24]	@ (8008dd0 <iprintf+0x20>)
 8008db6:	ab04      	add	r3, sp, #16
 8008db8:	6808      	ldr	r0, [r1, #0]
 8008dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dbe:	6881      	ldr	r1, [r0, #8]
 8008dc0:	9301      	str	r3, [sp, #4]
 8008dc2:	f002 ff85 	bl	800bcd0 <_vfiprintf_r>
 8008dc6:	b003      	add	sp, #12
 8008dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dcc:	b004      	add	sp, #16
 8008dce:	4770      	bx	lr
 8008dd0:	20000030 	.word	0x20000030

08008dd4 <_puts_r>:
 8008dd4:	6a03      	ldr	r3, [r0, #32]
 8008dd6:	b570      	push	{r4, r5, r6, lr}
 8008dd8:	6884      	ldr	r4, [r0, #8]
 8008dda:	4605      	mov	r5, r0
 8008ddc:	460e      	mov	r6, r1
 8008dde:	b90b      	cbnz	r3, 8008de4 <_puts_r+0x10>
 8008de0:	f7ff ffb0 	bl	8008d44 <__sinit>
 8008de4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008de6:	07db      	lsls	r3, r3, #31
 8008de8:	d405      	bmi.n	8008df6 <_puts_r+0x22>
 8008dea:	89a3      	ldrh	r3, [r4, #12]
 8008dec:	0598      	lsls	r0, r3, #22
 8008dee:	d402      	bmi.n	8008df6 <_puts_r+0x22>
 8008df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008df2:	f000 fa00 	bl	80091f6 <__retarget_lock_acquire_recursive>
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	0719      	lsls	r1, r3, #28
 8008dfa:	d502      	bpl.n	8008e02 <_puts_r+0x2e>
 8008dfc:	6923      	ldr	r3, [r4, #16]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d135      	bne.n	8008e6e <_puts_r+0x9a>
 8008e02:	4621      	mov	r1, r4
 8008e04:	4628      	mov	r0, r5
 8008e06:	f000 f911 	bl	800902c <__swsetup_r>
 8008e0a:	b380      	cbz	r0, 8008e6e <_puts_r+0x9a>
 8008e0c:	f04f 35ff 	mov.w	r5, #4294967295
 8008e10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e12:	07da      	lsls	r2, r3, #31
 8008e14:	d405      	bmi.n	8008e22 <_puts_r+0x4e>
 8008e16:	89a3      	ldrh	r3, [r4, #12]
 8008e18:	059b      	lsls	r3, r3, #22
 8008e1a:	d402      	bmi.n	8008e22 <_puts_r+0x4e>
 8008e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e1e:	f000 f9eb 	bl	80091f8 <__retarget_lock_release_recursive>
 8008e22:	4628      	mov	r0, r5
 8008e24:	bd70      	pop	{r4, r5, r6, pc}
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	da04      	bge.n	8008e34 <_puts_r+0x60>
 8008e2a:	69a2      	ldr	r2, [r4, #24]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	dc17      	bgt.n	8008e60 <_puts_r+0x8c>
 8008e30:	290a      	cmp	r1, #10
 8008e32:	d015      	beq.n	8008e60 <_puts_r+0x8c>
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	6022      	str	r2, [r4, #0]
 8008e3a:	7019      	strb	r1, [r3, #0]
 8008e3c:	68a3      	ldr	r3, [r4, #8]
 8008e3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e42:	3b01      	subs	r3, #1
 8008e44:	60a3      	str	r3, [r4, #8]
 8008e46:	2900      	cmp	r1, #0
 8008e48:	d1ed      	bne.n	8008e26 <_puts_r+0x52>
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	da11      	bge.n	8008e72 <_puts_r+0x9e>
 8008e4e:	4622      	mov	r2, r4
 8008e50:	210a      	movs	r1, #10
 8008e52:	4628      	mov	r0, r5
 8008e54:	f000 f8ab 	bl	8008fae <__swbuf_r>
 8008e58:	3001      	adds	r0, #1
 8008e5a:	d0d7      	beq.n	8008e0c <_puts_r+0x38>
 8008e5c:	250a      	movs	r5, #10
 8008e5e:	e7d7      	b.n	8008e10 <_puts_r+0x3c>
 8008e60:	4622      	mov	r2, r4
 8008e62:	4628      	mov	r0, r5
 8008e64:	f000 f8a3 	bl	8008fae <__swbuf_r>
 8008e68:	3001      	adds	r0, #1
 8008e6a:	d1e7      	bne.n	8008e3c <_puts_r+0x68>
 8008e6c:	e7ce      	b.n	8008e0c <_puts_r+0x38>
 8008e6e:	3e01      	subs	r6, #1
 8008e70:	e7e4      	b.n	8008e3c <_puts_r+0x68>
 8008e72:	6823      	ldr	r3, [r4, #0]
 8008e74:	1c5a      	adds	r2, r3, #1
 8008e76:	6022      	str	r2, [r4, #0]
 8008e78:	220a      	movs	r2, #10
 8008e7a:	701a      	strb	r2, [r3, #0]
 8008e7c:	e7ee      	b.n	8008e5c <_puts_r+0x88>
	...

08008e80 <puts>:
 8008e80:	4b02      	ldr	r3, [pc, #8]	@ (8008e8c <puts+0xc>)
 8008e82:	4601      	mov	r1, r0
 8008e84:	6818      	ldr	r0, [r3, #0]
 8008e86:	f7ff bfa5 	b.w	8008dd4 <_puts_r>
 8008e8a:	bf00      	nop
 8008e8c:	20000030 	.word	0x20000030

08008e90 <siprintf>:
 8008e90:	b40e      	push	{r1, r2, r3}
 8008e92:	b500      	push	{lr}
 8008e94:	b09c      	sub	sp, #112	@ 0x70
 8008e96:	ab1d      	add	r3, sp, #116	@ 0x74
 8008e98:	9002      	str	r0, [sp, #8]
 8008e9a:	9006      	str	r0, [sp, #24]
 8008e9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008ea0:	4809      	ldr	r0, [pc, #36]	@ (8008ec8 <siprintf+0x38>)
 8008ea2:	9107      	str	r1, [sp, #28]
 8008ea4:	9104      	str	r1, [sp, #16]
 8008ea6:	4909      	ldr	r1, [pc, #36]	@ (8008ecc <siprintf+0x3c>)
 8008ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eac:	9105      	str	r1, [sp, #20]
 8008eae:	6800      	ldr	r0, [r0, #0]
 8008eb0:	9301      	str	r3, [sp, #4]
 8008eb2:	a902      	add	r1, sp, #8
 8008eb4:	f002 fc1a 	bl	800b6ec <_svfiprintf_r>
 8008eb8:	9b02      	ldr	r3, [sp, #8]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	701a      	strb	r2, [r3, #0]
 8008ebe:	b01c      	add	sp, #112	@ 0x70
 8008ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ec4:	b003      	add	sp, #12
 8008ec6:	4770      	bx	lr
 8008ec8:	20000030 	.word	0x20000030
 8008ecc:	ffff0208 	.word	0xffff0208

08008ed0 <siscanf>:
 8008ed0:	b40e      	push	{r1, r2, r3}
 8008ed2:	b530      	push	{r4, r5, lr}
 8008ed4:	b09c      	sub	sp, #112	@ 0x70
 8008ed6:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008ed8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008edc:	f854 5b04 	ldr.w	r5, [r4], #4
 8008ee0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008ee4:	9002      	str	r0, [sp, #8]
 8008ee6:	9006      	str	r0, [sp, #24]
 8008ee8:	f7f7 f9c2 	bl	8000270 <strlen>
 8008eec:	4b0b      	ldr	r3, [pc, #44]	@ (8008f1c <siscanf+0x4c>)
 8008eee:	9003      	str	r0, [sp, #12]
 8008ef0:	9007      	str	r0, [sp, #28]
 8008ef2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ef4:	480a      	ldr	r0, [pc, #40]	@ (8008f20 <siscanf+0x50>)
 8008ef6:	9401      	str	r4, [sp, #4]
 8008ef8:	2300      	movs	r3, #0
 8008efa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008efc:	9314      	str	r3, [sp, #80]	@ 0x50
 8008efe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008f02:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008f06:	462a      	mov	r2, r5
 8008f08:	4623      	mov	r3, r4
 8008f0a:	a902      	add	r1, sp, #8
 8008f0c:	6800      	ldr	r0, [r0, #0]
 8008f0e:	f002 fd41 	bl	800b994 <__ssvfiscanf_r>
 8008f12:	b01c      	add	sp, #112	@ 0x70
 8008f14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f18:	b003      	add	sp, #12
 8008f1a:	4770      	bx	lr
 8008f1c:	08008f47 	.word	0x08008f47
 8008f20:	20000030 	.word	0x20000030

08008f24 <__sread>:
 8008f24:	b510      	push	{r4, lr}
 8008f26:	460c      	mov	r4, r1
 8008f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f2c:	f000 f914 	bl	8009158 <_read_r>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	bfab      	itete	ge
 8008f34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f36:	89a3      	ldrhlt	r3, [r4, #12]
 8008f38:	181b      	addge	r3, r3, r0
 8008f3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f3e:	bfac      	ite	ge
 8008f40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f42:	81a3      	strhlt	r3, [r4, #12]
 8008f44:	bd10      	pop	{r4, pc}

08008f46 <__seofread>:
 8008f46:	2000      	movs	r0, #0
 8008f48:	4770      	bx	lr

08008f4a <__swrite>:
 8008f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f4e:	461f      	mov	r7, r3
 8008f50:	898b      	ldrh	r3, [r1, #12]
 8008f52:	05db      	lsls	r3, r3, #23
 8008f54:	4605      	mov	r5, r0
 8008f56:	460c      	mov	r4, r1
 8008f58:	4616      	mov	r6, r2
 8008f5a:	d505      	bpl.n	8008f68 <__swrite+0x1e>
 8008f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f60:	2302      	movs	r3, #2
 8008f62:	2200      	movs	r2, #0
 8008f64:	f000 f8e6 	bl	8009134 <_lseek_r>
 8008f68:	89a3      	ldrh	r3, [r4, #12]
 8008f6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f72:	81a3      	strh	r3, [r4, #12]
 8008f74:	4632      	mov	r2, r6
 8008f76:	463b      	mov	r3, r7
 8008f78:	4628      	mov	r0, r5
 8008f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f7e:	f000 b8fd 	b.w	800917c <_write_r>

08008f82 <__sseek>:
 8008f82:	b510      	push	{r4, lr}
 8008f84:	460c      	mov	r4, r1
 8008f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f8a:	f000 f8d3 	bl	8009134 <_lseek_r>
 8008f8e:	1c43      	adds	r3, r0, #1
 8008f90:	89a3      	ldrh	r3, [r4, #12]
 8008f92:	bf15      	itete	ne
 8008f94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f9e:	81a3      	strheq	r3, [r4, #12]
 8008fa0:	bf18      	it	ne
 8008fa2:	81a3      	strhne	r3, [r4, #12]
 8008fa4:	bd10      	pop	{r4, pc}

08008fa6 <__sclose>:
 8008fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008faa:	f000 b8b3 	b.w	8009114 <_close_r>

08008fae <__swbuf_r>:
 8008fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb0:	460e      	mov	r6, r1
 8008fb2:	4614      	mov	r4, r2
 8008fb4:	4605      	mov	r5, r0
 8008fb6:	b118      	cbz	r0, 8008fc0 <__swbuf_r+0x12>
 8008fb8:	6a03      	ldr	r3, [r0, #32]
 8008fba:	b90b      	cbnz	r3, 8008fc0 <__swbuf_r+0x12>
 8008fbc:	f7ff fec2 	bl	8008d44 <__sinit>
 8008fc0:	69a3      	ldr	r3, [r4, #24]
 8008fc2:	60a3      	str	r3, [r4, #8]
 8008fc4:	89a3      	ldrh	r3, [r4, #12]
 8008fc6:	071a      	lsls	r2, r3, #28
 8008fc8:	d501      	bpl.n	8008fce <__swbuf_r+0x20>
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	b943      	cbnz	r3, 8008fe0 <__swbuf_r+0x32>
 8008fce:	4621      	mov	r1, r4
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f000 f82b 	bl	800902c <__swsetup_r>
 8008fd6:	b118      	cbz	r0, 8008fe0 <__swbuf_r+0x32>
 8008fd8:	f04f 37ff 	mov.w	r7, #4294967295
 8008fdc:	4638      	mov	r0, r7
 8008fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	6922      	ldr	r2, [r4, #16]
 8008fe4:	1a98      	subs	r0, r3, r2
 8008fe6:	6963      	ldr	r3, [r4, #20]
 8008fe8:	b2f6      	uxtb	r6, r6
 8008fea:	4283      	cmp	r3, r0
 8008fec:	4637      	mov	r7, r6
 8008fee:	dc05      	bgt.n	8008ffc <__swbuf_r+0x4e>
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	f7ff fdde 	bl	8008bb4 <_fflush_r>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d1ed      	bne.n	8008fd8 <__swbuf_r+0x2a>
 8008ffc:	68a3      	ldr	r3, [r4, #8]
 8008ffe:	3b01      	subs	r3, #1
 8009000:	60a3      	str	r3, [r4, #8]
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	6022      	str	r2, [r4, #0]
 8009008:	701e      	strb	r6, [r3, #0]
 800900a:	6962      	ldr	r2, [r4, #20]
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	429a      	cmp	r2, r3
 8009010:	d004      	beq.n	800901c <__swbuf_r+0x6e>
 8009012:	89a3      	ldrh	r3, [r4, #12]
 8009014:	07db      	lsls	r3, r3, #31
 8009016:	d5e1      	bpl.n	8008fdc <__swbuf_r+0x2e>
 8009018:	2e0a      	cmp	r6, #10
 800901a:	d1df      	bne.n	8008fdc <__swbuf_r+0x2e>
 800901c:	4621      	mov	r1, r4
 800901e:	4628      	mov	r0, r5
 8009020:	f7ff fdc8 	bl	8008bb4 <_fflush_r>
 8009024:	2800      	cmp	r0, #0
 8009026:	d0d9      	beq.n	8008fdc <__swbuf_r+0x2e>
 8009028:	e7d6      	b.n	8008fd8 <__swbuf_r+0x2a>
	...

0800902c <__swsetup_r>:
 800902c:	b538      	push	{r3, r4, r5, lr}
 800902e:	4b29      	ldr	r3, [pc, #164]	@ (80090d4 <__swsetup_r+0xa8>)
 8009030:	4605      	mov	r5, r0
 8009032:	6818      	ldr	r0, [r3, #0]
 8009034:	460c      	mov	r4, r1
 8009036:	b118      	cbz	r0, 8009040 <__swsetup_r+0x14>
 8009038:	6a03      	ldr	r3, [r0, #32]
 800903a:	b90b      	cbnz	r3, 8009040 <__swsetup_r+0x14>
 800903c:	f7ff fe82 	bl	8008d44 <__sinit>
 8009040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009044:	0719      	lsls	r1, r3, #28
 8009046:	d422      	bmi.n	800908e <__swsetup_r+0x62>
 8009048:	06da      	lsls	r2, r3, #27
 800904a:	d407      	bmi.n	800905c <__swsetup_r+0x30>
 800904c:	2209      	movs	r2, #9
 800904e:	602a      	str	r2, [r5, #0]
 8009050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009054:	81a3      	strh	r3, [r4, #12]
 8009056:	f04f 30ff 	mov.w	r0, #4294967295
 800905a:	e033      	b.n	80090c4 <__swsetup_r+0x98>
 800905c:	0758      	lsls	r0, r3, #29
 800905e:	d512      	bpl.n	8009086 <__swsetup_r+0x5a>
 8009060:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009062:	b141      	cbz	r1, 8009076 <__swsetup_r+0x4a>
 8009064:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009068:	4299      	cmp	r1, r3
 800906a:	d002      	beq.n	8009072 <__swsetup_r+0x46>
 800906c:	4628      	mov	r0, r5
 800906e:	f000 ff27 	bl	8009ec0 <_free_r>
 8009072:	2300      	movs	r3, #0
 8009074:	6363      	str	r3, [r4, #52]	@ 0x34
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800907c:	81a3      	strh	r3, [r4, #12]
 800907e:	2300      	movs	r3, #0
 8009080:	6063      	str	r3, [r4, #4]
 8009082:	6923      	ldr	r3, [r4, #16]
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	89a3      	ldrh	r3, [r4, #12]
 8009088:	f043 0308 	orr.w	r3, r3, #8
 800908c:	81a3      	strh	r3, [r4, #12]
 800908e:	6923      	ldr	r3, [r4, #16]
 8009090:	b94b      	cbnz	r3, 80090a6 <__swsetup_r+0x7a>
 8009092:	89a3      	ldrh	r3, [r4, #12]
 8009094:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800909c:	d003      	beq.n	80090a6 <__swsetup_r+0x7a>
 800909e:	4621      	mov	r1, r4
 80090a0:	4628      	mov	r0, r5
 80090a2:	f003 f8a1 	bl	800c1e8 <__smakebuf_r>
 80090a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090aa:	f013 0201 	ands.w	r2, r3, #1
 80090ae:	d00a      	beq.n	80090c6 <__swsetup_r+0x9a>
 80090b0:	2200      	movs	r2, #0
 80090b2:	60a2      	str	r2, [r4, #8]
 80090b4:	6962      	ldr	r2, [r4, #20]
 80090b6:	4252      	negs	r2, r2
 80090b8:	61a2      	str	r2, [r4, #24]
 80090ba:	6922      	ldr	r2, [r4, #16]
 80090bc:	b942      	cbnz	r2, 80090d0 <__swsetup_r+0xa4>
 80090be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80090c2:	d1c5      	bne.n	8009050 <__swsetup_r+0x24>
 80090c4:	bd38      	pop	{r3, r4, r5, pc}
 80090c6:	0799      	lsls	r1, r3, #30
 80090c8:	bf58      	it	pl
 80090ca:	6962      	ldrpl	r2, [r4, #20]
 80090cc:	60a2      	str	r2, [r4, #8]
 80090ce:	e7f4      	b.n	80090ba <__swsetup_r+0x8e>
 80090d0:	2000      	movs	r0, #0
 80090d2:	e7f7      	b.n	80090c4 <__swsetup_r+0x98>
 80090d4:	20000030 	.word	0x20000030

080090d8 <memset>:
 80090d8:	4402      	add	r2, r0
 80090da:	4603      	mov	r3, r0
 80090dc:	4293      	cmp	r3, r2
 80090de:	d100      	bne.n	80090e2 <memset+0xa>
 80090e0:	4770      	bx	lr
 80090e2:	f803 1b01 	strb.w	r1, [r3], #1
 80090e6:	e7f9      	b.n	80090dc <memset+0x4>

080090e8 <strncmp>:
 80090e8:	b510      	push	{r4, lr}
 80090ea:	b16a      	cbz	r2, 8009108 <strncmp+0x20>
 80090ec:	3901      	subs	r1, #1
 80090ee:	1884      	adds	r4, r0, r2
 80090f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d103      	bne.n	8009104 <strncmp+0x1c>
 80090fc:	42a0      	cmp	r0, r4
 80090fe:	d001      	beq.n	8009104 <strncmp+0x1c>
 8009100:	2a00      	cmp	r2, #0
 8009102:	d1f5      	bne.n	80090f0 <strncmp+0x8>
 8009104:	1ad0      	subs	r0, r2, r3
 8009106:	bd10      	pop	{r4, pc}
 8009108:	4610      	mov	r0, r2
 800910a:	e7fc      	b.n	8009106 <strncmp+0x1e>

0800910c <_localeconv_r>:
 800910c:	4800      	ldr	r0, [pc, #0]	@ (8009110 <_localeconv_r+0x4>)
 800910e:	4770      	bx	lr
 8009110:	20000170 	.word	0x20000170

08009114 <_close_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4d06      	ldr	r5, [pc, #24]	@ (8009130 <_close_r+0x1c>)
 8009118:	2300      	movs	r3, #0
 800911a:	4604      	mov	r4, r0
 800911c:	4608      	mov	r0, r1
 800911e:	602b      	str	r3, [r5, #0]
 8009120:	f7f9 fd8b 	bl	8002c3a <_close>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	d102      	bne.n	800912e <_close_r+0x1a>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	b103      	cbz	r3, 800912e <_close_r+0x1a>
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	bd38      	pop	{r3, r4, r5, pc}
 8009130:	20000f38 	.word	0x20000f38

08009134 <_lseek_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4d07      	ldr	r5, [pc, #28]	@ (8009154 <_lseek_r+0x20>)
 8009138:	4604      	mov	r4, r0
 800913a:	4608      	mov	r0, r1
 800913c:	4611      	mov	r1, r2
 800913e:	2200      	movs	r2, #0
 8009140:	602a      	str	r2, [r5, #0]
 8009142:	461a      	mov	r2, r3
 8009144:	f7f9 fda0 	bl	8002c88 <_lseek>
 8009148:	1c43      	adds	r3, r0, #1
 800914a:	d102      	bne.n	8009152 <_lseek_r+0x1e>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	b103      	cbz	r3, 8009152 <_lseek_r+0x1e>
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	bd38      	pop	{r3, r4, r5, pc}
 8009154:	20000f38 	.word	0x20000f38

08009158 <_read_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	4d07      	ldr	r5, [pc, #28]	@ (8009178 <_read_r+0x20>)
 800915c:	4604      	mov	r4, r0
 800915e:	4608      	mov	r0, r1
 8009160:	4611      	mov	r1, r2
 8009162:	2200      	movs	r2, #0
 8009164:	602a      	str	r2, [r5, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	f7f9 fd4a 	bl	8002c00 <_read>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	d102      	bne.n	8009176 <_read_r+0x1e>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	b103      	cbz	r3, 8009176 <_read_r+0x1e>
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	bd38      	pop	{r3, r4, r5, pc}
 8009178:	20000f38 	.word	0x20000f38

0800917c <_write_r>:
 800917c:	b538      	push	{r3, r4, r5, lr}
 800917e:	4d07      	ldr	r5, [pc, #28]	@ (800919c <_write_r+0x20>)
 8009180:	4604      	mov	r4, r0
 8009182:	4608      	mov	r0, r1
 8009184:	4611      	mov	r1, r2
 8009186:	2200      	movs	r2, #0
 8009188:	602a      	str	r2, [r5, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	f7f9 faf8 	bl	8002780 <_write>
 8009190:	1c43      	adds	r3, r0, #1
 8009192:	d102      	bne.n	800919a <_write_r+0x1e>
 8009194:	682b      	ldr	r3, [r5, #0]
 8009196:	b103      	cbz	r3, 800919a <_write_r+0x1e>
 8009198:	6023      	str	r3, [r4, #0]
 800919a:	bd38      	pop	{r3, r4, r5, pc}
 800919c:	20000f38 	.word	0x20000f38

080091a0 <__errno>:
 80091a0:	4b01      	ldr	r3, [pc, #4]	@ (80091a8 <__errno+0x8>)
 80091a2:	6818      	ldr	r0, [r3, #0]
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	20000030 	.word	0x20000030

080091ac <__libc_init_array>:
 80091ac:	b570      	push	{r4, r5, r6, lr}
 80091ae:	4d0d      	ldr	r5, [pc, #52]	@ (80091e4 <__libc_init_array+0x38>)
 80091b0:	4c0d      	ldr	r4, [pc, #52]	@ (80091e8 <__libc_init_array+0x3c>)
 80091b2:	1b64      	subs	r4, r4, r5
 80091b4:	10a4      	asrs	r4, r4, #2
 80091b6:	2600      	movs	r6, #0
 80091b8:	42a6      	cmp	r6, r4
 80091ba:	d109      	bne.n	80091d0 <__libc_init_array+0x24>
 80091bc:	4d0b      	ldr	r5, [pc, #44]	@ (80091ec <__libc_init_array+0x40>)
 80091be:	4c0c      	ldr	r4, [pc, #48]	@ (80091f0 <__libc_init_array+0x44>)
 80091c0:	f003 fe22 	bl	800ce08 <_init>
 80091c4:	1b64      	subs	r4, r4, r5
 80091c6:	10a4      	asrs	r4, r4, #2
 80091c8:	2600      	movs	r6, #0
 80091ca:	42a6      	cmp	r6, r4
 80091cc:	d105      	bne.n	80091da <__libc_init_array+0x2e>
 80091ce:	bd70      	pop	{r4, r5, r6, pc}
 80091d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80091d4:	4798      	blx	r3
 80091d6:	3601      	adds	r6, #1
 80091d8:	e7ee      	b.n	80091b8 <__libc_init_array+0xc>
 80091da:	f855 3b04 	ldr.w	r3, [r5], #4
 80091de:	4798      	blx	r3
 80091e0:	3601      	adds	r6, #1
 80091e2:	e7f2      	b.n	80091ca <__libc_init_array+0x1e>
 80091e4:	0800d5f0 	.word	0x0800d5f0
 80091e8:	0800d5f0 	.word	0x0800d5f0
 80091ec:	0800d5f0 	.word	0x0800d5f0
 80091f0:	0800d5f4 	.word	0x0800d5f4

080091f4 <__retarget_lock_init_recursive>:
 80091f4:	4770      	bx	lr

080091f6 <__retarget_lock_acquire_recursive>:
 80091f6:	4770      	bx	lr

080091f8 <__retarget_lock_release_recursive>:
 80091f8:	4770      	bx	lr

080091fa <memcpy>:
 80091fa:	440a      	add	r2, r1
 80091fc:	4291      	cmp	r1, r2
 80091fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8009202:	d100      	bne.n	8009206 <memcpy+0xc>
 8009204:	4770      	bx	lr
 8009206:	b510      	push	{r4, lr}
 8009208:	f811 4b01 	ldrb.w	r4, [r1], #1
 800920c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009210:	4291      	cmp	r1, r2
 8009212:	d1f9      	bne.n	8009208 <memcpy+0xe>
 8009214:	bd10      	pop	{r4, pc}
	...

08009218 <nanf>:
 8009218:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009220 <nanf+0x8>
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	7fc00000 	.word	0x7fc00000

08009224 <quorem>:
 8009224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009228:	6903      	ldr	r3, [r0, #16]
 800922a:	690c      	ldr	r4, [r1, #16]
 800922c:	42a3      	cmp	r3, r4
 800922e:	4607      	mov	r7, r0
 8009230:	db7e      	blt.n	8009330 <quorem+0x10c>
 8009232:	3c01      	subs	r4, #1
 8009234:	f101 0814 	add.w	r8, r1, #20
 8009238:	00a3      	lsls	r3, r4, #2
 800923a:	f100 0514 	add.w	r5, r0, #20
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009244:	9301      	str	r3, [sp, #4]
 8009246:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800924a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800924e:	3301      	adds	r3, #1
 8009250:	429a      	cmp	r2, r3
 8009252:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009256:	fbb2 f6f3 	udiv	r6, r2, r3
 800925a:	d32e      	bcc.n	80092ba <quorem+0x96>
 800925c:	f04f 0a00 	mov.w	sl, #0
 8009260:	46c4      	mov	ip, r8
 8009262:	46ae      	mov	lr, r5
 8009264:	46d3      	mov	fp, sl
 8009266:	f85c 3b04 	ldr.w	r3, [ip], #4
 800926a:	b298      	uxth	r0, r3
 800926c:	fb06 a000 	mla	r0, r6, r0, sl
 8009270:	0c02      	lsrs	r2, r0, #16
 8009272:	0c1b      	lsrs	r3, r3, #16
 8009274:	fb06 2303 	mla	r3, r6, r3, r2
 8009278:	f8de 2000 	ldr.w	r2, [lr]
 800927c:	b280      	uxth	r0, r0
 800927e:	b292      	uxth	r2, r2
 8009280:	1a12      	subs	r2, r2, r0
 8009282:	445a      	add	r2, fp
 8009284:	f8de 0000 	ldr.w	r0, [lr]
 8009288:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800928c:	b29b      	uxth	r3, r3
 800928e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009292:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009296:	b292      	uxth	r2, r2
 8009298:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800929c:	45e1      	cmp	r9, ip
 800929e:	f84e 2b04 	str.w	r2, [lr], #4
 80092a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80092a6:	d2de      	bcs.n	8009266 <quorem+0x42>
 80092a8:	9b00      	ldr	r3, [sp, #0]
 80092aa:	58eb      	ldr	r3, [r5, r3]
 80092ac:	b92b      	cbnz	r3, 80092ba <quorem+0x96>
 80092ae:	9b01      	ldr	r3, [sp, #4]
 80092b0:	3b04      	subs	r3, #4
 80092b2:	429d      	cmp	r5, r3
 80092b4:	461a      	mov	r2, r3
 80092b6:	d32f      	bcc.n	8009318 <quorem+0xf4>
 80092b8:	613c      	str	r4, [r7, #16]
 80092ba:	4638      	mov	r0, r7
 80092bc:	f001 f9c4 	bl	800a648 <__mcmp>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	db25      	blt.n	8009310 <quorem+0xec>
 80092c4:	4629      	mov	r1, r5
 80092c6:	2000      	movs	r0, #0
 80092c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80092cc:	f8d1 c000 	ldr.w	ip, [r1]
 80092d0:	fa1f fe82 	uxth.w	lr, r2
 80092d4:	fa1f f38c 	uxth.w	r3, ip
 80092d8:	eba3 030e 	sub.w	r3, r3, lr
 80092dc:	4403      	add	r3, r0
 80092de:	0c12      	lsrs	r2, r2, #16
 80092e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80092e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092ee:	45c1      	cmp	r9, r8
 80092f0:	f841 3b04 	str.w	r3, [r1], #4
 80092f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80092f8:	d2e6      	bcs.n	80092c8 <quorem+0xa4>
 80092fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009302:	b922      	cbnz	r2, 800930e <quorem+0xea>
 8009304:	3b04      	subs	r3, #4
 8009306:	429d      	cmp	r5, r3
 8009308:	461a      	mov	r2, r3
 800930a:	d30b      	bcc.n	8009324 <quorem+0x100>
 800930c:	613c      	str	r4, [r7, #16]
 800930e:	3601      	adds	r6, #1
 8009310:	4630      	mov	r0, r6
 8009312:	b003      	add	sp, #12
 8009314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009318:	6812      	ldr	r2, [r2, #0]
 800931a:	3b04      	subs	r3, #4
 800931c:	2a00      	cmp	r2, #0
 800931e:	d1cb      	bne.n	80092b8 <quorem+0x94>
 8009320:	3c01      	subs	r4, #1
 8009322:	e7c6      	b.n	80092b2 <quorem+0x8e>
 8009324:	6812      	ldr	r2, [r2, #0]
 8009326:	3b04      	subs	r3, #4
 8009328:	2a00      	cmp	r2, #0
 800932a:	d1ef      	bne.n	800930c <quorem+0xe8>
 800932c:	3c01      	subs	r4, #1
 800932e:	e7ea      	b.n	8009306 <quorem+0xe2>
 8009330:	2000      	movs	r0, #0
 8009332:	e7ee      	b.n	8009312 <quorem+0xee>
 8009334:	0000      	movs	r0, r0
	...

08009338 <_dtoa_r>:
 8009338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800933c:	69c7      	ldr	r7, [r0, #28]
 800933e:	b099      	sub	sp, #100	@ 0x64
 8009340:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009344:	ec55 4b10 	vmov	r4, r5, d0
 8009348:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800934a:	9109      	str	r1, [sp, #36]	@ 0x24
 800934c:	4683      	mov	fp, r0
 800934e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009350:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009352:	b97f      	cbnz	r7, 8009374 <_dtoa_r+0x3c>
 8009354:	2010      	movs	r0, #16
 8009356:	f000 fdfd 	bl	8009f54 <malloc>
 800935a:	4602      	mov	r2, r0
 800935c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009360:	b920      	cbnz	r0, 800936c <_dtoa_r+0x34>
 8009362:	4ba7      	ldr	r3, [pc, #668]	@ (8009600 <_dtoa_r+0x2c8>)
 8009364:	21ef      	movs	r1, #239	@ 0xef
 8009366:	48a7      	ldr	r0, [pc, #668]	@ (8009604 <_dtoa_r+0x2cc>)
 8009368:	f003 f842 	bl	800c3f0 <__assert_func>
 800936c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009370:	6007      	str	r7, [r0, #0]
 8009372:	60c7      	str	r7, [r0, #12]
 8009374:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009378:	6819      	ldr	r1, [r3, #0]
 800937a:	b159      	cbz	r1, 8009394 <_dtoa_r+0x5c>
 800937c:	685a      	ldr	r2, [r3, #4]
 800937e:	604a      	str	r2, [r1, #4]
 8009380:	2301      	movs	r3, #1
 8009382:	4093      	lsls	r3, r2
 8009384:	608b      	str	r3, [r1, #8]
 8009386:	4658      	mov	r0, fp
 8009388:	f000 feda 	bl	800a140 <_Bfree>
 800938c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009390:	2200      	movs	r2, #0
 8009392:	601a      	str	r2, [r3, #0]
 8009394:	1e2b      	subs	r3, r5, #0
 8009396:	bfb9      	ittee	lt
 8009398:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800939c:	9303      	strlt	r3, [sp, #12]
 800939e:	2300      	movge	r3, #0
 80093a0:	6033      	strge	r3, [r6, #0]
 80093a2:	9f03      	ldr	r7, [sp, #12]
 80093a4:	4b98      	ldr	r3, [pc, #608]	@ (8009608 <_dtoa_r+0x2d0>)
 80093a6:	bfbc      	itt	lt
 80093a8:	2201      	movlt	r2, #1
 80093aa:	6032      	strlt	r2, [r6, #0]
 80093ac:	43bb      	bics	r3, r7
 80093ae:	d112      	bne.n	80093d6 <_dtoa_r+0x9e>
 80093b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80093b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80093b6:	6013      	str	r3, [r2, #0]
 80093b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093bc:	4323      	orrs	r3, r4
 80093be:	f000 854d 	beq.w	8009e5c <_dtoa_r+0xb24>
 80093c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80093c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800961c <_dtoa_r+0x2e4>
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 854f 	beq.w	8009e6c <_dtoa_r+0xb34>
 80093ce:	f10a 0303 	add.w	r3, sl, #3
 80093d2:	f000 bd49 	b.w	8009e68 <_dtoa_r+0xb30>
 80093d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093da:	2200      	movs	r2, #0
 80093dc:	ec51 0b17 	vmov	r0, r1, d7
 80093e0:	2300      	movs	r3, #0
 80093e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80093e6:	f7f7 fb6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80093ea:	4680      	mov	r8, r0
 80093ec:	b158      	cbz	r0, 8009406 <_dtoa_r+0xce>
 80093ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80093f0:	2301      	movs	r3, #1
 80093f2:	6013      	str	r3, [r2, #0]
 80093f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80093f6:	b113      	cbz	r3, 80093fe <_dtoa_r+0xc6>
 80093f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80093fa:	4b84      	ldr	r3, [pc, #528]	@ (800960c <_dtoa_r+0x2d4>)
 80093fc:	6013      	str	r3, [r2, #0]
 80093fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009620 <_dtoa_r+0x2e8>
 8009402:	f000 bd33 	b.w	8009e6c <_dtoa_r+0xb34>
 8009406:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800940a:	aa16      	add	r2, sp, #88	@ 0x58
 800940c:	a917      	add	r1, sp, #92	@ 0x5c
 800940e:	4658      	mov	r0, fp
 8009410:	f001 fa3a 	bl	800a888 <__d2b>
 8009414:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009418:	4681      	mov	r9, r0
 800941a:	2e00      	cmp	r6, #0
 800941c:	d077      	beq.n	800950e <_dtoa_r+0x1d6>
 800941e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009420:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009428:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800942c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009430:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009434:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009438:	4619      	mov	r1, r3
 800943a:	2200      	movs	r2, #0
 800943c:	4b74      	ldr	r3, [pc, #464]	@ (8009610 <_dtoa_r+0x2d8>)
 800943e:	f7f6 ff23 	bl	8000288 <__aeabi_dsub>
 8009442:	a369      	add	r3, pc, #420	@ (adr r3, 80095e8 <_dtoa_r+0x2b0>)
 8009444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009448:	f7f7 f8d6 	bl	80005f8 <__aeabi_dmul>
 800944c:	a368      	add	r3, pc, #416	@ (adr r3, 80095f0 <_dtoa_r+0x2b8>)
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	f7f6 ff1b 	bl	800028c <__adddf3>
 8009456:	4604      	mov	r4, r0
 8009458:	4630      	mov	r0, r6
 800945a:	460d      	mov	r5, r1
 800945c:	f7f7 f862 	bl	8000524 <__aeabi_i2d>
 8009460:	a365      	add	r3, pc, #404	@ (adr r3, 80095f8 <_dtoa_r+0x2c0>)
 8009462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009466:	f7f7 f8c7 	bl	80005f8 <__aeabi_dmul>
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	4620      	mov	r0, r4
 8009470:	4629      	mov	r1, r5
 8009472:	f7f6 ff0b 	bl	800028c <__adddf3>
 8009476:	4604      	mov	r4, r0
 8009478:	460d      	mov	r5, r1
 800947a:	f7f7 fb6d 	bl	8000b58 <__aeabi_d2iz>
 800947e:	2200      	movs	r2, #0
 8009480:	4607      	mov	r7, r0
 8009482:	2300      	movs	r3, #0
 8009484:	4620      	mov	r0, r4
 8009486:	4629      	mov	r1, r5
 8009488:	f7f7 fb28 	bl	8000adc <__aeabi_dcmplt>
 800948c:	b140      	cbz	r0, 80094a0 <_dtoa_r+0x168>
 800948e:	4638      	mov	r0, r7
 8009490:	f7f7 f848 	bl	8000524 <__aeabi_i2d>
 8009494:	4622      	mov	r2, r4
 8009496:	462b      	mov	r3, r5
 8009498:	f7f7 fb16 	bl	8000ac8 <__aeabi_dcmpeq>
 800949c:	b900      	cbnz	r0, 80094a0 <_dtoa_r+0x168>
 800949e:	3f01      	subs	r7, #1
 80094a0:	2f16      	cmp	r7, #22
 80094a2:	d851      	bhi.n	8009548 <_dtoa_r+0x210>
 80094a4:	4b5b      	ldr	r3, [pc, #364]	@ (8009614 <_dtoa_r+0x2dc>)
 80094a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80094aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094b2:	f7f7 fb13 	bl	8000adc <__aeabi_dcmplt>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d048      	beq.n	800954c <_dtoa_r+0x214>
 80094ba:	3f01      	subs	r7, #1
 80094bc:	2300      	movs	r3, #0
 80094be:	9312      	str	r3, [sp, #72]	@ 0x48
 80094c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80094c2:	1b9b      	subs	r3, r3, r6
 80094c4:	1e5a      	subs	r2, r3, #1
 80094c6:	bf44      	itt	mi
 80094c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80094cc:	2300      	movmi	r3, #0
 80094ce:	9208      	str	r2, [sp, #32]
 80094d0:	bf54      	ite	pl
 80094d2:	f04f 0800 	movpl.w	r8, #0
 80094d6:	9308      	strmi	r3, [sp, #32]
 80094d8:	2f00      	cmp	r7, #0
 80094da:	db39      	blt.n	8009550 <_dtoa_r+0x218>
 80094dc:	9b08      	ldr	r3, [sp, #32]
 80094de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80094e0:	443b      	add	r3, r7
 80094e2:	9308      	str	r3, [sp, #32]
 80094e4:	2300      	movs	r3, #0
 80094e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80094e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ea:	2b09      	cmp	r3, #9
 80094ec:	d864      	bhi.n	80095b8 <_dtoa_r+0x280>
 80094ee:	2b05      	cmp	r3, #5
 80094f0:	bfc4      	itt	gt
 80094f2:	3b04      	subgt	r3, #4
 80094f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80094f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094f8:	f1a3 0302 	sub.w	r3, r3, #2
 80094fc:	bfcc      	ite	gt
 80094fe:	2400      	movgt	r4, #0
 8009500:	2401      	movle	r4, #1
 8009502:	2b03      	cmp	r3, #3
 8009504:	d863      	bhi.n	80095ce <_dtoa_r+0x296>
 8009506:	e8df f003 	tbb	[pc, r3]
 800950a:	372a      	.short	0x372a
 800950c:	5535      	.short	0x5535
 800950e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009512:	441e      	add	r6, r3
 8009514:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009518:	2b20      	cmp	r3, #32
 800951a:	bfc1      	itttt	gt
 800951c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009520:	409f      	lslgt	r7, r3
 8009522:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009526:	fa24 f303 	lsrgt.w	r3, r4, r3
 800952a:	bfd6      	itet	le
 800952c:	f1c3 0320 	rsble	r3, r3, #32
 8009530:	ea47 0003 	orrgt.w	r0, r7, r3
 8009534:	fa04 f003 	lslle.w	r0, r4, r3
 8009538:	f7f6 ffe4 	bl	8000504 <__aeabi_ui2d>
 800953c:	2201      	movs	r2, #1
 800953e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009542:	3e01      	subs	r6, #1
 8009544:	9214      	str	r2, [sp, #80]	@ 0x50
 8009546:	e777      	b.n	8009438 <_dtoa_r+0x100>
 8009548:	2301      	movs	r3, #1
 800954a:	e7b8      	b.n	80094be <_dtoa_r+0x186>
 800954c:	9012      	str	r0, [sp, #72]	@ 0x48
 800954e:	e7b7      	b.n	80094c0 <_dtoa_r+0x188>
 8009550:	427b      	negs	r3, r7
 8009552:	930a      	str	r3, [sp, #40]	@ 0x28
 8009554:	2300      	movs	r3, #0
 8009556:	eba8 0807 	sub.w	r8, r8, r7
 800955a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800955c:	e7c4      	b.n	80094e8 <_dtoa_r+0x1b0>
 800955e:	2300      	movs	r3, #0
 8009560:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009564:	2b00      	cmp	r3, #0
 8009566:	dc35      	bgt.n	80095d4 <_dtoa_r+0x29c>
 8009568:	2301      	movs	r3, #1
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	9307      	str	r3, [sp, #28]
 800956e:	461a      	mov	r2, r3
 8009570:	920e      	str	r2, [sp, #56]	@ 0x38
 8009572:	e00b      	b.n	800958c <_dtoa_r+0x254>
 8009574:	2301      	movs	r3, #1
 8009576:	e7f3      	b.n	8009560 <_dtoa_r+0x228>
 8009578:	2300      	movs	r3, #0
 800957a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800957c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800957e:	18fb      	adds	r3, r7, r3
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	3301      	adds	r3, #1
 8009584:	2b01      	cmp	r3, #1
 8009586:	9307      	str	r3, [sp, #28]
 8009588:	bfb8      	it	lt
 800958a:	2301      	movlt	r3, #1
 800958c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009590:	2100      	movs	r1, #0
 8009592:	2204      	movs	r2, #4
 8009594:	f102 0514 	add.w	r5, r2, #20
 8009598:	429d      	cmp	r5, r3
 800959a:	d91f      	bls.n	80095dc <_dtoa_r+0x2a4>
 800959c:	6041      	str	r1, [r0, #4]
 800959e:	4658      	mov	r0, fp
 80095a0:	f000 fd8e 	bl	800a0c0 <_Balloc>
 80095a4:	4682      	mov	sl, r0
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d13c      	bne.n	8009624 <_dtoa_r+0x2ec>
 80095aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009618 <_dtoa_r+0x2e0>)
 80095ac:	4602      	mov	r2, r0
 80095ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80095b2:	e6d8      	b.n	8009366 <_dtoa_r+0x2e>
 80095b4:	2301      	movs	r3, #1
 80095b6:	e7e0      	b.n	800957a <_dtoa_r+0x242>
 80095b8:	2401      	movs	r4, #1
 80095ba:	2300      	movs	r3, #0
 80095bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80095be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80095c0:	f04f 33ff 	mov.w	r3, #4294967295
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	9307      	str	r3, [sp, #28]
 80095c8:	2200      	movs	r2, #0
 80095ca:	2312      	movs	r3, #18
 80095cc:	e7d0      	b.n	8009570 <_dtoa_r+0x238>
 80095ce:	2301      	movs	r3, #1
 80095d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095d2:	e7f5      	b.n	80095c0 <_dtoa_r+0x288>
 80095d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	9307      	str	r3, [sp, #28]
 80095da:	e7d7      	b.n	800958c <_dtoa_r+0x254>
 80095dc:	3101      	adds	r1, #1
 80095de:	0052      	lsls	r2, r2, #1
 80095e0:	e7d8      	b.n	8009594 <_dtoa_r+0x25c>
 80095e2:	bf00      	nop
 80095e4:	f3af 8000 	nop.w
 80095e8:	636f4361 	.word	0x636f4361
 80095ec:	3fd287a7 	.word	0x3fd287a7
 80095f0:	8b60c8b3 	.word	0x8b60c8b3
 80095f4:	3fc68a28 	.word	0x3fc68a28
 80095f8:	509f79fb 	.word	0x509f79fb
 80095fc:	3fd34413 	.word	0x3fd34413
 8009600:	0800d2e9 	.word	0x0800d2e9
 8009604:	0800d300 	.word	0x0800d300
 8009608:	7ff00000 	.word	0x7ff00000
 800960c:	0800d540 	.word	0x0800d540
 8009610:	3ff80000 	.word	0x3ff80000
 8009614:	0800d3f8 	.word	0x0800d3f8
 8009618:	0800d358 	.word	0x0800d358
 800961c:	0800d2e5 	.word	0x0800d2e5
 8009620:	0800d53f 	.word	0x0800d53f
 8009624:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009628:	6018      	str	r0, [r3, #0]
 800962a:	9b07      	ldr	r3, [sp, #28]
 800962c:	2b0e      	cmp	r3, #14
 800962e:	f200 80a4 	bhi.w	800977a <_dtoa_r+0x442>
 8009632:	2c00      	cmp	r4, #0
 8009634:	f000 80a1 	beq.w	800977a <_dtoa_r+0x442>
 8009638:	2f00      	cmp	r7, #0
 800963a:	dd33      	ble.n	80096a4 <_dtoa_r+0x36c>
 800963c:	4bad      	ldr	r3, [pc, #692]	@ (80098f4 <_dtoa_r+0x5bc>)
 800963e:	f007 020f 	and.w	r2, r7, #15
 8009642:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009646:	ed93 7b00 	vldr	d7, [r3]
 800964a:	05f8      	lsls	r0, r7, #23
 800964c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009650:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009654:	d516      	bpl.n	8009684 <_dtoa_r+0x34c>
 8009656:	4ba8      	ldr	r3, [pc, #672]	@ (80098f8 <_dtoa_r+0x5c0>)
 8009658:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800965c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009660:	f7f7 f8f4 	bl	800084c <__aeabi_ddiv>
 8009664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009668:	f004 040f 	and.w	r4, r4, #15
 800966c:	2603      	movs	r6, #3
 800966e:	4da2      	ldr	r5, [pc, #648]	@ (80098f8 <_dtoa_r+0x5c0>)
 8009670:	b954      	cbnz	r4, 8009688 <_dtoa_r+0x350>
 8009672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800967a:	f7f7 f8e7 	bl	800084c <__aeabi_ddiv>
 800967e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009682:	e028      	b.n	80096d6 <_dtoa_r+0x39e>
 8009684:	2602      	movs	r6, #2
 8009686:	e7f2      	b.n	800966e <_dtoa_r+0x336>
 8009688:	07e1      	lsls	r1, r4, #31
 800968a:	d508      	bpl.n	800969e <_dtoa_r+0x366>
 800968c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009690:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009694:	f7f6 ffb0 	bl	80005f8 <__aeabi_dmul>
 8009698:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800969c:	3601      	adds	r6, #1
 800969e:	1064      	asrs	r4, r4, #1
 80096a0:	3508      	adds	r5, #8
 80096a2:	e7e5      	b.n	8009670 <_dtoa_r+0x338>
 80096a4:	f000 80d2 	beq.w	800984c <_dtoa_r+0x514>
 80096a8:	427c      	negs	r4, r7
 80096aa:	4b92      	ldr	r3, [pc, #584]	@ (80098f4 <_dtoa_r+0x5bc>)
 80096ac:	4d92      	ldr	r5, [pc, #584]	@ (80098f8 <_dtoa_r+0x5c0>)
 80096ae:	f004 020f 	and.w	r2, r4, #15
 80096b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096be:	f7f6 ff9b 	bl	80005f8 <__aeabi_dmul>
 80096c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096c6:	1124      	asrs	r4, r4, #4
 80096c8:	2300      	movs	r3, #0
 80096ca:	2602      	movs	r6, #2
 80096cc:	2c00      	cmp	r4, #0
 80096ce:	f040 80b2 	bne.w	8009836 <_dtoa_r+0x4fe>
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1d3      	bne.n	800967e <_dtoa_r+0x346>
 80096d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80096d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 80b7 	beq.w	8009850 <_dtoa_r+0x518>
 80096e2:	4b86      	ldr	r3, [pc, #536]	@ (80098fc <_dtoa_r+0x5c4>)
 80096e4:	2200      	movs	r2, #0
 80096e6:	4620      	mov	r0, r4
 80096e8:	4629      	mov	r1, r5
 80096ea:	f7f7 f9f7 	bl	8000adc <__aeabi_dcmplt>
 80096ee:	2800      	cmp	r0, #0
 80096f0:	f000 80ae 	beq.w	8009850 <_dtoa_r+0x518>
 80096f4:	9b07      	ldr	r3, [sp, #28]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 80aa 	beq.w	8009850 <_dtoa_r+0x518>
 80096fc:	9b00      	ldr	r3, [sp, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	dd37      	ble.n	8009772 <_dtoa_r+0x43a>
 8009702:	1e7b      	subs	r3, r7, #1
 8009704:	9304      	str	r3, [sp, #16]
 8009706:	4620      	mov	r0, r4
 8009708:	4b7d      	ldr	r3, [pc, #500]	@ (8009900 <_dtoa_r+0x5c8>)
 800970a:	2200      	movs	r2, #0
 800970c:	4629      	mov	r1, r5
 800970e:	f7f6 ff73 	bl	80005f8 <__aeabi_dmul>
 8009712:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009716:	9c00      	ldr	r4, [sp, #0]
 8009718:	3601      	adds	r6, #1
 800971a:	4630      	mov	r0, r6
 800971c:	f7f6 ff02 	bl	8000524 <__aeabi_i2d>
 8009720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009724:	f7f6 ff68 	bl	80005f8 <__aeabi_dmul>
 8009728:	4b76      	ldr	r3, [pc, #472]	@ (8009904 <_dtoa_r+0x5cc>)
 800972a:	2200      	movs	r2, #0
 800972c:	f7f6 fdae 	bl	800028c <__adddf3>
 8009730:	4605      	mov	r5, r0
 8009732:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009736:	2c00      	cmp	r4, #0
 8009738:	f040 808d 	bne.w	8009856 <_dtoa_r+0x51e>
 800973c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009740:	4b71      	ldr	r3, [pc, #452]	@ (8009908 <_dtoa_r+0x5d0>)
 8009742:	2200      	movs	r2, #0
 8009744:	f7f6 fda0 	bl	8000288 <__aeabi_dsub>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009750:	462a      	mov	r2, r5
 8009752:	4633      	mov	r3, r6
 8009754:	f7f7 f9e0 	bl	8000b18 <__aeabi_dcmpgt>
 8009758:	2800      	cmp	r0, #0
 800975a:	f040 828b 	bne.w	8009c74 <_dtoa_r+0x93c>
 800975e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009762:	462a      	mov	r2, r5
 8009764:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009768:	f7f7 f9b8 	bl	8000adc <__aeabi_dcmplt>
 800976c:	2800      	cmp	r0, #0
 800976e:	f040 8128 	bne.w	80099c2 <_dtoa_r+0x68a>
 8009772:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009776:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800977a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800977c:	2b00      	cmp	r3, #0
 800977e:	f2c0 815a 	blt.w	8009a36 <_dtoa_r+0x6fe>
 8009782:	2f0e      	cmp	r7, #14
 8009784:	f300 8157 	bgt.w	8009a36 <_dtoa_r+0x6fe>
 8009788:	4b5a      	ldr	r3, [pc, #360]	@ (80098f4 <_dtoa_r+0x5bc>)
 800978a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800978e:	ed93 7b00 	vldr	d7, [r3]
 8009792:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009794:	2b00      	cmp	r3, #0
 8009796:	ed8d 7b00 	vstr	d7, [sp]
 800979a:	da03      	bge.n	80097a4 <_dtoa_r+0x46c>
 800979c:	9b07      	ldr	r3, [sp, #28]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f340 8101 	ble.w	80099a6 <_dtoa_r+0x66e>
 80097a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80097a8:	4656      	mov	r6, sl
 80097aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097ae:	4620      	mov	r0, r4
 80097b0:	4629      	mov	r1, r5
 80097b2:	f7f7 f84b 	bl	800084c <__aeabi_ddiv>
 80097b6:	f7f7 f9cf 	bl	8000b58 <__aeabi_d2iz>
 80097ba:	4680      	mov	r8, r0
 80097bc:	f7f6 feb2 	bl	8000524 <__aeabi_i2d>
 80097c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097c4:	f7f6 ff18 	bl	80005f8 <__aeabi_dmul>
 80097c8:	4602      	mov	r2, r0
 80097ca:	460b      	mov	r3, r1
 80097cc:	4620      	mov	r0, r4
 80097ce:	4629      	mov	r1, r5
 80097d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80097d4:	f7f6 fd58 	bl	8000288 <__aeabi_dsub>
 80097d8:	f806 4b01 	strb.w	r4, [r6], #1
 80097dc:	9d07      	ldr	r5, [sp, #28]
 80097de:	eba6 040a 	sub.w	r4, r6, sl
 80097e2:	42a5      	cmp	r5, r4
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	f040 8117 	bne.w	8009a1a <_dtoa_r+0x6e2>
 80097ec:	f7f6 fd4e 	bl	800028c <__adddf3>
 80097f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097f4:	4604      	mov	r4, r0
 80097f6:	460d      	mov	r5, r1
 80097f8:	f7f7 f98e 	bl	8000b18 <__aeabi_dcmpgt>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	f040 80f9 	bne.w	80099f4 <_dtoa_r+0x6bc>
 8009802:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009806:	4620      	mov	r0, r4
 8009808:	4629      	mov	r1, r5
 800980a:	f7f7 f95d 	bl	8000ac8 <__aeabi_dcmpeq>
 800980e:	b118      	cbz	r0, 8009818 <_dtoa_r+0x4e0>
 8009810:	f018 0f01 	tst.w	r8, #1
 8009814:	f040 80ee 	bne.w	80099f4 <_dtoa_r+0x6bc>
 8009818:	4649      	mov	r1, r9
 800981a:	4658      	mov	r0, fp
 800981c:	f000 fc90 	bl	800a140 <_Bfree>
 8009820:	2300      	movs	r3, #0
 8009822:	7033      	strb	r3, [r6, #0]
 8009824:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009826:	3701      	adds	r7, #1
 8009828:	601f      	str	r7, [r3, #0]
 800982a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 831d 	beq.w	8009e6c <_dtoa_r+0xb34>
 8009832:	601e      	str	r6, [r3, #0]
 8009834:	e31a      	b.n	8009e6c <_dtoa_r+0xb34>
 8009836:	07e2      	lsls	r2, r4, #31
 8009838:	d505      	bpl.n	8009846 <_dtoa_r+0x50e>
 800983a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800983e:	f7f6 fedb 	bl	80005f8 <__aeabi_dmul>
 8009842:	3601      	adds	r6, #1
 8009844:	2301      	movs	r3, #1
 8009846:	1064      	asrs	r4, r4, #1
 8009848:	3508      	adds	r5, #8
 800984a:	e73f      	b.n	80096cc <_dtoa_r+0x394>
 800984c:	2602      	movs	r6, #2
 800984e:	e742      	b.n	80096d6 <_dtoa_r+0x39e>
 8009850:	9c07      	ldr	r4, [sp, #28]
 8009852:	9704      	str	r7, [sp, #16]
 8009854:	e761      	b.n	800971a <_dtoa_r+0x3e2>
 8009856:	4b27      	ldr	r3, [pc, #156]	@ (80098f4 <_dtoa_r+0x5bc>)
 8009858:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800985a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800985e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009862:	4454      	add	r4, sl
 8009864:	2900      	cmp	r1, #0
 8009866:	d053      	beq.n	8009910 <_dtoa_r+0x5d8>
 8009868:	4928      	ldr	r1, [pc, #160]	@ (800990c <_dtoa_r+0x5d4>)
 800986a:	2000      	movs	r0, #0
 800986c:	f7f6 ffee 	bl	800084c <__aeabi_ddiv>
 8009870:	4633      	mov	r3, r6
 8009872:	462a      	mov	r2, r5
 8009874:	f7f6 fd08 	bl	8000288 <__aeabi_dsub>
 8009878:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800987c:	4656      	mov	r6, sl
 800987e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009882:	f7f7 f969 	bl	8000b58 <__aeabi_d2iz>
 8009886:	4605      	mov	r5, r0
 8009888:	f7f6 fe4c 	bl	8000524 <__aeabi_i2d>
 800988c:	4602      	mov	r2, r0
 800988e:	460b      	mov	r3, r1
 8009890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009894:	f7f6 fcf8 	bl	8000288 <__aeabi_dsub>
 8009898:	3530      	adds	r5, #48	@ 0x30
 800989a:	4602      	mov	r2, r0
 800989c:	460b      	mov	r3, r1
 800989e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80098a2:	f806 5b01 	strb.w	r5, [r6], #1
 80098a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80098aa:	f7f7 f917 	bl	8000adc <__aeabi_dcmplt>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d171      	bne.n	8009996 <_dtoa_r+0x65e>
 80098b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098b6:	4911      	ldr	r1, [pc, #68]	@ (80098fc <_dtoa_r+0x5c4>)
 80098b8:	2000      	movs	r0, #0
 80098ba:	f7f6 fce5 	bl	8000288 <__aeabi_dsub>
 80098be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80098c2:	f7f7 f90b 	bl	8000adc <__aeabi_dcmplt>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	f040 8095 	bne.w	80099f6 <_dtoa_r+0x6be>
 80098cc:	42a6      	cmp	r6, r4
 80098ce:	f43f af50 	beq.w	8009772 <_dtoa_r+0x43a>
 80098d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80098d6:	4b0a      	ldr	r3, [pc, #40]	@ (8009900 <_dtoa_r+0x5c8>)
 80098d8:	2200      	movs	r2, #0
 80098da:	f7f6 fe8d 	bl	80005f8 <__aeabi_dmul>
 80098de:	4b08      	ldr	r3, [pc, #32]	@ (8009900 <_dtoa_r+0x5c8>)
 80098e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80098e4:	2200      	movs	r2, #0
 80098e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098ea:	f7f6 fe85 	bl	80005f8 <__aeabi_dmul>
 80098ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098f2:	e7c4      	b.n	800987e <_dtoa_r+0x546>
 80098f4:	0800d3f8 	.word	0x0800d3f8
 80098f8:	0800d3d0 	.word	0x0800d3d0
 80098fc:	3ff00000 	.word	0x3ff00000
 8009900:	40240000 	.word	0x40240000
 8009904:	401c0000 	.word	0x401c0000
 8009908:	40140000 	.word	0x40140000
 800990c:	3fe00000 	.word	0x3fe00000
 8009910:	4631      	mov	r1, r6
 8009912:	4628      	mov	r0, r5
 8009914:	f7f6 fe70 	bl	80005f8 <__aeabi_dmul>
 8009918:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800991c:	9415      	str	r4, [sp, #84]	@ 0x54
 800991e:	4656      	mov	r6, sl
 8009920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009924:	f7f7 f918 	bl	8000b58 <__aeabi_d2iz>
 8009928:	4605      	mov	r5, r0
 800992a:	f7f6 fdfb 	bl	8000524 <__aeabi_i2d>
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009936:	f7f6 fca7 	bl	8000288 <__aeabi_dsub>
 800993a:	3530      	adds	r5, #48	@ 0x30
 800993c:	f806 5b01 	strb.w	r5, [r6], #1
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	42a6      	cmp	r6, r4
 8009946:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800994a:	f04f 0200 	mov.w	r2, #0
 800994e:	d124      	bne.n	800999a <_dtoa_r+0x662>
 8009950:	4bac      	ldr	r3, [pc, #688]	@ (8009c04 <_dtoa_r+0x8cc>)
 8009952:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009956:	f7f6 fc99 	bl	800028c <__adddf3>
 800995a:	4602      	mov	r2, r0
 800995c:	460b      	mov	r3, r1
 800995e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009962:	f7f7 f8d9 	bl	8000b18 <__aeabi_dcmpgt>
 8009966:	2800      	cmp	r0, #0
 8009968:	d145      	bne.n	80099f6 <_dtoa_r+0x6be>
 800996a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800996e:	49a5      	ldr	r1, [pc, #660]	@ (8009c04 <_dtoa_r+0x8cc>)
 8009970:	2000      	movs	r0, #0
 8009972:	f7f6 fc89 	bl	8000288 <__aeabi_dsub>
 8009976:	4602      	mov	r2, r0
 8009978:	460b      	mov	r3, r1
 800997a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800997e:	f7f7 f8ad 	bl	8000adc <__aeabi_dcmplt>
 8009982:	2800      	cmp	r0, #0
 8009984:	f43f aef5 	beq.w	8009772 <_dtoa_r+0x43a>
 8009988:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800998a:	1e73      	subs	r3, r6, #1
 800998c:	9315      	str	r3, [sp, #84]	@ 0x54
 800998e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009992:	2b30      	cmp	r3, #48	@ 0x30
 8009994:	d0f8      	beq.n	8009988 <_dtoa_r+0x650>
 8009996:	9f04      	ldr	r7, [sp, #16]
 8009998:	e73e      	b.n	8009818 <_dtoa_r+0x4e0>
 800999a:	4b9b      	ldr	r3, [pc, #620]	@ (8009c08 <_dtoa_r+0x8d0>)
 800999c:	f7f6 fe2c 	bl	80005f8 <__aeabi_dmul>
 80099a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099a4:	e7bc      	b.n	8009920 <_dtoa_r+0x5e8>
 80099a6:	d10c      	bne.n	80099c2 <_dtoa_r+0x68a>
 80099a8:	4b98      	ldr	r3, [pc, #608]	@ (8009c0c <_dtoa_r+0x8d4>)
 80099aa:	2200      	movs	r2, #0
 80099ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099b0:	f7f6 fe22 	bl	80005f8 <__aeabi_dmul>
 80099b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099b8:	f7f7 f8a4 	bl	8000b04 <__aeabi_dcmpge>
 80099bc:	2800      	cmp	r0, #0
 80099be:	f000 8157 	beq.w	8009c70 <_dtoa_r+0x938>
 80099c2:	2400      	movs	r4, #0
 80099c4:	4625      	mov	r5, r4
 80099c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099c8:	43db      	mvns	r3, r3
 80099ca:	9304      	str	r3, [sp, #16]
 80099cc:	4656      	mov	r6, sl
 80099ce:	2700      	movs	r7, #0
 80099d0:	4621      	mov	r1, r4
 80099d2:	4658      	mov	r0, fp
 80099d4:	f000 fbb4 	bl	800a140 <_Bfree>
 80099d8:	2d00      	cmp	r5, #0
 80099da:	d0dc      	beq.n	8009996 <_dtoa_r+0x65e>
 80099dc:	b12f      	cbz	r7, 80099ea <_dtoa_r+0x6b2>
 80099de:	42af      	cmp	r7, r5
 80099e0:	d003      	beq.n	80099ea <_dtoa_r+0x6b2>
 80099e2:	4639      	mov	r1, r7
 80099e4:	4658      	mov	r0, fp
 80099e6:	f000 fbab 	bl	800a140 <_Bfree>
 80099ea:	4629      	mov	r1, r5
 80099ec:	4658      	mov	r0, fp
 80099ee:	f000 fba7 	bl	800a140 <_Bfree>
 80099f2:	e7d0      	b.n	8009996 <_dtoa_r+0x65e>
 80099f4:	9704      	str	r7, [sp, #16]
 80099f6:	4633      	mov	r3, r6
 80099f8:	461e      	mov	r6, r3
 80099fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099fe:	2a39      	cmp	r2, #57	@ 0x39
 8009a00:	d107      	bne.n	8009a12 <_dtoa_r+0x6da>
 8009a02:	459a      	cmp	sl, r3
 8009a04:	d1f8      	bne.n	80099f8 <_dtoa_r+0x6c0>
 8009a06:	9a04      	ldr	r2, [sp, #16]
 8009a08:	3201      	adds	r2, #1
 8009a0a:	9204      	str	r2, [sp, #16]
 8009a0c:	2230      	movs	r2, #48	@ 0x30
 8009a0e:	f88a 2000 	strb.w	r2, [sl]
 8009a12:	781a      	ldrb	r2, [r3, #0]
 8009a14:	3201      	adds	r2, #1
 8009a16:	701a      	strb	r2, [r3, #0]
 8009a18:	e7bd      	b.n	8009996 <_dtoa_r+0x65e>
 8009a1a:	4b7b      	ldr	r3, [pc, #492]	@ (8009c08 <_dtoa_r+0x8d0>)
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f7f6 fdeb 	bl	80005f8 <__aeabi_dmul>
 8009a22:	2200      	movs	r2, #0
 8009a24:	2300      	movs	r3, #0
 8009a26:	4604      	mov	r4, r0
 8009a28:	460d      	mov	r5, r1
 8009a2a:	f7f7 f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	f43f aebb 	beq.w	80097aa <_dtoa_r+0x472>
 8009a34:	e6f0      	b.n	8009818 <_dtoa_r+0x4e0>
 8009a36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009a38:	2a00      	cmp	r2, #0
 8009a3a:	f000 80db 	beq.w	8009bf4 <_dtoa_r+0x8bc>
 8009a3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a40:	2a01      	cmp	r2, #1
 8009a42:	f300 80bf 	bgt.w	8009bc4 <_dtoa_r+0x88c>
 8009a46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009a48:	2a00      	cmp	r2, #0
 8009a4a:	f000 80b7 	beq.w	8009bbc <_dtoa_r+0x884>
 8009a4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009a52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a54:	4646      	mov	r6, r8
 8009a56:	9a08      	ldr	r2, [sp, #32]
 8009a58:	2101      	movs	r1, #1
 8009a5a:	441a      	add	r2, r3
 8009a5c:	4658      	mov	r0, fp
 8009a5e:	4498      	add	r8, r3
 8009a60:	9208      	str	r2, [sp, #32]
 8009a62:	f000 fc6b 	bl	800a33c <__i2b>
 8009a66:	4605      	mov	r5, r0
 8009a68:	b15e      	cbz	r6, 8009a82 <_dtoa_r+0x74a>
 8009a6a:	9b08      	ldr	r3, [sp, #32]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	dd08      	ble.n	8009a82 <_dtoa_r+0x74a>
 8009a70:	42b3      	cmp	r3, r6
 8009a72:	9a08      	ldr	r2, [sp, #32]
 8009a74:	bfa8      	it	ge
 8009a76:	4633      	movge	r3, r6
 8009a78:	eba8 0803 	sub.w	r8, r8, r3
 8009a7c:	1af6      	subs	r6, r6, r3
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	9308      	str	r3, [sp, #32]
 8009a82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a84:	b1f3      	cbz	r3, 8009ac4 <_dtoa_r+0x78c>
 8009a86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 80b7 	beq.w	8009bfc <_dtoa_r+0x8c4>
 8009a8e:	b18c      	cbz	r4, 8009ab4 <_dtoa_r+0x77c>
 8009a90:	4629      	mov	r1, r5
 8009a92:	4622      	mov	r2, r4
 8009a94:	4658      	mov	r0, fp
 8009a96:	f000 fd11 	bl	800a4bc <__pow5mult>
 8009a9a:	464a      	mov	r2, r9
 8009a9c:	4601      	mov	r1, r0
 8009a9e:	4605      	mov	r5, r0
 8009aa0:	4658      	mov	r0, fp
 8009aa2:	f000 fc61 	bl	800a368 <__multiply>
 8009aa6:	4649      	mov	r1, r9
 8009aa8:	9004      	str	r0, [sp, #16]
 8009aaa:	4658      	mov	r0, fp
 8009aac:	f000 fb48 	bl	800a140 <_Bfree>
 8009ab0:	9b04      	ldr	r3, [sp, #16]
 8009ab2:	4699      	mov	r9, r3
 8009ab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ab6:	1b1a      	subs	r2, r3, r4
 8009ab8:	d004      	beq.n	8009ac4 <_dtoa_r+0x78c>
 8009aba:	4649      	mov	r1, r9
 8009abc:	4658      	mov	r0, fp
 8009abe:	f000 fcfd 	bl	800a4bc <__pow5mult>
 8009ac2:	4681      	mov	r9, r0
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	4658      	mov	r0, fp
 8009ac8:	f000 fc38 	bl	800a33c <__i2b>
 8009acc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ace:	4604      	mov	r4, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f000 81cf 	beq.w	8009e74 <_dtoa_r+0xb3c>
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	4601      	mov	r1, r0
 8009ada:	4658      	mov	r0, fp
 8009adc:	f000 fcee 	bl	800a4bc <__pow5mult>
 8009ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	f300 8095 	bgt.w	8009c14 <_dtoa_r+0x8dc>
 8009aea:	9b02      	ldr	r3, [sp, #8]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f040 8087 	bne.w	8009c00 <_dtoa_r+0x8c8>
 8009af2:	9b03      	ldr	r3, [sp, #12]
 8009af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f040 8089 	bne.w	8009c10 <_dtoa_r+0x8d8>
 8009afe:	9b03      	ldr	r3, [sp, #12]
 8009b00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b04:	0d1b      	lsrs	r3, r3, #20
 8009b06:	051b      	lsls	r3, r3, #20
 8009b08:	b12b      	cbz	r3, 8009b16 <_dtoa_r+0x7de>
 8009b0a:	9b08      	ldr	r3, [sp, #32]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	9308      	str	r3, [sp, #32]
 8009b10:	f108 0801 	add.w	r8, r8, #1
 8009b14:	2301      	movs	r3, #1
 8009b16:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f000 81b0 	beq.w	8009e80 <_dtoa_r+0xb48>
 8009b20:	6923      	ldr	r3, [r4, #16]
 8009b22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b26:	6918      	ldr	r0, [r3, #16]
 8009b28:	f000 fbbc 	bl	800a2a4 <__hi0bits>
 8009b2c:	f1c0 0020 	rsb	r0, r0, #32
 8009b30:	9b08      	ldr	r3, [sp, #32]
 8009b32:	4418      	add	r0, r3
 8009b34:	f010 001f 	ands.w	r0, r0, #31
 8009b38:	d077      	beq.n	8009c2a <_dtoa_r+0x8f2>
 8009b3a:	f1c0 0320 	rsb	r3, r0, #32
 8009b3e:	2b04      	cmp	r3, #4
 8009b40:	dd6b      	ble.n	8009c1a <_dtoa_r+0x8e2>
 8009b42:	9b08      	ldr	r3, [sp, #32]
 8009b44:	f1c0 001c 	rsb	r0, r0, #28
 8009b48:	4403      	add	r3, r0
 8009b4a:	4480      	add	r8, r0
 8009b4c:	4406      	add	r6, r0
 8009b4e:	9308      	str	r3, [sp, #32]
 8009b50:	f1b8 0f00 	cmp.w	r8, #0
 8009b54:	dd05      	ble.n	8009b62 <_dtoa_r+0x82a>
 8009b56:	4649      	mov	r1, r9
 8009b58:	4642      	mov	r2, r8
 8009b5a:	4658      	mov	r0, fp
 8009b5c:	f000 fd08 	bl	800a570 <__lshift>
 8009b60:	4681      	mov	r9, r0
 8009b62:	9b08      	ldr	r3, [sp, #32]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	dd05      	ble.n	8009b74 <_dtoa_r+0x83c>
 8009b68:	4621      	mov	r1, r4
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	4658      	mov	r0, fp
 8009b6e:	f000 fcff 	bl	800a570 <__lshift>
 8009b72:	4604      	mov	r4, r0
 8009b74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d059      	beq.n	8009c2e <_dtoa_r+0x8f6>
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	4648      	mov	r0, r9
 8009b7e:	f000 fd63 	bl	800a648 <__mcmp>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	da53      	bge.n	8009c2e <_dtoa_r+0x8f6>
 8009b86:	1e7b      	subs	r3, r7, #1
 8009b88:	9304      	str	r3, [sp, #16]
 8009b8a:	4649      	mov	r1, r9
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	220a      	movs	r2, #10
 8009b90:	4658      	mov	r0, fp
 8009b92:	f000 faf7 	bl	800a184 <__multadd>
 8009b96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b98:	4681      	mov	r9, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f000 8172 	beq.w	8009e84 <_dtoa_r+0xb4c>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	220a      	movs	r2, #10
 8009ba6:	4658      	mov	r0, fp
 8009ba8:	f000 faec 	bl	800a184 <__multadd>
 8009bac:	9b00      	ldr	r3, [sp, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	4605      	mov	r5, r0
 8009bb2:	dc67      	bgt.n	8009c84 <_dtoa_r+0x94c>
 8009bb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	dc41      	bgt.n	8009c3e <_dtoa_r+0x906>
 8009bba:	e063      	b.n	8009c84 <_dtoa_r+0x94c>
 8009bbc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009bbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009bc2:	e746      	b.n	8009a52 <_dtoa_r+0x71a>
 8009bc4:	9b07      	ldr	r3, [sp, #28]
 8009bc6:	1e5c      	subs	r4, r3, #1
 8009bc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bca:	42a3      	cmp	r3, r4
 8009bcc:	bfbf      	itttt	lt
 8009bce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009bd0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009bd2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009bd4:	1ae3      	sublt	r3, r4, r3
 8009bd6:	bfb4      	ite	lt
 8009bd8:	18d2      	addlt	r2, r2, r3
 8009bda:	1b1c      	subge	r4, r3, r4
 8009bdc:	9b07      	ldr	r3, [sp, #28]
 8009bde:	bfbc      	itt	lt
 8009be0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009be2:	2400      	movlt	r4, #0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	bfb5      	itete	lt
 8009be8:	eba8 0603 	sublt.w	r6, r8, r3
 8009bec:	9b07      	ldrge	r3, [sp, #28]
 8009bee:	2300      	movlt	r3, #0
 8009bf0:	4646      	movge	r6, r8
 8009bf2:	e730      	b.n	8009a56 <_dtoa_r+0x71e>
 8009bf4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009bf6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009bf8:	4646      	mov	r6, r8
 8009bfa:	e735      	b.n	8009a68 <_dtoa_r+0x730>
 8009bfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009bfe:	e75c      	b.n	8009aba <_dtoa_r+0x782>
 8009c00:	2300      	movs	r3, #0
 8009c02:	e788      	b.n	8009b16 <_dtoa_r+0x7de>
 8009c04:	3fe00000 	.word	0x3fe00000
 8009c08:	40240000 	.word	0x40240000
 8009c0c:	40140000 	.word	0x40140000
 8009c10:	9b02      	ldr	r3, [sp, #8]
 8009c12:	e780      	b.n	8009b16 <_dtoa_r+0x7de>
 8009c14:	2300      	movs	r3, #0
 8009c16:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c18:	e782      	b.n	8009b20 <_dtoa_r+0x7e8>
 8009c1a:	d099      	beq.n	8009b50 <_dtoa_r+0x818>
 8009c1c:	9a08      	ldr	r2, [sp, #32]
 8009c1e:	331c      	adds	r3, #28
 8009c20:	441a      	add	r2, r3
 8009c22:	4498      	add	r8, r3
 8009c24:	441e      	add	r6, r3
 8009c26:	9208      	str	r2, [sp, #32]
 8009c28:	e792      	b.n	8009b50 <_dtoa_r+0x818>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	e7f6      	b.n	8009c1c <_dtoa_r+0x8e4>
 8009c2e:	9b07      	ldr	r3, [sp, #28]
 8009c30:	9704      	str	r7, [sp, #16]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	dc20      	bgt.n	8009c78 <_dtoa_r+0x940>
 8009c36:	9300      	str	r3, [sp, #0]
 8009c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	dd1e      	ble.n	8009c7c <_dtoa_r+0x944>
 8009c3e:	9b00      	ldr	r3, [sp, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f47f aec0 	bne.w	80099c6 <_dtoa_r+0x68e>
 8009c46:	4621      	mov	r1, r4
 8009c48:	2205      	movs	r2, #5
 8009c4a:	4658      	mov	r0, fp
 8009c4c:	f000 fa9a 	bl	800a184 <__multadd>
 8009c50:	4601      	mov	r1, r0
 8009c52:	4604      	mov	r4, r0
 8009c54:	4648      	mov	r0, r9
 8009c56:	f000 fcf7 	bl	800a648 <__mcmp>
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	f77f aeb3 	ble.w	80099c6 <_dtoa_r+0x68e>
 8009c60:	4656      	mov	r6, sl
 8009c62:	2331      	movs	r3, #49	@ 0x31
 8009c64:	f806 3b01 	strb.w	r3, [r6], #1
 8009c68:	9b04      	ldr	r3, [sp, #16]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	9304      	str	r3, [sp, #16]
 8009c6e:	e6ae      	b.n	80099ce <_dtoa_r+0x696>
 8009c70:	9c07      	ldr	r4, [sp, #28]
 8009c72:	9704      	str	r7, [sp, #16]
 8009c74:	4625      	mov	r5, r4
 8009c76:	e7f3      	b.n	8009c60 <_dtoa_r+0x928>
 8009c78:	9b07      	ldr	r3, [sp, #28]
 8009c7a:	9300      	str	r3, [sp, #0]
 8009c7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 8104 	beq.w	8009e8c <_dtoa_r+0xb54>
 8009c84:	2e00      	cmp	r6, #0
 8009c86:	dd05      	ble.n	8009c94 <_dtoa_r+0x95c>
 8009c88:	4629      	mov	r1, r5
 8009c8a:	4632      	mov	r2, r6
 8009c8c:	4658      	mov	r0, fp
 8009c8e:	f000 fc6f 	bl	800a570 <__lshift>
 8009c92:	4605      	mov	r5, r0
 8009c94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d05a      	beq.n	8009d50 <_dtoa_r+0xa18>
 8009c9a:	6869      	ldr	r1, [r5, #4]
 8009c9c:	4658      	mov	r0, fp
 8009c9e:	f000 fa0f 	bl	800a0c0 <_Balloc>
 8009ca2:	4606      	mov	r6, r0
 8009ca4:	b928      	cbnz	r0, 8009cb2 <_dtoa_r+0x97a>
 8009ca6:	4b84      	ldr	r3, [pc, #528]	@ (8009eb8 <_dtoa_r+0xb80>)
 8009ca8:	4602      	mov	r2, r0
 8009caa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009cae:	f7ff bb5a 	b.w	8009366 <_dtoa_r+0x2e>
 8009cb2:	692a      	ldr	r2, [r5, #16]
 8009cb4:	3202      	adds	r2, #2
 8009cb6:	0092      	lsls	r2, r2, #2
 8009cb8:	f105 010c 	add.w	r1, r5, #12
 8009cbc:	300c      	adds	r0, #12
 8009cbe:	f7ff fa9c 	bl	80091fa <memcpy>
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	4631      	mov	r1, r6
 8009cc6:	4658      	mov	r0, fp
 8009cc8:	f000 fc52 	bl	800a570 <__lshift>
 8009ccc:	f10a 0301 	add.w	r3, sl, #1
 8009cd0:	9307      	str	r3, [sp, #28]
 8009cd2:	9b00      	ldr	r3, [sp, #0]
 8009cd4:	4453      	add	r3, sl
 8009cd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cd8:	9b02      	ldr	r3, [sp, #8]
 8009cda:	f003 0301 	and.w	r3, r3, #1
 8009cde:	462f      	mov	r7, r5
 8009ce0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	9b07      	ldr	r3, [sp, #28]
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	4648      	mov	r0, r9
 8009cec:	9300      	str	r3, [sp, #0]
 8009cee:	f7ff fa99 	bl	8009224 <quorem>
 8009cf2:	4639      	mov	r1, r7
 8009cf4:	9002      	str	r0, [sp, #8]
 8009cf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009cfa:	4648      	mov	r0, r9
 8009cfc:	f000 fca4 	bl	800a648 <__mcmp>
 8009d00:	462a      	mov	r2, r5
 8009d02:	9008      	str	r0, [sp, #32]
 8009d04:	4621      	mov	r1, r4
 8009d06:	4658      	mov	r0, fp
 8009d08:	f000 fcba 	bl	800a680 <__mdiff>
 8009d0c:	68c2      	ldr	r2, [r0, #12]
 8009d0e:	4606      	mov	r6, r0
 8009d10:	bb02      	cbnz	r2, 8009d54 <_dtoa_r+0xa1c>
 8009d12:	4601      	mov	r1, r0
 8009d14:	4648      	mov	r0, r9
 8009d16:	f000 fc97 	bl	800a648 <__mcmp>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	4631      	mov	r1, r6
 8009d1e:	4658      	mov	r0, fp
 8009d20:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d22:	f000 fa0d 	bl	800a140 <_Bfree>
 8009d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d2a:	9e07      	ldr	r6, [sp, #28]
 8009d2c:	ea43 0102 	orr.w	r1, r3, r2
 8009d30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d32:	4319      	orrs	r1, r3
 8009d34:	d110      	bne.n	8009d58 <_dtoa_r+0xa20>
 8009d36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d3a:	d029      	beq.n	8009d90 <_dtoa_r+0xa58>
 8009d3c:	9b08      	ldr	r3, [sp, #32]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	dd02      	ble.n	8009d48 <_dtoa_r+0xa10>
 8009d42:	9b02      	ldr	r3, [sp, #8]
 8009d44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009d48:	9b00      	ldr	r3, [sp, #0]
 8009d4a:	f883 8000 	strb.w	r8, [r3]
 8009d4e:	e63f      	b.n	80099d0 <_dtoa_r+0x698>
 8009d50:	4628      	mov	r0, r5
 8009d52:	e7bb      	b.n	8009ccc <_dtoa_r+0x994>
 8009d54:	2201      	movs	r2, #1
 8009d56:	e7e1      	b.n	8009d1c <_dtoa_r+0x9e4>
 8009d58:	9b08      	ldr	r3, [sp, #32]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	db04      	blt.n	8009d68 <_dtoa_r+0xa30>
 8009d5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d60:	430b      	orrs	r3, r1
 8009d62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d64:	430b      	orrs	r3, r1
 8009d66:	d120      	bne.n	8009daa <_dtoa_r+0xa72>
 8009d68:	2a00      	cmp	r2, #0
 8009d6a:	dded      	ble.n	8009d48 <_dtoa_r+0xa10>
 8009d6c:	4649      	mov	r1, r9
 8009d6e:	2201      	movs	r2, #1
 8009d70:	4658      	mov	r0, fp
 8009d72:	f000 fbfd 	bl	800a570 <__lshift>
 8009d76:	4621      	mov	r1, r4
 8009d78:	4681      	mov	r9, r0
 8009d7a:	f000 fc65 	bl	800a648 <__mcmp>
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	dc03      	bgt.n	8009d8a <_dtoa_r+0xa52>
 8009d82:	d1e1      	bne.n	8009d48 <_dtoa_r+0xa10>
 8009d84:	f018 0f01 	tst.w	r8, #1
 8009d88:	d0de      	beq.n	8009d48 <_dtoa_r+0xa10>
 8009d8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d8e:	d1d8      	bne.n	8009d42 <_dtoa_r+0xa0a>
 8009d90:	9a00      	ldr	r2, [sp, #0]
 8009d92:	2339      	movs	r3, #57	@ 0x39
 8009d94:	7013      	strb	r3, [r2, #0]
 8009d96:	4633      	mov	r3, r6
 8009d98:	461e      	mov	r6, r3
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009da0:	2a39      	cmp	r2, #57	@ 0x39
 8009da2:	d052      	beq.n	8009e4a <_dtoa_r+0xb12>
 8009da4:	3201      	adds	r2, #1
 8009da6:	701a      	strb	r2, [r3, #0]
 8009da8:	e612      	b.n	80099d0 <_dtoa_r+0x698>
 8009daa:	2a00      	cmp	r2, #0
 8009dac:	dd07      	ble.n	8009dbe <_dtoa_r+0xa86>
 8009dae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009db2:	d0ed      	beq.n	8009d90 <_dtoa_r+0xa58>
 8009db4:	9a00      	ldr	r2, [sp, #0]
 8009db6:	f108 0301 	add.w	r3, r8, #1
 8009dba:	7013      	strb	r3, [r2, #0]
 8009dbc:	e608      	b.n	80099d0 <_dtoa_r+0x698>
 8009dbe:	9b07      	ldr	r3, [sp, #28]
 8009dc0:	9a07      	ldr	r2, [sp, #28]
 8009dc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009dc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d028      	beq.n	8009e1e <_dtoa_r+0xae6>
 8009dcc:	4649      	mov	r1, r9
 8009dce:	2300      	movs	r3, #0
 8009dd0:	220a      	movs	r2, #10
 8009dd2:	4658      	mov	r0, fp
 8009dd4:	f000 f9d6 	bl	800a184 <__multadd>
 8009dd8:	42af      	cmp	r7, r5
 8009dda:	4681      	mov	r9, r0
 8009ddc:	f04f 0300 	mov.w	r3, #0
 8009de0:	f04f 020a 	mov.w	r2, #10
 8009de4:	4639      	mov	r1, r7
 8009de6:	4658      	mov	r0, fp
 8009de8:	d107      	bne.n	8009dfa <_dtoa_r+0xac2>
 8009dea:	f000 f9cb 	bl	800a184 <__multadd>
 8009dee:	4607      	mov	r7, r0
 8009df0:	4605      	mov	r5, r0
 8009df2:	9b07      	ldr	r3, [sp, #28]
 8009df4:	3301      	adds	r3, #1
 8009df6:	9307      	str	r3, [sp, #28]
 8009df8:	e774      	b.n	8009ce4 <_dtoa_r+0x9ac>
 8009dfa:	f000 f9c3 	bl	800a184 <__multadd>
 8009dfe:	4629      	mov	r1, r5
 8009e00:	4607      	mov	r7, r0
 8009e02:	2300      	movs	r3, #0
 8009e04:	220a      	movs	r2, #10
 8009e06:	4658      	mov	r0, fp
 8009e08:	f000 f9bc 	bl	800a184 <__multadd>
 8009e0c:	4605      	mov	r5, r0
 8009e0e:	e7f0      	b.n	8009df2 <_dtoa_r+0xaba>
 8009e10:	9b00      	ldr	r3, [sp, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	bfcc      	ite	gt
 8009e16:	461e      	movgt	r6, r3
 8009e18:	2601      	movle	r6, #1
 8009e1a:	4456      	add	r6, sl
 8009e1c:	2700      	movs	r7, #0
 8009e1e:	4649      	mov	r1, r9
 8009e20:	2201      	movs	r2, #1
 8009e22:	4658      	mov	r0, fp
 8009e24:	f000 fba4 	bl	800a570 <__lshift>
 8009e28:	4621      	mov	r1, r4
 8009e2a:	4681      	mov	r9, r0
 8009e2c:	f000 fc0c 	bl	800a648 <__mcmp>
 8009e30:	2800      	cmp	r0, #0
 8009e32:	dcb0      	bgt.n	8009d96 <_dtoa_r+0xa5e>
 8009e34:	d102      	bne.n	8009e3c <_dtoa_r+0xb04>
 8009e36:	f018 0f01 	tst.w	r8, #1
 8009e3a:	d1ac      	bne.n	8009d96 <_dtoa_r+0xa5e>
 8009e3c:	4633      	mov	r3, r6
 8009e3e:	461e      	mov	r6, r3
 8009e40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e44:	2a30      	cmp	r2, #48	@ 0x30
 8009e46:	d0fa      	beq.n	8009e3e <_dtoa_r+0xb06>
 8009e48:	e5c2      	b.n	80099d0 <_dtoa_r+0x698>
 8009e4a:	459a      	cmp	sl, r3
 8009e4c:	d1a4      	bne.n	8009d98 <_dtoa_r+0xa60>
 8009e4e:	9b04      	ldr	r3, [sp, #16]
 8009e50:	3301      	adds	r3, #1
 8009e52:	9304      	str	r3, [sp, #16]
 8009e54:	2331      	movs	r3, #49	@ 0x31
 8009e56:	f88a 3000 	strb.w	r3, [sl]
 8009e5a:	e5b9      	b.n	80099d0 <_dtoa_r+0x698>
 8009e5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009ebc <_dtoa_r+0xb84>
 8009e62:	b11b      	cbz	r3, 8009e6c <_dtoa_r+0xb34>
 8009e64:	f10a 0308 	add.w	r3, sl, #8
 8009e68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009e6a:	6013      	str	r3, [r2, #0]
 8009e6c:	4650      	mov	r0, sl
 8009e6e:	b019      	add	sp, #100	@ 0x64
 8009e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	f77f ae37 	ble.w	8009aea <_dtoa_r+0x7b2>
 8009e7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e80:	2001      	movs	r0, #1
 8009e82:	e655      	b.n	8009b30 <_dtoa_r+0x7f8>
 8009e84:	9b00      	ldr	r3, [sp, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f77f aed6 	ble.w	8009c38 <_dtoa_r+0x900>
 8009e8c:	4656      	mov	r6, sl
 8009e8e:	4621      	mov	r1, r4
 8009e90:	4648      	mov	r0, r9
 8009e92:	f7ff f9c7 	bl	8009224 <quorem>
 8009e96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009e9a:	f806 8b01 	strb.w	r8, [r6], #1
 8009e9e:	9b00      	ldr	r3, [sp, #0]
 8009ea0:	eba6 020a 	sub.w	r2, r6, sl
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	ddb3      	ble.n	8009e10 <_dtoa_r+0xad8>
 8009ea8:	4649      	mov	r1, r9
 8009eaa:	2300      	movs	r3, #0
 8009eac:	220a      	movs	r2, #10
 8009eae:	4658      	mov	r0, fp
 8009eb0:	f000 f968 	bl	800a184 <__multadd>
 8009eb4:	4681      	mov	r9, r0
 8009eb6:	e7ea      	b.n	8009e8e <_dtoa_r+0xb56>
 8009eb8:	0800d358 	.word	0x0800d358
 8009ebc:	0800d2dc 	.word	0x0800d2dc

08009ec0 <_free_r>:
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	4605      	mov	r5, r0
 8009ec4:	2900      	cmp	r1, #0
 8009ec6:	d041      	beq.n	8009f4c <_free_r+0x8c>
 8009ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ecc:	1f0c      	subs	r4, r1, #4
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	bfb8      	it	lt
 8009ed2:	18e4      	addlt	r4, r4, r3
 8009ed4:	f000 f8e8 	bl	800a0a8 <__malloc_lock>
 8009ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8009f50 <_free_r+0x90>)
 8009eda:	6813      	ldr	r3, [r2, #0]
 8009edc:	b933      	cbnz	r3, 8009eec <_free_r+0x2c>
 8009ede:	6063      	str	r3, [r4, #4]
 8009ee0:	6014      	str	r4, [r2, #0]
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ee8:	f000 b8e4 	b.w	800a0b4 <__malloc_unlock>
 8009eec:	42a3      	cmp	r3, r4
 8009eee:	d908      	bls.n	8009f02 <_free_r+0x42>
 8009ef0:	6820      	ldr	r0, [r4, #0]
 8009ef2:	1821      	adds	r1, r4, r0
 8009ef4:	428b      	cmp	r3, r1
 8009ef6:	bf01      	itttt	eq
 8009ef8:	6819      	ldreq	r1, [r3, #0]
 8009efa:	685b      	ldreq	r3, [r3, #4]
 8009efc:	1809      	addeq	r1, r1, r0
 8009efe:	6021      	streq	r1, [r4, #0]
 8009f00:	e7ed      	b.n	8009ede <_free_r+0x1e>
 8009f02:	461a      	mov	r2, r3
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	b10b      	cbz	r3, 8009f0c <_free_r+0x4c>
 8009f08:	42a3      	cmp	r3, r4
 8009f0a:	d9fa      	bls.n	8009f02 <_free_r+0x42>
 8009f0c:	6811      	ldr	r1, [r2, #0]
 8009f0e:	1850      	adds	r0, r2, r1
 8009f10:	42a0      	cmp	r0, r4
 8009f12:	d10b      	bne.n	8009f2c <_free_r+0x6c>
 8009f14:	6820      	ldr	r0, [r4, #0]
 8009f16:	4401      	add	r1, r0
 8009f18:	1850      	adds	r0, r2, r1
 8009f1a:	4283      	cmp	r3, r0
 8009f1c:	6011      	str	r1, [r2, #0]
 8009f1e:	d1e0      	bne.n	8009ee2 <_free_r+0x22>
 8009f20:	6818      	ldr	r0, [r3, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	6053      	str	r3, [r2, #4]
 8009f26:	4408      	add	r0, r1
 8009f28:	6010      	str	r0, [r2, #0]
 8009f2a:	e7da      	b.n	8009ee2 <_free_r+0x22>
 8009f2c:	d902      	bls.n	8009f34 <_free_r+0x74>
 8009f2e:	230c      	movs	r3, #12
 8009f30:	602b      	str	r3, [r5, #0]
 8009f32:	e7d6      	b.n	8009ee2 <_free_r+0x22>
 8009f34:	6820      	ldr	r0, [r4, #0]
 8009f36:	1821      	adds	r1, r4, r0
 8009f38:	428b      	cmp	r3, r1
 8009f3a:	bf04      	itt	eq
 8009f3c:	6819      	ldreq	r1, [r3, #0]
 8009f3e:	685b      	ldreq	r3, [r3, #4]
 8009f40:	6063      	str	r3, [r4, #4]
 8009f42:	bf04      	itt	eq
 8009f44:	1809      	addeq	r1, r1, r0
 8009f46:	6021      	streq	r1, [r4, #0]
 8009f48:	6054      	str	r4, [r2, #4]
 8009f4a:	e7ca      	b.n	8009ee2 <_free_r+0x22>
 8009f4c:	bd38      	pop	{r3, r4, r5, pc}
 8009f4e:	bf00      	nop
 8009f50:	20000f44 	.word	0x20000f44

08009f54 <malloc>:
 8009f54:	4b02      	ldr	r3, [pc, #8]	@ (8009f60 <malloc+0xc>)
 8009f56:	4601      	mov	r1, r0
 8009f58:	6818      	ldr	r0, [r3, #0]
 8009f5a:	f000 b825 	b.w	8009fa8 <_malloc_r>
 8009f5e:	bf00      	nop
 8009f60:	20000030 	.word	0x20000030

08009f64 <sbrk_aligned>:
 8009f64:	b570      	push	{r4, r5, r6, lr}
 8009f66:	4e0f      	ldr	r6, [pc, #60]	@ (8009fa4 <sbrk_aligned+0x40>)
 8009f68:	460c      	mov	r4, r1
 8009f6a:	6831      	ldr	r1, [r6, #0]
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	b911      	cbnz	r1, 8009f76 <sbrk_aligned+0x12>
 8009f70:	f002 fa26 	bl	800c3c0 <_sbrk_r>
 8009f74:	6030      	str	r0, [r6, #0]
 8009f76:	4621      	mov	r1, r4
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f002 fa21 	bl	800c3c0 <_sbrk_r>
 8009f7e:	1c43      	adds	r3, r0, #1
 8009f80:	d103      	bne.n	8009f8a <sbrk_aligned+0x26>
 8009f82:	f04f 34ff 	mov.w	r4, #4294967295
 8009f86:	4620      	mov	r0, r4
 8009f88:	bd70      	pop	{r4, r5, r6, pc}
 8009f8a:	1cc4      	adds	r4, r0, #3
 8009f8c:	f024 0403 	bic.w	r4, r4, #3
 8009f90:	42a0      	cmp	r0, r4
 8009f92:	d0f8      	beq.n	8009f86 <sbrk_aligned+0x22>
 8009f94:	1a21      	subs	r1, r4, r0
 8009f96:	4628      	mov	r0, r5
 8009f98:	f002 fa12 	bl	800c3c0 <_sbrk_r>
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	d1f2      	bne.n	8009f86 <sbrk_aligned+0x22>
 8009fa0:	e7ef      	b.n	8009f82 <sbrk_aligned+0x1e>
 8009fa2:	bf00      	nop
 8009fa4:	20000f40 	.word	0x20000f40

08009fa8 <_malloc_r>:
 8009fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fac:	1ccd      	adds	r5, r1, #3
 8009fae:	f025 0503 	bic.w	r5, r5, #3
 8009fb2:	3508      	adds	r5, #8
 8009fb4:	2d0c      	cmp	r5, #12
 8009fb6:	bf38      	it	cc
 8009fb8:	250c      	movcc	r5, #12
 8009fba:	2d00      	cmp	r5, #0
 8009fbc:	4606      	mov	r6, r0
 8009fbe:	db01      	blt.n	8009fc4 <_malloc_r+0x1c>
 8009fc0:	42a9      	cmp	r1, r5
 8009fc2:	d904      	bls.n	8009fce <_malloc_r+0x26>
 8009fc4:	230c      	movs	r3, #12
 8009fc6:	6033      	str	r3, [r6, #0]
 8009fc8:	2000      	movs	r0, #0
 8009fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0a4 <_malloc_r+0xfc>
 8009fd2:	f000 f869 	bl	800a0a8 <__malloc_lock>
 8009fd6:	f8d8 3000 	ldr.w	r3, [r8]
 8009fda:	461c      	mov	r4, r3
 8009fdc:	bb44      	cbnz	r4, 800a030 <_malloc_r+0x88>
 8009fde:	4629      	mov	r1, r5
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	f7ff ffbf 	bl	8009f64 <sbrk_aligned>
 8009fe6:	1c43      	adds	r3, r0, #1
 8009fe8:	4604      	mov	r4, r0
 8009fea:	d158      	bne.n	800a09e <_malloc_r+0xf6>
 8009fec:	f8d8 4000 	ldr.w	r4, [r8]
 8009ff0:	4627      	mov	r7, r4
 8009ff2:	2f00      	cmp	r7, #0
 8009ff4:	d143      	bne.n	800a07e <_malloc_r+0xd6>
 8009ff6:	2c00      	cmp	r4, #0
 8009ff8:	d04b      	beq.n	800a092 <_malloc_r+0xea>
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	4639      	mov	r1, r7
 8009ffe:	4630      	mov	r0, r6
 800a000:	eb04 0903 	add.w	r9, r4, r3
 800a004:	f002 f9dc 	bl	800c3c0 <_sbrk_r>
 800a008:	4581      	cmp	r9, r0
 800a00a:	d142      	bne.n	800a092 <_malloc_r+0xea>
 800a00c:	6821      	ldr	r1, [r4, #0]
 800a00e:	1a6d      	subs	r5, r5, r1
 800a010:	4629      	mov	r1, r5
 800a012:	4630      	mov	r0, r6
 800a014:	f7ff ffa6 	bl	8009f64 <sbrk_aligned>
 800a018:	3001      	adds	r0, #1
 800a01a:	d03a      	beq.n	800a092 <_malloc_r+0xea>
 800a01c:	6823      	ldr	r3, [r4, #0]
 800a01e:	442b      	add	r3, r5
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	f8d8 3000 	ldr.w	r3, [r8]
 800a026:	685a      	ldr	r2, [r3, #4]
 800a028:	bb62      	cbnz	r2, 800a084 <_malloc_r+0xdc>
 800a02a:	f8c8 7000 	str.w	r7, [r8]
 800a02e:	e00f      	b.n	800a050 <_malloc_r+0xa8>
 800a030:	6822      	ldr	r2, [r4, #0]
 800a032:	1b52      	subs	r2, r2, r5
 800a034:	d420      	bmi.n	800a078 <_malloc_r+0xd0>
 800a036:	2a0b      	cmp	r2, #11
 800a038:	d917      	bls.n	800a06a <_malloc_r+0xc2>
 800a03a:	1961      	adds	r1, r4, r5
 800a03c:	42a3      	cmp	r3, r4
 800a03e:	6025      	str	r5, [r4, #0]
 800a040:	bf18      	it	ne
 800a042:	6059      	strne	r1, [r3, #4]
 800a044:	6863      	ldr	r3, [r4, #4]
 800a046:	bf08      	it	eq
 800a048:	f8c8 1000 	streq.w	r1, [r8]
 800a04c:	5162      	str	r2, [r4, r5]
 800a04e:	604b      	str	r3, [r1, #4]
 800a050:	4630      	mov	r0, r6
 800a052:	f000 f82f 	bl	800a0b4 <__malloc_unlock>
 800a056:	f104 000b 	add.w	r0, r4, #11
 800a05a:	1d23      	adds	r3, r4, #4
 800a05c:	f020 0007 	bic.w	r0, r0, #7
 800a060:	1ac2      	subs	r2, r0, r3
 800a062:	bf1c      	itt	ne
 800a064:	1a1b      	subne	r3, r3, r0
 800a066:	50a3      	strne	r3, [r4, r2]
 800a068:	e7af      	b.n	8009fca <_malloc_r+0x22>
 800a06a:	6862      	ldr	r2, [r4, #4]
 800a06c:	42a3      	cmp	r3, r4
 800a06e:	bf0c      	ite	eq
 800a070:	f8c8 2000 	streq.w	r2, [r8]
 800a074:	605a      	strne	r2, [r3, #4]
 800a076:	e7eb      	b.n	800a050 <_malloc_r+0xa8>
 800a078:	4623      	mov	r3, r4
 800a07a:	6864      	ldr	r4, [r4, #4]
 800a07c:	e7ae      	b.n	8009fdc <_malloc_r+0x34>
 800a07e:	463c      	mov	r4, r7
 800a080:	687f      	ldr	r7, [r7, #4]
 800a082:	e7b6      	b.n	8009ff2 <_malloc_r+0x4a>
 800a084:	461a      	mov	r2, r3
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	42a3      	cmp	r3, r4
 800a08a:	d1fb      	bne.n	800a084 <_malloc_r+0xdc>
 800a08c:	2300      	movs	r3, #0
 800a08e:	6053      	str	r3, [r2, #4]
 800a090:	e7de      	b.n	800a050 <_malloc_r+0xa8>
 800a092:	230c      	movs	r3, #12
 800a094:	6033      	str	r3, [r6, #0]
 800a096:	4630      	mov	r0, r6
 800a098:	f000 f80c 	bl	800a0b4 <__malloc_unlock>
 800a09c:	e794      	b.n	8009fc8 <_malloc_r+0x20>
 800a09e:	6005      	str	r5, [r0, #0]
 800a0a0:	e7d6      	b.n	800a050 <_malloc_r+0xa8>
 800a0a2:	bf00      	nop
 800a0a4:	20000f44 	.word	0x20000f44

0800a0a8 <__malloc_lock>:
 800a0a8:	4801      	ldr	r0, [pc, #4]	@ (800a0b0 <__malloc_lock+0x8>)
 800a0aa:	f7ff b8a4 	b.w	80091f6 <__retarget_lock_acquire_recursive>
 800a0ae:	bf00      	nop
 800a0b0:	20000f3c 	.word	0x20000f3c

0800a0b4 <__malloc_unlock>:
 800a0b4:	4801      	ldr	r0, [pc, #4]	@ (800a0bc <__malloc_unlock+0x8>)
 800a0b6:	f7ff b89f 	b.w	80091f8 <__retarget_lock_release_recursive>
 800a0ba:	bf00      	nop
 800a0bc:	20000f3c 	.word	0x20000f3c

0800a0c0 <_Balloc>:
 800a0c0:	b570      	push	{r4, r5, r6, lr}
 800a0c2:	69c6      	ldr	r6, [r0, #28]
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	460d      	mov	r5, r1
 800a0c8:	b976      	cbnz	r6, 800a0e8 <_Balloc+0x28>
 800a0ca:	2010      	movs	r0, #16
 800a0cc:	f7ff ff42 	bl	8009f54 <malloc>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	61e0      	str	r0, [r4, #28]
 800a0d4:	b920      	cbnz	r0, 800a0e0 <_Balloc+0x20>
 800a0d6:	4b18      	ldr	r3, [pc, #96]	@ (800a138 <_Balloc+0x78>)
 800a0d8:	4818      	ldr	r0, [pc, #96]	@ (800a13c <_Balloc+0x7c>)
 800a0da:	216b      	movs	r1, #107	@ 0x6b
 800a0dc:	f002 f988 	bl	800c3f0 <__assert_func>
 800a0e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0e4:	6006      	str	r6, [r0, #0]
 800a0e6:	60c6      	str	r6, [r0, #12]
 800a0e8:	69e6      	ldr	r6, [r4, #28]
 800a0ea:	68f3      	ldr	r3, [r6, #12]
 800a0ec:	b183      	cbz	r3, 800a110 <_Balloc+0x50>
 800a0ee:	69e3      	ldr	r3, [r4, #28]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0f6:	b9b8      	cbnz	r0, 800a128 <_Balloc+0x68>
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	fa01 f605 	lsl.w	r6, r1, r5
 800a0fe:	1d72      	adds	r2, r6, #5
 800a100:	0092      	lsls	r2, r2, #2
 800a102:	4620      	mov	r0, r4
 800a104:	f002 f992 	bl	800c42c <_calloc_r>
 800a108:	b160      	cbz	r0, 800a124 <_Balloc+0x64>
 800a10a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a10e:	e00e      	b.n	800a12e <_Balloc+0x6e>
 800a110:	2221      	movs	r2, #33	@ 0x21
 800a112:	2104      	movs	r1, #4
 800a114:	4620      	mov	r0, r4
 800a116:	f002 f989 	bl	800c42c <_calloc_r>
 800a11a:	69e3      	ldr	r3, [r4, #28]
 800a11c:	60f0      	str	r0, [r6, #12]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d1e4      	bne.n	800a0ee <_Balloc+0x2e>
 800a124:	2000      	movs	r0, #0
 800a126:	bd70      	pop	{r4, r5, r6, pc}
 800a128:	6802      	ldr	r2, [r0, #0]
 800a12a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a12e:	2300      	movs	r3, #0
 800a130:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a134:	e7f7      	b.n	800a126 <_Balloc+0x66>
 800a136:	bf00      	nop
 800a138:	0800d2e9 	.word	0x0800d2e9
 800a13c:	0800d369 	.word	0x0800d369

0800a140 <_Bfree>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	69c6      	ldr	r6, [r0, #28]
 800a144:	4605      	mov	r5, r0
 800a146:	460c      	mov	r4, r1
 800a148:	b976      	cbnz	r6, 800a168 <_Bfree+0x28>
 800a14a:	2010      	movs	r0, #16
 800a14c:	f7ff ff02 	bl	8009f54 <malloc>
 800a150:	4602      	mov	r2, r0
 800a152:	61e8      	str	r0, [r5, #28]
 800a154:	b920      	cbnz	r0, 800a160 <_Bfree+0x20>
 800a156:	4b09      	ldr	r3, [pc, #36]	@ (800a17c <_Bfree+0x3c>)
 800a158:	4809      	ldr	r0, [pc, #36]	@ (800a180 <_Bfree+0x40>)
 800a15a:	218f      	movs	r1, #143	@ 0x8f
 800a15c:	f002 f948 	bl	800c3f0 <__assert_func>
 800a160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a164:	6006      	str	r6, [r0, #0]
 800a166:	60c6      	str	r6, [r0, #12]
 800a168:	b13c      	cbz	r4, 800a17a <_Bfree+0x3a>
 800a16a:	69eb      	ldr	r3, [r5, #28]
 800a16c:	6862      	ldr	r2, [r4, #4]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a174:	6021      	str	r1, [r4, #0]
 800a176:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a17a:	bd70      	pop	{r4, r5, r6, pc}
 800a17c:	0800d2e9 	.word	0x0800d2e9
 800a180:	0800d369 	.word	0x0800d369

0800a184 <__multadd>:
 800a184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a188:	690d      	ldr	r5, [r1, #16]
 800a18a:	4607      	mov	r7, r0
 800a18c:	460c      	mov	r4, r1
 800a18e:	461e      	mov	r6, r3
 800a190:	f101 0c14 	add.w	ip, r1, #20
 800a194:	2000      	movs	r0, #0
 800a196:	f8dc 3000 	ldr.w	r3, [ip]
 800a19a:	b299      	uxth	r1, r3
 800a19c:	fb02 6101 	mla	r1, r2, r1, r6
 800a1a0:	0c1e      	lsrs	r6, r3, #16
 800a1a2:	0c0b      	lsrs	r3, r1, #16
 800a1a4:	fb02 3306 	mla	r3, r2, r6, r3
 800a1a8:	b289      	uxth	r1, r1
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1b0:	4285      	cmp	r5, r0
 800a1b2:	f84c 1b04 	str.w	r1, [ip], #4
 800a1b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1ba:	dcec      	bgt.n	800a196 <__multadd+0x12>
 800a1bc:	b30e      	cbz	r6, 800a202 <__multadd+0x7e>
 800a1be:	68a3      	ldr	r3, [r4, #8]
 800a1c0:	42ab      	cmp	r3, r5
 800a1c2:	dc19      	bgt.n	800a1f8 <__multadd+0x74>
 800a1c4:	6861      	ldr	r1, [r4, #4]
 800a1c6:	4638      	mov	r0, r7
 800a1c8:	3101      	adds	r1, #1
 800a1ca:	f7ff ff79 	bl	800a0c0 <_Balloc>
 800a1ce:	4680      	mov	r8, r0
 800a1d0:	b928      	cbnz	r0, 800a1de <__multadd+0x5a>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a208 <__multadd+0x84>)
 800a1d6:	480d      	ldr	r0, [pc, #52]	@ (800a20c <__multadd+0x88>)
 800a1d8:	21ba      	movs	r1, #186	@ 0xba
 800a1da:	f002 f909 	bl	800c3f0 <__assert_func>
 800a1de:	6922      	ldr	r2, [r4, #16]
 800a1e0:	3202      	adds	r2, #2
 800a1e2:	f104 010c 	add.w	r1, r4, #12
 800a1e6:	0092      	lsls	r2, r2, #2
 800a1e8:	300c      	adds	r0, #12
 800a1ea:	f7ff f806 	bl	80091fa <memcpy>
 800a1ee:	4621      	mov	r1, r4
 800a1f0:	4638      	mov	r0, r7
 800a1f2:	f7ff ffa5 	bl	800a140 <_Bfree>
 800a1f6:	4644      	mov	r4, r8
 800a1f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a1fc:	3501      	adds	r5, #1
 800a1fe:	615e      	str	r6, [r3, #20]
 800a200:	6125      	str	r5, [r4, #16]
 800a202:	4620      	mov	r0, r4
 800a204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a208:	0800d358 	.word	0x0800d358
 800a20c:	0800d369 	.word	0x0800d369

0800a210 <__s2b>:
 800a210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a214:	460c      	mov	r4, r1
 800a216:	4615      	mov	r5, r2
 800a218:	461f      	mov	r7, r3
 800a21a:	2209      	movs	r2, #9
 800a21c:	3308      	adds	r3, #8
 800a21e:	4606      	mov	r6, r0
 800a220:	fb93 f3f2 	sdiv	r3, r3, r2
 800a224:	2100      	movs	r1, #0
 800a226:	2201      	movs	r2, #1
 800a228:	429a      	cmp	r2, r3
 800a22a:	db09      	blt.n	800a240 <__s2b+0x30>
 800a22c:	4630      	mov	r0, r6
 800a22e:	f7ff ff47 	bl	800a0c0 <_Balloc>
 800a232:	b940      	cbnz	r0, 800a246 <__s2b+0x36>
 800a234:	4602      	mov	r2, r0
 800a236:	4b19      	ldr	r3, [pc, #100]	@ (800a29c <__s2b+0x8c>)
 800a238:	4819      	ldr	r0, [pc, #100]	@ (800a2a0 <__s2b+0x90>)
 800a23a:	21d3      	movs	r1, #211	@ 0xd3
 800a23c:	f002 f8d8 	bl	800c3f0 <__assert_func>
 800a240:	0052      	lsls	r2, r2, #1
 800a242:	3101      	adds	r1, #1
 800a244:	e7f0      	b.n	800a228 <__s2b+0x18>
 800a246:	9b08      	ldr	r3, [sp, #32]
 800a248:	6143      	str	r3, [r0, #20]
 800a24a:	2d09      	cmp	r5, #9
 800a24c:	f04f 0301 	mov.w	r3, #1
 800a250:	6103      	str	r3, [r0, #16]
 800a252:	dd16      	ble.n	800a282 <__s2b+0x72>
 800a254:	f104 0909 	add.w	r9, r4, #9
 800a258:	46c8      	mov	r8, r9
 800a25a:	442c      	add	r4, r5
 800a25c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a260:	4601      	mov	r1, r0
 800a262:	3b30      	subs	r3, #48	@ 0x30
 800a264:	220a      	movs	r2, #10
 800a266:	4630      	mov	r0, r6
 800a268:	f7ff ff8c 	bl	800a184 <__multadd>
 800a26c:	45a0      	cmp	r8, r4
 800a26e:	d1f5      	bne.n	800a25c <__s2b+0x4c>
 800a270:	f1a5 0408 	sub.w	r4, r5, #8
 800a274:	444c      	add	r4, r9
 800a276:	1b2d      	subs	r5, r5, r4
 800a278:	1963      	adds	r3, r4, r5
 800a27a:	42bb      	cmp	r3, r7
 800a27c:	db04      	blt.n	800a288 <__s2b+0x78>
 800a27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a282:	340a      	adds	r4, #10
 800a284:	2509      	movs	r5, #9
 800a286:	e7f6      	b.n	800a276 <__s2b+0x66>
 800a288:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a28c:	4601      	mov	r1, r0
 800a28e:	3b30      	subs	r3, #48	@ 0x30
 800a290:	220a      	movs	r2, #10
 800a292:	4630      	mov	r0, r6
 800a294:	f7ff ff76 	bl	800a184 <__multadd>
 800a298:	e7ee      	b.n	800a278 <__s2b+0x68>
 800a29a:	bf00      	nop
 800a29c:	0800d358 	.word	0x0800d358
 800a2a0:	0800d369 	.word	0x0800d369

0800a2a4 <__hi0bits>:
 800a2a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	bf36      	itet	cc
 800a2ac:	0403      	lslcc	r3, r0, #16
 800a2ae:	2000      	movcs	r0, #0
 800a2b0:	2010      	movcc	r0, #16
 800a2b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2b6:	bf3c      	itt	cc
 800a2b8:	021b      	lslcc	r3, r3, #8
 800a2ba:	3008      	addcc	r0, #8
 800a2bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2c0:	bf3c      	itt	cc
 800a2c2:	011b      	lslcc	r3, r3, #4
 800a2c4:	3004      	addcc	r0, #4
 800a2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ca:	bf3c      	itt	cc
 800a2cc:	009b      	lslcc	r3, r3, #2
 800a2ce:	3002      	addcc	r0, #2
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	db05      	blt.n	800a2e0 <__hi0bits+0x3c>
 800a2d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a2d8:	f100 0001 	add.w	r0, r0, #1
 800a2dc:	bf08      	it	eq
 800a2de:	2020      	moveq	r0, #32
 800a2e0:	4770      	bx	lr

0800a2e2 <__lo0bits>:
 800a2e2:	6803      	ldr	r3, [r0, #0]
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	f013 0007 	ands.w	r0, r3, #7
 800a2ea:	d00b      	beq.n	800a304 <__lo0bits+0x22>
 800a2ec:	07d9      	lsls	r1, r3, #31
 800a2ee:	d421      	bmi.n	800a334 <__lo0bits+0x52>
 800a2f0:	0798      	lsls	r0, r3, #30
 800a2f2:	bf49      	itett	mi
 800a2f4:	085b      	lsrmi	r3, r3, #1
 800a2f6:	089b      	lsrpl	r3, r3, #2
 800a2f8:	2001      	movmi	r0, #1
 800a2fa:	6013      	strmi	r3, [r2, #0]
 800a2fc:	bf5c      	itt	pl
 800a2fe:	6013      	strpl	r3, [r2, #0]
 800a300:	2002      	movpl	r0, #2
 800a302:	4770      	bx	lr
 800a304:	b299      	uxth	r1, r3
 800a306:	b909      	cbnz	r1, 800a30c <__lo0bits+0x2a>
 800a308:	0c1b      	lsrs	r3, r3, #16
 800a30a:	2010      	movs	r0, #16
 800a30c:	b2d9      	uxtb	r1, r3
 800a30e:	b909      	cbnz	r1, 800a314 <__lo0bits+0x32>
 800a310:	3008      	adds	r0, #8
 800a312:	0a1b      	lsrs	r3, r3, #8
 800a314:	0719      	lsls	r1, r3, #28
 800a316:	bf04      	itt	eq
 800a318:	091b      	lsreq	r3, r3, #4
 800a31a:	3004      	addeq	r0, #4
 800a31c:	0799      	lsls	r1, r3, #30
 800a31e:	bf04      	itt	eq
 800a320:	089b      	lsreq	r3, r3, #2
 800a322:	3002      	addeq	r0, #2
 800a324:	07d9      	lsls	r1, r3, #31
 800a326:	d403      	bmi.n	800a330 <__lo0bits+0x4e>
 800a328:	085b      	lsrs	r3, r3, #1
 800a32a:	f100 0001 	add.w	r0, r0, #1
 800a32e:	d003      	beq.n	800a338 <__lo0bits+0x56>
 800a330:	6013      	str	r3, [r2, #0]
 800a332:	4770      	bx	lr
 800a334:	2000      	movs	r0, #0
 800a336:	4770      	bx	lr
 800a338:	2020      	movs	r0, #32
 800a33a:	4770      	bx	lr

0800a33c <__i2b>:
 800a33c:	b510      	push	{r4, lr}
 800a33e:	460c      	mov	r4, r1
 800a340:	2101      	movs	r1, #1
 800a342:	f7ff febd 	bl	800a0c0 <_Balloc>
 800a346:	4602      	mov	r2, r0
 800a348:	b928      	cbnz	r0, 800a356 <__i2b+0x1a>
 800a34a:	4b05      	ldr	r3, [pc, #20]	@ (800a360 <__i2b+0x24>)
 800a34c:	4805      	ldr	r0, [pc, #20]	@ (800a364 <__i2b+0x28>)
 800a34e:	f240 1145 	movw	r1, #325	@ 0x145
 800a352:	f002 f84d 	bl	800c3f0 <__assert_func>
 800a356:	2301      	movs	r3, #1
 800a358:	6144      	str	r4, [r0, #20]
 800a35a:	6103      	str	r3, [r0, #16]
 800a35c:	bd10      	pop	{r4, pc}
 800a35e:	bf00      	nop
 800a360:	0800d358 	.word	0x0800d358
 800a364:	0800d369 	.word	0x0800d369

0800a368 <__multiply>:
 800a368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36c:	4614      	mov	r4, r2
 800a36e:	690a      	ldr	r2, [r1, #16]
 800a370:	6923      	ldr	r3, [r4, #16]
 800a372:	429a      	cmp	r2, r3
 800a374:	bfa8      	it	ge
 800a376:	4623      	movge	r3, r4
 800a378:	460f      	mov	r7, r1
 800a37a:	bfa4      	itt	ge
 800a37c:	460c      	movge	r4, r1
 800a37e:	461f      	movge	r7, r3
 800a380:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a384:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a388:	68a3      	ldr	r3, [r4, #8]
 800a38a:	6861      	ldr	r1, [r4, #4]
 800a38c:	eb0a 0609 	add.w	r6, sl, r9
 800a390:	42b3      	cmp	r3, r6
 800a392:	b085      	sub	sp, #20
 800a394:	bfb8      	it	lt
 800a396:	3101      	addlt	r1, #1
 800a398:	f7ff fe92 	bl	800a0c0 <_Balloc>
 800a39c:	b930      	cbnz	r0, 800a3ac <__multiply+0x44>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	4b44      	ldr	r3, [pc, #272]	@ (800a4b4 <__multiply+0x14c>)
 800a3a2:	4845      	ldr	r0, [pc, #276]	@ (800a4b8 <__multiply+0x150>)
 800a3a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a3a8:	f002 f822 	bl	800c3f0 <__assert_func>
 800a3ac:	f100 0514 	add.w	r5, r0, #20
 800a3b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a3b4:	462b      	mov	r3, r5
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	4543      	cmp	r3, r8
 800a3ba:	d321      	bcc.n	800a400 <__multiply+0x98>
 800a3bc:	f107 0114 	add.w	r1, r7, #20
 800a3c0:	f104 0214 	add.w	r2, r4, #20
 800a3c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a3c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a3cc:	9302      	str	r3, [sp, #8]
 800a3ce:	1b13      	subs	r3, r2, r4
 800a3d0:	3b15      	subs	r3, #21
 800a3d2:	f023 0303 	bic.w	r3, r3, #3
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	f104 0715 	add.w	r7, r4, #21
 800a3dc:	42ba      	cmp	r2, r7
 800a3de:	bf38      	it	cc
 800a3e0:	2304      	movcc	r3, #4
 800a3e2:	9301      	str	r3, [sp, #4]
 800a3e4:	9b02      	ldr	r3, [sp, #8]
 800a3e6:	9103      	str	r1, [sp, #12]
 800a3e8:	428b      	cmp	r3, r1
 800a3ea:	d80c      	bhi.n	800a406 <__multiply+0x9e>
 800a3ec:	2e00      	cmp	r6, #0
 800a3ee:	dd03      	ble.n	800a3f8 <__multiply+0x90>
 800a3f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d05b      	beq.n	800a4b0 <__multiply+0x148>
 800a3f8:	6106      	str	r6, [r0, #16]
 800a3fa:	b005      	add	sp, #20
 800a3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a400:	f843 2b04 	str.w	r2, [r3], #4
 800a404:	e7d8      	b.n	800a3b8 <__multiply+0x50>
 800a406:	f8b1 a000 	ldrh.w	sl, [r1]
 800a40a:	f1ba 0f00 	cmp.w	sl, #0
 800a40e:	d024      	beq.n	800a45a <__multiply+0xf2>
 800a410:	f104 0e14 	add.w	lr, r4, #20
 800a414:	46a9      	mov	r9, r5
 800a416:	f04f 0c00 	mov.w	ip, #0
 800a41a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a41e:	f8d9 3000 	ldr.w	r3, [r9]
 800a422:	fa1f fb87 	uxth.w	fp, r7
 800a426:	b29b      	uxth	r3, r3
 800a428:	fb0a 330b 	mla	r3, sl, fp, r3
 800a42c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a430:	f8d9 7000 	ldr.w	r7, [r9]
 800a434:	4463      	add	r3, ip
 800a436:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a43a:	fb0a c70b 	mla	r7, sl, fp, ip
 800a43e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a442:	b29b      	uxth	r3, r3
 800a444:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a448:	4572      	cmp	r2, lr
 800a44a:	f849 3b04 	str.w	r3, [r9], #4
 800a44e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a452:	d8e2      	bhi.n	800a41a <__multiply+0xb2>
 800a454:	9b01      	ldr	r3, [sp, #4]
 800a456:	f845 c003 	str.w	ip, [r5, r3]
 800a45a:	9b03      	ldr	r3, [sp, #12]
 800a45c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a460:	3104      	adds	r1, #4
 800a462:	f1b9 0f00 	cmp.w	r9, #0
 800a466:	d021      	beq.n	800a4ac <__multiply+0x144>
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	f104 0c14 	add.w	ip, r4, #20
 800a46e:	46ae      	mov	lr, r5
 800a470:	f04f 0a00 	mov.w	sl, #0
 800a474:	f8bc b000 	ldrh.w	fp, [ip]
 800a478:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a47c:	fb09 770b 	mla	r7, r9, fp, r7
 800a480:	4457      	add	r7, sl
 800a482:	b29b      	uxth	r3, r3
 800a484:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a488:	f84e 3b04 	str.w	r3, [lr], #4
 800a48c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a490:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a494:	f8be 3000 	ldrh.w	r3, [lr]
 800a498:	fb09 330a 	mla	r3, r9, sl, r3
 800a49c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a4a0:	4562      	cmp	r2, ip
 800a4a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4a6:	d8e5      	bhi.n	800a474 <__multiply+0x10c>
 800a4a8:	9f01      	ldr	r7, [sp, #4]
 800a4aa:	51eb      	str	r3, [r5, r7]
 800a4ac:	3504      	adds	r5, #4
 800a4ae:	e799      	b.n	800a3e4 <__multiply+0x7c>
 800a4b0:	3e01      	subs	r6, #1
 800a4b2:	e79b      	b.n	800a3ec <__multiply+0x84>
 800a4b4:	0800d358 	.word	0x0800d358
 800a4b8:	0800d369 	.word	0x0800d369

0800a4bc <__pow5mult>:
 800a4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4c0:	4615      	mov	r5, r2
 800a4c2:	f012 0203 	ands.w	r2, r2, #3
 800a4c6:	4607      	mov	r7, r0
 800a4c8:	460e      	mov	r6, r1
 800a4ca:	d007      	beq.n	800a4dc <__pow5mult+0x20>
 800a4cc:	4c25      	ldr	r4, [pc, #148]	@ (800a564 <__pow5mult+0xa8>)
 800a4ce:	3a01      	subs	r2, #1
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4d6:	f7ff fe55 	bl	800a184 <__multadd>
 800a4da:	4606      	mov	r6, r0
 800a4dc:	10ad      	asrs	r5, r5, #2
 800a4de:	d03d      	beq.n	800a55c <__pow5mult+0xa0>
 800a4e0:	69fc      	ldr	r4, [r7, #28]
 800a4e2:	b97c      	cbnz	r4, 800a504 <__pow5mult+0x48>
 800a4e4:	2010      	movs	r0, #16
 800a4e6:	f7ff fd35 	bl	8009f54 <malloc>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	61f8      	str	r0, [r7, #28]
 800a4ee:	b928      	cbnz	r0, 800a4fc <__pow5mult+0x40>
 800a4f0:	4b1d      	ldr	r3, [pc, #116]	@ (800a568 <__pow5mult+0xac>)
 800a4f2:	481e      	ldr	r0, [pc, #120]	@ (800a56c <__pow5mult+0xb0>)
 800a4f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a4f8:	f001 ff7a 	bl	800c3f0 <__assert_func>
 800a4fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a500:	6004      	str	r4, [r0, #0]
 800a502:	60c4      	str	r4, [r0, #12]
 800a504:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a508:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a50c:	b94c      	cbnz	r4, 800a522 <__pow5mult+0x66>
 800a50e:	f240 2171 	movw	r1, #625	@ 0x271
 800a512:	4638      	mov	r0, r7
 800a514:	f7ff ff12 	bl	800a33c <__i2b>
 800a518:	2300      	movs	r3, #0
 800a51a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a51e:	4604      	mov	r4, r0
 800a520:	6003      	str	r3, [r0, #0]
 800a522:	f04f 0900 	mov.w	r9, #0
 800a526:	07eb      	lsls	r3, r5, #31
 800a528:	d50a      	bpl.n	800a540 <__pow5mult+0x84>
 800a52a:	4631      	mov	r1, r6
 800a52c:	4622      	mov	r2, r4
 800a52e:	4638      	mov	r0, r7
 800a530:	f7ff ff1a 	bl	800a368 <__multiply>
 800a534:	4631      	mov	r1, r6
 800a536:	4680      	mov	r8, r0
 800a538:	4638      	mov	r0, r7
 800a53a:	f7ff fe01 	bl	800a140 <_Bfree>
 800a53e:	4646      	mov	r6, r8
 800a540:	106d      	asrs	r5, r5, #1
 800a542:	d00b      	beq.n	800a55c <__pow5mult+0xa0>
 800a544:	6820      	ldr	r0, [r4, #0]
 800a546:	b938      	cbnz	r0, 800a558 <__pow5mult+0x9c>
 800a548:	4622      	mov	r2, r4
 800a54a:	4621      	mov	r1, r4
 800a54c:	4638      	mov	r0, r7
 800a54e:	f7ff ff0b 	bl	800a368 <__multiply>
 800a552:	6020      	str	r0, [r4, #0]
 800a554:	f8c0 9000 	str.w	r9, [r0]
 800a558:	4604      	mov	r4, r0
 800a55a:	e7e4      	b.n	800a526 <__pow5mult+0x6a>
 800a55c:	4630      	mov	r0, r6
 800a55e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a562:	bf00      	nop
 800a564:	0800d3c4 	.word	0x0800d3c4
 800a568:	0800d2e9 	.word	0x0800d2e9
 800a56c:	0800d369 	.word	0x0800d369

0800a570 <__lshift>:
 800a570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a574:	460c      	mov	r4, r1
 800a576:	6849      	ldr	r1, [r1, #4]
 800a578:	6923      	ldr	r3, [r4, #16]
 800a57a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a57e:	68a3      	ldr	r3, [r4, #8]
 800a580:	4607      	mov	r7, r0
 800a582:	4691      	mov	r9, r2
 800a584:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a588:	f108 0601 	add.w	r6, r8, #1
 800a58c:	42b3      	cmp	r3, r6
 800a58e:	db0b      	blt.n	800a5a8 <__lshift+0x38>
 800a590:	4638      	mov	r0, r7
 800a592:	f7ff fd95 	bl	800a0c0 <_Balloc>
 800a596:	4605      	mov	r5, r0
 800a598:	b948      	cbnz	r0, 800a5ae <__lshift+0x3e>
 800a59a:	4602      	mov	r2, r0
 800a59c:	4b28      	ldr	r3, [pc, #160]	@ (800a640 <__lshift+0xd0>)
 800a59e:	4829      	ldr	r0, [pc, #164]	@ (800a644 <__lshift+0xd4>)
 800a5a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a5a4:	f001 ff24 	bl	800c3f0 <__assert_func>
 800a5a8:	3101      	adds	r1, #1
 800a5aa:	005b      	lsls	r3, r3, #1
 800a5ac:	e7ee      	b.n	800a58c <__lshift+0x1c>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	f100 0114 	add.w	r1, r0, #20
 800a5b4:	f100 0210 	add.w	r2, r0, #16
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	4553      	cmp	r3, sl
 800a5bc:	db33      	blt.n	800a626 <__lshift+0xb6>
 800a5be:	6920      	ldr	r0, [r4, #16]
 800a5c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5c4:	f104 0314 	add.w	r3, r4, #20
 800a5c8:	f019 091f 	ands.w	r9, r9, #31
 800a5cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5d4:	d02b      	beq.n	800a62e <__lshift+0xbe>
 800a5d6:	f1c9 0e20 	rsb	lr, r9, #32
 800a5da:	468a      	mov	sl, r1
 800a5dc:	2200      	movs	r2, #0
 800a5de:	6818      	ldr	r0, [r3, #0]
 800a5e0:	fa00 f009 	lsl.w	r0, r0, r9
 800a5e4:	4310      	orrs	r0, r2
 800a5e6:	f84a 0b04 	str.w	r0, [sl], #4
 800a5ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5ee:	459c      	cmp	ip, r3
 800a5f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5f4:	d8f3      	bhi.n	800a5de <__lshift+0x6e>
 800a5f6:	ebac 0304 	sub.w	r3, ip, r4
 800a5fa:	3b15      	subs	r3, #21
 800a5fc:	f023 0303 	bic.w	r3, r3, #3
 800a600:	3304      	adds	r3, #4
 800a602:	f104 0015 	add.w	r0, r4, #21
 800a606:	4584      	cmp	ip, r0
 800a608:	bf38      	it	cc
 800a60a:	2304      	movcc	r3, #4
 800a60c:	50ca      	str	r2, [r1, r3]
 800a60e:	b10a      	cbz	r2, 800a614 <__lshift+0xa4>
 800a610:	f108 0602 	add.w	r6, r8, #2
 800a614:	3e01      	subs	r6, #1
 800a616:	4638      	mov	r0, r7
 800a618:	612e      	str	r6, [r5, #16]
 800a61a:	4621      	mov	r1, r4
 800a61c:	f7ff fd90 	bl	800a140 <_Bfree>
 800a620:	4628      	mov	r0, r5
 800a622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a626:	f842 0f04 	str.w	r0, [r2, #4]!
 800a62a:	3301      	adds	r3, #1
 800a62c:	e7c5      	b.n	800a5ba <__lshift+0x4a>
 800a62e:	3904      	subs	r1, #4
 800a630:	f853 2b04 	ldr.w	r2, [r3], #4
 800a634:	f841 2f04 	str.w	r2, [r1, #4]!
 800a638:	459c      	cmp	ip, r3
 800a63a:	d8f9      	bhi.n	800a630 <__lshift+0xc0>
 800a63c:	e7ea      	b.n	800a614 <__lshift+0xa4>
 800a63e:	bf00      	nop
 800a640:	0800d358 	.word	0x0800d358
 800a644:	0800d369 	.word	0x0800d369

0800a648 <__mcmp>:
 800a648:	690a      	ldr	r2, [r1, #16]
 800a64a:	4603      	mov	r3, r0
 800a64c:	6900      	ldr	r0, [r0, #16]
 800a64e:	1a80      	subs	r0, r0, r2
 800a650:	b530      	push	{r4, r5, lr}
 800a652:	d10e      	bne.n	800a672 <__mcmp+0x2a>
 800a654:	3314      	adds	r3, #20
 800a656:	3114      	adds	r1, #20
 800a658:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a65c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a660:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a664:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a668:	4295      	cmp	r5, r2
 800a66a:	d003      	beq.n	800a674 <__mcmp+0x2c>
 800a66c:	d205      	bcs.n	800a67a <__mcmp+0x32>
 800a66e:	f04f 30ff 	mov.w	r0, #4294967295
 800a672:	bd30      	pop	{r4, r5, pc}
 800a674:	42a3      	cmp	r3, r4
 800a676:	d3f3      	bcc.n	800a660 <__mcmp+0x18>
 800a678:	e7fb      	b.n	800a672 <__mcmp+0x2a>
 800a67a:	2001      	movs	r0, #1
 800a67c:	e7f9      	b.n	800a672 <__mcmp+0x2a>
	...

0800a680 <__mdiff>:
 800a680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a684:	4689      	mov	r9, r1
 800a686:	4606      	mov	r6, r0
 800a688:	4611      	mov	r1, r2
 800a68a:	4648      	mov	r0, r9
 800a68c:	4614      	mov	r4, r2
 800a68e:	f7ff ffdb 	bl	800a648 <__mcmp>
 800a692:	1e05      	subs	r5, r0, #0
 800a694:	d112      	bne.n	800a6bc <__mdiff+0x3c>
 800a696:	4629      	mov	r1, r5
 800a698:	4630      	mov	r0, r6
 800a69a:	f7ff fd11 	bl	800a0c0 <_Balloc>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	b928      	cbnz	r0, 800a6ae <__mdiff+0x2e>
 800a6a2:	4b3f      	ldr	r3, [pc, #252]	@ (800a7a0 <__mdiff+0x120>)
 800a6a4:	f240 2137 	movw	r1, #567	@ 0x237
 800a6a8:	483e      	ldr	r0, [pc, #248]	@ (800a7a4 <__mdiff+0x124>)
 800a6aa:	f001 fea1 	bl	800c3f0 <__assert_func>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	b003      	add	sp, #12
 800a6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6bc:	bfbc      	itt	lt
 800a6be:	464b      	movlt	r3, r9
 800a6c0:	46a1      	movlt	r9, r4
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a6c8:	bfba      	itte	lt
 800a6ca:	461c      	movlt	r4, r3
 800a6cc:	2501      	movlt	r5, #1
 800a6ce:	2500      	movge	r5, #0
 800a6d0:	f7ff fcf6 	bl	800a0c0 <_Balloc>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	b918      	cbnz	r0, 800a6e0 <__mdiff+0x60>
 800a6d8:	4b31      	ldr	r3, [pc, #196]	@ (800a7a0 <__mdiff+0x120>)
 800a6da:	f240 2145 	movw	r1, #581	@ 0x245
 800a6de:	e7e3      	b.n	800a6a8 <__mdiff+0x28>
 800a6e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a6e4:	6926      	ldr	r6, [r4, #16]
 800a6e6:	60c5      	str	r5, [r0, #12]
 800a6e8:	f109 0310 	add.w	r3, r9, #16
 800a6ec:	f109 0514 	add.w	r5, r9, #20
 800a6f0:	f104 0e14 	add.w	lr, r4, #20
 800a6f4:	f100 0b14 	add.w	fp, r0, #20
 800a6f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a6fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a700:	9301      	str	r3, [sp, #4]
 800a702:	46d9      	mov	r9, fp
 800a704:	f04f 0c00 	mov.w	ip, #0
 800a708:	9b01      	ldr	r3, [sp, #4]
 800a70a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a70e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a712:	9301      	str	r3, [sp, #4]
 800a714:	fa1f f38a 	uxth.w	r3, sl
 800a718:	4619      	mov	r1, r3
 800a71a:	b283      	uxth	r3, r0
 800a71c:	1acb      	subs	r3, r1, r3
 800a71e:	0c00      	lsrs	r0, r0, #16
 800a720:	4463      	add	r3, ip
 800a722:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a726:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a730:	4576      	cmp	r6, lr
 800a732:	f849 3b04 	str.w	r3, [r9], #4
 800a736:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a73a:	d8e5      	bhi.n	800a708 <__mdiff+0x88>
 800a73c:	1b33      	subs	r3, r6, r4
 800a73e:	3b15      	subs	r3, #21
 800a740:	f023 0303 	bic.w	r3, r3, #3
 800a744:	3415      	adds	r4, #21
 800a746:	3304      	adds	r3, #4
 800a748:	42a6      	cmp	r6, r4
 800a74a:	bf38      	it	cc
 800a74c:	2304      	movcc	r3, #4
 800a74e:	441d      	add	r5, r3
 800a750:	445b      	add	r3, fp
 800a752:	461e      	mov	r6, r3
 800a754:	462c      	mov	r4, r5
 800a756:	4544      	cmp	r4, r8
 800a758:	d30e      	bcc.n	800a778 <__mdiff+0xf8>
 800a75a:	f108 0103 	add.w	r1, r8, #3
 800a75e:	1b49      	subs	r1, r1, r5
 800a760:	f021 0103 	bic.w	r1, r1, #3
 800a764:	3d03      	subs	r5, #3
 800a766:	45a8      	cmp	r8, r5
 800a768:	bf38      	it	cc
 800a76a:	2100      	movcc	r1, #0
 800a76c:	440b      	add	r3, r1
 800a76e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a772:	b191      	cbz	r1, 800a79a <__mdiff+0x11a>
 800a774:	6117      	str	r7, [r2, #16]
 800a776:	e79d      	b.n	800a6b4 <__mdiff+0x34>
 800a778:	f854 1b04 	ldr.w	r1, [r4], #4
 800a77c:	46e6      	mov	lr, ip
 800a77e:	0c08      	lsrs	r0, r1, #16
 800a780:	fa1c fc81 	uxtah	ip, ip, r1
 800a784:	4471      	add	r1, lr
 800a786:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a78a:	b289      	uxth	r1, r1
 800a78c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a790:	f846 1b04 	str.w	r1, [r6], #4
 800a794:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a798:	e7dd      	b.n	800a756 <__mdiff+0xd6>
 800a79a:	3f01      	subs	r7, #1
 800a79c:	e7e7      	b.n	800a76e <__mdiff+0xee>
 800a79e:	bf00      	nop
 800a7a0:	0800d358 	.word	0x0800d358
 800a7a4:	0800d369 	.word	0x0800d369

0800a7a8 <__ulp>:
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	ed8d 0b00 	vstr	d0, [sp]
 800a7ae:	9a01      	ldr	r2, [sp, #4]
 800a7b0:	4b0f      	ldr	r3, [pc, #60]	@ (800a7f0 <__ulp+0x48>)
 800a7b2:	4013      	ands	r3, r2
 800a7b4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	dc08      	bgt.n	800a7ce <__ulp+0x26>
 800a7bc:	425b      	negs	r3, r3
 800a7be:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a7c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a7c6:	da04      	bge.n	800a7d2 <__ulp+0x2a>
 800a7c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a7cc:	4113      	asrs	r3, r2
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	e008      	b.n	800a7e4 <__ulp+0x3c>
 800a7d2:	f1a2 0314 	sub.w	r3, r2, #20
 800a7d6:	2b1e      	cmp	r3, #30
 800a7d8:	bfda      	itte	le
 800a7da:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a7de:	40da      	lsrle	r2, r3
 800a7e0:	2201      	movgt	r2, #1
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	4610      	mov	r0, r2
 800a7e8:	ec41 0b10 	vmov	d0, r0, r1
 800a7ec:	b002      	add	sp, #8
 800a7ee:	4770      	bx	lr
 800a7f0:	7ff00000 	.word	0x7ff00000

0800a7f4 <__b2d>:
 800a7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f8:	6906      	ldr	r6, [r0, #16]
 800a7fa:	f100 0814 	add.w	r8, r0, #20
 800a7fe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a802:	1f37      	subs	r7, r6, #4
 800a804:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a808:	4610      	mov	r0, r2
 800a80a:	f7ff fd4b 	bl	800a2a4 <__hi0bits>
 800a80e:	f1c0 0320 	rsb	r3, r0, #32
 800a812:	280a      	cmp	r0, #10
 800a814:	600b      	str	r3, [r1, #0]
 800a816:	491b      	ldr	r1, [pc, #108]	@ (800a884 <__b2d+0x90>)
 800a818:	dc15      	bgt.n	800a846 <__b2d+0x52>
 800a81a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a81e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a822:	45b8      	cmp	r8, r7
 800a824:	ea43 0501 	orr.w	r5, r3, r1
 800a828:	bf34      	ite	cc
 800a82a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a82e:	2300      	movcs	r3, #0
 800a830:	3015      	adds	r0, #21
 800a832:	fa02 f000 	lsl.w	r0, r2, r0
 800a836:	fa23 f30c 	lsr.w	r3, r3, ip
 800a83a:	4303      	orrs	r3, r0
 800a83c:	461c      	mov	r4, r3
 800a83e:	ec45 4b10 	vmov	d0, r4, r5
 800a842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a846:	45b8      	cmp	r8, r7
 800a848:	bf3a      	itte	cc
 800a84a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a84e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a852:	2300      	movcs	r3, #0
 800a854:	380b      	subs	r0, #11
 800a856:	d012      	beq.n	800a87e <__b2d+0x8a>
 800a858:	f1c0 0120 	rsb	r1, r0, #32
 800a85c:	fa23 f401 	lsr.w	r4, r3, r1
 800a860:	4082      	lsls	r2, r0
 800a862:	4322      	orrs	r2, r4
 800a864:	4547      	cmp	r7, r8
 800a866:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a86a:	bf8c      	ite	hi
 800a86c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a870:	2200      	movls	r2, #0
 800a872:	4083      	lsls	r3, r0
 800a874:	40ca      	lsrs	r2, r1
 800a876:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a87a:	4313      	orrs	r3, r2
 800a87c:	e7de      	b.n	800a83c <__b2d+0x48>
 800a87e:	ea42 0501 	orr.w	r5, r2, r1
 800a882:	e7db      	b.n	800a83c <__b2d+0x48>
 800a884:	3ff00000 	.word	0x3ff00000

0800a888 <__d2b>:
 800a888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a88c:	460f      	mov	r7, r1
 800a88e:	2101      	movs	r1, #1
 800a890:	ec59 8b10 	vmov	r8, r9, d0
 800a894:	4616      	mov	r6, r2
 800a896:	f7ff fc13 	bl	800a0c0 <_Balloc>
 800a89a:	4604      	mov	r4, r0
 800a89c:	b930      	cbnz	r0, 800a8ac <__d2b+0x24>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	4b23      	ldr	r3, [pc, #140]	@ (800a930 <__d2b+0xa8>)
 800a8a2:	4824      	ldr	r0, [pc, #144]	@ (800a934 <__d2b+0xac>)
 800a8a4:	f240 310f 	movw	r1, #783	@ 0x30f
 800a8a8:	f001 fda2 	bl	800c3f0 <__assert_func>
 800a8ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a8b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8b4:	b10d      	cbz	r5, 800a8ba <__d2b+0x32>
 800a8b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8ba:	9301      	str	r3, [sp, #4]
 800a8bc:	f1b8 0300 	subs.w	r3, r8, #0
 800a8c0:	d023      	beq.n	800a90a <__d2b+0x82>
 800a8c2:	4668      	mov	r0, sp
 800a8c4:	9300      	str	r3, [sp, #0]
 800a8c6:	f7ff fd0c 	bl	800a2e2 <__lo0bits>
 800a8ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a8ce:	b1d0      	cbz	r0, 800a906 <__d2b+0x7e>
 800a8d0:	f1c0 0320 	rsb	r3, r0, #32
 800a8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a8d8:	430b      	orrs	r3, r1
 800a8da:	40c2      	lsrs	r2, r0
 800a8dc:	6163      	str	r3, [r4, #20]
 800a8de:	9201      	str	r2, [sp, #4]
 800a8e0:	9b01      	ldr	r3, [sp, #4]
 800a8e2:	61a3      	str	r3, [r4, #24]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	bf0c      	ite	eq
 800a8e8:	2201      	moveq	r2, #1
 800a8ea:	2202      	movne	r2, #2
 800a8ec:	6122      	str	r2, [r4, #16]
 800a8ee:	b1a5      	cbz	r5, 800a91a <__d2b+0x92>
 800a8f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a8f4:	4405      	add	r5, r0
 800a8f6:	603d      	str	r5, [r7, #0]
 800a8f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a8fc:	6030      	str	r0, [r6, #0]
 800a8fe:	4620      	mov	r0, r4
 800a900:	b003      	add	sp, #12
 800a902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a906:	6161      	str	r1, [r4, #20]
 800a908:	e7ea      	b.n	800a8e0 <__d2b+0x58>
 800a90a:	a801      	add	r0, sp, #4
 800a90c:	f7ff fce9 	bl	800a2e2 <__lo0bits>
 800a910:	9b01      	ldr	r3, [sp, #4]
 800a912:	6163      	str	r3, [r4, #20]
 800a914:	3020      	adds	r0, #32
 800a916:	2201      	movs	r2, #1
 800a918:	e7e8      	b.n	800a8ec <__d2b+0x64>
 800a91a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a91e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a922:	6038      	str	r0, [r7, #0]
 800a924:	6918      	ldr	r0, [r3, #16]
 800a926:	f7ff fcbd 	bl	800a2a4 <__hi0bits>
 800a92a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a92e:	e7e5      	b.n	800a8fc <__d2b+0x74>
 800a930:	0800d358 	.word	0x0800d358
 800a934:	0800d369 	.word	0x0800d369

0800a938 <__ratio>:
 800a938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a93c:	b085      	sub	sp, #20
 800a93e:	e9cd 1000 	strd	r1, r0, [sp]
 800a942:	a902      	add	r1, sp, #8
 800a944:	f7ff ff56 	bl	800a7f4 <__b2d>
 800a948:	9800      	ldr	r0, [sp, #0]
 800a94a:	a903      	add	r1, sp, #12
 800a94c:	ec55 4b10 	vmov	r4, r5, d0
 800a950:	f7ff ff50 	bl	800a7f4 <__b2d>
 800a954:	9b01      	ldr	r3, [sp, #4]
 800a956:	6919      	ldr	r1, [r3, #16]
 800a958:	9b00      	ldr	r3, [sp, #0]
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	1ac9      	subs	r1, r1, r3
 800a95e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a962:	1a9b      	subs	r3, r3, r2
 800a964:	ec5b ab10 	vmov	sl, fp, d0
 800a968:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	bfce      	itee	gt
 800a970:	462a      	movgt	r2, r5
 800a972:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a976:	465a      	movle	r2, fp
 800a978:	462f      	mov	r7, r5
 800a97a:	46d9      	mov	r9, fp
 800a97c:	bfcc      	ite	gt
 800a97e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a982:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a986:	464b      	mov	r3, r9
 800a988:	4652      	mov	r2, sl
 800a98a:	4620      	mov	r0, r4
 800a98c:	4639      	mov	r1, r7
 800a98e:	f7f5 ff5d 	bl	800084c <__aeabi_ddiv>
 800a992:	ec41 0b10 	vmov	d0, r0, r1
 800a996:	b005      	add	sp, #20
 800a998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a99c <__copybits>:
 800a99c:	3901      	subs	r1, #1
 800a99e:	b570      	push	{r4, r5, r6, lr}
 800a9a0:	1149      	asrs	r1, r1, #5
 800a9a2:	6914      	ldr	r4, [r2, #16]
 800a9a4:	3101      	adds	r1, #1
 800a9a6:	f102 0314 	add.w	r3, r2, #20
 800a9aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a9ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a9b2:	1f05      	subs	r5, r0, #4
 800a9b4:	42a3      	cmp	r3, r4
 800a9b6:	d30c      	bcc.n	800a9d2 <__copybits+0x36>
 800a9b8:	1aa3      	subs	r3, r4, r2
 800a9ba:	3b11      	subs	r3, #17
 800a9bc:	f023 0303 	bic.w	r3, r3, #3
 800a9c0:	3211      	adds	r2, #17
 800a9c2:	42a2      	cmp	r2, r4
 800a9c4:	bf88      	it	hi
 800a9c6:	2300      	movhi	r3, #0
 800a9c8:	4418      	add	r0, r3
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	4288      	cmp	r0, r1
 800a9ce:	d305      	bcc.n	800a9dc <__copybits+0x40>
 800a9d0:	bd70      	pop	{r4, r5, r6, pc}
 800a9d2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a9d6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a9da:	e7eb      	b.n	800a9b4 <__copybits+0x18>
 800a9dc:	f840 3b04 	str.w	r3, [r0], #4
 800a9e0:	e7f4      	b.n	800a9cc <__copybits+0x30>

0800a9e2 <__any_on>:
 800a9e2:	f100 0214 	add.w	r2, r0, #20
 800a9e6:	6900      	ldr	r0, [r0, #16]
 800a9e8:	114b      	asrs	r3, r1, #5
 800a9ea:	4298      	cmp	r0, r3
 800a9ec:	b510      	push	{r4, lr}
 800a9ee:	db11      	blt.n	800aa14 <__any_on+0x32>
 800a9f0:	dd0a      	ble.n	800aa08 <__any_on+0x26>
 800a9f2:	f011 011f 	ands.w	r1, r1, #31
 800a9f6:	d007      	beq.n	800aa08 <__any_on+0x26>
 800a9f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a9fc:	fa24 f001 	lsr.w	r0, r4, r1
 800aa00:	fa00 f101 	lsl.w	r1, r0, r1
 800aa04:	428c      	cmp	r4, r1
 800aa06:	d10b      	bne.n	800aa20 <__any_on+0x3e>
 800aa08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d803      	bhi.n	800aa18 <__any_on+0x36>
 800aa10:	2000      	movs	r0, #0
 800aa12:	bd10      	pop	{r4, pc}
 800aa14:	4603      	mov	r3, r0
 800aa16:	e7f7      	b.n	800aa08 <__any_on+0x26>
 800aa18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa1c:	2900      	cmp	r1, #0
 800aa1e:	d0f5      	beq.n	800aa0c <__any_on+0x2a>
 800aa20:	2001      	movs	r0, #1
 800aa22:	e7f6      	b.n	800aa12 <__any_on+0x30>

0800aa24 <sulp>:
 800aa24:	b570      	push	{r4, r5, r6, lr}
 800aa26:	4604      	mov	r4, r0
 800aa28:	460d      	mov	r5, r1
 800aa2a:	ec45 4b10 	vmov	d0, r4, r5
 800aa2e:	4616      	mov	r6, r2
 800aa30:	f7ff feba 	bl	800a7a8 <__ulp>
 800aa34:	ec51 0b10 	vmov	r0, r1, d0
 800aa38:	b17e      	cbz	r6, 800aa5a <sulp+0x36>
 800aa3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aa3e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	dd09      	ble.n	800aa5a <sulp+0x36>
 800aa46:	051b      	lsls	r3, r3, #20
 800aa48:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800aa4c:	2400      	movs	r4, #0
 800aa4e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800aa52:	4622      	mov	r2, r4
 800aa54:	462b      	mov	r3, r5
 800aa56:	f7f5 fdcf 	bl	80005f8 <__aeabi_dmul>
 800aa5a:	ec41 0b10 	vmov	d0, r0, r1
 800aa5e:	bd70      	pop	{r4, r5, r6, pc}

0800aa60 <_strtod_l>:
 800aa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa64:	b09f      	sub	sp, #124	@ 0x7c
 800aa66:	460c      	mov	r4, r1
 800aa68:	9217      	str	r2, [sp, #92]	@ 0x5c
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	921a      	str	r2, [sp, #104]	@ 0x68
 800aa6e:	9005      	str	r0, [sp, #20]
 800aa70:	f04f 0a00 	mov.w	sl, #0
 800aa74:	f04f 0b00 	mov.w	fp, #0
 800aa78:	460a      	mov	r2, r1
 800aa7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa7c:	7811      	ldrb	r1, [r2, #0]
 800aa7e:	292b      	cmp	r1, #43	@ 0x2b
 800aa80:	d04a      	beq.n	800ab18 <_strtod_l+0xb8>
 800aa82:	d838      	bhi.n	800aaf6 <_strtod_l+0x96>
 800aa84:	290d      	cmp	r1, #13
 800aa86:	d832      	bhi.n	800aaee <_strtod_l+0x8e>
 800aa88:	2908      	cmp	r1, #8
 800aa8a:	d832      	bhi.n	800aaf2 <_strtod_l+0x92>
 800aa8c:	2900      	cmp	r1, #0
 800aa8e:	d03b      	beq.n	800ab08 <_strtod_l+0xa8>
 800aa90:	2200      	movs	r2, #0
 800aa92:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aa94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800aa96:	782a      	ldrb	r2, [r5, #0]
 800aa98:	2a30      	cmp	r2, #48	@ 0x30
 800aa9a:	f040 80b3 	bne.w	800ac04 <_strtod_l+0x1a4>
 800aa9e:	786a      	ldrb	r2, [r5, #1]
 800aaa0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aaa4:	2a58      	cmp	r2, #88	@ 0x58
 800aaa6:	d16e      	bne.n	800ab86 <_strtod_l+0x126>
 800aaa8:	9302      	str	r3, [sp, #8]
 800aaaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aaac:	9301      	str	r3, [sp, #4]
 800aaae:	ab1a      	add	r3, sp, #104	@ 0x68
 800aab0:	9300      	str	r3, [sp, #0]
 800aab2:	4a8e      	ldr	r2, [pc, #568]	@ (800acec <_strtod_l+0x28c>)
 800aab4:	9805      	ldr	r0, [sp, #20]
 800aab6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aab8:	a919      	add	r1, sp, #100	@ 0x64
 800aaba:	f001 fd33 	bl	800c524 <__gethex>
 800aabe:	f010 060f 	ands.w	r6, r0, #15
 800aac2:	4604      	mov	r4, r0
 800aac4:	d005      	beq.n	800aad2 <_strtod_l+0x72>
 800aac6:	2e06      	cmp	r6, #6
 800aac8:	d128      	bne.n	800ab1c <_strtod_l+0xbc>
 800aaca:	3501      	adds	r5, #1
 800aacc:	2300      	movs	r3, #0
 800aace:	9519      	str	r5, [sp, #100]	@ 0x64
 800aad0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aad2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f040 858e 	bne.w	800b5f6 <_strtod_l+0xb96>
 800aada:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aadc:	b1cb      	cbz	r3, 800ab12 <_strtod_l+0xb2>
 800aade:	4652      	mov	r2, sl
 800aae0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800aae4:	ec43 2b10 	vmov	d0, r2, r3
 800aae8:	b01f      	add	sp, #124	@ 0x7c
 800aaea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaee:	2920      	cmp	r1, #32
 800aaf0:	d1ce      	bne.n	800aa90 <_strtod_l+0x30>
 800aaf2:	3201      	adds	r2, #1
 800aaf4:	e7c1      	b.n	800aa7a <_strtod_l+0x1a>
 800aaf6:	292d      	cmp	r1, #45	@ 0x2d
 800aaf8:	d1ca      	bne.n	800aa90 <_strtod_l+0x30>
 800aafa:	2101      	movs	r1, #1
 800aafc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aafe:	1c51      	adds	r1, r2, #1
 800ab00:	9119      	str	r1, [sp, #100]	@ 0x64
 800ab02:	7852      	ldrb	r2, [r2, #1]
 800ab04:	2a00      	cmp	r2, #0
 800ab06:	d1c5      	bne.n	800aa94 <_strtod_l+0x34>
 800ab08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab0a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f040 8570 	bne.w	800b5f2 <_strtod_l+0xb92>
 800ab12:	4652      	mov	r2, sl
 800ab14:	465b      	mov	r3, fp
 800ab16:	e7e5      	b.n	800aae4 <_strtod_l+0x84>
 800ab18:	2100      	movs	r1, #0
 800ab1a:	e7ef      	b.n	800aafc <_strtod_l+0x9c>
 800ab1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ab1e:	b13a      	cbz	r2, 800ab30 <_strtod_l+0xd0>
 800ab20:	2135      	movs	r1, #53	@ 0x35
 800ab22:	a81c      	add	r0, sp, #112	@ 0x70
 800ab24:	f7ff ff3a 	bl	800a99c <__copybits>
 800ab28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab2a:	9805      	ldr	r0, [sp, #20]
 800ab2c:	f7ff fb08 	bl	800a140 <_Bfree>
 800ab30:	3e01      	subs	r6, #1
 800ab32:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ab34:	2e04      	cmp	r6, #4
 800ab36:	d806      	bhi.n	800ab46 <_strtod_l+0xe6>
 800ab38:	e8df f006 	tbb	[pc, r6]
 800ab3c:	201d0314 	.word	0x201d0314
 800ab40:	14          	.byte	0x14
 800ab41:	00          	.byte	0x00
 800ab42:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ab46:	05e1      	lsls	r1, r4, #23
 800ab48:	bf48      	it	mi
 800ab4a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ab4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab52:	0d1b      	lsrs	r3, r3, #20
 800ab54:	051b      	lsls	r3, r3, #20
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1bb      	bne.n	800aad2 <_strtod_l+0x72>
 800ab5a:	f7fe fb21 	bl	80091a0 <__errno>
 800ab5e:	2322      	movs	r3, #34	@ 0x22
 800ab60:	6003      	str	r3, [r0, #0]
 800ab62:	e7b6      	b.n	800aad2 <_strtod_l+0x72>
 800ab64:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ab68:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ab6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ab70:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ab74:	e7e7      	b.n	800ab46 <_strtod_l+0xe6>
 800ab76:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800acf4 <_strtod_l+0x294>
 800ab7a:	e7e4      	b.n	800ab46 <_strtod_l+0xe6>
 800ab7c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ab80:	f04f 3aff 	mov.w	sl, #4294967295
 800ab84:	e7df      	b.n	800ab46 <_strtod_l+0xe6>
 800ab86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab88:	1c5a      	adds	r2, r3, #1
 800ab8a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab8c:	785b      	ldrb	r3, [r3, #1]
 800ab8e:	2b30      	cmp	r3, #48	@ 0x30
 800ab90:	d0f9      	beq.n	800ab86 <_strtod_l+0x126>
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d09d      	beq.n	800aad2 <_strtod_l+0x72>
 800ab96:	2301      	movs	r3, #1
 800ab98:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab9c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab9e:	2300      	movs	r3, #0
 800aba0:	9308      	str	r3, [sp, #32]
 800aba2:	930a      	str	r3, [sp, #40]	@ 0x28
 800aba4:	461f      	mov	r7, r3
 800aba6:	220a      	movs	r2, #10
 800aba8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800abaa:	7805      	ldrb	r5, [r0, #0]
 800abac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800abb0:	b2d9      	uxtb	r1, r3
 800abb2:	2909      	cmp	r1, #9
 800abb4:	d928      	bls.n	800ac08 <_strtod_l+0x1a8>
 800abb6:	494e      	ldr	r1, [pc, #312]	@ (800acf0 <_strtod_l+0x290>)
 800abb8:	2201      	movs	r2, #1
 800abba:	f7fe fa95 	bl	80090e8 <strncmp>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d032      	beq.n	800ac28 <_strtod_l+0x1c8>
 800abc2:	2000      	movs	r0, #0
 800abc4:	462a      	mov	r2, r5
 800abc6:	4681      	mov	r9, r0
 800abc8:	463d      	mov	r5, r7
 800abca:	4603      	mov	r3, r0
 800abcc:	2a65      	cmp	r2, #101	@ 0x65
 800abce:	d001      	beq.n	800abd4 <_strtod_l+0x174>
 800abd0:	2a45      	cmp	r2, #69	@ 0x45
 800abd2:	d114      	bne.n	800abfe <_strtod_l+0x19e>
 800abd4:	b91d      	cbnz	r5, 800abde <_strtod_l+0x17e>
 800abd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abd8:	4302      	orrs	r2, r0
 800abda:	d095      	beq.n	800ab08 <_strtod_l+0xa8>
 800abdc:	2500      	movs	r5, #0
 800abde:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800abe0:	1c62      	adds	r2, r4, #1
 800abe2:	9219      	str	r2, [sp, #100]	@ 0x64
 800abe4:	7862      	ldrb	r2, [r4, #1]
 800abe6:	2a2b      	cmp	r2, #43	@ 0x2b
 800abe8:	d077      	beq.n	800acda <_strtod_l+0x27a>
 800abea:	2a2d      	cmp	r2, #45	@ 0x2d
 800abec:	d07b      	beq.n	800ace6 <_strtod_l+0x286>
 800abee:	f04f 0c00 	mov.w	ip, #0
 800abf2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800abf6:	2909      	cmp	r1, #9
 800abf8:	f240 8082 	bls.w	800ad00 <_strtod_l+0x2a0>
 800abfc:	9419      	str	r4, [sp, #100]	@ 0x64
 800abfe:	f04f 0800 	mov.w	r8, #0
 800ac02:	e0a2      	b.n	800ad4a <_strtod_l+0x2ea>
 800ac04:	2300      	movs	r3, #0
 800ac06:	e7c7      	b.n	800ab98 <_strtod_l+0x138>
 800ac08:	2f08      	cmp	r7, #8
 800ac0a:	bfd5      	itete	le
 800ac0c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ac0e:	9908      	ldrgt	r1, [sp, #32]
 800ac10:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac14:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ac18:	f100 0001 	add.w	r0, r0, #1
 800ac1c:	bfd4      	ite	le
 800ac1e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ac20:	9308      	strgt	r3, [sp, #32]
 800ac22:	3701      	adds	r7, #1
 800ac24:	9019      	str	r0, [sp, #100]	@ 0x64
 800ac26:	e7bf      	b.n	800aba8 <_strtod_l+0x148>
 800ac28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac2a:	1c5a      	adds	r2, r3, #1
 800ac2c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac2e:	785a      	ldrb	r2, [r3, #1]
 800ac30:	b37f      	cbz	r7, 800ac92 <_strtod_l+0x232>
 800ac32:	4681      	mov	r9, r0
 800ac34:	463d      	mov	r5, r7
 800ac36:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ac3a:	2b09      	cmp	r3, #9
 800ac3c:	d912      	bls.n	800ac64 <_strtod_l+0x204>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e7c4      	b.n	800abcc <_strtod_l+0x16c>
 800ac42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac44:	1c5a      	adds	r2, r3, #1
 800ac46:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac48:	785a      	ldrb	r2, [r3, #1]
 800ac4a:	3001      	adds	r0, #1
 800ac4c:	2a30      	cmp	r2, #48	@ 0x30
 800ac4e:	d0f8      	beq.n	800ac42 <_strtod_l+0x1e2>
 800ac50:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ac54:	2b08      	cmp	r3, #8
 800ac56:	f200 84d3 	bhi.w	800b600 <_strtod_l+0xba0>
 800ac5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac5c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac5e:	4681      	mov	r9, r0
 800ac60:	2000      	movs	r0, #0
 800ac62:	4605      	mov	r5, r0
 800ac64:	3a30      	subs	r2, #48	@ 0x30
 800ac66:	f100 0301 	add.w	r3, r0, #1
 800ac6a:	d02a      	beq.n	800acc2 <_strtod_l+0x262>
 800ac6c:	4499      	add	r9, r3
 800ac6e:	eb00 0c05 	add.w	ip, r0, r5
 800ac72:	462b      	mov	r3, r5
 800ac74:	210a      	movs	r1, #10
 800ac76:	4563      	cmp	r3, ip
 800ac78:	d10d      	bne.n	800ac96 <_strtod_l+0x236>
 800ac7a:	1c69      	adds	r1, r5, #1
 800ac7c:	4401      	add	r1, r0
 800ac7e:	4428      	add	r0, r5
 800ac80:	2808      	cmp	r0, #8
 800ac82:	dc16      	bgt.n	800acb2 <_strtod_l+0x252>
 800ac84:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ac86:	230a      	movs	r3, #10
 800ac88:	fb03 2300 	mla	r3, r3, r0, r2
 800ac8c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac8e:	2300      	movs	r3, #0
 800ac90:	e018      	b.n	800acc4 <_strtod_l+0x264>
 800ac92:	4638      	mov	r0, r7
 800ac94:	e7da      	b.n	800ac4c <_strtod_l+0x1ec>
 800ac96:	2b08      	cmp	r3, #8
 800ac98:	f103 0301 	add.w	r3, r3, #1
 800ac9c:	dc03      	bgt.n	800aca6 <_strtod_l+0x246>
 800ac9e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800aca0:	434e      	muls	r6, r1
 800aca2:	960a      	str	r6, [sp, #40]	@ 0x28
 800aca4:	e7e7      	b.n	800ac76 <_strtod_l+0x216>
 800aca6:	2b10      	cmp	r3, #16
 800aca8:	bfde      	ittt	le
 800acaa:	9e08      	ldrle	r6, [sp, #32]
 800acac:	434e      	mulle	r6, r1
 800acae:	9608      	strle	r6, [sp, #32]
 800acb0:	e7e1      	b.n	800ac76 <_strtod_l+0x216>
 800acb2:	280f      	cmp	r0, #15
 800acb4:	dceb      	bgt.n	800ac8e <_strtod_l+0x22e>
 800acb6:	9808      	ldr	r0, [sp, #32]
 800acb8:	230a      	movs	r3, #10
 800acba:	fb03 2300 	mla	r3, r3, r0, r2
 800acbe:	9308      	str	r3, [sp, #32]
 800acc0:	e7e5      	b.n	800ac8e <_strtod_l+0x22e>
 800acc2:	4629      	mov	r1, r5
 800acc4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800acc6:	1c50      	adds	r0, r2, #1
 800acc8:	9019      	str	r0, [sp, #100]	@ 0x64
 800acca:	7852      	ldrb	r2, [r2, #1]
 800accc:	4618      	mov	r0, r3
 800acce:	460d      	mov	r5, r1
 800acd0:	e7b1      	b.n	800ac36 <_strtod_l+0x1d6>
 800acd2:	f04f 0900 	mov.w	r9, #0
 800acd6:	2301      	movs	r3, #1
 800acd8:	e77d      	b.n	800abd6 <_strtod_l+0x176>
 800acda:	f04f 0c00 	mov.w	ip, #0
 800acde:	1ca2      	adds	r2, r4, #2
 800ace0:	9219      	str	r2, [sp, #100]	@ 0x64
 800ace2:	78a2      	ldrb	r2, [r4, #2]
 800ace4:	e785      	b.n	800abf2 <_strtod_l+0x192>
 800ace6:	f04f 0c01 	mov.w	ip, #1
 800acea:	e7f8      	b.n	800acde <_strtod_l+0x27e>
 800acec:	0800d4d8 	.word	0x0800d4d8
 800acf0:	0800d4c0 	.word	0x0800d4c0
 800acf4:	7ff00000 	.word	0x7ff00000
 800acf8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800acfa:	1c51      	adds	r1, r2, #1
 800acfc:	9119      	str	r1, [sp, #100]	@ 0x64
 800acfe:	7852      	ldrb	r2, [r2, #1]
 800ad00:	2a30      	cmp	r2, #48	@ 0x30
 800ad02:	d0f9      	beq.n	800acf8 <_strtod_l+0x298>
 800ad04:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ad08:	2908      	cmp	r1, #8
 800ad0a:	f63f af78 	bhi.w	800abfe <_strtod_l+0x19e>
 800ad0e:	3a30      	subs	r2, #48	@ 0x30
 800ad10:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad12:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad14:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ad16:	f04f 080a 	mov.w	r8, #10
 800ad1a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad1c:	1c56      	adds	r6, r2, #1
 800ad1e:	9619      	str	r6, [sp, #100]	@ 0x64
 800ad20:	7852      	ldrb	r2, [r2, #1]
 800ad22:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ad26:	f1be 0f09 	cmp.w	lr, #9
 800ad2a:	d939      	bls.n	800ada0 <_strtod_l+0x340>
 800ad2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ad2e:	1a76      	subs	r6, r6, r1
 800ad30:	2e08      	cmp	r6, #8
 800ad32:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ad36:	dc03      	bgt.n	800ad40 <_strtod_l+0x2e0>
 800ad38:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ad3a:	4588      	cmp	r8, r1
 800ad3c:	bfa8      	it	ge
 800ad3e:	4688      	movge	r8, r1
 800ad40:	f1bc 0f00 	cmp.w	ip, #0
 800ad44:	d001      	beq.n	800ad4a <_strtod_l+0x2ea>
 800ad46:	f1c8 0800 	rsb	r8, r8, #0
 800ad4a:	2d00      	cmp	r5, #0
 800ad4c:	d14e      	bne.n	800adec <_strtod_l+0x38c>
 800ad4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad50:	4308      	orrs	r0, r1
 800ad52:	f47f aebe 	bne.w	800aad2 <_strtod_l+0x72>
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	f47f aed6 	bne.w	800ab08 <_strtod_l+0xa8>
 800ad5c:	2a69      	cmp	r2, #105	@ 0x69
 800ad5e:	d028      	beq.n	800adb2 <_strtod_l+0x352>
 800ad60:	dc25      	bgt.n	800adae <_strtod_l+0x34e>
 800ad62:	2a49      	cmp	r2, #73	@ 0x49
 800ad64:	d025      	beq.n	800adb2 <_strtod_l+0x352>
 800ad66:	2a4e      	cmp	r2, #78	@ 0x4e
 800ad68:	f47f aece 	bne.w	800ab08 <_strtod_l+0xa8>
 800ad6c:	499b      	ldr	r1, [pc, #620]	@ (800afdc <_strtod_l+0x57c>)
 800ad6e:	a819      	add	r0, sp, #100	@ 0x64
 800ad70:	f001 fdfa 	bl	800c968 <__match>
 800ad74:	2800      	cmp	r0, #0
 800ad76:	f43f aec7 	beq.w	800ab08 <_strtod_l+0xa8>
 800ad7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	2b28      	cmp	r3, #40	@ 0x28
 800ad80:	d12e      	bne.n	800ade0 <_strtod_l+0x380>
 800ad82:	4997      	ldr	r1, [pc, #604]	@ (800afe0 <_strtod_l+0x580>)
 800ad84:	aa1c      	add	r2, sp, #112	@ 0x70
 800ad86:	a819      	add	r0, sp, #100	@ 0x64
 800ad88:	f001 fe02 	bl	800c990 <__hexnan>
 800ad8c:	2805      	cmp	r0, #5
 800ad8e:	d127      	bne.n	800ade0 <_strtod_l+0x380>
 800ad90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ad92:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ad96:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ad9a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ad9e:	e698      	b.n	800aad2 <_strtod_l+0x72>
 800ada0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ada2:	fb08 2101 	mla	r1, r8, r1, r2
 800ada6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800adaa:	920e      	str	r2, [sp, #56]	@ 0x38
 800adac:	e7b5      	b.n	800ad1a <_strtod_l+0x2ba>
 800adae:	2a6e      	cmp	r2, #110	@ 0x6e
 800adb0:	e7da      	b.n	800ad68 <_strtod_l+0x308>
 800adb2:	498c      	ldr	r1, [pc, #560]	@ (800afe4 <_strtod_l+0x584>)
 800adb4:	a819      	add	r0, sp, #100	@ 0x64
 800adb6:	f001 fdd7 	bl	800c968 <__match>
 800adba:	2800      	cmp	r0, #0
 800adbc:	f43f aea4 	beq.w	800ab08 <_strtod_l+0xa8>
 800adc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adc2:	4989      	ldr	r1, [pc, #548]	@ (800afe8 <_strtod_l+0x588>)
 800adc4:	3b01      	subs	r3, #1
 800adc6:	a819      	add	r0, sp, #100	@ 0x64
 800adc8:	9319      	str	r3, [sp, #100]	@ 0x64
 800adca:	f001 fdcd 	bl	800c968 <__match>
 800adce:	b910      	cbnz	r0, 800add6 <_strtod_l+0x376>
 800add0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800add2:	3301      	adds	r3, #1
 800add4:	9319      	str	r3, [sp, #100]	@ 0x64
 800add6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800aff8 <_strtod_l+0x598>
 800adda:	f04f 0a00 	mov.w	sl, #0
 800adde:	e678      	b.n	800aad2 <_strtod_l+0x72>
 800ade0:	4882      	ldr	r0, [pc, #520]	@ (800afec <_strtod_l+0x58c>)
 800ade2:	f001 fafd 	bl	800c3e0 <nan>
 800ade6:	ec5b ab10 	vmov	sl, fp, d0
 800adea:	e672      	b.n	800aad2 <_strtod_l+0x72>
 800adec:	eba8 0309 	sub.w	r3, r8, r9
 800adf0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800adf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800adf4:	2f00      	cmp	r7, #0
 800adf6:	bf08      	it	eq
 800adf8:	462f      	moveq	r7, r5
 800adfa:	2d10      	cmp	r5, #16
 800adfc:	462c      	mov	r4, r5
 800adfe:	bfa8      	it	ge
 800ae00:	2410      	movge	r4, #16
 800ae02:	f7f5 fb7f 	bl	8000504 <__aeabi_ui2d>
 800ae06:	2d09      	cmp	r5, #9
 800ae08:	4682      	mov	sl, r0
 800ae0a:	468b      	mov	fp, r1
 800ae0c:	dc13      	bgt.n	800ae36 <_strtod_l+0x3d6>
 800ae0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f43f ae5e 	beq.w	800aad2 <_strtod_l+0x72>
 800ae16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae18:	dd78      	ble.n	800af0c <_strtod_l+0x4ac>
 800ae1a:	2b16      	cmp	r3, #22
 800ae1c:	dc5f      	bgt.n	800aede <_strtod_l+0x47e>
 800ae1e:	4974      	ldr	r1, [pc, #464]	@ (800aff0 <_strtod_l+0x590>)
 800ae20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae28:	4652      	mov	r2, sl
 800ae2a:	465b      	mov	r3, fp
 800ae2c:	f7f5 fbe4 	bl	80005f8 <__aeabi_dmul>
 800ae30:	4682      	mov	sl, r0
 800ae32:	468b      	mov	fp, r1
 800ae34:	e64d      	b.n	800aad2 <_strtod_l+0x72>
 800ae36:	4b6e      	ldr	r3, [pc, #440]	@ (800aff0 <_strtod_l+0x590>)
 800ae38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae3c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ae40:	f7f5 fbda 	bl	80005f8 <__aeabi_dmul>
 800ae44:	4682      	mov	sl, r0
 800ae46:	9808      	ldr	r0, [sp, #32]
 800ae48:	468b      	mov	fp, r1
 800ae4a:	f7f5 fb5b 	bl	8000504 <__aeabi_ui2d>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	4650      	mov	r0, sl
 800ae54:	4659      	mov	r1, fp
 800ae56:	f7f5 fa19 	bl	800028c <__adddf3>
 800ae5a:	2d0f      	cmp	r5, #15
 800ae5c:	4682      	mov	sl, r0
 800ae5e:	468b      	mov	fp, r1
 800ae60:	ddd5      	ble.n	800ae0e <_strtod_l+0x3ae>
 800ae62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae64:	1b2c      	subs	r4, r5, r4
 800ae66:	441c      	add	r4, r3
 800ae68:	2c00      	cmp	r4, #0
 800ae6a:	f340 8096 	ble.w	800af9a <_strtod_l+0x53a>
 800ae6e:	f014 030f 	ands.w	r3, r4, #15
 800ae72:	d00a      	beq.n	800ae8a <_strtod_l+0x42a>
 800ae74:	495e      	ldr	r1, [pc, #376]	@ (800aff0 <_strtod_l+0x590>)
 800ae76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae7a:	4652      	mov	r2, sl
 800ae7c:	465b      	mov	r3, fp
 800ae7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae82:	f7f5 fbb9 	bl	80005f8 <__aeabi_dmul>
 800ae86:	4682      	mov	sl, r0
 800ae88:	468b      	mov	fp, r1
 800ae8a:	f034 040f 	bics.w	r4, r4, #15
 800ae8e:	d073      	beq.n	800af78 <_strtod_l+0x518>
 800ae90:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ae94:	dd48      	ble.n	800af28 <_strtod_l+0x4c8>
 800ae96:	2400      	movs	r4, #0
 800ae98:	46a0      	mov	r8, r4
 800ae9a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ae9c:	46a1      	mov	r9, r4
 800ae9e:	9a05      	ldr	r2, [sp, #20]
 800aea0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800aff8 <_strtod_l+0x598>
 800aea4:	2322      	movs	r3, #34	@ 0x22
 800aea6:	6013      	str	r3, [r2, #0]
 800aea8:	f04f 0a00 	mov.w	sl, #0
 800aeac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f43f ae0f 	beq.w	800aad2 <_strtod_l+0x72>
 800aeb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aeb6:	9805      	ldr	r0, [sp, #20]
 800aeb8:	f7ff f942 	bl	800a140 <_Bfree>
 800aebc:	9805      	ldr	r0, [sp, #20]
 800aebe:	4649      	mov	r1, r9
 800aec0:	f7ff f93e 	bl	800a140 <_Bfree>
 800aec4:	9805      	ldr	r0, [sp, #20]
 800aec6:	4641      	mov	r1, r8
 800aec8:	f7ff f93a 	bl	800a140 <_Bfree>
 800aecc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aece:	9805      	ldr	r0, [sp, #20]
 800aed0:	f7ff f936 	bl	800a140 <_Bfree>
 800aed4:	9805      	ldr	r0, [sp, #20]
 800aed6:	4621      	mov	r1, r4
 800aed8:	f7ff f932 	bl	800a140 <_Bfree>
 800aedc:	e5f9      	b.n	800aad2 <_strtod_l+0x72>
 800aede:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aee0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800aee4:	4293      	cmp	r3, r2
 800aee6:	dbbc      	blt.n	800ae62 <_strtod_l+0x402>
 800aee8:	4c41      	ldr	r4, [pc, #260]	@ (800aff0 <_strtod_l+0x590>)
 800aeea:	f1c5 050f 	rsb	r5, r5, #15
 800aeee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aef2:	4652      	mov	r2, sl
 800aef4:	465b      	mov	r3, fp
 800aef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aefa:	f7f5 fb7d 	bl	80005f8 <__aeabi_dmul>
 800aefe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af00:	1b5d      	subs	r5, r3, r5
 800af02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800af06:	e9d4 2300 	ldrd	r2, r3, [r4]
 800af0a:	e78f      	b.n	800ae2c <_strtod_l+0x3cc>
 800af0c:	3316      	adds	r3, #22
 800af0e:	dba8      	blt.n	800ae62 <_strtod_l+0x402>
 800af10:	4b37      	ldr	r3, [pc, #220]	@ (800aff0 <_strtod_l+0x590>)
 800af12:	eba9 0808 	sub.w	r8, r9, r8
 800af16:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800af1a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800af1e:	4650      	mov	r0, sl
 800af20:	4659      	mov	r1, fp
 800af22:	f7f5 fc93 	bl	800084c <__aeabi_ddiv>
 800af26:	e783      	b.n	800ae30 <_strtod_l+0x3d0>
 800af28:	4b32      	ldr	r3, [pc, #200]	@ (800aff4 <_strtod_l+0x594>)
 800af2a:	9308      	str	r3, [sp, #32]
 800af2c:	2300      	movs	r3, #0
 800af2e:	1124      	asrs	r4, r4, #4
 800af30:	4650      	mov	r0, sl
 800af32:	4659      	mov	r1, fp
 800af34:	461e      	mov	r6, r3
 800af36:	2c01      	cmp	r4, #1
 800af38:	dc21      	bgt.n	800af7e <_strtod_l+0x51e>
 800af3a:	b10b      	cbz	r3, 800af40 <_strtod_l+0x4e0>
 800af3c:	4682      	mov	sl, r0
 800af3e:	468b      	mov	fp, r1
 800af40:	492c      	ldr	r1, [pc, #176]	@ (800aff4 <_strtod_l+0x594>)
 800af42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800af46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800af4a:	4652      	mov	r2, sl
 800af4c:	465b      	mov	r3, fp
 800af4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af52:	f7f5 fb51 	bl	80005f8 <__aeabi_dmul>
 800af56:	4b28      	ldr	r3, [pc, #160]	@ (800aff8 <_strtod_l+0x598>)
 800af58:	460a      	mov	r2, r1
 800af5a:	400b      	ands	r3, r1
 800af5c:	4927      	ldr	r1, [pc, #156]	@ (800affc <_strtod_l+0x59c>)
 800af5e:	428b      	cmp	r3, r1
 800af60:	4682      	mov	sl, r0
 800af62:	d898      	bhi.n	800ae96 <_strtod_l+0x436>
 800af64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800af68:	428b      	cmp	r3, r1
 800af6a:	bf86      	itte	hi
 800af6c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b000 <_strtod_l+0x5a0>
 800af70:	f04f 3aff 	movhi.w	sl, #4294967295
 800af74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800af78:	2300      	movs	r3, #0
 800af7a:	9308      	str	r3, [sp, #32]
 800af7c:	e07a      	b.n	800b074 <_strtod_l+0x614>
 800af7e:	07e2      	lsls	r2, r4, #31
 800af80:	d505      	bpl.n	800af8e <_strtod_l+0x52e>
 800af82:	9b08      	ldr	r3, [sp, #32]
 800af84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af88:	f7f5 fb36 	bl	80005f8 <__aeabi_dmul>
 800af8c:	2301      	movs	r3, #1
 800af8e:	9a08      	ldr	r2, [sp, #32]
 800af90:	3208      	adds	r2, #8
 800af92:	3601      	adds	r6, #1
 800af94:	1064      	asrs	r4, r4, #1
 800af96:	9208      	str	r2, [sp, #32]
 800af98:	e7cd      	b.n	800af36 <_strtod_l+0x4d6>
 800af9a:	d0ed      	beq.n	800af78 <_strtod_l+0x518>
 800af9c:	4264      	negs	r4, r4
 800af9e:	f014 020f 	ands.w	r2, r4, #15
 800afa2:	d00a      	beq.n	800afba <_strtod_l+0x55a>
 800afa4:	4b12      	ldr	r3, [pc, #72]	@ (800aff0 <_strtod_l+0x590>)
 800afa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afaa:	4650      	mov	r0, sl
 800afac:	4659      	mov	r1, fp
 800afae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb2:	f7f5 fc4b 	bl	800084c <__aeabi_ddiv>
 800afb6:	4682      	mov	sl, r0
 800afb8:	468b      	mov	fp, r1
 800afba:	1124      	asrs	r4, r4, #4
 800afbc:	d0dc      	beq.n	800af78 <_strtod_l+0x518>
 800afbe:	2c1f      	cmp	r4, #31
 800afc0:	dd20      	ble.n	800b004 <_strtod_l+0x5a4>
 800afc2:	2400      	movs	r4, #0
 800afc4:	46a0      	mov	r8, r4
 800afc6:	940a      	str	r4, [sp, #40]	@ 0x28
 800afc8:	46a1      	mov	r9, r4
 800afca:	9a05      	ldr	r2, [sp, #20]
 800afcc:	2322      	movs	r3, #34	@ 0x22
 800afce:	f04f 0a00 	mov.w	sl, #0
 800afd2:	f04f 0b00 	mov.w	fp, #0
 800afd6:	6013      	str	r3, [r2, #0]
 800afd8:	e768      	b.n	800aeac <_strtod_l+0x44c>
 800afda:	bf00      	nop
 800afdc:	0800d2b2 	.word	0x0800d2b2
 800afe0:	0800d4c4 	.word	0x0800d4c4
 800afe4:	0800d2aa 	.word	0x0800d2aa
 800afe8:	0800d2df 	.word	0x0800d2df
 800afec:	0800d587 	.word	0x0800d587
 800aff0:	0800d3f8 	.word	0x0800d3f8
 800aff4:	0800d3d0 	.word	0x0800d3d0
 800aff8:	7ff00000 	.word	0x7ff00000
 800affc:	7ca00000 	.word	0x7ca00000
 800b000:	7fefffff 	.word	0x7fefffff
 800b004:	f014 0310 	ands.w	r3, r4, #16
 800b008:	bf18      	it	ne
 800b00a:	236a      	movne	r3, #106	@ 0x6a
 800b00c:	4ea9      	ldr	r6, [pc, #676]	@ (800b2b4 <_strtod_l+0x854>)
 800b00e:	9308      	str	r3, [sp, #32]
 800b010:	4650      	mov	r0, sl
 800b012:	4659      	mov	r1, fp
 800b014:	2300      	movs	r3, #0
 800b016:	07e2      	lsls	r2, r4, #31
 800b018:	d504      	bpl.n	800b024 <_strtod_l+0x5c4>
 800b01a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b01e:	f7f5 faeb 	bl	80005f8 <__aeabi_dmul>
 800b022:	2301      	movs	r3, #1
 800b024:	1064      	asrs	r4, r4, #1
 800b026:	f106 0608 	add.w	r6, r6, #8
 800b02a:	d1f4      	bne.n	800b016 <_strtod_l+0x5b6>
 800b02c:	b10b      	cbz	r3, 800b032 <_strtod_l+0x5d2>
 800b02e:	4682      	mov	sl, r0
 800b030:	468b      	mov	fp, r1
 800b032:	9b08      	ldr	r3, [sp, #32]
 800b034:	b1b3      	cbz	r3, 800b064 <_strtod_l+0x604>
 800b036:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b03a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b03e:	2b00      	cmp	r3, #0
 800b040:	4659      	mov	r1, fp
 800b042:	dd0f      	ble.n	800b064 <_strtod_l+0x604>
 800b044:	2b1f      	cmp	r3, #31
 800b046:	dd55      	ble.n	800b0f4 <_strtod_l+0x694>
 800b048:	2b34      	cmp	r3, #52	@ 0x34
 800b04a:	bfde      	ittt	le
 800b04c:	f04f 33ff 	movle.w	r3, #4294967295
 800b050:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b054:	4093      	lslle	r3, r2
 800b056:	f04f 0a00 	mov.w	sl, #0
 800b05a:	bfcc      	ite	gt
 800b05c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b060:	ea03 0b01 	andle.w	fp, r3, r1
 800b064:	2200      	movs	r2, #0
 800b066:	2300      	movs	r3, #0
 800b068:	4650      	mov	r0, sl
 800b06a:	4659      	mov	r1, fp
 800b06c:	f7f5 fd2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b070:	2800      	cmp	r0, #0
 800b072:	d1a6      	bne.n	800afc2 <_strtod_l+0x562>
 800b074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b076:	9300      	str	r3, [sp, #0]
 800b078:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b07a:	9805      	ldr	r0, [sp, #20]
 800b07c:	462b      	mov	r3, r5
 800b07e:	463a      	mov	r2, r7
 800b080:	f7ff f8c6 	bl	800a210 <__s2b>
 800b084:	900a      	str	r0, [sp, #40]	@ 0x28
 800b086:	2800      	cmp	r0, #0
 800b088:	f43f af05 	beq.w	800ae96 <_strtod_l+0x436>
 800b08c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b08e:	2a00      	cmp	r2, #0
 800b090:	eba9 0308 	sub.w	r3, r9, r8
 800b094:	bfa8      	it	ge
 800b096:	2300      	movge	r3, #0
 800b098:	9312      	str	r3, [sp, #72]	@ 0x48
 800b09a:	2400      	movs	r4, #0
 800b09c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b0a0:	9316      	str	r3, [sp, #88]	@ 0x58
 800b0a2:	46a0      	mov	r8, r4
 800b0a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0a6:	9805      	ldr	r0, [sp, #20]
 800b0a8:	6859      	ldr	r1, [r3, #4]
 800b0aa:	f7ff f809 	bl	800a0c0 <_Balloc>
 800b0ae:	4681      	mov	r9, r0
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	f43f aef4 	beq.w	800ae9e <_strtod_l+0x43e>
 800b0b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0b8:	691a      	ldr	r2, [r3, #16]
 800b0ba:	3202      	adds	r2, #2
 800b0bc:	f103 010c 	add.w	r1, r3, #12
 800b0c0:	0092      	lsls	r2, r2, #2
 800b0c2:	300c      	adds	r0, #12
 800b0c4:	f7fe f899 	bl	80091fa <memcpy>
 800b0c8:	ec4b ab10 	vmov	d0, sl, fp
 800b0cc:	9805      	ldr	r0, [sp, #20]
 800b0ce:	aa1c      	add	r2, sp, #112	@ 0x70
 800b0d0:	a91b      	add	r1, sp, #108	@ 0x6c
 800b0d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b0d6:	f7ff fbd7 	bl	800a888 <__d2b>
 800b0da:	901a      	str	r0, [sp, #104]	@ 0x68
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	f43f aede 	beq.w	800ae9e <_strtod_l+0x43e>
 800b0e2:	9805      	ldr	r0, [sp, #20]
 800b0e4:	2101      	movs	r1, #1
 800b0e6:	f7ff f929 	bl	800a33c <__i2b>
 800b0ea:	4680      	mov	r8, r0
 800b0ec:	b948      	cbnz	r0, 800b102 <_strtod_l+0x6a2>
 800b0ee:	f04f 0800 	mov.w	r8, #0
 800b0f2:	e6d4      	b.n	800ae9e <_strtod_l+0x43e>
 800b0f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0fc:	ea03 0a0a 	and.w	sl, r3, sl
 800b100:	e7b0      	b.n	800b064 <_strtod_l+0x604>
 800b102:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b104:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b106:	2d00      	cmp	r5, #0
 800b108:	bfab      	itete	ge
 800b10a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b10c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b10e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b110:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b112:	bfac      	ite	ge
 800b114:	18ef      	addge	r7, r5, r3
 800b116:	1b5e      	sublt	r6, r3, r5
 800b118:	9b08      	ldr	r3, [sp, #32]
 800b11a:	1aed      	subs	r5, r5, r3
 800b11c:	4415      	add	r5, r2
 800b11e:	4b66      	ldr	r3, [pc, #408]	@ (800b2b8 <_strtod_l+0x858>)
 800b120:	3d01      	subs	r5, #1
 800b122:	429d      	cmp	r5, r3
 800b124:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b128:	da50      	bge.n	800b1cc <_strtod_l+0x76c>
 800b12a:	1b5b      	subs	r3, r3, r5
 800b12c:	2b1f      	cmp	r3, #31
 800b12e:	eba2 0203 	sub.w	r2, r2, r3
 800b132:	f04f 0101 	mov.w	r1, #1
 800b136:	dc3d      	bgt.n	800b1b4 <_strtod_l+0x754>
 800b138:	fa01 f303 	lsl.w	r3, r1, r3
 800b13c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b13e:	2300      	movs	r3, #0
 800b140:	9310      	str	r3, [sp, #64]	@ 0x40
 800b142:	18bd      	adds	r5, r7, r2
 800b144:	9b08      	ldr	r3, [sp, #32]
 800b146:	42af      	cmp	r7, r5
 800b148:	4416      	add	r6, r2
 800b14a:	441e      	add	r6, r3
 800b14c:	463b      	mov	r3, r7
 800b14e:	bfa8      	it	ge
 800b150:	462b      	movge	r3, r5
 800b152:	42b3      	cmp	r3, r6
 800b154:	bfa8      	it	ge
 800b156:	4633      	movge	r3, r6
 800b158:	2b00      	cmp	r3, #0
 800b15a:	bfc2      	ittt	gt
 800b15c:	1aed      	subgt	r5, r5, r3
 800b15e:	1af6      	subgt	r6, r6, r3
 800b160:	1aff      	subgt	r7, r7, r3
 800b162:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b164:	2b00      	cmp	r3, #0
 800b166:	dd16      	ble.n	800b196 <_strtod_l+0x736>
 800b168:	4641      	mov	r1, r8
 800b16a:	9805      	ldr	r0, [sp, #20]
 800b16c:	461a      	mov	r2, r3
 800b16e:	f7ff f9a5 	bl	800a4bc <__pow5mult>
 800b172:	4680      	mov	r8, r0
 800b174:	2800      	cmp	r0, #0
 800b176:	d0ba      	beq.n	800b0ee <_strtod_l+0x68e>
 800b178:	4601      	mov	r1, r0
 800b17a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b17c:	9805      	ldr	r0, [sp, #20]
 800b17e:	f7ff f8f3 	bl	800a368 <__multiply>
 800b182:	900e      	str	r0, [sp, #56]	@ 0x38
 800b184:	2800      	cmp	r0, #0
 800b186:	f43f ae8a 	beq.w	800ae9e <_strtod_l+0x43e>
 800b18a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b18c:	9805      	ldr	r0, [sp, #20]
 800b18e:	f7fe ffd7 	bl	800a140 <_Bfree>
 800b192:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b194:	931a      	str	r3, [sp, #104]	@ 0x68
 800b196:	2d00      	cmp	r5, #0
 800b198:	dc1d      	bgt.n	800b1d6 <_strtod_l+0x776>
 800b19a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	dd23      	ble.n	800b1e8 <_strtod_l+0x788>
 800b1a0:	4649      	mov	r1, r9
 800b1a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b1a4:	9805      	ldr	r0, [sp, #20]
 800b1a6:	f7ff f989 	bl	800a4bc <__pow5mult>
 800b1aa:	4681      	mov	r9, r0
 800b1ac:	b9e0      	cbnz	r0, 800b1e8 <_strtod_l+0x788>
 800b1ae:	f04f 0900 	mov.w	r9, #0
 800b1b2:	e674      	b.n	800ae9e <_strtod_l+0x43e>
 800b1b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b1b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b1bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b1c0:	35e2      	adds	r5, #226	@ 0xe2
 800b1c2:	fa01 f305 	lsl.w	r3, r1, r5
 800b1c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b1ca:	e7ba      	b.n	800b142 <_strtod_l+0x6e2>
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1d4:	e7b5      	b.n	800b142 <_strtod_l+0x6e2>
 800b1d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1d8:	9805      	ldr	r0, [sp, #20]
 800b1da:	462a      	mov	r2, r5
 800b1dc:	f7ff f9c8 	bl	800a570 <__lshift>
 800b1e0:	901a      	str	r0, [sp, #104]	@ 0x68
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	d1d9      	bne.n	800b19a <_strtod_l+0x73a>
 800b1e6:	e65a      	b.n	800ae9e <_strtod_l+0x43e>
 800b1e8:	2e00      	cmp	r6, #0
 800b1ea:	dd07      	ble.n	800b1fc <_strtod_l+0x79c>
 800b1ec:	4649      	mov	r1, r9
 800b1ee:	9805      	ldr	r0, [sp, #20]
 800b1f0:	4632      	mov	r2, r6
 800b1f2:	f7ff f9bd 	bl	800a570 <__lshift>
 800b1f6:	4681      	mov	r9, r0
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d0d8      	beq.n	800b1ae <_strtod_l+0x74e>
 800b1fc:	2f00      	cmp	r7, #0
 800b1fe:	dd08      	ble.n	800b212 <_strtod_l+0x7b2>
 800b200:	4641      	mov	r1, r8
 800b202:	9805      	ldr	r0, [sp, #20]
 800b204:	463a      	mov	r2, r7
 800b206:	f7ff f9b3 	bl	800a570 <__lshift>
 800b20a:	4680      	mov	r8, r0
 800b20c:	2800      	cmp	r0, #0
 800b20e:	f43f ae46 	beq.w	800ae9e <_strtod_l+0x43e>
 800b212:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b214:	9805      	ldr	r0, [sp, #20]
 800b216:	464a      	mov	r2, r9
 800b218:	f7ff fa32 	bl	800a680 <__mdiff>
 800b21c:	4604      	mov	r4, r0
 800b21e:	2800      	cmp	r0, #0
 800b220:	f43f ae3d 	beq.w	800ae9e <_strtod_l+0x43e>
 800b224:	68c3      	ldr	r3, [r0, #12]
 800b226:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b228:	2300      	movs	r3, #0
 800b22a:	60c3      	str	r3, [r0, #12]
 800b22c:	4641      	mov	r1, r8
 800b22e:	f7ff fa0b 	bl	800a648 <__mcmp>
 800b232:	2800      	cmp	r0, #0
 800b234:	da46      	bge.n	800b2c4 <_strtod_l+0x864>
 800b236:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b238:	ea53 030a 	orrs.w	r3, r3, sl
 800b23c:	d16c      	bne.n	800b318 <_strtod_l+0x8b8>
 800b23e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b242:	2b00      	cmp	r3, #0
 800b244:	d168      	bne.n	800b318 <_strtod_l+0x8b8>
 800b246:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b24a:	0d1b      	lsrs	r3, r3, #20
 800b24c:	051b      	lsls	r3, r3, #20
 800b24e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b252:	d961      	bls.n	800b318 <_strtod_l+0x8b8>
 800b254:	6963      	ldr	r3, [r4, #20]
 800b256:	b913      	cbnz	r3, 800b25e <_strtod_l+0x7fe>
 800b258:	6923      	ldr	r3, [r4, #16]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	dd5c      	ble.n	800b318 <_strtod_l+0x8b8>
 800b25e:	4621      	mov	r1, r4
 800b260:	2201      	movs	r2, #1
 800b262:	9805      	ldr	r0, [sp, #20]
 800b264:	f7ff f984 	bl	800a570 <__lshift>
 800b268:	4641      	mov	r1, r8
 800b26a:	4604      	mov	r4, r0
 800b26c:	f7ff f9ec 	bl	800a648 <__mcmp>
 800b270:	2800      	cmp	r0, #0
 800b272:	dd51      	ble.n	800b318 <_strtod_l+0x8b8>
 800b274:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b278:	9a08      	ldr	r2, [sp, #32]
 800b27a:	0d1b      	lsrs	r3, r3, #20
 800b27c:	051b      	lsls	r3, r3, #20
 800b27e:	2a00      	cmp	r2, #0
 800b280:	d06b      	beq.n	800b35a <_strtod_l+0x8fa>
 800b282:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b286:	d868      	bhi.n	800b35a <_strtod_l+0x8fa>
 800b288:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b28c:	f67f ae9d 	bls.w	800afca <_strtod_l+0x56a>
 800b290:	4b0a      	ldr	r3, [pc, #40]	@ (800b2bc <_strtod_l+0x85c>)
 800b292:	4650      	mov	r0, sl
 800b294:	4659      	mov	r1, fp
 800b296:	2200      	movs	r2, #0
 800b298:	f7f5 f9ae 	bl	80005f8 <__aeabi_dmul>
 800b29c:	4b08      	ldr	r3, [pc, #32]	@ (800b2c0 <_strtod_l+0x860>)
 800b29e:	400b      	ands	r3, r1
 800b2a0:	4682      	mov	sl, r0
 800b2a2:	468b      	mov	fp, r1
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f47f ae05 	bne.w	800aeb4 <_strtod_l+0x454>
 800b2aa:	9a05      	ldr	r2, [sp, #20]
 800b2ac:	2322      	movs	r3, #34	@ 0x22
 800b2ae:	6013      	str	r3, [r2, #0]
 800b2b0:	e600      	b.n	800aeb4 <_strtod_l+0x454>
 800b2b2:	bf00      	nop
 800b2b4:	0800d4f0 	.word	0x0800d4f0
 800b2b8:	fffffc02 	.word	0xfffffc02
 800b2bc:	39500000 	.word	0x39500000
 800b2c0:	7ff00000 	.word	0x7ff00000
 800b2c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b2c8:	d165      	bne.n	800b396 <_strtod_l+0x936>
 800b2ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b2cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2d0:	b35a      	cbz	r2, 800b32a <_strtod_l+0x8ca>
 800b2d2:	4a9f      	ldr	r2, [pc, #636]	@ (800b550 <_strtod_l+0xaf0>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d12b      	bne.n	800b330 <_strtod_l+0x8d0>
 800b2d8:	9b08      	ldr	r3, [sp, #32]
 800b2da:	4651      	mov	r1, sl
 800b2dc:	b303      	cbz	r3, 800b320 <_strtod_l+0x8c0>
 800b2de:	4b9d      	ldr	r3, [pc, #628]	@ (800b554 <_strtod_l+0xaf4>)
 800b2e0:	465a      	mov	r2, fp
 800b2e2:	4013      	ands	r3, r2
 800b2e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b2e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ec:	d81b      	bhi.n	800b326 <_strtod_l+0x8c6>
 800b2ee:	0d1b      	lsrs	r3, r3, #20
 800b2f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b2f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b2f8:	4299      	cmp	r1, r3
 800b2fa:	d119      	bne.n	800b330 <_strtod_l+0x8d0>
 800b2fc:	4b96      	ldr	r3, [pc, #600]	@ (800b558 <_strtod_l+0xaf8>)
 800b2fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b300:	429a      	cmp	r2, r3
 800b302:	d102      	bne.n	800b30a <_strtod_l+0x8aa>
 800b304:	3101      	adds	r1, #1
 800b306:	f43f adca 	beq.w	800ae9e <_strtod_l+0x43e>
 800b30a:	4b92      	ldr	r3, [pc, #584]	@ (800b554 <_strtod_l+0xaf4>)
 800b30c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b30e:	401a      	ands	r2, r3
 800b310:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b314:	f04f 0a00 	mov.w	sl, #0
 800b318:	9b08      	ldr	r3, [sp, #32]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1b8      	bne.n	800b290 <_strtod_l+0x830>
 800b31e:	e5c9      	b.n	800aeb4 <_strtod_l+0x454>
 800b320:	f04f 33ff 	mov.w	r3, #4294967295
 800b324:	e7e8      	b.n	800b2f8 <_strtod_l+0x898>
 800b326:	4613      	mov	r3, r2
 800b328:	e7e6      	b.n	800b2f8 <_strtod_l+0x898>
 800b32a:	ea53 030a 	orrs.w	r3, r3, sl
 800b32e:	d0a1      	beq.n	800b274 <_strtod_l+0x814>
 800b330:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b332:	b1db      	cbz	r3, 800b36c <_strtod_l+0x90c>
 800b334:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b336:	4213      	tst	r3, r2
 800b338:	d0ee      	beq.n	800b318 <_strtod_l+0x8b8>
 800b33a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b33c:	9a08      	ldr	r2, [sp, #32]
 800b33e:	4650      	mov	r0, sl
 800b340:	4659      	mov	r1, fp
 800b342:	b1bb      	cbz	r3, 800b374 <_strtod_l+0x914>
 800b344:	f7ff fb6e 	bl	800aa24 <sulp>
 800b348:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b34c:	ec53 2b10 	vmov	r2, r3, d0
 800b350:	f7f4 ff9c 	bl	800028c <__adddf3>
 800b354:	4682      	mov	sl, r0
 800b356:	468b      	mov	fp, r1
 800b358:	e7de      	b.n	800b318 <_strtod_l+0x8b8>
 800b35a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b35e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b362:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b366:	f04f 3aff 	mov.w	sl, #4294967295
 800b36a:	e7d5      	b.n	800b318 <_strtod_l+0x8b8>
 800b36c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b36e:	ea13 0f0a 	tst.w	r3, sl
 800b372:	e7e1      	b.n	800b338 <_strtod_l+0x8d8>
 800b374:	f7ff fb56 	bl	800aa24 <sulp>
 800b378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b37c:	ec53 2b10 	vmov	r2, r3, d0
 800b380:	f7f4 ff82 	bl	8000288 <__aeabi_dsub>
 800b384:	2200      	movs	r2, #0
 800b386:	2300      	movs	r3, #0
 800b388:	4682      	mov	sl, r0
 800b38a:	468b      	mov	fp, r1
 800b38c:	f7f5 fb9c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b390:	2800      	cmp	r0, #0
 800b392:	d0c1      	beq.n	800b318 <_strtod_l+0x8b8>
 800b394:	e619      	b.n	800afca <_strtod_l+0x56a>
 800b396:	4641      	mov	r1, r8
 800b398:	4620      	mov	r0, r4
 800b39a:	f7ff facd 	bl	800a938 <__ratio>
 800b39e:	ec57 6b10 	vmov	r6, r7, d0
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	4639      	mov	r1, r7
 800b3ac:	f7f5 fba0 	bl	8000af0 <__aeabi_dcmple>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	d06f      	beq.n	800b494 <_strtod_l+0xa34>
 800b3b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d17a      	bne.n	800b4b0 <_strtod_l+0xa50>
 800b3ba:	f1ba 0f00 	cmp.w	sl, #0
 800b3be:	d158      	bne.n	800b472 <_strtod_l+0xa12>
 800b3c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d15a      	bne.n	800b480 <_strtod_l+0xa20>
 800b3ca:	4b64      	ldr	r3, [pc, #400]	@ (800b55c <_strtod_l+0xafc>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	4639      	mov	r1, r7
 800b3d2:	f7f5 fb83 	bl	8000adc <__aeabi_dcmplt>
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	d159      	bne.n	800b48e <_strtod_l+0xa2e>
 800b3da:	4630      	mov	r0, r6
 800b3dc:	4639      	mov	r1, r7
 800b3de:	4b60      	ldr	r3, [pc, #384]	@ (800b560 <_strtod_l+0xb00>)
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f7f5 f909 	bl	80005f8 <__aeabi_dmul>
 800b3e6:	4606      	mov	r6, r0
 800b3e8:	460f      	mov	r7, r1
 800b3ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b3ee:	9606      	str	r6, [sp, #24]
 800b3f0:	9307      	str	r3, [sp, #28]
 800b3f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3f6:	4d57      	ldr	r5, [pc, #348]	@ (800b554 <_strtod_l+0xaf4>)
 800b3f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b3fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3fe:	401d      	ands	r5, r3
 800b400:	4b58      	ldr	r3, [pc, #352]	@ (800b564 <_strtod_l+0xb04>)
 800b402:	429d      	cmp	r5, r3
 800b404:	f040 80b2 	bne.w	800b56c <_strtod_l+0xb0c>
 800b408:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b40a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b40e:	ec4b ab10 	vmov	d0, sl, fp
 800b412:	f7ff f9c9 	bl	800a7a8 <__ulp>
 800b416:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b41a:	ec51 0b10 	vmov	r0, r1, d0
 800b41e:	f7f5 f8eb 	bl	80005f8 <__aeabi_dmul>
 800b422:	4652      	mov	r2, sl
 800b424:	465b      	mov	r3, fp
 800b426:	f7f4 ff31 	bl	800028c <__adddf3>
 800b42a:	460b      	mov	r3, r1
 800b42c:	4949      	ldr	r1, [pc, #292]	@ (800b554 <_strtod_l+0xaf4>)
 800b42e:	4a4e      	ldr	r2, [pc, #312]	@ (800b568 <_strtod_l+0xb08>)
 800b430:	4019      	ands	r1, r3
 800b432:	4291      	cmp	r1, r2
 800b434:	4682      	mov	sl, r0
 800b436:	d942      	bls.n	800b4be <_strtod_l+0xa5e>
 800b438:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b43a:	4b47      	ldr	r3, [pc, #284]	@ (800b558 <_strtod_l+0xaf8>)
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d103      	bne.n	800b448 <_strtod_l+0x9e8>
 800b440:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b442:	3301      	adds	r3, #1
 800b444:	f43f ad2b 	beq.w	800ae9e <_strtod_l+0x43e>
 800b448:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b558 <_strtod_l+0xaf8>
 800b44c:	f04f 3aff 	mov.w	sl, #4294967295
 800b450:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b452:	9805      	ldr	r0, [sp, #20]
 800b454:	f7fe fe74 	bl	800a140 <_Bfree>
 800b458:	9805      	ldr	r0, [sp, #20]
 800b45a:	4649      	mov	r1, r9
 800b45c:	f7fe fe70 	bl	800a140 <_Bfree>
 800b460:	9805      	ldr	r0, [sp, #20]
 800b462:	4641      	mov	r1, r8
 800b464:	f7fe fe6c 	bl	800a140 <_Bfree>
 800b468:	9805      	ldr	r0, [sp, #20]
 800b46a:	4621      	mov	r1, r4
 800b46c:	f7fe fe68 	bl	800a140 <_Bfree>
 800b470:	e618      	b.n	800b0a4 <_strtod_l+0x644>
 800b472:	f1ba 0f01 	cmp.w	sl, #1
 800b476:	d103      	bne.n	800b480 <_strtod_l+0xa20>
 800b478:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f43f ada5 	beq.w	800afca <_strtod_l+0x56a>
 800b480:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b530 <_strtod_l+0xad0>
 800b484:	4f35      	ldr	r7, [pc, #212]	@ (800b55c <_strtod_l+0xafc>)
 800b486:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b48a:	2600      	movs	r6, #0
 800b48c:	e7b1      	b.n	800b3f2 <_strtod_l+0x992>
 800b48e:	4f34      	ldr	r7, [pc, #208]	@ (800b560 <_strtod_l+0xb00>)
 800b490:	2600      	movs	r6, #0
 800b492:	e7aa      	b.n	800b3ea <_strtod_l+0x98a>
 800b494:	4b32      	ldr	r3, [pc, #200]	@ (800b560 <_strtod_l+0xb00>)
 800b496:	4630      	mov	r0, r6
 800b498:	4639      	mov	r1, r7
 800b49a:	2200      	movs	r2, #0
 800b49c:	f7f5 f8ac 	bl	80005f8 <__aeabi_dmul>
 800b4a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	460f      	mov	r7, r1
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d09f      	beq.n	800b3ea <_strtod_l+0x98a>
 800b4aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b4ae:	e7a0      	b.n	800b3f2 <_strtod_l+0x992>
 800b4b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b538 <_strtod_l+0xad8>
 800b4b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b4b8:	ec57 6b17 	vmov	r6, r7, d7
 800b4bc:	e799      	b.n	800b3f2 <_strtod_l+0x992>
 800b4be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b4c2:	9b08      	ldr	r3, [sp, #32]
 800b4c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1c1      	bne.n	800b450 <_strtod_l+0x9f0>
 800b4cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4d0:	0d1b      	lsrs	r3, r3, #20
 800b4d2:	051b      	lsls	r3, r3, #20
 800b4d4:	429d      	cmp	r5, r3
 800b4d6:	d1bb      	bne.n	800b450 <_strtod_l+0x9f0>
 800b4d8:	4630      	mov	r0, r6
 800b4da:	4639      	mov	r1, r7
 800b4dc:	f7f5 fbd4 	bl	8000c88 <__aeabi_d2lz>
 800b4e0:	f7f5 f85c 	bl	800059c <__aeabi_l2d>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	4639      	mov	r1, r7
 800b4ec:	f7f4 fecc 	bl	8000288 <__aeabi_dsub>
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b4f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b4fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4fe:	ea46 060a 	orr.w	r6, r6, sl
 800b502:	431e      	orrs	r6, r3
 800b504:	d06f      	beq.n	800b5e6 <_strtod_l+0xb86>
 800b506:	a30e      	add	r3, pc, #56	@ (adr r3, 800b540 <_strtod_l+0xae0>)
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	f7f5 fae6 	bl	8000adc <__aeabi_dcmplt>
 800b510:	2800      	cmp	r0, #0
 800b512:	f47f accf 	bne.w	800aeb4 <_strtod_l+0x454>
 800b516:	a30c      	add	r3, pc, #48	@ (adr r3, 800b548 <_strtod_l+0xae8>)
 800b518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b520:	f7f5 fafa 	bl	8000b18 <__aeabi_dcmpgt>
 800b524:	2800      	cmp	r0, #0
 800b526:	d093      	beq.n	800b450 <_strtod_l+0x9f0>
 800b528:	e4c4      	b.n	800aeb4 <_strtod_l+0x454>
 800b52a:	bf00      	nop
 800b52c:	f3af 8000 	nop.w
 800b530:	00000000 	.word	0x00000000
 800b534:	bff00000 	.word	0xbff00000
 800b538:	00000000 	.word	0x00000000
 800b53c:	3ff00000 	.word	0x3ff00000
 800b540:	94a03595 	.word	0x94a03595
 800b544:	3fdfffff 	.word	0x3fdfffff
 800b548:	35afe535 	.word	0x35afe535
 800b54c:	3fe00000 	.word	0x3fe00000
 800b550:	000fffff 	.word	0x000fffff
 800b554:	7ff00000 	.word	0x7ff00000
 800b558:	7fefffff 	.word	0x7fefffff
 800b55c:	3ff00000 	.word	0x3ff00000
 800b560:	3fe00000 	.word	0x3fe00000
 800b564:	7fe00000 	.word	0x7fe00000
 800b568:	7c9fffff 	.word	0x7c9fffff
 800b56c:	9b08      	ldr	r3, [sp, #32]
 800b56e:	b323      	cbz	r3, 800b5ba <_strtod_l+0xb5a>
 800b570:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b574:	d821      	bhi.n	800b5ba <_strtod_l+0xb5a>
 800b576:	a328      	add	r3, pc, #160	@ (adr r3, 800b618 <_strtod_l+0xbb8>)
 800b578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57c:	4630      	mov	r0, r6
 800b57e:	4639      	mov	r1, r7
 800b580:	f7f5 fab6 	bl	8000af0 <__aeabi_dcmple>
 800b584:	b1a0      	cbz	r0, 800b5b0 <_strtod_l+0xb50>
 800b586:	4639      	mov	r1, r7
 800b588:	4630      	mov	r0, r6
 800b58a:	f7f5 fb0d 	bl	8000ba8 <__aeabi_d2uiz>
 800b58e:	2801      	cmp	r0, #1
 800b590:	bf38      	it	cc
 800b592:	2001      	movcc	r0, #1
 800b594:	f7f4 ffb6 	bl	8000504 <__aeabi_ui2d>
 800b598:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b59a:	4606      	mov	r6, r0
 800b59c:	460f      	mov	r7, r1
 800b59e:	b9fb      	cbnz	r3, 800b5e0 <_strtod_l+0xb80>
 800b5a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b5a4:	9014      	str	r0, [sp, #80]	@ 0x50
 800b5a6:	9315      	str	r3, [sp, #84]	@ 0x54
 800b5a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b5ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b5b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b5b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b5b6:	1b5b      	subs	r3, r3, r5
 800b5b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b5ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b5be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b5c2:	f7ff f8f1 	bl	800a7a8 <__ulp>
 800b5c6:	4650      	mov	r0, sl
 800b5c8:	ec53 2b10 	vmov	r2, r3, d0
 800b5cc:	4659      	mov	r1, fp
 800b5ce:	f7f5 f813 	bl	80005f8 <__aeabi_dmul>
 800b5d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b5d6:	f7f4 fe59 	bl	800028c <__adddf3>
 800b5da:	4682      	mov	sl, r0
 800b5dc:	468b      	mov	fp, r1
 800b5de:	e770      	b.n	800b4c2 <_strtod_l+0xa62>
 800b5e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b5e4:	e7e0      	b.n	800b5a8 <_strtod_l+0xb48>
 800b5e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b620 <_strtod_l+0xbc0>)
 800b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ec:	f7f5 fa76 	bl	8000adc <__aeabi_dcmplt>
 800b5f0:	e798      	b.n	800b524 <_strtod_l+0xac4>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b5f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5fa:	6013      	str	r3, [r2, #0]
 800b5fc:	f7ff ba6d 	b.w	800aada <_strtod_l+0x7a>
 800b600:	2a65      	cmp	r2, #101	@ 0x65
 800b602:	f43f ab66 	beq.w	800acd2 <_strtod_l+0x272>
 800b606:	2a45      	cmp	r2, #69	@ 0x45
 800b608:	f43f ab63 	beq.w	800acd2 <_strtod_l+0x272>
 800b60c:	2301      	movs	r3, #1
 800b60e:	f7ff bb9e 	b.w	800ad4e <_strtod_l+0x2ee>
 800b612:	bf00      	nop
 800b614:	f3af 8000 	nop.w
 800b618:	ffc00000 	.word	0xffc00000
 800b61c:	41dfffff 	.word	0x41dfffff
 800b620:	94a03595 	.word	0x94a03595
 800b624:	3fcfffff 	.word	0x3fcfffff

0800b628 <_strtod_r>:
 800b628:	4b01      	ldr	r3, [pc, #4]	@ (800b630 <_strtod_r+0x8>)
 800b62a:	f7ff ba19 	b.w	800aa60 <_strtod_l>
 800b62e:	bf00      	nop
 800b630:	20000080 	.word	0x20000080

0800b634 <__ssputs_r>:
 800b634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b638:	688e      	ldr	r6, [r1, #8]
 800b63a:	461f      	mov	r7, r3
 800b63c:	42be      	cmp	r6, r7
 800b63e:	680b      	ldr	r3, [r1, #0]
 800b640:	4682      	mov	sl, r0
 800b642:	460c      	mov	r4, r1
 800b644:	4690      	mov	r8, r2
 800b646:	d82d      	bhi.n	800b6a4 <__ssputs_r+0x70>
 800b648:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b64c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b650:	d026      	beq.n	800b6a0 <__ssputs_r+0x6c>
 800b652:	6965      	ldr	r5, [r4, #20]
 800b654:	6909      	ldr	r1, [r1, #16]
 800b656:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b65a:	eba3 0901 	sub.w	r9, r3, r1
 800b65e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b662:	1c7b      	adds	r3, r7, #1
 800b664:	444b      	add	r3, r9
 800b666:	106d      	asrs	r5, r5, #1
 800b668:	429d      	cmp	r5, r3
 800b66a:	bf38      	it	cc
 800b66c:	461d      	movcc	r5, r3
 800b66e:	0553      	lsls	r3, r2, #21
 800b670:	d527      	bpl.n	800b6c2 <__ssputs_r+0x8e>
 800b672:	4629      	mov	r1, r5
 800b674:	f7fe fc98 	bl	8009fa8 <_malloc_r>
 800b678:	4606      	mov	r6, r0
 800b67a:	b360      	cbz	r0, 800b6d6 <__ssputs_r+0xa2>
 800b67c:	6921      	ldr	r1, [r4, #16]
 800b67e:	464a      	mov	r2, r9
 800b680:	f7fd fdbb 	bl	80091fa <memcpy>
 800b684:	89a3      	ldrh	r3, [r4, #12]
 800b686:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b68a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b68e:	81a3      	strh	r3, [r4, #12]
 800b690:	6126      	str	r6, [r4, #16]
 800b692:	6165      	str	r5, [r4, #20]
 800b694:	444e      	add	r6, r9
 800b696:	eba5 0509 	sub.w	r5, r5, r9
 800b69a:	6026      	str	r6, [r4, #0]
 800b69c:	60a5      	str	r5, [r4, #8]
 800b69e:	463e      	mov	r6, r7
 800b6a0:	42be      	cmp	r6, r7
 800b6a2:	d900      	bls.n	800b6a6 <__ssputs_r+0x72>
 800b6a4:	463e      	mov	r6, r7
 800b6a6:	6820      	ldr	r0, [r4, #0]
 800b6a8:	4632      	mov	r2, r6
 800b6aa:	4641      	mov	r1, r8
 800b6ac:	f000 fe4b 	bl	800c346 <memmove>
 800b6b0:	68a3      	ldr	r3, [r4, #8]
 800b6b2:	1b9b      	subs	r3, r3, r6
 800b6b4:	60a3      	str	r3, [r4, #8]
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	4433      	add	r3, r6
 800b6ba:	6023      	str	r3, [r4, #0]
 800b6bc:	2000      	movs	r0, #0
 800b6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c2:	462a      	mov	r2, r5
 800b6c4:	f001 fa11 	bl	800caea <_realloc_r>
 800b6c8:	4606      	mov	r6, r0
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	d1e0      	bne.n	800b690 <__ssputs_r+0x5c>
 800b6ce:	6921      	ldr	r1, [r4, #16]
 800b6d0:	4650      	mov	r0, sl
 800b6d2:	f7fe fbf5 	bl	8009ec0 <_free_r>
 800b6d6:	230c      	movs	r3, #12
 800b6d8:	f8ca 3000 	str.w	r3, [sl]
 800b6dc:	89a3      	ldrh	r3, [r4, #12]
 800b6de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6e2:	81a3      	strh	r3, [r4, #12]
 800b6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e8:	e7e9      	b.n	800b6be <__ssputs_r+0x8a>
	...

0800b6ec <_svfiprintf_r>:
 800b6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f0:	4698      	mov	r8, r3
 800b6f2:	898b      	ldrh	r3, [r1, #12]
 800b6f4:	061b      	lsls	r3, r3, #24
 800b6f6:	b09d      	sub	sp, #116	@ 0x74
 800b6f8:	4607      	mov	r7, r0
 800b6fa:	460d      	mov	r5, r1
 800b6fc:	4614      	mov	r4, r2
 800b6fe:	d510      	bpl.n	800b722 <_svfiprintf_r+0x36>
 800b700:	690b      	ldr	r3, [r1, #16]
 800b702:	b973      	cbnz	r3, 800b722 <_svfiprintf_r+0x36>
 800b704:	2140      	movs	r1, #64	@ 0x40
 800b706:	f7fe fc4f 	bl	8009fa8 <_malloc_r>
 800b70a:	6028      	str	r0, [r5, #0]
 800b70c:	6128      	str	r0, [r5, #16]
 800b70e:	b930      	cbnz	r0, 800b71e <_svfiprintf_r+0x32>
 800b710:	230c      	movs	r3, #12
 800b712:	603b      	str	r3, [r7, #0]
 800b714:	f04f 30ff 	mov.w	r0, #4294967295
 800b718:	b01d      	add	sp, #116	@ 0x74
 800b71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b71e:	2340      	movs	r3, #64	@ 0x40
 800b720:	616b      	str	r3, [r5, #20]
 800b722:	2300      	movs	r3, #0
 800b724:	9309      	str	r3, [sp, #36]	@ 0x24
 800b726:	2320      	movs	r3, #32
 800b728:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b72c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b730:	2330      	movs	r3, #48	@ 0x30
 800b732:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b8d0 <_svfiprintf_r+0x1e4>
 800b736:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b73a:	f04f 0901 	mov.w	r9, #1
 800b73e:	4623      	mov	r3, r4
 800b740:	469a      	mov	sl, r3
 800b742:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b746:	b10a      	cbz	r2, 800b74c <_svfiprintf_r+0x60>
 800b748:	2a25      	cmp	r2, #37	@ 0x25
 800b74a:	d1f9      	bne.n	800b740 <_svfiprintf_r+0x54>
 800b74c:	ebba 0b04 	subs.w	fp, sl, r4
 800b750:	d00b      	beq.n	800b76a <_svfiprintf_r+0x7e>
 800b752:	465b      	mov	r3, fp
 800b754:	4622      	mov	r2, r4
 800b756:	4629      	mov	r1, r5
 800b758:	4638      	mov	r0, r7
 800b75a:	f7ff ff6b 	bl	800b634 <__ssputs_r>
 800b75e:	3001      	adds	r0, #1
 800b760:	f000 80a7 	beq.w	800b8b2 <_svfiprintf_r+0x1c6>
 800b764:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b766:	445a      	add	r2, fp
 800b768:	9209      	str	r2, [sp, #36]	@ 0x24
 800b76a:	f89a 3000 	ldrb.w	r3, [sl]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f000 809f 	beq.w	800b8b2 <_svfiprintf_r+0x1c6>
 800b774:	2300      	movs	r3, #0
 800b776:	f04f 32ff 	mov.w	r2, #4294967295
 800b77a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b77e:	f10a 0a01 	add.w	sl, sl, #1
 800b782:	9304      	str	r3, [sp, #16]
 800b784:	9307      	str	r3, [sp, #28]
 800b786:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b78a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b78c:	4654      	mov	r4, sl
 800b78e:	2205      	movs	r2, #5
 800b790:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b794:	484e      	ldr	r0, [pc, #312]	@ (800b8d0 <_svfiprintf_r+0x1e4>)
 800b796:	f7f4 fd1b 	bl	80001d0 <memchr>
 800b79a:	9a04      	ldr	r2, [sp, #16]
 800b79c:	b9d8      	cbnz	r0, 800b7d6 <_svfiprintf_r+0xea>
 800b79e:	06d0      	lsls	r0, r2, #27
 800b7a0:	bf44      	itt	mi
 800b7a2:	2320      	movmi	r3, #32
 800b7a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7a8:	0711      	lsls	r1, r2, #28
 800b7aa:	bf44      	itt	mi
 800b7ac:	232b      	movmi	r3, #43	@ 0x2b
 800b7ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7b8:	d015      	beq.n	800b7e6 <_svfiprintf_r+0xfa>
 800b7ba:	9a07      	ldr	r2, [sp, #28]
 800b7bc:	4654      	mov	r4, sl
 800b7be:	2000      	movs	r0, #0
 800b7c0:	f04f 0c0a 	mov.w	ip, #10
 800b7c4:	4621      	mov	r1, r4
 800b7c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7ca:	3b30      	subs	r3, #48	@ 0x30
 800b7cc:	2b09      	cmp	r3, #9
 800b7ce:	d94b      	bls.n	800b868 <_svfiprintf_r+0x17c>
 800b7d0:	b1b0      	cbz	r0, 800b800 <_svfiprintf_r+0x114>
 800b7d2:	9207      	str	r2, [sp, #28]
 800b7d4:	e014      	b.n	800b800 <_svfiprintf_r+0x114>
 800b7d6:	eba0 0308 	sub.w	r3, r0, r8
 800b7da:	fa09 f303 	lsl.w	r3, r9, r3
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	9304      	str	r3, [sp, #16]
 800b7e2:	46a2      	mov	sl, r4
 800b7e4:	e7d2      	b.n	800b78c <_svfiprintf_r+0xa0>
 800b7e6:	9b03      	ldr	r3, [sp, #12]
 800b7e8:	1d19      	adds	r1, r3, #4
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	9103      	str	r1, [sp, #12]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	bfbb      	ittet	lt
 800b7f2:	425b      	neglt	r3, r3
 800b7f4:	f042 0202 	orrlt.w	r2, r2, #2
 800b7f8:	9307      	strge	r3, [sp, #28]
 800b7fa:	9307      	strlt	r3, [sp, #28]
 800b7fc:	bfb8      	it	lt
 800b7fe:	9204      	strlt	r2, [sp, #16]
 800b800:	7823      	ldrb	r3, [r4, #0]
 800b802:	2b2e      	cmp	r3, #46	@ 0x2e
 800b804:	d10a      	bne.n	800b81c <_svfiprintf_r+0x130>
 800b806:	7863      	ldrb	r3, [r4, #1]
 800b808:	2b2a      	cmp	r3, #42	@ 0x2a
 800b80a:	d132      	bne.n	800b872 <_svfiprintf_r+0x186>
 800b80c:	9b03      	ldr	r3, [sp, #12]
 800b80e:	1d1a      	adds	r2, r3, #4
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	9203      	str	r2, [sp, #12]
 800b814:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b818:	3402      	adds	r4, #2
 800b81a:	9305      	str	r3, [sp, #20]
 800b81c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b8e0 <_svfiprintf_r+0x1f4>
 800b820:	7821      	ldrb	r1, [r4, #0]
 800b822:	2203      	movs	r2, #3
 800b824:	4650      	mov	r0, sl
 800b826:	f7f4 fcd3 	bl	80001d0 <memchr>
 800b82a:	b138      	cbz	r0, 800b83c <_svfiprintf_r+0x150>
 800b82c:	9b04      	ldr	r3, [sp, #16]
 800b82e:	eba0 000a 	sub.w	r0, r0, sl
 800b832:	2240      	movs	r2, #64	@ 0x40
 800b834:	4082      	lsls	r2, r0
 800b836:	4313      	orrs	r3, r2
 800b838:	3401      	adds	r4, #1
 800b83a:	9304      	str	r3, [sp, #16]
 800b83c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b840:	4824      	ldr	r0, [pc, #144]	@ (800b8d4 <_svfiprintf_r+0x1e8>)
 800b842:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b846:	2206      	movs	r2, #6
 800b848:	f7f4 fcc2 	bl	80001d0 <memchr>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d036      	beq.n	800b8be <_svfiprintf_r+0x1d2>
 800b850:	4b21      	ldr	r3, [pc, #132]	@ (800b8d8 <_svfiprintf_r+0x1ec>)
 800b852:	bb1b      	cbnz	r3, 800b89c <_svfiprintf_r+0x1b0>
 800b854:	9b03      	ldr	r3, [sp, #12]
 800b856:	3307      	adds	r3, #7
 800b858:	f023 0307 	bic.w	r3, r3, #7
 800b85c:	3308      	adds	r3, #8
 800b85e:	9303      	str	r3, [sp, #12]
 800b860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b862:	4433      	add	r3, r6
 800b864:	9309      	str	r3, [sp, #36]	@ 0x24
 800b866:	e76a      	b.n	800b73e <_svfiprintf_r+0x52>
 800b868:	fb0c 3202 	mla	r2, ip, r2, r3
 800b86c:	460c      	mov	r4, r1
 800b86e:	2001      	movs	r0, #1
 800b870:	e7a8      	b.n	800b7c4 <_svfiprintf_r+0xd8>
 800b872:	2300      	movs	r3, #0
 800b874:	3401      	adds	r4, #1
 800b876:	9305      	str	r3, [sp, #20]
 800b878:	4619      	mov	r1, r3
 800b87a:	f04f 0c0a 	mov.w	ip, #10
 800b87e:	4620      	mov	r0, r4
 800b880:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b884:	3a30      	subs	r2, #48	@ 0x30
 800b886:	2a09      	cmp	r2, #9
 800b888:	d903      	bls.n	800b892 <_svfiprintf_r+0x1a6>
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d0c6      	beq.n	800b81c <_svfiprintf_r+0x130>
 800b88e:	9105      	str	r1, [sp, #20]
 800b890:	e7c4      	b.n	800b81c <_svfiprintf_r+0x130>
 800b892:	fb0c 2101 	mla	r1, ip, r1, r2
 800b896:	4604      	mov	r4, r0
 800b898:	2301      	movs	r3, #1
 800b89a:	e7f0      	b.n	800b87e <_svfiprintf_r+0x192>
 800b89c:	ab03      	add	r3, sp, #12
 800b89e:	9300      	str	r3, [sp, #0]
 800b8a0:	462a      	mov	r2, r5
 800b8a2:	4b0e      	ldr	r3, [pc, #56]	@ (800b8dc <_svfiprintf_r+0x1f0>)
 800b8a4:	a904      	add	r1, sp, #16
 800b8a6:	4638      	mov	r0, r7
 800b8a8:	f7fc fb34 	bl	8007f14 <_printf_float>
 800b8ac:	1c42      	adds	r2, r0, #1
 800b8ae:	4606      	mov	r6, r0
 800b8b0:	d1d6      	bne.n	800b860 <_svfiprintf_r+0x174>
 800b8b2:	89ab      	ldrh	r3, [r5, #12]
 800b8b4:	065b      	lsls	r3, r3, #25
 800b8b6:	f53f af2d 	bmi.w	800b714 <_svfiprintf_r+0x28>
 800b8ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8bc:	e72c      	b.n	800b718 <_svfiprintf_r+0x2c>
 800b8be:	ab03      	add	r3, sp, #12
 800b8c0:	9300      	str	r3, [sp, #0]
 800b8c2:	462a      	mov	r2, r5
 800b8c4:	4b05      	ldr	r3, [pc, #20]	@ (800b8dc <_svfiprintf_r+0x1f0>)
 800b8c6:	a904      	add	r1, sp, #16
 800b8c8:	4638      	mov	r0, r7
 800b8ca:	f7fc fdbb 	bl	8008444 <_printf_i>
 800b8ce:	e7ed      	b.n	800b8ac <_svfiprintf_r+0x1c0>
 800b8d0:	0800d518 	.word	0x0800d518
 800b8d4:	0800d522 	.word	0x0800d522
 800b8d8:	08007f15 	.word	0x08007f15
 800b8dc:	0800b635 	.word	0x0800b635
 800b8e0:	0800d51e 	.word	0x0800d51e

0800b8e4 <_sungetc_r>:
 800b8e4:	b538      	push	{r3, r4, r5, lr}
 800b8e6:	1c4b      	adds	r3, r1, #1
 800b8e8:	4614      	mov	r4, r2
 800b8ea:	d103      	bne.n	800b8f4 <_sungetc_r+0x10>
 800b8ec:	f04f 35ff 	mov.w	r5, #4294967295
 800b8f0:	4628      	mov	r0, r5
 800b8f2:	bd38      	pop	{r3, r4, r5, pc}
 800b8f4:	8993      	ldrh	r3, [r2, #12]
 800b8f6:	f023 0320 	bic.w	r3, r3, #32
 800b8fa:	8193      	strh	r3, [r2, #12]
 800b8fc:	6853      	ldr	r3, [r2, #4]
 800b8fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b900:	b2cd      	uxtb	r5, r1
 800b902:	b18a      	cbz	r2, 800b928 <_sungetc_r+0x44>
 800b904:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b906:	429a      	cmp	r2, r3
 800b908:	dd08      	ble.n	800b91c <_sungetc_r+0x38>
 800b90a:	6823      	ldr	r3, [r4, #0]
 800b90c:	1e5a      	subs	r2, r3, #1
 800b90e:	6022      	str	r2, [r4, #0]
 800b910:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b914:	6863      	ldr	r3, [r4, #4]
 800b916:	3301      	adds	r3, #1
 800b918:	6063      	str	r3, [r4, #4]
 800b91a:	e7e9      	b.n	800b8f0 <_sungetc_r+0xc>
 800b91c:	4621      	mov	r1, r4
 800b91e:	f000 fcd8 	bl	800c2d2 <__submore>
 800b922:	2800      	cmp	r0, #0
 800b924:	d0f1      	beq.n	800b90a <_sungetc_r+0x26>
 800b926:	e7e1      	b.n	800b8ec <_sungetc_r+0x8>
 800b928:	6921      	ldr	r1, [r4, #16]
 800b92a:	6822      	ldr	r2, [r4, #0]
 800b92c:	b141      	cbz	r1, 800b940 <_sungetc_r+0x5c>
 800b92e:	4291      	cmp	r1, r2
 800b930:	d206      	bcs.n	800b940 <_sungetc_r+0x5c>
 800b932:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800b936:	42a9      	cmp	r1, r5
 800b938:	d102      	bne.n	800b940 <_sungetc_r+0x5c>
 800b93a:	3a01      	subs	r2, #1
 800b93c:	6022      	str	r2, [r4, #0]
 800b93e:	e7ea      	b.n	800b916 <_sungetc_r+0x32>
 800b940:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800b944:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b948:	6363      	str	r3, [r4, #52]	@ 0x34
 800b94a:	2303      	movs	r3, #3
 800b94c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b94e:	4623      	mov	r3, r4
 800b950:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b954:	6023      	str	r3, [r4, #0]
 800b956:	2301      	movs	r3, #1
 800b958:	e7de      	b.n	800b918 <_sungetc_r+0x34>

0800b95a <__ssrefill_r>:
 800b95a:	b510      	push	{r4, lr}
 800b95c:	460c      	mov	r4, r1
 800b95e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b960:	b169      	cbz	r1, 800b97e <__ssrefill_r+0x24>
 800b962:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b966:	4299      	cmp	r1, r3
 800b968:	d001      	beq.n	800b96e <__ssrefill_r+0x14>
 800b96a:	f7fe faa9 	bl	8009ec0 <_free_r>
 800b96e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b970:	6063      	str	r3, [r4, #4]
 800b972:	2000      	movs	r0, #0
 800b974:	6360      	str	r0, [r4, #52]	@ 0x34
 800b976:	b113      	cbz	r3, 800b97e <__ssrefill_r+0x24>
 800b978:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b97a:	6023      	str	r3, [r4, #0]
 800b97c:	bd10      	pop	{r4, pc}
 800b97e:	6923      	ldr	r3, [r4, #16]
 800b980:	6023      	str	r3, [r4, #0]
 800b982:	2300      	movs	r3, #0
 800b984:	6063      	str	r3, [r4, #4]
 800b986:	89a3      	ldrh	r3, [r4, #12]
 800b988:	f043 0320 	orr.w	r3, r3, #32
 800b98c:	81a3      	strh	r3, [r4, #12]
 800b98e:	f04f 30ff 	mov.w	r0, #4294967295
 800b992:	e7f3      	b.n	800b97c <__ssrefill_r+0x22>

0800b994 <__ssvfiscanf_r>:
 800b994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b998:	460c      	mov	r4, r1
 800b99a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800b99e:	2100      	movs	r1, #0
 800b9a0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800b9a4:	49a5      	ldr	r1, [pc, #660]	@ (800bc3c <__ssvfiscanf_r+0x2a8>)
 800b9a6:	91a0      	str	r1, [sp, #640]	@ 0x280
 800b9a8:	f10d 0804 	add.w	r8, sp, #4
 800b9ac:	49a4      	ldr	r1, [pc, #656]	@ (800bc40 <__ssvfiscanf_r+0x2ac>)
 800b9ae:	4fa5      	ldr	r7, [pc, #660]	@ (800bc44 <__ssvfiscanf_r+0x2b0>)
 800b9b0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800b9b4:	4606      	mov	r6, r0
 800b9b6:	91a1      	str	r1, [sp, #644]	@ 0x284
 800b9b8:	9300      	str	r3, [sp, #0]
 800b9ba:	7813      	ldrb	r3, [r2, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f000 8158 	beq.w	800bc72 <__ssvfiscanf_r+0x2de>
 800b9c2:	5cf9      	ldrb	r1, [r7, r3]
 800b9c4:	f011 0108 	ands.w	r1, r1, #8
 800b9c8:	f102 0501 	add.w	r5, r2, #1
 800b9cc:	d019      	beq.n	800ba02 <__ssvfiscanf_r+0x6e>
 800b9ce:	6863      	ldr	r3, [r4, #4]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	dd0f      	ble.n	800b9f4 <__ssvfiscanf_r+0x60>
 800b9d4:	6823      	ldr	r3, [r4, #0]
 800b9d6:	781a      	ldrb	r2, [r3, #0]
 800b9d8:	5cba      	ldrb	r2, [r7, r2]
 800b9da:	0712      	lsls	r2, r2, #28
 800b9dc:	d401      	bmi.n	800b9e2 <__ssvfiscanf_r+0x4e>
 800b9de:	462a      	mov	r2, r5
 800b9e0:	e7eb      	b.n	800b9ba <__ssvfiscanf_r+0x26>
 800b9e2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b9e4:	3201      	adds	r2, #1
 800b9e6:	9245      	str	r2, [sp, #276]	@ 0x114
 800b9e8:	6862      	ldr	r2, [r4, #4]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	3a01      	subs	r2, #1
 800b9ee:	6062      	str	r2, [r4, #4]
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	e7ec      	b.n	800b9ce <__ssvfiscanf_r+0x3a>
 800b9f4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b9f6:	4621      	mov	r1, r4
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	4798      	blx	r3
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	d0e9      	beq.n	800b9d4 <__ssvfiscanf_r+0x40>
 800ba00:	e7ed      	b.n	800b9de <__ssvfiscanf_r+0x4a>
 800ba02:	2b25      	cmp	r3, #37	@ 0x25
 800ba04:	d012      	beq.n	800ba2c <__ssvfiscanf_r+0x98>
 800ba06:	4699      	mov	r9, r3
 800ba08:	6863      	ldr	r3, [r4, #4]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f340 8093 	ble.w	800bb36 <__ssvfiscanf_r+0x1a2>
 800ba10:	6822      	ldr	r2, [r4, #0]
 800ba12:	7813      	ldrb	r3, [r2, #0]
 800ba14:	454b      	cmp	r3, r9
 800ba16:	f040 812c 	bne.w	800bc72 <__ssvfiscanf_r+0x2de>
 800ba1a:	6863      	ldr	r3, [r4, #4]
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	6063      	str	r3, [r4, #4]
 800ba20:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800ba22:	3201      	adds	r2, #1
 800ba24:	3301      	adds	r3, #1
 800ba26:	6022      	str	r2, [r4, #0]
 800ba28:	9345      	str	r3, [sp, #276]	@ 0x114
 800ba2a:	e7d8      	b.n	800b9de <__ssvfiscanf_r+0x4a>
 800ba2c:	9141      	str	r1, [sp, #260]	@ 0x104
 800ba2e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ba30:	7853      	ldrb	r3, [r2, #1]
 800ba32:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba34:	bf02      	ittt	eq
 800ba36:	2310      	moveq	r3, #16
 800ba38:	1c95      	addeq	r5, r2, #2
 800ba3a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800ba3c:	220a      	movs	r2, #10
 800ba3e:	46a9      	mov	r9, r5
 800ba40:	f819 1b01 	ldrb.w	r1, [r9], #1
 800ba44:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800ba48:	2b09      	cmp	r3, #9
 800ba4a:	d91e      	bls.n	800ba8a <__ssvfiscanf_r+0xf6>
 800ba4c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800bc48 <__ssvfiscanf_r+0x2b4>
 800ba50:	2203      	movs	r2, #3
 800ba52:	4650      	mov	r0, sl
 800ba54:	f7f4 fbbc 	bl	80001d0 <memchr>
 800ba58:	b138      	cbz	r0, 800ba6a <__ssvfiscanf_r+0xd6>
 800ba5a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ba5c:	eba0 000a 	sub.w	r0, r0, sl
 800ba60:	2301      	movs	r3, #1
 800ba62:	4083      	lsls	r3, r0
 800ba64:	4313      	orrs	r3, r2
 800ba66:	9341      	str	r3, [sp, #260]	@ 0x104
 800ba68:	464d      	mov	r5, r9
 800ba6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ba6e:	2b78      	cmp	r3, #120	@ 0x78
 800ba70:	d806      	bhi.n	800ba80 <__ssvfiscanf_r+0xec>
 800ba72:	2b57      	cmp	r3, #87	@ 0x57
 800ba74:	d810      	bhi.n	800ba98 <__ssvfiscanf_r+0x104>
 800ba76:	2b25      	cmp	r3, #37	@ 0x25
 800ba78:	d0c5      	beq.n	800ba06 <__ssvfiscanf_r+0x72>
 800ba7a:	d857      	bhi.n	800bb2c <__ssvfiscanf_r+0x198>
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d065      	beq.n	800bb4c <__ssvfiscanf_r+0x1b8>
 800ba80:	2303      	movs	r3, #3
 800ba82:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ba84:	230a      	movs	r3, #10
 800ba86:	9342      	str	r3, [sp, #264]	@ 0x108
 800ba88:	e078      	b.n	800bb7c <__ssvfiscanf_r+0x1e8>
 800ba8a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800ba8c:	fb02 1103 	mla	r1, r2, r3, r1
 800ba90:	3930      	subs	r1, #48	@ 0x30
 800ba92:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ba94:	464d      	mov	r5, r9
 800ba96:	e7d2      	b.n	800ba3e <__ssvfiscanf_r+0xaa>
 800ba98:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800ba9c:	2a20      	cmp	r2, #32
 800ba9e:	d8ef      	bhi.n	800ba80 <__ssvfiscanf_r+0xec>
 800baa0:	a101      	add	r1, pc, #4	@ (adr r1, 800baa8 <__ssvfiscanf_r+0x114>)
 800baa2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800baa6:	bf00      	nop
 800baa8:	0800bb5b 	.word	0x0800bb5b
 800baac:	0800ba81 	.word	0x0800ba81
 800bab0:	0800ba81 	.word	0x0800ba81
 800bab4:	0800bbb5 	.word	0x0800bbb5
 800bab8:	0800ba81 	.word	0x0800ba81
 800babc:	0800ba81 	.word	0x0800ba81
 800bac0:	0800ba81 	.word	0x0800ba81
 800bac4:	0800ba81 	.word	0x0800ba81
 800bac8:	0800ba81 	.word	0x0800ba81
 800bacc:	0800ba81 	.word	0x0800ba81
 800bad0:	0800ba81 	.word	0x0800ba81
 800bad4:	0800bbcb 	.word	0x0800bbcb
 800bad8:	0800bbb1 	.word	0x0800bbb1
 800badc:	0800bb33 	.word	0x0800bb33
 800bae0:	0800bb33 	.word	0x0800bb33
 800bae4:	0800bb33 	.word	0x0800bb33
 800bae8:	0800ba81 	.word	0x0800ba81
 800baec:	0800bb6d 	.word	0x0800bb6d
 800baf0:	0800ba81 	.word	0x0800ba81
 800baf4:	0800ba81 	.word	0x0800ba81
 800baf8:	0800ba81 	.word	0x0800ba81
 800bafc:	0800ba81 	.word	0x0800ba81
 800bb00:	0800bbdb 	.word	0x0800bbdb
 800bb04:	0800bb75 	.word	0x0800bb75
 800bb08:	0800bb53 	.word	0x0800bb53
 800bb0c:	0800ba81 	.word	0x0800ba81
 800bb10:	0800ba81 	.word	0x0800ba81
 800bb14:	0800bbd7 	.word	0x0800bbd7
 800bb18:	0800ba81 	.word	0x0800ba81
 800bb1c:	0800bbb1 	.word	0x0800bbb1
 800bb20:	0800ba81 	.word	0x0800ba81
 800bb24:	0800ba81 	.word	0x0800ba81
 800bb28:	0800bb5b 	.word	0x0800bb5b
 800bb2c:	3b45      	subs	r3, #69	@ 0x45
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	d8a6      	bhi.n	800ba80 <__ssvfiscanf_r+0xec>
 800bb32:	2305      	movs	r3, #5
 800bb34:	e021      	b.n	800bb7a <__ssvfiscanf_r+0x1e6>
 800bb36:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bb38:	4621      	mov	r1, r4
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	4798      	blx	r3
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	f43f af66 	beq.w	800ba10 <__ssvfiscanf_r+0x7c>
 800bb44:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bb46:	2800      	cmp	r0, #0
 800bb48:	f040 808b 	bne.w	800bc62 <__ssvfiscanf_r+0x2ce>
 800bb4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb50:	e08b      	b.n	800bc6a <__ssvfiscanf_r+0x2d6>
 800bb52:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bb54:	f042 0220 	orr.w	r2, r2, #32
 800bb58:	9241      	str	r2, [sp, #260]	@ 0x104
 800bb5a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bb5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb60:	9241      	str	r2, [sp, #260]	@ 0x104
 800bb62:	2210      	movs	r2, #16
 800bb64:	2b6e      	cmp	r3, #110	@ 0x6e
 800bb66:	9242      	str	r2, [sp, #264]	@ 0x108
 800bb68:	d902      	bls.n	800bb70 <__ssvfiscanf_r+0x1dc>
 800bb6a:	e005      	b.n	800bb78 <__ssvfiscanf_r+0x1e4>
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	9342      	str	r3, [sp, #264]	@ 0x108
 800bb70:	2303      	movs	r3, #3
 800bb72:	e002      	b.n	800bb7a <__ssvfiscanf_r+0x1e6>
 800bb74:	2308      	movs	r3, #8
 800bb76:	9342      	str	r3, [sp, #264]	@ 0x108
 800bb78:	2304      	movs	r3, #4
 800bb7a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bb7c:	6863      	ldr	r3, [r4, #4]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	dd39      	ble.n	800bbf6 <__ssvfiscanf_r+0x262>
 800bb82:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bb84:	0659      	lsls	r1, r3, #25
 800bb86:	d404      	bmi.n	800bb92 <__ssvfiscanf_r+0x1fe>
 800bb88:	6823      	ldr	r3, [r4, #0]
 800bb8a:	781a      	ldrb	r2, [r3, #0]
 800bb8c:	5cba      	ldrb	r2, [r7, r2]
 800bb8e:	0712      	lsls	r2, r2, #28
 800bb90:	d438      	bmi.n	800bc04 <__ssvfiscanf_r+0x270>
 800bb92:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	dc47      	bgt.n	800bc28 <__ssvfiscanf_r+0x294>
 800bb98:	466b      	mov	r3, sp
 800bb9a:	4622      	mov	r2, r4
 800bb9c:	a941      	add	r1, sp, #260	@ 0x104
 800bb9e:	4630      	mov	r0, r6
 800bba0:	f000 f9ae 	bl	800bf00 <_scanf_chars>
 800bba4:	2801      	cmp	r0, #1
 800bba6:	d064      	beq.n	800bc72 <__ssvfiscanf_r+0x2de>
 800bba8:	2802      	cmp	r0, #2
 800bbaa:	f47f af18 	bne.w	800b9de <__ssvfiscanf_r+0x4a>
 800bbae:	e7c9      	b.n	800bb44 <__ssvfiscanf_r+0x1b0>
 800bbb0:	220a      	movs	r2, #10
 800bbb2:	e7d7      	b.n	800bb64 <__ssvfiscanf_r+0x1d0>
 800bbb4:	4629      	mov	r1, r5
 800bbb6:	4640      	mov	r0, r8
 800bbb8:	f000 fb52 	bl	800c260 <__sccl>
 800bbbc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bbbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbc2:	9341      	str	r3, [sp, #260]	@ 0x104
 800bbc4:	4605      	mov	r5, r0
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e7d7      	b.n	800bb7a <__ssvfiscanf_r+0x1e6>
 800bbca:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bbcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbd0:	9341      	str	r3, [sp, #260]	@ 0x104
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	e7d1      	b.n	800bb7a <__ssvfiscanf_r+0x1e6>
 800bbd6:	2302      	movs	r3, #2
 800bbd8:	e7cf      	b.n	800bb7a <__ssvfiscanf_r+0x1e6>
 800bbda:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800bbdc:	06c3      	lsls	r3, r0, #27
 800bbde:	f53f aefe 	bmi.w	800b9de <__ssvfiscanf_r+0x4a>
 800bbe2:	9b00      	ldr	r3, [sp, #0]
 800bbe4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bbe6:	1d19      	adds	r1, r3, #4
 800bbe8:	9100      	str	r1, [sp, #0]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	07c0      	lsls	r0, r0, #31
 800bbee:	bf4c      	ite	mi
 800bbf0:	801a      	strhmi	r2, [r3, #0]
 800bbf2:	601a      	strpl	r2, [r3, #0]
 800bbf4:	e6f3      	b.n	800b9de <__ssvfiscanf_r+0x4a>
 800bbf6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bbf8:	4621      	mov	r1, r4
 800bbfa:	4630      	mov	r0, r6
 800bbfc:	4798      	blx	r3
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	d0bf      	beq.n	800bb82 <__ssvfiscanf_r+0x1ee>
 800bc02:	e79f      	b.n	800bb44 <__ssvfiscanf_r+0x1b0>
 800bc04:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bc06:	3201      	adds	r2, #1
 800bc08:	9245      	str	r2, [sp, #276]	@ 0x114
 800bc0a:	6862      	ldr	r2, [r4, #4]
 800bc0c:	3a01      	subs	r2, #1
 800bc0e:	2a00      	cmp	r2, #0
 800bc10:	6062      	str	r2, [r4, #4]
 800bc12:	dd02      	ble.n	800bc1a <__ssvfiscanf_r+0x286>
 800bc14:	3301      	adds	r3, #1
 800bc16:	6023      	str	r3, [r4, #0]
 800bc18:	e7b6      	b.n	800bb88 <__ssvfiscanf_r+0x1f4>
 800bc1a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bc1c:	4621      	mov	r1, r4
 800bc1e:	4630      	mov	r0, r6
 800bc20:	4798      	blx	r3
 800bc22:	2800      	cmp	r0, #0
 800bc24:	d0b0      	beq.n	800bb88 <__ssvfiscanf_r+0x1f4>
 800bc26:	e78d      	b.n	800bb44 <__ssvfiscanf_r+0x1b0>
 800bc28:	2b04      	cmp	r3, #4
 800bc2a:	dc0f      	bgt.n	800bc4c <__ssvfiscanf_r+0x2b8>
 800bc2c:	466b      	mov	r3, sp
 800bc2e:	4622      	mov	r2, r4
 800bc30:	a941      	add	r1, sp, #260	@ 0x104
 800bc32:	4630      	mov	r0, r6
 800bc34:	f000 f9be 	bl	800bfb4 <_scanf_i>
 800bc38:	e7b4      	b.n	800bba4 <__ssvfiscanf_r+0x210>
 800bc3a:	bf00      	nop
 800bc3c:	0800b8e5 	.word	0x0800b8e5
 800bc40:	0800b95b 	.word	0x0800b95b
 800bc44:	0800d1a5 	.word	0x0800d1a5
 800bc48:	0800d51e 	.word	0x0800d51e
 800bc4c:	4b0a      	ldr	r3, [pc, #40]	@ (800bc78 <__ssvfiscanf_r+0x2e4>)
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	f43f aec5 	beq.w	800b9de <__ssvfiscanf_r+0x4a>
 800bc54:	466b      	mov	r3, sp
 800bc56:	4622      	mov	r2, r4
 800bc58:	a941      	add	r1, sp, #260	@ 0x104
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	f7fc fd12 	bl	8008684 <_scanf_float>
 800bc60:	e7a0      	b.n	800bba4 <__ssvfiscanf_r+0x210>
 800bc62:	89a3      	ldrh	r3, [r4, #12]
 800bc64:	065b      	lsls	r3, r3, #25
 800bc66:	f53f af71 	bmi.w	800bb4c <__ssvfiscanf_r+0x1b8>
 800bc6a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800bc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc72:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bc74:	e7f9      	b.n	800bc6a <__ssvfiscanf_r+0x2d6>
 800bc76:	bf00      	nop
 800bc78:	08008685 	.word	0x08008685

0800bc7c <__sfputc_r>:
 800bc7c:	6893      	ldr	r3, [r2, #8]
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	b410      	push	{r4}
 800bc84:	6093      	str	r3, [r2, #8]
 800bc86:	da08      	bge.n	800bc9a <__sfputc_r+0x1e>
 800bc88:	6994      	ldr	r4, [r2, #24]
 800bc8a:	42a3      	cmp	r3, r4
 800bc8c:	db01      	blt.n	800bc92 <__sfputc_r+0x16>
 800bc8e:	290a      	cmp	r1, #10
 800bc90:	d103      	bne.n	800bc9a <__sfputc_r+0x1e>
 800bc92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc96:	f7fd b98a 	b.w	8008fae <__swbuf_r>
 800bc9a:	6813      	ldr	r3, [r2, #0]
 800bc9c:	1c58      	adds	r0, r3, #1
 800bc9e:	6010      	str	r0, [r2, #0]
 800bca0:	7019      	strb	r1, [r3, #0]
 800bca2:	4608      	mov	r0, r1
 800bca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <__sfputs_r>:
 800bcaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcac:	4606      	mov	r6, r0
 800bcae:	460f      	mov	r7, r1
 800bcb0:	4614      	mov	r4, r2
 800bcb2:	18d5      	adds	r5, r2, r3
 800bcb4:	42ac      	cmp	r4, r5
 800bcb6:	d101      	bne.n	800bcbc <__sfputs_r+0x12>
 800bcb8:	2000      	movs	r0, #0
 800bcba:	e007      	b.n	800bccc <__sfputs_r+0x22>
 800bcbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcc0:	463a      	mov	r2, r7
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	f7ff ffda 	bl	800bc7c <__sfputc_r>
 800bcc8:	1c43      	adds	r3, r0, #1
 800bcca:	d1f3      	bne.n	800bcb4 <__sfputs_r+0xa>
 800bccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bcd0 <_vfiprintf_r>:
 800bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	460d      	mov	r5, r1
 800bcd6:	b09d      	sub	sp, #116	@ 0x74
 800bcd8:	4614      	mov	r4, r2
 800bcda:	4698      	mov	r8, r3
 800bcdc:	4606      	mov	r6, r0
 800bcde:	b118      	cbz	r0, 800bce8 <_vfiprintf_r+0x18>
 800bce0:	6a03      	ldr	r3, [r0, #32]
 800bce2:	b90b      	cbnz	r3, 800bce8 <_vfiprintf_r+0x18>
 800bce4:	f7fd f82e 	bl	8008d44 <__sinit>
 800bce8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcea:	07d9      	lsls	r1, r3, #31
 800bcec:	d405      	bmi.n	800bcfa <_vfiprintf_r+0x2a>
 800bcee:	89ab      	ldrh	r3, [r5, #12]
 800bcf0:	059a      	lsls	r2, r3, #22
 800bcf2:	d402      	bmi.n	800bcfa <_vfiprintf_r+0x2a>
 800bcf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcf6:	f7fd fa7e 	bl	80091f6 <__retarget_lock_acquire_recursive>
 800bcfa:	89ab      	ldrh	r3, [r5, #12]
 800bcfc:	071b      	lsls	r3, r3, #28
 800bcfe:	d501      	bpl.n	800bd04 <_vfiprintf_r+0x34>
 800bd00:	692b      	ldr	r3, [r5, #16]
 800bd02:	b99b      	cbnz	r3, 800bd2c <_vfiprintf_r+0x5c>
 800bd04:	4629      	mov	r1, r5
 800bd06:	4630      	mov	r0, r6
 800bd08:	f7fd f990 	bl	800902c <__swsetup_r>
 800bd0c:	b170      	cbz	r0, 800bd2c <_vfiprintf_r+0x5c>
 800bd0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd10:	07dc      	lsls	r4, r3, #31
 800bd12:	d504      	bpl.n	800bd1e <_vfiprintf_r+0x4e>
 800bd14:	f04f 30ff 	mov.w	r0, #4294967295
 800bd18:	b01d      	add	sp, #116	@ 0x74
 800bd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd1e:	89ab      	ldrh	r3, [r5, #12]
 800bd20:	0598      	lsls	r0, r3, #22
 800bd22:	d4f7      	bmi.n	800bd14 <_vfiprintf_r+0x44>
 800bd24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd26:	f7fd fa67 	bl	80091f8 <__retarget_lock_release_recursive>
 800bd2a:	e7f3      	b.n	800bd14 <_vfiprintf_r+0x44>
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd30:	2320      	movs	r3, #32
 800bd32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd36:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd3a:	2330      	movs	r3, #48	@ 0x30
 800bd3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800beec <_vfiprintf_r+0x21c>
 800bd40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd44:	f04f 0901 	mov.w	r9, #1
 800bd48:	4623      	mov	r3, r4
 800bd4a:	469a      	mov	sl, r3
 800bd4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd50:	b10a      	cbz	r2, 800bd56 <_vfiprintf_r+0x86>
 800bd52:	2a25      	cmp	r2, #37	@ 0x25
 800bd54:	d1f9      	bne.n	800bd4a <_vfiprintf_r+0x7a>
 800bd56:	ebba 0b04 	subs.w	fp, sl, r4
 800bd5a:	d00b      	beq.n	800bd74 <_vfiprintf_r+0xa4>
 800bd5c:	465b      	mov	r3, fp
 800bd5e:	4622      	mov	r2, r4
 800bd60:	4629      	mov	r1, r5
 800bd62:	4630      	mov	r0, r6
 800bd64:	f7ff ffa1 	bl	800bcaa <__sfputs_r>
 800bd68:	3001      	adds	r0, #1
 800bd6a:	f000 80a7 	beq.w	800bebc <_vfiprintf_r+0x1ec>
 800bd6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd70:	445a      	add	r2, fp
 800bd72:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd74:	f89a 3000 	ldrb.w	r3, [sl]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f000 809f 	beq.w	800bebc <_vfiprintf_r+0x1ec>
 800bd7e:	2300      	movs	r3, #0
 800bd80:	f04f 32ff 	mov.w	r2, #4294967295
 800bd84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd88:	f10a 0a01 	add.w	sl, sl, #1
 800bd8c:	9304      	str	r3, [sp, #16]
 800bd8e:	9307      	str	r3, [sp, #28]
 800bd90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd94:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd96:	4654      	mov	r4, sl
 800bd98:	2205      	movs	r2, #5
 800bd9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd9e:	4853      	ldr	r0, [pc, #332]	@ (800beec <_vfiprintf_r+0x21c>)
 800bda0:	f7f4 fa16 	bl	80001d0 <memchr>
 800bda4:	9a04      	ldr	r2, [sp, #16]
 800bda6:	b9d8      	cbnz	r0, 800bde0 <_vfiprintf_r+0x110>
 800bda8:	06d1      	lsls	r1, r2, #27
 800bdaa:	bf44      	itt	mi
 800bdac:	2320      	movmi	r3, #32
 800bdae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdb2:	0713      	lsls	r3, r2, #28
 800bdb4:	bf44      	itt	mi
 800bdb6:	232b      	movmi	r3, #43	@ 0x2b
 800bdb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdbc:	f89a 3000 	ldrb.w	r3, [sl]
 800bdc0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdc2:	d015      	beq.n	800bdf0 <_vfiprintf_r+0x120>
 800bdc4:	9a07      	ldr	r2, [sp, #28]
 800bdc6:	4654      	mov	r4, sl
 800bdc8:	2000      	movs	r0, #0
 800bdca:	f04f 0c0a 	mov.w	ip, #10
 800bdce:	4621      	mov	r1, r4
 800bdd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdd4:	3b30      	subs	r3, #48	@ 0x30
 800bdd6:	2b09      	cmp	r3, #9
 800bdd8:	d94b      	bls.n	800be72 <_vfiprintf_r+0x1a2>
 800bdda:	b1b0      	cbz	r0, 800be0a <_vfiprintf_r+0x13a>
 800bddc:	9207      	str	r2, [sp, #28]
 800bdde:	e014      	b.n	800be0a <_vfiprintf_r+0x13a>
 800bde0:	eba0 0308 	sub.w	r3, r0, r8
 800bde4:	fa09 f303 	lsl.w	r3, r9, r3
 800bde8:	4313      	orrs	r3, r2
 800bdea:	9304      	str	r3, [sp, #16]
 800bdec:	46a2      	mov	sl, r4
 800bdee:	e7d2      	b.n	800bd96 <_vfiprintf_r+0xc6>
 800bdf0:	9b03      	ldr	r3, [sp, #12]
 800bdf2:	1d19      	adds	r1, r3, #4
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	9103      	str	r1, [sp, #12]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	bfbb      	ittet	lt
 800bdfc:	425b      	neglt	r3, r3
 800bdfe:	f042 0202 	orrlt.w	r2, r2, #2
 800be02:	9307      	strge	r3, [sp, #28]
 800be04:	9307      	strlt	r3, [sp, #28]
 800be06:	bfb8      	it	lt
 800be08:	9204      	strlt	r2, [sp, #16]
 800be0a:	7823      	ldrb	r3, [r4, #0]
 800be0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800be0e:	d10a      	bne.n	800be26 <_vfiprintf_r+0x156>
 800be10:	7863      	ldrb	r3, [r4, #1]
 800be12:	2b2a      	cmp	r3, #42	@ 0x2a
 800be14:	d132      	bne.n	800be7c <_vfiprintf_r+0x1ac>
 800be16:	9b03      	ldr	r3, [sp, #12]
 800be18:	1d1a      	adds	r2, r3, #4
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	9203      	str	r2, [sp, #12]
 800be1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be22:	3402      	adds	r4, #2
 800be24:	9305      	str	r3, [sp, #20]
 800be26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800befc <_vfiprintf_r+0x22c>
 800be2a:	7821      	ldrb	r1, [r4, #0]
 800be2c:	2203      	movs	r2, #3
 800be2e:	4650      	mov	r0, sl
 800be30:	f7f4 f9ce 	bl	80001d0 <memchr>
 800be34:	b138      	cbz	r0, 800be46 <_vfiprintf_r+0x176>
 800be36:	9b04      	ldr	r3, [sp, #16]
 800be38:	eba0 000a 	sub.w	r0, r0, sl
 800be3c:	2240      	movs	r2, #64	@ 0x40
 800be3e:	4082      	lsls	r2, r0
 800be40:	4313      	orrs	r3, r2
 800be42:	3401      	adds	r4, #1
 800be44:	9304      	str	r3, [sp, #16]
 800be46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be4a:	4829      	ldr	r0, [pc, #164]	@ (800bef0 <_vfiprintf_r+0x220>)
 800be4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be50:	2206      	movs	r2, #6
 800be52:	f7f4 f9bd 	bl	80001d0 <memchr>
 800be56:	2800      	cmp	r0, #0
 800be58:	d03f      	beq.n	800beda <_vfiprintf_r+0x20a>
 800be5a:	4b26      	ldr	r3, [pc, #152]	@ (800bef4 <_vfiprintf_r+0x224>)
 800be5c:	bb1b      	cbnz	r3, 800bea6 <_vfiprintf_r+0x1d6>
 800be5e:	9b03      	ldr	r3, [sp, #12]
 800be60:	3307      	adds	r3, #7
 800be62:	f023 0307 	bic.w	r3, r3, #7
 800be66:	3308      	adds	r3, #8
 800be68:	9303      	str	r3, [sp, #12]
 800be6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be6c:	443b      	add	r3, r7
 800be6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800be70:	e76a      	b.n	800bd48 <_vfiprintf_r+0x78>
 800be72:	fb0c 3202 	mla	r2, ip, r2, r3
 800be76:	460c      	mov	r4, r1
 800be78:	2001      	movs	r0, #1
 800be7a:	e7a8      	b.n	800bdce <_vfiprintf_r+0xfe>
 800be7c:	2300      	movs	r3, #0
 800be7e:	3401      	adds	r4, #1
 800be80:	9305      	str	r3, [sp, #20]
 800be82:	4619      	mov	r1, r3
 800be84:	f04f 0c0a 	mov.w	ip, #10
 800be88:	4620      	mov	r0, r4
 800be8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be8e:	3a30      	subs	r2, #48	@ 0x30
 800be90:	2a09      	cmp	r2, #9
 800be92:	d903      	bls.n	800be9c <_vfiprintf_r+0x1cc>
 800be94:	2b00      	cmp	r3, #0
 800be96:	d0c6      	beq.n	800be26 <_vfiprintf_r+0x156>
 800be98:	9105      	str	r1, [sp, #20]
 800be9a:	e7c4      	b.n	800be26 <_vfiprintf_r+0x156>
 800be9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bea0:	4604      	mov	r4, r0
 800bea2:	2301      	movs	r3, #1
 800bea4:	e7f0      	b.n	800be88 <_vfiprintf_r+0x1b8>
 800bea6:	ab03      	add	r3, sp, #12
 800bea8:	9300      	str	r3, [sp, #0]
 800beaa:	462a      	mov	r2, r5
 800beac:	4b12      	ldr	r3, [pc, #72]	@ (800bef8 <_vfiprintf_r+0x228>)
 800beae:	a904      	add	r1, sp, #16
 800beb0:	4630      	mov	r0, r6
 800beb2:	f7fc f82f 	bl	8007f14 <_printf_float>
 800beb6:	4607      	mov	r7, r0
 800beb8:	1c78      	adds	r0, r7, #1
 800beba:	d1d6      	bne.n	800be6a <_vfiprintf_r+0x19a>
 800bebc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bebe:	07d9      	lsls	r1, r3, #31
 800bec0:	d405      	bmi.n	800bece <_vfiprintf_r+0x1fe>
 800bec2:	89ab      	ldrh	r3, [r5, #12]
 800bec4:	059a      	lsls	r2, r3, #22
 800bec6:	d402      	bmi.n	800bece <_vfiprintf_r+0x1fe>
 800bec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800beca:	f7fd f995 	bl	80091f8 <__retarget_lock_release_recursive>
 800bece:	89ab      	ldrh	r3, [r5, #12]
 800bed0:	065b      	lsls	r3, r3, #25
 800bed2:	f53f af1f 	bmi.w	800bd14 <_vfiprintf_r+0x44>
 800bed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bed8:	e71e      	b.n	800bd18 <_vfiprintf_r+0x48>
 800beda:	ab03      	add	r3, sp, #12
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	462a      	mov	r2, r5
 800bee0:	4b05      	ldr	r3, [pc, #20]	@ (800bef8 <_vfiprintf_r+0x228>)
 800bee2:	a904      	add	r1, sp, #16
 800bee4:	4630      	mov	r0, r6
 800bee6:	f7fc faad 	bl	8008444 <_printf_i>
 800beea:	e7e4      	b.n	800beb6 <_vfiprintf_r+0x1e6>
 800beec:	0800d518 	.word	0x0800d518
 800bef0:	0800d522 	.word	0x0800d522
 800bef4:	08007f15 	.word	0x08007f15
 800bef8:	0800bcab 	.word	0x0800bcab
 800befc:	0800d51e 	.word	0x0800d51e

0800bf00 <_scanf_chars>:
 800bf00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf04:	4615      	mov	r5, r2
 800bf06:	688a      	ldr	r2, [r1, #8]
 800bf08:	4680      	mov	r8, r0
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	b932      	cbnz	r2, 800bf1c <_scanf_chars+0x1c>
 800bf0e:	698a      	ldr	r2, [r1, #24]
 800bf10:	2a00      	cmp	r2, #0
 800bf12:	bf14      	ite	ne
 800bf14:	f04f 32ff 	movne.w	r2, #4294967295
 800bf18:	2201      	moveq	r2, #1
 800bf1a:	608a      	str	r2, [r1, #8]
 800bf1c:	6822      	ldr	r2, [r4, #0]
 800bf1e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800bfb0 <_scanf_chars+0xb0>
 800bf22:	06d1      	lsls	r1, r2, #27
 800bf24:	bf5f      	itttt	pl
 800bf26:	681a      	ldrpl	r2, [r3, #0]
 800bf28:	1d11      	addpl	r1, r2, #4
 800bf2a:	6019      	strpl	r1, [r3, #0]
 800bf2c:	6816      	ldrpl	r6, [r2, #0]
 800bf2e:	2700      	movs	r7, #0
 800bf30:	69a0      	ldr	r0, [r4, #24]
 800bf32:	b188      	cbz	r0, 800bf58 <_scanf_chars+0x58>
 800bf34:	2801      	cmp	r0, #1
 800bf36:	d107      	bne.n	800bf48 <_scanf_chars+0x48>
 800bf38:	682b      	ldr	r3, [r5, #0]
 800bf3a:	781a      	ldrb	r2, [r3, #0]
 800bf3c:	6963      	ldr	r3, [r4, #20]
 800bf3e:	5c9b      	ldrb	r3, [r3, r2]
 800bf40:	b953      	cbnz	r3, 800bf58 <_scanf_chars+0x58>
 800bf42:	2f00      	cmp	r7, #0
 800bf44:	d031      	beq.n	800bfaa <_scanf_chars+0xaa>
 800bf46:	e022      	b.n	800bf8e <_scanf_chars+0x8e>
 800bf48:	2802      	cmp	r0, #2
 800bf4a:	d120      	bne.n	800bf8e <_scanf_chars+0x8e>
 800bf4c:	682b      	ldr	r3, [r5, #0]
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	f819 3003 	ldrb.w	r3, [r9, r3]
 800bf54:	071b      	lsls	r3, r3, #28
 800bf56:	d41a      	bmi.n	800bf8e <_scanf_chars+0x8e>
 800bf58:	6823      	ldr	r3, [r4, #0]
 800bf5a:	06da      	lsls	r2, r3, #27
 800bf5c:	bf5e      	ittt	pl
 800bf5e:	682b      	ldrpl	r3, [r5, #0]
 800bf60:	781b      	ldrbpl	r3, [r3, #0]
 800bf62:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bf66:	682a      	ldr	r2, [r5, #0]
 800bf68:	686b      	ldr	r3, [r5, #4]
 800bf6a:	3201      	adds	r2, #1
 800bf6c:	602a      	str	r2, [r5, #0]
 800bf6e:	68a2      	ldr	r2, [r4, #8]
 800bf70:	3b01      	subs	r3, #1
 800bf72:	3a01      	subs	r2, #1
 800bf74:	606b      	str	r3, [r5, #4]
 800bf76:	3701      	adds	r7, #1
 800bf78:	60a2      	str	r2, [r4, #8]
 800bf7a:	b142      	cbz	r2, 800bf8e <_scanf_chars+0x8e>
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	dcd7      	bgt.n	800bf30 <_scanf_chars+0x30>
 800bf80:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bf84:	4629      	mov	r1, r5
 800bf86:	4640      	mov	r0, r8
 800bf88:	4798      	blx	r3
 800bf8a:	2800      	cmp	r0, #0
 800bf8c:	d0d0      	beq.n	800bf30 <_scanf_chars+0x30>
 800bf8e:	6823      	ldr	r3, [r4, #0]
 800bf90:	f013 0310 	ands.w	r3, r3, #16
 800bf94:	d105      	bne.n	800bfa2 <_scanf_chars+0xa2>
 800bf96:	68e2      	ldr	r2, [r4, #12]
 800bf98:	3201      	adds	r2, #1
 800bf9a:	60e2      	str	r2, [r4, #12]
 800bf9c:	69a2      	ldr	r2, [r4, #24]
 800bf9e:	b102      	cbz	r2, 800bfa2 <_scanf_chars+0xa2>
 800bfa0:	7033      	strb	r3, [r6, #0]
 800bfa2:	6923      	ldr	r3, [r4, #16]
 800bfa4:	443b      	add	r3, r7
 800bfa6:	6123      	str	r3, [r4, #16]
 800bfa8:	2000      	movs	r0, #0
 800bfaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfae:	bf00      	nop
 800bfb0:	0800d1a5 	.word	0x0800d1a5

0800bfb4 <_scanf_i>:
 800bfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb8:	4698      	mov	r8, r3
 800bfba:	4b74      	ldr	r3, [pc, #464]	@ (800c18c <_scanf_i+0x1d8>)
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	4682      	mov	sl, r0
 800bfc0:	4616      	mov	r6, r2
 800bfc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bfc6:	b087      	sub	sp, #28
 800bfc8:	ab03      	add	r3, sp, #12
 800bfca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bfce:	4b70      	ldr	r3, [pc, #448]	@ (800c190 <_scanf_i+0x1dc>)
 800bfd0:	69a1      	ldr	r1, [r4, #24]
 800bfd2:	4a70      	ldr	r2, [pc, #448]	@ (800c194 <_scanf_i+0x1e0>)
 800bfd4:	2903      	cmp	r1, #3
 800bfd6:	bf08      	it	eq
 800bfd8:	461a      	moveq	r2, r3
 800bfda:	68a3      	ldr	r3, [r4, #8]
 800bfdc:	9201      	str	r2, [sp, #4]
 800bfde:	1e5a      	subs	r2, r3, #1
 800bfe0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bfe4:	bf88      	it	hi
 800bfe6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bfea:	4627      	mov	r7, r4
 800bfec:	bf82      	ittt	hi
 800bfee:	eb03 0905 	addhi.w	r9, r3, r5
 800bff2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bff6:	60a3      	strhi	r3, [r4, #8]
 800bff8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bffc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c000:	bf98      	it	ls
 800c002:	f04f 0900 	movls.w	r9, #0
 800c006:	6023      	str	r3, [r4, #0]
 800c008:	463d      	mov	r5, r7
 800c00a:	f04f 0b00 	mov.w	fp, #0
 800c00e:	6831      	ldr	r1, [r6, #0]
 800c010:	ab03      	add	r3, sp, #12
 800c012:	7809      	ldrb	r1, [r1, #0]
 800c014:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c018:	2202      	movs	r2, #2
 800c01a:	f7f4 f8d9 	bl	80001d0 <memchr>
 800c01e:	b328      	cbz	r0, 800c06c <_scanf_i+0xb8>
 800c020:	f1bb 0f01 	cmp.w	fp, #1
 800c024:	d159      	bne.n	800c0da <_scanf_i+0x126>
 800c026:	6862      	ldr	r2, [r4, #4]
 800c028:	b92a      	cbnz	r2, 800c036 <_scanf_i+0x82>
 800c02a:	6822      	ldr	r2, [r4, #0]
 800c02c:	2108      	movs	r1, #8
 800c02e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c032:	6061      	str	r1, [r4, #4]
 800c034:	6022      	str	r2, [r4, #0]
 800c036:	6822      	ldr	r2, [r4, #0]
 800c038:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c03c:	6022      	str	r2, [r4, #0]
 800c03e:	68a2      	ldr	r2, [r4, #8]
 800c040:	1e51      	subs	r1, r2, #1
 800c042:	60a1      	str	r1, [r4, #8]
 800c044:	b192      	cbz	r2, 800c06c <_scanf_i+0xb8>
 800c046:	6832      	ldr	r2, [r6, #0]
 800c048:	1c51      	adds	r1, r2, #1
 800c04a:	6031      	str	r1, [r6, #0]
 800c04c:	7812      	ldrb	r2, [r2, #0]
 800c04e:	f805 2b01 	strb.w	r2, [r5], #1
 800c052:	6872      	ldr	r2, [r6, #4]
 800c054:	3a01      	subs	r2, #1
 800c056:	2a00      	cmp	r2, #0
 800c058:	6072      	str	r2, [r6, #4]
 800c05a:	dc07      	bgt.n	800c06c <_scanf_i+0xb8>
 800c05c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c060:	4631      	mov	r1, r6
 800c062:	4650      	mov	r0, sl
 800c064:	4790      	blx	r2
 800c066:	2800      	cmp	r0, #0
 800c068:	f040 8085 	bne.w	800c176 <_scanf_i+0x1c2>
 800c06c:	f10b 0b01 	add.w	fp, fp, #1
 800c070:	f1bb 0f03 	cmp.w	fp, #3
 800c074:	d1cb      	bne.n	800c00e <_scanf_i+0x5a>
 800c076:	6863      	ldr	r3, [r4, #4]
 800c078:	b90b      	cbnz	r3, 800c07e <_scanf_i+0xca>
 800c07a:	230a      	movs	r3, #10
 800c07c:	6063      	str	r3, [r4, #4]
 800c07e:	6863      	ldr	r3, [r4, #4]
 800c080:	4945      	ldr	r1, [pc, #276]	@ (800c198 <_scanf_i+0x1e4>)
 800c082:	6960      	ldr	r0, [r4, #20]
 800c084:	1ac9      	subs	r1, r1, r3
 800c086:	f000 f8eb 	bl	800c260 <__sccl>
 800c08a:	f04f 0b00 	mov.w	fp, #0
 800c08e:	68a3      	ldr	r3, [r4, #8]
 800c090:	6822      	ldr	r2, [r4, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d03d      	beq.n	800c112 <_scanf_i+0x15e>
 800c096:	6831      	ldr	r1, [r6, #0]
 800c098:	6960      	ldr	r0, [r4, #20]
 800c09a:	f891 c000 	ldrb.w	ip, [r1]
 800c09e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	d035      	beq.n	800c112 <_scanf_i+0x15e>
 800c0a6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c0aa:	d124      	bne.n	800c0f6 <_scanf_i+0x142>
 800c0ac:	0510      	lsls	r0, r2, #20
 800c0ae:	d522      	bpl.n	800c0f6 <_scanf_i+0x142>
 800c0b0:	f10b 0b01 	add.w	fp, fp, #1
 800c0b4:	f1b9 0f00 	cmp.w	r9, #0
 800c0b8:	d003      	beq.n	800c0c2 <_scanf_i+0x10e>
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	f109 39ff 	add.w	r9, r9, #4294967295
 800c0c0:	60a3      	str	r3, [r4, #8]
 800c0c2:	6873      	ldr	r3, [r6, #4]
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	6073      	str	r3, [r6, #4]
 800c0ca:	dd1b      	ble.n	800c104 <_scanf_i+0x150>
 800c0cc:	6833      	ldr	r3, [r6, #0]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	6033      	str	r3, [r6, #0]
 800c0d2:	68a3      	ldr	r3, [r4, #8]
 800c0d4:	3b01      	subs	r3, #1
 800c0d6:	60a3      	str	r3, [r4, #8]
 800c0d8:	e7d9      	b.n	800c08e <_scanf_i+0xda>
 800c0da:	f1bb 0f02 	cmp.w	fp, #2
 800c0de:	d1ae      	bne.n	800c03e <_scanf_i+0x8a>
 800c0e0:	6822      	ldr	r2, [r4, #0]
 800c0e2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c0e6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c0ea:	d1bf      	bne.n	800c06c <_scanf_i+0xb8>
 800c0ec:	2110      	movs	r1, #16
 800c0ee:	6061      	str	r1, [r4, #4]
 800c0f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c0f4:	e7a2      	b.n	800c03c <_scanf_i+0x88>
 800c0f6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c0fa:	6022      	str	r2, [r4, #0]
 800c0fc:	780b      	ldrb	r3, [r1, #0]
 800c0fe:	f805 3b01 	strb.w	r3, [r5], #1
 800c102:	e7de      	b.n	800c0c2 <_scanf_i+0x10e>
 800c104:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c108:	4631      	mov	r1, r6
 800c10a:	4650      	mov	r0, sl
 800c10c:	4798      	blx	r3
 800c10e:	2800      	cmp	r0, #0
 800c110:	d0df      	beq.n	800c0d2 <_scanf_i+0x11e>
 800c112:	6823      	ldr	r3, [r4, #0]
 800c114:	05d9      	lsls	r1, r3, #23
 800c116:	d50d      	bpl.n	800c134 <_scanf_i+0x180>
 800c118:	42bd      	cmp	r5, r7
 800c11a:	d909      	bls.n	800c130 <_scanf_i+0x17c>
 800c11c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c120:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c124:	4632      	mov	r2, r6
 800c126:	4650      	mov	r0, sl
 800c128:	4798      	blx	r3
 800c12a:	f105 39ff 	add.w	r9, r5, #4294967295
 800c12e:	464d      	mov	r5, r9
 800c130:	42bd      	cmp	r5, r7
 800c132:	d028      	beq.n	800c186 <_scanf_i+0x1d2>
 800c134:	6822      	ldr	r2, [r4, #0]
 800c136:	f012 0210 	ands.w	r2, r2, #16
 800c13a:	d113      	bne.n	800c164 <_scanf_i+0x1b0>
 800c13c:	702a      	strb	r2, [r5, #0]
 800c13e:	6863      	ldr	r3, [r4, #4]
 800c140:	9e01      	ldr	r6, [sp, #4]
 800c142:	4639      	mov	r1, r7
 800c144:	4650      	mov	r0, sl
 800c146:	47b0      	blx	r6
 800c148:	f8d8 3000 	ldr.w	r3, [r8]
 800c14c:	6821      	ldr	r1, [r4, #0]
 800c14e:	1d1a      	adds	r2, r3, #4
 800c150:	f8c8 2000 	str.w	r2, [r8]
 800c154:	f011 0f20 	tst.w	r1, #32
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	d00f      	beq.n	800c17c <_scanf_i+0x1c8>
 800c15c:	6018      	str	r0, [r3, #0]
 800c15e:	68e3      	ldr	r3, [r4, #12]
 800c160:	3301      	adds	r3, #1
 800c162:	60e3      	str	r3, [r4, #12]
 800c164:	6923      	ldr	r3, [r4, #16]
 800c166:	1bed      	subs	r5, r5, r7
 800c168:	445d      	add	r5, fp
 800c16a:	442b      	add	r3, r5
 800c16c:	6123      	str	r3, [r4, #16]
 800c16e:	2000      	movs	r0, #0
 800c170:	b007      	add	sp, #28
 800c172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c176:	f04f 0b00 	mov.w	fp, #0
 800c17a:	e7ca      	b.n	800c112 <_scanf_i+0x15e>
 800c17c:	07ca      	lsls	r2, r1, #31
 800c17e:	bf4c      	ite	mi
 800c180:	8018      	strhmi	r0, [r3, #0]
 800c182:	6018      	strpl	r0, [r3, #0]
 800c184:	e7eb      	b.n	800c15e <_scanf_i+0x1aa>
 800c186:	2001      	movs	r0, #1
 800c188:	e7f2      	b.n	800c170 <_scanf_i+0x1bc>
 800c18a:	bf00      	nop
 800c18c:	0800d160 	.word	0x0800d160
 800c190:	08007dbd 	.word	0x08007dbd
 800c194:	0800cc25 	.word	0x0800cc25
 800c198:	0800d539 	.word	0x0800d539

0800c19c <__swhatbuf_r>:
 800c19c:	b570      	push	{r4, r5, r6, lr}
 800c19e:	460c      	mov	r4, r1
 800c1a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1a4:	2900      	cmp	r1, #0
 800c1a6:	b096      	sub	sp, #88	@ 0x58
 800c1a8:	4615      	mov	r5, r2
 800c1aa:	461e      	mov	r6, r3
 800c1ac:	da0d      	bge.n	800c1ca <__swhatbuf_r+0x2e>
 800c1ae:	89a3      	ldrh	r3, [r4, #12]
 800c1b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c1b4:	f04f 0100 	mov.w	r1, #0
 800c1b8:	bf14      	ite	ne
 800c1ba:	2340      	movne	r3, #64	@ 0x40
 800c1bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c1c0:	2000      	movs	r0, #0
 800c1c2:	6031      	str	r1, [r6, #0]
 800c1c4:	602b      	str	r3, [r5, #0]
 800c1c6:	b016      	add	sp, #88	@ 0x58
 800c1c8:	bd70      	pop	{r4, r5, r6, pc}
 800c1ca:	466a      	mov	r2, sp
 800c1cc:	f000 f8d6 	bl	800c37c <_fstat_r>
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	dbec      	blt.n	800c1ae <__swhatbuf_r+0x12>
 800c1d4:	9901      	ldr	r1, [sp, #4]
 800c1d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c1da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c1de:	4259      	negs	r1, r3
 800c1e0:	4159      	adcs	r1, r3
 800c1e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c1e6:	e7eb      	b.n	800c1c0 <__swhatbuf_r+0x24>

0800c1e8 <__smakebuf_r>:
 800c1e8:	898b      	ldrh	r3, [r1, #12]
 800c1ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1ec:	079d      	lsls	r5, r3, #30
 800c1ee:	4606      	mov	r6, r0
 800c1f0:	460c      	mov	r4, r1
 800c1f2:	d507      	bpl.n	800c204 <__smakebuf_r+0x1c>
 800c1f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c1f8:	6023      	str	r3, [r4, #0]
 800c1fa:	6123      	str	r3, [r4, #16]
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	6163      	str	r3, [r4, #20]
 800c200:	b003      	add	sp, #12
 800c202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c204:	ab01      	add	r3, sp, #4
 800c206:	466a      	mov	r2, sp
 800c208:	f7ff ffc8 	bl	800c19c <__swhatbuf_r>
 800c20c:	9f00      	ldr	r7, [sp, #0]
 800c20e:	4605      	mov	r5, r0
 800c210:	4639      	mov	r1, r7
 800c212:	4630      	mov	r0, r6
 800c214:	f7fd fec8 	bl	8009fa8 <_malloc_r>
 800c218:	b948      	cbnz	r0, 800c22e <__smakebuf_r+0x46>
 800c21a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c21e:	059a      	lsls	r2, r3, #22
 800c220:	d4ee      	bmi.n	800c200 <__smakebuf_r+0x18>
 800c222:	f023 0303 	bic.w	r3, r3, #3
 800c226:	f043 0302 	orr.w	r3, r3, #2
 800c22a:	81a3      	strh	r3, [r4, #12]
 800c22c:	e7e2      	b.n	800c1f4 <__smakebuf_r+0xc>
 800c22e:	89a3      	ldrh	r3, [r4, #12]
 800c230:	6020      	str	r0, [r4, #0]
 800c232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c236:	81a3      	strh	r3, [r4, #12]
 800c238:	9b01      	ldr	r3, [sp, #4]
 800c23a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c23e:	b15b      	cbz	r3, 800c258 <__smakebuf_r+0x70>
 800c240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c244:	4630      	mov	r0, r6
 800c246:	f000 f8ab 	bl	800c3a0 <_isatty_r>
 800c24a:	b128      	cbz	r0, 800c258 <__smakebuf_r+0x70>
 800c24c:	89a3      	ldrh	r3, [r4, #12]
 800c24e:	f023 0303 	bic.w	r3, r3, #3
 800c252:	f043 0301 	orr.w	r3, r3, #1
 800c256:	81a3      	strh	r3, [r4, #12]
 800c258:	89a3      	ldrh	r3, [r4, #12]
 800c25a:	431d      	orrs	r5, r3
 800c25c:	81a5      	strh	r5, [r4, #12]
 800c25e:	e7cf      	b.n	800c200 <__smakebuf_r+0x18>

0800c260 <__sccl>:
 800c260:	b570      	push	{r4, r5, r6, lr}
 800c262:	780b      	ldrb	r3, [r1, #0]
 800c264:	4604      	mov	r4, r0
 800c266:	2b5e      	cmp	r3, #94	@ 0x5e
 800c268:	bf0b      	itete	eq
 800c26a:	784b      	ldrbeq	r3, [r1, #1]
 800c26c:	1c4a      	addne	r2, r1, #1
 800c26e:	1c8a      	addeq	r2, r1, #2
 800c270:	2100      	movne	r1, #0
 800c272:	bf08      	it	eq
 800c274:	2101      	moveq	r1, #1
 800c276:	3801      	subs	r0, #1
 800c278:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c27c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c280:	42a8      	cmp	r0, r5
 800c282:	d1fb      	bne.n	800c27c <__sccl+0x1c>
 800c284:	b90b      	cbnz	r3, 800c28a <__sccl+0x2a>
 800c286:	1e50      	subs	r0, r2, #1
 800c288:	bd70      	pop	{r4, r5, r6, pc}
 800c28a:	f081 0101 	eor.w	r1, r1, #1
 800c28e:	54e1      	strb	r1, [r4, r3]
 800c290:	4610      	mov	r0, r2
 800c292:	4602      	mov	r2, r0
 800c294:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c298:	2d2d      	cmp	r5, #45	@ 0x2d
 800c29a:	d005      	beq.n	800c2a8 <__sccl+0x48>
 800c29c:	2d5d      	cmp	r5, #93	@ 0x5d
 800c29e:	d016      	beq.n	800c2ce <__sccl+0x6e>
 800c2a0:	2d00      	cmp	r5, #0
 800c2a2:	d0f1      	beq.n	800c288 <__sccl+0x28>
 800c2a4:	462b      	mov	r3, r5
 800c2a6:	e7f2      	b.n	800c28e <__sccl+0x2e>
 800c2a8:	7846      	ldrb	r6, [r0, #1]
 800c2aa:	2e5d      	cmp	r6, #93	@ 0x5d
 800c2ac:	d0fa      	beq.n	800c2a4 <__sccl+0x44>
 800c2ae:	42b3      	cmp	r3, r6
 800c2b0:	dcf8      	bgt.n	800c2a4 <__sccl+0x44>
 800c2b2:	3002      	adds	r0, #2
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	3201      	adds	r2, #1
 800c2b8:	4296      	cmp	r6, r2
 800c2ba:	54a1      	strb	r1, [r4, r2]
 800c2bc:	dcfb      	bgt.n	800c2b6 <__sccl+0x56>
 800c2be:	1af2      	subs	r2, r6, r3
 800c2c0:	3a01      	subs	r2, #1
 800c2c2:	1c5d      	adds	r5, r3, #1
 800c2c4:	42b3      	cmp	r3, r6
 800c2c6:	bfa8      	it	ge
 800c2c8:	2200      	movge	r2, #0
 800c2ca:	18ab      	adds	r3, r5, r2
 800c2cc:	e7e1      	b.n	800c292 <__sccl+0x32>
 800c2ce:	4610      	mov	r0, r2
 800c2d0:	e7da      	b.n	800c288 <__sccl+0x28>

0800c2d2 <__submore>:
 800c2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d6:	460c      	mov	r4, r1
 800c2d8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c2da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2de:	4299      	cmp	r1, r3
 800c2e0:	d11d      	bne.n	800c31e <__submore+0x4c>
 800c2e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c2e6:	f7fd fe5f 	bl	8009fa8 <_malloc_r>
 800c2ea:	b918      	cbnz	r0, 800c2f4 <__submore+0x22>
 800c2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2f8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c2fa:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c2fe:	6360      	str	r0, [r4, #52]	@ 0x34
 800c300:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c304:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c308:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800c30c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c310:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800c314:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c318:	6020      	str	r0, [r4, #0]
 800c31a:	2000      	movs	r0, #0
 800c31c:	e7e8      	b.n	800c2f0 <__submore+0x1e>
 800c31e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c320:	0077      	lsls	r7, r6, #1
 800c322:	463a      	mov	r2, r7
 800c324:	f000 fbe1 	bl	800caea <_realloc_r>
 800c328:	4605      	mov	r5, r0
 800c32a:	2800      	cmp	r0, #0
 800c32c:	d0de      	beq.n	800c2ec <__submore+0x1a>
 800c32e:	eb00 0806 	add.w	r8, r0, r6
 800c332:	4601      	mov	r1, r0
 800c334:	4632      	mov	r2, r6
 800c336:	4640      	mov	r0, r8
 800c338:	f7fc ff5f 	bl	80091fa <memcpy>
 800c33c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c340:	f8c4 8000 	str.w	r8, [r4]
 800c344:	e7e9      	b.n	800c31a <__submore+0x48>

0800c346 <memmove>:
 800c346:	4288      	cmp	r0, r1
 800c348:	b510      	push	{r4, lr}
 800c34a:	eb01 0402 	add.w	r4, r1, r2
 800c34e:	d902      	bls.n	800c356 <memmove+0x10>
 800c350:	4284      	cmp	r4, r0
 800c352:	4623      	mov	r3, r4
 800c354:	d807      	bhi.n	800c366 <memmove+0x20>
 800c356:	1e43      	subs	r3, r0, #1
 800c358:	42a1      	cmp	r1, r4
 800c35a:	d008      	beq.n	800c36e <memmove+0x28>
 800c35c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c360:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c364:	e7f8      	b.n	800c358 <memmove+0x12>
 800c366:	4402      	add	r2, r0
 800c368:	4601      	mov	r1, r0
 800c36a:	428a      	cmp	r2, r1
 800c36c:	d100      	bne.n	800c370 <memmove+0x2a>
 800c36e:	bd10      	pop	{r4, pc}
 800c370:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c374:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c378:	e7f7      	b.n	800c36a <memmove+0x24>
	...

0800c37c <_fstat_r>:
 800c37c:	b538      	push	{r3, r4, r5, lr}
 800c37e:	4d07      	ldr	r5, [pc, #28]	@ (800c39c <_fstat_r+0x20>)
 800c380:	2300      	movs	r3, #0
 800c382:	4604      	mov	r4, r0
 800c384:	4608      	mov	r0, r1
 800c386:	4611      	mov	r1, r2
 800c388:	602b      	str	r3, [r5, #0]
 800c38a:	f7f6 fc62 	bl	8002c52 <_fstat>
 800c38e:	1c43      	adds	r3, r0, #1
 800c390:	d102      	bne.n	800c398 <_fstat_r+0x1c>
 800c392:	682b      	ldr	r3, [r5, #0]
 800c394:	b103      	cbz	r3, 800c398 <_fstat_r+0x1c>
 800c396:	6023      	str	r3, [r4, #0]
 800c398:	bd38      	pop	{r3, r4, r5, pc}
 800c39a:	bf00      	nop
 800c39c:	20000f38 	.word	0x20000f38

0800c3a0 <_isatty_r>:
 800c3a0:	b538      	push	{r3, r4, r5, lr}
 800c3a2:	4d06      	ldr	r5, [pc, #24]	@ (800c3bc <_isatty_r+0x1c>)
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	4604      	mov	r4, r0
 800c3a8:	4608      	mov	r0, r1
 800c3aa:	602b      	str	r3, [r5, #0]
 800c3ac:	f7f6 fc61 	bl	8002c72 <_isatty>
 800c3b0:	1c43      	adds	r3, r0, #1
 800c3b2:	d102      	bne.n	800c3ba <_isatty_r+0x1a>
 800c3b4:	682b      	ldr	r3, [r5, #0]
 800c3b6:	b103      	cbz	r3, 800c3ba <_isatty_r+0x1a>
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	bd38      	pop	{r3, r4, r5, pc}
 800c3bc:	20000f38 	.word	0x20000f38

0800c3c0 <_sbrk_r>:
 800c3c0:	b538      	push	{r3, r4, r5, lr}
 800c3c2:	4d06      	ldr	r5, [pc, #24]	@ (800c3dc <_sbrk_r+0x1c>)
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	4608      	mov	r0, r1
 800c3ca:	602b      	str	r3, [r5, #0]
 800c3cc:	f7f6 fc6a 	bl	8002ca4 <_sbrk>
 800c3d0:	1c43      	adds	r3, r0, #1
 800c3d2:	d102      	bne.n	800c3da <_sbrk_r+0x1a>
 800c3d4:	682b      	ldr	r3, [r5, #0]
 800c3d6:	b103      	cbz	r3, 800c3da <_sbrk_r+0x1a>
 800c3d8:	6023      	str	r3, [r4, #0]
 800c3da:	bd38      	pop	{r3, r4, r5, pc}
 800c3dc:	20000f38 	.word	0x20000f38

0800c3e0 <nan>:
 800c3e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c3e8 <nan+0x8>
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop
 800c3e8:	00000000 	.word	0x00000000
 800c3ec:	7ff80000 	.word	0x7ff80000

0800c3f0 <__assert_func>:
 800c3f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3f2:	4614      	mov	r4, r2
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	4b09      	ldr	r3, [pc, #36]	@ (800c41c <__assert_func+0x2c>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4605      	mov	r5, r0
 800c3fc:	68d8      	ldr	r0, [r3, #12]
 800c3fe:	b954      	cbnz	r4, 800c416 <__assert_func+0x26>
 800c400:	4b07      	ldr	r3, [pc, #28]	@ (800c420 <__assert_func+0x30>)
 800c402:	461c      	mov	r4, r3
 800c404:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c408:	9100      	str	r1, [sp, #0]
 800c40a:	462b      	mov	r3, r5
 800c40c:	4905      	ldr	r1, [pc, #20]	@ (800c424 <__assert_func+0x34>)
 800c40e:	f000 fc19 	bl	800cc44 <fiprintf>
 800c412:	f000 fc29 	bl	800cc68 <abort>
 800c416:	4b04      	ldr	r3, [pc, #16]	@ (800c428 <__assert_func+0x38>)
 800c418:	e7f4      	b.n	800c404 <__assert_func+0x14>
 800c41a:	bf00      	nop
 800c41c:	20000030 	.word	0x20000030
 800c420:	0800d587 	.word	0x0800d587
 800c424:	0800d559 	.word	0x0800d559
 800c428:	0800d54c 	.word	0x0800d54c

0800c42c <_calloc_r>:
 800c42c:	b570      	push	{r4, r5, r6, lr}
 800c42e:	fba1 5402 	umull	r5, r4, r1, r2
 800c432:	b93c      	cbnz	r4, 800c444 <_calloc_r+0x18>
 800c434:	4629      	mov	r1, r5
 800c436:	f7fd fdb7 	bl	8009fa8 <_malloc_r>
 800c43a:	4606      	mov	r6, r0
 800c43c:	b928      	cbnz	r0, 800c44a <_calloc_r+0x1e>
 800c43e:	2600      	movs	r6, #0
 800c440:	4630      	mov	r0, r6
 800c442:	bd70      	pop	{r4, r5, r6, pc}
 800c444:	220c      	movs	r2, #12
 800c446:	6002      	str	r2, [r0, #0]
 800c448:	e7f9      	b.n	800c43e <_calloc_r+0x12>
 800c44a:	462a      	mov	r2, r5
 800c44c:	4621      	mov	r1, r4
 800c44e:	f7fc fe43 	bl	80090d8 <memset>
 800c452:	e7f5      	b.n	800c440 <_calloc_r+0x14>

0800c454 <rshift>:
 800c454:	6903      	ldr	r3, [r0, #16]
 800c456:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c45a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c45e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c462:	f100 0414 	add.w	r4, r0, #20
 800c466:	dd45      	ble.n	800c4f4 <rshift+0xa0>
 800c468:	f011 011f 	ands.w	r1, r1, #31
 800c46c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c470:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c474:	d10c      	bne.n	800c490 <rshift+0x3c>
 800c476:	f100 0710 	add.w	r7, r0, #16
 800c47a:	4629      	mov	r1, r5
 800c47c:	42b1      	cmp	r1, r6
 800c47e:	d334      	bcc.n	800c4ea <rshift+0x96>
 800c480:	1a9b      	subs	r3, r3, r2
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	1eea      	subs	r2, r5, #3
 800c486:	4296      	cmp	r6, r2
 800c488:	bf38      	it	cc
 800c48a:	2300      	movcc	r3, #0
 800c48c:	4423      	add	r3, r4
 800c48e:	e015      	b.n	800c4bc <rshift+0x68>
 800c490:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c494:	f1c1 0820 	rsb	r8, r1, #32
 800c498:	40cf      	lsrs	r7, r1
 800c49a:	f105 0e04 	add.w	lr, r5, #4
 800c49e:	46a1      	mov	r9, r4
 800c4a0:	4576      	cmp	r6, lr
 800c4a2:	46f4      	mov	ip, lr
 800c4a4:	d815      	bhi.n	800c4d2 <rshift+0x7e>
 800c4a6:	1a9a      	subs	r2, r3, r2
 800c4a8:	0092      	lsls	r2, r2, #2
 800c4aa:	3a04      	subs	r2, #4
 800c4ac:	3501      	adds	r5, #1
 800c4ae:	42ae      	cmp	r6, r5
 800c4b0:	bf38      	it	cc
 800c4b2:	2200      	movcc	r2, #0
 800c4b4:	18a3      	adds	r3, r4, r2
 800c4b6:	50a7      	str	r7, [r4, r2]
 800c4b8:	b107      	cbz	r7, 800c4bc <rshift+0x68>
 800c4ba:	3304      	adds	r3, #4
 800c4bc:	1b1a      	subs	r2, r3, r4
 800c4be:	42a3      	cmp	r3, r4
 800c4c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c4c4:	bf08      	it	eq
 800c4c6:	2300      	moveq	r3, #0
 800c4c8:	6102      	str	r2, [r0, #16]
 800c4ca:	bf08      	it	eq
 800c4cc:	6143      	streq	r3, [r0, #20]
 800c4ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4d2:	f8dc c000 	ldr.w	ip, [ip]
 800c4d6:	fa0c fc08 	lsl.w	ip, ip, r8
 800c4da:	ea4c 0707 	orr.w	r7, ip, r7
 800c4de:	f849 7b04 	str.w	r7, [r9], #4
 800c4e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c4e6:	40cf      	lsrs	r7, r1
 800c4e8:	e7da      	b.n	800c4a0 <rshift+0x4c>
 800c4ea:	f851 cb04 	ldr.w	ip, [r1], #4
 800c4ee:	f847 cf04 	str.w	ip, [r7, #4]!
 800c4f2:	e7c3      	b.n	800c47c <rshift+0x28>
 800c4f4:	4623      	mov	r3, r4
 800c4f6:	e7e1      	b.n	800c4bc <rshift+0x68>

0800c4f8 <__hexdig_fun>:
 800c4f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c4fc:	2b09      	cmp	r3, #9
 800c4fe:	d802      	bhi.n	800c506 <__hexdig_fun+0xe>
 800c500:	3820      	subs	r0, #32
 800c502:	b2c0      	uxtb	r0, r0
 800c504:	4770      	bx	lr
 800c506:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c50a:	2b05      	cmp	r3, #5
 800c50c:	d801      	bhi.n	800c512 <__hexdig_fun+0x1a>
 800c50e:	3847      	subs	r0, #71	@ 0x47
 800c510:	e7f7      	b.n	800c502 <__hexdig_fun+0xa>
 800c512:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c516:	2b05      	cmp	r3, #5
 800c518:	d801      	bhi.n	800c51e <__hexdig_fun+0x26>
 800c51a:	3827      	subs	r0, #39	@ 0x27
 800c51c:	e7f1      	b.n	800c502 <__hexdig_fun+0xa>
 800c51e:	2000      	movs	r0, #0
 800c520:	4770      	bx	lr
	...

0800c524 <__gethex>:
 800c524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c528:	b085      	sub	sp, #20
 800c52a:	468a      	mov	sl, r1
 800c52c:	9302      	str	r3, [sp, #8]
 800c52e:	680b      	ldr	r3, [r1, #0]
 800c530:	9001      	str	r0, [sp, #4]
 800c532:	4690      	mov	r8, r2
 800c534:	1c9c      	adds	r4, r3, #2
 800c536:	46a1      	mov	r9, r4
 800c538:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c53c:	2830      	cmp	r0, #48	@ 0x30
 800c53e:	d0fa      	beq.n	800c536 <__gethex+0x12>
 800c540:	eba9 0303 	sub.w	r3, r9, r3
 800c544:	f1a3 0b02 	sub.w	fp, r3, #2
 800c548:	f7ff ffd6 	bl	800c4f8 <__hexdig_fun>
 800c54c:	4605      	mov	r5, r0
 800c54e:	2800      	cmp	r0, #0
 800c550:	d168      	bne.n	800c624 <__gethex+0x100>
 800c552:	49a0      	ldr	r1, [pc, #640]	@ (800c7d4 <__gethex+0x2b0>)
 800c554:	2201      	movs	r2, #1
 800c556:	4648      	mov	r0, r9
 800c558:	f7fc fdc6 	bl	80090e8 <strncmp>
 800c55c:	4607      	mov	r7, r0
 800c55e:	2800      	cmp	r0, #0
 800c560:	d167      	bne.n	800c632 <__gethex+0x10e>
 800c562:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c566:	4626      	mov	r6, r4
 800c568:	f7ff ffc6 	bl	800c4f8 <__hexdig_fun>
 800c56c:	2800      	cmp	r0, #0
 800c56e:	d062      	beq.n	800c636 <__gethex+0x112>
 800c570:	4623      	mov	r3, r4
 800c572:	7818      	ldrb	r0, [r3, #0]
 800c574:	2830      	cmp	r0, #48	@ 0x30
 800c576:	4699      	mov	r9, r3
 800c578:	f103 0301 	add.w	r3, r3, #1
 800c57c:	d0f9      	beq.n	800c572 <__gethex+0x4e>
 800c57e:	f7ff ffbb 	bl	800c4f8 <__hexdig_fun>
 800c582:	fab0 f580 	clz	r5, r0
 800c586:	096d      	lsrs	r5, r5, #5
 800c588:	f04f 0b01 	mov.w	fp, #1
 800c58c:	464a      	mov	r2, r9
 800c58e:	4616      	mov	r6, r2
 800c590:	3201      	adds	r2, #1
 800c592:	7830      	ldrb	r0, [r6, #0]
 800c594:	f7ff ffb0 	bl	800c4f8 <__hexdig_fun>
 800c598:	2800      	cmp	r0, #0
 800c59a:	d1f8      	bne.n	800c58e <__gethex+0x6a>
 800c59c:	498d      	ldr	r1, [pc, #564]	@ (800c7d4 <__gethex+0x2b0>)
 800c59e:	2201      	movs	r2, #1
 800c5a0:	4630      	mov	r0, r6
 800c5a2:	f7fc fda1 	bl	80090e8 <strncmp>
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	d13f      	bne.n	800c62a <__gethex+0x106>
 800c5aa:	b944      	cbnz	r4, 800c5be <__gethex+0x9a>
 800c5ac:	1c74      	adds	r4, r6, #1
 800c5ae:	4622      	mov	r2, r4
 800c5b0:	4616      	mov	r6, r2
 800c5b2:	3201      	adds	r2, #1
 800c5b4:	7830      	ldrb	r0, [r6, #0]
 800c5b6:	f7ff ff9f 	bl	800c4f8 <__hexdig_fun>
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	d1f8      	bne.n	800c5b0 <__gethex+0x8c>
 800c5be:	1ba4      	subs	r4, r4, r6
 800c5c0:	00a7      	lsls	r7, r4, #2
 800c5c2:	7833      	ldrb	r3, [r6, #0]
 800c5c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c5c8:	2b50      	cmp	r3, #80	@ 0x50
 800c5ca:	d13e      	bne.n	800c64a <__gethex+0x126>
 800c5cc:	7873      	ldrb	r3, [r6, #1]
 800c5ce:	2b2b      	cmp	r3, #43	@ 0x2b
 800c5d0:	d033      	beq.n	800c63a <__gethex+0x116>
 800c5d2:	2b2d      	cmp	r3, #45	@ 0x2d
 800c5d4:	d034      	beq.n	800c640 <__gethex+0x11c>
 800c5d6:	1c71      	adds	r1, r6, #1
 800c5d8:	2400      	movs	r4, #0
 800c5da:	7808      	ldrb	r0, [r1, #0]
 800c5dc:	f7ff ff8c 	bl	800c4f8 <__hexdig_fun>
 800c5e0:	1e43      	subs	r3, r0, #1
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	2b18      	cmp	r3, #24
 800c5e6:	d830      	bhi.n	800c64a <__gethex+0x126>
 800c5e8:	f1a0 0210 	sub.w	r2, r0, #16
 800c5ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c5f0:	f7ff ff82 	bl	800c4f8 <__hexdig_fun>
 800c5f4:	f100 3cff 	add.w	ip, r0, #4294967295
 800c5f8:	fa5f fc8c 	uxtb.w	ip, ip
 800c5fc:	f1bc 0f18 	cmp.w	ip, #24
 800c600:	f04f 030a 	mov.w	r3, #10
 800c604:	d91e      	bls.n	800c644 <__gethex+0x120>
 800c606:	b104      	cbz	r4, 800c60a <__gethex+0xe6>
 800c608:	4252      	negs	r2, r2
 800c60a:	4417      	add	r7, r2
 800c60c:	f8ca 1000 	str.w	r1, [sl]
 800c610:	b1ed      	cbz	r5, 800c64e <__gethex+0x12a>
 800c612:	f1bb 0f00 	cmp.w	fp, #0
 800c616:	bf0c      	ite	eq
 800c618:	2506      	moveq	r5, #6
 800c61a:	2500      	movne	r5, #0
 800c61c:	4628      	mov	r0, r5
 800c61e:	b005      	add	sp, #20
 800c620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c624:	2500      	movs	r5, #0
 800c626:	462c      	mov	r4, r5
 800c628:	e7b0      	b.n	800c58c <__gethex+0x68>
 800c62a:	2c00      	cmp	r4, #0
 800c62c:	d1c7      	bne.n	800c5be <__gethex+0x9a>
 800c62e:	4627      	mov	r7, r4
 800c630:	e7c7      	b.n	800c5c2 <__gethex+0x9e>
 800c632:	464e      	mov	r6, r9
 800c634:	462f      	mov	r7, r5
 800c636:	2501      	movs	r5, #1
 800c638:	e7c3      	b.n	800c5c2 <__gethex+0x9e>
 800c63a:	2400      	movs	r4, #0
 800c63c:	1cb1      	adds	r1, r6, #2
 800c63e:	e7cc      	b.n	800c5da <__gethex+0xb6>
 800c640:	2401      	movs	r4, #1
 800c642:	e7fb      	b.n	800c63c <__gethex+0x118>
 800c644:	fb03 0002 	mla	r0, r3, r2, r0
 800c648:	e7ce      	b.n	800c5e8 <__gethex+0xc4>
 800c64a:	4631      	mov	r1, r6
 800c64c:	e7de      	b.n	800c60c <__gethex+0xe8>
 800c64e:	eba6 0309 	sub.w	r3, r6, r9
 800c652:	3b01      	subs	r3, #1
 800c654:	4629      	mov	r1, r5
 800c656:	2b07      	cmp	r3, #7
 800c658:	dc0a      	bgt.n	800c670 <__gethex+0x14c>
 800c65a:	9801      	ldr	r0, [sp, #4]
 800c65c:	f7fd fd30 	bl	800a0c0 <_Balloc>
 800c660:	4604      	mov	r4, r0
 800c662:	b940      	cbnz	r0, 800c676 <__gethex+0x152>
 800c664:	4b5c      	ldr	r3, [pc, #368]	@ (800c7d8 <__gethex+0x2b4>)
 800c666:	4602      	mov	r2, r0
 800c668:	21e4      	movs	r1, #228	@ 0xe4
 800c66a:	485c      	ldr	r0, [pc, #368]	@ (800c7dc <__gethex+0x2b8>)
 800c66c:	f7ff fec0 	bl	800c3f0 <__assert_func>
 800c670:	3101      	adds	r1, #1
 800c672:	105b      	asrs	r3, r3, #1
 800c674:	e7ef      	b.n	800c656 <__gethex+0x132>
 800c676:	f100 0a14 	add.w	sl, r0, #20
 800c67a:	2300      	movs	r3, #0
 800c67c:	4655      	mov	r5, sl
 800c67e:	469b      	mov	fp, r3
 800c680:	45b1      	cmp	r9, r6
 800c682:	d337      	bcc.n	800c6f4 <__gethex+0x1d0>
 800c684:	f845 bb04 	str.w	fp, [r5], #4
 800c688:	eba5 050a 	sub.w	r5, r5, sl
 800c68c:	10ad      	asrs	r5, r5, #2
 800c68e:	6125      	str	r5, [r4, #16]
 800c690:	4658      	mov	r0, fp
 800c692:	f7fd fe07 	bl	800a2a4 <__hi0bits>
 800c696:	016d      	lsls	r5, r5, #5
 800c698:	f8d8 6000 	ldr.w	r6, [r8]
 800c69c:	1a2d      	subs	r5, r5, r0
 800c69e:	42b5      	cmp	r5, r6
 800c6a0:	dd54      	ble.n	800c74c <__gethex+0x228>
 800c6a2:	1bad      	subs	r5, r5, r6
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	f7fe f99b 	bl	800a9e2 <__any_on>
 800c6ac:	4681      	mov	r9, r0
 800c6ae:	b178      	cbz	r0, 800c6d0 <__gethex+0x1ac>
 800c6b0:	1e6b      	subs	r3, r5, #1
 800c6b2:	1159      	asrs	r1, r3, #5
 800c6b4:	f003 021f 	and.w	r2, r3, #31
 800c6b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c6bc:	f04f 0901 	mov.w	r9, #1
 800c6c0:	fa09 f202 	lsl.w	r2, r9, r2
 800c6c4:	420a      	tst	r2, r1
 800c6c6:	d003      	beq.n	800c6d0 <__gethex+0x1ac>
 800c6c8:	454b      	cmp	r3, r9
 800c6ca:	dc36      	bgt.n	800c73a <__gethex+0x216>
 800c6cc:	f04f 0902 	mov.w	r9, #2
 800c6d0:	4629      	mov	r1, r5
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	f7ff febe 	bl	800c454 <rshift>
 800c6d8:	442f      	add	r7, r5
 800c6da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6de:	42bb      	cmp	r3, r7
 800c6e0:	da42      	bge.n	800c768 <__gethex+0x244>
 800c6e2:	9801      	ldr	r0, [sp, #4]
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	f7fd fd2b 	bl	800a140 <_Bfree>
 800c6ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	6013      	str	r3, [r2, #0]
 800c6f0:	25a3      	movs	r5, #163	@ 0xa3
 800c6f2:	e793      	b.n	800c61c <__gethex+0xf8>
 800c6f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c6f8:	2a2e      	cmp	r2, #46	@ 0x2e
 800c6fa:	d012      	beq.n	800c722 <__gethex+0x1fe>
 800c6fc:	2b20      	cmp	r3, #32
 800c6fe:	d104      	bne.n	800c70a <__gethex+0x1e6>
 800c700:	f845 bb04 	str.w	fp, [r5], #4
 800c704:	f04f 0b00 	mov.w	fp, #0
 800c708:	465b      	mov	r3, fp
 800c70a:	7830      	ldrb	r0, [r6, #0]
 800c70c:	9303      	str	r3, [sp, #12]
 800c70e:	f7ff fef3 	bl	800c4f8 <__hexdig_fun>
 800c712:	9b03      	ldr	r3, [sp, #12]
 800c714:	f000 000f 	and.w	r0, r0, #15
 800c718:	4098      	lsls	r0, r3
 800c71a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c71e:	3304      	adds	r3, #4
 800c720:	e7ae      	b.n	800c680 <__gethex+0x15c>
 800c722:	45b1      	cmp	r9, r6
 800c724:	d8ea      	bhi.n	800c6fc <__gethex+0x1d8>
 800c726:	492b      	ldr	r1, [pc, #172]	@ (800c7d4 <__gethex+0x2b0>)
 800c728:	9303      	str	r3, [sp, #12]
 800c72a:	2201      	movs	r2, #1
 800c72c:	4630      	mov	r0, r6
 800c72e:	f7fc fcdb 	bl	80090e8 <strncmp>
 800c732:	9b03      	ldr	r3, [sp, #12]
 800c734:	2800      	cmp	r0, #0
 800c736:	d1e1      	bne.n	800c6fc <__gethex+0x1d8>
 800c738:	e7a2      	b.n	800c680 <__gethex+0x15c>
 800c73a:	1ea9      	subs	r1, r5, #2
 800c73c:	4620      	mov	r0, r4
 800c73e:	f7fe f950 	bl	800a9e2 <__any_on>
 800c742:	2800      	cmp	r0, #0
 800c744:	d0c2      	beq.n	800c6cc <__gethex+0x1a8>
 800c746:	f04f 0903 	mov.w	r9, #3
 800c74a:	e7c1      	b.n	800c6d0 <__gethex+0x1ac>
 800c74c:	da09      	bge.n	800c762 <__gethex+0x23e>
 800c74e:	1b75      	subs	r5, r6, r5
 800c750:	4621      	mov	r1, r4
 800c752:	9801      	ldr	r0, [sp, #4]
 800c754:	462a      	mov	r2, r5
 800c756:	f7fd ff0b 	bl	800a570 <__lshift>
 800c75a:	1b7f      	subs	r7, r7, r5
 800c75c:	4604      	mov	r4, r0
 800c75e:	f100 0a14 	add.w	sl, r0, #20
 800c762:	f04f 0900 	mov.w	r9, #0
 800c766:	e7b8      	b.n	800c6da <__gethex+0x1b6>
 800c768:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c76c:	42bd      	cmp	r5, r7
 800c76e:	dd6f      	ble.n	800c850 <__gethex+0x32c>
 800c770:	1bed      	subs	r5, r5, r7
 800c772:	42ae      	cmp	r6, r5
 800c774:	dc34      	bgt.n	800c7e0 <__gethex+0x2bc>
 800c776:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c77a:	2b02      	cmp	r3, #2
 800c77c:	d022      	beq.n	800c7c4 <__gethex+0x2a0>
 800c77e:	2b03      	cmp	r3, #3
 800c780:	d024      	beq.n	800c7cc <__gethex+0x2a8>
 800c782:	2b01      	cmp	r3, #1
 800c784:	d115      	bne.n	800c7b2 <__gethex+0x28e>
 800c786:	42ae      	cmp	r6, r5
 800c788:	d113      	bne.n	800c7b2 <__gethex+0x28e>
 800c78a:	2e01      	cmp	r6, #1
 800c78c:	d10b      	bne.n	800c7a6 <__gethex+0x282>
 800c78e:	9a02      	ldr	r2, [sp, #8]
 800c790:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c794:	6013      	str	r3, [r2, #0]
 800c796:	2301      	movs	r3, #1
 800c798:	6123      	str	r3, [r4, #16]
 800c79a:	f8ca 3000 	str.w	r3, [sl]
 800c79e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7a0:	2562      	movs	r5, #98	@ 0x62
 800c7a2:	601c      	str	r4, [r3, #0]
 800c7a4:	e73a      	b.n	800c61c <__gethex+0xf8>
 800c7a6:	1e71      	subs	r1, r6, #1
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f7fe f91a 	bl	800a9e2 <__any_on>
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	d1ed      	bne.n	800c78e <__gethex+0x26a>
 800c7b2:	9801      	ldr	r0, [sp, #4]
 800c7b4:	4621      	mov	r1, r4
 800c7b6:	f7fd fcc3 	bl	800a140 <_Bfree>
 800c7ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7bc:	2300      	movs	r3, #0
 800c7be:	6013      	str	r3, [r2, #0]
 800c7c0:	2550      	movs	r5, #80	@ 0x50
 800c7c2:	e72b      	b.n	800c61c <__gethex+0xf8>
 800c7c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d1f3      	bne.n	800c7b2 <__gethex+0x28e>
 800c7ca:	e7e0      	b.n	800c78e <__gethex+0x26a>
 800c7cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d1dd      	bne.n	800c78e <__gethex+0x26a>
 800c7d2:	e7ee      	b.n	800c7b2 <__gethex+0x28e>
 800c7d4:	0800d4c0 	.word	0x0800d4c0
 800c7d8:	0800d358 	.word	0x0800d358
 800c7dc:	0800d588 	.word	0x0800d588
 800c7e0:	1e6f      	subs	r7, r5, #1
 800c7e2:	f1b9 0f00 	cmp.w	r9, #0
 800c7e6:	d130      	bne.n	800c84a <__gethex+0x326>
 800c7e8:	b127      	cbz	r7, 800c7f4 <__gethex+0x2d0>
 800c7ea:	4639      	mov	r1, r7
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	f7fe f8f8 	bl	800a9e2 <__any_on>
 800c7f2:	4681      	mov	r9, r0
 800c7f4:	117a      	asrs	r2, r7, #5
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c7fc:	f007 071f 	and.w	r7, r7, #31
 800c800:	40bb      	lsls	r3, r7
 800c802:	4213      	tst	r3, r2
 800c804:	4629      	mov	r1, r5
 800c806:	4620      	mov	r0, r4
 800c808:	bf18      	it	ne
 800c80a:	f049 0902 	orrne.w	r9, r9, #2
 800c80e:	f7ff fe21 	bl	800c454 <rshift>
 800c812:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c816:	1b76      	subs	r6, r6, r5
 800c818:	2502      	movs	r5, #2
 800c81a:	f1b9 0f00 	cmp.w	r9, #0
 800c81e:	d047      	beq.n	800c8b0 <__gethex+0x38c>
 800c820:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c824:	2b02      	cmp	r3, #2
 800c826:	d015      	beq.n	800c854 <__gethex+0x330>
 800c828:	2b03      	cmp	r3, #3
 800c82a:	d017      	beq.n	800c85c <__gethex+0x338>
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d109      	bne.n	800c844 <__gethex+0x320>
 800c830:	f019 0f02 	tst.w	r9, #2
 800c834:	d006      	beq.n	800c844 <__gethex+0x320>
 800c836:	f8da 3000 	ldr.w	r3, [sl]
 800c83a:	ea49 0903 	orr.w	r9, r9, r3
 800c83e:	f019 0f01 	tst.w	r9, #1
 800c842:	d10e      	bne.n	800c862 <__gethex+0x33e>
 800c844:	f045 0510 	orr.w	r5, r5, #16
 800c848:	e032      	b.n	800c8b0 <__gethex+0x38c>
 800c84a:	f04f 0901 	mov.w	r9, #1
 800c84e:	e7d1      	b.n	800c7f4 <__gethex+0x2d0>
 800c850:	2501      	movs	r5, #1
 800c852:	e7e2      	b.n	800c81a <__gethex+0x2f6>
 800c854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c856:	f1c3 0301 	rsb	r3, r3, #1
 800c85a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c85c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d0f0      	beq.n	800c844 <__gethex+0x320>
 800c862:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c866:	f104 0314 	add.w	r3, r4, #20
 800c86a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c86e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c872:	f04f 0c00 	mov.w	ip, #0
 800c876:	4618      	mov	r0, r3
 800c878:	f853 2b04 	ldr.w	r2, [r3], #4
 800c87c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c880:	d01b      	beq.n	800c8ba <__gethex+0x396>
 800c882:	3201      	adds	r2, #1
 800c884:	6002      	str	r2, [r0, #0]
 800c886:	2d02      	cmp	r5, #2
 800c888:	f104 0314 	add.w	r3, r4, #20
 800c88c:	d13c      	bne.n	800c908 <__gethex+0x3e4>
 800c88e:	f8d8 2000 	ldr.w	r2, [r8]
 800c892:	3a01      	subs	r2, #1
 800c894:	42b2      	cmp	r2, r6
 800c896:	d109      	bne.n	800c8ac <__gethex+0x388>
 800c898:	1171      	asrs	r1, r6, #5
 800c89a:	2201      	movs	r2, #1
 800c89c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c8a0:	f006 061f 	and.w	r6, r6, #31
 800c8a4:	fa02 f606 	lsl.w	r6, r2, r6
 800c8a8:	421e      	tst	r6, r3
 800c8aa:	d13a      	bne.n	800c922 <__gethex+0x3fe>
 800c8ac:	f045 0520 	orr.w	r5, r5, #32
 800c8b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8b2:	601c      	str	r4, [r3, #0]
 800c8b4:	9b02      	ldr	r3, [sp, #8]
 800c8b6:	601f      	str	r7, [r3, #0]
 800c8b8:	e6b0      	b.n	800c61c <__gethex+0xf8>
 800c8ba:	4299      	cmp	r1, r3
 800c8bc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c8c0:	d8d9      	bhi.n	800c876 <__gethex+0x352>
 800c8c2:	68a3      	ldr	r3, [r4, #8]
 800c8c4:	459b      	cmp	fp, r3
 800c8c6:	db17      	blt.n	800c8f8 <__gethex+0x3d4>
 800c8c8:	6861      	ldr	r1, [r4, #4]
 800c8ca:	9801      	ldr	r0, [sp, #4]
 800c8cc:	3101      	adds	r1, #1
 800c8ce:	f7fd fbf7 	bl	800a0c0 <_Balloc>
 800c8d2:	4681      	mov	r9, r0
 800c8d4:	b918      	cbnz	r0, 800c8de <__gethex+0x3ba>
 800c8d6:	4b1a      	ldr	r3, [pc, #104]	@ (800c940 <__gethex+0x41c>)
 800c8d8:	4602      	mov	r2, r0
 800c8da:	2184      	movs	r1, #132	@ 0x84
 800c8dc:	e6c5      	b.n	800c66a <__gethex+0x146>
 800c8de:	6922      	ldr	r2, [r4, #16]
 800c8e0:	3202      	adds	r2, #2
 800c8e2:	f104 010c 	add.w	r1, r4, #12
 800c8e6:	0092      	lsls	r2, r2, #2
 800c8e8:	300c      	adds	r0, #12
 800c8ea:	f7fc fc86 	bl	80091fa <memcpy>
 800c8ee:	4621      	mov	r1, r4
 800c8f0:	9801      	ldr	r0, [sp, #4]
 800c8f2:	f7fd fc25 	bl	800a140 <_Bfree>
 800c8f6:	464c      	mov	r4, r9
 800c8f8:	6923      	ldr	r3, [r4, #16]
 800c8fa:	1c5a      	adds	r2, r3, #1
 800c8fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c900:	6122      	str	r2, [r4, #16]
 800c902:	2201      	movs	r2, #1
 800c904:	615a      	str	r2, [r3, #20]
 800c906:	e7be      	b.n	800c886 <__gethex+0x362>
 800c908:	6922      	ldr	r2, [r4, #16]
 800c90a:	455a      	cmp	r2, fp
 800c90c:	dd0b      	ble.n	800c926 <__gethex+0x402>
 800c90e:	2101      	movs	r1, #1
 800c910:	4620      	mov	r0, r4
 800c912:	f7ff fd9f 	bl	800c454 <rshift>
 800c916:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c91a:	3701      	adds	r7, #1
 800c91c:	42bb      	cmp	r3, r7
 800c91e:	f6ff aee0 	blt.w	800c6e2 <__gethex+0x1be>
 800c922:	2501      	movs	r5, #1
 800c924:	e7c2      	b.n	800c8ac <__gethex+0x388>
 800c926:	f016 061f 	ands.w	r6, r6, #31
 800c92a:	d0fa      	beq.n	800c922 <__gethex+0x3fe>
 800c92c:	4453      	add	r3, sl
 800c92e:	f1c6 0620 	rsb	r6, r6, #32
 800c932:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c936:	f7fd fcb5 	bl	800a2a4 <__hi0bits>
 800c93a:	42b0      	cmp	r0, r6
 800c93c:	dbe7      	blt.n	800c90e <__gethex+0x3ea>
 800c93e:	e7f0      	b.n	800c922 <__gethex+0x3fe>
 800c940:	0800d358 	.word	0x0800d358

0800c944 <L_shift>:
 800c944:	f1c2 0208 	rsb	r2, r2, #8
 800c948:	0092      	lsls	r2, r2, #2
 800c94a:	b570      	push	{r4, r5, r6, lr}
 800c94c:	f1c2 0620 	rsb	r6, r2, #32
 800c950:	6843      	ldr	r3, [r0, #4]
 800c952:	6804      	ldr	r4, [r0, #0]
 800c954:	fa03 f506 	lsl.w	r5, r3, r6
 800c958:	432c      	orrs	r4, r5
 800c95a:	40d3      	lsrs	r3, r2
 800c95c:	6004      	str	r4, [r0, #0]
 800c95e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c962:	4288      	cmp	r0, r1
 800c964:	d3f4      	bcc.n	800c950 <L_shift+0xc>
 800c966:	bd70      	pop	{r4, r5, r6, pc}

0800c968 <__match>:
 800c968:	b530      	push	{r4, r5, lr}
 800c96a:	6803      	ldr	r3, [r0, #0]
 800c96c:	3301      	adds	r3, #1
 800c96e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c972:	b914      	cbnz	r4, 800c97a <__match+0x12>
 800c974:	6003      	str	r3, [r0, #0]
 800c976:	2001      	movs	r0, #1
 800c978:	bd30      	pop	{r4, r5, pc}
 800c97a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c97e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c982:	2d19      	cmp	r5, #25
 800c984:	bf98      	it	ls
 800c986:	3220      	addls	r2, #32
 800c988:	42a2      	cmp	r2, r4
 800c98a:	d0f0      	beq.n	800c96e <__match+0x6>
 800c98c:	2000      	movs	r0, #0
 800c98e:	e7f3      	b.n	800c978 <__match+0x10>

0800c990 <__hexnan>:
 800c990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c994:	680b      	ldr	r3, [r1, #0]
 800c996:	6801      	ldr	r1, [r0, #0]
 800c998:	115e      	asrs	r6, r3, #5
 800c99a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c99e:	f013 031f 	ands.w	r3, r3, #31
 800c9a2:	b087      	sub	sp, #28
 800c9a4:	bf18      	it	ne
 800c9a6:	3604      	addne	r6, #4
 800c9a8:	2500      	movs	r5, #0
 800c9aa:	1f37      	subs	r7, r6, #4
 800c9ac:	4682      	mov	sl, r0
 800c9ae:	4690      	mov	r8, r2
 800c9b0:	9301      	str	r3, [sp, #4]
 800c9b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c9b6:	46b9      	mov	r9, r7
 800c9b8:	463c      	mov	r4, r7
 800c9ba:	9502      	str	r5, [sp, #8]
 800c9bc:	46ab      	mov	fp, r5
 800c9be:	784a      	ldrb	r2, [r1, #1]
 800c9c0:	1c4b      	adds	r3, r1, #1
 800c9c2:	9303      	str	r3, [sp, #12]
 800c9c4:	b342      	cbz	r2, 800ca18 <__hexnan+0x88>
 800c9c6:	4610      	mov	r0, r2
 800c9c8:	9105      	str	r1, [sp, #20]
 800c9ca:	9204      	str	r2, [sp, #16]
 800c9cc:	f7ff fd94 	bl	800c4f8 <__hexdig_fun>
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	d151      	bne.n	800ca78 <__hexnan+0xe8>
 800c9d4:	9a04      	ldr	r2, [sp, #16]
 800c9d6:	9905      	ldr	r1, [sp, #20]
 800c9d8:	2a20      	cmp	r2, #32
 800c9da:	d818      	bhi.n	800ca0e <__hexnan+0x7e>
 800c9dc:	9b02      	ldr	r3, [sp, #8]
 800c9de:	459b      	cmp	fp, r3
 800c9e0:	dd13      	ble.n	800ca0a <__hexnan+0x7a>
 800c9e2:	454c      	cmp	r4, r9
 800c9e4:	d206      	bcs.n	800c9f4 <__hexnan+0x64>
 800c9e6:	2d07      	cmp	r5, #7
 800c9e8:	dc04      	bgt.n	800c9f4 <__hexnan+0x64>
 800c9ea:	462a      	mov	r2, r5
 800c9ec:	4649      	mov	r1, r9
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f7ff ffa8 	bl	800c944 <L_shift>
 800c9f4:	4544      	cmp	r4, r8
 800c9f6:	d952      	bls.n	800ca9e <__hexnan+0x10e>
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	f1a4 0904 	sub.w	r9, r4, #4
 800c9fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca02:	f8cd b008 	str.w	fp, [sp, #8]
 800ca06:	464c      	mov	r4, r9
 800ca08:	461d      	mov	r5, r3
 800ca0a:	9903      	ldr	r1, [sp, #12]
 800ca0c:	e7d7      	b.n	800c9be <__hexnan+0x2e>
 800ca0e:	2a29      	cmp	r2, #41	@ 0x29
 800ca10:	d157      	bne.n	800cac2 <__hexnan+0x132>
 800ca12:	3102      	adds	r1, #2
 800ca14:	f8ca 1000 	str.w	r1, [sl]
 800ca18:	f1bb 0f00 	cmp.w	fp, #0
 800ca1c:	d051      	beq.n	800cac2 <__hexnan+0x132>
 800ca1e:	454c      	cmp	r4, r9
 800ca20:	d206      	bcs.n	800ca30 <__hexnan+0xa0>
 800ca22:	2d07      	cmp	r5, #7
 800ca24:	dc04      	bgt.n	800ca30 <__hexnan+0xa0>
 800ca26:	462a      	mov	r2, r5
 800ca28:	4649      	mov	r1, r9
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	f7ff ff8a 	bl	800c944 <L_shift>
 800ca30:	4544      	cmp	r4, r8
 800ca32:	d936      	bls.n	800caa2 <__hexnan+0x112>
 800ca34:	f1a8 0204 	sub.w	r2, r8, #4
 800ca38:	4623      	mov	r3, r4
 800ca3a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca3e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ca42:	429f      	cmp	r7, r3
 800ca44:	d2f9      	bcs.n	800ca3a <__hexnan+0xaa>
 800ca46:	1b3b      	subs	r3, r7, r4
 800ca48:	f023 0303 	bic.w	r3, r3, #3
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	3401      	adds	r4, #1
 800ca50:	3e03      	subs	r6, #3
 800ca52:	42b4      	cmp	r4, r6
 800ca54:	bf88      	it	hi
 800ca56:	2304      	movhi	r3, #4
 800ca58:	4443      	add	r3, r8
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	f843 2b04 	str.w	r2, [r3], #4
 800ca60:	429f      	cmp	r7, r3
 800ca62:	d2fb      	bcs.n	800ca5c <__hexnan+0xcc>
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	b91b      	cbnz	r3, 800ca70 <__hexnan+0xe0>
 800ca68:	4547      	cmp	r7, r8
 800ca6a:	d128      	bne.n	800cabe <__hexnan+0x12e>
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	603b      	str	r3, [r7, #0]
 800ca70:	2005      	movs	r0, #5
 800ca72:	b007      	add	sp, #28
 800ca74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca78:	3501      	adds	r5, #1
 800ca7a:	2d08      	cmp	r5, #8
 800ca7c:	f10b 0b01 	add.w	fp, fp, #1
 800ca80:	dd06      	ble.n	800ca90 <__hexnan+0x100>
 800ca82:	4544      	cmp	r4, r8
 800ca84:	d9c1      	bls.n	800ca0a <__hexnan+0x7a>
 800ca86:	2300      	movs	r3, #0
 800ca88:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca8c:	2501      	movs	r5, #1
 800ca8e:	3c04      	subs	r4, #4
 800ca90:	6822      	ldr	r2, [r4, #0]
 800ca92:	f000 000f 	and.w	r0, r0, #15
 800ca96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ca9a:	6020      	str	r0, [r4, #0]
 800ca9c:	e7b5      	b.n	800ca0a <__hexnan+0x7a>
 800ca9e:	2508      	movs	r5, #8
 800caa0:	e7b3      	b.n	800ca0a <__hexnan+0x7a>
 800caa2:	9b01      	ldr	r3, [sp, #4]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d0dd      	beq.n	800ca64 <__hexnan+0xd4>
 800caa8:	f1c3 0320 	rsb	r3, r3, #32
 800caac:	f04f 32ff 	mov.w	r2, #4294967295
 800cab0:	40da      	lsrs	r2, r3
 800cab2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cab6:	4013      	ands	r3, r2
 800cab8:	f846 3c04 	str.w	r3, [r6, #-4]
 800cabc:	e7d2      	b.n	800ca64 <__hexnan+0xd4>
 800cabe:	3f04      	subs	r7, #4
 800cac0:	e7d0      	b.n	800ca64 <__hexnan+0xd4>
 800cac2:	2004      	movs	r0, #4
 800cac4:	e7d5      	b.n	800ca72 <__hexnan+0xe2>

0800cac6 <__ascii_mbtowc>:
 800cac6:	b082      	sub	sp, #8
 800cac8:	b901      	cbnz	r1, 800cacc <__ascii_mbtowc+0x6>
 800caca:	a901      	add	r1, sp, #4
 800cacc:	b142      	cbz	r2, 800cae0 <__ascii_mbtowc+0x1a>
 800cace:	b14b      	cbz	r3, 800cae4 <__ascii_mbtowc+0x1e>
 800cad0:	7813      	ldrb	r3, [r2, #0]
 800cad2:	600b      	str	r3, [r1, #0]
 800cad4:	7812      	ldrb	r2, [r2, #0]
 800cad6:	1e10      	subs	r0, r2, #0
 800cad8:	bf18      	it	ne
 800cada:	2001      	movne	r0, #1
 800cadc:	b002      	add	sp, #8
 800cade:	4770      	bx	lr
 800cae0:	4610      	mov	r0, r2
 800cae2:	e7fb      	b.n	800cadc <__ascii_mbtowc+0x16>
 800cae4:	f06f 0001 	mvn.w	r0, #1
 800cae8:	e7f8      	b.n	800cadc <__ascii_mbtowc+0x16>

0800caea <_realloc_r>:
 800caea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caee:	4680      	mov	r8, r0
 800caf0:	4615      	mov	r5, r2
 800caf2:	460c      	mov	r4, r1
 800caf4:	b921      	cbnz	r1, 800cb00 <_realloc_r+0x16>
 800caf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cafa:	4611      	mov	r1, r2
 800cafc:	f7fd ba54 	b.w	8009fa8 <_malloc_r>
 800cb00:	b92a      	cbnz	r2, 800cb0e <_realloc_r+0x24>
 800cb02:	f7fd f9dd 	bl	8009ec0 <_free_r>
 800cb06:	2400      	movs	r4, #0
 800cb08:	4620      	mov	r0, r4
 800cb0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb0e:	f000 f8b2 	bl	800cc76 <_malloc_usable_size_r>
 800cb12:	4285      	cmp	r5, r0
 800cb14:	4606      	mov	r6, r0
 800cb16:	d802      	bhi.n	800cb1e <_realloc_r+0x34>
 800cb18:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cb1c:	d8f4      	bhi.n	800cb08 <_realloc_r+0x1e>
 800cb1e:	4629      	mov	r1, r5
 800cb20:	4640      	mov	r0, r8
 800cb22:	f7fd fa41 	bl	8009fa8 <_malloc_r>
 800cb26:	4607      	mov	r7, r0
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	d0ec      	beq.n	800cb06 <_realloc_r+0x1c>
 800cb2c:	42b5      	cmp	r5, r6
 800cb2e:	462a      	mov	r2, r5
 800cb30:	4621      	mov	r1, r4
 800cb32:	bf28      	it	cs
 800cb34:	4632      	movcs	r2, r6
 800cb36:	f7fc fb60 	bl	80091fa <memcpy>
 800cb3a:	4621      	mov	r1, r4
 800cb3c:	4640      	mov	r0, r8
 800cb3e:	f7fd f9bf 	bl	8009ec0 <_free_r>
 800cb42:	463c      	mov	r4, r7
 800cb44:	e7e0      	b.n	800cb08 <_realloc_r+0x1e>
	...

0800cb48 <_strtoul_l.constprop.0>:
 800cb48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb4c:	4e34      	ldr	r6, [pc, #208]	@ (800cc20 <_strtoul_l.constprop.0+0xd8>)
 800cb4e:	4686      	mov	lr, r0
 800cb50:	460d      	mov	r5, r1
 800cb52:	4628      	mov	r0, r5
 800cb54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb58:	5d37      	ldrb	r7, [r6, r4]
 800cb5a:	f017 0708 	ands.w	r7, r7, #8
 800cb5e:	d1f8      	bne.n	800cb52 <_strtoul_l.constprop.0+0xa>
 800cb60:	2c2d      	cmp	r4, #45	@ 0x2d
 800cb62:	d12f      	bne.n	800cbc4 <_strtoul_l.constprop.0+0x7c>
 800cb64:	782c      	ldrb	r4, [r5, #0]
 800cb66:	2701      	movs	r7, #1
 800cb68:	1c85      	adds	r5, r0, #2
 800cb6a:	f033 0010 	bics.w	r0, r3, #16
 800cb6e:	d109      	bne.n	800cb84 <_strtoul_l.constprop.0+0x3c>
 800cb70:	2c30      	cmp	r4, #48	@ 0x30
 800cb72:	d12c      	bne.n	800cbce <_strtoul_l.constprop.0+0x86>
 800cb74:	7828      	ldrb	r0, [r5, #0]
 800cb76:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800cb7a:	2858      	cmp	r0, #88	@ 0x58
 800cb7c:	d127      	bne.n	800cbce <_strtoul_l.constprop.0+0x86>
 800cb7e:	786c      	ldrb	r4, [r5, #1]
 800cb80:	2310      	movs	r3, #16
 800cb82:	3502      	adds	r5, #2
 800cb84:	f04f 38ff 	mov.w	r8, #4294967295
 800cb88:	2600      	movs	r6, #0
 800cb8a:	fbb8 f8f3 	udiv	r8, r8, r3
 800cb8e:	fb03 f908 	mul.w	r9, r3, r8
 800cb92:	ea6f 0909 	mvn.w	r9, r9
 800cb96:	4630      	mov	r0, r6
 800cb98:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800cb9c:	f1bc 0f09 	cmp.w	ip, #9
 800cba0:	d81c      	bhi.n	800cbdc <_strtoul_l.constprop.0+0x94>
 800cba2:	4664      	mov	r4, ip
 800cba4:	42a3      	cmp	r3, r4
 800cba6:	dd2a      	ble.n	800cbfe <_strtoul_l.constprop.0+0xb6>
 800cba8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800cbac:	d007      	beq.n	800cbbe <_strtoul_l.constprop.0+0x76>
 800cbae:	4580      	cmp	r8, r0
 800cbb0:	d322      	bcc.n	800cbf8 <_strtoul_l.constprop.0+0xb0>
 800cbb2:	d101      	bne.n	800cbb8 <_strtoul_l.constprop.0+0x70>
 800cbb4:	45a1      	cmp	r9, r4
 800cbb6:	db1f      	blt.n	800cbf8 <_strtoul_l.constprop.0+0xb0>
 800cbb8:	fb00 4003 	mla	r0, r0, r3, r4
 800cbbc:	2601      	movs	r6, #1
 800cbbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbc2:	e7e9      	b.n	800cb98 <_strtoul_l.constprop.0+0x50>
 800cbc4:	2c2b      	cmp	r4, #43	@ 0x2b
 800cbc6:	bf04      	itt	eq
 800cbc8:	782c      	ldrbeq	r4, [r5, #0]
 800cbca:	1c85      	addeq	r5, r0, #2
 800cbcc:	e7cd      	b.n	800cb6a <_strtoul_l.constprop.0+0x22>
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d1d8      	bne.n	800cb84 <_strtoul_l.constprop.0+0x3c>
 800cbd2:	2c30      	cmp	r4, #48	@ 0x30
 800cbd4:	bf0c      	ite	eq
 800cbd6:	2308      	moveq	r3, #8
 800cbd8:	230a      	movne	r3, #10
 800cbda:	e7d3      	b.n	800cb84 <_strtoul_l.constprop.0+0x3c>
 800cbdc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800cbe0:	f1bc 0f19 	cmp.w	ip, #25
 800cbe4:	d801      	bhi.n	800cbea <_strtoul_l.constprop.0+0xa2>
 800cbe6:	3c37      	subs	r4, #55	@ 0x37
 800cbe8:	e7dc      	b.n	800cba4 <_strtoul_l.constprop.0+0x5c>
 800cbea:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800cbee:	f1bc 0f19 	cmp.w	ip, #25
 800cbf2:	d804      	bhi.n	800cbfe <_strtoul_l.constprop.0+0xb6>
 800cbf4:	3c57      	subs	r4, #87	@ 0x57
 800cbf6:	e7d5      	b.n	800cba4 <_strtoul_l.constprop.0+0x5c>
 800cbf8:	f04f 36ff 	mov.w	r6, #4294967295
 800cbfc:	e7df      	b.n	800cbbe <_strtoul_l.constprop.0+0x76>
 800cbfe:	1c73      	adds	r3, r6, #1
 800cc00:	d106      	bne.n	800cc10 <_strtoul_l.constprop.0+0xc8>
 800cc02:	2322      	movs	r3, #34	@ 0x22
 800cc04:	f8ce 3000 	str.w	r3, [lr]
 800cc08:	4630      	mov	r0, r6
 800cc0a:	b932      	cbnz	r2, 800cc1a <_strtoul_l.constprop.0+0xd2>
 800cc0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc10:	b107      	cbz	r7, 800cc14 <_strtoul_l.constprop.0+0xcc>
 800cc12:	4240      	negs	r0, r0
 800cc14:	2a00      	cmp	r2, #0
 800cc16:	d0f9      	beq.n	800cc0c <_strtoul_l.constprop.0+0xc4>
 800cc18:	b106      	cbz	r6, 800cc1c <_strtoul_l.constprop.0+0xd4>
 800cc1a:	1e69      	subs	r1, r5, #1
 800cc1c:	6011      	str	r1, [r2, #0]
 800cc1e:	e7f5      	b.n	800cc0c <_strtoul_l.constprop.0+0xc4>
 800cc20:	0800d1a5 	.word	0x0800d1a5

0800cc24 <_strtoul_r>:
 800cc24:	f7ff bf90 	b.w	800cb48 <_strtoul_l.constprop.0>

0800cc28 <__ascii_wctomb>:
 800cc28:	4603      	mov	r3, r0
 800cc2a:	4608      	mov	r0, r1
 800cc2c:	b141      	cbz	r1, 800cc40 <__ascii_wctomb+0x18>
 800cc2e:	2aff      	cmp	r2, #255	@ 0xff
 800cc30:	d904      	bls.n	800cc3c <__ascii_wctomb+0x14>
 800cc32:	228a      	movs	r2, #138	@ 0x8a
 800cc34:	601a      	str	r2, [r3, #0]
 800cc36:	f04f 30ff 	mov.w	r0, #4294967295
 800cc3a:	4770      	bx	lr
 800cc3c:	700a      	strb	r2, [r1, #0]
 800cc3e:	2001      	movs	r0, #1
 800cc40:	4770      	bx	lr
	...

0800cc44 <fiprintf>:
 800cc44:	b40e      	push	{r1, r2, r3}
 800cc46:	b503      	push	{r0, r1, lr}
 800cc48:	4601      	mov	r1, r0
 800cc4a:	ab03      	add	r3, sp, #12
 800cc4c:	4805      	ldr	r0, [pc, #20]	@ (800cc64 <fiprintf+0x20>)
 800cc4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc52:	6800      	ldr	r0, [r0, #0]
 800cc54:	9301      	str	r3, [sp, #4]
 800cc56:	f7ff f83b 	bl	800bcd0 <_vfiprintf_r>
 800cc5a:	b002      	add	sp, #8
 800cc5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc60:	b003      	add	sp, #12
 800cc62:	4770      	bx	lr
 800cc64:	20000030 	.word	0x20000030

0800cc68 <abort>:
 800cc68:	b508      	push	{r3, lr}
 800cc6a:	2006      	movs	r0, #6
 800cc6c:	f000 f834 	bl	800ccd8 <raise>
 800cc70:	2001      	movs	r0, #1
 800cc72:	f7f5 ffbb 	bl	8002bec <_exit>

0800cc76 <_malloc_usable_size_r>:
 800cc76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc7a:	1f18      	subs	r0, r3, #4
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	bfbc      	itt	lt
 800cc80:	580b      	ldrlt	r3, [r1, r0]
 800cc82:	18c0      	addlt	r0, r0, r3
 800cc84:	4770      	bx	lr

0800cc86 <_raise_r>:
 800cc86:	291f      	cmp	r1, #31
 800cc88:	b538      	push	{r3, r4, r5, lr}
 800cc8a:	4605      	mov	r5, r0
 800cc8c:	460c      	mov	r4, r1
 800cc8e:	d904      	bls.n	800cc9a <_raise_r+0x14>
 800cc90:	2316      	movs	r3, #22
 800cc92:	6003      	str	r3, [r0, #0]
 800cc94:	f04f 30ff 	mov.w	r0, #4294967295
 800cc98:	bd38      	pop	{r3, r4, r5, pc}
 800cc9a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cc9c:	b112      	cbz	r2, 800cca4 <_raise_r+0x1e>
 800cc9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cca2:	b94b      	cbnz	r3, 800ccb8 <_raise_r+0x32>
 800cca4:	4628      	mov	r0, r5
 800cca6:	f000 f831 	bl	800cd0c <_getpid_r>
 800ccaa:	4622      	mov	r2, r4
 800ccac:	4601      	mov	r1, r0
 800ccae:	4628      	mov	r0, r5
 800ccb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccb4:	f000 b818 	b.w	800cce8 <_kill_r>
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d00a      	beq.n	800ccd2 <_raise_r+0x4c>
 800ccbc:	1c59      	adds	r1, r3, #1
 800ccbe:	d103      	bne.n	800ccc8 <_raise_r+0x42>
 800ccc0:	2316      	movs	r3, #22
 800ccc2:	6003      	str	r3, [r0, #0]
 800ccc4:	2001      	movs	r0, #1
 800ccc6:	e7e7      	b.n	800cc98 <_raise_r+0x12>
 800ccc8:	2100      	movs	r1, #0
 800ccca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ccce:	4620      	mov	r0, r4
 800ccd0:	4798      	blx	r3
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	e7e0      	b.n	800cc98 <_raise_r+0x12>
	...

0800ccd8 <raise>:
 800ccd8:	4b02      	ldr	r3, [pc, #8]	@ (800cce4 <raise+0xc>)
 800ccda:	4601      	mov	r1, r0
 800ccdc:	6818      	ldr	r0, [r3, #0]
 800ccde:	f7ff bfd2 	b.w	800cc86 <_raise_r>
 800cce2:	bf00      	nop
 800cce4:	20000030 	.word	0x20000030

0800cce8 <_kill_r>:
 800cce8:	b538      	push	{r3, r4, r5, lr}
 800ccea:	4d07      	ldr	r5, [pc, #28]	@ (800cd08 <_kill_r+0x20>)
 800ccec:	2300      	movs	r3, #0
 800ccee:	4604      	mov	r4, r0
 800ccf0:	4608      	mov	r0, r1
 800ccf2:	4611      	mov	r1, r2
 800ccf4:	602b      	str	r3, [r5, #0]
 800ccf6:	f7f5 ff69 	bl	8002bcc <_kill>
 800ccfa:	1c43      	adds	r3, r0, #1
 800ccfc:	d102      	bne.n	800cd04 <_kill_r+0x1c>
 800ccfe:	682b      	ldr	r3, [r5, #0]
 800cd00:	b103      	cbz	r3, 800cd04 <_kill_r+0x1c>
 800cd02:	6023      	str	r3, [r4, #0]
 800cd04:	bd38      	pop	{r3, r4, r5, pc}
 800cd06:	bf00      	nop
 800cd08:	20000f38 	.word	0x20000f38

0800cd0c <_getpid_r>:
 800cd0c:	f7f5 bf56 	b.w	8002bbc <_getpid>

0800cd10 <floor>:
 800cd10:	ec51 0b10 	vmov	r0, r1, d0
 800cd14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd1c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800cd20:	2e13      	cmp	r6, #19
 800cd22:	460c      	mov	r4, r1
 800cd24:	4605      	mov	r5, r0
 800cd26:	4680      	mov	r8, r0
 800cd28:	dc34      	bgt.n	800cd94 <floor+0x84>
 800cd2a:	2e00      	cmp	r6, #0
 800cd2c:	da17      	bge.n	800cd5e <floor+0x4e>
 800cd2e:	a332      	add	r3, pc, #200	@ (adr r3, 800cdf8 <floor+0xe8>)
 800cd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd34:	f7f3 faaa 	bl	800028c <__adddf3>
 800cd38:	2200      	movs	r2, #0
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	f7f3 feec 	bl	8000b18 <__aeabi_dcmpgt>
 800cd40:	b150      	cbz	r0, 800cd58 <floor+0x48>
 800cd42:	2c00      	cmp	r4, #0
 800cd44:	da55      	bge.n	800cdf2 <floor+0xe2>
 800cd46:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800cd4a:	432c      	orrs	r4, r5
 800cd4c:	2500      	movs	r5, #0
 800cd4e:	42ac      	cmp	r4, r5
 800cd50:	4c2b      	ldr	r4, [pc, #172]	@ (800ce00 <floor+0xf0>)
 800cd52:	bf08      	it	eq
 800cd54:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800cd58:	4621      	mov	r1, r4
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	e023      	b.n	800cda6 <floor+0x96>
 800cd5e:	4f29      	ldr	r7, [pc, #164]	@ (800ce04 <floor+0xf4>)
 800cd60:	4137      	asrs	r7, r6
 800cd62:	ea01 0307 	and.w	r3, r1, r7
 800cd66:	4303      	orrs	r3, r0
 800cd68:	d01d      	beq.n	800cda6 <floor+0x96>
 800cd6a:	a323      	add	r3, pc, #140	@ (adr r3, 800cdf8 <floor+0xe8>)
 800cd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd70:	f7f3 fa8c 	bl	800028c <__adddf3>
 800cd74:	2200      	movs	r2, #0
 800cd76:	2300      	movs	r3, #0
 800cd78:	f7f3 fece 	bl	8000b18 <__aeabi_dcmpgt>
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	d0eb      	beq.n	800cd58 <floor+0x48>
 800cd80:	2c00      	cmp	r4, #0
 800cd82:	bfbe      	ittt	lt
 800cd84:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800cd88:	4133      	asrlt	r3, r6
 800cd8a:	18e4      	addlt	r4, r4, r3
 800cd8c:	ea24 0407 	bic.w	r4, r4, r7
 800cd90:	2500      	movs	r5, #0
 800cd92:	e7e1      	b.n	800cd58 <floor+0x48>
 800cd94:	2e33      	cmp	r6, #51	@ 0x33
 800cd96:	dd0a      	ble.n	800cdae <floor+0x9e>
 800cd98:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800cd9c:	d103      	bne.n	800cda6 <floor+0x96>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	460b      	mov	r3, r1
 800cda2:	f7f3 fa73 	bl	800028c <__adddf3>
 800cda6:	ec41 0b10 	vmov	d0, r0, r1
 800cdaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdae:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800cdb2:	f04f 37ff 	mov.w	r7, #4294967295
 800cdb6:	40df      	lsrs	r7, r3
 800cdb8:	4207      	tst	r7, r0
 800cdba:	d0f4      	beq.n	800cda6 <floor+0x96>
 800cdbc:	a30e      	add	r3, pc, #56	@ (adr r3, 800cdf8 <floor+0xe8>)
 800cdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc2:	f7f3 fa63 	bl	800028c <__adddf3>
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	2300      	movs	r3, #0
 800cdca:	f7f3 fea5 	bl	8000b18 <__aeabi_dcmpgt>
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	d0c2      	beq.n	800cd58 <floor+0x48>
 800cdd2:	2c00      	cmp	r4, #0
 800cdd4:	da0a      	bge.n	800cdec <floor+0xdc>
 800cdd6:	2e14      	cmp	r6, #20
 800cdd8:	d101      	bne.n	800cdde <floor+0xce>
 800cdda:	3401      	adds	r4, #1
 800cddc:	e006      	b.n	800cdec <floor+0xdc>
 800cdde:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800cde2:	2301      	movs	r3, #1
 800cde4:	40b3      	lsls	r3, r6
 800cde6:	441d      	add	r5, r3
 800cde8:	4545      	cmp	r5, r8
 800cdea:	d3f6      	bcc.n	800cdda <floor+0xca>
 800cdec:	ea25 0507 	bic.w	r5, r5, r7
 800cdf0:	e7b2      	b.n	800cd58 <floor+0x48>
 800cdf2:	2500      	movs	r5, #0
 800cdf4:	462c      	mov	r4, r5
 800cdf6:	e7af      	b.n	800cd58 <floor+0x48>
 800cdf8:	8800759c 	.word	0x8800759c
 800cdfc:	7e37e43c 	.word	0x7e37e43c
 800ce00:	bff00000 	.word	0xbff00000
 800ce04:	000fffff 	.word	0x000fffff

0800ce08 <_init>:
 800ce08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0a:	bf00      	nop
 800ce0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce0e:	bc08      	pop	{r3}
 800ce10:	469e      	mov	lr, r3
 800ce12:	4770      	bx	lr

0800ce14 <_fini>:
 800ce14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce16:	bf00      	nop
 800ce18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce1a:	bc08      	pop	{r3}
 800ce1c:	469e      	mov	lr, r3
 800ce1e:	4770      	bx	lr
