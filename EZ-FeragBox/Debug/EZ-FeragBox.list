
EZ-FeragBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013450  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  080135e0  080135e0  000145e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013d30  08013d30  00015358  2**0
                  CONTENTS
  4 .ARM          00000008  08013d30  08013d30  00014d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d38  08013d38  00015358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013d38  08013d38  00014d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013d3c  08013d3c  00014d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  08013d40  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f08  20000358  08014098  00015358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002260  08014098  00016260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e20a  00000000  00000000  00015388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ac6  00000000  00000000  00033592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  00038058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000133f  00000000  00000000  00039958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e53  00000000  00000000  0003ac97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002240c  00000000  00000000  0005baea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aed11  00000000  00000000  0007def6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cc07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f78  00000000  00000000  0012cc4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00134bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080135c8 	.word	0x080135c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	080135c8 	.word	0x080135c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <AD55936_init>:
#define _ADAC_ADC_READ        0b01000000
#define _ADAC_DAC_READ        0b01010000
#define _ADAC_GPIO_READ       0b01100000
#define _ADAC_REG_READ        0b01110000

HAL_StatusTypeDef AD55936_init(I2C_HandleTypeDef *hi2c, uint16_t DevAddress) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	uint8_t data[3];

	data[0] = _ADAC_GP_CONTROL;
 8000d00:	2303      	movs	r3, #3
 8000d02:	733b      	strb	r3, [r7, #12]
	data[1] = 0x01;
 8000d04:	2301      	movs	r3, #1
 8000d06:	737b      	strb	r3, [r7, #13]
	data[2] = 0x00;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, 3, HAL_MAX_DELAY);
 8000d0c:	f107 020c 	add.w	r2, r7, #12
 8000d10:	8879      	ldrh	r1, [r7, #2]
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2303      	movs	r3, #3
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f002 fc12 	bl	8003544 <HAL_I2C_Master_Transmit>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <AD55936_init+0x3a>
		return status;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	e029      	b.n	8000d82 <AD55936_init+0x8e>

	data[0] = _ADAC_POWER_REF_CTRL;
 8000d2e:	230b      	movs	r3, #11
 8000d30:	733b      	strb	r3, [r7, #12]
	data[1] = 0x02;
 8000d32:	2302      	movs	r3, #2
 8000d34:	737b      	strb	r3, [r7, #13]
	data[2] = 0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, 3, HAL_MAX_DELAY);
 8000d3a:	f107 020c 	add.w	r2, r7, #12
 8000d3e:	8879      	ldrh	r1, [r7, #2]
 8000d40:	f04f 33ff 	mov.w	r3, #4294967295
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2303      	movs	r3, #3
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f002 fbfb 	bl	8003544 <HAL_I2C_Master_Transmit>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <AD55936_init+0x68>
		return status;
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	e012      	b.n	8000d82 <AD55936_init+0x8e>

	data[0] = _ADAC_ADC_CONFIG;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	733b      	strb	r3, [r7, #12]
	data[1] = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	737b      	strb	r3, [r7, #13]
	data[2] = 0xFF;
 8000d64:	23ff      	movs	r3, #255	@ 0xff
 8000d66:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, 3, HAL_MAX_DELAY);
 8000d68:	f107 020c 	add.w	r2, r7, #12
 8000d6c:	8879      	ldrh	r1, [r7, #2]
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2303      	movs	r3, #3
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f002 fbe4 	bl	8003544 <HAL_I2C_Master_Transmit>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	73fb      	strb	r3, [r7, #15]

	return status;
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <AD5593R_ReadADC>:

HAL_StatusTypeDef AD5593R_ReadADC(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t channel, uint16_t *adcValue) {
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b08a      	sub	sp, #40	@ 0x28
 8000d8e:	af02      	add	r7, sp, #8
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	817b      	strh	r3, [r7, #10]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	727b      	strb	r3, [r7, #9]
    uint16_t channelBit = 1 << channel;
 8000d9c:	7a7b      	ldrb	r3, [r7, #9]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	83fb      	strh	r3, [r7, #30]

	if (channel > 8) {
 8000da6:	7a7b      	ldrb	r3, [r7, #9]
 8000da8:	2b08      	cmp	r3, #8
 8000daa:	d901      	bls.n	8000db0 <AD5593R_ReadADC+0x26>
        // Invalid channel, return error (0-7 = ADC Inputs, 8 = Internal Temperature Sensor)
        return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e04a      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    HAL_StatusTypeDef status;
    uint8_t command[3];
    uint8_t data[2];

    // Configure the ADC channel
    command[0] = _ADAC_ADC_SEQUENCE;
 8000db0:	2302      	movs	r3, #2
 8000db2:	763b      	strb	r3, [r7, #24]

    // Select Channel
    command[1] = (uint8_t)(channelBit >> 8);
 8000db4:	8bfb      	ldrh	r3, [r7, #30]
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	767b      	strb	r3, [r7, #25]
    command[2] = (uint8_t)(channelBit & 0xFF);
 8000dbe:	8bfb      	ldrh	r3, [r7, #30]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	76bb      	strb	r3, [r7, #26]

    status = HAL_I2C_Master_Transmit(hi2c, DevAddress, command, sizeof(command), HAL_MAX_DELAY);
 8000dc4:	f107 0218 	add.w	r2, r7, #24
 8000dc8:	8979      	ldrh	r1, [r7, #10]
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	68f8      	ldr	r0, [r7, #12]
 8000dd4:	f002 fbb6 	bl	8003544 <HAL_I2C_Master_Transmit>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	777b      	strb	r3, [r7, #29]

    if (status != HAL_OK) {
 8000ddc:	7f7b      	ldrb	r3, [r7, #29]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <AD5593R_ReadADC+0x5c>
        // Handle error here
        return status;
 8000de2:	7f7b      	ldrb	r3, [r7, #29]
 8000de4:	e02f      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    }

	// Initiate an ADC read
	command[0] = _ADAC_ADC_READ;
 8000de6:	2340      	movs	r3, #64	@ 0x40
 8000de8:	763b      	strb	r3, [r7, #24]

    // Begin transmission to set the ADC read pointer
    status = HAL_I2C_Master_Transmit(hi2c, DevAddress, command, 1, HAL_MAX_DELAY);
 8000dea:	f107 0218 	add.w	r2, r7, #24
 8000dee:	8979      	ldrh	r1, [r7, #10]
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2301      	movs	r3, #1
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f002 fba3 	bl	8003544 <HAL_I2C_Master_Transmit>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	777b      	strb	r3, [r7, #29]

    if (status != HAL_OK) {
 8000e02:	7f7b      	ldrb	r3, [r7, #29]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <AD5593R_ReadADC+0x82>
        // Handle error here
        return status;
 8000e08:	7f7b      	ldrb	r3, [r7, #29]
 8000e0a:	e01c      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    }

    // Read the ADC value (2 bytes)
    status = HAL_I2C_Master_Receive(hi2c, DevAddress, data, 2, HAL_MAX_DELAY);
 8000e0c:	f107 0214 	add.w	r2, r7, #20
 8000e10:	8979      	ldrh	r1, [r7, #10]
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2302      	movs	r3, #2
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f002 fc86 	bl	800372c <HAL_I2C_Master_Receive>
 8000e20:	4603      	mov	r3, r0
 8000e22:	777b      	strb	r3, [r7, #29]

    if (status != HAL_OK) {
 8000e24:	7f7b      	ldrb	r3, [r7, #29]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <AD5593R_ReadADC+0xa4>
        // Handle error here
        return status;
 8000e2a:	7f7b      	ldrb	r3, [r7, #29]
 8000e2c:	e00b      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    }

    // Convert the two received bytes into a single 16-bit value
    *adcValue = (uint16_t)((data[0] & 0x0F) << 8) + data[1];
 8000e2e:	7d3b      	ldrb	r3, [r7, #20]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	7d7a      	ldrb	r2, [r7, #21]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	801a      	strh	r2, [r3, #0]

    return status;
 8000e44:	7f7b      	ldrb	r3, [r7, #29]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <box_init>:
static void _check_printer_ready(void);
static void _send_print_done(void);

//--- box_init -------------------------------
void box_init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	memset(&_Status, 0, sizeof(_Status));
 8000e54:	2250      	movs	r2, #80	@ 0x50
 8000e56:	2100      	movs	r1, #0
 8000e58:	480e      	ldr	r0, [pc, #56]	@ (8000e94 <box_init+0x44>)
 8000e5a:	f00e fd07 	bl	800f86c <memset>
	_FeragMsgIn      = 0;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <box_init+0x48>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
	_FeragMsgOut     = 0;
 8000e64:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <box_init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
	_TrackInIdx  	 = 0;
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <box_init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
	_TrackOutIdx 	 = 0;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <box_init+0x54>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
	_PrintDoneDelay  = 0;
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <box_init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
	_PrinterReadyIn  = -1;
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <box_init+0x5c>)
 8000e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e82:	601a      	str	r2, [r3, #0]
	box_start();
 8000e84:	f000 f82a 	bl	8000edc <box_start>
	printf("LOG: box_init\n");
 8000e88:	4809      	ldr	r0, [pc, #36]	@ (8000eb0 <box_init+0x60>)
 8000e8a:	f00e fbc3 	bl	800f614 <puts>
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000378 	.word	0x20000378
 8000e98:	200003d4 	.word	0x200003d4
 8000e9c:	200003d8 	.word	0x200003d8
 8000ea0:	2000040c 	.word	0x2000040c
 8000ea4:	20000410 	.word	0x20000410
 8000ea8:	2000041c 	.word	0x2000041c
 8000eac:	20000004 	.word	0x20000004
 8000eb0:	080135e0 	.word	0x080135e0

08000eb4 <box_set_pgDelay>:

//--- box_set_pgDelay ------------------------------------
void box_set_pgDelay(int delay)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	_PrintGoDelay = delay;
 8000ebc:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <box_set_pgDelay+0x20>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
	printf("set pgDelay=%d\n", delay);
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	4804      	ldr	r0, [pc, #16]	@ (8000ed8 <box_set_pgDelay+0x24>)
 8000ec6:	f00e fb3d 	bl	800f544 <iprintf>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	080135f0 	.word	0x080135f0

08000edc <box_start>:

//--- box_start -------------------------
void box_start(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	printf("start\n");
 8000ee0:	481a      	ldr	r0, [pc, #104]	@ (8000f4c <box_start+0x70>)
 8000ee2:	f00e fb97 	bl	800f614 <puts>
	_FeragMsgIn   = 0;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <box_start+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
	_FeragMsgOut  = 0;
 8000eec:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <box_start+0x78>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
	_TrackInIdx  	  = 0;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <box_start+0x7c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
	_TrackOutIdx 	  = 0;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <box_start+0x80>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
	_Status.dtCnt = 0;
 8000efe:	4b18      	ldr	r3, [pc, #96]	@ (8000f60 <box_start+0x84>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	645a      	str	r2, [r3, #68]	@ 0x44
	_Status.pgCnt = 0;
 8000f04:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <box_start+0x84>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	649a      	str	r2, [r3, #72]	@ 0x48
	_Status.pdCnt = 0;
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <box_start+0x84>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	64da      	str	r2, [r3, #76]	@ 0x4c
	_EncoderPos   = 0;
 8000f10:	4b14      	ldr	r3, [pc, #80]	@ (8000f64 <box_start+0x88>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
	_PrintDoneDelay = 0;
 8000f16:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <box_start+0x8c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
	_PrinterReadyIn  = -1;
 8000f1c:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <box_start+0x90>)
 8000f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f22:	601a      	str	r2, [r3, #0]
	_PaceId		  = -1;
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <box_start+0x94>)
 8000f26:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2a:	601a      	str	r2, [r3, #0]
	box_send_status();
 8000f2c:	f000 faf8 	bl	8001520 <box_send_status>
	_Running = TRUE;
 8000f30:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <box_start+0x98>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f3c:	480e      	ldr	r0, [pc, #56]	@ (8000f78 <box_start+0x9c>)
 8000f3e:	f002 fa59 	bl	80033f4 <HAL_GPIO_WritePin>
	enc_start();
 8000f42:	f000 fd33 	bl	80019ac <enc_start>
		enc_set_speed(100);
		//--- PaceId 10 ----
		box_handle_ferag_char(0x11);
		box_handle_ferag_char(0x8a);
	}
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	08013600 	.word	0x08013600
 8000f50:	200003d4 	.word	0x200003d4
 8000f54:	200003d8 	.word	0x200003d8
 8000f58:	2000040c 	.word	0x2000040c
 8000f5c:	20000410 	.word	0x20000410
 8000f60:	20000378 	.word	0x20000378
 8000f64:	20000418 	.word	0x20000418
 8000f68:	2000041c 	.word	0x2000041c
 8000f6c:	20000004 	.word	0x20000004
 8000f70:	20000414 	.word	0x20000414
 8000f74:	20000374 	.word	0x20000374
 8000f78:	48001000 	.word	0x48001000

08000f7c <box_stop>:

//--- box_stop ----------------------------
void box_stop(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	_Running = FALSE;
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <box_stop+0x20>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
	enc_stop();
 8000f86:	f000 fd37 	bl	80019f8 <enc_stop>
	HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f90:	4803      	ldr	r0, [pc, #12]	@ (8000fa0 <box_stop+0x24>)
 8000f92:	f002 fa2f 	bl	80033f4 <HAL_GPIO_WritePin>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000374 	.word	0x20000374
 8000fa0:	48001000 	.word	0x48001000

08000fa4 <box_idle>:

//--- box_idle ----------------------------------------
void box_idle(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	_handle_feragMsg();
 8000fa8:	f000 f8e8 	bl	800117c <_handle_feragMsg>
	_handle_encoder();
 8000fac:	f000 f982 	bl	80012b4 <_handle_encoder>
//	_check_printer_ready();
//	if (!SIMULATION) _check_print_done();
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <box_tick_10ms>:

//--- box_tick_10ms ------------------
void box_tick_10ms(int ticks)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	_Ticks = ticks;
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <box_tick_10ms+0x40>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
	if (_TicksPgOff && _Ticks>_TicksPgOff)
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff8 <box_tick_10ms+0x44>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00e      	beq.n	8000fe8 <box_tick_10ms+0x34>
 8000fca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <box_tick_10ms+0x40>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <box_tick_10ms+0x44>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	dd08      	ble.n	8000fe8 <box_tick_10ms+0x34>
	{
		HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fdc:	4807      	ldr	r0, [pc, #28]	@ (8000ffc <box_tick_10ms+0x48>)
 8000fde:	f002 fa09 	bl	80033f4 <HAL_GPIO_WritePin>
	//	printf("PrintGo OFF %d\n",  _Ticks);
//		if (SIMULATION) _check_print_done();
		_TicksPgOff=0;
 8000fe2:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <box_tick_10ms+0x44>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
	}
	_check_system();
 8000fe8:	f000 f80a 	bl	8001000 <_check_system>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200003c8 	.word	0x200003c8
 8000ff8:	200003cc 	.word	0x200003cc
 8000ffc:	48001000 	.word	0x48001000

08001000 <_check_system>:

//--- _check_system -----------------
static void _check_system(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	_Status.voltages.voltage24V 			= adc_get_value(0, 30.0);
 8001004:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001008:	2000      	movs	r0, #0
 800100a:	f001 f8df 	bl	80021cc <adc_get_value>
 800100e:	eef0 7a40 	vmov.f32	s15, s0
 8001012:	4b3e      	ldr	r3, [pc, #248]	@ (800110c <_check_system+0x10c>)
 8001014:	ee17 2a90 	vmov	r2, s15
 8001018:	f8c3 201b 	str.w	r2, [r3, #27]
	_Status.voltages.voltage12V 			= adc_get_value(1, 15.0);
 800101c:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001020:	2001      	movs	r0, #1
 8001022:	f001 f8d3 	bl	80021cc <adc_get_value>
 8001026:	eef0 7a40 	vmov.f32	s15, s0
 800102a:	4b38      	ldr	r3, [pc, #224]	@ (800110c <_check_system+0x10c>)
 800102c:	ee17 2a90 	vmov	r2, s15
 8001030:	f8c3 200f 	str.w	r2, [r3, #15]
	_Status.voltages.voltage12VNuc 			= adc_get_value(2, 15.0);
 8001034:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001038:	2002      	movs	r0, #2
 800103a:	f001 f8c7 	bl	80021cc <adc_get_value>
 800103e:	eef0 7a40 	vmov.f32	s15, s0
 8001042:	4b32      	ldr	r3, [pc, #200]	@ (800110c <_check_system+0x10c>)
 8001044:	ee17 2a90 	vmov	r2, s15
 8001048:	f8c3 2013 	str.w	r2, [r3, #19]
	_Status.voltages.voltage12VDisplay 		= adc_get_value(3, 15.0);
 800104c:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001050:	2003      	movs	r0, #3
 8001052:	f001 f8bb 	bl	80021cc <adc_get_value>
 8001056:	eef0 7a40 	vmov.f32	s15, s0
 800105a:	4b2c      	ldr	r3, [pc, #176]	@ (800110c <_check_system+0x10c>)
 800105c:	ee17 2a90 	vmov	r2, s15
 8001060:	f8c3 2017 	str.w	r2, [r3, #23]
	_Status.voltages.voltage5V 				= adc_get_value(4, 6.25);
 8001064:	eeb1 0a09 	vmov.f32	s0, #25	@ 0x40c80000  6.250
 8001068:	2004      	movs	r0, #4
 800106a:	f001 f8af 	bl	80021cc <adc_get_value>
 800106e:	eef0 7a40 	vmov.f32	s15, s0
 8001072:	4b26      	ldr	r3, [pc, #152]	@ (800110c <_check_system+0x10c>)
 8001074:	ee17 2a90 	vmov	r2, s15
 8001078:	f8c3 200b 	str.w	r2, [r3, #11]
	_Status.voltages.voltage3V3 			= adc_get_value(5, 4.125);
 800107c:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8001110 <_check_system+0x110>
 8001080:	2005      	movs	r0, #5
 8001082:	f001 f8a3 	bl	80021cc <adc_get_value>
 8001086:	eef0 7a40 	vmov.f32	s15, s0
 800108a:	4b20      	ldr	r3, [pc, #128]	@ (800110c <_check_system+0x10c>)
 800108c:	ee17 2a90 	vmov	r2, s15
 8001090:	f8c3 2007 	str.w	r2, [r3, #7]
	_Status.voltages.voltagePcbRevision 	= adc_get_value(6, 4.125);
 8001094:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8001110 <_check_system+0x110>
 8001098:	2006      	movs	r0, #6
 800109a:	f001 f897 	bl	80021cc <adc_get_value>
 800109e:	eef0 7a40 	vmov.f32	s15, s0
 80010a2:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <_check_system+0x10c>)
 80010a4:	ee17 2a90 	vmov	r2, s15
 80010a8:	f8c3 201f 	str.w	r2, [r3, #31]
	_Status.pcbRevision 					= adc_get_revision(_Status.voltages.voltagePcbRevision);
 80010ac:	4b17      	ldr	r3, [pc, #92]	@ (800110c <_check_system+0x10c>)
 80010ae:	f8d3 301f 	ldr.w	r3, [r3, #31]
 80010b2:	ee00 3a10 	vmov	s0, r3
 80010b6:	f001 f8d9 	bl	800226c <adc_get_revision>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b13      	ldr	r3, [pc, #76]	@ (800110c <_check_system+0x10c>)
 80010c0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	_Status.boardTemperature 				= adc_get_temp();
 80010c4:	f001 f8a8 	bl	8002218 <adc_get_temp>
 80010c8:	eef0 7a40 	vmov.f32	s15, s0
 80010cc:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <_check_system+0x10c>)
 80010ce:	ee17 2a90 	vmov	r2, s15
 80010d2:	f8c3 2003 	str.w	r2, [r3, #3]

	// Update DIP Switch inputs
	_Status.dipSwitch						= gpio_get_dipswitches();
 80010d6:	f001 f911 	bl	80022fc <gpio_get_dipswitches>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <_check_system+0x10c>)
 80010e0:	709a      	strb	r2, [r3, #2]

	// Update encoder generator parameters
	enc_get_status(&_Status.enc);
 80010e2:	480c      	ldr	r0, [pc, #48]	@ (8001114 <_check_system+0x114>)
 80010e4:	f000 fafe 	bl	80016e4 <enc_get_status>

	// Update Power Status
	_Status.nucPower 		= HAL_GPIO_ReadPin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin);
 80010e8:	2140      	movs	r1, #64	@ 0x40
 80010ea:	480b      	ldr	r0, [pc, #44]	@ (8001118 <_check_system+0x118>)
 80010ec:	f002 f96a 	bl	80033c4 <HAL_GPIO_ReadPin>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b05      	ldr	r3, [pc, #20]	@ (800110c <_check_system+0x10c>)
 80010f6:	701a      	strb	r2, [r3, #0]
	_Status.displayPower 	= HAL_GPIO_ReadPin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin);
 80010f8:	2180      	movs	r1, #128	@ 0x80
 80010fa:	4807      	ldr	r0, [pc, #28]	@ (8001118 <_check_system+0x118>)
 80010fc:	f002 f962 	bl	80033c4 <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b01      	ldr	r3, [pc, #4]	@ (800110c <_check_system+0x10c>)
 8001106:	705a      	strb	r2, [r3, #1]
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000378 	.word	0x20000378
 8001110:	40840000 	.word	0x40840000
 8001114:	2000039c 	.word	0x2000039c
 8001118:	48001400 	.word	0x48001400

0800111c <box_handle_ferag_char>:

//--- box_handle_ferag_char -----------------------------
void box_handle_ferag_char(char data)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	if (data & 0x80)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	da18      	bge.n	8001160 <box_handle_ferag_char+0x44>
	{
		_FeragMsg.data[1]=data;
 800112e:	4a10      	ldr	r2, [pc, #64]	@ (8001170 <box_handle_ferag_char+0x54>)
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	7053      	strb	r3, [r2, #1]
		_Status.paceId = _FeragMsg.paceId;
 8001134:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <box_handle_ferag_char+0x54>)
 8001136:	785b      	ldrb	r3, [r3, #1]
 8001138:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800113c:	b2db      	uxtb	r3, r3
 800113e:	461a      	mov	r2, r3
 8001140:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <box_handle_ferag_char+0x58>)
 8001142:	641a      	str	r2, [r3, #64]	@ 0x40
	//	printf("FERAG in 0x%02x 0x%02x, type=%d, info=%d, paceId=0x%02x\n", _FeragMsg.data[0], _FeragMsg.data[1], _FeragMsg.type, _FeragMsg.info, _FeragMsg.paceId);

		_Status.feragMsgInCnt++;
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <box_handle_ferag_char+0x58>)
 8001146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001148:	3301      	adds	r3, #1
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <box_handle_ferag_char+0x58>)
 800114c:	6393      	str	r3, [r2, #56]	@ 0x38
		_FeragMsgIn++;
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <box_handle_ferag_char+0x5c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	4a08      	ldr	r2, [pc, #32]	@ (8001178 <box_handle_ferag_char+0x5c>)
 8001156:	6013      	str	r3, [r2, #0]
		ferag_send_char(0x80);
 8001158:	2080      	movs	r0, #128	@ 0x80
 800115a:	f001 f817 	bl	800218c <ferag_send_char>
	}
	else
	{
		_FeragMsg.data[0]=data;
	}
}
 800115e:	e002      	b.n	8001166 <box_handle_ferag_char+0x4a>
		_FeragMsg.data[0]=data;
 8001160:	4a03      	ldr	r2, [pc, #12]	@ (8001170 <box_handle_ferag_char+0x54>)
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	7013      	strb	r3, [r2, #0]
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200003d0 	.word	0x200003d0
 8001174:	20000378 	.word	0x20000378
 8001178:	200003d4 	.word	0x200003d4

0800117c <_handle_feragMsg>:

//--- _handle_feragMsg ---------------------
static void _handle_feragMsg(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
	if (_FeragMsgOut!=_FeragMsgIn)
 8001182:	4b3f      	ldr	r3, [pc, #252]	@ (8001280 <_handle_feragMsg+0x104>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4b3f      	ldr	r3, [pc, #252]	@ (8001284 <_handle_feragMsg+0x108>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d073      	beq.n	8001276 <_handle_feragMsg+0xfa>
	{
		int idx;
		switch (_FeragMsg.type)
 800118e:	4b3e      	ldr	r3, [pc, #248]	@ (8001288 <_handle_feragMsg+0x10c>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b01      	cmp	r3, #1
 800119a:	d002      	beq.n	80011a2 <_handle_feragMsg+0x26>
 800119c:	2b02      	cmp	r3, #2
 800119e:	d052      	beq.n	8001246 <_handle_feragMsg+0xca>
 80011a0:	e055      	b.n	800124e <_handle_feragMsg+0xd2>
		{
		case 1:	idx=(_TrackInIdx+1)% TRACKING_CNT;
 80011a2:	4b3a      	ldr	r3, [pc, #232]	@ (800128c <_handle_feragMsg+0x110>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	425a      	negs	r2, r3
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	f002 0207 	and.w	r2, r2, #7
 80011b2:	bf58      	it	pl
 80011b4:	4253      	negpl	r3, r2
 80011b6:	607b      	str	r3, [r7, #4]
				if (idx==_TrackOutIdx)
 80011b8:	4b35      	ldr	r3, [pc, #212]	@ (8001290 <_handle_feragMsg+0x114>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d103      	bne.n	80011ca <_handle_feragMsg+0x4e>
					printf("ERROR: Tracking overflow\n");
 80011c2:	4834      	ldr	r0, [pc, #208]	@ (8001294 <_handle_feragMsg+0x118>)
 80011c4:	f00e fa26 	bl	800f614 <puts>
					_TrackInIdx=idx;
					if (_FeragMsg.info&1) printf("ProductDetect %d: PaceId=%d, \n", _Status.dtCnt, _FeragMsg.paceId);
					else printf("ProductDetect %d: PaceId=%d (EMPTY)\n", _Status.dtCnt, _FeragMsg.paceId);
					_Status.dtCnt++;
				}
				break;
 80011c8:	e04b      	b.n	8001262 <_handle_feragMsg+0xe6>
					memcpy(&_Tracking[idx].prod, &_FeragMsg,  sizeof(_Tracking[idx].prod));
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4a30      	ldr	r2, [pc, #192]	@ (8001298 <_handle_feragMsg+0x11c>)
 80011d6:	4413      	add	r3, r2
 80011d8:	3304      	adds	r3, #4
 80011da:	4a2b      	ldr	r2, [pc, #172]	@ (8001288 <_handle_feragMsg+0x10c>)
 80011dc:	8812      	ldrh	r2, [r2, #0]
 80011de:	801a      	strh	r2, [r3, #0]
					_Tracking[idx].delay = _PrintGoDelay;
 80011e0:	4b2e      	ldr	r3, [pc, #184]	@ (800129c <_handle_feragMsg+0x120>)
 80011e2:	6819      	ldr	r1, [r3, #0]
 80011e4:	482c      	ldr	r0, [pc, #176]	@ (8001298 <_handle_feragMsg+0x11c>)
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4403      	add	r3, r0
 80011f2:	6019      	str	r1, [r3, #0]
					_TrackInIdx=idx;
 80011f4:	4a25      	ldr	r2, [pc, #148]	@ (800128c <_handle_feragMsg+0x110>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
					if (_FeragMsg.info&1) printf("ProductDetect %d: PaceId=%d, \n", _Status.dtCnt, _FeragMsg.paceId);
 80011fa:	4b23      	ldr	r3, [pc, #140]	@ (8001288 <_handle_feragMsg+0x10c>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00b      	beq.n	8001224 <_handle_feragMsg+0xa8>
 800120c:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <_handle_feragMsg+0x124>)
 800120e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001210:	4b1d      	ldr	r3, [pc, #116]	@ (8001288 <_handle_feragMsg+0x10c>)
 8001212:	785b      	ldrb	r3, [r3, #1]
 8001214:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001218:	b2db      	uxtb	r3, r3
 800121a:	461a      	mov	r2, r3
 800121c:	4821      	ldr	r0, [pc, #132]	@ (80012a4 <_handle_feragMsg+0x128>)
 800121e:	f00e f991 	bl	800f544 <iprintf>
 8001222:	e00a      	b.n	800123a <_handle_feragMsg+0xbe>
					else printf("ProductDetect %d: PaceId=%d (EMPTY)\n", _Status.dtCnt, _FeragMsg.paceId);
 8001224:	4b1e      	ldr	r3, [pc, #120]	@ (80012a0 <_handle_feragMsg+0x124>)
 8001226:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001228:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <_handle_feragMsg+0x10c>)
 800122a:	785b      	ldrb	r3, [r3, #1]
 800122c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001230:	b2db      	uxtb	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	481c      	ldr	r0, [pc, #112]	@ (80012a8 <_handle_feragMsg+0x12c>)
 8001236:	f00e f985 	bl	800f544 <iprintf>
					_Status.dtCnt++;
 800123a:	4b19      	ldr	r3, [pc, #100]	@ (80012a0 <_handle_feragMsg+0x124>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123e:	3301      	adds	r3, #1
 8001240:	4a17      	ldr	r2, [pc, #92]	@ (80012a0 <_handle_feragMsg+0x124>)
 8001242:	6453      	str	r3, [r2, #68]	@ 0x44
				break;
 8001244:	e00d      	b.n	8001262 <_handle_feragMsg+0xe6>

		case 2:		printf("Alive\n"); break;
 8001246:	4819      	ldr	r0, [pc, #100]	@ (80012ac <_handle_feragMsg+0x130>)
 8001248:	f00e f9e4 	bl	800f614 <puts>
 800124c:	e009      	b.n	8001262 <_handle_feragMsg+0xe6>
		default: 	printf("Unknown Message Type=%d\n", _FeragMsg.type); break;
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <_handle_feragMsg+0x10c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001256:	b2db      	uxtb	r3, r3
 8001258:	4619      	mov	r1, r3
 800125a:	4815      	ldr	r0, [pc, #84]	@ (80012b0 <_handle_feragMsg+0x134>)
 800125c:	f00e f972 	bl	800f544 <iprintf>
 8001260:	bf00      	nop
		}
		_Status.feragMsgOutCnt++;
 8001262:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <_handle_feragMsg+0x124>)
 8001264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001266:	3301      	adds	r3, #1
 8001268:	4a0d      	ldr	r2, [pc, #52]	@ (80012a0 <_handle_feragMsg+0x124>)
 800126a:	63d3      	str	r3, [r2, #60]	@ 0x3c
		_FeragMsgOut++;
 800126c:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <_handle_feragMsg+0x104>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	4a03      	ldr	r2, [pc, #12]	@ (8001280 <_handle_feragMsg+0x104>)
 8001274:	6013      	str	r3, [r2, #0]
	}
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200003d8 	.word	0x200003d8
 8001284:	200003d4 	.word	0x200003d4
 8001288:	200003d0 	.word	0x200003d0
 800128c:	2000040c 	.word	0x2000040c
 8001290:	20000410 	.word	0x20000410
 8001294:	08013608 	.word	0x08013608
 8001298:	200003dc 	.word	0x200003dc
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000378 	.word	0x20000378
 80012a4:	08013624 	.word	0x08013624
 80012a8:	08013644 	.word	0x08013644
 80012ac:	0801366c 	.word	0x0801366c
 80012b0:	08013674 	.word	0x08013674

080012b4 <_handle_encoder>:

//--- _handle_encoder -------------------------------------
static void _handle_encoder(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
	if (_EncoderPos!=_Status.enc.encOutPos)
 80012ba:	4b36      	ldr	r3, [pc, #216]	@ (8001394 <_handle_encoder+0xe0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a36      	ldr	r2, [pc, #216]	@ (8001398 <_handle_encoder+0xe4>)
 80012c0:	6812      	ldr	r2, [r2, #0]
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d062      	beq.n	800138c <_handle_encoder+0xd8>
	{
		_EncoderPos++;
 80012c6:	4b34      	ldr	r3, [pc, #208]	@ (8001398 <_handle_encoder+0xe4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	4a32      	ldr	r2, [pc, #200]	@ (8001398 <_handle_encoder+0xe4>)
 80012ce:	6013      	str	r3, [r2, #0]
	//	if (_EncoderPos%1000==0)
	//		printf("Enc=%d: DELAY=%d, %d, %d ,%d, %d, %d, %d, %d\n", _EncoderPos, _Tracking[0].delay, _Tracking[1].delay, _Tracking[2].delay, _Tracking[3].delay, _Tracking[4].delay, _Tracking[5].delay, _Tracking[6].delay, _Tracking[7].delay);
		for (int i=0; i<TRACKING_CNT; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	e048      	b.n	8001368 <_handle_encoder+0xb4>
		{
			if (_Tracking[i].delay>0 && (--_Tracking[i].delay)==0)
 80012d6:	4931      	ldr	r1, [pc, #196]	@ (800139c <_handle_encoder+0xe8>)
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	440b      	add	r3, r1
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	dd3b      	ble.n	8001362 <_handle_encoder+0xae>
 80012ea:	492c      	ldr	r1, [pc, #176]	@ (800139c <_handle_encoder+0xe8>)
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	440b      	add	r3, r1
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	1e59      	subs	r1, r3, #1
 80012fc:	4827      	ldr	r0, [pc, #156]	@ (800139c <_handle_encoder+0xe8>)
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4403      	add	r3, r0
 800130a:	6019      	str	r1, [r3, #0]
 800130c:	4923      	ldr	r1, [pc, #140]	@ (800139c <_handle_encoder+0xe8>)
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	440b      	add	r3, r1
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d120      	bne.n	8001362 <_handle_encoder+0xae>
			{
				_TrackOutIdx=i;
 8001320:	4a1f      	ldr	r2, [pc, #124]	@ (80013a0 <_handle_encoder+0xec>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
				printf("PrintGo PaceId=%d, ok=%d\n", _Tracking[i].prod.paceId, _Tracking[i].prod.info);
 8001326:	491d      	ldr	r1, [pc, #116]	@ (800139c <_handle_encoder+0xe8>)
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	440b      	add	r3, r1
 8001334:	795b      	ldrb	r3, [r3, #5]
 8001336:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800133a:	b2db      	uxtb	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	4917      	ldr	r1, [pc, #92]	@ (800139c <_handle_encoder+0xe8>)
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	440b      	add	r3, r1
 800134c:	791b      	ldrb	r3, [r3, #4]
 800134e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001352:	b2db      	uxtb	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	4601      	mov	r1, r0
 8001358:	4812      	ldr	r0, [pc, #72]	@ (80013a4 <_handle_encoder+0xf0>)
 800135a:	f00e f8f3 	bl	800f544 <iprintf>
				box_printGo();
 800135e:	f000 f861 	bl	8001424 <box_printGo>
		for (int i=0; i<TRACKING_CNT; i++)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3301      	adds	r3, #1
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b07      	cmp	r3, #7
 800136c:	ddb3      	ble.n	80012d6 <_handle_encoder+0x22>
			}
		}
		if (_PrintDoneDelay>0)
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <_handle_encoder+0xf4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	dd0a      	ble.n	800138c <_handle_encoder+0xd8>
		{
			if ((--_PrintDoneDelay)==0)
 8001376:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <_handle_encoder+0xf4>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3b01      	subs	r3, #1
 800137c:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <_handle_encoder+0xf4>)
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <_handle_encoder+0xf4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <_handle_encoder+0xd8>
				_send_print_done();
 8001388:	f000 f810 	bl	80013ac <_send_print_done>
		}
	}
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000378 	.word	0x20000378
 8001398:	20000418 	.word	0x20000418
 800139c:	200003dc 	.word	0x200003dc
 80013a0:	20000410 	.word	0x20000410
 80013a4:	08013690 	.word	0x08013690
 80013a8:	2000041c 	.word	0x2000041c

080013ac <_send_print_done>:
	_PrinterReadyIn = ready;
}

//--- _send_print_done ----------------------------------------
static void _send_print_done(void)
{
 80013ac:	b5b0      	push	{r4, r5, r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af02      	add	r7, sp, #8
	printf("PrintDone %d: PaceId[%d]=%d, ok=%d\n", _Status.pdCnt, _TrackOutIdx, _Tracking[_TrackOutIdx].prod.paceId, _Tracking[_TrackOutIdx].prod.info);
 80013b2:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <_send_print_done+0x64>)
 80013b4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80013b6:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <_send_print_done+0x68>)
 80013b8:	6818      	ldr	r0, [r3, #0]
 80013ba:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <_send_print_done+0x68>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4c16      	ldr	r4, [pc, #88]	@ (8001418 <_send_print_done+0x6c>)
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4423      	add	r3, r4
 80013ca:	795b      	ldrb	r3, [r3, #5]
 80013cc:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461d      	mov	r5, r3
 80013d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <_send_print_done+0x68>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4c0f      	ldr	r4, [pc, #60]	@ (8001418 <_send_print_done+0x6c>)
 80013da:	4613      	mov	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4413      	add	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4423      	add	r3, r4
 80013e4:	791b      	ldrb	r3, [r3, #4]
 80013e6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	462b      	mov	r3, r5
 80013f0:	4602      	mov	r2, r0
 80013f2:	480a      	ldr	r0, [pc, #40]	@ (800141c <_send_print_done+0x70>)
 80013f4:	f00e f8a6 	bl	800f544 <iprintf>
	_Status.pdCnt++;
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <_send_print_done+0x64>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fc:	3301      	adds	r3, #1
 80013fe:	4a04      	ldr	r2, [pc, #16]	@ (8001410 <_send_print_done+0x64>)
 8001400:	64d3      	str	r3, [r2, #76]	@ 0x4c
	_PaceId = -1;
 8001402:	4b07      	ldr	r3, [pc, #28]	@ (8001420 <_send_print_done+0x74>)
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	601a      	str	r2, [r3, #0]
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	bdb0      	pop	{r4, r5, r7, pc}
 8001410:	20000378 	.word	0x20000378
 8001414:	20000410 	.word	0x20000410
 8001418:	200003dc 	.word	0x200003dc
 800141c:	080136cc 	.word	0x080136cc
 8001420:	20000414 	.word	0x20000414

08001424 <box_printGo>:

//--- box_printGo ----------------------
void box_printGo(void)
{
 8001424:	b598      	push	{r3, r4, r7, lr}
 8001426:	af00      	add	r7, sp, #0
//	printf("PrintGo ON %d\n",  _Ticks);
	_Status.paceId = _Tracking[_TrackOutIdx].prod.paceId;
 8001428:	4b33      	ldr	r3, [pc, #204]	@ (80014f8 <box_printGo+0xd4>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4933      	ldr	r1, [pc, #204]	@ (80014fc <box_printGo+0xd8>)
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	440b      	add	r3, r1
 8001438:	795b      	ldrb	r3, [r3, #5]
 800143a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800143e:	b2db      	uxtb	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	4b2f      	ldr	r3, [pc, #188]	@ (8001500 <box_printGo+0xdc>)
 8001444:	641a      	str	r2, [r3, #64]	@ 0x40
	printf("PrintGo %d: PaceId[%d]=%d\n", _Status.pgCnt, _TrackOutIdx, _Tracking[_TrackOutIdx].prod.paceId);
 8001446:	4b2e      	ldr	r3, [pc, #184]	@ (8001500 <box_printGo+0xdc>)
 8001448:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800144a:	4b2b      	ldr	r3, [pc, #172]	@ (80014f8 <box_printGo+0xd4>)
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <box_printGo+0xd4>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4c2a      	ldr	r4, [pc, #168]	@ (80014fc <box_printGo+0xd8>)
 8001454:	4613      	mov	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4423      	add	r3, r4
 800145e:	795b      	ldrb	r3, [r3, #5]
 8001460:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001464:	b2db      	uxtb	r3, r3
 8001466:	4602      	mov	r2, r0
 8001468:	4826      	ldr	r0, [pc, #152]	@ (8001504 <box_printGo+0xe0>)
 800146a:	f00e f86b 	bl	800f544 <iprintf>
	_Status.pgCnt++;
 800146e:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <box_printGo+0xdc>)
 8001470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001472:	3301      	adds	r3, #1
 8001474:	4a22      	ldr	r2, [pc, #136]	@ (8001500 <box_printGo+0xdc>)
 8001476:	6493      	str	r3, [r2, #72]	@ 0x48
	_PaceId = _Tracking[_TrackOutIdx].prod.paceId;
 8001478:	4b1f      	ldr	r3, [pc, #124]	@ (80014f8 <box_printGo+0xd4>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	491f      	ldr	r1, [pc, #124]	@ (80014fc <box_printGo+0xd8>)
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	440b      	add	r3, r1
 8001488:	795b      	ldrb	r3, [r3, #5]
 800148a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800148e:	b2db      	uxtb	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	4b1d      	ldr	r3, [pc, #116]	@ (8001508 <box_printGo+0xe4>)
 8001494:	601a      	str	r2, [r3, #0]
	if (enc_fixSpeed() || _Tracking[_TrackOutIdx].prod.info&0x01)
 8001496:	f000 f9a1 	bl	80017dc <enc_fixSpeed>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10f      	bne.n	80014c0 <box_printGo+0x9c>
 80014a0:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <box_printGo+0xd4>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4915      	ldr	r1, [pc, #84]	@ (80014fc <box_printGo+0xd8>)
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	440b      	add	r3, r1
 80014b0:	791b      	ldrb	r3, [r3, #4]
 80014b2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <box_printGo+0xa8>
	{
		HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014c6:	4811      	ldr	r0, [pc, #68]	@ (800150c <box_printGo+0xe8>)
 80014c8:	f001 ff94 	bl	80033f4 <HAL_GPIO_WritePin>
	}
	_TicksPgOff = _Ticks+2;
 80014cc:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <box_printGo+0xec>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3302      	adds	r3, #2
 80014d2:	4a10      	ldr	r2, [pc, #64]	@ (8001514 <box_printGo+0xf0>)
 80014d4:	6013      	str	r3, [r2, #0]
	if (_PrintDoneDelay) printf("ERROR: PringGo while still printing _PrintDoneDelay=%d\n",_PrintDoneDelay);
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <box_printGo+0xf4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d005      	beq.n	80014ea <box_printGo+0xc6>
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <box_printGo+0xf4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4619      	mov	r1, r3
 80014e4:	480d      	ldr	r0, [pc, #52]	@ (800151c <box_printGo+0xf8>)
 80014e6:	f00e f82d 	bl	800f544 <iprintf>
	_PrintDoneDelay = 2000;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <box_printGo+0xf4>)
 80014ec:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80014f0:	601a      	str	r2, [r3, #0]
}
 80014f2:	bf00      	nop
 80014f4:	bd98      	pop	{r3, r4, r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000410 	.word	0x20000410
 80014fc:	200003dc 	.word	0x200003dc
 8001500:	20000378 	.word	0x20000378
 8001504:	080136f0 	.word	0x080136f0
 8001508:	20000414 	.word	0x20000414
 800150c:	48001000 	.word	0x48001000
 8001510:	200003c8 	.word	0x200003c8
 8001514:	200003cc 	.word	0x200003cc
 8001518:	2000041c 	.word	0x2000041c
 800151c:	0801370c 	.word	0x0801370c

08001520 <box_send_status>:

//--- box_send_status ----------------------------------------
void box_send_status(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001526:	af00      	add	r7, sp, #0
	printf("encOut Pos:     %d\n",    (int)_Status.enc.encOutPos);
	printf("PrintGo Cnt:    %d\n",    (int)_Status.pgCnt);
	printf("\n");
	 */
	char msg[512];
	_Status.test++;
 8001528:	4b0d      	ldr	r3, [pc, #52]	@ (8001560 <box_send_status+0x40>)
 800152a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800152c:	3301      	adds	r3, #1
 800152e:	4a0c      	ldr	r2, [pc, #48]	@ (8001560 <box_send_status+0x40>)
 8001530:	6353      	str	r3, [r2, #52]	@ 0x34
	printf("STATUS %s\n", bin2hex(msg, &_Status, sizeof(_Status)));
 8001532:	463b      	mov	r3, r7
 8001534:	2250      	movs	r2, #80	@ 0x50
 8001536:	490a      	ldr	r1, [pc, #40]	@ (8001560 <box_send_status+0x40>)
 8001538:	4618      	mov	r0, r3
 800153a:	f000 fa97 	bl	8001a6c <bin2hex>
 800153e:	4603      	mov	r3, r0
 8001540:	4619      	mov	r1, r3
 8001542:	4808      	ldr	r0, [pc, #32]	@ (8001564 <box_send_status+0x44>)
 8001544:	f00d fffe 	bl	800f544 <iprintf>
	fflush(stdout);
 8001548:	4b07      	ldr	r3, [pc, #28]	@ (8001568 <box_send_status+0x48>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	4618      	mov	r0, r3
 8001550:	f00d ff22 	bl	800f398 <fflush>
}
 8001554:	bf00      	nop
 8001556:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000378 	.word	0x20000378
 8001564:	08013744 	.word	0x08013744
 8001568:	2000019c 	.word	0x2000019c

0800156c <enc_init>:

static void _init_pwm(int32_t speed);

//--- enc_init ----------------------------------
void enc_init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	_Timer_clock_frequency = HAL_RCC_GetPCLK1Freq(); // Adjust based on your clock tree settings
 8001570:	f005 fc06 	bl	8006d80 <HAL_RCC_GetPCLK1Freq>
 8001574:	4603      	mov	r3, r0
 8001576:	4a03      	ldr	r2, [pc, #12]	@ (8001584 <enc_init+0x18>)
 8001578:	6013      	str	r3, [r2, #0]
	_Prescaler=1;
 800157a:	4b03      	ldr	r3, [pc, #12]	@ (8001588 <enc_init+0x1c>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000420 	.word	0x20000420
 8001588:	20000424 	.word	0x20000424

0800158c <enc_in_irq>:

//--- enc_irq ------------------------
void enc_in_irq(TIM_HandleTypeDef *htim)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	int time=HAL_GetTick();
 8001594:	f001 fc08 	bl	8002da8 <HAL_GetTick>
 8001598:	4603      	mov	r3, r0
 800159a:	617b      	str	r3, [r7, #20]
	int pos = _EncStatus.encInPos;
 800159c:	4b23      	ldr	r3, [pc, #140]	@ (800162c <enc_in_irq+0xa0>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	613b      	str	r3, [r7, #16]
	_EncStatus.encInPos = enc_get_pos();
 80015a2:	f000 fdb1 	bl	8002108 <enc_get_pos>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b20      	ldr	r3, [pc, #128]	@ (800162c <enc_in_irq+0xa0>)
 80015ac:	605a      	str	r2, [r3, #4]
	int dist=_EncStatus.encInPos-pos;
 80015ae:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <enc_in_irq+0xa0>)
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	60fb      	str	r3, [r7, #12]
	int t=time-_EncInTime;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001630 <enc_in_irq+0xa4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	60bb      	str	r3, [r7, #8]
	if (t==0) _EncStatus.encInSpeed=0;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d103      	bne.n	80015d0 <enc_in_irq+0x44>
 80015c8:	4b18      	ldr	r3, [pc, #96]	@ (800162c <enc_in_irq+0xa0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	e009      	b.n	80015e4 <enc_in_irq+0x58>
	else _EncStatus.encInSpeed = (dist*1000)/t;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015d6:	fb03 f202 	mul.w	r2, r3, r2
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80015e0:	4a12      	ldr	r2, [pc, #72]	@ (800162c <enc_in_irq+0xa0>)
 80015e2:	6013      	str	r3, [r2, #0]

	_EncInTime=time;
 80015e4:	4a12      	ldr	r2, [pc, #72]	@ (8001630 <enc_in_irq+0xa4>)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	6013      	str	r3, [r2, #0]

	//--- set output speed ------
	enc_set_speed((int)(_EncStatus.encInSpeed*_EncOut_incPM/_EncIn_incPM));
 80015ea:	4b10      	ldr	r3, [pc, #64]	@ (800162c <enc_in_irq+0xa0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <enc_in_irq+0xa8>)
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001600:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <enc_in_irq+0xac>)
 8001602:	ed93 7a00 	vldr	s14, [r3]
 8001606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800160a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800160e:	ee17 0a90 	vmov	r0, s15
 8001612:	f000 f8b5 	bl	8001780 <enc_set_speed>

	if (!_Running)
 8001616:	4b09      	ldr	r3, [pc, #36]	@ (800163c <enc_in_irq+0xb0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <enc_in_irq+0x96>
		enc_start();
 800161e:	f000 f9c5 	bl	80019ac <enc_start>

//	printf("TRACE: Encoder In: pos=%d, speed=%d, time=%d\n", (int)_EncStatus.encInPos, (int)_EncStatus.encInSpeed, t);
}
 8001622:	bf00      	nop
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000428 	.word	0x20000428
 8001630:	20000440 	.word	0x20000440
 8001634:	2000000c 	.word	0x2000000c
 8001638:	20000008 	.word	0x20000008
 800163c:	2000043c 	.word	0x2000043c

08001640 <enc_tick_10ms>:

//--- enc_tick_10ms ---------------------------
void enc_tick_10ms(int ticks)
{
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	if (ticks-_EncOutTime>1000)
 8001648:	4b22      	ldr	r3, [pc, #136]	@ (80016d4 <enc_tick_10ms+0x94>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001654:	dd39      	ble.n	80016ca <enc_tick_10ms+0x8a>
	{
		float t=(float)(ticks-_EncOutTime);
 8001656:	4b1f      	ldr	r3, [pc, #124]	@ (80016d4 <enc_tick_10ms+0x94>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	ee07 3a90 	vmov	s15, r3
 8001662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001666:	edc7 7a03 	vstr	s15, [r7, #12]
		_EncStatus.encOutSpeed = (int32_t) (1000.0*_EncOutSpeedCnt/t/2);
 800166a:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <enc_tick_10ms+0x98>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff58 	bl	8000524 <__aeabi_i2d>
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <enc_tick_10ms+0x9c>)
 800167a:	f7fe ffbd 	bl	80005f8 <__aeabi_dmul>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4614      	mov	r4, r2
 8001684:	461d      	mov	r5, r3
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f7fe ff5e 	bl	8000548 <__aeabi_f2d>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4620      	mov	r0, r4
 8001692:	4629      	mov	r1, r5
 8001694:	f7ff f8da 	bl	800084c <__aeabi_ddiv>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016a8:	f7ff f8d0 	bl	800084c <__aeabi_ddiv>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff fa50 	bl	8000b58 <__aeabi_d2iz>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4a09      	ldr	r2, [pc, #36]	@ (80016e0 <enc_tick_10ms+0xa0>)
 80016bc:	6093      	str	r3, [r2, #8]
		_EncOutTime=ticks;
 80016be:	4a05      	ldr	r2, [pc, #20]	@ (80016d4 <enc_tick_10ms+0x94>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6013      	str	r3, [r2, #0]
		_EncOutSpeedCnt=0;
 80016c4:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <enc_tick_10ms+0x98>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
	}
}
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bdb0      	pop	{r4, r5, r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000044c 	.word	0x2000044c
 80016d8:	20000450 	.word	0x20000450
 80016dc:	408f4000 	.word	0x408f4000
 80016e0:	20000428 	.word	0x20000428

080016e4 <enc_get_status>:

//--- enc_get_status -------------------------------
void enc_get_status(SEZFB_EncStatus *pstatus)
{
 80016e4:	b4b0      	push	{r4, r5, r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	memcpy(pstatus, &_EncStatus, sizeof(_EncStatus));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a06      	ldr	r2, [pc, #24]	@ (8001708 <enc_get_status+0x24>)
 80016f0:	461c      	mov	r4, r3
 80016f2:	4615      	mov	r5, r2
 80016f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f6:	6020      	str	r0, [r4, #0]
 80016f8:	6061      	str	r1, [r4, #4]
 80016fa:	60a2      	str	r2, [r4, #8]
 80016fc:	60e3      	str	r3, [r4, #12]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bcb0      	pop	{r4, r5, r7}
 8001706:	4770      	bx	lr
 8001708:	20000428 	.word	0x20000428

0800170c <enc_command>:

//--- enc_command ----------------------------------
void enc_command(const char *args)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
    int cnt=0;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]

    // Parse the command arguments for action type
    if (strstr(args, "start")) 		enc_start();
 8001718:	4914      	ldr	r1, [pc, #80]	@ (800176c <enc_command+0x60>)
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f00e f8c0 	bl	800f8a0 <strstr>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d002      	beq.n	800172c <enc_command+0x20>
 8001726:	f000 f941 	bl	80019ac <enc_start>
    else if ((cnt=sscanf(args, "speed %d", &_FixedSpeed))) enc_set_speed(_FixedSpeed);
    else
    {
        printf("Unknown command. Use 'encoder start', 'encoder stop', or 'encoder speed ...'\n");
    }
}
 800172a:	e01b      	b.n	8001764 <enc_command+0x58>
    else if (strstr(args, "stop"))	enc_stop();
 800172c:	4910      	ldr	r1, [pc, #64]	@ (8001770 <enc_command+0x64>)
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f00e f8b6 	bl	800f8a0 <strstr>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <enc_command+0x34>
 800173a:	f000 f95d 	bl	80019f8 <enc_stop>
}
 800173e:	e011      	b.n	8001764 <enc_command+0x58>
    else if ((cnt=sscanf(args, "speed %d", &_FixedSpeed))) enc_set_speed(_FixedSpeed);
 8001740:	4a0c      	ldr	r2, [pc, #48]	@ (8001774 <enc_command+0x68>)
 8001742:	490d      	ldr	r1, [pc, #52]	@ (8001778 <enc_command+0x6c>)
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f00d ff8d 	bl	800f664 <siscanf>
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <enc_command+0x52>
 8001752:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <enc_command+0x68>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f000 f812 	bl	8001780 <enc_set_speed>
}
 800175c:	e002      	b.n	8001764 <enc_command+0x58>
        printf("Unknown command. Use 'encoder start', 'encoder stop', or 'encoder speed ...'\n");
 800175e:	4807      	ldr	r0, [pc, #28]	@ (800177c <enc_command+0x70>)
 8001760:	f00d ff58 	bl	800f614 <puts>
}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	08013750 	.word	0x08013750
 8001770:	08013758 	.word	0x08013758
 8001774:	20000454 	.word	0x20000454
 8001778:	08013760 	.word	0x08013760
 800177c:	0801376c 	.word	0x0801376c

08001780 <enc_set_speed>:

//--- enc_set_speed ---------------------------
void enc_set_speed(int32_t speed)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	if (_FixedSpeed) speed=_FixedSpeed;
 8001788:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <enc_set_speed+0x48>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <enc_set_speed+0x16>
 8001790:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <enc_set_speed+0x48>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	607b      	str	r3, [r7, #4]
	if (!_Init) _init_pwm(speed);
 8001796:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <enc_set_speed+0x4c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d103      	bne.n	80017a6 <enc_set_speed+0x26>
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f828 	bl	80017f4 <_init_pwm>
	else if (speed!=_SpeedOutSet)
	{
		_SpeedOutChange = speed;
		printf("Encoder Speedchange=%d\n", speed);
	}
}
 80017a4:	e00b      	b.n	80017be <enc_set_speed+0x3e>
	else if (speed!=_SpeedOutSet)
 80017a6:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <enc_set_speed+0x50>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d006      	beq.n	80017be <enc_set_speed+0x3e>
		_SpeedOutChange = speed;
 80017b0:	4a08      	ldr	r2, [pc, #32]	@ (80017d4 <enc_set_speed+0x54>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
		printf("Encoder Speedchange=%d\n", speed);
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4807      	ldr	r0, [pc, #28]	@ (80017d8 <enc_set_speed+0x58>)
 80017ba:	f00d fec3 	bl	800f544 <iprintf>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000454 	.word	0x20000454
 80017cc:	20000438 	.word	0x20000438
 80017d0:	20000444 	.word	0x20000444
 80017d4:	20000448 	.word	0x20000448
 80017d8:	080137bc 	.word	0x080137bc

080017dc <enc_fixSpeed>:

//--- enc_fixSpeed ----------------------------
int  enc_fixSpeed(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
	return _FixedSpeed;
 80017e0:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <enc_fixSpeed+0x14>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000454 	.word	0x20000454

080017f4 <_init_pwm>:

//--- _init_pwm ------------------------------
static void _init_pwm(int32_t speed)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08c      	sub	sp, #48	@ 0x30
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	if (_Prescaler * speed == 0) return;
 80017fc:	4b46      	ldr	r3, [pc, #280]	@ (8001918 <_init_pwm+0x124>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8081 	beq.w	800190e <_init_pwm+0x11a>

	int reverse;
	if (speed>0)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	dd02      	ble.n	8001818 <_init_pwm+0x24>
	{
		reverse=0;
 8001812:	2300      	movs	r3, #0
 8001814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001816:	e004      	b.n	8001822 <_init_pwm+0x2e>
	}
	else
	{
		reverse=1;
 8001818:	2301      	movs	r3, #1
 800181a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		speed=-speed;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	425b      	negs	r3, r3
 8001820:	607b      	str	r3, [r7, #4]
	}

	uint32_t period = (_Timer_clock_frequency / (_Prescaler * speed)) - 1;
 8001822:	4b3e      	ldr	r3, [pc, #248]	@ (800191c <_init_pwm+0x128>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4b3c      	ldr	r3, [pc, #240]	@ (8001918 <_init_pwm+0x124>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	fb01 f303 	mul.w	r3, r1, r3
 8001830:	fbb2 f3f3 	udiv	r3, r2, r3
 8001834:	3b01      	subs	r3, #1
 8001836:	62bb      	str	r3, [r7, #40]	@ 0x28

	// Update Timer configuration
	htim2.Instance 				 = TIM2;
 8001838:	4b39      	ldr	r3, [pc, #228]	@ (8001920 <_init_pwm+0x12c>)
 800183a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800183e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler 		 = _Prescaler - 1; // Prescaler is 0-based, for prescaler = 1, this will be 0
 8001840:	4b35      	ldr	r3, [pc, #212]	@ (8001918 <_init_pwm+0x124>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	3b01      	subs	r3, #1
 8001846:	4a36      	ldr	r2, [pc, #216]	@ (8001920 <_init_pwm+0x12c>)
 8001848:	6053      	str	r3, [r2, #4]
	htim2.Init.CounterMode 		 = TIM_COUNTERMODE_UP;
 800184a:	4b35      	ldr	r3, [pc, #212]	@ (8001920 <_init_pwm+0x12c>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period 			 = period;
 8001850:	4a33      	ldr	r2, [pc, #204]	@ (8001920 <_init_pwm+0x12c>)
 8001852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001854:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision 	 = TIM_CLOCKDIVISION_DIV1;
 8001856:	4b32      	ldr	r3, [pc, #200]	@ (8001920 <_init_pwm+0x12c>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0;
 800185c:	4b30      	ldr	r3, [pc, #192]	@ (8001920 <_init_pwm+0x12c>)
 800185e:	2200      	movs	r2, #0
 8001860:	615a      	str	r2, [r3, #20]
	HAL_TIM_PWM_Init(&htim2);
 8001862:	482f      	ldr	r0, [pc, #188]	@ (8001920 <_init_pwm+0x12c>)
 8001864:	f005 fd5c 	bl	8007320 <HAL_TIM_PWM_Init>

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
 8001878:	615a      	str	r2, [r3, #20]
 800187a:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode 		= TIM_OCMODE_TOGGLE;
 800187c:	2330      	movs	r3, #48	@ 0x30
 800187e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCIdleState 	= TIM_OUTPUTSTATE_ENABLE;
 8001880:	2301      	movs	r3, #1
 8001882:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity 	= TIM_OCPOLARITY_HIGH;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

	// Apply direction
	if (reverse)
 8001888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800188a:	2b00      	cmp	r3, #0
 800188c:	d017      	beq.n	80018be <_init_pwm+0xca>
	{ // Reverse
		sConfigOC.Pulse = (period * 3) / 4; // CH1 at 25%
 800188e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	089b      	lsrs	r3, r3, #2
 8001898:	613b      	str	r3, [r7, #16]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	2200      	movs	r2, #0
 80018a0:	4619      	mov	r1, r3
 80018a2:	481f      	ldr	r0, [pc, #124]	@ (8001920 <_init_pwm+0x12c>)
 80018a4:	f006 fa22 	bl	8007cec <HAL_TIM_PWM_ConfigChannel>
		sConfigOC.Pulse = (period * 1) / 4; // CH2 at 75%, ie half cycle later
 80018a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018aa:	089b      	lsrs	r3, r3, #2
 80018ac:	613b      	str	r3, [r7, #16]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	2204      	movs	r2, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	481a      	ldr	r0, [pc, #104]	@ (8001920 <_init_pwm+0x12c>)
 80018b8:	f006 fa18 	bl	8007cec <HAL_TIM_PWM_ConfigChannel>
 80018bc:	e016      	b.n	80018ec <_init_pwm+0xf8>
	}
	else
	{ // Forward
		sConfigOC.Pulse = (period * 1) / 4; // CH1 at 25%
 80018be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	613b      	str	r3, [r7, #16]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	2200      	movs	r2, #0
 80018ca:	4619      	mov	r1, r3
 80018cc:	4814      	ldr	r0, [pc, #80]	@ (8001920 <_init_pwm+0x12c>)
 80018ce:	f006 fa0d 	bl	8007cec <HAL_TIM_PWM_ConfigChannel>
		sConfigOC.Pulse = (period * 3) / 4; // CH2 at 75%, ie half cycle later
 80018d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	089b      	lsrs	r3, r3, #2
 80018dc:	613b      	str	r3, [r7, #16]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 80018de:	f107 030c 	add.w	r3, r7, #12
 80018e2:	2204      	movs	r2, #4
 80018e4:	4619      	mov	r1, r3
 80018e6:	480e      	ldr	r0, [pc, #56]	@ (8001920 <_init_pwm+0x12c>)
 80018e8:	f006 fa00 	bl	8007cec <HAL_TIM_PWM_ConfigChannel>
	}

	if(HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1)!=HAL_OK)
 80018ec:	2100      	movs	r1, #0
 80018ee:	480c      	ldr	r0, [pc, #48]	@ (8001920 <_init_pwm+0x12c>)
 80018f0:	f005 fea8 	bl	8007644 <HAL_TIM_PWM_Start_IT>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <_init_pwm+0x10a>
	{
	   Error_Handler();
 80018fa:	f000 fe17 	bl	800252c <Error_Handler>
	}
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80018fe:	2104      	movs	r1, #4
 8001900:	4807      	ldr	r0, [pc, #28]	@ (8001920 <_init_pwm+0x12c>)
 8001902:	f005 fd5d 	bl	80073c0 <HAL_TIM_PWM_Start>
	_Init = TRUE;
 8001906:	4b07      	ldr	r3, [pc, #28]	@ (8001924 <_init_pwm+0x130>)
 8001908:	2201      	movs	r2, #1
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	e000      	b.n	8001910 <_init_pwm+0x11c>
	if (_Prescaler * speed == 0) return;
 800190e:	bf00      	nop
}
 8001910:	3730      	adds	r7, #48	@ 0x30
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000424 	.word	0x20000424
 800191c:	20000420 	.word	0x20000420
 8001920:	200004ac 	.word	0x200004ac
 8001924:	20000438 	.word	0x20000438

08001928 <HAL_TIM_PWM_PulseFinishedCallback>:

//--- HAL_TIM_PWM_PulseFinishedCallback -------------------------------
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if(htim -> Instance == TIM2)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001938:	d128      	bne.n	800198c <HAL_TIM_PWM_PulseFinishedCallback+0x64>
  {
	  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7f1b      	ldrb	r3, [r3, #28]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d124      	bne.n	800198c <HAL_TIM_PWM_PulseFinishedCallback+0x64>
	  {
		  _EncStatus.encOutPos++;
 8001942:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	3301      	adds	r3, #1
 8001948:	4a12      	ldr	r2, [pc, #72]	@ (8001994 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 800194a:	60d3      	str	r3, [r2, #12]
		  _EncOutSpeedCnt++;
 800194c:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	4a11      	ldr	r2, [pc, #68]	@ (8001998 <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 8001954:	6013      	str	r3, [r2, #0]
		  if (_SpeedOutChange)// && !(_EncOutSpeedCnt&1)) // only the even counts to be sure we at at the end of a complete sequence
 8001956:	4b11      	ldr	r3, [pc, #68]	@ (800199c <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d016      	beq.n	800198c <HAL_TIM_PWM_PulseFinishedCallback+0x64>
		  {
			  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800195e:	2100      	movs	r1, #0
 8001960:	480f      	ldr	r0, [pc, #60]	@ (80019a0 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8001962:	f005 fdf7 	bl	8007554 <HAL_TIM_PWM_Stop>
			  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001966:	2104      	movs	r1, #4
 8001968:	480d      	ldr	r0, [pc, #52]	@ (80019a0 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 800196a:	f005 fdf3 	bl	8007554 <HAL_TIM_PWM_Stop>
			  _Init=FALSE;
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
			  _init_pwm(_SpeedOutChange);
 8001974:	4b09      	ldr	r3, [pc, #36]	@ (800199c <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff3b 	bl	80017f4 <_init_pwm>
			  _SpeedOutSet = _SpeedOutChange;
 800197e:	4b07      	ldr	r3, [pc, #28]	@ (800199c <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a09      	ldr	r2, [pc, #36]	@ (80019a8 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8001984:	6013      	str	r3, [r2, #0]
			  _SpeedOutChange = 0;
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
		  }
	  }
  }
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000428 	.word	0x20000428
 8001998:	20000450 	.word	0x20000450
 800199c:	20000448 	.word	0x20000448
 80019a0:	200004ac 	.word	0x200004ac
 80019a4:	20000438 	.word	0x20000438
 80019a8:	20000444 	.word	0x20000444

080019ac <enc_start>:

//--- enc_start ---------------------------
void enc_start(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	if (_FixedSpeed) printf("WARN: Encoder speed fixed to %d Hz\n", _FixedSpeed);
 80019b0:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <enc_start+0x38>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <enc_start+0x18>
 80019b8:	4b0a      	ldr	r3, [pc, #40]	@ (80019e4 <enc_start+0x38>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	480a      	ldr	r0, [pc, #40]	@ (80019e8 <enc_start+0x3c>)
 80019c0:	f00d fdc0 	bl	800f544 <iprintf>

    // Apply the last configured settings and start PWM
	_EncStatus.encOutPos=0;
 80019c4:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <enc_start+0x40>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80019ca:	2100      	movs	r1, #0
 80019cc:	4808      	ldr	r0, [pc, #32]	@ (80019f0 <enc_start+0x44>)
 80019ce:	f005 fcf7 	bl	80073c0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80019d2:	2104      	movs	r1, #4
 80019d4:	4806      	ldr	r0, [pc, #24]	@ (80019f0 <enc_start+0x44>)
 80019d6:	f005 fcf3 	bl	80073c0 <HAL_TIM_PWM_Start>
    _Running=TRUE;
 80019da:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <enc_start+0x48>)
 80019dc:	2201      	movs	r2, #1
 80019de:	601a      	str	r2, [r3, #0]
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000454 	.word	0x20000454
 80019e8:	080137d4 	.word	0x080137d4
 80019ec:	20000428 	.word	0x20000428
 80019f0:	200004ac 	.word	0x200004ac
 80019f4:	2000043c 	.word	0x2000043c

080019f8 <enc_stop>:

//--- enc_stop ---------------------------------
void enc_stop(void) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
    // Stop the PWM and ensure both outputs are low
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80019fc:	2100      	movs	r1, #0
 80019fe:	4806      	ldr	r0, [pc, #24]	@ (8001a18 <enc_stop+0x20>)
 8001a00:	f005 fda8 	bl	8007554 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001a04:	2104      	movs	r1, #4
 8001a06:	4804      	ldr	r0, [pc, #16]	@ (8001a18 <enc_stop+0x20>)
 8001a08:	f005 fda4 	bl	8007554 <HAL_TIM_PWM_Stop>
    _Running=FALSE;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	@ (8001a1c <enc_stop+0x24>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200004ac 	.word	0x200004ac
 8001a1c:	2000043c 	.word	0x2000043c

08001a20 <strstart>:
#include <stdlib.h>
#include "ge_common.h"

//--- strstart ---------------------------------------
char *strstart(const char *str, const char *start)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
	int len=strlen(start);
 8001a2a:	6838      	ldr	r0, [r7, #0]
 8001a2c:	f7fe fc20 	bl	8000270 <strlen>
 8001a30:	4603      	mov	r3, r0
 8001a32:	60fb      	str	r3, [r7, #12]
	if (!strncmp(str, start, len))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	461a      	mov	r2, r3
 8001a38:	6839      	ldr	r1, [r7, #0]
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f00d ff1e 	bl	800f87c <strncmp>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10d      	bne.n	8001a62 <strstart+0x42>
	{
		while (str[len]==' ') len++;
 8001a46:	e002      	b.n	8001a4e <strstart+0x2e>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b20      	cmp	r3, #32
 8001a58:	d0f6      	beq.n	8001a48 <strstart+0x28>
		return (char*)&str[len];
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	e000      	b.n	8001a64 <strstart+0x44>
	}
	return 0;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <bin2hex>:

//--- bin2hex ------------------------------
char *bin2hex(char *str, void *data, int len)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
	UINT8 *src=(UINT8*)data;
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	61fb      	str	r3, [r7, #28]
	char *dst = str;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	61bb      	str	r3, [r7, #24]
	dst+= sprintf(dst, "%03d ", len);
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	4913      	ldr	r1, [pc, #76]	@ (8001ad0 <bin2hex+0x64>)
 8001a84:	69b8      	ldr	r0, [r7, #24]
 8001a86:	f00d fdcd 	bl	800f624 <siprintf>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4413      	add	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
	for(int i=0; i<len; i++, src++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	e011      	b.n	8001abe <bin2hex+0x52>
	{
		dst+=sprintf(dst, "%02x ", *src);
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	490c      	ldr	r1, [pc, #48]	@ (8001ad4 <bin2hex+0x68>)
 8001aa2:	69b8      	ldr	r0, [r7, #24]
 8001aa4:	f00d fdbe 	bl	800f624 <siprintf>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	4413      	add	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
	for(int i=0; i<len; i++, src++)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	3301      	adds	r3, #1
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	dbe9      	blt.n	8001a9a <bin2hex+0x2e>
	}
	return str;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3720      	adds	r7, #32
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	080137f8 	.word	0x080137f8
 8001ad4:	08013800 	.word	0x08013800

08001ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ade:	f001 f909 	bl	8002cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ae2:	f000 f85f 	bl	8001ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ae6:	f000 fa75 	bl	8001fd4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001aea:	f000 fa43 	bl	8001f74 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8001aee:	f00c f805 	bl	800dafc <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8001af2:	f000 f95f 	bl	8001db4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001af6:	f000 f8b9 	bl	8001c6c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001afa:	f000 f8f7 	bl	8001cec <MX_TIM2_Init>
  MX_TIM5_Init();
 8001afe:	f000 f9b3 	bl	8001e68 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001b02:	f000 fa05 	bl	8001f10 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001b06:	213c      	movs	r1, #60	@ 0x3c
 8001b08:	481f      	ldr	r0, [pc, #124]	@ (8001b88 <main+0xb0>)
 8001b0a:	f005 ff59 	bl	80079c0 <HAL_TIM_Encoder_Start>

  // Kick off asynchronous UART RCV
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&RxDataFERAG, 1);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	491e      	ldr	r1, [pc, #120]	@ (8001b8c <main+0xb4>)
 8001b12:	481f      	ldr	r0, [pc, #124]	@ (8001b90 <main+0xb8>)
 8001b14:	f006 ff02 	bl	800891c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&RxDataNUC, 1);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	491e      	ldr	r1, [pc, #120]	@ (8001b94 <main+0xbc>)
 8001b1c:	481e      	ldr	r0, [pc, #120]	@ (8001b98 <main+0xc0>)
 8001b1e:	f006 fefd 	bl	800891c <HAL_UART_Receive_IT>

  term_init();
 8001b22:	f001 f819 	bl	8002b58 <term_init>
  enc_init();
 8001b26:	f7ff fd21 	bl	800156c <enc_init>
  box_init();
 8001b2a:	f7ff f991 	bl	8000e50 <box_init>

  power_nuc(TRUE);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f000 fc38 	bl	80023a4 <power_nuc>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	AD55936_init(&hi2c1, 0x10 << 1);
 8001b34:	2120      	movs	r1, #32
 8001b36:	4819      	ldr	r0, [pc, #100]	@ (8001b9c <main+0xc4>)
 8001b38:	f7ff f8dc 	bl	8000cf4 <AD55936_init>
	int _ticks=0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	607b      	str	r3, [r7, #4]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		int ticks= HAL_GetTick();
 8001b40:	f001 f932 	bl	8002da8 <HAL_GetTick>
 8001b44:	4603      	mov	r3, r0
 8001b46:	603b      	str	r3, [r7, #0]

		while (ticks-_ticks>9)
 8001b48:	e013      	b.n	8001b72 <main+0x9a>
		{
			_tick_10ms(ticks);
 8001b4a:	6838      	ldr	r0, [r7, #0]
 8001b4c:	f000 fb30 	bl	80021b0 <_tick_10ms>
			_ticks=ticks;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	607b      	str	r3, [r7, #4]
			if (_powerDisplay && _ticks>_powerDisplay)
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <main+0xc8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00a      	beq.n	8001b72 <main+0x9a>
 8001b5c:	4b10      	ldr	r3, [pc, #64]	@ (8001ba0 <main+0xc8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	dd05      	ble.n	8001b72 <main+0x9a>
			{
				_powerDisplay=0;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <main+0xc8>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
				power_display(TRUE);
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f000 fc31 	bl	80023d4 <power_display>
		while (ticks-_ticks>9)
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b09      	cmp	r3, #9
 8001b7a:	dce6      	bgt.n	8001b4a <main+0x72>
			}
		}
		box_idle();
 8001b7c:	f7ff fa12 	bl	8000fa4 <box_idle>
		term_idle();
 8001b80:	f001 f816 	bl	8002bb0 <term_idle>
	{
 8001b84:	e7dc      	b.n	8001b40 <main+0x68>
 8001b86:	bf00      	nop
 8001b88:	20000544 	.word	0x20000544
 8001b8c:	200006a1 	.word	0x200006a1
 8001b90:	20000590 	.word	0x20000590
 8001b94:	200006a0 	.word	0x200006a0
 8001b98:	20000618 	.word	0x20000618
 8001b9c:	20000458 	.word	0x20000458
 8001ba0:	20000010 	.word	0x20000010

08001ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b09a      	sub	sp, #104	@ 0x68
 8001ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001baa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bae:	2228      	movs	r2, #40	@ 0x28
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f00d fe5a 	bl	800f86c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc8:	463b      	mov	r3, r7
 8001bca:	222c      	movs	r2, #44	@ 0x2c
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f00d fe4c 	bl	800f86c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bdc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bde:	2300      	movs	r3, #0
 8001be0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be2:	2301      	movs	r3, #1
 8001be4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001be6:	2310      	movs	r3, #16
 8001be8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bea:	2302      	movs	r3, #2
 8001bec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bf2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001bf4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001bf8:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 fe8c 	bl	800591c <HAL_RCC_OscConfig>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001c0a:	f000 fc8f 	bl	800252c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c0e:	230f      	movs	r3, #15
 8001c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c12:	2302      	movs	r3, #2
 8001c14:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c16:	2300      	movs	r3, #0
 8001c18:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c28:	2102      	movs	r1, #2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f004 feb4 	bl	8006998 <HAL_RCC_ClockConfig>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001c36:	f000 fc79 	bl	800252c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <SystemClock_Config+0xc4>)
 8001c3c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c4e:	463b      	mov	r3, r7
 8001c50:	4618      	mov	r0, r3
 8001c52:	f005 f8d9 	bl	8006e08 <HAL_RCCEx_PeriphCLKConfig>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001c5c:	f000 fc66 	bl	800252c <Error_Handler>
  }
}
 8001c60:	bf00      	nop
 8001c62:	3768      	adds	r7, #104	@ 0x68
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	00020025 	.word	0x00020025

08001c6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce0 <MX_I2C1_Init+0x74>)
 8001c72:	4a1c      	ldr	r2, [pc, #112]	@ (8001ce4 <MX_I2C1_Init+0x78>)
 8001c74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001c76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce0 <MX_I2C1_Init+0x74>)
 8001c78:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce8 <MX_I2C1_Init+0x7c>)
 8001c7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ce0 <MX_I2C1_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c82:	4b17      	ldr	r3, [pc, #92]	@ (8001ce0 <MX_I2C1_Init+0x74>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c88:	4b15      	ldr	r3, [pc, #84]	@ (8001ce0 <MX_I2C1_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ce0 <MX_I2C1_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c94:	4b12      	ldr	r3, [pc, #72]	@ (8001ce0 <MX_I2C1_Init+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <MX_I2C1_Init+0x74>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce0 <MX_I2C1_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ca6:	480e      	ldr	r0, [pc, #56]	@ (8001ce0 <MX_I2C1_Init+0x74>)
 8001ca8:	f001 fbbc 	bl	8003424 <HAL_I2C_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cb2:	f000 fc3b 	bl	800252c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4809      	ldr	r0, [pc, #36]	@ (8001ce0 <MX_I2C1_Init+0x74>)
 8001cba:	f002 f8bf 	bl	8003e3c <HAL_I2CEx_ConfigAnalogFilter>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001cc4:	f000 fc32 	bl	800252c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4805      	ldr	r0, [pc, #20]	@ (8001ce0 <MX_I2C1_Init+0x74>)
 8001ccc:	f002 f901 	bl	8003ed2 <HAL_I2CEx_ConfigDigitalFilter>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cd6:	f000 fc29 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000458 	.word	0x20000458
 8001ce4:	40005400 	.word	0x40005400
 8001ce8:	2000090e 	.word	0x2000090e

08001cec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	@ 0x28
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
//	PWM for encoder output
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf2:	f107 0320 	add.w	r3, r7, #32
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	611a      	str	r2, [r3, #16]
 8001d0a:	615a      	str	r2, [r3, #20]
 8001d0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d0e:	4b28      	ldr	r3, [pc, #160]	@ (8001db0 <MX_TIM2_Init+0xc4>)
 8001d10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d16:	4b26      	ldr	r3, [pc, #152]	@ (8001db0 <MX_TIM2_Init+0xc4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b24      	ldr	r3, [pc, #144]	@ (8001db0 <MX_TIM2_Init+0xc4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d22:	4b23      	ldr	r3, [pc, #140]	@ (8001db0 <MX_TIM2_Init+0xc4>)
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295
 8001d28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2a:	4b21      	ldr	r3, [pc, #132]	@ (8001db0 <MX_TIM2_Init+0xc4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d30:	4b1f      	ldr	r3, [pc, #124]	@ (8001db0 <MX_TIM2_Init+0xc4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d36:	481e      	ldr	r0, [pc, #120]	@ (8001db0 <MX_TIM2_Init+0xc4>)
 8001d38:	f005 faf2 	bl	8007320 <HAL_TIM_PWM_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d42:	f000 fbf3 	bl	800252c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d4e:	f107 0320 	add.w	r3, r7, #32
 8001d52:	4619      	mov	r1, r3
 8001d54:	4816      	ldr	r0, [pc, #88]	@ (8001db0 <MX_TIM2_Init+0xc4>)
 8001d56:	f006 fc23 	bl	80085a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001d60:	f000 fbe4 	bl	800252c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d64:	2360      	movs	r3, #96	@ 0x60
 8001d66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	2200      	movs	r2, #0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480d      	ldr	r0, [pc, #52]	@ (8001db0 <MX_TIM2_Init+0xc4>)
 8001d7c:	f005 ffb6 	bl	8007cec <HAL_TIM_PWM_ConfigChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001d86:	f000 fbd1 	bl	800252c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4807      	ldr	r0, [pc, #28]	@ (8001db0 <MX_TIM2_Init+0xc4>)
 8001d92:	f005 ffab 	bl	8007cec <HAL_TIM_PWM_ConfigChannel>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001d9c:	f000 fbc6 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001da0:	4803      	ldr	r0, [pc, #12]	@ (8001db0 <MX_TIM2_Init+0xc4>)
 8001da2:	f000 fccb 	bl	800273c <HAL_TIM_MspPostInit>

}
 8001da6:	bf00      	nop
 8001da8:	3728      	adds	r7, #40	@ 0x28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200004ac 	.word	0x200004ac

08001db4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc8:	463b      	mov	r3, r7
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dd0:	4b23      	ldr	r3, [pc, #140]	@ (8001e60 <MX_TIM3_Init+0xac>)
 8001dd2:	4a24      	ldr	r2, [pc, #144]	@ (8001e64 <MX_TIM3_Init+0xb0>)
 8001dd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 8001dd6:	4b22      	ldr	r3, [pc, #136]	@ (8001e60 <MX_TIM3_Init+0xac>)
 8001dd8:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001ddc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001dde:	4b20      	ldr	r3, [pc, #128]	@ (8001e60 <MX_TIM3_Init+0xac>)
 8001de0:	2210      	movs	r2, #16
 8001de2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001de4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e60 <MX_TIM3_Init+0xac>)
 8001de6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001dea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dec:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <MX_TIM3_Init+0xac>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e60 <MX_TIM3_Init+0xac>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001df8:	4819      	ldr	r0, [pc, #100]	@ (8001e60 <MX_TIM3_Init+0xac>)
 8001dfa:	f005 f979 	bl	80070f0 <HAL_TIM_Base_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001e04:	f000 fb92 	bl	800252c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e0e:	f107 0308 	add.w	r3, r7, #8
 8001e12:	4619      	mov	r1, r3
 8001e14:	4812      	ldr	r0, [pc, #72]	@ (8001e60 <MX_TIM3_Init+0xac>)
 8001e16:	f006 f82b 	bl	8007e70 <HAL_TIM_ConfigClockSource>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e20:	f000 fb84 	bl	800252c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e2c:	463b      	mov	r3, r7
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480b      	ldr	r0, [pc, #44]	@ (8001e60 <MX_TIM3_Init+0xac>)
 8001e32:	f006 fbb5 	bl	80085a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e3c:	f000 fb76 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK) {
 8001e40:	4807      	ldr	r0, [pc, #28]	@ (8001e60 <MX_TIM3_Init+0xac>)
 8001e42:	f005 fa05 	bl	8007250 <HAL_TIM_Base_Start_IT>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM3_Init+0x9c>
		Error_Handler();
 8001e4c:	f000 fb6e 	bl	800252c <Error_Handler>
	}
	HAL_TIM_Base_Start(&htim3);
 8001e50:	4803      	ldr	r0, [pc, #12]	@ (8001e60 <MX_TIM3_Init+0xac>)
 8001e52:	f005 f99d 	bl	8007190 <HAL_TIM_Base_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200004f8 	.word	0x200004f8
 8001e64:	40000400 	.word	0x40000400

08001e68 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	@ 0x30
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e6e:	f107 030c 	add.w	r3, r7, #12
 8001e72:	2224      	movs	r2, #36	@ 0x24
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f00d fcf8 	bl	800f86c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e84:	4b20      	ldr	r3, [pc, #128]	@ (8001f08 <MX_TIM5_Init+0xa0>)
 8001e86:	4a21      	ldr	r2, [pc, #132]	@ (8001f0c <MX_TIM5_Init+0xa4>)
 8001e88:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f08 <MX_TIM5_Init+0xa0>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e90:	4b1d      	ldr	r3, [pc, #116]	@ (8001f08 <MX_TIM5_Init+0xa0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001e96:	4b1c      	ldr	r3, [pc, #112]	@ (8001f08 <MX_TIM5_Init+0xa0>)
 8001e98:	f04f 32ff 	mov.w	r2, #4294967295
 8001e9c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f08 <MX_TIM5_Init+0xa0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ea4:	4b18      	ldr	r3, [pc, #96]	@ (8001f08 <MX_TIM5_Init+0xa0>)
 8001ea6:	2280      	movs	r2, #128	@ 0x80
 8001ea8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001eba:	230a      	movs	r3, #10
 8001ebc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001eca:	230a      	movs	r3, #10
 8001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001ece:	f107 030c 	add.w	r3, r7, #12
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	480c      	ldr	r0, [pc, #48]	@ (8001f08 <MX_TIM5_Init+0xa0>)
 8001ed6:	f005 fccd 	bl	8007874 <HAL_TIM_Encoder_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001ee0:	f000 fb24 	bl	800252c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4805      	ldr	r0, [pc, #20]	@ (8001f08 <MX_TIM5_Init+0xa0>)
 8001ef2:	f006 fb55 	bl	80085a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001efc:	f000 fb16 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f00:	bf00      	nop
 8001f02:	3730      	adds	r7, #48	@ 0x30
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000544 	.word	0x20000544
 8001f0c:	40000c00 	.word	0x40000c00

08001f10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f14:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <MX_USART1_UART_Init+0x5c>)
 8001f16:	4a16      	ldr	r2, [pc, #88]	@ (8001f70 <MX_USART1_UART_Init+0x60>)
 8001f18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001f1a:	4b14      	ldr	r3, [pc, #80]	@ (8001f6c <MX_USART1_UART_Init+0x5c>)
 8001f1c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001f20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001f22:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <MX_USART1_UART_Init+0x5c>)
 8001f24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f28:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <MX_USART1_UART_Init+0x5c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001f30:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <MX_USART1_UART_Init+0x5c>)
 8001f32:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001f36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <MX_USART1_UART_Init+0x5c>)
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <MX_USART1_UART_Init+0x5c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f44:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <MX_USART1_UART_Init+0x5c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <MX_USART1_UART_Init+0x5c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <MX_USART1_UART_Init+0x5c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f56:	4805      	ldr	r0, [pc, #20]	@ (8001f6c <MX_USART1_UART_Init+0x5c>)
 8001f58:	f006 fbaa 	bl	80086b0 <HAL_UART_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001f62:	f000 fae3 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000590 	.word	0x20000590
 8001f70:	40013800 	.word	0x40013800

08001f74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f78:	4b14      	ldr	r3, [pc, #80]	@ (8001fcc <MX_USART3_UART_Init+0x58>)
 8001f7a:	4a15      	ldr	r2, [pc, #84]	@ (8001fd0 <MX_USART3_UART_Init+0x5c>)
 8001f7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f7e:	4b13      	ldr	r3, [pc, #76]	@ (8001fcc <MX_USART3_UART_Init+0x58>)
 8001f80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f86:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <MX_USART3_UART_Init+0x58>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fcc <MX_USART3_UART_Init+0x58>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f92:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <MX_USART3_UART_Init+0x58>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f98:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <MX_USART3_UART_Init+0x58>)
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <MX_USART3_UART_Init+0x58>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <MX_USART3_UART_Init+0x58>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001faa:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <MX_USART3_UART_Init+0x58>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <MX_USART3_UART_Init+0x58>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fb6:	4805      	ldr	r0, [pc, #20]	@ (8001fcc <MX_USART3_UART_Init+0x58>)
 8001fb8:	f006 fb7a 	bl	80086b0 <HAL_UART_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001fc2:	f000 fab3 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000618 	.word	0x20000618
 8001fd0:	40004800 	.word	0x40004800

08001fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	@ 0x28
 8001fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
 8001fe8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fea:	4b3b      	ldr	r3, [pc, #236]	@ (80020d8 <MX_GPIO_Init+0x104>)
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	4a3a      	ldr	r2, [pc, #232]	@ (80020d8 <MX_GPIO_Init+0x104>)
 8001ff0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ff4:	6153      	str	r3, [r2, #20]
 8001ff6:	4b38      	ldr	r3, [pc, #224]	@ (80020d8 <MX_GPIO_Init+0x104>)
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	4b35      	ldr	r3, [pc, #212]	@ (80020d8 <MX_GPIO_Init+0x104>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	4a34      	ldr	r2, [pc, #208]	@ (80020d8 <MX_GPIO_Init+0x104>)
 8002008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800200c:	6153      	str	r3, [r2, #20]
 800200e:	4b32      	ldr	r3, [pc, #200]	@ (80020d8 <MX_GPIO_Init+0x104>)
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800201a:	4b2f      	ldr	r3, [pc, #188]	@ (80020d8 <MX_GPIO_Init+0x104>)
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	4a2e      	ldr	r2, [pc, #184]	@ (80020d8 <MX_GPIO_Init+0x104>)
 8002020:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002024:	6153      	str	r3, [r2, #20]
 8002026:	4b2c      	ldr	r3, [pc, #176]	@ (80020d8 <MX_GPIO_Init+0x104>)
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	4b29      	ldr	r3, [pc, #164]	@ (80020d8 <MX_GPIO_Init+0x104>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	4a28      	ldr	r2, [pc, #160]	@ (80020d8 <MX_GPIO_Init+0x104>)
 8002038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800203c:	6153      	str	r3, [r2, #20]
 800203e:	4b26      	ldr	r3, [pc, #152]	@ (80020d8 <MX_GPIO_Init+0x104>)
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002050:	4822      	ldr	r0, [pc, #136]	@ (80020dc <MX_GPIO_Init+0x108>)
 8002052:	f001 f9cf 	bl	80033f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, NUC_PWR_EN_Pin|DISPLAY_PWR_EN_Pin, GPIO_PIN_RESET);
 8002056:	2200      	movs	r2, #0
 8002058:	21c0      	movs	r1, #192	@ 0xc0
 800205a:	4821      	ldr	r0, [pc, #132]	@ (80020e0 <MX_GPIO_Init+0x10c>)
 800205c:	f001 f9ca 	bl	80033f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIP_5_Pin DIP_4_Pin DIP_3_Pin DIP_2_Pin
                           DIP_1_Pin DIP_0_Pin */
  GPIO_InitStruct.Pin = DIP_5_Pin|DIP_4_Pin|DIP_3_Pin|DIP_2_Pin
 8002060:	f44f 73be 	mov.w	r3, #380	@ 0x17c
 8002064:	617b      	str	r3, [r7, #20]
                          |DIP_1_Pin|DIP_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4619      	mov	r1, r3
 8002074:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002078:	f001 f82a 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PRINT_GO_Pin */
  GPIO_InitStruct.Pin = PRINT_GO_Pin;
 800207c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002082:	2301      	movs	r3, #1
 8002084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PRINT_GO_GPIO_Port, &GPIO_InitStruct);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	4619      	mov	r1, r3
 8002094:	4811      	ldr	r0, [pc, #68]	@ (80020dc <MX_GPIO_Init+0x108>)
 8002096:	f001 f81b 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PRINT_DONE_Pin */
  GPIO_InitStruct.Pin = PRINT_DONE_Pin;
 800209a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800209e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PRINT_DONE_GPIO_Port, &GPIO_InitStruct);
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	4619      	mov	r1, r3
 80020ae:	480b      	ldr	r0, [pc, #44]	@ (80020dc <MX_GPIO_Init+0x108>)
 80020b0:	f001 f80e 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NUC_PWR_EN_Pin DISPLAY_PWR_EN_Pin */
  GPIO_InitStruct.Pin = NUC_PWR_EN_Pin|DISPLAY_PWR_EN_Pin;
 80020b4:	23c0      	movs	r3, #192	@ 0xc0
 80020b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b8:	2301      	movs	r3, #1
 80020ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	4619      	mov	r1, r3
 80020ca:	4805      	ldr	r0, [pc, #20]	@ (80020e0 <MX_GPIO_Init+0x10c>)
 80020cc:	f001 f800 	bl	80030d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020d0:	bf00      	nop
 80020d2:	3728      	adds	r7, #40	@ 0x28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	48001000 	.word	0x48001000
 80020e0:	48001400 	.word	0x48001400

080020e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//--- HAL_TIM_PeriodElapsedCallback -------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	if (htim==&htim3) enc_in_irq(htim);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a05      	ldr	r2, [pc, #20]	@ (8002104 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d102      	bne.n	80020fa <HAL_TIM_PeriodElapsedCallback+0x16>
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff fa49 	bl	800158c <enc_in_irq>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200004f8 	.word	0x200004f8

08002108 <enc_get_pos>:

//--- enc_get_pos -------------------------------------
int32_t	enc_get_pos(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5);
 800210c:	4b03      	ldr	r3, [pc, #12]	@ (800211c <enc_get_pos+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	20000544 	.word	0x20000544

08002120 <HAL_UART_RxCpltCallback>:

// UART RX Interrupt function override
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a11      	ldr	r2, [pc, #68]	@ (8002174 <HAL_UART_RxCpltCallback+0x54>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d10b      	bne.n	800214a <HAL_UART_RxCpltCallback+0x2a>
	{
		box_handle_ferag_char(RxDataFERAG);
 8002132:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <HAL_UART_RxCpltCallback+0x58>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe ffef 	bl	800111c <box_handle_ferag_char>
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&RxDataFERAG, 1);
 800213e:	2201      	movs	r2, #1
 8002140:	490d      	ldr	r1, [pc, #52]	@ (8002178 <HAL_UART_RxCpltCallback+0x58>)
 8002142:	480e      	ldr	r0, [pc, #56]	@ (800217c <HAL_UART_RxCpltCallback+0x5c>)
 8002144:	f006 fbea 	bl	800891c <HAL_UART_Receive_IT>
	else if (huart->Instance == USART3)
	{
		term_handle_char(RxDataNUC);
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&RxDataNUC, 1);
	}
}
 8002148:	e00f      	b.n	800216a <HAL_UART_RxCpltCallback+0x4a>
	else if (huart->Instance == USART3)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a0c      	ldr	r2, [pc, #48]	@ (8002180 <HAL_UART_RxCpltCallback+0x60>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d10a      	bne.n	800216a <HAL_UART_RxCpltCallback+0x4a>
		term_handle_char(RxDataNUC);
 8002154:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <HAL_UART_RxCpltCallback+0x64>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	4618      	mov	r0, r3
 800215c:	f000 fd08 	bl	8002b70 <term_handle_char>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&RxDataNUC, 1);
 8002160:	2201      	movs	r2, #1
 8002162:	4908      	ldr	r1, [pc, #32]	@ (8002184 <HAL_UART_RxCpltCallback+0x64>)
 8002164:	4808      	ldr	r0, [pc, #32]	@ (8002188 <HAL_UART_RxCpltCallback+0x68>)
 8002166:	f006 fbd9 	bl	800891c <HAL_UART_Receive_IT>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40013800 	.word	0x40013800
 8002178:	200006a1 	.word	0x200006a1
 800217c:	20000590 	.word	0x20000590
 8002180:	40004800 	.word	0x40004800
 8002184:	200006a0 	.word	0x200006a0
 8002188:	20000618 	.word	0x20000618

0800218c <ferag_send_char>:

//--- ferag_send_char -----------------------
void ferag_send_char(char data)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 8002196:	1df9      	adds	r1, r7, #7
 8002198:	f04f 33ff 	mov.w	r3, #4294967295
 800219c:	2201      	movs	r2, #1
 800219e:	4803      	ldr	r0, [pc, #12]	@ (80021ac <ferag_send_char+0x20>)
 80021a0:	f006 fad4 	bl	800874c <HAL_UART_Transmit>
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000590 	.word	0x20000590

080021b0 <_tick_10ms>:

//--- _tick_10ms ---------------------
static void _tick_10ms(int ticks)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	box_tick_10ms(ticks);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7fe fefb 	bl	8000fb4 <box_tick_10ms>
	enc_tick_10ms(ticks);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff fa3e 	bl	8001640 <enc_tick_10ms>
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <adc_get_value>:

//--- adc_get_value --------------------------
float adc_get_value(int no, float factor)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	ed87 0a00 	vstr	s0, [r7]
	uint16_t val;
	AD5593R_ReadADC(&hi2c1, 0x10 << 1, no, &val);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	f107 030e 	add.w	r3, r7, #14
 80021e0:	2120      	movs	r1, #32
 80021e2:	480b      	ldr	r0, [pc, #44]	@ (8002210 <adc_get_value+0x44>)
 80021e4:	f7fe fdd1 	bl	8000d8a <AD5593R_ReadADC>
	return ((float)val * factor) / 4095.0;
 80021e8:	89fb      	ldrh	r3, [r7, #14]
 80021ea:	ee07 3a90 	vmov	s15, r3
 80021ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021f2:	edd7 7a00 	vldr	s15, [r7]
 80021f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fa:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002214 <adc_get_value+0x48>
 80021fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002202:	eef0 7a66 	vmov.f32	s15, s13
}
 8002206:	eeb0 0a67 	vmov.f32	s0, s15
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000458 	.word	0x20000458
 8002214:	457ff000 	.word	0x457ff000

08002218 <adc_get_temp>:

//--- adc_get_temp --------------------------------------
float adc_get_temp(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
    const float ADC_25 = 819.0; // ADC value at 25 degrees Celsius
 800221e:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <adc_get_temp+0x48>)
 8002220:	60fb      	str	r3, [r7, #12]
    const float SLOPE = 2.654; // ADC counts per degree Celsius
 8002222:	4b10      	ldr	r3, [pc, #64]	@ (8002264 <adc_get_temp+0x4c>)
 8002224:	60bb      	str	r3, [r7, #8]
	uint16_t val;
	AD5593R_ReadADC(&hi2c1, 0x10 << 1, 8, &val);
 8002226:	1dbb      	adds	r3, r7, #6
 8002228:	2208      	movs	r2, #8
 800222a:	2120      	movs	r1, #32
 800222c:	480e      	ldr	r0, [pc, #56]	@ (8002268 <adc_get_temp+0x50>)
 800222e:	f7fe fdac 	bl	8000d8a <AD5593R_ReadADC>
    return 25.0 + ((float)val - ADC_25) / SLOPE;
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	ee07 3a90 	vmov	s15, r3
 8002238:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800223c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002240:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002244:	ed97 7a02 	vldr	s14, [r7, #8]
 8002248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800224c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002250:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8002254:	eeb0 0a67 	vmov.f32	s0, s15
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	444cc000 	.word	0x444cc000
 8002264:	4029db23 	.word	0x4029db23
 8002268:	20000458 	.word	0x20000458

0800226c <adc_get_revision>:

//--- adc_get_revision ------------------------------------
uint8_t adc_get_revision(float val)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	ed87 0a01 	vstr	s0, [r7, #4]
	const float baseVoltage = 0.075f; // Base voltage (0.1V - 0.025V)
 8002276:	4b1e      	ldr	r3, [pc, #120]	@ (80022f0 <adc_get_revision+0x84>)
 8002278:	617b      	str	r3, [r7, #20]
    const float increment = 0.1f; // Voltage increment per revision
 800227a:	4b1e      	ldr	r3, [pc, #120]	@ (80022f4 <adc_get_revision+0x88>)
 800227c:	613b      	str	r3, [r7, #16]
    const float maxValidVoltage = 26.0f; // Example: max expected voltage, adjust based on your last revision
 800227e:	4b1e      	ldr	r3, [pc, #120]	@ (80022f8 <adc_get_revision+0x8c>)
 8002280:	60fb      	str	r3, [r7, #12]

    if (val < baseVoltage || val > maxValidVoltage) return 0; // Invalid voltage
 8002282:	ed97 7a01 	vldr	s14, [r7, #4]
 8002286:	edd7 7a05 	vldr	s15, [r7, #20]
 800228a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002292:	d408      	bmi.n	80022a6 <adc_get_revision+0x3a>
 8002294:	ed97 7a01 	vldr	s14, [r7, #4]
 8002298:	edd7 7a03 	vldr	s15, [r7, #12]
 800229c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a4:	dd01      	ble.n	80022aa <adc_get_revision+0x3e>
 80022a6:	2300      	movs	r3, #0
 80022a8:	e01d      	b.n	80022e6 <adc_get_revision+0x7a>

    return (uint8_t)floor((val - baseVoltage) / increment) + 1;
 80022aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80022ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80022b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80022ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80022be:	ee16 0a90 	vmov	r0, s13
 80022c2:	f7fe f941 	bl	8000548 <__aeabi_f2d>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	ec43 2b10 	vmov	d0, r2, r3
 80022ce:	f011 f8ff 	bl	80134d0 <floor>
 80022d2:	ec53 2b10 	vmov	r2, r3, d0
 80022d6:	4610      	mov	r0, r2
 80022d8:	4619      	mov	r1, r3
 80022da:	f7fe fc65 	bl	8000ba8 <__aeabi_d2uiz>
 80022de:	4603      	mov	r3, r0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	3301      	adds	r3, #1
 80022e4:	b2db      	uxtb	r3, r3
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	3d99999a 	.word	0x3d99999a
 80022f4:	3dcccccd 	.word	0x3dcccccd
 80022f8:	41d00000 	.word	0x41d00000

080022fc <gpio_get_dipswitches>:

//--- gpio_get_dipswitches -------------------------------
uint8_t gpio_get_dipswitches(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
    uint8_t dipswitches = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	71fb      	strb	r3, [r7, #7]

    if (HAL_GPIO_ReadPin(DIP_0_GPIO_Port, DIP_0_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 0;
 8002306:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800230a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800230e:	f001 f859 	bl	80033c4 <HAL_GPIO_ReadPin>
 8002312:	4603      	mov	r3, r0
 8002314:	2b01      	cmp	r3, #1
 8002316:	d103      	bne.n	8002320 <gpio_get_dipswitches+0x24>
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_1_GPIO_Port, DIP_1_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 1;
 8002320:	2140      	movs	r1, #64	@ 0x40
 8002322:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002326:	f001 f84d 	bl	80033c4 <HAL_GPIO_ReadPin>
 800232a:	4603      	mov	r3, r0
 800232c:	2b01      	cmp	r3, #1
 800232e:	d103      	bne.n	8002338 <gpio_get_dipswitches+0x3c>
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	f043 0302 	orr.w	r3, r3, #2
 8002336:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_2_GPIO_Port, DIP_2_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 2;
 8002338:	2120      	movs	r1, #32
 800233a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800233e:	f001 f841 	bl	80033c4 <HAL_GPIO_ReadPin>
 8002342:	4603      	mov	r3, r0
 8002344:	2b01      	cmp	r3, #1
 8002346:	d103      	bne.n	8002350 <gpio_get_dipswitches+0x54>
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_3_GPIO_Port, DIP_3_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 3;
 8002350:	2110      	movs	r1, #16
 8002352:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002356:	f001 f835 	bl	80033c4 <HAL_GPIO_ReadPin>
 800235a:	4603      	mov	r3, r0
 800235c:	2b01      	cmp	r3, #1
 800235e:	d103      	bne.n	8002368 <gpio_get_dipswitches+0x6c>
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	f043 0308 	orr.w	r3, r3, #8
 8002366:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_4_GPIO_Port, DIP_4_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 4;
 8002368:	2108      	movs	r1, #8
 800236a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800236e:	f001 f829 	bl	80033c4 <HAL_GPIO_ReadPin>
 8002372:	4603      	mov	r3, r0
 8002374:	2b01      	cmp	r3, #1
 8002376:	d103      	bne.n	8002380 <gpio_get_dipswitches+0x84>
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	f043 0310 	orr.w	r3, r3, #16
 800237e:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_5_GPIO_Port, DIP_5_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 5;
 8002380:	2104      	movs	r1, #4
 8002382:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002386:	f001 f81d 	bl	80033c4 <HAL_GPIO_ReadPin>
 800238a:	4603      	mov	r3, r0
 800238c:	2b01      	cmp	r3, #1
 800238e:	d103      	bne.n	8002398 <gpio_get_dipswitches+0x9c>
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	f043 0320 	orr.w	r3, r3, #32
 8002396:	71fb      	strb	r3, [r7, #7]

    return dipswitches;
 8002398:	79fb      	ldrb	r3, [r7, #7]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <power_nuc>:

//--- power_nuc -----------------------------
void    power_nuc(int on)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	if (on) HAL_GPIO_WritePin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin, GPIO_PIN_SET);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <power_nuc+0x1a>
 80023b2:	2201      	movs	r2, #1
 80023b4:	2140      	movs	r1, #64	@ 0x40
 80023b6:	4806      	ldr	r0, [pc, #24]	@ (80023d0 <power_nuc+0x2c>)
 80023b8:	f001 f81c 	bl	80033f4 <HAL_GPIO_WritePin>
	else 	HAL_GPIO_WritePin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin, GPIO_PIN_RESET);
}
 80023bc:	e004      	b.n	80023c8 <power_nuc+0x24>
	else 	HAL_GPIO_WritePin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin, GPIO_PIN_RESET);
 80023be:	2200      	movs	r2, #0
 80023c0:	2140      	movs	r1, #64	@ 0x40
 80023c2:	4803      	ldr	r0, [pc, #12]	@ (80023d0 <power_nuc+0x2c>)
 80023c4:	f001 f816 	bl	80033f4 <HAL_GPIO_WritePin>
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	48001400 	.word	0x48001400

080023d4 <power_display>:

//--- power_display -------------------------
void    power_display(int on)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	if (on) HAL_GPIO_WritePin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin, GPIO_PIN_SET);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <power_display+0x1a>
 80023e2:	2201      	movs	r2, #1
 80023e4:	2180      	movs	r1, #128	@ 0x80
 80023e6:	4806      	ldr	r0, [pc, #24]	@ (8002400 <power_display+0x2c>)
 80023e8:	f001 f804 	bl	80033f4 <HAL_GPIO_WritePin>
	else 	HAL_GPIO_WritePin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin, GPIO_PIN_RESET);
}
 80023ec:	e004      	b.n	80023f8 <power_display+0x24>
	else 	HAL_GPIO_WritePin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin, GPIO_PIN_RESET);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2180      	movs	r1, #128	@ 0x80
 80023f2:	4803      	ldr	r0, [pc, #12]	@ (8002400 <power_display+0x2c>)
 80023f4:	f000 fffe 	bl	80033f4 <HAL_GPIO_WritePin>
}
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	48001400 	.word	0x48001400

08002404 <_nuc_send_next>:

void _nuc_send_next()
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
	if (_NUC_InIdx!=_NUC_StartIdx && !_NUC_Busy)
 800240a:	4b1e      	ldr	r3, [pc, #120]	@ (8002484 <_nuc_send_next+0x80>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b1e      	ldr	r3, [pc, #120]	@ (8002488 <_nuc_send_next+0x84>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d031      	beq.n	800247a <_nuc_send_next+0x76>
 8002416:	4b1d      	ldr	r3, [pc, #116]	@ (800248c <_nuc_send_next+0x88>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d12d      	bne.n	800247a <_nuc_send_next+0x76>
	{
		int time=HAL_GetTick();
 800241e:	f000 fcc3 	bl	8002da8 <HAL_GetTick>
 8002422:	4603      	mov	r3, r0
 8002424:	607b      	str	r3, [r7, #4]
		_NUC_Busy = TRUE;
 8002426:	4b19      	ldr	r3, [pc, #100]	@ (800248c <_nuc_send_next+0x88>)
 8002428:	2201      	movs	r2, #1
 800242a:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, TxDataNuc[_NUC_StartIdx], TxDataLenNuc[_NUC_StartIdx]); // NUC
 800242c:	4b16      	ldr	r3, [pc, #88]	@ (8002488 <_nuc_send_next+0x84>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	025b      	lsls	r3, r3, #9
 8002432:	4a17      	ldr	r2, [pc, #92]	@ (8002490 <_nuc_send_next+0x8c>)
 8002434:	1899      	adds	r1, r3, r2
 8002436:	4b14      	ldr	r3, [pc, #80]	@ (8002488 <_nuc_send_next+0x84>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a16      	ldr	r2, [pc, #88]	@ (8002494 <_nuc_send_next+0x90>)
 800243c:	5cd3      	ldrb	r3, [r2, r3]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	4815      	ldr	r0, [pc, #84]	@ (8002498 <_nuc_send_next+0x94>)
 8002444:	f006 fa0c 	bl	8008860 <HAL_UART_Transmit_IT>
		_NUC_StartIdx = (_NUC_StartIdx+1) % NUC_FIFO_CNT;
 8002448:	4b0f      	ldr	r3, [pc, #60]	@ (8002488 <_nuc_send_next+0x84>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3301      	adds	r3, #1
 800244e:	425a      	negs	r2, r3
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	f002 0203 	and.w	r2, r2, #3
 8002458:	bf58      	it	pl
 800245a:	4253      	negpl	r3, r2
 800245c:	4a0a      	ldr	r2, [pc, #40]	@ (8002488 <_nuc_send_next+0x84>)
 800245e:	6013      	str	r3, [r2, #0]
	    time=HAL_GetTick()-time;
 8002460:	f000 fca2 	bl	8002da8 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	607b      	str	r3, [r7, #4]
	    if (time>1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b01      	cmp	r3, #1
 8002470:	dd03      	ble.n	800247a <_nuc_send_next+0x76>
	    	printf("WARN: UART send time=%d\n", time);
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4809      	ldr	r0, [pc, #36]	@ (800249c <_nuc_send_next+0x98>)
 8002476:	f00d f865 	bl	800f544 <iprintf>
	}
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000ea8 	.word	0x20000ea8
 8002488:	20000eac 	.word	0x20000eac
 800248c:	20000eb0 	.word	0x20000eb0
 8002490:	200006a4 	.word	0x200006a4
 8002494:	20000ea4 	.word	0x20000ea4
 8002498:	20000618 	.word	0x20000618
 800249c:	08013810 	.word	0x08013810

080024a0 <HAL_UART_TxCpltCallback>:

//--- HAL_UART_TxCpltCallback ---------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	_NUC_Busy = FALSE;
 80024a8:	4b04      	ldr	r3, [pc, #16]	@ (80024bc <HAL_UART_TxCpltCallback+0x1c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
	_nuc_send_next();
 80024ae:	f7ff ffa9 	bl	8002404 <_nuc_send_next>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000eb0 	.word	0x20000eb0

080024c0 <_write>:

//--- WRITE_PROTOTYPE ----------------------------------------------------
// Retarget stdout to UART and CDC
WRITE_PROTOTYPE {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
                }
            }
        }
    }
	*/
	int idx = (_NUC_InIdx+1) % NUC_FIFO_CNT;
 80024cc:	4b14      	ldr	r3, [pc, #80]	@ (8002520 <_write+0x60>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	425a      	negs	r2, r3
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	f002 0203 	and.w	r2, r2, #3
 80024dc:	bf58      	it	pl
 80024de:	4253      	negpl	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024e2:	b672      	cpsid	i
}
 80024e4:	bf00      	nop
	__disable_irq();
	TxDataLenNuc[_NUC_InIdx] = len;
 80024e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002520 <_write+0x60>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	b2d1      	uxtb	r1, r2
 80024ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002524 <_write+0x64>)
 80024f0:	54d1      	strb	r1, [r2, r3]
	memcpy(&TxDataNuc[_NUC_InIdx], ptr, len);
 80024f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002520 <_write+0x60>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	025b      	lsls	r3, r3, #9
 80024f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002528 <_write+0x68>)
 80024fa:	4413      	add	r3, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68b9      	ldr	r1, [r7, #8]
 8002500:	4618      	mov	r0, r3
 8002502:	f00d fa5a 	bl	800f9ba <memcpy>
	_NUC_InIdx = idx;
 8002506:	4a06      	ldr	r2, [pc, #24]	@ (8002520 <_write+0x60>)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800250c:	b662      	cpsie	i
}
 800250e:	bf00      	nop
	__enable_irq();

	_nuc_send_next();
 8002510:	f7ff ff78 	bl	8002404 <_nuc_send_next>
  //  HAL_UART_Transmit_IT(&huart1, ptr, len); // debugging
    time=HAL_GetTick()-time;
    if (time>0)
    	printf("WARN: UART send time=%d\n", time);
    	*/
    return len; // Return the number of characters written
 8002514:	687b      	ldr	r3, [r7, #4]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000ea8 	.word	0x20000ea8
 8002524:	20000ea4 	.word	0x20000ea4
 8002528:	200006a4 	.word	0x200006a4

0800252c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002530:	b672      	cpsid	i
}
 8002532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002534:	e7fe      	b.n	8002534 <Error_Handler+0x8>
	...

08002538 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253e:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <HAL_MspInit+0x50>)
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	4a11      	ldr	r2, [pc, #68]	@ (8002588 <HAL_MspInit+0x50>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6193      	str	r3, [r2, #24]
 800254a:	4b0f      	ldr	r3, [pc, #60]	@ (8002588 <HAL_MspInit+0x50>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	4b0c      	ldr	r3, [pc, #48]	@ (8002588 <HAL_MspInit+0x50>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4a0b      	ldr	r2, [pc, #44]	@ (8002588 <HAL_MspInit+0x50>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002560:	61d3      	str	r3, [r2, #28]
 8002562:	4b09      	ldr	r3, [pc, #36]	@ (8002588 <HAL_MspInit+0x50>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	2100      	movs	r1, #0
 8002572:	2005      	movs	r0, #5
 8002574:	f000 fcff 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002578:	2005      	movs	r0, #5
 800257a:	f000 fd18 	bl	8002fae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000

0800258c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	@ 0x28
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a17      	ldr	r2, [pc, #92]	@ (8002608 <HAL_I2C_MspInit+0x7c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d127      	bne.n	80025fe <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ae:	4b17      	ldr	r3, [pc, #92]	@ (800260c <HAL_I2C_MspInit+0x80>)
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	4a16      	ldr	r2, [pc, #88]	@ (800260c <HAL_I2C_MspInit+0x80>)
 80025b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025b8:	6153      	str	r3, [r2, #20]
 80025ba:	4b14      	ldr	r3, [pc, #80]	@ (800260c <HAL_I2C_MspInit+0x80>)
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80025c6:	23c0      	movs	r3, #192	@ 0xc0
 80025c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ca:	2312      	movs	r3, #18
 80025cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025d2:	2303      	movs	r3, #3
 80025d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025d6:	2304      	movs	r3, #4
 80025d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	4619      	mov	r1, r3
 80025e0:	480b      	ldr	r0, [pc, #44]	@ (8002610 <HAL_I2C_MspInit+0x84>)
 80025e2:	f000 fd75 	bl	80030d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025e6:	4b09      	ldr	r3, [pc, #36]	@ (800260c <HAL_I2C_MspInit+0x80>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	4a08      	ldr	r2, [pc, #32]	@ (800260c <HAL_I2C_MspInit+0x80>)
 80025ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025f0:	61d3      	str	r3, [r2, #28]
 80025f2:	4b06      	ldr	r3, [pc, #24]	@ (800260c <HAL_I2C_MspInit+0x80>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025fe:	bf00      	nop
 8002600:	3728      	adds	r7, #40	@ 0x28
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40005400 	.word	0x40005400
 800260c:	40021000 	.word	0x40021000
 8002610:	48000400 	.word	0x48000400

08002614 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002624:	d113      	bne.n	800264e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002626:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <HAL_TIM_PWM_MspInit+0x44>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	4a0b      	ldr	r2, [pc, #44]	@ (8002658 <HAL_TIM_PWM_MspInit+0x44>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	61d3      	str	r3, [r2, #28]
 8002632:	4b09      	ldr	r3, [pc, #36]	@ (8002658 <HAL_TIM_PWM_MspInit+0x44>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800263e:	2200      	movs	r2, #0
 8002640:	2100      	movs	r1, #0
 8002642:	201c      	movs	r0, #28
 8002644:	f000 fc97 	bl	8002f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002648:	201c      	movs	r0, #28
 800264a:	f000 fcb0 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000

0800265c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0d      	ldr	r2, [pc, #52]	@ (80026a0 <HAL_TIM_Base_MspInit+0x44>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d113      	bne.n	8002696 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800266e:	4b0d      	ldr	r3, [pc, #52]	@ (80026a4 <HAL_TIM_Base_MspInit+0x48>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	4a0c      	ldr	r2, [pc, #48]	@ (80026a4 <HAL_TIM_Base_MspInit+0x48>)
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	61d3      	str	r3, [r2, #28]
 800267a:	4b0a      	ldr	r3, [pc, #40]	@ (80026a4 <HAL_TIM_Base_MspInit+0x48>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	2100      	movs	r1, #0
 800268a:	201d      	movs	r0, #29
 800268c:	f000 fc73 	bl	8002f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002690:	201d      	movs	r0, #29
 8002692:	f000 fc8c 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40000400 	.word	0x40000400
 80026a4:	40021000 	.word	0x40021000

080026a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	@ 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002734 <HAL_TIM_Encoder_MspInit+0x8c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d130      	bne.n	800272c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80026ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002738 <HAL_TIM_Encoder_MspInit+0x90>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002738 <HAL_TIM_Encoder_MspInit+0x90>)
 80026d0:	f043 0308 	orr.w	r3, r3, #8
 80026d4:	61d3      	str	r3, [r2, #28]
 80026d6:	4b18      	ldr	r3, [pc, #96]	@ (8002738 <HAL_TIM_Encoder_MspInit+0x90>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e2:	4b15      	ldr	r3, [pc, #84]	@ (8002738 <HAL_TIM_Encoder_MspInit+0x90>)
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	4a14      	ldr	r2, [pc, #80]	@ (8002738 <HAL_TIM_Encoder_MspInit+0x90>)
 80026e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ec:	6153      	str	r3, [r2, #20]
 80026ee:	4b12      	ldr	r3, [pc, #72]	@ (8002738 <HAL_TIM_Encoder_MspInit+0x90>)
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026fa:	2303      	movs	r3, #3
 80026fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800270a:	2302      	movs	r3, #2
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270e:	f107 0314 	add.w	r3, r7, #20
 8002712:	4619      	mov	r1, r3
 8002714:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002718:	f000 fcda 	bl	80030d0 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800271c:	2200      	movs	r2, #0
 800271e:	2100      	movs	r1, #0
 8002720:	2032      	movs	r0, #50	@ 0x32
 8002722:	f000 fc28 	bl	8002f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002726:	2032      	movs	r0, #50	@ 0x32
 8002728:	f000 fc41 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800272c:	bf00      	nop
 800272e:	3728      	adds	r7, #40	@ 0x28
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40000c00 	.word	0x40000c00
 8002738:	40021000 	.word	0x40021000

0800273c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	@ 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 0314 	add.w	r3, r7, #20
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800275c:	d139      	bne.n	80027d2 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	4b1f      	ldr	r3, [pc, #124]	@ (80027dc <HAL_TIM_MspPostInit+0xa0>)
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	4a1e      	ldr	r2, [pc, #120]	@ (80027dc <HAL_TIM_MspPostInit+0xa0>)
 8002764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002768:	6153      	str	r3, [r2, #20]
 800276a:	4b1c      	ldr	r3, [pc, #112]	@ (80027dc <HAL_TIM_MspPostInit+0xa0>)
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002776:	4b19      	ldr	r3, [pc, #100]	@ (80027dc <HAL_TIM_MspPostInit+0xa0>)
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	4a18      	ldr	r2, [pc, #96]	@ (80027dc <HAL_TIM_MspPostInit+0xa0>)
 800277c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002780:	6153      	str	r3, [r2, #20]
 8002782:	4b16      	ldr	r3, [pc, #88]	@ (80027dc <HAL_TIM_MspPostInit+0xa0>)
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_OUT_A_Pin;
 800278e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	2302      	movs	r3, #2
 8002796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279c:	2300      	movs	r3, #0
 800279e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027a0:	2301      	movs	r3, #1
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ENC_OUT_A_GPIO_Port, &GPIO_InitStruct);
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4619      	mov	r1, r3
 80027aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027ae:	f000 fc8f 	bl	80030d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_OUT_B_Pin;
 80027b2:	2308      	movs	r3, #8
 80027b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027be:	2300      	movs	r3, #0
 80027c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027c2:	2301      	movs	r3, #1
 80027c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ENC_OUT_B_GPIO_Port, &GPIO_InitStruct);
 80027c6:	f107 0314 	add.w	r3, r7, #20
 80027ca:	4619      	mov	r1, r3
 80027cc:	4804      	ldr	r0, [pc, #16]	@ (80027e0 <HAL_TIM_MspPostInit+0xa4>)
 80027ce:	f000 fc7f 	bl	80030d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80027d2:	bf00      	nop
 80027d4:	3728      	adds	r7, #40	@ 0x28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000
 80027e0:	48000400 	.word	0x48000400

080027e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08c      	sub	sp, #48	@ 0x30
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 031c 	add.w	r3, r7, #28
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a37      	ldr	r2, [pc, #220]	@ (80028e0 <HAL_UART_MspInit+0xfc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d132      	bne.n	800286c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002806:	4b37      	ldr	r3, [pc, #220]	@ (80028e4 <HAL_UART_MspInit+0x100>)
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	4a36      	ldr	r2, [pc, #216]	@ (80028e4 <HAL_UART_MspInit+0x100>)
 800280c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002810:	6193      	str	r3, [r2, #24]
 8002812:	4b34      	ldr	r3, [pc, #208]	@ (80028e4 <HAL_UART_MspInit+0x100>)
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	4b31      	ldr	r3, [pc, #196]	@ (80028e4 <HAL_UART_MspInit+0x100>)
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	4a30      	ldr	r2, [pc, #192]	@ (80028e4 <HAL_UART_MspInit+0x100>)
 8002824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002828:	6153      	str	r3, [r2, #20]
 800282a:	4b2e      	ldr	r3, [pc, #184]	@ (80028e4 <HAL_UART_MspInit+0x100>)
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS422_COM_TX_Pin|RS422_COM_RX_Pin;
 8002836:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800283a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002844:	2303      	movs	r3, #3
 8002846:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002848:	2307      	movs	r3, #7
 800284a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284c:	f107 031c 	add.w	r3, r7, #28
 8002850:	4619      	mov	r1, r3
 8002852:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002856:	f000 fc3b 	bl	80030d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	2100      	movs	r1, #0
 800285e:	2025      	movs	r0, #37	@ 0x25
 8002860:	f000 fb89 	bl	8002f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002864:	2025      	movs	r0, #37	@ 0x25
 8002866:	f000 fba2 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800286a:	e035      	b.n	80028d8 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1d      	ldr	r2, [pc, #116]	@ (80028e8 <HAL_UART_MspInit+0x104>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d130      	bne.n	80028d8 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002876:	4b1b      	ldr	r3, [pc, #108]	@ (80028e4 <HAL_UART_MspInit+0x100>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	4a1a      	ldr	r2, [pc, #104]	@ (80028e4 <HAL_UART_MspInit+0x100>)
 800287c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002880:	61d3      	str	r3, [r2, #28]
 8002882:	4b18      	ldr	r3, [pc, #96]	@ (80028e4 <HAL_UART_MspInit+0x100>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288e:	4b15      	ldr	r3, [pc, #84]	@ (80028e4 <HAL_UART_MspInit+0x100>)
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	4a14      	ldr	r2, [pc, #80]	@ (80028e4 <HAL_UART_MspInit+0x100>)
 8002894:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002898:	6153      	str	r3, [r2, #20]
 800289a:	4b12      	ldr	r3, [pc, #72]	@ (80028e4 <HAL_UART_MspInit+0x100>)
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_NUC_TX_Pin|UART_NUC_RX_Pin;
 80028a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028b4:	2303      	movs	r3, #3
 80028b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028b8:	2307      	movs	r3, #7
 80028ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028bc:	f107 031c 	add.w	r3, r7, #28
 80028c0:	4619      	mov	r1, r3
 80028c2:	480a      	ldr	r0, [pc, #40]	@ (80028ec <HAL_UART_MspInit+0x108>)
 80028c4:	f000 fc04 	bl	80030d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80028c8:	2200      	movs	r2, #0
 80028ca:	2100      	movs	r1, #0
 80028cc:	2027      	movs	r0, #39	@ 0x27
 80028ce:	f000 fb52 	bl	8002f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028d2:	2027      	movs	r0, #39	@ 0x27
 80028d4:	f000 fb6b 	bl	8002fae <HAL_NVIC_EnableIRQ>
}
 80028d8:	bf00      	nop
 80028da:	3730      	adds	r7, #48	@ 0x30
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40013800 	.word	0x40013800
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40004800 	.word	0x40004800
 80028ec:	48000400 	.word	0x48000400

080028f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80028f4:	e7fe      	b.n	80028f4 <NMI_Handler+0x4>

080028f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028fa:	e7fe      	b.n	80028fa <HardFault_Handler+0x4>

080028fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002900:	e7fe      	b.n	8002900 <MemManage_Handler+0x4>

08002902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002906:	e7fe      	b.n	8002906 <BusFault_Handler+0x4>

08002908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800290c:	e7fe      	b.n	800290c <UsageFault_Handler+0x4>

0800290e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800293c:	f000 fa20 	bl	8002d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}

08002944 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002958:	4802      	ldr	r0, [pc, #8]	@ (8002964 <TIM2_IRQHandler+0x10>)
 800295a:	f005 f8bf 	bl	8007adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200004ac 	.word	0x200004ac

08002968 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800296c:	4802      	ldr	r0, [pc, #8]	@ (8002978 <TIM3_IRQHandler+0x10>)
 800296e:	f005 f8b5 	bl	8007adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	200004f8 	.word	0x200004f8

0800297c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002980:	4802      	ldr	r0, [pc, #8]	@ (800298c <USART1_IRQHandler+0x10>)
 8002982:	f006 f80f 	bl	80089a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000590 	.word	0x20000590

08002990 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002994:	4802      	ldr	r0, [pc, #8]	@ (80029a0 <USART3_IRQHandler+0x10>)
 8002996:	f006 f805 	bl	80089a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000618 	.word	0x20000618

080029a4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80029a8:	4802      	ldr	r0, [pc, #8]	@ (80029b4 <TIM5_IRQHandler+0x10>)
 80029aa:	f005 f897 	bl	8007adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000544 	.word	0x20000544

080029b8 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority global interrupt.
  */
void USB_HP_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80029bc:	4802      	ldr	r0, [pc, #8]	@ (80029c8 <USB_HP_IRQHandler+0x10>)
 80029be:	f001 fbcc 	bl	800415a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20001c08 	.word	0x20001c08

080029cc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority global interrupt.
  */
void USB_LP_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80029d0:	4802      	ldr	r0, [pc, #8]	@ (80029dc <USB_LP_IRQHandler+0x10>)
 80029d2:	f001 fbc2 	bl	800415a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20001c08 	.word	0x20001c08

080029e0 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
	return 1;
 80029e4:	2301      	movs	r3, #1
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <_kill>:

int _kill(int pid, int sig) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80029fa:	f00c ffb1 	bl	800f960 <__errno>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2216      	movs	r2, #22
 8002a02:	601a      	str	r2, [r3, #0]
	return -1;
 8002a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <_exit>:

void _exit(int status) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a18:	f04f 31ff 	mov.w	r1, #4294967295
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff ffe7 	bl	80029f0 <_kill>
	while (1) {
 8002a22:	e7fe      	b.n	8002a22 <_exit+0x12>

08002a24 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	e00a      	b.n	8002a4c <_read+0x28>
		*ptr++ = __io_getchar();
 8002a36:	f3af 8000 	nop.w
 8002a3a:	4601      	mov	r1, r0
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	60ba      	str	r2, [r7, #8]
 8002a42:	b2ca      	uxtb	r2, r1
 8002a44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	dbf0      	blt.n	8002a36 <_read+0x12>
	}

	return len;
 8002a54:	687b      	ldr	r3, [r7, #4]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a86:	605a      	str	r2, [r3, #4]
	return 0;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <_isatty>:

int _isatty(int file) {
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002a9e:	2301      	movs	r3, #1
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002ad0:	4a14      	ldr	r2, [pc, #80]	@ (8002b24 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002ad2:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002adc:	4b13      	ldr	r3, [pc, #76]	@ (8002b2c <_sbrk+0x64>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d102      	bne.n	8002aea <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002ae4:	4b11      	ldr	r3, [pc, #68]	@ (8002b2c <_sbrk+0x64>)
 8002ae6:	4a12      	ldr	r2, [pc, #72]	@ (8002b30 <_sbrk+0x68>)
 8002ae8:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002aea:	4b10      	ldr	r3, [pc, #64]	@ (8002b2c <_sbrk+0x64>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4413      	add	r3, r2
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d207      	bcs.n	8002b08 <_sbrk+0x40>
		errno = ENOMEM;
 8002af8:	f00c ff32 	bl	800f960 <__errno>
 8002afc:	4603      	mov	r3, r0
 8002afe:	220c      	movs	r2, #12
 8002b00:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
 8002b06:	e009      	b.n	8002b1c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002b08:	4b08      	ldr	r3, [pc, #32]	@ (8002b2c <_sbrk+0x64>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002b0e:	4b07      	ldr	r3, [pc, #28]	@ (8002b2c <_sbrk+0x64>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4413      	add	r3, r2
 8002b16:	4a05      	ldr	r2, [pc, #20]	@ (8002b2c <_sbrk+0x64>)
 8002b18:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20008000 	.word	0x20008000
 8002b28:	00000400 	.word	0x00000400
 8002b2c:	20000eb4 	.word	0x20000eb4
 8002b30:	20002260 	.word	0x20002260

08002b34 <SystemInit>:
/**
 * @brief  Setup the microcontroller system
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
	/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002b38:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <SystemInit+0x20>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3e:	4a05      	ldr	r2, [pc, #20]	@ (8002b54 <SystemInit+0x20>)
 8002b40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <term_init>:
static char _Input[128];
static int	_InputLen=0;

//--- terminal_init --------------------------------
void term_init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
	memset(_Input, 0, sizeof(_Input));
 8002b5c:	2280      	movs	r2, #128	@ 0x80
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4802      	ldr	r0, [pc, #8]	@ (8002b6c <term_init+0x14>)
 8002b62:	f00c fe83 	bl	800f86c <memset>
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000eb8 	.word	0x20000eb8

08002b70 <term_handle_char>:
//--- term_handle_char -------------------------
void term_handle_char(char ch)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
	if (_InputLen<sizeof(_Input)) _Input[_InputLen++] = ch;
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <term_handle_char+0x38>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b80:	d808      	bhi.n	8002b94 <term_handle_char+0x24>
 8002b82:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <term_handle_char+0x38>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	4907      	ldr	r1, [pc, #28]	@ (8002ba8 <term_handle_char+0x38>)
 8002b8a:	600a      	str	r2, [r1, #0]
 8002b8c:	4907      	ldr	r1, [pc, #28]	@ (8002bac <term_handle_char+0x3c>)
 8002b8e:	79fa      	ldrb	r2, [r7, #7]
 8002b90:	54ca      	strb	r2, [r1, r3]
	else _InputLen=0;
//	putchar(ch);
}
 8002b92:	e002      	b.n	8002b9a <term_handle_char+0x2a>
	else _InputLen=0;
 8002b94:	4b04      	ldr	r3, [pc, #16]	@ (8002ba8 <term_handle_char+0x38>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20000f38 	.word	0x20000f38
 8002bac:	20000eb8 	.word	0x20000eb8

08002bb0 <term_idle>:

//--- term_idle -------------------------------
void term_idle(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
    if (_InputLen>1 && (_Input[_InputLen-1]=='\r' || _Input[_InputLen-1]=='\n'))
 8002bb6:	4b32      	ldr	r3, [pc, #200]	@ (8002c80 <term_idle+0xd0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	dd5b      	ble.n	8002c76 <term_idle+0xc6>
 8002bbe:	4b30      	ldr	r3, [pc, #192]	@ (8002c80 <term_idle+0xd0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	4a2f      	ldr	r2, [pc, #188]	@ (8002c84 <term_idle+0xd4>)
 8002bc6:	5cd3      	ldrb	r3, [r2, r3]
 8002bc8:	2b0d      	cmp	r3, #13
 8002bca:	d006      	beq.n	8002bda <term_idle+0x2a>
 8002bcc:	4b2c      	ldr	r3, [pc, #176]	@ (8002c80 <term_idle+0xd0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8002c84 <term_idle+0xd4>)
 8002bd4:	5cd3      	ldrb	r3, [r2, r3]
 8002bd6:	2b0a      	cmp	r3, #10
 8002bd8:	d14d      	bne.n	8002c76 <term_idle+0xc6>
    {
    	char *args;
    //	printf("TERM: >>%s<<\n", _Input);
    	if (strstart(_Input, "status")) 		  		box_send_status();
 8002bda:	492b      	ldr	r1, [pc, #172]	@ (8002c88 <term_idle+0xd8>)
 8002bdc:	4829      	ldr	r0, [pc, #164]	@ (8002c84 <term_idle+0xd4>)
 8002bde:	f7fe ff1f 	bl	8001a20 <strstart>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <term_idle+0x3e>
 8002be8:	f7fe fc9a 	bl	8001520 <box_send_status>
 8002bec:	e03b      	b.n	8002c66 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "encoder"))) 	enc_command(args);
 8002bee:	4927      	ldr	r1, [pc, #156]	@ (8002c8c <term_idle+0xdc>)
 8002bf0:	4824      	ldr	r0, [pc, #144]	@ (8002c84 <term_idle+0xd4>)
 8002bf2:	f7fe ff15 	bl	8001a20 <strstart>
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <term_idle+0x56>
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe fd84 	bl	800170c <enc_command>
 8002c04:	e02f      	b.n	8002c66 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "start"))) 		box_start();
 8002c06:	4922      	ldr	r1, [pc, #136]	@ (8002c90 <term_idle+0xe0>)
 8002c08:	481e      	ldr	r0, [pc, #120]	@ (8002c84 <term_idle+0xd4>)
 8002c0a:	f7fe ff09 	bl	8001a20 <strstart>
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <term_idle+0x6c>
 8002c16:	f7fe f961 	bl	8000edc <box_start>
 8002c1a:	e024      	b.n	8002c66 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "stop"))) 		box_stop();
 8002c1c:	491d      	ldr	r1, [pc, #116]	@ (8002c94 <term_idle+0xe4>)
 8002c1e:	4819      	ldr	r0, [pc, #100]	@ (8002c84 <term_idle+0xd4>)
 8002c20:	f7fe fefe 	bl	8001a20 <strstart>
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <term_idle+0x82>
 8002c2c:	f7fe f9a6 	bl	8000f7c <box_stop>
 8002c30:	e019      	b.n	8002c66 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "pgDelay"))) 	box_set_pgDelay(atoi(args));
 8002c32:	4919      	ldr	r1, [pc, #100]	@ (8002c98 <term_idle+0xe8>)
 8002c34:	4813      	ldr	r0, [pc, #76]	@ (8002c84 <term_idle+0xd4>)
 8002c36:	f7fe fef3 	bl	8001a20 <strstart>
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d007      	beq.n	8002c52 <term_idle+0xa2>
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f00b fc06 	bl	800e454 <atoi>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe f932 	bl	8000eb4 <box_set_pgDelay>
 8002c50:	e009      	b.n	8002c66 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "pg"))) 		box_printGo();
 8002c52:	4912      	ldr	r1, [pc, #72]	@ (8002c9c <term_idle+0xec>)
 8002c54:	480b      	ldr	r0, [pc, #44]	@ (8002c84 <term_idle+0xd4>)
 8002c56:	f7fe fee3 	bl	8001a20 <strstart>
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <term_idle+0xb6>
 8002c62:	f7fe fbdf 	bl	8001424 <box_printGo>

    	memset(_Input, 0, sizeof(_Input));
 8002c66:	2280      	movs	r2, #128	@ 0x80
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4806      	ldr	r0, [pc, #24]	@ (8002c84 <term_idle+0xd4>)
 8002c6c:	f00c fdfe 	bl	800f86c <memset>
    	_InputLen=0;
 8002c70:	4b03      	ldr	r3, [pc, #12]	@ (8002c80 <term_idle+0xd0>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
    }
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000f38 	.word	0x20000f38
 8002c84:	20000eb8 	.word	0x20000eb8
 8002c88:	0801382c 	.word	0x0801382c
 8002c8c:	08013834 	.word	0x08013834
 8002c90:	0801383c 	.word	0x0801383c
 8002c94:	08013844 	.word	0x08013844
 8002c98:	0801384c 	.word	0x0801384c
 8002c9c:	08013854 	.word	0x08013854

08002ca0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ca0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cd8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ca4:	f7ff ff46 	bl	8002b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ca8:	480c      	ldr	r0, [pc, #48]	@ (8002cdc <LoopForever+0x6>)
  ldr r1, =_edata
 8002caa:	490d      	ldr	r1, [pc, #52]	@ (8002ce0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cac:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce4 <LoopForever+0xe>)
  movs r3, #0
 8002cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb0:	e002      	b.n	8002cb8 <LoopCopyDataInit>

08002cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb6:	3304      	adds	r3, #4

08002cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cbc:	d3f9      	bcc.n	8002cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8002cec <LoopForever+0x16>)
  movs r3, #0
 8002cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc4:	e001      	b.n	8002cca <LoopFillZerobss>

08002cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc8:	3204      	adds	r2, #4

08002cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ccc:	d3fb      	bcc.n	8002cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cce:	f00c fe4d 	bl	800f96c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cd2:	f7fe ff01 	bl	8001ad8 <main>

08002cd6 <LoopForever>:

LoopForever:
    b LoopForever
 8002cd6:	e7fe      	b.n	8002cd6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002cd8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce0:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8002ce4:	08013d40 	.word	0x08013d40
  ldr r2, =_sbss
 8002ce8:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8002cec:	20002260 	.word	0x20002260

08002cf0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cf0:	e7fe      	b.n	8002cf0 <ADC1_IRQHandler>
	...

08002cf4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cf8:	4b08      	ldr	r3, [pc, #32]	@ (8002d1c <HAL_Init+0x28>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a07      	ldr	r2, [pc, #28]	@ (8002d1c <HAL_Init+0x28>)
 8002cfe:	f043 0310 	orr.w	r3, r3, #16
 8002d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d04:	2003      	movs	r0, #3
 8002d06:	f000 f92b 	bl	8002f60 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d0a:	200f      	movs	r0, #15
 8002d0c:	f000 f808 	bl	8002d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d10:	f7ff fc12 	bl	8002538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40022000 	.word	0x40022000

08002d20 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d28:	4b12      	ldr	r3, [pc, #72]	@ (8002d74 <HAL_InitTick+0x54>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b12      	ldr	r3, [pc, #72]	@ (8002d78 <HAL_InitTick+0x58>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	4619      	mov	r1, r3
 8002d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f943 	bl	8002fca <HAL_SYSTICK_Config>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00e      	b.n	8002d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b0f      	cmp	r3, #15
 8002d52:	d80a      	bhi.n	8002d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d54:	2200      	movs	r2, #0
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5c:	f000 f90b 	bl	8002f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d60:	4a06      	ldr	r2, [pc, #24]	@ (8002d7c <HAL_InitTick+0x5c>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e000      	b.n	8002d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000014 	.word	0x20000014
 8002d78:	2000001c 	.word	0x2000001c
 8002d7c:	20000018 	.word	0x20000018

08002d80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d84:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <HAL_IncTick+0x20>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_IncTick+0x24>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a04      	ldr	r2, [pc, #16]	@ (8002da4 <HAL_IncTick+0x24>)
 8002d92:	6013      	str	r3, [r2, #0]
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	2000001c 	.word	0x2000001c
 8002da4:	20000f3c 	.word	0x20000f3c

08002da8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return uwTick;  
 8002dac:	4b03      	ldr	r3, [pc, #12]	@ (8002dbc <HAL_GetTick+0x14>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000f3c 	.word	0x20000f3c

08002dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002df2:	4a04      	ldr	r2, [pc, #16]	@ (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	60d3      	str	r3, [r2, #12]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e0c:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <__NVIC_GetPriorityGrouping+0x18>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	0a1b      	lsrs	r3, r3, #8
 8002e12:	f003 0307 	and.w	r3, r3, #7
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	db0b      	blt.n	8002e4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	4907      	ldr	r1, [pc, #28]	@ (8002e5c <__NVIC_EnableIRQ+0x38>)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	2001      	movs	r0, #1
 8002e46:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000e100 	.word	0xe000e100

08002e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	6039      	str	r1, [r7, #0]
 8002e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	db0a      	blt.n	8002e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	490c      	ldr	r1, [pc, #48]	@ (8002eac <__NVIC_SetPriority+0x4c>)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	0112      	lsls	r2, r2, #4
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	440b      	add	r3, r1
 8002e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e88:	e00a      	b.n	8002ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4908      	ldr	r1, [pc, #32]	@ (8002eb0 <__NVIC_SetPriority+0x50>)
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	3b04      	subs	r3, #4
 8002e98:	0112      	lsls	r2, r2, #4
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	761a      	strb	r2, [r3, #24]
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	e000e100 	.word	0xe000e100
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b089      	sub	sp, #36	@ 0x24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f1c3 0307 	rsb	r3, r3, #7
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	bf28      	it	cs
 8002ed2:	2304      	movcs	r3, #4
 8002ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d902      	bls.n	8002ee4 <NVIC_EncodePriority+0x30>
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3b03      	subs	r3, #3
 8002ee2:	e000      	b.n	8002ee6 <NVIC_EncodePriority+0x32>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002efc:	f04f 31ff 	mov.w	r1, #4294967295
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	43d9      	mvns	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	4313      	orrs	r3, r2
         );
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3724      	adds	r7, #36	@ 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f2c:	d301      	bcc.n	8002f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e00f      	b.n	8002f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f32:	4a0a      	ldr	r2, [pc, #40]	@ (8002f5c <SysTick_Config+0x40>)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f3a:	210f      	movs	r1, #15
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f40:	f7ff ff8e 	bl	8002e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f44:	4b05      	ldr	r3, [pc, #20]	@ (8002f5c <SysTick_Config+0x40>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f4a:	4b04      	ldr	r3, [pc, #16]	@ (8002f5c <SysTick_Config+0x40>)
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	e000e010 	.word	0xe000e010

08002f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ff29 	bl	8002dc0 <__NVIC_SetPriorityGrouping>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f88:	f7ff ff3e 	bl	8002e08 <__NVIC_GetPriorityGrouping>
 8002f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	6978      	ldr	r0, [r7, #20]
 8002f94:	f7ff ff8e 	bl	8002eb4 <NVIC_EncodePriority>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ff5d 	bl	8002e60 <__NVIC_SetPriority>
}
 8002fa6:	bf00      	nop
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff31 	bl	8002e24 <__NVIC_EnableIRQ>
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff ffa2 	bl	8002f1c <SysTick_Config>
 8002fd8:	4603      	mov	r3, r0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d008      	beq.n	8003006 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2204      	movs	r2, #4
 8002ff8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e020      	b.n	8003048 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 020e 	bic.w	r2, r2, #14
 8003014:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0201 	bic.w	r2, r2, #1
 8003024:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302e:	2101      	movs	r1, #1
 8003030:	fa01 f202 	lsl.w	r2, r1, r2
 8003034:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003066:	2b02      	cmp	r3, #2
 8003068:	d005      	beq.n	8003076 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2204      	movs	r2, #4
 800306e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	73fb      	strb	r3, [r7, #15]
 8003074:	e027      	b.n	80030c6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 020e 	bic.w	r2, r2, #14
 8003084:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0201 	bic.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800309e:	2101      	movs	r1, #1
 80030a0:	fa01 f202 	lsl.w	r2, r1, r2
 80030a4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
    } 
  }
  return status;
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030de:	e154      	b.n	800338a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	2101      	movs	r1, #1
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ec:	4013      	ands	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8146 	beq.w	8003384 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b01      	cmp	r3, #1
 8003102:	d005      	beq.n	8003110 <HAL_GPIO_Init+0x40>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d130      	bne.n	8003172 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	2203      	movs	r2, #3
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003146:	2201      	movs	r2, #1
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	091b      	lsrs	r3, r3, #4
 800315c:	f003 0201 	and.w	r2, r3, #1
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b03      	cmp	r3, #3
 800317c:	d017      	beq.n	80031ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	2203      	movs	r2, #3
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d123      	bne.n	8003202 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	08da      	lsrs	r2, r3, #3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3208      	adds	r2, #8
 80031c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	220f      	movs	r2, #15
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	08da      	lsrs	r2, r3, #3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3208      	adds	r2, #8
 80031fc:	6939      	ldr	r1, [r7, #16]
 80031fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	2203      	movs	r2, #3
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4013      	ands	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 0203 	and.w	r2, r3, #3
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 80a0 	beq.w	8003384 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003244:	4b58      	ldr	r3, [pc, #352]	@ (80033a8 <HAL_GPIO_Init+0x2d8>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	4a57      	ldr	r2, [pc, #348]	@ (80033a8 <HAL_GPIO_Init+0x2d8>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6193      	str	r3, [r2, #24]
 8003250:	4b55      	ldr	r3, [pc, #340]	@ (80033a8 <HAL_GPIO_Init+0x2d8>)
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800325c:	4a53      	ldr	r2, [pc, #332]	@ (80033ac <HAL_GPIO_Init+0x2dc>)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	089b      	lsrs	r3, r3, #2
 8003262:	3302      	adds	r3, #2
 8003264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003268:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	220f      	movs	r2, #15
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003286:	d019      	beq.n	80032bc <HAL_GPIO_Init+0x1ec>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a49      	ldr	r2, [pc, #292]	@ (80033b0 <HAL_GPIO_Init+0x2e0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d013      	beq.n	80032b8 <HAL_GPIO_Init+0x1e8>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a48      	ldr	r2, [pc, #288]	@ (80033b4 <HAL_GPIO_Init+0x2e4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00d      	beq.n	80032b4 <HAL_GPIO_Init+0x1e4>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a47      	ldr	r2, [pc, #284]	@ (80033b8 <HAL_GPIO_Init+0x2e8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d007      	beq.n	80032b0 <HAL_GPIO_Init+0x1e0>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a46      	ldr	r2, [pc, #280]	@ (80033bc <HAL_GPIO_Init+0x2ec>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d101      	bne.n	80032ac <HAL_GPIO_Init+0x1dc>
 80032a8:	2304      	movs	r3, #4
 80032aa:	e008      	b.n	80032be <HAL_GPIO_Init+0x1ee>
 80032ac:	2305      	movs	r3, #5
 80032ae:	e006      	b.n	80032be <HAL_GPIO_Init+0x1ee>
 80032b0:	2303      	movs	r3, #3
 80032b2:	e004      	b.n	80032be <HAL_GPIO_Init+0x1ee>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e002      	b.n	80032be <HAL_GPIO_Init+0x1ee>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <HAL_GPIO_Init+0x1ee>
 80032bc:	2300      	movs	r3, #0
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	f002 0203 	and.w	r2, r2, #3
 80032c4:	0092      	lsls	r2, r2, #2
 80032c6:	4093      	lsls	r3, r2
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032ce:	4937      	ldr	r1, [pc, #220]	@ (80033ac <HAL_GPIO_Init+0x2dc>)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	089b      	lsrs	r3, r3, #2
 80032d4:	3302      	adds	r3, #2
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032dc:	4b38      	ldr	r3, [pc, #224]	@ (80033c0 <HAL_GPIO_Init+0x2f0>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003300:	4a2f      	ldr	r2, [pc, #188]	@ (80033c0 <HAL_GPIO_Init+0x2f0>)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003306:	4b2e      	ldr	r3, [pc, #184]	@ (80033c0 <HAL_GPIO_Init+0x2f0>)
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	43db      	mvns	r3, r3
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4013      	ands	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800332a:	4a25      	ldr	r2, [pc, #148]	@ (80033c0 <HAL_GPIO_Init+0x2f0>)
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003330:	4b23      	ldr	r3, [pc, #140]	@ (80033c0 <HAL_GPIO_Init+0x2f0>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	43db      	mvns	r3, r3
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003354:	4a1a      	ldr	r2, [pc, #104]	@ (80033c0 <HAL_GPIO_Init+0x2f0>)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800335a:	4b19      	ldr	r3, [pc, #100]	@ (80033c0 <HAL_GPIO_Init+0x2f0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	43db      	mvns	r3, r3
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4013      	ands	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800337e:	4a10      	ldr	r2, [pc, #64]	@ (80033c0 <HAL_GPIO_Init+0x2f0>)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	3301      	adds	r3, #1
 8003388:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	f47f aea3 	bne.w	80030e0 <HAL_GPIO_Init+0x10>
  }
}
 800339a:	bf00      	nop
 800339c:	bf00      	nop
 800339e:	371c      	adds	r7, #28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40010000 	.word	0x40010000
 80033b0:	48000400 	.word	0x48000400
 80033b4:	48000800 	.word	0x48000800
 80033b8:	48000c00 	.word	0x48000c00
 80033bc:	48001000 	.word	0x48001000
 80033c0:	40010400 	.word	0x40010400

080033c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	887b      	ldrh	r3, [r7, #2]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
 80033e0:	e001      	b.n	80033e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	807b      	strh	r3, [r7, #2]
 8003400:	4613      	mov	r3, r2
 8003402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003404:	787b      	ldrb	r3, [r7, #1]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800340a:	887a      	ldrh	r2, [r7, #2]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003410:	e002      	b.n	8003418 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003412:	887a      	ldrh	r2, [r7, #2]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e081      	b.n	800353a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff f89e 	bl	800258c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2224      	movs	r2, #36	@ 0x24
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0201 	bic.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003474:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003484:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d107      	bne.n	800349e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	e006      	b.n	80034ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80034aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d104      	bne.n	80034be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69d9      	ldr	r1, [r3, #28]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1a      	ldr	r2, [r3, #32]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	461a      	mov	r2, r3
 8003550:	460b      	mov	r3, r1
 8003552:	817b      	strh	r3, [r7, #10]
 8003554:	4613      	mov	r3, r2
 8003556:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b20      	cmp	r3, #32
 8003562:	f040 80da 	bne.w	800371a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_I2C_Master_Transmit+0x30>
 8003570:	2302      	movs	r3, #2
 8003572:	e0d3      	b.n	800371c <HAL_I2C_Master_Transmit+0x1d8>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800357c:	f7ff fc14 	bl	8002da8 <HAL_GetTick>
 8003580:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	2319      	movs	r3, #25
 8003588:	2201      	movs	r2, #1
 800358a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f9e6 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e0be      	b.n	800371c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2221      	movs	r2, #33	@ 0x21
 80035a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2210      	movs	r2, #16
 80035aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	893a      	ldrh	r2, [r7, #8]
 80035be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2bff      	cmp	r3, #255	@ 0xff
 80035ce:	d90e      	bls.n	80035ee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	22ff      	movs	r2, #255	@ 0xff
 80035d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	8979      	ldrh	r1, [r7, #10]
 80035de:	4b51      	ldr	r3, [pc, #324]	@ (8003724 <HAL_I2C_Master_Transmit+0x1e0>)
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 fbf6 	bl	8003dd8 <I2C_TransferConfig>
 80035ec:	e06c      	b.n	80036c8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	8979      	ldrh	r1, [r7, #10]
 8003600:	4b48      	ldr	r3, [pc, #288]	@ (8003724 <HAL_I2C_Master_Transmit+0x1e0>)
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 fbe5 	bl	8003dd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800360e:	e05b      	b.n	80036c8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	6a39      	ldr	r1, [r7, #32]
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f9f2 	bl	80039fe <I2C_WaitOnTXISFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e07b      	b.n	800371c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003628:	781a      	ldrb	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d034      	beq.n	80036c8 <HAL_I2C_Master_Transmit+0x184>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003662:	2b00      	cmp	r3, #0
 8003664:	d130      	bne.n	80036c8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	2200      	movs	r2, #0
 800366e:	2180      	movs	r1, #128	@ 0x80
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 f975 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e04d      	b.n	800371c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	2bff      	cmp	r3, #255	@ 0xff
 8003688:	d90e      	bls.n	80036a8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	22ff      	movs	r2, #255	@ 0xff
 800368e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003694:	b2da      	uxtb	r2, r3
 8003696:	8979      	ldrh	r1, [r7, #10]
 8003698:	2300      	movs	r3, #0
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fb99 	bl	8003dd8 <I2C_TransferConfig>
 80036a6:	e00f      	b.n	80036c8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	8979      	ldrh	r1, [r7, #10]
 80036ba:	2300      	movs	r3, #0
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 fb88 	bl	8003dd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d19e      	bne.n	8003610 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	6a39      	ldr	r1, [r7, #32]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f9d8 	bl	8003a8c <I2C_WaitOnSTOPFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e01a      	b.n	800371c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2220      	movs	r2, #32
 80036ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6859      	ldr	r1, [r3, #4]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003728 <HAL_I2C_Master_Transmit+0x1e4>)
 80036fa:	400b      	ands	r3, r1
 80036fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	e000      	b.n	800371c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800371a:	2302      	movs	r3, #2
  }
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	80002000 	.word	0x80002000
 8003728:	fe00e800 	.word	0xfe00e800

0800372c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	607a      	str	r2, [r7, #4]
 8003736:	461a      	mov	r2, r3
 8003738:	460b      	mov	r3, r1
 800373a:	817b      	strh	r3, [r7, #10]
 800373c:	4613      	mov	r3, r2
 800373e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b20      	cmp	r3, #32
 800374a:	f040 80db 	bne.w	8003904 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_I2C_Master_Receive+0x30>
 8003758:	2302      	movs	r3, #2
 800375a:	e0d4      	b.n	8003906 <HAL_I2C_Master_Receive+0x1da>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003764:	f7ff fb20 	bl	8002da8 <HAL_GetTick>
 8003768:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	2319      	movs	r3, #25
 8003770:	2201      	movs	r2, #1
 8003772:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 f8f2 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e0bf      	b.n	8003906 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2222      	movs	r2, #34	@ 0x22
 800378a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2210      	movs	r2, #16
 8003792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	893a      	ldrh	r2, [r7, #8]
 80037a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2bff      	cmp	r3, #255	@ 0xff
 80037b6:	d90e      	bls.n	80037d6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	22ff      	movs	r2, #255	@ 0xff
 80037bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	8979      	ldrh	r1, [r7, #10]
 80037c6:	4b52      	ldr	r3, [pc, #328]	@ (8003910 <HAL_I2C_Master_Receive+0x1e4>)
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 fb02 	bl	8003dd8 <I2C_TransferConfig>
 80037d4:	e06d      	b.n	80038b2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	8979      	ldrh	r1, [r7, #10]
 80037e8:	4b49      	ldr	r3, [pc, #292]	@ (8003910 <HAL_I2C_Master_Receive+0x1e4>)
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 faf1 	bl	8003dd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80037f6:	e05c      	b.n	80038b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	6a39      	ldr	r1, [r7, #32]
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f989 	bl	8003b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e07c      	b.n	8003906 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d034      	beq.n	80038b2 <HAL_I2C_Master_Receive+0x186>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384c:	2b00      	cmp	r3, #0
 800384e:	d130      	bne.n	80038b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	2200      	movs	r2, #0
 8003858:	2180      	movs	r1, #128	@ 0x80
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f880 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e04d      	b.n	8003906 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	2bff      	cmp	r3, #255	@ 0xff
 8003872:	d90e      	bls.n	8003892 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	22ff      	movs	r2, #255	@ 0xff
 8003878:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387e:	b2da      	uxtb	r2, r3
 8003880:	8979      	ldrh	r1, [r7, #10]
 8003882:	2300      	movs	r3, #0
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 faa4 	bl	8003dd8 <I2C_TransferConfig>
 8003890:	e00f      	b.n	80038b2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	8979      	ldrh	r1, [r7, #10]
 80038a4:	2300      	movs	r3, #0
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 fa93 	bl	8003dd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d19d      	bne.n	80037f8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	6a39      	ldr	r1, [r7, #32]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f8e3 	bl	8003a8c <I2C_WaitOnSTOPFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e01a      	b.n	8003906 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2220      	movs	r2, #32
 80038d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6859      	ldr	r1, [r3, #4]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003914 <HAL_I2C_Master_Receive+0x1e8>)
 80038e4:	400b      	ands	r3, r1
 80038e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	e000      	b.n	8003906 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003904:	2302      	movs	r3, #2
  }
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	80002400 	.word	0x80002400
 8003914:	fe00e800 	.word	0xfe00e800

08003918 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b02      	cmp	r3, #2
 800392c:	d103      	bne.n	8003936 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2200      	movs	r2, #0
 8003934:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d007      	beq.n	8003954 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	619a      	str	r2, [r3, #24]
  }
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003970:	e031      	b.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003978:	d02d      	beq.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397a:	f7ff fa15 	bl	8002da8 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d302      	bcc.n	8003990 <I2C_WaitOnFlagUntilTimeout+0x30>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d122      	bne.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4013      	ands	r3, r2
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	429a      	cmp	r2, r3
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d113      	bne.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b2:	f043 0220 	orr.w	r2, r3, #32
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e00f      	b.n	80039f6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699a      	ldr	r2, [r3, #24]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4013      	ands	r3, r2
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	bf0c      	ite	eq
 80039e6:	2301      	moveq	r3, #1
 80039e8:	2300      	movne	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	461a      	mov	r2, r3
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d0be      	beq.n	8003972 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a0a:	e033      	b.n	8003a74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 f901 	bl	8003c18 <I2C_IsErrorOccurred>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e031      	b.n	8003a84 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a26:	d025      	beq.n	8003a74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a28:	f7ff f9be 	bl	8002da8 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d302      	bcc.n	8003a3e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d11a      	bne.n	8003a74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d013      	beq.n	8003a74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a50:	f043 0220 	orr.w	r2, r3, #32
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e007      	b.n	8003a84 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d1c4      	bne.n	8003a0c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a98:	e02f      	b.n	8003afa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	68b9      	ldr	r1, [r7, #8]
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f8ba 	bl	8003c18 <I2C_IsErrorOccurred>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e02d      	b.n	8003b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aae:	f7ff f97b 	bl	8002da8 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d302      	bcc.n	8003ac4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d11a      	bne.n	8003afa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d013      	beq.n	8003afa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad6:	f043 0220 	orr.w	r2, r3, #32
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e007      	b.n	8003b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d1c8      	bne.n	8003a9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b20:	e06b      	b.n	8003bfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f876 	bl	8003c18 <I2C_IsErrorOccurred>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e069      	b.n	8003c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d138      	bne.n	8003bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d105      	bne.n	8003b5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e055      	b.n	8003c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	2b10      	cmp	r3, #16
 8003b6a:	d107      	bne.n	8003b7c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2210      	movs	r2, #16
 8003b72:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2204      	movs	r2, #4
 8003b78:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b7a:	e002      	b.n	8003b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2220      	movs	r2, #32
 8003b88:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6859      	ldr	r1, [r3, #4]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b1f      	ldr	r3, [pc, #124]	@ (8003c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003b96:	400b      	ands	r3, r1
 8003b98:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e029      	b.n	8003c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb6:	f7ff f8f7 	bl	8002da8 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d302      	bcc.n	8003bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d116      	bne.n	8003bfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d00f      	beq.n	8003bfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bde:	f043 0220 	orr.w	r2, r3, #32
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e007      	b.n	8003c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d18c      	bne.n	8003b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	fe00e800 	.word	0xfe00e800

08003c18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08a      	sub	sp, #40	@ 0x28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d068      	beq.n	8003d16 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2210      	movs	r2, #16
 8003c4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c4c:	e049      	b.n	8003ce2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c54:	d045      	beq.n	8003ce2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c56:	f7ff f8a7 	bl	8002da8 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d302      	bcc.n	8003c6c <I2C_IsErrorOccurred+0x54>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d13a      	bne.n	8003ce2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c8e:	d121      	bne.n	8003cd4 <I2C_IsErrorOccurred+0xbc>
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c96:	d01d      	beq.n	8003cd4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c98:	7cfb      	ldrb	r3, [r7, #19]
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d01a      	beq.n	8003cd4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003cae:	f7ff f87b 	bl	8002da8 <HAL_GetTick>
 8003cb2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cb4:	e00e      	b.n	8003cd4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003cb6:	f7ff f877 	bl	8002da8 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b19      	cmp	r3, #25
 8003cc2:	d907      	bls.n	8003cd4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	f043 0320 	orr.w	r3, r3, #32
 8003cca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003cd2:	e006      	b.n	8003ce2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d1e9      	bne.n	8003cb6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d003      	beq.n	8003cf8 <I2C_IsErrorOccurred+0xe0>
 8003cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0aa      	beq.n	8003c4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d103      	bne.n	8003d08 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2220      	movs	r2, #32
 8003d06:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	f043 0304 	orr.w	r3, r3, #4
 8003d0e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00b      	beq.n	8003d40 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00b      	beq.n	8003d62 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	f043 0308 	orr.w	r3, r3, #8
 8003d50:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00b      	beq.n	8003d84 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	f043 0302 	orr.w	r3, r3, #2
 8003d72:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003d84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d01c      	beq.n	8003dc6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f7ff fdc3 	bl	8003918 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6859      	ldr	r1, [r3, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd4 <I2C_IsErrorOccurred+0x1bc>)
 8003d9e:	400b      	ands	r3, r1
 8003da0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3728      	adds	r7, #40	@ 0x28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	fe00e800 	.word	0xfe00e800

08003dd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	607b      	str	r3, [r7, #4]
 8003de2:	460b      	mov	r3, r1
 8003de4:	817b      	strh	r3, [r7, #10]
 8003de6:	4613      	mov	r3, r2
 8003de8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dea:	897b      	ldrh	r3, [r7, #10]
 8003dec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003df0:	7a7b      	ldrb	r3, [r7, #9]
 8003df2:	041b      	lsls	r3, r3, #16
 8003df4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003df8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	0d5b      	lsrs	r3, r3, #21
 8003e12:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003e16:	4b08      	ldr	r3, [pc, #32]	@ (8003e38 <I2C_TransferConfig+0x60>)
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	ea02 0103 	and.w	r1, r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e2a:	bf00      	nop
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	03ff63ff 	.word	0x03ff63ff

08003e3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d138      	bne.n	8003ec4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e032      	b.n	8003ec6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2224      	movs	r2, #36	@ 0x24
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0201 	bic.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6819      	ldr	r1, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e000      	b.n	8003ec6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b085      	sub	sp, #20
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b20      	cmp	r3, #32
 8003ee6:	d139      	bne.n	8003f5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e033      	b.n	8003f5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2224      	movs	r2, #36	@ 0x24
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0201 	bic.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	e000      	b.n	8003f5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f5c:	2302      	movs	r3, #2
  }
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f6c:	b08b      	sub	sp, #44	@ 0x2c
 8003f6e:	af06      	add	r7, sp, #24
 8003f70:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0c4      	b.n	8004106 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d106      	bne.n	8003f96 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f009 ff81 	bl	800de98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2203      	movs	r2, #3
 8003f9a:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f005 ff02 	bl	8009dac <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]
 8003fac:	e040      	b.n	8004030 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	440b      	add	r3, r1
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	440b      	add	r3, r1
 8003fd4:	7bfa      	ldrb	r2, [r7, #15]
 8003fd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	440b      	add	r3, r1
 8003fe8:	3303      	adds	r3, #3
 8003fea:	2200      	movs	r2, #0
 8003fec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fee:	7bfa      	ldrb	r2, [r7, #15]
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	440b      	add	r3, r1
 8003ffc:	3338      	adds	r3, #56	@ 0x38
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004002:	7bfa      	ldrb	r2, [r7, #15]
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	440b      	add	r3, r1
 8004010:	333c      	adds	r3, #60	@ 0x3c
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004016:	7bfa      	ldrb	r2, [r7, #15]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	440b      	add	r3, r1
 8004024:	3340      	adds	r3, #64	@ 0x40
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	3301      	adds	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
 8004030:	7bfa      	ldrb	r2, [r7, #15]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	429a      	cmp	r2, r3
 8004038:	d3b9      	bcc.n	8003fae <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]
 800403e:	e044      	b.n	80040ca <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004040:	7bfa      	ldrb	r2, [r7, #15]
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	440b      	add	r3, r1
 800404e:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8004052:	2200      	movs	r2, #0
 8004054:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004056:	7bfa      	ldrb	r2, [r7, #15]
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	440b      	add	r3, r1
 8004064:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004068:	7bfa      	ldrb	r2, [r7, #15]
 800406a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800406c:	7bfa      	ldrb	r2, [r7, #15]
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	440b      	add	r3, r1
 800407a:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 800407e:	2200      	movs	r2, #0
 8004080:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004082:	7bfa      	ldrb	r2, [r7, #15]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	440b      	add	r3, r1
 8004090:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004098:	7bfa      	ldrb	r2, [r7, #15]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	440b      	add	r3, r1
 80040a6:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040ae:	7bfa      	ldrb	r2, [r7, #15]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	440b      	add	r3, r1
 80040bc:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	3301      	adds	r3, #1
 80040c8:	73fb      	strb	r3, [r7, #15]
 80040ca:	7bfa      	ldrb	r2, [r7, #15]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d3b5      	bcc.n	8004040 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	603b      	str	r3, [r7, #0]
 80040da:	687e      	ldr	r6, [r7, #4]
 80040dc:	466d      	mov	r5, sp
 80040de:	f106 0410 	add.w	r4, r6, #16
 80040e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	602b      	str	r3, [r5, #0]
 80040ea:	1d33      	adds	r3, r6, #4
 80040ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040ee:	6838      	ldr	r0, [r7, #0]
 80040f0:	f005 fe77 	bl	8009de2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800410e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_PCD_Start+0x16>
 8004120:	2302      	movs	r3, #2
 8004122:	e016      	b.n	8004152 <HAL_PCD_Start+0x44>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f005 fe24 	bl	8009d7e <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004136:	2101      	movs	r1, #1
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f00a f953 	bl	800e3e4 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f008 f8e3 	bl	800c30e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b084      	sub	sp, #16
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f008 f8dc 	bl	800c324 <USB_ReadInterrupts>
 800416c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fab2 	bl	80046e2 <PCD_EP_ISR_Handler>

    return;
 800417e:	e0bd      	b.n	80042fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004186:	2b00      	cmp	r3, #0
 8004188:	d013      	beq.n	80041b2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004192:	b29a      	uxth	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800419c:	b292      	uxth	r2, r2
 800419e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f009 ff21 	bl	800dfea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80041a8:	2100      	movs	r1, #0
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f8a9 	bl	8004302 <HAL_PCD_SetAddress>

    return;
 80041b0:	e0a4      	b.n	80042fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00c      	beq.n	80041d6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80041ce:	b292      	uxth	r2, r2
 80041d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80041d4:	e092      	b.n	80042fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00c      	beq.n	80041fa <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041f2:	b292      	uxth	r2, r2
 80041f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80041f8:	e080      	b.n	80042fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d027      	beq.n	8004254 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800420c:	b29a      	uxth	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0204 	bic.w	r2, r2, #4
 8004216:	b292      	uxth	r2, r2
 8004218:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0208 	bic.w	r2, r2, #8
 800422e:	b292      	uxth	r2, r2
 8004230:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f009 ff11 	bl	800e05c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004242:	b29a      	uxth	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800424c:	b292      	uxth	r2, r2
 800424e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004252:	e053      	b.n	80042fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800425a:	2b00      	cmp	r3, #0
 800425c:	d027      	beq.n	80042ae <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004266:	b29a      	uxth	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0208 	orr.w	r2, r2, #8
 8004270:	b292      	uxth	r2, r2
 8004272:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800427e:	b29a      	uxth	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004288:	b292      	uxth	r2, r2
 800428a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004296:	b29a      	uxth	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0204 	orr.w	r2, r2, #4
 80042a0:	b292      	uxth	r2, r2
 80042a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f009 febe 	bl	800e028 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80042ac:	e026      	b.n	80042fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00f      	beq.n	80042d8 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80042ca:	b292      	uxth	r2, r2
 80042cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f009 fe7c 	bl	800dfce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80042d6:	e011      	b.n	80042fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00c      	beq.n	80042fc <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042f4:	b292      	uxth	r2, r2
 80042f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80042fa:	bf00      	nop
  }
}
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	460b      	mov	r3, r1
 800430c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_PCD_SetAddress+0x1a>
 8004318:	2302      	movs	r3, #2
 800431a:	e013      	b.n	8004344 <HAL_PCD_SetAddress+0x42>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	78fa      	ldrb	r2, [r7, #3]
 8004328:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	78fa      	ldrb	r2, [r7, #3]
 8004332:	4611      	mov	r1, r2
 8004334:	4618      	mov	r0, r3
 8004336:	f007 ffd6 	bl	800c2e6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	4608      	mov	r0, r1
 8004356:	4611      	mov	r1, r2
 8004358:	461a      	mov	r2, r3
 800435a:	4603      	mov	r3, r0
 800435c:	70fb      	strb	r3, [r7, #3]
 800435e:	460b      	mov	r3, r1
 8004360:	803b      	strh	r3, [r7, #0]
 8004362:	4613      	mov	r3, r2
 8004364:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800436a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800436e:	2b00      	cmp	r3, #0
 8004370:	da0e      	bge.n	8004390 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	4613      	mov	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	705a      	strb	r2, [r3, #1]
 800438e:	e00e      	b.n	80043ae <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	f003 0207 	and.w	r2, r3, #7
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	4413      	add	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80043ba:	883a      	ldrh	r2, [r7, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	78ba      	ldrb	r2, [r7, #2]
 80043c4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043c6:	78bb      	ldrb	r3, [r7, #2]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d102      	bne.n	80043d2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_PCD_EP_Open+0x94>
 80043dc:	2302      	movs	r3, #2
 80043de:	e00e      	b.n	80043fe <HAL_PCD_EP_Open+0xb2>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68f9      	ldr	r1, [r7, #12]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f005 fd18 	bl	8009e24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 80043fc:	7afb      	ldrb	r3, [r7, #11]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	460b      	mov	r3, r1
 8004410:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004412:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004416:	2b00      	cmp	r3, #0
 8004418:	da0e      	bge.n	8004438 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	4413      	add	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	705a      	strb	r2, [r3, #1]
 8004436:	e00e      	b.n	8004456 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	f003 0207 	and.w	r2, r3, #7
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	4413      	add	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	b2da      	uxtb	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <HAL_PCD_EP_Close+0x6a>
 800446c:	2302      	movs	r3, #2
 800446e:	e00e      	b.n	800448e <HAL_PCD_EP_Close+0x88>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68f9      	ldr	r1, [r7, #12]
 800447e:	4618      	mov	r0, r3
 8004480:	f006 f894 	bl	800a5ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b086      	sub	sp, #24
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
 80044a2:	460b      	mov	r3, r1
 80044a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044a6:	7afb      	ldrb	r3, [r7, #11]
 80044a8:	f003 0207 	and.w	r2, r3, #7
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4413      	add	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2200      	movs	r2, #0
 80044ce:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2200      	movs	r2, #0
 80044d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044d6:	7afb      	ldrb	r3, [r7, #11]
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6979      	ldr	r1, [r7, #20]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f006 fa4c 	bl	800a986 <USB_EPStartXfer>

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	f003 0207 	and.w	r2, r3, #7
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	440b      	add	r3, r1
 8004516:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800451a:	681b      	ldr	r3, [r3, #0]
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	607a      	str	r2, [r7, #4]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	460b      	mov	r3, r1
 8004536:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004538:	7afb      	ldrb	r3, [r7, #11]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2200      	movs	r2, #0
 800456c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2201      	movs	r2, #1
 8004572:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004574:	7afb      	ldrb	r3, [r7, #11]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	b2da      	uxtb	r2, r3
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6979      	ldr	r1, [r7, #20]
 8004586:	4618      	mov	r0, r3
 8004588:	f006 f9fd 	bl	800a986 <USB_EPStartXfer>

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b084      	sub	sp, #16
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	460b      	mov	r3, r1
 80045a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	f003 0207 	and.w	r2, r3, #7
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d901      	bls.n	80045b4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e03e      	b.n	8004632 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	da0e      	bge.n	80045da <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	4413      	add	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	705a      	strb	r2, [r3, #1]
 80045d8:	e00c      	b.n	80045f4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045da:	78fa      	ldrb	r2, [r7, #3]
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	4413      	add	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2201      	movs	r2, #1
 80045f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	b2da      	uxtb	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_PCD_EP_SetStall+0x7e>
 8004610:	2302      	movs	r3, #2
 8004612:	e00e      	b.n	8004632 <HAL_PCD_EP_SetStall+0x9c>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68f9      	ldr	r1, [r7, #12]
 8004622:	4618      	mov	r0, r3
 8004624:	f007 fd60 	bl	800c0e8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	460b      	mov	r3, r1
 8004644:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004646:	78fb      	ldrb	r3, [r7, #3]
 8004648:	f003 020f 	and.w	r2, r3, #15
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	429a      	cmp	r2, r3
 8004652:	d901      	bls.n	8004658 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e040      	b.n	80046da <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800465c:	2b00      	cmp	r3, #0
 800465e:	da0e      	bge.n	800467e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	4413      	add	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	705a      	strb	r2, [r3, #1]
 800467c:	e00e      	b.n	800469c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800467e:	78fb      	ldrb	r3, [r7, #3]
 8004680:	f003 0207 	and.w	r2, r3, #7
 8004684:	4613      	mov	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	4413      	add	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_PCD_EP_ClrStall+0x82>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e00e      	b.n	80046da <HAL_PCD_EP_ClrStall+0xa0>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68f9      	ldr	r1, [r7, #12]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f007 fd5d 	bl	800c18a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b096      	sub	sp, #88	@ 0x58
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80046ea:	e3be      	b.n	8004e6a <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80046f4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80046f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8004706:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800470a:	2b00      	cmp	r3, #0
 800470c:	f040 8178 	bne.w	8004a00 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004710:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	2b00      	cmp	r3, #0
 800471a:	d151      	bne.n	80047c0 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004728:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800472c:	81fb      	strh	r3, [r7, #14]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	89fb      	ldrh	r3, [r7, #14]
 8004734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800473c:	b29b      	uxth	r3, r3
 800473e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3328      	adds	r3, #40	@ 0x28
 8004744:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800474e:	b29b      	uxth	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	4413      	add	r3, r2
 800475a:	3302      	adds	r3, #2
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6812      	ldr	r2, [r2, #0]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800476e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004770:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004774:	695a      	ldr	r2, [r3, #20]
 8004776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	441a      	add	r2, r3
 800477c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800477e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004780:	2100      	movs	r1, #0
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f009 fc09 	bl	800df9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 836a 	beq.w	8004e6a <PCD_EP_ISR_Handler+0x788>
 8004796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	f040 8365 	bne.w	8004e6a <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80047be:	e354      	b.n	8004e6a <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80047c6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80047d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80047d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d034      	beq.n	8004848 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	4413      	add	r3, r2
 80047f2:	3306      	adds	r3, #6
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6812      	ldr	r2, [r2, #0]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004808:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8004814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004816:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800481a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800481c:	b29b      	uxth	r3, r3
 800481e:	f007 fdd7 	bl	800c3d0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	b29a      	uxth	r2, r3
 800482a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800482e:	4013      	ands	r3, r2
 8004830:	823b      	strh	r3, [r7, #16]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	8a3a      	ldrh	r2, [r7, #16]
 8004838:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800483c:	b292      	uxth	r2, r2
 800483e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f009 fb7d 	bl	800df40 <HAL_PCD_SetupStageCallback>
 8004846:	e310      	b.n	8004e6a <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004848:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800484c:	2b00      	cmp	r3, #0
 800484e:	f280 830c 	bge.w	8004e6a <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	b29a      	uxth	r2, r3
 800485a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800485e:	4013      	ands	r3, r2
 8004860:	83fb      	strh	r3, [r7, #30]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	8bfa      	ldrh	r2, [r7, #30]
 8004868:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800486c:	b292      	uxth	r2, r2
 800486e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004878:	b29b      	uxth	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	4413      	add	r3, r2
 8004884:	3306      	adds	r3, #6
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800489a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800489c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d019      	beq.n	80048d8 <PCD_EP_ISR_Handler+0x1f6>
 80048a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d015      	beq.n	80048d8 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6818      	ldr	r0, [r3, #0]
 80048b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b2:	6959      	ldr	r1, [r3, #20]
 80048b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80048b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ba:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80048bc:	b29b      	uxth	r3, r3
 80048be:	f007 fd87 	bl	800c3d0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80048c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c4:	695a      	ldr	r2, [r3, #20]
 80048c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	441a      	add	r2, r3
 80048cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ce:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80048d0:	2100      	movs	r1, #0
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f009 fb46 	bl	800df64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80048e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80048e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f040 82bd 	bne.w	8004e6a <PCD_EP_ISR_Handler+0x788>
 80048f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80048f4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80048f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048fc:	f000 82b5 	beq.w	8004e6a <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	61bb      	str	r3, [r7, #24]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800490e:	b29b      	uxth	r3, r3
 8004910:	461a      	mov	r2, r3
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	4413      	add	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	b29b      	uxth	r3, r3
 8004926:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800492a:	b29a      	uxth	r2, r3
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	801a      	strh	r2, [r3, #0]
 8004930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	2b3e      	cmp	r3, #62	@ 0x3e
 8004936:	d91d      	bls.n	8004974 <PCD_EP_ISR_Handler+0x292>
 8004938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	095b      	lsrs	r3, r3, #5
 800493e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	2b00      	cmp	r3, #0
 800494a:	d102      	bne.n	8004952 <PCD_EP_ISR_Handler+0x270>
 800494c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800494e:	3b01      	subs	r3, #1
 8004950:	647b      	str	r3, [r7, #68]	@ 0x44
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	b29a      	uxth	r2, r3
 8004958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800495a:	b29b      	uxth	r3, r3
 800495c:	029b      	lsls	r3, r3, #10
 800495e:	b29b      	uxth	r3, r3
 8004960:	4313      	orrs	r3, r2
 8004962:	b29b      	uxth	r3, r3
 8004964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800496c:	b29a      	uxth	r2, r3
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	801a      	strh	r2, [r3, #0]
 8004972:	e026      	b.n	80049c2 <PCD_EP_ISR_Handler+0x2e0>
 8004974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10a      	bne.n	8004992 <PCD_EP_ISR_Handler+0x2b0>
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	b29b      	uxth	r3, r3
 8004982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800498a:	b29a      	uxth	r2, r3
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	801a      	strh	r2, [r3, #0]
 8004990:	e017      	b.n	80049c2 <PCD_EP_ISR_Handler+0x2e0>
 8004992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	647b      	str	r3, [r7, #68]	@ 0x44
 800499a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <PCD_EP_ISR_Handler+0x2ca>
 80049a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049a8:	3301      	adds	r3, #1
 80049aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	029b      	lsls	r3, r3, #10
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	4313      	orrs	r3, r2
 80049bc:	b29a      	uxth	r2, r3
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d2:	827b      	strh	r3, [r7, #18]
 80049d4:	8a7b      	ldrh	r3, [r7, #18]
 80049d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80049da:	827b      	strh	r3, [r7, #18]
 80049dc:	8a7b      	ldrh	r3, [r7, #18]
 80049de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80049e2:	827b      	strh	r3, [r7, #18]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	8a7b      	ldrh	r3, [r7, #18]
 80049ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	8013      	strh	r3, [r2, #0]
 80049fe:	e234      	b.n	8004e6a <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a14:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f280 80fc 	bge.w	8004c16 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004a34:	4013      	ands	r3, r2
 8004a36:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004a4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a50:	b292      	uxth	r2, r2
 8004a52:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004a54:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	4413      	add	r3, r2
 8004a68:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a6c:	7b1b      	ldrb	r3, [r3, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d125      	bne.n	8004abe <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	4413      	add	r3, r2
 8004a86:	3306      	adds	r3, #6
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a9a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004a9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 8092 	beq.w	8004bcc <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aae:	6959      	ldr	r1, [r3, #20]
 8004ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ab2:	88da      	ldrh	r2, [r3, #6]
 8004ab4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ab8:	f007 fc8a 	bl	800c3d0 <USB_ReadPMA>
 8004abc:	e086      	b.n	8004bcc <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004abe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ac0:	78db      	ldrb	r3, [r3, #3]
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d10a      	bne.n	8004adc <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004ac6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004aca:	461a      	mov	r2, r3
 8004acc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f9d9 	bl	8004e86 <HAL_PCD_EP_DB_Receive>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004ada:	e077      	b.n	8004bcc <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004af6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	441a      	add	r2, r3
 8004b08:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004b0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	461a      	mov	r2, r3
 8004b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d024      	beq.n	8004b84 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	461a      	mov	r2, r3
 8004b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4413      	add	r3, r2
 8004b4e:	3302      	adds	r3, #2
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6812      	ldr	r2, [r2, #0]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b62:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004b66:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d02e      	beq.n	8004bcc <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b74:	6959      	ldr	r1, [r3, #20]
 8004b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b78:	891a      	ldrh	r2, [r3, #8]
 8004b7a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004b7e:	f007 fc27 	bl	800c3d0 <USB_ReadPMA>
 8004b82:	e023      	b.n	8004bcc <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	461a      	mov	r2, r3
 8004b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4413      	add	r3, r2
 8004b98:	3306      	adds	r3, #6
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bac:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004bb0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d009      	beq.n	8004bcc <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bbe:	6959      	ldr	r1, [r3, #20]
 8004bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc2:	895a      	ldrh	r2, [r3, #10]
 8004bc4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004bc8:	f007 fc02 	bl	800c3d0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bce:	69da      	ldr	r2, [r3, #28]
 8004bd0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004bd4:	441a      	add	r2, r3
 8004bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bdc:	695a      	ldr	r2, [r3, #20]
 8004bde:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004be2:	441a      	add	r2, r3
 8004be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004be6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <PCD_EP_ISR_Handler+0x51a>
 8004bf0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d206      	bcs.n	8004c0a <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	4619      	mov	r1, r3
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f009 f9ae 	bl	800df64 <HAL_PCD_DataOutStageCallback>
 8004c08:	e005      	b.n	8004c16 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c10:	4618      	mov	r0, r3
 8004c12:	f005 feb8 	bl	800a986 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004c16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 8123 	beq.w	8004e6a <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8004c24:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	4413      	add	r3, r2
 8004c36:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c52:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	441a      	add	r2, r3
 8004c64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c76:	78db      	ldrb	r3, [r3, #3]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	f040 80a2 	bne.w	8004dc2 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8004c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c80:	2200      	movs	r2, #0
 8004c82:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c86:	7b1b      	ldrb	r3, [r3, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 8093 	beq.w	8004db4 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004c8e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d046      	beq.n	8004d28 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c9c:	785b      	ldrb	r3, [r3, #1]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d126      	bne.n	8004cf0 <PCD_EP_ISR_Handler+0x60e>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb6:	4413      	add	r3, r2
 8004cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	011a      	lsls	r2, r3, #4
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004cc8:	623b      	str	r3, [r7, #32]
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	801a      	strh	r2, [r3, #0]
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	801a      	strh	r2, [r3, #0]
 8004cee:	e061      	b.n	8004db4 <PCD_EP_ISR_Handler+0x6d2>
 8004cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cf2:	785b      	ldrb	r3, [r3, #1]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d15d      	bne.n	8004db4 <PCD_EP_ISR_Handler+0x6d2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d0c:	4413      	add	r3, r2
 8004d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	011a      	lsls	r2, r3, #4
 8004d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d18:	4413      	add	r3, r2
 8004d1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d22:	2200      	movs	r2, #0
 8004d24:	801a      	strh	r2, [r3, #0]
 8004d26:	e045      	b.n	8004db4 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d30:	785b      	ldrb	r3, [r3, #1]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d126      	bne.n	8004d84 <PCD_EP_ISR_Handler+0x6a2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	461a      	mov	r2, r3
 8004d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d4a:	4413      	add	r3, r2
 8004d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	011a      	lsls	r2, r3, #4
 8004d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d56:	4413      	add	r3, r2
 8004d58:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6c:	801a      	strh	r2, [r3, #0]
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	801a      	strh	r2, [r3, #0]
 8004d82:	e017      	b.n	8004db4 <PCD_EP_ISR_Handler+0x6d2>
 8004d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d86:	785b      	ldrb	r3, [r3, #1]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d113      	bne.n	8004db4 <PCD_EP_ISR_Handler+0x6d2>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d9a:	4413      	add	r3, r2
 8004d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	011a      	lsls	r2, r3, #4
 8004da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004da6:	4413      	add	r3, r2
 8004da8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004dac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db0:	2200      	movs	r2, #0
 8004db2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004db4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	4619      	mov	r1, r3
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f009 f8ed 	bl	800df9a <HAL_PCD_DataInStageCallback>
 8004dc0:	e053      	b.n	8004e6a <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004dc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d146      	bne.n	8004e5c <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	4413      	add	r3, r2
 8004de2:	3302      	adds	r3, #2
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004df6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d907      	bls.n	8004e16 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8004e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e0e:	1ad2      	subs	r2, r2, r3
 8004e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e12:	619a      	str	r2, [r3, #24]
 8004e14:	e002      	b.n	8004e1c <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e18:	2200      	movs	r2, #0
 8004e1a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d106      	bne.n	8004e32 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	4619      	mov	r1, r3
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f009 f8b5 	bl	800df9a <HAL_PCD_DataInStageCallback>
 8004e30:	e01b      	b.n	8004e6a <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e34:	695a      	ldr	r2, [r3, #20]
 8004e36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e3a:	441a      	add	r2, r3
 8004e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e3e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e48:	441a      	add	r2, r3
 8004e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e4c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e54:	4618      	mov	r0, r3
 8004e56:	f005 fd96 	bl	800a986 <USB_EPStartXfer>
 8004e5a:	e006      	b.n	8004e6a <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004e5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004e60:	461a      	mov	r2, r3
 8004e62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f91b 	bl	80050a0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	b21b      	sxth	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f6ff ac38 	blt.w	80046ec <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3758      	adds	r7, #88	@ 0x58
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b088      	sub	sp, #32
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	4613      	mov	r3, r2
 8004e92:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d07e      	beq.n	8004f9c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	3302      	adds	r3, #2
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ec6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	699a      	ldr	r2, [r3, #24]
 8004ecc:	8b7b      	ldrh	r3, [r7, #26]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d306      	bcc.n	8004ee0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	8b7b      	ldrh	r3, [r7, #26]
 8004ed8:	1ad2      	subs	r2, r2, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	619a      	str	r2, [r3, #24]
 8004ede:	e002      	b.n	8004ee6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d123      	bne.n	8004f36 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f08:	833b      	strh	r3, [r7, #24]
 8004f0a:	8b3b      	ldrh	r3, [r7, #24]
 8004f0c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004f10:	833b      	strh	r3, [r7, #24]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	441a      	add	r2, r3
 8004f20:	8b3b      	ldrh	r3, [r7, #24]
 8004f22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01f      	beq.n	8004f80 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	461a      	mov	r2, r3
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f5a:	82fb      	strh	r3, [r7, #22]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	461a      	mov	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	441a      	add	r2, r3
 8004f6a:	8afb      	ldrh	r3, [r7, #22]
 8004f6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004f80:	8b7b      	ldrh	r3, [r7, #26]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 8087 	beq.w	8005096 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	6959      	ldr	r1, [r3, #20]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	891a      	ldrh	r2, [r3, #8]
 8004f94:	8b7b      	ldrh	r3, [r7, #26]
 8004f96:	f007 fa1b 	bl	800c3d0 <USB_ReadPMA>
 8004f9a:	e07c      	b.n	8005096 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	4413      	add	r3, r2
 8004fb0:	3306      	adds	r3, #6
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fc4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	8b7b      	ldrh	r3, [r7, #26]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d306      	bcc.n	8004fde <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	699a      	ldr	r2, [r3, #24]
 8004fd4:	8b7b      	ldrh	r3, [r7, #26]
 8004fd6:	1ad2      	subs	r2, r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	619a      	str	r2, [r3, #24]
 8004fdc:	e002      	b.n	8004fe4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d123      	bne.n	8005034 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005006:	83fb      	strh	r3, [r7, #30]
 8005008:	8bfb      	ldrh	r3, [r7, #30]
 800500a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800500e:	83fb      	strh	r3, [r7, #30]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	461a      	mov	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	441a      	add	r2, r3
 800501e:	8bfb      	ldrh	r3, [r7, #30]
 8005020:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005024:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005028:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800502c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005030:	b29b      	uxth	r3, r3
 8005032:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005034:	88fb      	ldrh	r3, [r7, #6]
 8005036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d11f      	bne.n	800507e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005058:	83bb      	strh	r3, [r7, #28]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	441a      	add	r2, r3
 8005068:	8bbb      	ldrh	r3, [r7, #28]
 800506a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800506e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005076:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800507a:	b29b      	uxth	r3, r3
 800507c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800507e:	8b7b      	ldrh	r3, [r7, #26]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6818      	ldr	r0, [r3, #0]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	6959      	ldr	r1, [r3, #20]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	895a      	ldrh	r2, [r3, #10]
 8005090:	8b7b      	ldrh	r3, [r7, #26]
 8005092:	f007 f99d 	bl	800c3d0 <USB_ReadPMA>
    }
  }

  return count;
 8005096:	8b7b      	ldrh	r3, [r7, #26]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3720      	adds	r7, #32
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b0a4      	sub	sp, #144	@ 0x90
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	4613      	mov	r3, r2
 80050ac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 81dd 	beq.w	8005474 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	4413      	add	r3, r2
 80050ce:	3302      	adds	r3, #2
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	6812      	ldr	r2, [r2, #0]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050e2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d907      	bls.n	8005102 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80050fa:	1ad2      	subs	r2, r2, r3
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	619a      	str	r2, [r3, #24]
 8005100:	e002      	b.n	8005108 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2200      	movs	r2, #0
 8005106:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	2b00      	cmp	r3, #0
 800510e:	f040 80b9 	bne.w	8005284 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	785b      	ldrb	r3, [r3, #1]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d126      	bne.n	8005168 <HAL_PCD_EP_DB_Transmit+0xc8>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005128:	b29b      	uxth	r3, r3
 800512a:	461a      	mov	r2, r3
 800512c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800512e:	4413      	add	r3, r2
 8005130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	011a      	lsls	r2, r3, #4
 8005138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513a:	4413      	add	r3, r2
 800513c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005140:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800514c:	b29a      	uxth	r2, r3
 800514e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005150:	801a      	strh	r2, [r3, #0]
 8005152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800515c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005160:	b29a      	uxth	r2, r3
 8005162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005164:	801a      	strh	r2, [r3, #0]
 8005166:	e01a      	b.n	800519e <HAL_PCD_EP_DB_Transmit+0xfe>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	785b      	ldrb	r3, [r3, #1]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d116      	bne.n	800519e <HAL_PCD_EP_DB_Transmit+0xfe>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	637b      	str	r3, [r7, #52]	@ 0x34
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800517e:	b29b      	uxth	r3, r3
 8005180:	461a      	mov	r2, r3
 8005182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005184:	4413      	add	r3, r2
 8005186:	637b      	str	r3, [r7, #52]	@ 0x34
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	011a      	lsls	r2, r3, #4
 800518e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005190:	4413      	add	r3, r2
 8005192:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005196:	633b      	str	r3, [r7, #48]	@ 0x30
 8005198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519a:	2200      	movs	r2, #0
 800519c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	785b      	ldrb	r3, [r3, #1]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d126      	bne.n	80051fa <HAL_PCD_EP_DB_Transmit+0x15a>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	61fb      	str	r3, [r7, #28]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	61fb      	str	r3, [r7, #28]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	011a      	lsls	r2, r3, #4
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051d2:	61bb      	str	r3, [r7, #24]
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051de:	b29a      	uxth	r2, r3
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	801a      	strh	r2, [r3, #0]
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	801a      	strh	r2, [r3, #0]
 80051f8:	e017      	b.n	800522a <HAL_PCD_EP_DB_Transmit+0x18a>
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	785b      	ldrb	r3, [r3, #1]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d113      	bne.n	800522a <HAL_PCD_EP_DB_Transmit+0x18a>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800520a:	b29b      	uxth	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	4413      	add	r3, r2
 8005212:	627b      	str	r3, [r7, #36]	@ 0x24
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	011a      	lsls	r2, r3, #4
 800521a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521c:	4413      	add	r3, r2
 800521e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005222:	623b      	str	r3, [r7, #32]
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	2200      	movs	r2, #0
 8005228:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	4619      	mov	r1, r3
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f008 feb2 	bl	800df9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 82fc 	beq.w	800583a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800525c:	82fb      	strh	r3, [r7, #22]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	441a      	add	r2, r3
 800526c:	8afb      	ldrh	r3, [r7, #22]
 800526e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005272:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005276:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800527a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800527e:	b29b      	uxth	r3, r3
 8005280:	8013      	strh	r3, [r2, #0]
 8005282:	e2da      	b.n	800583a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005284:	88fb      	ldrh	r3, [r7, #6]
 8005286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d021      	beq.n	80052d2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052a8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	441a      	add	r2, r3
 80052ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80052be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80052d8:	2b01      	cmp	r3, #1
 80052da:	f040 82ae 	bne.w	800583a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	695a      	ldr	r2, [r3, #20]
 80052e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80052e6:	441a      	add	r2, r3
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	69da      	ldr	r2, [r3, #28]
 80052f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80052f4:	441a      	add	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	6a1a      	ldr	r2, [r3, #32]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	429a      	cmp	r2, r3
 8005304:	d30b      	bcc.n	800531e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	6a1a      	ldr	r2, [r3, #32]
 8005312:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005316:	1ad2      	subs	r2, r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	621a      	str	r2, [r3, #32]
 800531c:	e017      	b.n	800534e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d108      	bne.n	8005338 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8005326:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800532a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005336:	e00a      	b.n	800534e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2200      	movs	r2, #0
 800534c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	785b      	ldrb	r3, [r3, #1]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d165      	bne.n	8005422 <HAL_PCD_EP_DB_Transmit+0x382>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005364:	b29b      	uxth	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800536a:	4413      	add	r3, r2
 800536c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	011a      	lsls	r2, r3, #4
 8005374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005376:	4413      	add	r3, r2
 8005378:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800537c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800537e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	b29b      	uxth	r3, r3
 8005384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005388:	b29a      	uxth	r2, r3
 800538a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538c:	801a      	strh	r2, [r3, #0]
 800538e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005392:	2b3e      	cmp	r3, #62	@ 0x3e
 8005394:	d91d      	bls.n	80053d2 <HAL_PCD_EP_DB_Transmit+0x332>
 8005396:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800539e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053a2:	f003 031f 	and.w	r3, r3, #31
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d102      	bne.n	80053b0 <HAL_PCD_EP_DB_Transmit+0x310>
 80053aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053ac:	3b01      	subs	r3, #1
 80053ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	029b      	lsls	r3, r3, #10
 80053bc:	b29b      	uxth	r3, r3
 80053be:	4313      	orrs	r3, r2
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ce:	801a      	strh	r2, [r3, #0]
 80053d0:	e044      	b.n	800545c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80053d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10a      	bne.n	80053f0 <HAL_PCD_EP_DB_Transmit+0x350>
 80053da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ec:	801a      	strh	r2, [r3, #0]
 80053ee:	e035      	b.n	800545c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80053f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053f4:	085b      	lsrs	r3, r3, #1
 80053f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_PCD_EP_DB_Transmit+0x36a>
 8005404:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005406:	3301      	adds	r3, #1
 8005408:	64bb      	str	r3, [r7, #72]	@ 0x48
 800540a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b29a      	uxth	r2, r3
 8005410:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005412:	b29b      	uxth	r3, r3
 8005414:	029b      	lsls	r3, r3, #10
 8005416:	b29b      	uxth	r3, r3
 8005418:	4313      	orrs	r3, r2
 800541a:	b29a      	uxth	r2, r3
 800541c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541e:	801a      	strh	r2, [r3, #0]
 8005420:	e01c      	b.n	800545c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d118      	bne.n	800545c <HAL_PCD_EP_DB_Transmit+0x3bc>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005438:	b29b      	uxth	r3, r3
 800543a:	461a      	mov	r2, r3
 800543c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800543e:	4413      	add	r3, r2
 8005440:	647b      	str	r3, [r7, #68]	@ 0x44
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	011a      	lsls	r2, r3, #4
 8005448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800544a:	4413      	add	r3, r2
 800544c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005450:	643b      	str	r3, [r7, #64]	@ 0x40
 8005452:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005456:	b29a      	uxth	r2, r3
 8005458:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800545a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	6959      	ldr	r1, [r3, #20]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	891a      	ldrh	r2, [r3, #8]
 8005468:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800546c:	b29b      	uxth	r3, r3
 800546e:	f006 ff69 	bl	800c344 <USB_WritePMA>
 8005472:	e1e2      	b.n	800583a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800547c:	b29b      	uxth	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	4413      	add	r3, r2
 8005488:	3306      	adds	r3, #6
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	6812      	ldr	r2, [r2, #0]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800549c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	699a      	ldr	r2, [r3, #24]
 80054a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d307      	bcc.n	80054bc <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	699a      	ldr	r2, [r3, #24]
 80054b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80054b4:	1ad2      	subs	r2, r2, r3
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	619a      	str	r2, [r3, #24]
 80054ba:	e002      	b.n	80054c2 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2200      	movs	r2, #0
 80054c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f040 80c0 	bne.w	800564c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d126      	bne.n	8005522 <HAL_PCD_EP_DB_Transmit+0x482>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	461a      	mov	r2, r3
 80054e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054e8:	4413      	add	r3, r2
 80054ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	011a      	lsls	r2, r3, #4
 80054f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054f4:	4413      	add	r3, r2
 80054f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	b29b      	uxth	r3, r3
 8005502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005506:	b29a      	uxth	r2, r3
 8005508:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800550a:	801a      	strh	r2, [r3, #0]
 800550c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800551a:	b29a      	uxth	r2, r3
 800551c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800551e:	801a      	strh	r2, [r3, #0]
 8005520:	e01a      	b.n	8005558 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	785b      	ldrb	r3, [r3, #1]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d116      	bne.n	8005558 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005538:	b29b      	uxth	r3, r3
 800553a:	461a      	mov	r2, r3
 800553c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800553e:	4413      	add	r3, r2
 8005540:	667b      	str	r3, [r7, #100]	@ 0x64
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	011a      	lsls	r2, r3, #4
 8005548:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800554a:	4413      	add	r3, r2
 800554c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005550:	663b      	str	r3, [r7, #96]	@ 0x60
 8005552:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005554:	2200      	movs	r2, #0
 8005556:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	677b      	str	r3, [r7, #116]	@ 0x74
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d12b      	bne.n	80055be <HAL_PCD_EP_DB_Transmit+0x51e>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005574:	b29b      	uxth	r3, r3
 8005576:	461a      	mov	r2, r3
 8005578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800557a:	4413      	add	r3, r2
 800557c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	011a      	lsls	r2, r3, #4
 8005584:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005586:	4413      	add	r3, r2
 8005588:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800558c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005590:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	b29b      	uxth	r3, r3
 8005598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800559c:	b29a      	uxth	r2, r3
 800559e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80055a2:	801a      	strh	r2, [r3, #0]
 80055a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80055ba:	801a      	strh	r2, [r3, #0]
 80055bc:	e017      	b.n	80055ee <HAL_PCD_EP_DB_Transmit+0x54e>
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	785b      	ldrb	r3, [r3, #1]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d113      	bne.n	80055ee <HAL_PCD_EP_DB_Transmit+0x54e>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	461a      	mov	r2, r3
 80055d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055d4:	4413      	add	r3, r2
 80055d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	011a      	lsls	r2, r3, #4
 80055de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055e0:	4413      	add	r3, r2
 80055e2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80055e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055ea:	2200      	movs	r2, #0
 80055ec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	4619      	mov	r1, r3
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f008 fcd0 	bl	800df9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80055fa:	88fb      	ldrh	r3, [r7, #6]
 80055fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005600:	2b00      	cmp	r3, #0
 8005602:	f040 811a 	bne.w	800583a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29b      	uxth	r3, r3
 8005618:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800561c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005620:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	461a      	mov	r2, r3
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	441a      	add	r2, r3
 8005632:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005636:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800563a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800563e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005646:	b29b      	uxth	r3, r3
 8005648:	8013      	strh	r3, [r2, #0]
 800564a:	e0f6      	b.n	800583a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800564c:	88fb      	ldrh	r3, [r7, #6]
 800564e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d121      	bne.n	800569a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800566c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005670:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	441a      	add	r2, r3
 8005682:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005686:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800568a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800568e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005696:	b29b      	uxth	r3, r3
 8005698:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	f040 80ca 	bne.w	800583a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	695a      	ldr	r2, [r3, #20]
 80056aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80056ae:	441a      	add	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	69da      	ldr	r2, [r3, #28]
 80056b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80056bc:	441a      	add	r2, r3
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	6a1a      	ldr	r2, [r3, #32]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d30b      	bcc.n	80056e6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	6a1a      	ldr	r2, [r3, #32]
 80056da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056de:	1ad2      	subs	r2, r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	621a      	str	r2, [r3, #32]
 80056e4:	e017      	b.n	8005716 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d108      	bne.n	8005700 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80056ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80056f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80056fe:	e00a      	b.n	8005716 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2200      	movs	r2, #0
 800570c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	657b      	str	r3, [r7, #84]	@ 0x54
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	785b      	ldrb	r3, [r3, #1]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d165      	bne.n	80057f0 <HAL_PCD_EP_DB_Transmit+0x750>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005732:	b29b      	uxth	r3, r3
 8005734:	461a      	mov	r2, r3
 8005736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005738:	4413      	add	r3, r2
 800573a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	011a      	lsls	r2, r3, #4
 8005742:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005744:	4413      	add	r3, r2
 8005746:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800574a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800574c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005756:	b29a      	uxth	r2, r3
 8005758:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800575a:	801a      	strh	r2, [r3, #0]
 800575c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005760:	2b3e      	cmp	r3, #62	@ 0x3e
 8005762:	d91d      	bls.n	80057a0 <HAL_PCD_EP_DB_Transmit+0x700>
 8005764:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800576c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005770:	f003 031f 	and.w	r3, r3, #31
 8005774:	2b00      	cmp	r3, #0
 8005776:	d102      	bne.n	800577e <HAL_PCD_EP_DB_Transmit+0x6de>
 8005778:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800577a:	3b01      	subs	r3, #1
 800577c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800577e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	b29a      	uxth	r2, r3
 8005784:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005786:	b29b      	uxth	r3, r3
 8005788:	029b      	lsls	r3, r3, #10
 800578a:	b29b      	uxth	r3, r3
 800578c:	4313      	orrs	r3, r2
 800578e:	b29b      	uxth	r3, r3
 8005790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005798:	b29a      	uxth	r2, r3
 800579a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800579c:	801a      	strh	r2, [r3, #0]
 800579e:	e041      	b.n	8005824 <HAL_PCD_EP_DB_Transmit+0x784>
 80057a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10a      	bne.n	80057be <HAL_PCD_EP_DB_Transmit+0x71e>
 80057a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057ba:	801a      	strh	r2, [r3, #0]
 80057bc:	e032      	b.n	8005824 <HAL_PCD_EP_DB_Transmit+0x784>
 80057be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057c2:	085b      	lsrs	r3, r3, #1
 80057c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <HAL_PCD_EP_DB_Transmit+0x738>
 80057d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057d4:	3301      	adds	r3, #1
 80057d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29a      	uxth	r2, r3
 80057de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	029b      	lsls	r3, r3, #10
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	4313      	orrs	r3, r2
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057ec:	801a      	strh	r2, [r3, #0]
 80057ee:	e019      	b.n	8005824 <HAL_PCD_EP_DB_Transmit+0x784>
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	785b      	ldrb	r3, [r3, #1]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d115      	bne.n	8005824 <HAL_PCD_EP_DB_Transmit+0x784>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005800:	b29b      	uxth	r3, r3
 8005802:	461a      	mov	r2, r3
 8005804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005806:	4413      	add	r3, r2
 8005808:	657b      	str	r3, [r7, #84]	@ 0x54
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	011a      	lsls	r2, r3, #4
 8005810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005812:	4413      	add	r3, r2
 8005814:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005818:	653b      	str	r3, [r7, #80]	@ 0x50
 800581a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800581e:	b29a      	uxth	r2, r3
 8005820:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005822:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6818      	ldr	r0, [r3, #0]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	6959      	ldr	r1, [r3, #20]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	895a      	ldrh	r2, [r3, #10]
 8005830:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005834:	b29b      	uxth	r3, r3
 8005836:	f006 fd85 	bl	800c344 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	b29b      	uxth	r3, r3
 800584c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005854:	82bb      	strh	r3, [r7, #20]
 8005856:	8abb      	ldrh	r3, [r7, #20]
 8005858:	f083 0310 	eor.w	r3, r3, #16
 800585c:	82bb      	strh	r3, [r7, #20]
 800585e:	8abb      	ldrh	r3, [r7, #20]
 8005860:	f083 0320 	eor.w	r3, r3, #32
 8005864:	82bb      	strh	r3, [r7, #20]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	441a      	add	r2, r3
 8005874:	8abb      	ldrh	r3, [r7, #20]
 8005876:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800587a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800587e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005886:	b29b      	uxth	r3, r3
 8005888:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3790      	adds	r7, #144	@ 0x90
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	607b      	str	r3, [r7, #4]
 800589e:	460b      	mov	r3, r1
 80058a0:	817b      	strh	r3, [r7, #10]
 80058a2:	4613      	mov	r3, r2
 80058a4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80058a6:	897b      	ldrh	r3, [r7, #10]
 80058a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00b      	beq.n	80058ca <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058b2:	897b      	ldrh	r3, [r7, #10]
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	4413      	add	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	e009      	b.n	80058de <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80058ca:	897a      	ldrh	r2, [r7, #10]
 80058cc:	4613      	mov	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4413      	add	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80058de:	893b      	ldrh	r3, [r7, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d107      	bne.n	80058f4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2200      	movs	r2, #0
 80058e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	80da      	strh	r2, [r3, #6]
 80058f2:	e00b      	b.n	800590c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2201      	movs	r2, #1
 80058f8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	0c1b      	lsrs	r3, r3, #16
 8005906:	b29a      	uxth	r2, r3
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
	...

0800591c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8005922:	af00      	add	r7, sp, #0
 8005924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005928:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800592c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800592e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005932:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	f001 b823 	b.w	8006988 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005946:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 817d 	beq.w	8005c52 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005958:	4bbc      	ldr	r3, [pc, #752]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f003 030c 	and.w	r3, r3, #12
 8005960:	2b04      	cmp	r3, #4
 8005962:	d00c      	beq.n	800597e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005964:	4bb9      	ldr	r3, [pc, #740]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f003 030c 	and.w	r3, r3, #12
 800596c:	2b08      	cmp	r3, #8
 800596e:	d15c      	bne.n	8005a2a <HAL_RCC_OscConfig+0x10e>
 8005970:	4bb6      	ldr	r3, [pc, #728]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800597c:	d155      	bne.n	8005a2a <HAL_RCC_OscConfig+0x10e>
 800597e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005982:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005986:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800598a:	fa93 f3a3 	rbit	r3, r3
 800598e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005992:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005996:	fab3 f383 	clz	r3, r3
 800599a:	b2db      	uxtb	r3, r3
 800599c:	095b      	lsrs	r3, r3, #5
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	f043 0301 	orr.w	r3, r3, #1
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d102      	bne.n	80059b0 <HAL_RCC_OscConfig+0x94>
 80059aa:	4ba8      	ldr	r3, [pc, #672]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	e015      	b.n	80059dc <HAL_RCC_OscConfig+0xc0>
 80059b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80059b4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80059bc:	fa93 f3a3 	rbit	r3, r3
 80059c0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80059c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80059c8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80059cc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80059d0:	fa93 f3a3 	rbit	r3, r3
 80059d4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80059d8:	4b9c      	ldr	r3, [pc, #624]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 80059da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80059e0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80059e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80059e8:	fa92 f2a2 	rbit	r2, r2
 80059ec:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80059f0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80059f4:	fab2 f282 	clz	r2, r2
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	f042 0220 	orr.w	r2, r2, #32
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	f002 021f 	and.w	r2, r2, #31
 8005a04:	2101      	movs	r1, #1
 8005a06:	fa01 f202 	lsl.w	r2, r1, r2
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 811f 	beq.w	8005c50 <HAL_RCC_OscConfig+0x334>
 8005a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f040 8116 	bne.w	8005c50 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	f000 bfaf 	b.w	8006988 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a3a:	d106      	bne.n	8005a4a <HAL_RCC_OscConfig+0x12e>
 8005a3c:	4b83      	ldr	r3, [pc, #524]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a82      	ldr	r2, [pc, #520]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005a42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	e036      	b.n	8005ab8 <HAL_RCC_OscConfig+0x19c>
 8005a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10c      	bne.n	8005a74 <HAL_RCC_OscConfig+0x158>
 8005a5a:	4b7c      	ldr	r3, [pc, #496]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a7b      	ldr	r2, [pc, #492]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005a60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	4b79      	ldr	r3, [pc, #484]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a78      	ldr	r2, [pc, #480]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005a6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	e021      	b.n	8005ab8 <HAL_RCC_OscConfig+0x19c>
 8005a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a84:	d10c      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x184>
 8005a86:	4b71      	ldr	r3, [pc, #452]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a70      	ldr	r2, [pc, #448]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005a8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	4b6e      	ldr	r3, [pc, #440]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a6d      	ldr	r2, [pc, #436]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	e00b      	b.n	8005ab8 <HAL_RCC_OscConfig+0x19c>
 8005aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a69      	ldr	r2, [pc, #420]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005aa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aaa:	6013      	str	r3, [r2, #0]
 8005aac:	4b67      	ldr	r3, [pc, #412]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a66      	ldr	r2, [pc, #408]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005ab2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ab6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ab8:	4b64      	ldr	r3, [pc, #400]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abc:	f023 020f 	bic.w	r2, r3, #15
 8005ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ac4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	495f      	ldr	r1, [pc, #380]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ad6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d059      	beq.n	8005b96 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae2:	f7fd f961 	bl	8002da8 <HAL_GetTick>
 8005ae6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aea:	e00a      	b.n	8005b02 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aec:	f7fd f95c 	bl	8002da8 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b64      	cmp	r3, #100	@ 0x64
 8005afa:	d902      	bls.n	8005b02 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	f000 bf43 	b.w	8006988 <HAL_RCC_OscConfig+0x106c>
 8005b02:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b06:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b0a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8005b0e:	fa93 f3a3 	rbit	r3, r3
 8005b12:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8005b16:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b1a:	fab3 f383 	clz	r3, r3
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	095b      	lsrs	r3, r3, #5
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	f043 0301 	orr.w	r3, r3, #1
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d102      	bne.n	8005b34 <HAL_RCC_OscConfig+0x218>
 8005b2e:	4b47      	ldr	r3, [pc, #284]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	e015      	b.n	8005b60 <HAL_RCC_OscConfig+0x244>
 8005b34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b38:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005b40:	fa93 f3a3 	rbit	r3, r3
 8005b44:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005b48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b4c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005b50:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005b54:	fa93 f3a3 	rbit	r3, r3
 8005b58:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b60:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005b64:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8005b68:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8005b6c:	fa92 f2a2 	rbit	r2, r2
 8005b70:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8005b74:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8005b78:	fab2 f282 	clz	r2, r2
 8005b7c:	b2d2      	uxtb	r2, r2
 8005b7e:	f042 0220 	orr.w	r2, r2, #32
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	f002 021f 	and.w	r2, r2, #31
 8005b88:	2101      	movs	r1, #1
 8005b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b8e:	4013      	ands	r3, r2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0ab      	beq.n	8005aec <HAL_RCC_OscConfig+0x1d0>
 8005b94:	e05d      	b.n	8005c52 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b96:	f7fd f907 	bl	8002da8 <HAL_GetTick>
 8005b9a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b9e:	e00a      	b.n	8005bb6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ba0:	f7fd f902 	bl	8002da8 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b64      	cmp	r3, #100	@ 0x64
 8005bae:	d902      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	f000 bee9 	b.w	8006988 <HAL_RCC_OscConfig+0x106c>
 8005bb6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005bba:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bbe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005bc2:	fa93 f3a3 	rbit	r3, r3
 8005bc6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8005bca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bce:	fab3 f383 	clz	r3, r3
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	f043 0301 	orr.w	r3, r3, #1
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d102      	bne.n	8005be8 <HAL_RCC_OscConfig+0x2cc>
 8005be2:	4b1a      	ldr	r3, [pc, #104]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	e015      	b.n	8005c14 <HAL_RCC_OscConfig+0x2f8>
 8005be8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005bec:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005bf4:	fa93 f3a3 	rbit	r3, r3
 8005bf8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005bfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c00:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8005c04:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005c08:	fa93 f3a3 	rbit	r3, r3
 8005c0c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8005c10:	4b0e      	ldr	r3, [pc, #56]	@ (8005c4c <HAL_RCC_OscConfig+0x330>)
 8005c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c14:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005c18:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8005c1c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8005c20:	fa92 f2a2 	rbit	r2, r2
 8005c24:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8005c28:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8005c2c:	fab2 f282 	clz	r2, r2
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	f042 0220 	orr.w	r2, r2, #32
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	f002 021f 	and.w	r2, r2, #31
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c42:	4013      	ands	r3, r2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1ab      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x284>
 8005c48:	e003      	b.n	8005c52 <HAL_RCC_OscConfig+0x336>
 8005c4a:	bf00      	nop
 8005c4c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 817d 	beq.w	8005f62 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005c68:	4ba6      	ldr	r3, [pc, #664]	@ (8005f04 <HAL_RCC_OscConfig+0x5e8>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f003 030c 	and.w	r3, r3, #12
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00b      	beq.n	8005c8c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005c74:	4ba3      	ldr	r3, [pc, #652]	@ (8005f04 <HAL_RCC_OscConfig+0x5e8>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f003 030c 	and.w	r3, r3, #12
 8005c7c:	2b08      	cmp	r3, #8
 8005c7e:	d172      	bne.n	8005d66 <HAL_RCC_OscConfig+0x44a>
 8005c80:	4ba0      	ldr	r3, [pc, #640]	@ (8005f04 <HAL_RCC_OscConfig+0x5e8>)
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d16c      	bne.n	8005d66 <HAL_RCC_OscConfig+0x44a>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c92:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005c96:	fa93 f3a3 	rbit	r3, r3
 8005c9a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8005c9e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ca2:	fab3 f383 	clz	r3, r3
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	095b      	lsrs	r3, r3, #5
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	f043 0301 	orr.w	r3, r3, #1
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d102      	bne.n	8005cbc <HAL_RCC_OscConfig+0x3a0>
 8005cb6:	4b93      	ldr	r3, [pc, #588]	@ (8005f04 <HAL_RCC_OscConfig+0x5e8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	e013      	b.n	8005ce4 <HAL_RCC_OscConfig+0x3c8>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8005cc6:	fa93 f3a3 	rbit	r3, r3
 8005cca:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8005cce:	2302      	movs	r3, #2
 8005cd0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8005cd4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005cd8:	fa93 f3a3 	rbit	r3, r3
 8005cdc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8005ce0:	4b88      	ldr	r3, [pc, #544]	@ (8005f04 <HAL_RCC_OscConfig+0x5e8>)
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8005cea:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8005cee:	fa92 f2a2 	rbit	r2, r2
 8005cf2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8005cf6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8005cfa:	fab2 f282 	clz	r2, r2
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	f042 0220 	orr.w	r2, r2, #32
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	f002 021f 	and.w	r2, r2, #31
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d10:	4013      	ands	r3, r2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00a      	beq.n	8005d2c <HAL_RCC_OscConfig+0x410>
 8005d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d002      	beq.n	8005d2c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	f000 be2e 	b.w	8006988 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d2c:	4b75      	ldr	r3, [pc, #468]	@ (8005f04 <HAL_RCC_OscConfig+0x5e8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	21f8      	movs	r1, #248	@ 0xf8
 8005d42:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d46:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8005d4a:	fa91 f1a1 	rbit	r1, r1
 8005d4e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8005d52:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8005d56:	fab1 f181 	clz	r1, r1
 8005d5a:	b2c9      	uxtb	r1, r1
 8005d5c:	408b      	lsls	r3, r1
 8005d5e:	4969      	ldr	r1, [pc, #420]	@ (8005f04 <HAL_RCC_OscConfig+0x5e8>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d64:	e0fd      	b.n	8005f62 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 8088 	beq.w	8005e88 <HAL_RCC_OscConfig+0x56c>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d7e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8005d82:	fa93 f3a3 	rbit	r3, r3
 8005d86:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8005d8a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d8e:	fab3 f383 	clz	r3, r3
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005d98:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	461a      	mov	r2, r3
 8005da0:	2301      	movs	r3, #1
 8005da2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da4:	f7fd f800 	bl	8002da8 <HAL_GetTick>
 8005da8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dac:	e00a      	b.n	8005dc4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dae:	f7fc fffb 	bl	8002da8 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d902      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	f000 bde2 	b.w	8006988 <HAL_RCC_OscConfig+0x106c>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dca:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8005dce:	fa93 f3a3 	rbit	r3, r3
 8005dd2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8005dd6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dda:	fab3 f383 	clz	r3, r3
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	095b      	lsrs	r3, r3, #5
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	f043 0301 	orr.w	r3, r3, #1
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d102      	bne.n	8005df4 <HAL_RCC_OscConfig+0x4d8>
 8005dee:	4b45      	ldr	r3, [pc, #276]	@ (8005f04 <HAL_RCC_OscConfig+0x5e8>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	e013      	b.n	8005e1c <HAL_RCC_OscConfig+0x500>
 8005df4:	2302      	movs	r3, #2
 8005df6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfa:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8005dfe:	fa93 f3a3 	rbit	r3, r3
 8005e02:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8005e06:	2302      	movs	r3, #2
 8005e08:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8005e0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8005e10:	fa93 f3a3 	rbit	r3, r3
 8005e14:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8005e18:	4b3a      	ldr	r3, [pc, #232]	@ (8005f04 <HAL_RCC_OscConfig+0x5e8>)
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8005e22:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8005e26:	fa92 f2a2 	rbit	r2, r2
 8005e2a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8005e2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8005e32:	fab2 f282 	clz	r2, r2
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	f042 0220 	orr.w	r2, r2, #32
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	f002 021f 	and.w	r2, r2, #31
 8005e42:	2101      	movs	r1, #1
 8005e44:	fa01 f202 	lsl.w	r2, r1, r2
 8005e48:	4013      	ands	r3, r2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0af      	beq.n	8005dae <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8005f04 <HAL_RCC_OscConfig+0x5e8>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	21f8      	movs	r1, #248	@ 0xf8
 8005e64:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e68:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005e6c:	fa91 f1a1 	rbit	r1, r1
 8005e70:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8005e74:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8005e78:	fab1 f181 	clz	r1, r1
 8005e7c:	b2c9      	uxtb	r1, r1
 8005e7e:	408b      	lsls	r3, r1
 8005e80:	4920      	ldr	r1, [pc, #128]	@ (8005f04 <HAL_RCC_OscConfig+0x5e8>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	600b      	str	r3, [r1, #0]
 8005e86:	e06c      	b.n	8005f62 <HAL_RCC_OscConfig+0x646>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005e92:	fa93 f3a3 	rbit	r3, r3
 8005e96:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8005e9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e9e:	fab3 f383 	clz	r3, r3
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005ea8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	461a      	mov	r2, r3
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb4:	f7fc ff78 	bl	8002da8 <HAL_GetTick>
 8005eb8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ebc:	e00a      	b.n	8005ed4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ebe:	f7fc ff73 	bl	8002da8 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d902      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	f000 bd5a 	b.w	8006988 <HAL_RCC_OscConfig+0x106c>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eda:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005ede:	fa93 f3a3 	rbit	r3, r3
 8005ee2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8005ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eea:	fab3 f383 	clz	r3, r3
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	095b      	lsrs	r3, r3, #5
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	f043 0301 	orr.w	r3, r3, #1
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d104      	bne.n	8005f08 <HAL_RCC_OscConfig+0x5ec>
 8005efe:	4b01      	ldr	r3, [pc, #4]	@ (8005f04 <HAL_RCC_OscConfig+0x5e8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	e015      	b.n	8005f30 <HAL_RCC_OscConfig+0x614>
 8005f04:	40021000 	.word	0x40021000
 8005f08:	2302      	movs	r3, #2
 8005f0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f12:	fa93 f3a3 	rbit	r3, r3
 8005f16:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005f20:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f24:	fa93 f3a3 	rbit	r3, r3
 8005f28:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005f2c:	4bc8      	ldr	r3, [pc, #800]	@ (8006250 <HAL_RCC_OscConfig+0x934>)
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f30:	2202      	movs	r2, #2
 8005f32:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8005f36:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005f3a:	fa92 f2a2 	rbit	r2, r2
 8005f3e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8005f42:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005f46:	fab2 f282 	clz	r2, r2
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	f042 0220 	orr.w	r2, r2, #32
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	f002 021f 	and.w	r2, r2, #31
 8005f56:	2101      	movs	r1, #1
 8005f58:	fa01 f202 	lsl.w	r2, r1, r2
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1ad      	bne.n	8005ebe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 8110 	beq.w	8006198 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d079      	beq.n	800607c <HAL_RCC_OscConfig+0x760>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005f92:	fa93 f3a3 	rbit	r3, r3
 8005f96:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8005f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f9e:	fab3 f383 	clz	r3, r3
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4bab      	ldr	r3, [pc, #684]	@ (8006254 <HAL_RCC_OscConfig+0x938>)
 8005fa8:	4413      	add	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	461a      	mov	r2, r3
 8005fae:	2301      	movs	r3, #1
 8005fb0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fb2:	f7fc fef9 	bl	8002da8 <HAL_GetTick>
 8005fb6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fba:	e00a      	b.n	8005fd2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fbc:	f7fc fef4 	bl	8002da8 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d902      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	f000 bcdb 	b.w	8006988 <HAL_RCC_OscConfig+0x106c>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005fdc:	fa93 f3a3 	rbit	r3, r3
 8005fe0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fe8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005fec:	2202      	movs	r2, #2
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ff4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	fa93 f2a3 	rbit	r2, r3
 8005ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006002:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800600c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006010:	2202      	movs	r2, #2
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	fa93 f2a3 	rbit	r2, r3
 8006022:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006026:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800602a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800602c:	4b88      	ldr	r3, [pc, #544]	@ (8006250 <HAL_RCC_OscConfig+0x934>)
 800602e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006034:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006038:	2102      	movs	r1, #2
 800603a:	6019      	str	r1, [r3, #0]
 800603c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006040:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	fa93 f1a3 	rbit	r1, r3
 800604a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800604e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006052:	6019      	str	r1, [r3, #0]
  return result;
 8006054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006058:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	fab3 f383 	clz	r3, r3
 8006062:	b2db      	uxtb	r3, r3
 8006064:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006068:	b2db      	uxtb	r3, r3
 800606a:	f003 031f 	and.w	r3, r3, #31
 800606e:	2101      	movs	r1, #1
 8006070:	fa01 f303 	lsl.w	r3, r1, r3
 8006074:	4013      	ands	r3, r2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0a0      	beq.n	8005fbc <HAL_RCC_OscConfig+0x6a0>
 800607a:	e08d      	b.n	8006198 <HAL_RCC_OscConfig+0x87c>
 800607c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006080:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006084:	2201      	movs	r2, #1
 8006086:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800608c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	fa93 f2a3 	rbit	r2, r3
 8006096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800609a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800609e:	601a      	str	r2, [r3, #0]
  return result;
 80060a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060a4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80060a8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060aa:	fab3 f383 	clz	r3, r3
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	461a      	mov	r2, r3
 80060b2:	4b68      	ldr	r3, [pc, #416]	@ (8006254 <HAL_RCC_OscConfig+0x938>)
 80060b4:	4413      	add	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	461a      	mov	r2, r3
 80060ba:	2300      	movs	r3, #0
 80060bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060be:	f7fc fe73 	bl	8002da8 <HAL_GetTick>
 80060c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060c6:	e00a      	b.n	80060de <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060c8:	f7fc fe6e 	bl	8002da8 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d902      	bls.n	80060de <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	f000 bc55 	b.w	8006988 <HAL_RCC_OscConfig+0x106c>
 80060de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80060e6:	2202      	movs	r2, #2
 80060e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	fa93 f2a3 	rbit	r2, r3
 80060f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060fc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006106:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800610a:	2202      	movs	r2, #2
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006112:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	fa93 f2a3 	rbit	r2, r3
 800611c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006120:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800612a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800612e:	2202      	movs	r2, #2
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006136:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	fa93 f2a3 	rbit	r2, r3
 8006140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006144:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006148:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800614a:	4b41      	ldr	r3, [pc, #260]	@ (8006250 <HAL_RCC_OscConfig+0x934>)
 800614c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800614e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006152:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006156:	2102      	movs	r1, #2
 8006158:	6019      	str	r1, [r3, #0]
 800615a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800615e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	fa93 f1a3 	rbit	r1, r3
 8006168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800616c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006170:	6019      	str	r1, [r3, #0]
  return result;
 8006172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006176:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	fab3 f383 	clz	r3, r3
 8006180:	b2db      	uxtb	r3, r3
 8006182:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006186:	b2db      	uxtb	r3, r3
 8006188:	f003 031f 	and.w	r3, r3, #31
 800618c:	2101      	movs	r1, #1
 800618e:	fa01 f303 	lsl.w	r3, r1, r3
 8006192:	4013      	ands	r3, r2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d197      	bne.n	80060c8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800619c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0304 	and.w	r3, r3, #4
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 81a1 	beq.w	80064f0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061ae:	2300      	movs	r3, #0
 80061b0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061b4:	4b26      	ldr	r3, [pc, #152]	@ (8006250 <HAL_RCC_OscConfig+0x934>)
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d116      	bne.n	80061ee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061c0:	4b23      	ldr	r3, [pc, #140]	@ (8006250 <HAL_RCC_OscConfig+0x934>)
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	4a22      	ldr	r2, [pc, #136]	@ (8006250 <HAL_RCC_OscConfig+0x934>)
 80061c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061ca:	61d3      	str	r3, [r2, #28]
 80061cc:	4b20      	ldr	r3, [pc, #128]	@ (8006250 <HAL_RCC_OscConfig+0x934>)
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80061d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061d8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061e2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80061e6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80061e8:	2301      	movs	r3, #1
 80061ea:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006258 <HAL_RCC_OscConfig+0x93c>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d11a      	bne.n	8006230 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061fa:	4b17      	ldr	r3, [pc, #92]	@ (8006258 <HAL_RCC_OscConfig+0x93c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a16      	ldr	r2, [pc, #88]	@ (8006258 <HAL_RCC_OscConfig+0x93c>)
 8006200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006204:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006206:	f7fc fdcf 	bl	8002da8 <HAL_GetTick>
 800620a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800620e:	e009      	b.n	8006224 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006210:	f7fc fdca 	bl	8002da8 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	2b64      	cmp	r3, #100	@ 0x64
 800621e:	d901      	bls.n	8006224 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e3b1      	b.n	8006988 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006224:	4b0c      	ldr	r3, [pc, #48]	@ (8006258 <HAL_RCC_OscConfig+0x93c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0ef      	beq.n	8006210 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006234:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d10d      	bne.n	800625c <HAL_RCC_OscConfig+0x940>
 8006240:	4b03      	ldr	r3, [pc, #12]	@ (8006250 <HAL_RCC_OscConfig+0x934>)
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	4a02      	ldr	r2, [pc, #8]	@ (8006250 <HAL_RCC_OscConfig+0x934>)
 8006246:	f043 0301 	orr.w	r3, r3, #1
 800624a:	6213      	str	r3, [r2, #32]
 800624c:	e03c      	b.n	80062c8 <HAL_RCC_OscConfig+0x9ac>
 800624e:	bf00      	nop
 8006250:	40021000 	.word	0x40021000
 8006254:	10908120 	.word	0x10908120
 8006258:	40007000 	.word	0x40007000
 800625c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006260:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10c      	bne.n	8006286 <HAL_RCC_OscConfig+0x96a>
 800626c:	4bc1      	ldr	r3, [pc, #772]	@ (8006574 <HAL_RCC_OscConfig+0xc58>)
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	4ac0      	ldr	r2, [pc, #768]	@ (8006574 <HAL_RCC_OscConfig+0xc58>)
 8006272:	f023 0301 	bic.w	r3, r3, #1
 8006276:	6213      	str	r3, [r2, #32]
 8006278:	4bbe      	ldr	r3, [pc, #760]	@ (8006574 <HAL_RCC_OscConfig+0xc58>)
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	4abd      	ldr	r2, [pc, #756]	@ (8006574 <HAL_RCC_OscConfig+0xc58>)
 800627e:	f023 0304 	bic.w	r3, r3, #4
 8006282:	6213      	str	r3, [r2, #32]
 8006284:	e020      	b.n	80062c8 <HAL_RCC_OscConfig+0x9ac>
 8006286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800628a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	2b05      	cmp	r3, #5
 8006294:	d10c      	bne.n	80062b0 <HAL_RCC_OscConfig+0x994>
 8006296:	4bb7      	ldr	r3, [pc, #732]	@ (8006574 <HAL_RCC_OscConfig+0xc58>)
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	4ab6      	ldr	r2, [pc, #728]	@ (8006574 <HAL_RCC_OscConfig+0xc58>)
 800629c:	f043 0304 	orr.w	r3, r3, #4
 80062a0:	6213      	str	r3, [r2, #32]
 80062a2:	4bb4      	ldr	r3, [pc, #720]	@ (8006574 <HAL_RCC_OscConfig+0xc58>)
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	4ab3      	ldr	r2, [pc, #716]	@ (8006574 <HAL_RCC_OscConfig+0xc58>)
 80062a8:	f043 0301 	orr.w	r3, r3, #1
 80062ac:	6213      	str	r3, [r2, #32]
 80062ae:	e00b      	b.n	80062c8 <HAL_RCC_OscConfig+0x9ac>
 80062b0:	4bb0      	ldr	r3, [pc, #704]	@ (8006574 <HAL_RCC_OscConfig+0xc58>)
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	4aaf      	ldr	r2, [pc, #700]	@ (8006574 <HAL_RCC_OscConfig+0xc58>)
 80062b6:	f023 0301 	bic.w	r3, r3, #1
 80062ba:	6213      	str	r3, [r2, #32]
 80062bc:	4bad      	ldr	r3, [pc, #692]	@ (8006574 <HAL_RCC_OscConfig+0xc58>)
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	4aac      	ldr	r2, [pc, #688]	@ (8006574 <HAL_RCC_OscConfig+0xc58>)
 80062c2:	f023 0304 	bic.w	r3, r3, #4
 80062c6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 8081 	beq.w	80063dc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062da:	f7fc fd65 	bl	8002da8 <HAL_GetTick>
 80062de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062e2:	e00b      	b.n	80062fc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062e4:	f7fc fd60 	bl	8002da8 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d901      	bls.n	80062fc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e345      	b.n	8006988 <HAL_RCC_OscConfig+0x106c>
 80062fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006300:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006304:	2202      	movs	r2, #2
 8006306:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800630c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	fa93 f2a3 	rbit	r2, r3
 8006316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800631a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006324:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006328:	2202      	movs	r2, #2
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006330:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	fa93 f2a3 	rbit	r2, r3
 800633a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800633e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006342:	601a      	str	r2, [r3, #0]
  return result;
 8006344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006348:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800634c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800634e:	fab3 f383 	clz	r3, r3
 8006352:	b2db      	uxtb	r3, r3
 8006354:	095b      	lsrs	r3, r3, #5
 8006356:	b2db      	uxtb	r3, r3
 8006358:	f043 0302 	orr.w	r3, r3, #2
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b02      	cmp	r3, #2
 8006360:	d102      	bne.n	8006368 <HAL_RCC_OscConfig+0xa4c>
 8006362:	4b84      	ldr	r3, [pc, #528]	@ (8006574 <HAL_RCC_OscConfig+0xc58>)
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	e013      	b.n	8006390 <HAL_RCC_OscConfig+0xa74>
 8006368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800636c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006370:	2202      	movs	r2, #2
 8006372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006378:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	fa93 f2a3 	rbit	r2, r3
 8006382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006386:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	4b79      	ldr	r3, [pc, #484]	@ (8006574 <HAL_RCC_OscConfig+0xc58>)
 800638e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006390:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006394:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006398:	2102      	movs	r1, #2
 800639a:	6011      	str	r1, [r2, #0]
 800639c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063a0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80063a4:	6812      	ldr	r2, [r2, #0]
 80063a6:	fa92 f1a2 	rbit	r1, r2
 80063aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063ae:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80063b2:	6011      	str	r1, [r2, #0]
  return result;
 80063b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063b8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80063bc:	6812      	ldr	r2, [r2, #0]
 80063be:	fab2 f282 	clz	r2, r2
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	f002 021f 	and.w	r2, r2, #31
 80063ce:	2101      	movs	r1, #1
 80063d0:	fa01 f202 	lsl.w	r2, r1, r2
 80063d4:	4013      	ands	r3, r2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d084      	beq.n	80062e4 <HAL_RCC_OscConfig+0x9c8>
 80063da:	e07f      	b.n	80064dc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063dc:	f7fc fce4 	bl	8002da8 <HAL_GetTick>
 80063e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063e4:	e00b      	b.n	80063fe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063e6:	f7fc fcdf 	bl	8002da8 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e2c4      	b.n	8006988 <HAL_RCC_OscConfig+0x106c>
 80063fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006402:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006406:	2202      	movs	r2, #2
 8006408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800640a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800640e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	fa93 f2a3 	rbit	r2, r3
 8006418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800641c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006426:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800642a:	2202      	movs	r2, #2
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006432:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	fa93 f2a3 	rbit	r2, r3
 800643c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006440:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006444:	601a      	str	r2, [r3, #0]
  return result;
 8006446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800644a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800644e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006450:	fab3 f383 	clz	r3, r3
 8006454:	b2db      	uxtb	r3, r3
 8006456:	095b      	lsrs	r3, r3, #5
 8006458:	b2db      	uxtb	r3, r3
 800645a:	f043 0302 	orr.w	r3, r3, #2
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d102      	bne.n	800646a <HAL_RCC_OscConfig+0xb4e>
 8006464:	4b43      	ldr	r3, [pc, #268]	@ (8006574 <HAL_RCC_OscConfig+0xc58>)
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	e013      	b.n	8006492 <HAL_RCC_OscConfig+0xb76>
 800646a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800646e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8006472:	2202      	movs	r2, #2
 8006474:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800647a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	fa93 f2a3 	rbit	r2, r3
 8006484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006488:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	4b39      	ldr	r3, [pc, #228]	@ (8006574 <HAL_RCC_OscConfig+0xc58>)
 8006490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006492:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006496:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800649a:	2102      	movs	r1, #2
 800649c:	6011      	str	r1, [r2, #0]
 800649e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064a2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80064a6:	6812      	ldr	r2, [r2, #0]
 80064a8:	fa92 f1a2 	rbit	r1, r2
 80064ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064b0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80064b4:	6011      	str	r1, [r2, #0]
  return result;
 80064b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064ba:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80064be:	6812      	ldr	r2, [r2, #0]
 80064c0:	fab2 f282 	clz	r2, r2
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	f002 021f 	and.w	r2, r2, #31
 80064d0:	2101      	movs	r1, #1
 80064d2:	fa01 f202 	lsl.w	r2, r1, r2
 80064d6:	4013      	ands	r3, r2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d184      	bne.n	80063e6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80064dc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d105      	bne.n	80064f0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064e4:	4b23      	ldr	r3, [pc, #140]	@ (8006574 <HAL_RCC_OscConfig+0xc58>)
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	4a22      	ldr	r2, [pc, #136]	@ (8006574 <HAL_RCC_OscConfig+0xc58>)
 80064ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69db      	ldr	r3, [r3, #28]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 8242 	beq.w	8006986 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006502:	4b1c      	ldr	r3, [pc, #112]	@ (8006574 <HAL_RCC_OscConfig+0xc58>)
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f003 030c 	and.w	r3, r3, #12
 800650a:	2b08      	cmp	r3, #8
 800650c:	f000 8213 	beq.w	8006936 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006514:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	2b02      	cmp	r3, #2
 800651e:	f040 8162 	bne.w	80067e6 <HAL_RCC_OscConfig+0xeca>
 8006522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006526:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800652a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800652e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006534:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	fa93 f2a3 	rbit	r2, r3
 800653e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006542:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006546:	601a      	str	r2, [r3, #0]
  return result;
 8006548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800654c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006550:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006552:	fab3 f383 	clz	r3, r3
 8006556:	b2db      	uxtb	r3, r3
 8006558:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800655c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	461a      	mov	r2, r3
 8006564:	2300      	movs	r3, #0
 8006566:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006568:	f7fc fc1e 	bl	8002da8 <HAL_GetTick>
 800656c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006570:	e00c      	b.n	800658c <HAL_RCC_OscConfig+0xc70>
 8006572:	bf00      	nop
 8006574:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006578:	f7fc fc16 	bl	8002da8 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e1fd      	b.n	8006988 <HAL_RCC_OscConfig+0x106c>
 800658c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006590:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006594:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006598:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800659a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800659e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	fa93 f2a3 	rbit	r2, r3
 80065a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065ac:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80065b0:	601a      	str	r2, [r3, #0]
  return result;
 80065b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065b6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80065ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065bc:	fab3 f383 	clz	r3, r3
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	095b      	lsrs	r3, r3, #5
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	f043 0301 	orr.w	r3, r3, #1
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d102      	bne.n	80065d6 <HAL_RCC_OscConfig+0xcba>
 80065d0:	4bb0      	ldr	r3, [pc, #704]	@ (8006894 <HAL_RCC_OscConfig+0xf78>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	e027      	b.n	8006626 <HAL_RCC_OscConfig+0xd0a>
 80065d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065da:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80065de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065e8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	fa93 f2a3 	rbit	r2, r3
 80065f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065f6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006600:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8006604:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800660e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	fa93 f2a3 	rbit	r2, r3
 8006618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800661c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	4b9c      	ldr	r3, [pc, #624]	@ (8006894 <HAL_RCC_OscConfig+0xf78>)
 8006624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006626:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800662a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800662e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006632:	6011      	str	r1, [r2, #0]
 8006634:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006638:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800663c:	6812      	ldr	r2, [r2, #0]
 800663e:	fa92 f1a2 	rbit	r1, r2
 8006642:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006646:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800664a:	6011      	str	r1, [r2, #0]
  return result;
 800664c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006650:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006654:	6812      	ldr	r2, [r2, #0]
 8006656:	fab2 f282 	clz	r2, r2
 800665a:	b2d2      	uxtb	r2, r2
 800665c:	f042 0220 	orr.w	r2, r2, #32
 8006660:	b2d2      	uxtb	r2, r2
 8006662:	f002 021f 	and.w	r2, r2, #31
 8006666:	2101      	movs	r1, #1
 8006668:	fa01 f202 	lsl.w	r2, r1, r2
 800666c:	4013      	ands	r3, r2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d182      	bne.n	8006578 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006672:	4b88      	ldr	r3, [pc, #544]	@ (8006894 <HAL_RCC_OscConfig+0xf78>)
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800667a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800667e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800668a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	430b      	orrs	r3, r1
 8006694:	497f      	ldr	r1, [pc, #508]	@ (8006894 <HAL_RCC_OscConfig+0xf78>)
 8006696:	4313      	orrs	r3, r2
 8006698:	604b      	str	r3, [r1, #4]
 800669a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800669e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80066a2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066ac:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	fa93 f2a3 	rbit	r2, r3
 80066b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066ba:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80066be:	601a      	str	r2, [r3, #0]
  return result;
 80066c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066c4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80066c8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066ca:	fab3 f383 	clz	r3, r3
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80066d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	461a      	mov	r2, r3
 80066dc:	2301      	movs	r3, #1
 80066de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066e0:	f7fc fb62 	bl	8002da8 <HAL_GetTick>
 80066e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066e8:	e009      	b.n	80066fe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066ea:	f7fc fb5d 	bl	8002da8 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e144      	b.n	8006988 <HAL_RCC_OscConfig+0x106c>
 80066fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006702:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006706:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800670a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800670c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006710:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	fa93 f2a3 	rbit	r2, r3
 800671a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800671e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006722:	601a      	str	r2, [r3, #0]
  return result;
 8006724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006728:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800672c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800672e:	fab3 f383 	clz	r3, r3
 8006732:	b2db      	uxtb	r3, r3
 8006734:	095b      	lsrs	r3, r3, #5
 8006736:	b2db      	uxtb	r3, r3
 8006738:	f043 0301 	orr.w	r3, r3, #1
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b01      	cmp	r3, #1
 8006740:	d102      	bne.n	8006748 <HAL_RCC_OscConfig+0xe2c>
 8006742:	4b54      	ldr	r3, [pc, #336]	@ (8006894 <HAL_RCC_OscConfig+0xf78>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	e027      	b.n	8006798 <HAL_RCC_OscConfig+0xe7c>
 8006748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800674c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006750:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006754:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800675a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	fa93 f2a3 	rbit	r2, r3
 8006764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006768:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006772:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006776:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006780:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	fa93 f2a3 	rbit	r2, r3
 800678a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800678e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	4b3f      	ldr	r3, [pc, #252]	@ (8006894 <HAL_RCC_OscConfig+0xf78>)
 8006796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006798:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800679c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80067a0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80067a4:	6011      	str	r1, [r2, #0]
 80067a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067aa:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80067ae:	6812      	ldr	r2, [r2, #0]
 80067b0:	fa92 f1a2 	rbit	r1, r2
 80067b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067b8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80067bc:	6011      	str	r1, [r2, #0]
  return result;
 80067be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067c2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80067c6:	6812      	ldr	r2, [r2, #0]
 80067c8:	fab2 f282 	clz	r2, r2
 80067cc:	b2d2      	uxtb	r2, r2
 80067ce:	f042 0220 	orr.w	r2, r2, #32
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	f002 021f 	and.w	r2, r2, #31
 80067d8:	2101      	movs	r1, #1
 80067da:	fa01 f202 	lsl.w	r2, r1, r2
 80067de:	4013      	ands	r3, r2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d082      	beq.n	80066ea <HAL_RCC_OscConfig+0xdce>
 80067e4:	e0cf      	b.n	8006986 <HAL_RCC_OscConfig+0x106a>
 80067e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067ea:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80067ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067f8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	fa93 f2a3 	rbit	r2, r3
 8006802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006806:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800680a:	601a      	str	r2, [r3, #0]
  return result;
 800680c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006810:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006814:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006816:	fab3 f383 	clz	r3, r3
 800681a:	b2db      	uxtb	r3, r3
 800681c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006820:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	461a      	mov	r2, r3
 8006828:	2300      	movs	r3, #0
 800682a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800682c:	f7fc fabc 	bl	8002da8 <HAL_GetTick>
 8006830:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006834:	e009      	b.n	800684a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006836:	f7fc fab7 	bl	8002da8 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b02      	cmp	r3, #2
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e09e      	b.n	8006988 <HAL_RCC_OscConfig+0x106c>
 800684a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800684e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006852:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006856:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800685c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	fa93 f2a3 	rbit	r2, r3
 8006866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800686a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800686e:	601a      	str	r2, [r3, #0]
  return result;
 8006870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006874:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006878:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800687a:	fab3 f383 	clz	r3, r3
 800687e:	b2db      	uxtb	r3, r3
 8006880:	095b      	lsrs	r3, r3, #5
 8006882:	b2db      	uxtb	r3, r3
 8006884:	f043 0301 	orr.w	r3, r3, #1
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b01      	cmp	r3, #1
 800688c:	d104      	bne.n	8006898 <HAL_RCC_OscConfig+0xf7c>
 800688e:	4b01      	ldr	r3, [pc, #4]	@ (8006894 <HAL_RCC_OscConfig+0xf78>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	e029      	b.n	80068e8 <HAL_RCC_OscConfig+0xfcc>
 8006894:	40021000 	.word	0x40021000
 8006898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800689c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80068a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068aa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	fa93 f2a3 	rbit	r2, r3
 80068b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068b8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068c2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80068c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068d0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	fa93 f2a3 	rbit	r2, r3
 80068da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068de:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006994 <HAL_RCC_OscConfig+0x1078>)
 80068e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80068ec:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80068f0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80068f4:	6011      	str	r1, [r2, #0]
 80068f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80068fa:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80068fe:	6812      	ldr	r2, [r2, #0]
 8006900:	fa92 f1a2 	rbit	r1, r2
 8006904:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006908:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800690c:	6011      	str	r1, [r2, #0]
  return result;
 800690e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006912:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006916:	6812      	ldr	r2, [r2, #0]
 8006918:	fab2 f282 	clz	r2, r2
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	f042 0220 	orr.w	r2, r2, #32
 8006922:	b2d2      	uxtb	r2, r2
 8006924:	f002 021f 	and.w	r2, r2, #31
 8006928:	2101      	movs	r1, #1
 800692a:	fa01 f202 	lsl.w	r2, r1, r2
 800692e:	4013      	ands	r3, r2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d180      	bne.n	8006836 <HAL_RCC_OscConfig+0xf1a>
 8006934:	e027      	b.n	8006986 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800693a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e01e      	b.n	8006988 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800694a:	4b12      	ldr	r3, [pc, #72]	@ (8006994 <HAL_RCC_OscConfig+0x1078>)
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006952:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006956:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800695a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800695e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	429a      	cmp	r2, r3
 8006968:	d10b      	bne.n	8006982 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800696a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800696e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006976:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800697e:	429a      	cmp	r2, r3
 8006980:	d001      	beq.n	8006986 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e000      	b.n	8006988 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	40021000 	.word	0x40021000

08006998 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b09e      	sub	sp, #120	@ 0x78
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e162      	b.n	8006c76 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069b0:	4b90      	ldr	r3, [pc, #576]	@ (8006bf4 <HAL_RCC_ClockConfig+0x25c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0307 	and.w	r3, r3, #7
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d910      	bls.n	80069e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069be:	4b8d      	ldr	r3, [pc, #564]	@ (8006bf4 <HAL_RCC_ClockConfig+0x25c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f023 0207 	bic.w	r2, r3, #7
 80069c6:	498b      	ldr	r1, [pc, #556]	@ (8006bf4 <HAL_RCC_ClockConfig+0x25c>)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ce:	4b89      	ldr	r3, [pc, #548]	@ (8006bf4 <HAL_RCC_ClockConfig+0x25c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d001      	beq.n	80069e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e14a      	b.n	8006c76 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0302 	and.w	r3, r3, #2
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d008      	beq.n	80069fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069ec:	4b82      	ldr	r3, [pc, #520]	@ (8006bf8 <HAL_RCC_ClockConfig+0x260>)
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	497f      	ldr	r1, [pc, #508]	@ (8006bf8 <HAL_RCC_ClockConfig+0x260>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 80dc 	beq.w	8006bc4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d13c      	bne.n	8006a8e <HAL_RCC_ClockConfig+0xf6>
 8006a14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a18:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a1c:	fa93 f3a3 	rbit	r3, r3
 8006a20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a24:	fab3 f383 	clz	r3, r3
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	095b      	lsrs	r3, r3, #5
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	f043 0301 	orr.w	r3, r3, #1
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d102      	bne.n	8006a3e <HAL_RCC_ClockConfig+0xa6>
 8006a38:	4b6f      	ldr	r3, [pc, #444]	@ (8006bf8 <HAL_RCC_ClockConfig+0x260>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	e00f      	b.n	8006a5e <HAL_RCC_ClockConfig+0xc6>
 8006a3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a42:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a46:	fa93 f3a3 	rbit	r3, r3
 8006a4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a50:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a54:	fa93 f3a3 	rbit	r3, r3
 8006a58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a5a:	4b67      	ldr	r3, [pc, #412]	@ (8006bf8 <HAL_RCC_ClockConfig+0x260>)
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006a62:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006a64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a66:	fa92 f2a2 	rbit	r2, r2
 8006a6a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006a6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a6e:	fab2 f282 	clz	r2, r2
 8006a72:	b2d2      	uxtb	r2, r2
 8006a74:	f042 0220 	orr.w	r2, r2, #32
 8006a78:	b2d2      	uxtb	r2, r2
 8006a7a:	f002 021f 	and.w	r2, r2, #31
 8006a7e:	2101      	movs	r1, #1
 8006a80:	fa01 f202 	lsl.w	r2, r1, r2
 8006a84:	4013      	ands	r3, r2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d17b      	bne.n	8006b82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e0f3      	b.n	8006c76 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d13c      	bne.n	8006b10 <HAL_RCC_ClockConfig+0x178>
 8006a96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a9a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a9e:	fa93 f3a3 	rbit	r3, r3
 8006aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006aa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aa6:	fab3 f383 	clz	r3, r3
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	095b      	lsrs	r3, r3, #5
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	f043 0301 	orr.w	r3, r3, #1
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d102      	bne.n	8006ac0 <HAL_RCC_ClockConfig+0x128>
 8006aba:	4b4f      	ldr	r3, [pc, #316]	@ (8006bf8 <HAL_RCC_ClockConfig+0x260>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	e00f      	b.n	8006ae0 <HAL_RCC_ClockConfig+0x148>
 8006ac0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ac8:	fa93 f3a3 	rbit	r3, r3
 8006acc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ace:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ad2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ad6:	fa93 f3a3 	rbit	r3, r3
 8006ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006adc:	4b46      	ldr	r3, [pc, #280]	@ (8006bf8 <HAL_RCC_ClockConfig+0x260>)
 8006ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ae4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006ae6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ae8:	fa92 f2a2 	rbit	r2, r2
 8006aec:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8006aee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006af0:	fab2 f282 	clz	r2, r2
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	f042 0220 	orr.w	r2, r2, #32
 8006afa:	b2d2      	uxtb	r2, r2
 8006afc:	f002 021f 	and.w	r2, r2, #31
 8006b00:	2101      	movs	r1, #1
 8006b02:	fa01 f202 	lsl.w	r2, r1, r2
 8006b06:	4013      	ands	r3, r2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d13a      	bne.n	8006b82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e0b2      	b.n	8006c76 <HAL_RCC_ClockConfig+0x2de>
 8006b10:	2302      	movs	r3, #2
 8006b12:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b16:	fa93 f3a3 	rbit	r3, r3
 8006b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b1e:	fab3 f383 	clz	r3, r3
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	095b      	lsrs	r3, r3, #5
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	f043 0301 	orr.w	r3, r3, #1
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d102      	bne.n	8006b38 <HAL_RCC_ClockConfig+0x1a0>
 8006b32:	4b31      	ldr	r3, [pc, #196]	@ (8006bf8 <HAL_RCC_ClockConfig+0x260>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	e00d      	b.n	8006b54 <HAL_RCC_ClockConfig+0x1bc>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3e:	fa93 f3a3 	rbit	r3, r3
 8006b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b44:	2302      	movs	r3, #2
 8006b46:	623b      	str	r3, [r7, #32]
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	fa93 f3a3 	rbit	r3, r3
 8006b4e:	61fb      	str	r3, [r7, #28]
 8006b50:	4b29      	ldr	r3, [pc, #164]	@ (8006bf8 <HAL_RCC_ClockConfig+0x260>)
 8006b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b54:	2202      	movs	r2, #2
 8006b56:	61ba      	str	r2, [r7, #24]
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	fa92 f2a2 	rbit	r2, r2
 8006b5e:	617a      	str	r2, [r7, #20]
  return result;
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	fab2 f282 	clz	r2, r2
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	f042 0220 	orr.w	r2, r2, #32
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	f002 021f 	and.w	r2, r2, #31
 8006b72:	2101      	movs	r1, #1
 8006b74:	fa01 f202 	lsl.w	r2, r1, r2
 8006b78:	4013      	ands	r3, r2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e079      	b.n	8006c76 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b82:	4b1d      	ldr	r3, [pc, #116]	@ (8006bf8 <HAL_RCC_ClockConfig+0x260>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f023 0203 	bic.w	r2, r3, #3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	491a      	ldr	r1, [pc, #104]	@ (8006bf8 <HAL_RCC_ClockConfig+0x260>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b94:	f7fc f908 	bl	8002da8 <HAL_GetTick>
 8006b98:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b9a:	e00a      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b9c:	f7fc f904 	bl	8002da8 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e061      	b.n	8006c76 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bb2:	4b11      	ldr	r3, [pc, #68]	@ (8006bf8 <HAL_RCC_ClockConfig+0x260>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f003 020c 	and.w	r2, r3, #12
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d1eb      	bne.n	8006b9c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf4 <HAL_RCC_ClockConfig+0x25c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d214      	bcs.n	8006bfc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bd2:	4b08      	ldr	r3, [pc, #32]	@ (8006bf4 <HAL_RCC_ClockConfig+0x25c>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f023 0207 	bic.w	r2, r3, #7
 8006bda:	4906      	ldr	r1, [pc, #24]	@ (8006bf4 <HAL_RCC_ClockConfig+0x25c>)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006be2:	4b04      	ldr	r3, [pc, #16]	@ (8006bf4 <HAL_RCC_ClockConfig+0x25c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d005      	beq.n	8006bfc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e040      	b.n	8006c76 <HAL_RCC_ClockConfig+0x2de>
 8006bf4:	40022000 	.word	0x40022000
 8006bf8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d008      	beq.n	8006c1a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c08:	4b1d      	ldr	r3, [pc, #116]	@ (8006c80 <HAL_RCC_ClockConfig+0x2e8>)
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	491a      	ldr	r1, [pc, #104]	@ (8006c80 <HAL_RCC_ClockConfig+0x2e8>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0308 	and.w	r3, r3, #8
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d009      	beq.n	8006c3a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c26:	4b16      	ldr	r3, [pc, #88]	@ (8006c80 <HAL_RCC_ClockConfig+0x2e8>)
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	4912      	ldr	r1, [pc, #72]	@ (8006c80 <HAL_RCC_ClockConfig+0x2e8>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006c3a:	f000 f829 	bl	8006c90 <HAL_RCC_GetSysClockFreq>
 8006c3e:	4601      	mov	r1, r0
 8006c40:	4b0f      	ldr	r3, [pc, #60]	@ (8006c80 <HAL_RCC_ClockConfig+0x2e8>)
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c48:	22f0      	movs	r2, #240	@ 0xf0
 8006c4a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	fa92 f2a2 	rbit	r2, r2
 8006c52:	60fa      	str	r2, [r7, #12]
  return result;
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	fab2 f282 	clz	r2, r2
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	40d3      	lsrs	r3, r2
 8006c5e:	4a09      	ldr	r2, [pc, #36]	@ (8006c84 <HAL_RCC_ClockConfig+0x2ec>)
 8006c60:	5cd3      	ldrb	r3, [r2, r3]
 8006c62:	fa21 f303 	lsr.w	r3, r1, r3
 8006c66:	4a08      	ldr	r2, [pc, #32]	@ (8006c88 <HAL_RCC_ClockConfig+0x2f0>)
 8006c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006c6a:	4b08      	ldr	r3, [pc, #32]	@ (8006c8c <HAL_RCC_ClockConfig+0x2f4>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fc f856 	bl	8002d20 <HAL_InitTick>
  
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3778      	adds	r7, #120	@ 0x78
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	40021000 	.word	0x40021000
 8006c84:	080138b4 	.word	0x080138b4
 8006c88:	20000014 	.word	0x20000014
 8006c8c:	20000018 	.word	0x20000018

08006c90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b08b      	sub	sp, #44	@ 0x2c
 8006c94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	61fb      	str	r3, [r7, #28]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61bb      	str	r3, [r7, #24]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006caa:	4b29      	ldr	r3, [pc, #164]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	f003 030c 	and.w	r3, r3, #12
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	d002      	beq.n	8006cc0 <HAL_RCC_GetSysClockFreq+0x30>
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	d003      	beq.n	8006cc6 <HAL_RCC_GetSysClockFreq+0x36>
 8006cbe:	e03c      	b.n	8006d3a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006cc0:	4b24      	ldr	r3, [pc, #144]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006cc2:	623b      	str	r3, [r7, #32]
      break;
 8006cc4:	e03c      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8006ccc:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8006cd0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	fa92 f2a2 	rbit	r2, r2
 8006cd8:	607a      	str	r2, [r7, #4]
  return result;
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	fab2 f282 	clz	r2, r2
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	40d3      	lsrs	r3, r2
 8006ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006ce6:	5cd3      	ldrb	r3, [r2, r3]
 8006ce8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006cea:	4b19      	ldr	r3, [pc, #100]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cee:	f003 030f 	and.w	r3, r3, #15
 8006cf2:	220f      	movs	r2, #15
 8006cf4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	fa92 f2a2 	rbit	r2, r2
 8006cfc:	60fa      	str	r2, [r7, #12]
  return result;
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	fab2 f282 	clz	r2, r2
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	40d3      	lsrs	r3, r2
 8006d08:	4a14      	ldr	r2, [pc, #80]	@ (8006d5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8006d0a:	5cd3      	ldrb	r3, [r2, r3]
 8006d0c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d008      	beq.n	8006d2a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006d18:	4a0e      	ldr	r2, [pc, #56]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	fb02 f303 	mul.w	r3, r2, r3
 8006d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d28:	e004      	b.n	8006d34 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8006d60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006d2e:	fb02 f303 	mul.w	r3, r2, r3
 8006d32:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d36:	623b      	str	r3, [r7, #32]
      break;
 8006d38:	e002      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d64 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006d3c:	623b      	str	r3, [r7, #32]
      break;
 8006d3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d40:	6a3b      	ldr	r3, [r7, #32]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	372c      	adds	r7, #44	@ 0x2c
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	40021000 	.word	0x40021000
 8006d54:	00b71b00 	.word	0x00b71b00
 8006d58:	080138cc 	.word	0x080138cc
 8006d5c:	080138dc 	.word	0x080138dc
 8006d60:	003d0900 	.word	0x003d0900
 8006d64:	007a1200 	.word	0x007a1200

08006d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d6c:	4b03      	ldr	r3, [pc, #12]	@ (8006d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	20000014 	.word	0x20000014

08006d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006d86:	f7ff ffef 	bl	8006d68 <HAL_RCC_GetHCLKFreq>
 8006d8a:	4601      	mov	r1, r0
 8006d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006dbc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d94:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006d98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	fa92 f2a2 	rbit	r2, r2
 8006da0:	603a      	str	r2, [r7, #0]
  return result;
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	fab2 f282 	clz	r2, r2
 8006da8:	b2d2      	uxtb	r2, r2
 8006daa:	40d3      	lsrs	r3, r2
 8006dac:	4a04      	ldr	r2, [pc, #16]	@ (8006dc0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006dae:	5cd3      	ldrb	r3, [r2, r3]
 8006db0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006db4:	4618      	mov	r0, r3
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	40021000 	.word	0x40021000
 8006dc0:	080138c4 	.word	0x080138c4

08006dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006dca:	f7ff ffcd 	bl	8006d68 <HAL_RCC_GetHCLKFreq>
 8006dce:	4601      	mov	r1, r0
 8006dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006e00 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8006dd8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8006ddc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	fa92 f2a2 	rbit	r2, r2
 8006de4:	603a      	str	r2, [r7, #0]
  return result;
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	fab2 f282 	clz	r2, r2
 8006dec:	b2d2      	uxtb	r2, r2
 8006dee:	40d3      	lsrs	r3, r2
 8006df0:	4a04      	ldr	r2, [pc, #16]	@ (8006e04 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006df2:	5cd3      	ldrb	r3, [r2, r3]
 8006df4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	40021000 	.word	0x40021000
 8006e04:	080138c4 	.word	0x080138c4

08006e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b092      	sub	sp, #72	@ 0x48
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 80d4 	beq.w	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e2c:	4b4e      	ldr	r3, [pc, #312]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10e      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e38:	4b4b      	ldr	r3, [pc, #300]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	4a4a      	ldr	r2, [pc, #296]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e42:	61d3      	str	r3, [r2, #28]
 8006e44:	4b48      	ldr	r3, [pc, #288]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e4c:	60bb      	str	r3, [r7, #8]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e50:	2301      	movs	r3, #1
 8006e52:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e56:	4b45      	ldr	r3, [pc, #276]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d118      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e62:	4b42      	ldr	r3, [pc, #264]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a41      	ldr	r2, [pc, #260]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e6e:	f7fb ff9b 	bl	8002da8 <HAL_GetTick>
 8006e72:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e74:	e008      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e76:	f7fb ff97 	bl	8002da8 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b64      	cmp	r3, #100	@ 0x64
 8006e82:	d901      	bls.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e12d      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e88:	4b38      	ldr	r3, [pc, #224]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d0f0      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e94:	4b34      	ldr	r3, [pc, #208]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8084 	beq.w	8006fae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d07c      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ebe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006ec2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec6:	fa93 f3a3 	rbit	r3, r3
 8006eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ece:	fab3 f383 	clz	r3, r3
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4b26      	ldr	r3, [pc, #152]	@ (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ed8:	4413      	add	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	461a      	mov	r2, r3
 8006ede:	2301      	movs	r3, #1
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eea:	fa93 f3a3 	rbit	r3, r3
 8006eee:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ef2:	fab3 f383 	clz	r3, r3
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	461a      	mov	r2, r3
 8006efa:	4b1d      	ldr	r3, [pc, #116]	@ (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006efc:	4413      	add	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	461a      	mov	r2, r3
 8006f02:	2300      	movs	r3, #0
 8006f04:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006f06:	4a18      	ldr	r2, [pc, #96]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f0a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d04b      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f16:	f7fb ff47 	bl	8002da8 <HAL_GetTick>
 8006f1a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f1c:	e00a      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f1e:	f7fb ff43 	bl	8002da8 <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d901      	bls.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e0d7      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8006f34:	2302      	movs	r3, #2
 8006f36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3a:	fa93 f3a3 	rbit	r3, r3
 8006f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f40:	2302      	movs	r3, #2
 8006f42:	623b      	str	r3, [r7, #32]
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	fa93 f3a3 	rbit	r3, r3
 8006f4a:	61fb      	str	r3, [r7, #28]
  return result;
 8006f4c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f4e:	fab3 f383 	clz	r3, r3
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	095b      	lsrs	r3, r3, #5
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	f043 0302 	orr.w	r3, r3, #2
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d108      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006f62:	4b01      	ldr	r3, [pc, #4]	@ (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	e00d      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006f68:	40021000 	.word	0x40021000
 8006f6c:	40007000 	.word	0x40007000
 8006f70:	10908100 	.word	0x10908100
 8006f74:	2302      	movs	r3, #2
 8006f76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	fa93 f3a3 	rbit	r3, r3
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	4b5a      	ldr	r3, [pc, #360]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f84:	2202      	movs	r2, #2
 8006f86:	613a      	str	r2, [r7, #16]
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	fa92 f2a2 	rbit	r2, r2
 8006f8e:	60fa      	str	r2, [r7, #12]
  return result;
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	fab2 f282 	clz	r2, r2
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f9c:	b2d2      	uxtb	r2, r2
 8006f9e:	f002 021f 	and.w	r2, r2, #31
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8006fa8:	4013      	ands	r3, r2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0b7      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006fae:	4b4f      	ldr	r3, [pc, #316]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	494c      	ldr	r1, [pc, #304]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006fc0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d105      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fc8:	4b48      	ldr	r3, [pc, #288]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	4a47      	ldr	r2, [pc, #284]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006fce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d008      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fe0:	4b42      	ldr	r3, [pc, #264]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe4:	f023 0203 	bic.w	r2, r3, #3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	493f      	ldr	r1, [pc, #252]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d008      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007002:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	4938      	ldr	r1, [pc, #224]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800700c:	4313      	orrs	r3, r2
 800700e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	2b00      	cmp	r3, #0
 800701a:	d008      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800701c:	4b33      	ldr	r3, [pc, #204]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800701e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007020:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	4930      	ldr	r1, [pc, #192]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800702a:	4313      	orrs	r3, r2
 800702c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0320 	and.w	r3, r3, #32
 8007036:	2b00      	cmp	r3, #0
 8007038:	d008      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800703a:	4b2c      	ldr	r3, [pc, #176]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800703c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800703e:	f023 0210 	bic.w	r2, r3, #16
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	4929      	ldr	r1, [pc, #164]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007048:	4313      	orrs	r3, r2
 800704a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d008      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007058:	4b24      	ldr	r3, [pc, #144]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007064:	4921      	ldr	r1, [pc, #132]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007066:	4313      	orrs	r3, r2
 8007068:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007072:	2b00      	cmp	r3, #0
 8007074:	d008      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007076:	4b1d      	ldr	r3, [pc, #116]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800707a:	f023 0220 	bic.w	r2, r3, #32
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	491a      	ldr	r1, [pc, #104]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007084:	4313      	orrs	r3, r2
 8007086:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007090:	2b00      	cmp	r3, #0
 8007092:	d008      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8007094:	4b15      	ldr	r3, [pc, #84]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	4912      	ldr	r1, [pc, #72]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d008      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 80070b2:	4b0e      	ldr	r3, [pc, #56]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	490b      	ldr	r1, [pc, #44]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d008      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80070d0:	4b06      	ldr	r3, [pc, #24]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80070d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070dc:	4903      	ldr	r1, [pc, #12]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3748      	adds	r7, #72	@ 0x48
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	40021000 	.word	0x40021000

080070f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e041      	b.n	8007186 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7fb faa0 	bl	800265c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3304      	adds	r3, #4
 800712c:	4619      	mov	r1, r3
 800712e:	4610      	mov	r0, r2
 8007130:	f000 ff84 	bl	800803c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d001      	beq.n	80071a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e041      	b.n	800722c <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2202      	movs	r2, #2
 80071ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071b8:	d01d      	beq.n	80071f6 <HAL_TIM_Base_Start+0x66>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a1e      	ldr	r2, [pc, #120]	@ (8007238 <HAL_TIM_Base_Start+0xa8>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d018      	beq.n	80071f6 <HAL_TIM_Base_Start+0x66>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a1c      	ldr	r2, [pc, #112]	@ (800723c <HAL_TIM_Base_Start+0xac>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d013      	beq.n	80071f6 <HAL_TIM_Base_Start+0x66>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007240 <HAL_TIM_Base_Start+0xb0>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00e      	beq.n	80071f6 <HAL_TIM_Base_Start+0x66>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a19      	ldr	r2, [pc, #100]	@ (8007244 <HAL_TIM_Base_Start+0xb4>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d009      	beq.n	80071f6 <HAL_TIM_Base_Start+0x66>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a18      	ldr	r2, [pc, #96]	@ (8007248 <HAL_TIM_Base_Start+0xb8>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d004      	beq.n	80071f6 <HAL_TIM_Base_Start+0x66>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a16      	ldr	r2, [pc, #88]	@ (800724c <HAL_TIM_Base_Start+0xbc>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d111      	bne.n	800721a <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f003 0307 	and.w	r3, r3, #7
 8007200:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2b06      	cmp	r3, #6
 8007206:	d010      	beq.n	800722a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0201 	orr.w	r2, r2, #1
 8007216:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007218:	e007      	b.n	800722a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f042 0201 	orr.w	r2, r2, #1
 8007228:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	40000400 	.word	0x40000400
 800723c:	40000800 	.word	0x40000800
 8007240:	40000c00 	.word	0x40000c00
 8007244:	40001800 	.word	0x40001800
 8007248:	40014000 	.word	0x40014000
 800724c:	40015c00 	.word	0x40015c00

08007250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b01      	cmp	r3, #1
 8007262:	d001      	beq.n	8007268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e049      	b.n	80072fc <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f042 0201 	orr.w	r2, r2, #1
 800727e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007288:	d01d      	beq.n	80072c6 <HAL_TIM_Base_Start_IT+0x76>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a1e      	ldr	r2, [pc, #120]	@ (8007308 <HAL_TIM_Base_Start_IT+0xb8>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d018      	beq.n	80072c6 <HAL_TIM_Base_Start_IT+0x76>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a1c      	ldr	r2, [pc, #112]	@ (800730c <HAL_TIM_Base_Start_IT+0xbc>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d013      	beq.n	80072c6 <HAL_TIM_Base_Start_IT+0x76>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a1b      	ldr	r2, [pc, #108]	@ (8007310 <HAL_TIM_Base_Start_IT+0xc0>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d00e      	beq.n	80072c6 <HAL_TIM_Base_Start_IT+0x76>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a19      	ldr	r2, [pc, #100]	@ (8007314 <HAL_TIM_Base_Start_IT+0xc4>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d009      	beq.n	80072c6 <HAL_TIM_Base_Start_IT+0x76>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a18      	ldr	r2, [pc, #96]	@ (8007318 <HAL_TIM_Base_Start_IT+0xc8>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d004      	beq.n	80072c6 <HAL_TIM_Base_Start_IT+0x76>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a16      	ldr	r2, [pc, #88]	@ (800731c <HAL_TIM_Base_Start_IT+0xcc>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d111      	bne.n	80072ea <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f003 0307 	and.w	r3, r3, #7
 80072d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2b06      	cmp	r3, #6
 80072d6:	d010      	beq.n	80072fa <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0201 	orr.w	r2, r2, #1
 80072e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072e8:	e007      	b.n	80072fa <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f042 0201 	orr.w	r2, r2, #1
 80072f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	40000400 	.word	0x40000400
 800730c:	40000800 	.word	0x40000800
 8007310:	40000c00 	.word	0x40000c00
 8007314:	40001800 	.word	0x40001800
 8007318:	40014000 	.word	0x40014000
 800731c:	40015c00 	.word	0x40015c00

08007320 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e041      	b.n	80073b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d106      	bne.n	800734c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7fb f964 	bl	8002614 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2202      	movs	r2, #2
 8007350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	3304      	adds	r3, #4
 800735c:	4619      	mov	r1, r3
 800735e:	4610      	mov	r0, r2
 8007360:	f000 fe6c 	bl	800803c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d109      	bne.n	80073e4 <HAL_TIM_PWM_Start+0x24>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b01      	cmp	r3, #1
 80073da:	bf14      	ite	ne
 80073dc:	2301      	movne	r3, #1
 80073de:	2300      	moveq	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	e022      	b.n	800742a <HAL_TIM_PWM_Start+0x6a>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2b04      	cmp	r3, #4
 80073e8:	d109      	bne.n	80073fe <HAL_TIM_PWM_Start+0x3e>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	bf14      	ite	ne
 80073f6:	2301      	movne	r3, #1
 80073f8:	2300      	moveq	r3, #0
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	e015      	b.n	800742a <HAL_TIM_PWM_Start+0x6a>
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b08      	cmp	r3, #8
 8007402:	d109      	bne.n	8007418 <HAL_TIM_PWM_Start+0x58>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b01      	cmp	r3, #1
 800740e:	bf14      	ite	ne
 8007410:	2301      	movne	r3, #1
 8007412:	2300      	moveq	r3, #0
 8007414:	b2db      	uxtb	r3, r3
 8007416:	e008      	b.n	800742a <HAL_TIM_PWM_Start+0x6a>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b01      	cmp	r3, #1
 8007422:	bf14      	ite	ne
 8007424:	2301      	movne	r3, #1
 8007426:	2300      	moveq	r3, #0
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e07c      	b.n	800752c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d104      	bne.n	8007442 <HAL_TIM_PWM_Start+0x82>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2202      	movs	r2, #2
 800743c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007440:	e013      	b.n	800746a <HAL_TIM_PWM_Start+0xaa>
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b04      	cmp	r3, #4
 8007446:	d104      	bne.n	8007452 <HAL_TIM_PWM_Start+0x92>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007450:	e00b      	b.n	800746a <HAL_TIM_PWM_Start+0xaa>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b08      	cmp	r3, #8
 8007456:	d104      	bne.n	8007462 <HAL_TIM_PWM_Start+0xa2>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007460:	e003      	b.n	800746a <HAL_TIM_PWM_Start+0xaa>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2202      	movs	r2, #2
 8007466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2201      	movs	r2, #1
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	4618      	mov	r0, r3
 8007474:	f001 f86f 	bl	8008556 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a2d      	ldr	r2, [pc, #180]	@ (8007534 <HAL_TIM_PWM_Start+0x174>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d009      	beq.n	8007496 <HAL_TIM_PWM_Start+0xd6>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a2c      	ldr	r2, [pc, #176]	@ (8007538 <HAL_TIM_PWM_Start+0x178>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d004      	beq.n	8007496 <HAL_TIM_PWM_Start+0xd6>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a2a      	ldr	r2, [pc, #168]	@ (800753c <HAL_TIM_PWM_Start+0x17c>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d101      	bne.n	800749a <HAL_TIM_PWM_Start+0xda>
 8007496:	2301      	movs	r3, #1
 8007498:	e000      	b.n	800749c <HAL_TIM_PWM_Start+0xdc>
 800749a:	2300      	movs	r3, #0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d007      	beq.n	80074b0 <HAL_TIM_PWM_Start+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074b8:	d01d      	beq.n	80074f6 <HAL_TIM_PWM_Start+0x136>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a20      	ldr	r2, [pc, #128]	@ (8007540 <HAL_TIM_PWM_Start+0x180>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d018      	beq.n	80074f6 <HAL_TIM_PWM_Start+0x136>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a1e      	ldr	r2, [pc, #120]	@ (8007544 <HAL_TIM_PWM_Start+0x184>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d013      	beq.n	80074f6 <HAL_TIM_PWM_Start+0x136>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a1d      	ldr	r2, [pc, #116]	@ (8007548 <HAL_TIM_PWM_Start+0x188>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d00e      	beq.n	80074f6 <HAL_TIM_PWM_Start+0x136>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a1b      	ldr	r2, [pc, #108]	@ (800754c <HAL_TIM_PWM_Start+0x18c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d009      	beq.n	80074f6 <HAL_TIM_PWM_Start+0x136>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a13      	ldr	r2, [pc, #76]	@ (8007534 <HAL_TIM_PWM_Start+0x174>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d004      	beq.n	80074f6 <HAL_TIM_PWM_Start+0x136>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a17      	ldr	r2, [pc, #92]	@ (8007550 <HAL_TIM_PWM_Start+0x190>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d111      	bne.n	800751a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f003 0307 	and.w	r3, r3, #7
 8007500:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2b06      	cmp	r3, #6
 8007506:	d010      	beq.n	800752a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f042 0201 	orr.w	r2, r2, #1
 8007516:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007518:	e007      	b.n	800752a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f042 0201 	orr.w	r2, r2, #1
 8007528:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	40014000 	.word	0x40014000
 8007538:	40014400 	.word	0x40014400
 800753c:	40014800 	.word	0x40014800
 8007540:	40000400 	.word	0x40000400
 8007544:	40000800 	.word	0x40000800
 8007548:	40000c00 	.word	0x40000c00
 800754c:	40001800 	.word	0x40001800
 8007550:	40015c00 	.word	0x40015c00

08007554 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2200      	movs	r2, #0
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fff5 	bl	8008556 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a31      	ldr	r2, [pc, #196]	@ (8007638 <HAL_TIM_PWM_Stop+0xe4>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d009      	beq.n	800758a <HAL_TIM_PWM_Stop+0x36>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a30      	ldr	r2, [pc, #192]	@ (800763c <HAL_TIM_PWM_Stop+0xe8>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d004      	beq.n	800758a <HAL_TIM_PWM_Stop+0x36>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a2e      	ldr	r2, [pc, #184]	@ (8007640 <HAL_TIM_PWM_Stop+0xec>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d101      	bne.n	800758e <HAL_TIM_PWM_Stop+0x3a>
 800758a:	2301      	movs	r3, #1
 800758c:	e000      	b.n	8007590 <HAL_TIM_PWM_Stop+0x3c>
 800758e:	2300      	movs	r3, #0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d017      	beq.n	80075c4 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	6a1a      	ldr	r2, [r3, #32]
 800759a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800759e:	4013      	ands	r3, r2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10f      	bne.n	80075c4 <HAL_TIM_PWM_Stop+0x70>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	6a1a      	ldr	r2, [r3, #32]
 80075aa:	f240 4344 	movw	r3, #1092	@ 0x444
 80075ae:	4013      	ands	r3, r2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d107      	bne.n	80075c4 <HAL_TIM_PWM_Stop+0x70>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80075c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6a1a      	ldr	r2, [r3, #32]
 80075ca:	f241 1311 	movw	r3, #4369	@ 0x1111
 80075ce:	4013      	ands	r3, r2
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10f      	bne.n	80075f4 <HAL_TIM_PWM_Stop+0xa0>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6a1a      	ldr	r2, [r3, #32]
 80075da:	f240 4344 	movw	r3, #1092	@ 0x444
 80075de:	4013      	ands	r3, r2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d107      	bne.n	80075f4 <HAL_TIM_PWM_Stop+0xa0>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0201 	bic.w	r2, r2, #1
 80075f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d104      	bne.n	8007604 <HAL_TIM_PWM_Stop+0xb0>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007602:	e013      	b.n	800762c <HAL_TIM_PWM_Stop+0xd8>
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	2b04      	cmp	r3, #4
 8007608:	d104      	bne.n	8007614 <HAL_TIM_PWM_Stop+0xc0>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007612:	e00b      	b.n	800762c <HAL_TIM_PWM_Stop+0xd8>
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	2b08      	cmp	r3, #8
 8007618:	d104      	bne.n	8007624 <HAL_TIM_PWM_Stop+0xd0>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007622:	e003      	b.n	800762c <HAL_TIM_PWM_Stop+0xd8>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	40014000 	.word	0x40014000
 800763c:	40014400 	.word	0x40014400
 8007640:	40014800 	.word	0x40014800

08007644 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d109      	bne.n	800766c <HAL_TIM_PWM_Start_IT+0x28>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800765e:	b2db      	uxtb	r3, r3
 8007660:	2b01      	cmp	r3, #1
 8007662:	bf14      	ite	ne
 8007664:	2301      	movne	r3, #1
 8007666:	2300      	moveq	r3, #0
 8007668:	b2db      	uxtb	r3, r3
 800766a:	e022      	b.n	80076b2 <HAL_TIM_PWM_Start_IT+0x6e>
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2b04      	cmp	r3, #4
 8007670:	d109      	bne.n	8007686 <HAL_TIM_PWM_Start_IT+0x42>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b01      	cmp	r3, #1
 800767c:	bf14      	ite	ne
 800767e:	2301      	movne	r3, #1
 8007680:	2300      	moveq	r3, #0
 8007682:	b2db      	uxtb	r3, r3
 8007684:	e015      	b.n	80076b2 <HAL_TIM_PWM_Start_IT+0x6e>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b08      	cmp	r3, #8
 800768a:	d109      	bne.n	80076a0 <HAL_TIM_PWM_Start_IT+0x5c>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b01      	cmp	r3, #1
 8007696:	bf14      	ite	ne
 8007698:	2301      	movne	r3, #1
 800769a:	2300      	moveq	r3, #0
 800769c:	b2db      	uxtb	r3, r3
 800769e:	e008      	b.n	80076b2 <HAL_TIM_PWM_Start_IT+0x6e>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	bf14      	ite	ne
 80076ac:	2301      	movne	r3, #1
 80076ae:	2300      	moveq	r3, #0
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e0c7      	b.n	800784a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d104      	bne.n	80076ca <HAL_TIM_PWM_Start_IT+0x86>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2202      	movs	r2, #2
 80076c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076c8:	e013      	b.n	80076f2 <HAL_TIM_PWM_Start_IT+0xae>
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d104      	bne.n	80076da <HAL_TIM_PWM_Start_IT+0x96>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076d8:	e00b      	b.n	80076f2 <HAL_TIM_PWM_Start_IT+0xae>
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d104      	bne.n	80076ea <HAL_TIM_PWM_Start_IT+0xa6>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076e8:	e003      	b.n	80076f2 <HAL_TIM_PWM_Start_IT+0xae>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2202      	movs	r2, #2
 80076ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b0c      	cmp	r3, #12
 80076f6:	d841      	bhi.n	800777c <HAL_TIM_PWM_Start_IT+0x138>
 80076f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <HAL_TIM_PWM_Start_IT+0xbc>)
 80076fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	08007735 	.word	0x08007735
 8007704:	0800777d 	.word	0x0800777d
 8007708:	0800777d 	.word	0x0800777d
 800770c:	0800777d 	.word	0x0800777d
 8007710:	08007747 	.word	0x08007747
 8007714:	0800777d 	.word	0x0800777d
 8007718:	0800777d 	.word	0x0800777d
 800771c:	0800777d 	.word	0x0800777d
 8007720:	08007759 	.word	0x08007759
 8007724:	0800777d 	.word	0x0800777d
 8007728:	0800777d 	.word	0x0800777d
 800772c:	0800777d 	.word	0x0800777d
 8007730:	0800776b 	.word	0x0800776b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0202 	orr.w	r2, r2, #2
 8007742:	60da      	str	r2, [r3, #12]
      break;
 8007744:	e01d      	b.n	8007782 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68da      	ldr	r2, [r3, #12]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f042 0204 	orr.w	r2, r2, #4
 8007754:	60da      	str	r2, [r3, #12]
      break;
 8007756:	e014      	b.n	8007782 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 0208 	orr.w	r2, r2, #8
 8007766:	60da      	str	r2, [r3, #12]
      break;
 8007768:	e00b      	b.n	8007782 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f042 0210 	orr.w	r2, r2, #16
 8007778:	60da      	str	r2, [r3, #12]
      break;
 800777a:	e002      	b.n	8007782 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	73fb      	strb	r3, [r7, #15]
      break;
 8007780:	bf00      	nop
  }

  if (status == HAL_OK)
 8007782:	7bfb      	ldrb	r3, [r7, #15]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d15f      	bne.n	8007848 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2201      	movs	r2, #1
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	4618      	mov	r0, r3
 8007792:	f000 fee0 	bl	8008556 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a2e      	ldr	r2, [pc, #184]	@ (8007854 <HAL_TIM_PWM_Start_IT+0x210>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d009      	beq.n	80077b4 <HAL_TIM_PWM_Start_IT+0x170>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a2c      	ldr	r2, [pc, #176]	@ (8007858 <HAL_TIM_PWM_Start_IT+0x214>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d004      	beq.n	80077b4 <HAL_TIM_PWM_Start_IT+0x170>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a2b      	ldr	r2, [pc, #172]	@ (800785c <HAL_TIM_PWM_Start_IT+0x218>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d101      	bne.n	80077b8 <HAL_TIM_PWM_Start_IT+0x174>
 80077b4:	2301      	movs	r3, #1
 80077b6:	e000      	b.n	80077ba <HAL_TIM_PWM_Start_IT+0x176>
 80077b8:	2300      	movs	r3, #0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d007      	beq.n	80077ce <HAL_TIM_PWM_Start_IT+0x18a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077d6:	d01d      	beq.n	8007814 <HAL_TIM_PWM_Start_IT+0x1d0>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a20      	ldr	r2, [pc, #128]	@ (8007860 <HAL_TIM_PWM_Start_IT+0x21c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d018      	beq.n	8007814 <HAL_TIM_PWM_Start_IT+0x1d0>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a1f      	ldr	r2, [pc, #124]	@ (8007864 <HAL_TIM_PWM_Start_IT+0x220>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d013      	beq.n	8007814 <HAL_TIM_PWM_Start_IT+0x1d0>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007868 <HAL_TIM_PWM_Start_IT+0x224>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d00e      	beq.n	8007814 <HAL_TIM_PWM_Start_IT+0x1d0>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a1c      	ldr	r2, [pc, #112]	@ (800786c <HAL_TIM_PWM_Start_IT+0x228>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d009      	beq.n	8007814 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a13      	ldr	r2, [pc, #76]	@ (8007854 <HAL_TIM_PWM_Start_IT+0x210>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d004      	beq.n	8007814 <HAL_TIM_PWM_Start_IT+0x1d0>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a18      	ldr	r2, [pc, #96]	@ (8007870 <HAL_TIM_PWM_Start_IT+0x22c>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d111      	bne.n	8007838 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f003 0307 	and.w	r3, r3, #7
 800781e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2b06      	cmp	r3, #6
 8007824:	d010      	beq.n	8007848 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f042 0201 	orr.w	r2, r2, #1
 8007834:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007836:	e007      	b.n	8007848 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0201 	orr.w	r2, r2, #1
 8007846:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007848:	7bfb      	ldrb	r3, [r7, #15]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	40014000 	.word	0x40014000
 8007858:	40014400 	.word	0x40014400
 800785c:	40014800 	.word	0x40014800
 8007860:	40000400 	.word	0x40000400
 8007864:	40000800 	.word	0x40000800
 8007868:	40000c00 	.word	0x40000c00
 800786c:	40001800 	.word	0x40001800
 8007870:	40015c00 	.word	0x40015c00

08007874 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e097      	b.n	80079b8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	d106      	bne.n	80078a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7fa ff03 	bl	80026a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2202      	movs	r2, #2
 80078a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	6812      	ldr	r2, [r2, #0]
 80078b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078b8:	f023 0307 	bic.w	r3, r3, #7
 80078bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	3304      	adds	r3, #4
 80078c6:	4619      	mov	r1, r3
 80078c8:	4610      	mov	r0, r2
 80078ca:	f000 fbb7 	bl	800803c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078f6:	f023 0303 	bic.w	r3, r3, #3
 80078fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	689a      	ldr	r2, [r3, #8]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	021b      	lsls	r3, r3, #8
 8007906:	4313      	orrs	r3, r2
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	4313      	orrs	r3, r2
 800790c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007914:	f023 030c 	bic.w	r3, r3, #12
 8007918:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007920:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007924:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	68da      	ldr	r2, [r3, #12]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	021b      	lsls	r3, r3, #8
 8007930:	4313      	orrs	r3, r2
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	4313      	orrs	r3, r2
 8007936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	011a      	lsls	r2, r3, #4
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	031b      	lsls	r3, r3, #12
 8007944:	4313      	orrs	r3, r2
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	4313      	orrs	r3, r2
 800794a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007952:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800795a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	4313      	orrs	r3, r2
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	4313      	orrs	r3, r2
 800796c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80079d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d110      	bne.n	8007a12 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d102      	bne.n	80079fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80079f6:	7b7b      	ldrb	r3, [r7, #13]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d001      	beq.n	8007a00 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e069      	b.n	8007ad4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a10:	e031      	b.n	8007a76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b04      	cmp	r3, #4
 8007a16:	d110      	bne.n	8007a3a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d102      	bne.n	8007a24 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a1e:	7b3b      	ldrb	r3, [r7, #12]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d001      	beq.n	8007a28 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e055      	b.n	8007ad4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a38:	e01d      	b.n	8007a76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d108      	bne.n	8007a52 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d105      	bne.n	8007a52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a46:	7b7b      	ldrb	r3, [r7, #13]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d102      	bne.n	8007a52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a4c:	7b3b      	ldrb	r3, [r7, #12]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d001      	beq.n	8007a56 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e03e      	b.n	8007ad4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2202      	movs	r2, #2
 8007a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2202      	movs	r2, #2
 8007a62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2202      	movs	r2, #2
 8007a6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2202      	movs	r2, #2
 8007a72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <HAL_TIM_Encoder_Start+0xc4>
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d008      	beq.n	8007a94 <HAL_TIM_Encoder_Start+0xd4>
 8007a82:	e00f      	b.n	8007aa4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 fd62 	bl	8008556 <TIM_CCxChannelCmd>
      break;
 8007a92:	e016      	b.n	8007ac2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	2104      	movs	r1, #4
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 fd5a 	bl	8008556 <TIM_CCxChannelCmd>
      break;
 8007aa2:	e00e      	b.n	8007ac2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	2100      	movs	r1, #0
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 fd52 	bl	8008556 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	2104      	movs	r1, #4
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fd4b 	bl	8008556 <TIM_CCxChannelCmd>
      break;
 8007ac0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f042 0201 	orr.w	r2, r2, #1
 8007ad0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d122      	bne.n	8007b38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d11b      	bne.n	8007b38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f06f 0202 	mvn.w	r2, #2
 8007b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	f003 0303 	and.w	r3, r3, #3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fa77 	bl	8008012 <HAL_TIM_IC_CaptureCallback>
 8007b24:	e005      	b.n	8007b32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fa69 	bl	8007ffe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7f9 fefb 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	f003 0304 	and.w	r3, r3, #4
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	d122      	bne.n	8007b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f003 0304 	and.w	r3, r3, #4
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d11b      	bne.n	8007b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f06f 0204 	mvn.w	r2, #4
 8007b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2202      	movs	r2, #2
 8007b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fa4d 	bl	8008012 <HAL_TIM_IC_CaptureCallback>
 8007b78:	e005      	b.n	8007b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fa3f 	bl	8007ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f7f9 fed1 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	f003 0308 	and.w	r3, r3, #8
 8007b96:	2b08      	cmp	r3, #8
 8007b98:	d122      	bne.n	8007be0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	f003 0308 	and.w	r3, r3, #8
 8007ba4:	2b08      	cmp	r3, #8
 8007ba6:	d11b      	bne.n	8007be0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f06f 0208 	mvn.w	r2, #8
 8007bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2204      	movs	r2, #4
 8007bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	f003 0303 	and.w	r3, r3, #3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fa23 	bl	8008012 <HAL_TIM_IC_CaptureCallback>
 8007bcc:	e005      	b.n	8007bda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fa15 	bl	8007ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7f9 fea7 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	f003 0310 	and.w	r3, r3, #16
 8007bea:	2b10      	cmp	r3, #16
 8007bec:	d122      	bne.n	8007c34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f003 0310 	and.w	r3, r3, #16
 8007bf8:	2b10      	cmp	r3, #16
 8007bfa:	d11b      	bne.n	8007c34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f06f 0210 	mvn.w	r2, #16
 8007c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2208      	movs	r2, #8
 8007c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f9f9 	bl	8008012 <HAL_TIM_IC_CaptureCallback>
 8007c20:	e005      	b.n	8007c2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f9eb 	bl	8007ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7f9 fe7d 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d10e      	bne.n	8007c60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d107      	bne.n	8007c60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f06f 0201 	mvn.w	r2, #1
 8007c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7fa fa42 	bl	80020e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c6a:	2b80      	cmp	r3, #128	@ 0x80
 8007c6c:	d10e      	bne.n	8007c8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c78:	2b80      	cmp	r3, #128	@ 0x80
 8007c7a:	d107      	bne.n	8007c8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fd08 	bl	800869c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c96:	2b40      	cmp	r3, #64	@ 0x40
 8007c98:	d10e      	bne.n	8007cb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ca4:	2b40      	cmp	r3, #64	@ 0x40
 8007ca6:	d107      	bne.n	8007cb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f9b7 	bl	8008026 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	f003 0320 	and.w	r3, r3, #32
 8007cc2:	2b20      	cmp	r3, #32
 8007cc4:	d10e      	bne.n	8007ce4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	f003 0320 	and.w	r3, r3, #32
 8007cd0:	2b20      	cmp	r3, #32
 8007cd2:	d107      	bne.n	8007ce4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f06f 0220 	mvn.w	r2, #32
 8007cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fcd2 	bl	8008688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ce4:	bf00      	nop
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d101      	bne.n	8007d0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d06:	2302      	movs	r3, #2
 8007d08:	e0ae      	b.n	8007e68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b0c      	cmp	r3, #12
 8007d16:	f200 809f 	bhi.w	8007e58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007d55 	.word	0x08007d55
 8007d24:	08007e59 	.word	0x08007e59
 8007d28:	08007e59 	.word	0x08007e59
 8007d2c:	08007e59 	.word	0x08007e59
 8007d30:	08007d95 	.word	0x08007d95
 8007d34:	08007e59 	.word	0x08007e59
 8007d38:	08007e59 	.word	0x08007e59
 8007d3c:	08007e59 	.word	0x08007e59
 8007d40:	08007dd7 	.word	0x08007dd7
 8007d44:	08007e59 	.word	0x08007e59
 8007d48:	08007e59 	.word	0x08007e59
 8007d4c:	08007e59 	.word	0x08007e59
 8007d50:	08007e17 	.word	0x08007e17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68b9      	ldr	r1, [r7, #8]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 fa08 	bl	8008170 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	699a      	ldr	r2, [r3, #24]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f042 0208 	orr.w	r2, r2, #8
 8007d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	699a      	ldr	r2, [r3, #24]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f022 0204 	bic.w	r2, r2, #4
 8007d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6999      	ldr	r1, [r3, #24]
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	691a      	ldr	r2, [r3, #16]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	619a      	str	r2, [r3, #24]
      break;
 8007d92:	e064      	b.n	8007e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68b9      	ldr	r1, [r7, #8]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 fa62 	bl	8008264 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	699a      	ldr	r2, [r3, #24]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	699a      	ldr	r2, [r3, #24]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6999      	ldr	r1, [r3, #24]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	021a      	lsls	r2, r3, #8
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	619a      	str	r2, [r3, #24]
      break;
 8007dd4:	e043      	b.n	8007e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68b9      	ldr	r1, [r7, #8]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f000 faa3 	bl	8008328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69da      	ldr	r2, [r3, #28]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f042 0208 	orr.w	r2, r2, #8
 8007df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69da      	ldr	r2, [r3, #28]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f022 0204 	bic.w	r2, r2, #4
 8007e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	69d9      	ldr	r1, [r3, #28]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	691a      	ldr	r2, [r3, #16]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	61da      	str	r2, [r3, #28]
      break;
 8007e14:	e023      	b.n	8007e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68b9      	ldr	r1, [r7, #8]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 fac1 	bl	80083a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	69da      	ldr	r2, [r3, #28]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	69da      	ldr	r2, [r3, #28]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	69d9      	ldr	r1, [r3, #28]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	021a      	lsls	r2, r3, #8
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	61da      	str	r2, [r3, #28]
      break;
 8007e56:	e002      	b.n	8007e5e <HAL_TIM_PWM_ConfigChannel+0x172>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d101      	bne.n	8007e8c <HAL_TIM_ConfigClockSource+0x1c>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e0b4      	b.n	8007ff6 <HAL_TIM_ConfigClockSource+0x186>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2202      	movs	r2, #2
 8007e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007eb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec4:	d03e      	beq.n	8007f44 <HAL_TIM_ConfigClockSource+0xd4>
 8007ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eca:	f200 8087 	bhi.w	8007fdc <HAL_TIM_ConfigClockSource+0x16c>
 8007ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ed2:	f000 8086 	beq.w	8007fe2 <HAL_TIM_ConfigClockSource+0x172>
 8007ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eda:	d87f      	bhi.n	8007fdc <HAL_TIM_ConfigClockSource+0x16c>
 8007edc:	2b70      	cmp	r3, #112	@ 0x70
 8007ede:	d01a      	beq.n	8007f16 <HAL_TIM_ConfigClockSource+0xa6>
 8007ee0:	2b70      	cmp	r3, #112	@ 0x70
 8007ee2:	d87b      	bhi.n	8007fdc <HAL_TIM_ConfigClockSource+0x16c>
 8007ee4:	2b60      	cmp	r3, #96	@ 0x60
 8007ee6:	d050      	beq.n	8007f8a <HAL_TIM_ConfigClockSource+0x11a>
 8007ee8:	2b60      	cmp	r3, #96	@ 0x60
 8007eea:	d877      	bhi.n	8007fdc <HAL_TIM_ConfigClockSource+0x16c>
 8007eec:	2b50      	cmp	r3, #80	@ 0x50
 8007eee:	d03c      	beq.n	8007f6a <HAL_TIM_ConfigClockSource+0xfa>
 8007ef0:	2b50      	cmp	r3, #80	@ 0x50
 8007ef2:	d873      	bhi.n	8007fdc <HAL_TIM_ConfigClockSource+0x16c>
 8007ef4:	2b40      	cmp	r3, #64	@ 0x40
 8007ef6:	d058      	beq.n	8007faa <HAL_TIM_ConfigClockSource+0x13a>
 8007ef8:	2b40      	cmp	r3, #64	@ 0x40
 8007efa:	d86f      	bhi.n	8007fdc <HAL_TIM_ConfigClockSource+0x16c>
 8007efc:	2b30      	cmp	r3, #48	@ 0x30
 8007efe:	d064      	beq.n	8007fca <HAL_TIM_ConfigClockSource+0x15a>
 8007f00:	2b30      	cmp	r3, #48	@ 0x30
 8007f02:	d86b      	bhi.n	8007fdc <HAL_TIM_ConfigClockSource+0x16c>
 8007f04:	2b20      	cmp	r3, #32
 8007f06:	d060      	beq.n	8007fca <HAL_TIM_ConfigClockSource+0x15a>
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	d867      	bhi.n	8007fdc <HAL_TIM_ConfigClockSource+0x16c>
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d05c      	beq.n	8007fca <HAL_TIM_ConfigClockSource+0x15a>
 8007f10:	2b10      	cmp	r3, #16
 8007f12:	d05a      	beq.n	8007fca <HAL_TIM_ConfigClockSource+0x15a>
 8007f14:	e062      	b.n	8007fdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f26:	f000 faf6 	bl	8008516 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	609a      	str	r2, [r3, #8]
      break;
 8007f42:	e04f      	b.n	8007fe4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f54:	f000 fadf 	bl	8008516 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	689a      	ldr	r2, [r3, #8]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f66:	609a      	str	r2, [r3, #8]
      break;
 8007f68:	e03c      	b.n	8007fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f76:	461a      	mov	r2, r3
 8007f78:	f000 fa53 	bl	8008422 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2150      	movs	r1, #80	@ 0x50
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 faac 	bl	80084e0 <TIM_ITRx_SetConfig>
      break;
 8007f88:	e02c      	b.n	8007fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f96:	461a      	mov	r2, r3
 8007f98:	f000 fa72 	bl	8008480 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2160      	movs	r1, #96	@ 0x60
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 fa9c 	bl	80084e0 <TIM_ITRx_SetConfig>
      break;
 8007fa8:	e01c      	b.n	8007fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f000 fa33 	bl	8008422 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2140      	movs	r1, #64	@ 0x40
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 fa8c 	bl	80084e0 <TIM_ITRx_SetConfig>
      break;
 8007fc8:	e00c      	b.n	8007fe4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	f000 fa83 	bl	80084e0 <TIM_ITRx_SetConfig>
      break;
 8007fda:	e003      	b.n	8007fe4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	73fb      	strb	r3, [r7, #15]
      break;
 8007fe0:	e000      	b.n	8007fe4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007fe2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008006:	bf00      	nop
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008012:	b480      	push	{r7}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008026:	b480      	push	{r7}
 8008028:	b083      	sub	sp, #12
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
	...

0800803c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008052:	d00f      	beq.n	8008074 <TIM_Base_SetConfig+0x38>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a3c      	ldr	r2, [pc, #240]	@ (8008148 <TIM_Base_SetConfig+0x10c>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d00b      	beq.n	8008074 <TIM_Base_SetConfig+0x38>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a3b      	ldr	r2, [pc, #236]	@ (800814c <TIM_Base_SetConfig+0x110>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d007      	beq.n	8008074 <TIM_Base_SetConfig+0x38>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a3a      	ldr	r2, [pc, #232]	@ (8008150 <TIM_Base_SetConfig+0x114>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d003      	beq.n	8008074 <TIM_Base_SetConfig+0x38>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a39      	ldr	r2, [pc, #228]	@ (8008154 <TIM_Base_SetConfig+0x118>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d108      	bne.n	8008086 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800807a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	4313      	orrs	r3, r2
 8008084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800808c:	d027      	beq.n	80080de <TIM_Base_SetConfig+0xa2>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a2d      	ldr	r2, [pc, #180]	@ (8008148 <TIM_Base_SetConfig+0x10c>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d023      	beq.n	80080de <TIM_Base_SetConfig+0xa2>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a2c      	ldr	r2, [pc, #176]	@ (800814c <TIM_Base_SetConfig+0x110>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d01f      	beq.n	80080de <TIM_Base_SetConfig+0xa2>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a2b      	ldr	r2, [pc, #172]	@ (8008150 <TIM_Base_SetConfig+0x114>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d01b      	beq.n	80080de <TIM_Base_SetConfig+0xa2>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a2b      	ldr	r2, [pc, #172]	@ (8008158 <TIM_Base_SetConfig+0x11c>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d017      	beq.n	80080de <TIM_Base_SetConfig+0xa2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a2a      	ldr	r2, [pc, #168]	@ (800815c <TIM_Base_SetConfig+0x120>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d013      	beq.n	80080de <TIM_Base_SetConfig+0xa2>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a29      	ldr	r2, [pc, #164]	@ (8008160 <TIM_Base_SetConfig+0x124>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d00f      	beq.n	80080de <TIM_Base_SetConfig+0xa2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a28      	ldr	r2, [pc, #160]	@ (8008164 <TIM_Base_SetConfig+0x128>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d00b      	beq.n	80080de <TIM_Base_SetConfig+0xa2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a27      	ldr	r2, [pc, #156]	@ (8008168 <TIM_Base_SetConfig+0x12c>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d007      	beq.n	80080de <TIM_Base_SetConfig+0xa2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a26      	ldr	r2, [pc, #152]	@ (800816c <TIM_Base_SetConfig+0x130>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d003      	beq.n	80080de <TIM_Base_SetConfig+0xa2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a1e      	ldr	r2, [pc, #120]	@ (8008154 <TIM_Base_SetConfig+0x118>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d108      	bne.n	80080f0 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	689a      	ldr	r2, [r3, #8]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a13      	ldr	r2, [pc, #76]	@ (8008164 <TIM_Base_SetConfig+0x128>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d007      	beq.n	800812c <TIM_Base_SetConfig+0xf0>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a12      	ldr	r2, [pc, #72]	@ (8008168 <TIM_Base_SetConfig+0x12c>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d003      	beq.n	800812c <TIM_Base_SetConfig+0xf0>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a11      	ldr	r2, [pc, #68]	@ (800816c <TIM_Base_SetConfig+0x130>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d103      	bne.n	8008134 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	691a      	ldr	r2, [r3, #16]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	615a      	str	r2, [r3, #20]
}
 800813a:	bf00      	nop
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	40000400 	.word	0x40000400
 800814c:	40000800 	.word	0x40000800
 8008150:	40000c00 	.word	0x40000c00
 8008154:	40015c00 	.word	0x40015c00
 8008158:	40001800 	.word	0x40001800
 800815c:	40001c00 	.word	0x40001c00
 8008160:	40002000 	.word	0x40002000
 8008164:	40014000 	.word	0x40014000
 8008168:	40014400 	.word	0x40014400
 800816c:	40014800 	.word	0x40014800

08008170 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008170:	b480      	push	{r7}
 8008172:	b087      	sub	sp, #28
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	f023 0201 	bic.w	r2, r3, #1
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800819e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f023 0303 	bic.w	r3, r3, #3
 80081a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	f023 0302 	bic.w	r3, r3, #2
 80081b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a24      	ldr	r2, [pc, #144]	@ (8008258 <TIM_OC1_SetConfig+0xe8>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d007      	beq.n	80081dc <TIM_OC1_SetConfig+0x6c>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a23      	ldr	r2, [pc, #140]	@ (800825c <TIM_OC1_SetConfig+0xec>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d003      	beq.n	80081dc <TIM_OC1_SetConfig+0x6c>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a22      	ldr	r2, [pc, #136]	@ (8008260 <TIM_OC1_SetConfig+0xf0>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d10c      	bne.n	80081f6 <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f023 0308 	bic.w	r3, r3, #8
 80081e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f023 0304 	bic.w	r3, r3, #4
 80081f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a17      	ldr	r2, [pc, #92]	@ (8008258 <TIM_OC1_SetConfig+0xe8>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d007      	beq.n	800820e <TIM_OC1_SetConfig+0x9e>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a16      	ldr	r2, [pc, #88]	@ (800825c <TIM_OC1_SetConfig+0xec>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d003      	beq.n	800820e <TIM_OC1_SetConfig+0x9e>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a15      	ldr	r2, [pc, #84]	@ (8008260 <TIM_OC1_SetConfig+0xf0>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d111      	bne.n	8008232 <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800821c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	4313      	orrs	r3, r2
 8008226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	4313      	orrs	r3, r2
 8008230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	685a      	ldr	r2, [r3, #4]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	621a      	str	r2, [r3, #32]
}
 800824c:	bf00      	nop
 800824e:	371c      	adds	r7, #28
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	40014000 	.word	0x40014000
 800825c:	40014400 	.word	0x40014400
 8008260:	40014800 	.word	0x40014800

08008264 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008264:	b480      	push	{r7}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	f023 0210 	bic.w	r2, r3, #16
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800829a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	021b      	lsls	r3, r3, #8
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	f023 0320 	bic.w	r3, r3, #32
 80082ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	011b      	lsls	r3, r3, #4
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	613b      	str	r3, [r7, #16]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a17      	ldr	r2, [pc, #92]	@ (800831c <TIM_OC2_SetConfig+0xb8>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d007      	beq.n	80082d4 <TIM_OC2_SetConfig+0x70>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a16      	ldr	r2, [pc, #88]	@ (8008320 <TIM_OC2_SetConfig+0xbc>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d003      	beq.n	80082d4 <TIM_OC2_SetConfig+0x70>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a15      	ldr	r2, [pc, #84]	@ (8008324 <TIM_OC2_SetConfig+0xc0>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d10f      	bne.n	80082f4 <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80082da:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	685a      	ldr	r2, [r3, #4]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	621a      	str	r2, [r3, #32]
}
 800830e:	bf00      	nop
 8008310:	371c      	adds	r7, #28
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	40014000 	.word	0x40014000
 8008320:	40014400 	.word	0x40014400
 8008324:	40014800 	.word	0x40014800

08008328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008328:	b480      	push	{r7}
 800832a:	b087      	sub	sp, #28
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 0303 	bic.w	r3, r3, #3
 800835e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	4313      	orrs	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	021b      	lsls	r3, r3, #8
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	4313      	orrs	r3, r2
 800837c:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	621a      	str	r2, [r3, #32]
}
 8008398:	bf00      	nop
 800839a:	371c      	adds	r7, #28
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b087      	sub	sp, #28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	69db      	ldr	r3, [r3, #28]
 80083ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	021b      	lsls	r3, r3, #8
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	031b      	lsls	r3, r3, #12
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	621a      	str	r2, [r3, #32]
}
 8008416:	bf00      	nop
 8008418:	371c      	adds	r7, #28
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008422:	b480      	push	{r7}
 8008424:	b087      	sub	sp, #28
 8008426:	af00      	add	r7, sp, #0
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6a1b      	ldr	r3, [r3, #32]
 8008438:	f023 0201 	bic.w	r2, r3, #1
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800844c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	4313      	orrs	r3, r2
 8008456:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f023 030a 	bic.w	r3, r3, #10
 800845e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008460:	697a      	ldr	r2, [r7, #20]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	4313      	orrs	r3, r2
 8008466:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	621a      	str	r2, [r3, #32]
}
 8008474:	bf00      	nop
 8008476:	371c      	adds	r7, #28
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008480:	b480      	push	{r7}
 8008482:	b087      	sub	sp, #28
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	f023 0210 	bic.w	r2, r3, #16
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80084aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	031b      	lsls	r3, r3, #12
 80084b0:	697a      	ldr	r2, [r7, #20]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80084bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	011b      	lsls	r3, r3, #4
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	621a      	str	r2, [r3, #32]
}
 80084d4:	bf00      	nop
 80084d6:	371c      	adds	r7, #28
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084f8:	683a      	ldr	r2, [r7, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	f043 0307 	orr.w	r3, r3, #7
 8008502:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	609a      	str	r2, [r3, #8]
}
 800850a:	bf00      	nop
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008516:	b480      	push	{r7}
 8008518:	b087      	sub	sp, #28
 800851a:	af00      	add	r7, sp, #0
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	607a      	str	r2, [r7, #4]
 8008522:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008530:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	021a      	lsls	r2, r3, #8
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	431a      	orrs	r2, r3
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	4313      	orrs	r3, r2
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	4313      	orrs	r3, r2
 8008542:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	609a      	str	r2, [r3, #8]
}
 800854a:	bf00      	nop
 800854c:	371c      	adds	r7, #28
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008556:	b480      	push	{r7}
 8008558:	b087      	sub	sp, #28
 800855a:	af00      	add	r7, sp, #0
 800855c:	60f8      	str	r0, [r7, #12]
 800855e:	60b9      	str	r1, [r7, #8]
 8008560:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	f003 031f 	and.w	r3, r3, #31
 8008568:	2201      	movs	r2, #1
 800856a:	fa02 f303 	lsl.w	r3, r2, r3
 800856e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6a1a      	ldr	r2, [r3, #32]
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	43db      	mvns	r3, r3
 8008578:	401a      	ands	r2, r3
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6a1a      	ldr	r2, [r3, #32]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	f003 031f 	and.w	r3, r3, #31
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	fa01 f303 	lsl.w	r3, r1, r3
 800858e:	431a      	orrs	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	621a      	str	r2, [r3, #32]
}
 8008594:	bf00      	nop
 8008596:	371c      	adds	r7, #28
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d101      	bne.n	80085b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085b4:	2302      	movs	r3, #2
 80085b6:	e055      	b.n	8008664 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2202      	movs	r2, #2
 80085c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085fa:	d01d      	beq.n	8008638 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a1b      	ldr	r2, [pc, #108]	@ (8008670 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d018      	beq.n	8008638 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a1a      	ldr	r2, [pc, #104]	@ (8008674 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d013      	beq.n	8008638 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a18      	ldr	r2, [pc, #96]	@ (8008678 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d00e      	beq.n	8008638 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a17      	ldr	r2, [pc, #92]	@ (800867c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d009      	beq.n	8008638 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a15      	ldr	r2, [pc, #84]	@ (8008680 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d004      	beq.n	8008638 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a14      	ldr	r2, [pc, #80]	@ (8008684 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d10c      	bne.n	8008652 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800863e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	4313      	orrs	r3, r2
 8008648:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	40000400 	.word	0x40000400
 8008674:	40000800 	.word	0x40000800
 8008678:	40000c00 	.word	0x40000c00
 800867c:	40001800 	.word	0x40001800
 8008680:	40014000 	.word	0x40014000
 8008684:	40015c00 	.word	0x40015c00

08008688 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e040      	b.n	8008744 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d106      	bne.n	80086d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7fa f886 	bl	80027e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2224      	movs	r2, #36	@ 0x24
 80086dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f022 0201 	bic.w	r2, r2, #1
 80086ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fc54 	bl	8008f9c <UART_SetConfig>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d101      	bne.n	80086fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e022      	b.n	8008744 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008702:	2b00      	cmp	r3, #0
 8008704:	d002      	beq.n	800870c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fdc2 	bl	8009290 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	685a      	ldr	r2, [r3, #4]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800871a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689a      	ldr	r2, [r3, #8]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800872a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f042 0201 	orr.w	r2, r2, #1
 800873a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fe49 	bl	80093d4 <UART_CheckIdleState>
 8008742:	4603      	mov	r3, r0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08a      	sub	sp, #40	@ 0x28
 8008750:	af02      	add	r7, sp, #8
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	603b      	str	r3, [r7, #0]
 8008758:	4613      	mov	r3, r2
 800875a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008760:	2b20      	cmp	r3, #32
 8008762:	d177      	bne.n	8008854 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d002      	beq.n	8008770 <HAL_UART_Transmit+0x24>
 800876a:	88fb      	ldrh	r3, [r7, #6]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e070      	b.n	8008856 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2221      	movs	r2, #33	@ 0x21
 8008780:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008782:	f7fa fb11 	bl	8002da8 <HAL_GetTick>
 8008786:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	88fa      	ldrh	r2, [r7, #6]
 800878c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	88fa      	ldrh	r2, [r7, #6]
 8008794:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087a0:	d108      	bne.n	80087b4 <HAL_UART_Transmit+0x68>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d104      	bne.n	80087b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80087aa:	2300      	movs	r3, #0
 80087ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	61bb      	str	r3, [r7, #24]
 80087b2:	e003      	b.n	80087bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087b8:	2300      	movs	r3, #0
 80087ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80087bc:	e02f      	b.n	800881e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2200      	movs	r2, #0
 80087c6:	2180      	movs	r1, #128	@ 0x80
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f000 feab 	bl	8009524 <UART_WaitOnFlagUntilTimeout>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d004      	beq.n	80087de <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2220      	movs	r2, #32
 80087d8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e03b      	b.n	8008856 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10b      	bne.n	80087fc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	881a      	ldrh	r2, [r3, #0]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087f0:	b292      	uxth	r2, r2
 80087f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	3302      	adds	r3, #2
 80087f8:	61bb      	str	r3, [r7, #24]
 80087fa:	e007      	b.n	800880c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	781a      	ldrb	r2, [r3, #0]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	3301      	adds	r3, #1
 800880a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008812:	b29b      	uxth	r3, r3
 8008814:	3b01      	subs	r3, #1
 8008816:	b29a      	uxth	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008824:	b29b      	uxth	r3, r3
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1c9      	bne.n	80087be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	2200      	movs	r2, #0
 8008832:	2140      	movs	r1, #64	@ 0x40
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f000 fe75 	bl	8009524 <UART_WaitOnFlagUntilTimeout>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d004      	beq.n	800884a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2220      	movs	r2, #32
 8008844:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e005      	b.n	8008856 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2220      	movs	r2, #32
 800884e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	e000      	b.n	8008856 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008854:	2302      	movs	r3, #2
  }
}
 8008856:	4618      	mov	r0, r3
 8008858:	3720      	adds	r7, #32
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
	...

08008860 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008860:	b480      	push	{r7}
 8008862:	b08b      	sub	sp, #44	@ 0x2c
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	4613      	mov	r3, r2
 800886c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008872:	2b20      	cmp	r3, #32
 8008874:	d147      	bne.n	8008906 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d002      	beq.n	8008882 <HAL_UART_Transmit_IT+0x22>
 800887c:	88fb      	ldrh	r3, [r7, #6]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d101      	bne.n	8008886 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	e040      	b.n	8008908 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	88fa      	ldrh	r2, [r7, #6]
 8008890:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	88fa      	ldrh	r2, [r7, #6]
 8008898:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2221      	movs	r2, #33	@ 0x21
 80088ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088b8:	d107      	bne.n	80088ca <HAL_UART_Transmit_IT+0x6a>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d103      	bne.n	80088ca <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	4a13      	ldr	r2, [pc, #76]	@ (8008914 <HAL_UART_Transmit_IT+0xb4>)
 80088c6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80088c8:	e002      	b.n	80088d0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	4a12      	ldr	r2, [pc, #72]	@ (8008918 <HAL_UART_Transmit_IT+0xb8>)
 80088ce:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	e853 3f00 	ldrex	r3, [r3]
 80088dc:	613b      	str	r3, [r7, #16]
   return(result);
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	461a      	mov	r2, r3
 80088ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ee:	623b      	str	r3, [r7, #32]
 80088f0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f2:	69f9      	ldr	r1, [r7, #28]
 80088f4:	6a3a      	ldr	r2, [r7, #32]
 80088f6:	e841 2300 	strex	r3, r2, [r1]
 80088fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1e6      	bne.n	80088d0 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	e000      	b.n	8008908 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008906:	2302      	movs	r3, #2
  }
}
 8008908:	4618      	mov	r0, r3
 800890a:	372c      	adds	r7, #44	@ 0x2c
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr
 8008914:	08009907 	.word	0x08009907
 8008918:	08009851 	.word	0x08009851

0800891c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08a      	sub	sp, #40	@ 0x28
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	4613      	mov	r3, r2
 8008928:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008930:	2b20      	cmp	r3, #32
 8008932:	d132      	bne.n	800899a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d002      	beq.n	8008940 <HAL_UART_Receive_IT+0x24>
 800893a:	88fb      	ldrh	r3, [r7, #6]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e02b      	b.n	800899c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008954:	2b00      	cmp	r3, #0
 8008956:	d018      	beq.n	800898a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	e853 3f00 	ldrex	r3, [r3]
 8008964:	613b      	str	r3, [r7, #16]
   return(result);
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800896c:	627b      	str	r3, [r7, #36]	@ 0x24
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	461a      	mov	r2, r3
 8008974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008976:	623b      	str	r3, [r7, #32]
 8008978:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897a:	69f9      	ldr	r1, [r7, #28]
 800897c:	6a3a      	ldr	r2, [r7, #32]
 800897e:	e841 2300 	strex	r3, r2, [r1]
 8008982:	61bb      	str	r3, [r7, #24]
   return(result);
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1e6      	bne.n	8008958 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800898a:	88fb      	ldrh	r3, [r7, #6]
 800898c:	461a      	mov	r2, r3
 800898e:	68b9      	ldr	r1, [r7, #8]
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f000 fe2f 	bl	80095f4 <UART_Start_Receive_IT>
 8008996:	4603      	mov	r3, r0
 8008998:	e000      	b.n	800899c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800899a:	2302      	movs	r3, #2
  }
}
 800899c:	4618      	mov	r0, r3
 800899e:	3728      	adds	r7, #40	@ 0x28
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b0ba      	sub	sp, #232	@ 0xe8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80089ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80089ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 80089d2:	4013      	ands	r3, r2
 80089d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80089d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d115      	bne.n	8008a0c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80089e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089e4:	f003 0320 	and.w	r3, r3, #32
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00f      	beq.n	8008a0c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80089ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089f0:	f003 0320 	and.w	r3, r3, #32
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d009      	beq.n	8008a0c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f000 82ab 	beq.w	8008f58 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	4798      	blx	r3
      }
      return;
 8008a0a:	e2a5      	b.n	8008f58 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008a0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f000 8117 	beq.w	8008c44 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d106      	bne.n	8008a30 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008a22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008a26:	4b85      	ldr	r3, [pc, #532]	@ (8008c3c <HAL_UART_IRQHandler+0x298>)
 8008a28:	4013      	ands	r3, r2
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f000 810a 	beq.w	8008c44 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d011      	beq.n	8008a60 <HAL_UART_IRQHandler+0xbc>
 8008a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00b      	beq.n	8008a60 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a56:	f043 0201 	orr.w	r2, r3, #1
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a64:	f003 0302 	and.w	r3, r3, #2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d011      	beq.n	8008a90 <HAL_UART_IRQHandler+0xec>
 8008a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00b      	beq.n	8008a90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2202      	movs	r2, #2
 8008a7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a86:	f043 0204 	orr.w	r2, r3, #4
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a94:	f003 0304 	and.w	r3, r3, #4
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d011      	beq.n	8008ac0 <HAL_UART_IRQHandler+0x11c>
 8008a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00b      	beq.n	8008ac0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2204      	movs	r2, #4
 8008aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ab6:	f043 0202 	orr.w	r2, r3, #2
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ac4:	f003 0308 	and.w	r3, r3, #8
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d017      	beq.n	8008afc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ad0:	f003 0320 	and.w	r3, r3, #32
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d105      	bne.n	8008ae4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008adc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00b      	beq.n	8008afc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2208      	movs	r2, #8
 8008aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008af2:	f043 0208 	orr.w	r2, r3, #8
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d012      	beq.n	8008b2e <HAL_UART_IRQHandler+0x18a>
 8008b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00c      	beq.n	8008b2e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b24:	f043 0220 	orr.w	r2, r3, #32
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f000 8211 	beq.w	8008f5c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b3e:	f003 0320 	and.w	r3, r3, #32
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00d      	beq.n	8008b62 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b4a:	f003 0320 	and.w	r3, r3, #32
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d007      	beq.n	8008b62 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b76:	2b40      	cmp	r3, #64	@ 0x40
 8008b78:	d005      	beq.n	8008b86 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008b7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008b7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d04f      	beq.n	8008c26 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fde8 	bl	800975c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b96:	2b40      	cmp	r3, #64	@ 0x40
 8008b98:	d141      	bne.n	8008c1e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3308      	adds	r3, #8
 8008ba0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ba8:	e853 3f00 	ldrex	r3, [r3]
 8008bac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008bb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3308      	adds	r3, #8
 8008bc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008bc6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008bca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008bd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008bd6:	e841 2300 	strex	r3, r2, [r1]
 8008bda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1d9      	bne.n	8008b9a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d013      	beq.n	8008c16 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bf2:	4a13      	ldr	r2, [pc, #76]	@ (8008c40 <HAL_UART_IRQHandler+0x29c>)
 8008bf4:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fa fa2a 	bl	8003054 <HAL_DMA_Abort_IT>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d017      	beq.n	8008c36 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008c10:	4610      	mov	r0, r2
 8008c12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c14:	e00f      	b.n	8008c36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f9aa 	bl	8008f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c1c:	e00b      	b.n	8008c36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f9a6 	bl	8008f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c24:	e007      	b.n	8008c36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f9a2 	bl	8008f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008c34:	e192      	b.n	8008f5c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c36:	bf00      	nop
    return;
 8008c38:	e190      	b.n	8008f5c <HAL_UART_IRQHandler+0x5b8>
 8008c3a:	bf00      	nop
 8008c3c:	04000120 	.word	0x04000120
 8008c40:	08009825 	.word	0x08009825

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	f040 814b 	bne.w	8008ee4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c52:	f003 0310 	and.w	r3, r3, #16
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f000 8144 	beq.w	8008ee4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c60:	f003 0310 	and.w	r3, r3, #16
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f000 813d 	beq.w	8008ee4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2210      	movs	r2, #16
 8008c70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c7c:	2b40      	cmp	r3, #64	@ 0x40
 8008c7e:	f040 80b5 	bne.w	8008dec <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 8164 	beq.w	8008f60 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	f080 815c 	bcs.w	8008f60 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	2b20      	cmp	r3, #32
 8008cba:	f000 8086 	beq.w	8008dca <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008cca:	e853 3f00 	ldrex	r3, [r3]
 8008cce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008cd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008cd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cda:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ce8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008cec:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008cf4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008cf8:	e841 2300 	strex	r3, r2, [r1]
 8008cfc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1da      	bne.n	8008cbe <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3308      	adds	r3, #8
 8008d0e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d12:	e853 3f00 	ldrex	r3, [r3]
 8008d16:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008d18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d1a:	f023 0301 	bic.w	r3, r3, #1
 8008d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3308      	adds	r3, #8
 8008d28:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d2c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d30:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d32:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d34:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d38:	e841 2300 	strex	r3, r2, [r1]
 8008d3c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1e1      	bne.n	8008d08 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	3308      	adds	r3, #8
 8008d4a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d4e:	e853 3f00 	ldrex	r3, [r3]
 8008d52:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3308      	adds	r3, #8
 8008d64:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008d68:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d6a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008d6e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008d70:	e841 2300 	strex	r3, r2, [r1]
 8008d74:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008d76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1e3      	bne.n	8008d44 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2220      	movs	r2, #32
 8008d80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d92:	e853 3f00 	ldrex	r3, [r3]
 8008d96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d9a:	f023 0310 	bic.w	r3, r3, #16
 8008d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008dac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008dae:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008db2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008dba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e4      	bne.n	8008d8a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7fa f90c 	bl	8002fe2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2202      	movs	r2, #2
 8008dce:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	4619      	mov	r1, r3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f8cd 	bl	8008f84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008dea:	e0b9      	b.n	8008f60 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 80ab 	beq.w	8008f64 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8008e0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 80a6 	beq.w	8008f64 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e20:	e853 3f00 	ldrex	r3, [r3]
 8008e24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	461a      	mov	r2, r3
 8008e36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e3c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e42:	e841 2300 	strex	r3, r2, [r1]
 8008e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1e4      	bne.n	8008e18 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	3308      	adds	r3, #8
 8008e54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e58:	e853 3f00 	ldrex	r3, [r3]
 8008e5c:	623b      	str	r3, [r7, #32]
   return(result);
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	f023 0301 	bic.w	r3, r3, #1
 8008e64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	3308      	adds	r3, #8
 8008e6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008e72:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e7a:	e841 2300 	strex	r3, r2, [r1]
 8008e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1e3      	bne.n	8008e4e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2220      	movs	r2, #32
 8008e8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	e853 3f00 	ldrex	r3, [r3]
 8008ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f023 0310 	bic.w	r3, r3, #16
 8008eae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008ebc:	61fb      	str	r3, [r7, #28]
 8008ebe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec0:	69b9      	ldr	r1, [r7, #24]
 8008ec2:	69fa      	ldr	r2, [r7, #28]
 8008ec4:	e841 2300 	strex	r3, r2, [r1]
 8008ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1e4      	bne.n	8008e9a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ed6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008eda:	4619      	mov	r1, r3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f851 	bl	8008f84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ee2:	e03f      	b.n	8008f64 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ee8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00e      	beq.n	8008f0e <HAL_UART_IRQHandler+0x56a>
 8008ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ef4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d008      	beq.n	8008f0e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008f04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 ff2f 	bl	8009d6a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f0c:	e02d      	b.n	8008f6a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00e      	beq.n	8008f38 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d008      	beq.n	8008f38 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d01c      	beq.n	8008f68 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	4798      	blx	r3
    }
    return;
 8008f36:	e017      	b.n	8008f68 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d012      	beq.n	8008f6a <HAL_UART_IRQHandler+0x5c6>
 8008f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00c      	beq.n	8008f6a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fd38 	bl	80099c6 <UART_EndTransmit_IT>
    return;
 8008f56:	e008      	b.n	8008f6a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008f58:	bf00      	nop
 8008f5a:	e006      	b.n	8008f6a <HAL_UART_IRQHandler+0x5c6>
    return;
 8008f5c:	bf00      	nop
 8008f5e:	e004      	b.n	8008f6a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008f60:	bf00      	nop
 8008f62:	e002      	b.n	8008f6a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008f64:	bf00      	nop
 8008f66:	e000      	b.n	8008f6a <HAL_UART_IRQHandler+0x5c6>
    return;
 8008f68:	bf00      	nop
  }

}
 8008f6a:	37e8      	adds	r7, #232	@ 0xe8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b088      	sub	sp, #32
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	689a      	ldr	r2, [r3, #8]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	431a      	orrs	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8008fca:	f023 030c 	bic.w	r3, r3, #12
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	6812      	ldr	r2, [r2, #0]
 8008fd2:	6979      	ldr	r1, [r7, #20]
 8008fd4:	430b      	orrs	r3, r1
 8008fd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68da      	ldr	r2, [r3, #12]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	430a      	orrs	r2, r1
 8008fec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a1b      	ldr	r3, [r3, #32]
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	430a      	orrs	r2, r1
 8009010:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a99      	ldr	r2, [pc, #612]	@ (800927c <UART_SetConfig+0x2e0>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d120      	bne.n	800905e <UART_SetConfig+0xc2>
 800901c:	4b98      	ldr	r3, [pc, #608]	@ (8009280 <UART_SetConfig+0x2e4>)
 800901e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009020:	f003 0303 	and.w	r3, r3, #3
 8009024:	2b03      	cmp	r3, #3
 8009026:	d817      	bhi.n	8009058 <UART_SetConfig+0xbc>
 8009028:	a201      	add	r2, pc, #4	@ (adr r2, 8009030 <UART_SetConfig+0x94>)
 800902a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800902e:	bf00      	nop
 8009030:	08009041 	.word	0x08009041
 8009034:	0800904d 	.word	0x0800904d
 8009038:	08009053 	.word	0x08009053
 800903c:	08009047 	.word	0x08009047
 8009040:	2301      	movs	r3, #1
 8009042:	77fb      	strb	r3, [r7, #31]
 8009044:	e061      	b.n	800910a <UART_SetConfig+0x16e>
 8009046:	2302      	movs	r3, #2
 8009048:	77fb      	strb	r3, [r7, #31]
 800904a:	e05e      	b.n	800910a <UART_SetConfig+0x16e>
 800904c:	2304      	movs	r3, #4
 800904e:	77fb      	strb	r3, [r7, #31]
 8009050:	e05b      	b.n	800910a <UART_SetConfig+0x16e>
 8009052:	2308      	movs	r3, #8
 8009054:	77fb      	strb	r3, [r7, #31]
 8009056:	e058      	b.n	800910a <UART_SetConfig+0x16e>
 8009058:	2310      	movs	r3, #16
 800905a:	77fb      	strb	r3, [r7, #31]
 800905c:	e055      	b.n	800910a <UART_SetConfig+0x16e>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a88      	ldr	r2, [pc, #544]	@ (8009284 <UART_SetConfig+0x2e8>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d124      	bne.n	80090b2 <UART_SetConfig+0x116>
 8009068:	4b85      	ldr	r3, [pc, #532]	@ (8009280 <UART_SetConfig+0x2e4>)
 800906a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800906c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009070:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009074:	d011      	beq.n	800909a <UART_SetConfig+0xfe>
 8009076:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800907a:	d817      	bhi.n	80090ac <UART_SetConfig+0x110>
 800907c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009080:	d011      	beq.n	80090a6 <UART_SetConfig+0x10a>
 8009082:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009086:	d811      	bhi.n	80090ac <UART_SetConfig+0x110>
 8009088:	2b00      	cmp	r3, #0
 800908a:	d003      	beq.n	8009094 <UART_SetConfig+0xf8>
 800908c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009090:	d006      	beq.n	80090a0 <UART_SetConfig+0x104>
 8009092:	e00b      	b.n	80090ac <UART_SetConfig+0x110>
 8009094:	2300      	movs	r3, #0
 8009096:	77fb      	strb	r3, [r7, #31]
 8009098:	e037      	b.n	800910a <UART_SetConfig+0x16e>
 800909a:	2302      	movs	r3, #2
 800909c:	77fb      	strb	r3, [r7, #31]
 800909e:	e034      	b.n	800910a <UART_SetConfig+0x16e>
 80090a0:	2304      	movs	r3, #4
 80090a2:	77fb      	strb	r3, [r7, #31]
 80090a4:	e031      	b.n	800910a <UART_SetConfig+0x16e>
 80090a6:	2308      	movs	r3, #8
 80090a8:	77fb      	strb	r3, [r7, #31]
 80090aa:	e02e      	b.n	800910a <UART_SetConfig+0x16e>
 80090ac:	2310      	movs	r3, #16
 80090ae:	77fb      	strb	r3, [r7, #31]
 80090b0:	e02b      	b.n	800910a <UART_SetConfig+0x16e>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a74      	ldr	r2, [pc, #464]	@ (8009288 <UART_SetConfig+0x2ec>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d124      	bne.n	8009106 <UART_SetConfig+0x16a>
 80090bc:	4b70      	ldr	r3, [pc, #448]	@ (8009280 <UART_SetConfig+0x2e4>)
 80090be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090c0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80090c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80090c8:	d011      	beq.n	80090ee <UART_SetConfig+0x152>
 80090ca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80090ce:	d817      	bhi.n	8009100 <UART_SetConfig+0x164>
 80090d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80090d4:	d011      	beq.n	80090fa <UART_SetConfig+0x15e>
 80090d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80090da:	d811      	bhi.n	8009100 <UART_SetConfig+0x164>
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d003      	beq.n	80090e8 <UART_SetConfig+0x14c>
 80090e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80090e4:	d006      	beq.n	80090f4 <UART_SetConfig+0x158>
 80090e6:	e00b      	b.n	8009100 <UART_SetConfig+0x164>
 80090e8:	2300      	movs	r3, #0
 80090ea:	77fb      	strb	r3, [r7, #31]
 80090ec:	e00d      	b.n	800910a <UART_SetConfig+0x16e>
 80090ee:	2302      	movs	r3, #2
 80090f0:	77fb      	strb	r3, [r7, #31]
 80090f2:	e00a      	b.n	800910a <UART_SetConfig+0x16e>
 80090f4:	2304      	movs	r3, #4
 80090f6:	77fb      	strb	r3, [r7, #31]
 80090f8:	e007      	b.n	800910a <UART_SetConfig+0x16e>
 80090fa:	2308      	movs	r3, #8
 80090fc:	77fb      	strb	r3, [r7, #31]
 80090fe:	e004      	b.n	800910a <UART_SetConfig+0x16e>
 8009100:	2310      	movs	r3, #16
 8009102:	77fb      	strb	r3, [r7, #31]
 8009104:	e001      	b.n	800910a <UART_SetConfig+0x16e>
 8009106:	2310      	movs	r3, #16
 8009108:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009112:	d15a      	bne.n	80091ca <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 8009114:	7ffb      	ldrb	r3, [r7, #31]
 8009116:	2b08      	cmp	r3, #8
 8009118:	d827      	bhi.n	800916a <UART_SetConfig+0x1ce>
 800911a:	a201      	add	r2, pc, #4	@ (adr r2, 8009120 <UART_SetConfig+0x184>)
 800911c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009120:	08009145 	.word	0x08009145
 8009124:	0800914d 	.word	0x0800914d
 8009128:	08009155 	.word	0x08009155
 800912c:	0800916b 	.word	0x0800916b
 8009130:	0800915b 	.word	0x0800915b
 8009134:	0800916b 	.word	0x0800916b
 8009138:	0800916b 	.word	0x0800916b
 800913c:	0800916b 	.word	0x0800916b
 8009140:	08009163 	.word	0x08009163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009144:	f7fd fe1c 	bl	8006d80 <HAL_RCC_GetPCLK1Freq>
 8009148:	61b8      	str	r0, [r7, #24]
        break;
 800914a:	e013      	b.n	8009174 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800914c:	f7fd fe3a 	bl	8006dc4 <HAL_RCC_GetPCLK2Freq>
 8009150:	61b8      	str	r0, [r7, #24]
        break;
 8009152:	e00f      	b.n	8009174 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009154:	4b4d      	ldr	r3, [pc, #308]	@ (800928c <UART_SetConfig+0x2f0>)
 8009156:	61bb      	str	r3, [r7, #24]
        break;
 8009158:	e00c      	b.n	8009174 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800915a:	f7fd fd99 	bl	8006c90 <HAL_RCC_GetSysClockFreq>
 800915e:	61b8      	str	r0, [r7, #24]
        break;
 8009160:	e008      	b.n	8009174 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009166:	61bb      	str	r3, [r7, #24]
        break;
 8009168:	e004      	b.n	8009174 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 800916a:	2300      	movs	r3, #0
 800916c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	77bb      	strb	r3, [r7, #30]
        break;
 8009172:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d074      	beq.n	8009264 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	005a      	lsls	r2, r3, #1
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	085b      	lsrs	r3, r3, #1
 8009184:	441a      	add	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	fbb2 f3f3 	udiv	r3, r2, r3
 800918e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	2b0f      	cmp	r3, #15
 8009194:	d916      	bls.n	80091c4 <UART_SetConfig+0x228>
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800919c:	d212      	bcs.n	80091c4 <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	f023 030f 	bic.w	r3, r3, #15
 80091a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	085b      	lsrs	r3, r3, #1
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	f003 0307 	and.w	r3, r3, #7
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	89fb      	ldrh	r3, [r7, #14]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	89fa      	ldrh	r2, [r7, #14]
 80091c0:	60da      	str	r2, [r3, #12]
 80091c2:	e04f      	b.n	8009264 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	77bb      	strb	r3, [r7, #30]
 80091c8:	e04c      	b.n	8009264 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091ca:	7ffb      	ldrb	r3, [r7, #31]
 80091cc:	2b08      	cmp	r3, #8
 80091ce:	d828      	bhi.n	8009222 <UART_SetConfig+0x286>
 80091d0:	a201      	add	r2, pc, #4	@ (adr r2, 80091d8 <UART_SetConfig+0x23c>)
 80091d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d6:	bf00      	nop
 80091d8:	080091fd 	.word	0x080091fd
 80091dc:	08009205 	.word	0x08009205
 80091e0:	0800920d 	.word	0x0800920d
 80091e4:	08009223 	.word	0x08009223
 80091e8:	08009213 	.word	0x08009213
 80091ec:	08009223 	.word	0x08009223
 80091f0:	08009223 	.word	0x08009223
 80091f4:	08009223 	.word	0x08009223
 80091f8:	0800921b 	.word	0x0800921b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091fc:	f7fd fdc0 	bl	8006d80 <HAL_RCC_GetPCLK1Freq>
 8009200:	61b8      	str	r0, [r7, #24]
        break;
 8009202:	e013      	b.n	800922c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009204:	f7fd fdde 	bl	8006dc4 <HAL_RCC_GetPCLK2Freq>
 8009208:	61b8      	str	r0, [r7, #24]
        break;
 800920a:	e00f      	b.n	800922c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800920c:	4b1f      	ldr	r3, [pc, #124]	@ (800928c <UART_SetConfig+0x2f0>)
 800920e:	61bb      	str	r3, [r7, #24]
        break;
 8009210:	e00c      	b.n	800922c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009212:	f7fd fd3d 	bl	8006c90 <HAL_RCC_GetSysClockFreq>
 8009216:	61b8      	str	r0, [r7, #24]
        break;
 8009218:	e008      	b.n	800922c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800921a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800921e:	61bb      	str	r3, [r7, #24]
        break;
 8009220:	e004      	b.n	800922c <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8009222:	2300      	movs	r3, #0
 8009224:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	77bb      	strb	r3, [r7, #30]
        break;
 800922a:	bf00      	nop
    }

    if (pclk != 0U)
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d018      	beq.n	8009264 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	085a      	lsrs	r2, r3, #1
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	441a      	add	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	fbb2 f3f3 	udiv	r3, r2, r3
 8009244:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	2b0f      	cmp	r3, #15
 800924a:	d909      	bls.n	8009260 <UART_SetConfig+0x2c4>
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009252:	d205      	bcs.n	8009260 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	b29a      	uxth	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	60da      	str	r2, [r3, #12]
 800925e:	e001      	b.n	8009264 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009270:	7fbb      	ldrb	r3, [r7, #30]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3720      	adds	r7, #32
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	40013800 	.word	0x40013800
 8009280:	40021000 	.word	0x40021000
 8009284:	40004400 	.word	0x40004400
 8009288:	40004800 	.word	0x40004800
 800928c:	007a1200 	.word	0x007a1200

08009290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800929c:	f003 0301 	and.w	r3, r3, #1
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00a      	beq.n	80092ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	430a      	orrs	r2, r1
 80092b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092be:	f003 0302 	and.w	r3, r3, #2
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00a      	beq.n	80092dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	430a      	orrs	r2, r1
 80092da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092e0:	f003 0304 	and.w	r3, r3, #4
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00a      	beq.n	80092fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	430a      	orrs	r2, r1
 80092fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009302:	f003 0308 	and.w	r3, r3, #8
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00a      	beq.n	8009320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	430a      	orrs	r2, r1
 800931e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009324:	f003 0310 	and.w	r3, r3, #16
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00a      	beq.n	8009342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	430a      	orrs	r2, r1
 8009340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009346:	f003 0320 	and.w	r3, r3, #32
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00a      	beq.n	8009364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	430a      	orrs	r2, r1
 8009362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800936c:	2b00      	cmp	r3, #0
 800936e:	d01a      	beq.n	80093a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	430a      	orrs	r2, r1
 8009384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800938a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800938e:	d10a      	bne.n	80093a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	430a      	orrs	r2, r1
 80093a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00a      	beq.n	80093c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	430a      	orrs	r2, r1
 80093c6:	605a      	str	r2, [r3, #4]
  }
}
 80093c8:	bf00      	nop
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b098      	sub	sp, #96	@ 0x60
 80093d8:	af02      	add	r7, sp, #8
 80093da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093e4:	f7f9 fce0 	bl	8002da8 <HAL_GetTick>
 80093e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 0308 	and.w	r3, r3, #8
 80093f4:	2b08      	cmp	r3, #8
 80093f6:	d12e      	bne.n	8009456 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009400:	2200      	movs	r2, #0
 8009402:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f88c 	bl	8009524 <UART_WaitOnFlagUntilTimeout>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d021      	beq.n	8009456 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941a:	e853 3f00 	ldrex	r3, [r3]
 800941e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009426:	653b      	str	r3, [r7, #80]	@ 0x50
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	461a      	mov	r2, r3
 800942e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009430:	647b      	str	r3, [r7, #68]	@ 0x44
 8009432:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009434:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009438:	e841 2300 	strex	r3, r2, [r1]
 800943c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800943e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1e6      	bne.n	8009412 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2220      	movs	r2, #32
 8009448:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e062      	b.n	800951c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	2b04      	cmp	r3, #4
 8009462:	d149      	bne.n	80094f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009464:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800946c:	2200      	movs	r2, #0
 800946e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f856 	bl	8009524 <UART_WaitOnFlagUntilTimeout>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d03c      	beq.n	80094f8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009486:	e853 3f00 	ldrex	r3, [r3]
 800948a:	623b      	str	r3, [r7, #32]
   return(result);
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	461a      	mov	r2, r3
 800949a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800949c:	633b      	str	r3, [r7, #48]	@ 0x30
 800949e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094a4:	e841 2300 	strex	r3, r2, [r1]
 80094a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1e6      	bne.n	800947e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3308      	adds	r3, #8
 80094b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	e853 3f00 	ldrex	r3, [r3]
 80094be:	60fb      	str	r3, [r7, #12]
   return(result);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f023 0301 	bic.w	r3, r3, #1
 80094c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	3308      	adds	r3, #8
 80094ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094d0:	61fa      	str	r2, [r7, #28]
 80094d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d4:	69b9      	ldr	r1, [r7, #24]
 80094d6:	69fa      	ldr	r2, [r7, #28]
 80094d8:	e841 2300 	strex	r3, r2, [r1]
 80094dc:	617b      	str	r3, [r7, #20]
   return(result);
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1e5      	bne.n	80094b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2220      	movs	r2, #32
 80094e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e011      	b.n	800951c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2220      	movs	r2, #32
 80094fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2220      	movs	r2, #32
 8009502:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3758      	adds	r7, #88	@ 0x58
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	603b      	str	r3, [r7, #0]
 8009530:	4613      	mov	r3, r2
 8009532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009534:	e049      	b.n	80095ca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953c:	d045      	beq.n	80095ca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800953e:	f7f9 fc33 	bl	8002da8 <HAL_GetTick>
 8009542:	4602      	mov	r2, r0
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	69ba      	ldr	r2, [r7, #24]
 800954a:	429a      	cmp	r2, r3
 800954c:	d302      	bcc.n	8009554 <UART_WaitOnFlagUntilTimeout+0x30>
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d101      	bne.n	8009558 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009554:	2303      	movs	r3, #3
 8009556:	e048      	b.n	80095ea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0304 	and.w	r3, r3, #4
 8009562:	2b00      	cmp	r3, #0
 8009564:	d031      	beq.n	80095ca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	69db      	ldr	r3, [r3, #28]
 800956c:	f003 0308 	and.w	r3, r3, #8
 8009570:	2b08      	cmp	r3, #8
 8009572:	d110      	bne.n	8009596 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2208      	movs	r2, #8
 800957a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f000 f8ed 	bl	800975c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2208      	movs	r2, #8
 8009586:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e029      	b.n	80095ea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	69db      	ldr	r3, [r3, #28]
 800959c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095a4:	d111      	bne.n	80095ca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 f8d3 	bl	800975c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2220      	movs	r2, #32
 80095ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e00f      	b.n	80095ea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	69da      	ldr	r2, [r3, #28]
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	4013      	ands	r3, r2
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	bf0c      	ite	eq
 80095da:	2301      	moveq	r3, #1
 80095dc:	2300      	movne	r3, #0
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	461a      	mov	r2, r3
 80095e2:	79fb      	ldrb	r3, [r7, #7]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d0a6      	beq.n	8009536 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
	...

080095f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b097      	sub	sp, #92	@ 0x5c
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	4613      	mov	r3, r2
 8009600:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	88fa      	ldrh	r2, [r7, #6]
 800960c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	88fa      	ldrh	r2, [r7, #6]
 8009614:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009626:	d10e      	bne.n	8009646 <UART_Start_Receive_IT+0x52>
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d105      	bne.n	800963c <UART_Start_Receive_IT+0x48>
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009636:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800963a:	e01a      	b.n	8009672 <UART_Start_Receive_IT+0x7e>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	22ff      	movs	r2, #255	@ 0xff
 8009640:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009644:	e015      	b.n	8009672 <UART_Start_Receive_IT+0x7e>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10d      	bne.n	800966a <UART_Start_Receive_IT+0x76>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d104      	bne.n	8009660 <UART_Start_Receive_IT+0x6c>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	22ff      	movs	r2, #255	@ 0xff
 800965a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800965e:	e008      	b.n	8009672 <UART_Start_Receive_IT+0x7e>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	227f      	movs	r2, #127	@ 0x7f
 8009664:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009668:	e003      	b.n	8009672 <UART_Start_Receive_IT+0x7e>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2222      	movs	r2, #34	@ 0x22
 800967e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3308      	adds	r3, #8
 8009688:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800968c:	e853 3f00 	ldrex	r3, [r3]
 8009690:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009694:	f043 0301 	orr.w	r3, r3, #1
 8009698:	657b      	str	r3, [r7, #84]	@ 0x54
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3308      	adds	r3, #8
 80096a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096a2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80096a4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80096a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096aa:	e841 2300 	strex	r3, r2, [r1]
 80096ae:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80096b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1e5      	bne.n	8009682 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096be:	d107      	bne.n	80096d0 <UART_Start_Receive_IT+0xdc>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d103      	bne.n	80096d0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	4a22      	ldr	r2, [pc, #136]	@ (8009754 <UART_Start_Receive_IT+0x160>)
 80096cc:	669a      	str	r2, [r3, #104]	@ 0x68
 80096ce:	e002      	b.n	80096d6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	4a21      	ldr	r2, [pc, #132]	@ (8009758 <UART_Start_Receive_IT+0x164>)
 80096d4:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d019      	beq.n	8009712 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e6:	e853 3f00 	ldrex	r3, [r3]
 80096ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ee:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80096f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	461a      	mov	r2, r3
 80096fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80096fe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009700:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009702:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009704:	e841 2300 	strex	r3, r2, [r1]
 8009708:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800970a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e6      	bne.n	80096de <UART_Start_Receive_IT+0xea>
 8009710:	e018      	b.n	8009744 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	e853 3f00 	ldrex	r3, [r3]
 800971e:	613b      	str	r3, [r7, #16]
   return(result);
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	f043 0320 	orr.w	r3, r3, #32
 8009726:	653b      	str	r3, [r7, #80]	@ 0x50
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	461a      	mov	r2, r3
 800972e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009730:	623b      	str	r3, [r7, #32]
 8009732:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009734:	69f9      	ldr	r1, [r7, #28]
 8009736:	6a3a      	ldr	r2, [r7, #32]
 8009738:	e841 2300 	strex	r3, r2, [r1]
 800973c:	61bb      	str	r3, [r7, #24]
   return(result);
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1e6      	bne.n	8009712 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	375c      	adds	r7, #92	@ 0x5c
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	08009bc3 	.word	0x08009bc3
 8009758:	08009a1b 	.word	0x08009a1b

0800975c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800975c:	b480      	push	{r7}
 800975e:	b095      	sub	sp, #84	@ 0x54
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800976c:	e853 3f00 	ldrex	r3, [r3]
 8009770:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009774:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009778:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	461a      	mov	r2, r3
 8009780:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009782:	643b      	str	r3, [r7, #64]	@ 0x40
 8009784:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009786:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009788:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800978a:	e841 2300 	strex	r3, r2, [r1]
 800978e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1e6      	bne.n	8009764 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3308      	adds	r3, #8
 800979c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979e:	6a3b      	ldr	r3, [r7, #32]
 80097a0:	e853 3f00 	ldrex	r3, [r3]
 80097a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	f023 0301 	bic.w	r3, r3, #1
 80097ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	3308      	adds	r3, #8
 80097b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097be:	e841 2300 	strex	r3, r2, [r1]
 80097c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1e5      	bne.n	8009796 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d118      	bne.n	8009804 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	e853 3f00 	ldrex	r3, [r3]
 80097de:	60bb      	str	r3, [r7, #8]
   return(result);
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	f023 0310 	bic.w	r3, r3, #16
 80097e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	461a      	mov	r2, r3
 80097ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097f0:	61bb      	str	r3, [r7, #24]
 80097f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f4:	6979      	ldr	r1, [r7, #20]
 80097f6:	69ba      	ldr	r2, [r7, #24]
 80097f8:	e841 2300 	strex	r3, r2, [r1]
 80097fc:	613b      	str	r3, [r7, #16]
   return(result);
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1e6      	bne.n	80097d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2220      	movs	r2, #32
 8009808:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009818:	bf00      	nop
 800981a:	3754      	adds	r7, #84	@ 0x54
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009830:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009842:	68f8      	ldr	r0, [r7, #12]
 8009844:	f7ff fb94 	bl	8008f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009848:	bf00      	nop
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009850:	b480      	push	{r7}
 8009852:	b08f      	sub	sp, #60	@ 0x3c
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800985c:	2b21      	cmp	r3, #33	@ 0x21
 800985e:	d14c      	bne.n	80098fa <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009866:	b29b      	uxth	r3, r3
 8009868:	2b00      	cmp	r3, #0
 800986a:	d132      	bne.n	80098d2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009872:	6a3b      	ldr	r3, [r7, #32]
 8009874:	e853 3f00 	ldrex	r3, [r3]
 8009878:	61fb      	str	r3, [r7, #28]
   return(result);
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009880:	637b      	str	r3, [r7, #52]	@ 0x34
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	461a      	mov	r2, r3
 8009888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800988a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800988c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009890:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009892:	e841 2300 	strex	r3, r2, [r1]
 8009896:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1e6      	bne.n	800986c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	e853 3f00 	ldrex	r3, [r3]
 80098aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	461a      	mov	r2, r3
 80098ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098bc:	61bb      	str	r3, [r7, #24]
 80098be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c0:	6979      	ldr	r1, [r7, #20]
 80098c2:	69ba      	ldr	r2, [r7, #24]
 80098c4:	e841 2300 	strex	r3, r2, [r1]
 80098c8:	613b      	str	r3, [r7, #16]
   return(result);
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1e6      	bne.n	800989e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80098d0:	e013      	b.n	80098fa <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098d6:	781a      	ldrb	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098e2:	1c5a      	adds	r2, r3, #1
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	3b01      	subs	r3, #1
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80098fa:	bf00      	nop
 80098fc:	373c      	adds	r7, #60	@ 0x3c
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009906:	b480      	push	{r7}
 8009908:	b091      	sub	sp, #68	@ 0x44
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009912:	2b21      	cmp	r3, #33	@ 0x21
 8009914:	d151      	bne.n	80099ba <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800991c:	b29b      	uxth	r3, r3
 800991e:	2b00      	cmp	r3, #0
 8009920:	d132      	bne.n	8009988 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800992a:	e853 3f00 	ldrex	r3, [r3]
 800992e:	623b      	str	r3, [r7, #32]
   return(result);
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009936:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	461a      	mov	r2, r3
 800993e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009940:	633b      	str	r3, [r7, #48]	@ 0x30
 8009942:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009944:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009948:	e841 2300 	strex	r3, r2, [r1]
 800994c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800994e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1e6      	bne.n	8009922 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	e853 3f00 	ldrex	r3, [r3]
 8009960:	60fb      	str	r3, [r7, #12]
   return(result);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009968:	637b      	str	r3, [r7, #52]	@ 0x34
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	461a      	mov	r2, r3
 8009970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009972:	61fb      	str	r3, [r7, #28]
 8009974:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009976:	69b9      	ldr	r1, [r7, #24]
 8009978:	69fa      	ldr	r2, [r7, #28]
 800997a:	e841 2300 	strex	r3, r2, [r1]
 800997e:	617b      	str	r3, [r7, #20]
   return(result);
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1e6      	bne.n	8009954 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009986:	e018      	b.n	80099ba <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800998c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800998e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009990:	881a      	ldrh	r2, [r3, #0]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800999a:	b292      	uxth	r2, r2
 800999c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099a2:	1c9a      	adds	r2, r3, #2
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	3b01      	subs	r3, #1
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80099ba:	bf00      	nop
 80099bc:	3744      	adds	r7, #68	@ 0x44
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b088      	sub	sp, #32
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	e853 3f00 	ldrex	r3, [r3]
 80099da:	60bb      	str	r3, [r7, #8]
   return(result);
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099e2:	61fb      	str	r3, [r7, #28]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	461a      	mov	r2, r3
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	61bb      	str	r3, [r7, #24]
 80099ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f0:	6979      	ldr	r1, [r7, #20]
 80099f2:	69ba      	ldr	r2, [r7, #24]
 80099f4:	e841 2300 	strex	r3, r2, [r1]
 80099f8:	613b      	str	r3, [r7, #16]
   return(result);
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1e6      	bne.n	80099ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2220      	movs	r2, #32
 8009a04:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f7f8 fd47 	bl	80024a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a12:	bf00      	nop
 8009a14:	3720      	adds	r7, #32
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b09c      	sub	sp, #112	@ 0x70
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a28:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a32:	2b22      	cmp	r3, #34	@ 0x22
 8009a34:	f040 80b9 	bne.w	8009baa <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009a3e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a42:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009a46:	b2d9      	uxtb	r1, r3
 8009a48:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a52:	400a      	ands	r2, r1
 8009a54:	b2d2      	uxtb	r2, r2
 8009a56:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a5c:	1c5a      	adds	r2, r3, #1
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f040 809c 	bne.w	8009bba <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a8a:	e853 3f00 	ldrex	r3, [r3]
 8009a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009aa0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009aa2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009aa6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009aa8:	e841 2300 	strex	r3, r2, [r1]
 8009aac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1e6      	bne.n	8009a82 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	3308      	adds	r3, #8
 8009aba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009abe:	e853 3f00 	ldrex	r3, [r3]
 8009ac2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ac6:	f023 0301 	bic.w	r3, r3, #1
 8009aca:	667b      	str	r3, [r7, #100]	@ 0x64
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009ad4:	647a      	str	r2, [r7, #68]	@ 0x44
 8009ad6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ada:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009adc:	e841 2300 	strex	r3, r2, [r1]
 8009ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d1e5      	bne.n	8009ab4 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2220      	movs	r2, #32
 8009aec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d018      	beq.n	8009b3c <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b12:	e853 3f00 	ldrex	r3, [r3]
 8009b16:	623b      	str	r3, [r7, #32]
   return(result);
 8009b18:	6a3b      	ldr	r3, [r7, #32]
 8009b1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009b1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	461a      	mov	r2, r3
 8009b26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b28:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b30:	e841 2300 	strex	r3, r2, [r1]
 8009b34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1e6      	bne.n	8009b0a <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d12e      	bne.n	8009ba2 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	e853 3f00 	ldrex	r3, [r3]
 8009b56:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f023 0310 	bic.w	r3, r3, #16
 8009b5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	461a      	mov	r2, r3
 8009b66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b68:	61fb      	str	r3, [r7, #28]
 8009b6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6c:	69b9      	ldr	r1, [r7, #24]
 8009b6e:	69fa      	ldr	r2, [r7, #28]
 8009b70:	e841 2300 	strex	r3, r2, [r1]
 8009b74:	617b      	str	r3, [r7, #20]
   return(result);
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e6      	bne.n	8009b4a <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	f003 0310 	and.w	r3, r3, #16
 8009b86:	2b10      	cmp	r3, #16
 8009b88:	d103      	bne.n	8009b92 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2210      	movs	r2, #16
 8009b90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009b98:	4619      	mov	r1, r3
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7ff f9f2 	bl	8008f84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ba0:	e00b      	b.n	8009bba <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7f8 fabc 	bl	8002120 <HAL_UART_RxCpltCallback>
}
 8009ba8:	e007      	b.n	8009bba <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	699a      	ldr	r2, [r3, #24]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f042 0208 	orr.w	r2, r2, #8
 8009bb8:	619a      	str	r2, [r3, #24]
}
 8009bba:	bf00      	nop
 8009bbc:	3770      	adds	r7, #112	@ 0x70
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b09c      	sub	sp, #112	@ 0x70
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009bd0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bda:	2b22      	cmp	r3, #34	@ 0x22
 8009bdc:	f040 80b9 	bne.w	8009d52 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009be6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bee:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009bf0:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009bf4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009bfe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c04:	1c9a      	adds	r2, r3, #2
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	3b01      	subs	r3, #1
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f040 809c 	bne.w	8009d62 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c32:	e853 3f00 	ldrex	r3, [r3]
 8009c36:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	461a      	mov	r2, r3
 8009c46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c48:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c4a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009c50:	e841 2300 	strex	r3, r2, [r1]
 8009c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009c56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1e6      	bne.n	8009c2a <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	3308      	adds	r3, #8
 8009c62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c66:	e853 3f00 	ldrex	r3, [r3]
 8009c6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6e:	f023 0301 	bic.w	r3, r3, #1
 8009c72:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3308      	adds	r3, #8
 8009c7a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009c7c:	643a      	str	r2, [r7, #64]	@ 0x40
 8009c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c84:	e841 2300 	strex	r3, r2, [r1]
 8009c88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1e5      	bne.n	8009c5c <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2220      	movs	r2, #32
 8009c94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d018      	beq.n	8009ce4 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	e853 3f00 	ldrex	r3, [r3]
 8009cbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009cc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	461a      	mov	r2, r3
 8009cce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cd2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cd8:	e841 2300 	strex	r3, r2, [r1]
 8009cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d1e6      	bne.n	8009cb2 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d12e      	bne.n	8009d4a <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	e853 3f00 	ldrex	r3, [r3]
 8009cfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	f023 0310 	bic.w	r3, r3, #16
 8009d06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009d10:	61bb      	str	r3, [r7, #24]
 8009d12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d14:	6979      	ldr	r1, [r7, #20]
 8009d16:	69ba      	ldr	r2, [r7, #24]
 8009d18:	e841 2300 	strex	r3, r2, [r1]
 8009d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1e6      	bne.n	8009cf2 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	69db      	ldr	r3, [r3, #28]
 8009d2a:	f003 0310 	and.w	r3, r3, #16
 8009d2e:	2b10      	cmp	r3, #16
 8009d30:	d103      	bne.n	8009d3a <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2210      	movs	r2, #16
 8009d38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009d40:	4619      	mov	r1, r3
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7ff f91e 	bl	8008f84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d48:	e00b      	b.n	8009d62 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7f8 f9e8 	bl	8002120 <HAL_UART_RxCpltCallback>
}
 8009d50:	e007      	b.n	8009d62 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	699a      	ldr	r2, [r3, #24]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f042 0208 	orr.w	r2, r2, #8
 8009d60:	619a      	str	r2, [r3, #24]
}
 8009d62:	bf00      	nop
 8009d64:	3770      	adds	r7, #112	@ 0x70
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b083      	sub	sp, #12
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d72:	bf00      	nop
 8009d74:	370c      	adds	r7, #12
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr

08009d7e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009d7e:	b480      	push	{r7}
 8009d80:	b085      	sub	sp, #20
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009d8e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8009d92:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3714      	adds	r7, #20
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009db4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8009db8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	43db      	mvns	r3, r3
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	4013      	ands	r3, r2
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009de2:	b084      	sub	sp, #16
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	f107 0014 	add.w	r0, r7, #20
 8009df0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	b004      	add	sp, #16
 8009e22:	4770      	bx	lr

08009e24 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b09d      	sub	sp, #116	@ 0x74
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	4413      	add	r3, r2
 8009e3e:	881b      	ldrh	r3, [r3, #0]
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8009e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e4a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	78db      	ldrb	r3, [r3, #3]
 8009e52:	2b03      	cmp	r3, #3
 8009e54:	d81f      	bhi.n	8009e96 <USB_ActivateEndpoint+0x72>
 8009e56:	a201      	add	r2, pc, #4	@ (adr r2, 8009e5c <USB_ActivateEndpoint+0x38>)
 8009e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5c:	08009e6d 	.word	0x08009e6d
 8009e60:	08009e89 	.word	0x08009e89
 8009e64:	08009e9f 	.word	0x08009e9f
 8009e68:	08009e7b 	.word	0x08009e7b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009e6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009e70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009e74:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009e78:	e012      	b.n	8009ea0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009e7a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009e7e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8009e82:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009e86:	e00b      	b.n	8009ea0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009e88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009e8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009e90:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009e94:	e004      	b.n	8009ea0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
 8009e98:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8009e9c:	e000      	b.n	8009ea0 <USB_ActivateEndpoint+0x7c>
      break;
 8009e9e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	441a      	add	r2, r3
 8009eaa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009eae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009eb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009eb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	4413      	add	r3, r2
 8009ecc:	881b      	ldrh	r3, [r3, #0]
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	b21b      	sxth	r3, r3
 8009ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eda:	b21a      	sxth	r2, r3
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	b21b      	sxth	r3, r3
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	b21b      	sxth	r3, r3
 8009ee6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	441a      	add	r2, r3
 8009ef4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009ef8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009efc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	7b1b      	ldrb	r3, [r3, #12]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f040 8178 	bne.w	800a206 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	785b      	ldrb	r3, [r3, #1]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f000 8084 	beq.w	800a028 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	61bb      	str	r3, [r7, #24]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	4413      	add	r3, r2
 8009f32:	61bb      	str	r3, [r7, #24]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	011a      	lsls	r2, r3, #4
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f42:	617b      	str	r3, [r7, #20]
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	88db      	ldrh	r3, [r3, #6]
 8009f48:	085b      	lsrs	r3, r3, #1
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	005b      	lsls	r3, r3, #1
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	4413      	add	r3, r2
 8009f5e:	881b      	ldrh	r3, [r3, #0]
 8009f60:	827b      	strh	r3, [r7, #18]
 8009f62:	8a7b      	ldrh	r3, [r7, #18]
 8009f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d01b      	beq.n	8009fa4 <USB_ActivateEndpoint+0x180>
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4413      	add	r3, r2
 8009f76:	881b      	ldrh	r3, [r3, #0]
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f82:	823b      	strh	r3, [r7, #16]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	441a      	add	r2, r3
 8009f8e:	8a3b      	ldrh	r3, [r7, #16]
 8009f90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	78db      	ldrb	r3, [r3, #3]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d020      	beq.n	8009fee <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	881b      	ldrh	r3, [r3, #0]
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fc2:	81bb      	strh	r3, [r7, #12]
 8009fc4:	89bb      	ldrh	r3, [r7, #12]
 8009fc6:	f083 0320 	eor.w	r3, r3, #32
 8009fca:	81bb      	strh	r3, [r7, #12]
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	441a      	add	r2, r3
 8009fd6:	89bb      	ldrh	r3, [r7, #12]
 8009fd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fe0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	8013      	strh	r3, [r2, #0]
 8009fec:	e2d5      	b.n	800a59a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4413      	add	r3, r2
 8009ff8:	881b      	ldrh	r3, [r3, #0]
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a000:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a004:	81fb      	strh	r3, [r7, #14]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	441a      	add	r2, r3
 800a010:	89fb      	ldrh	r3, [r7, #14]
 800a012:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a016:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a01a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a01e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a022:	b29b      	uxth	r3, r3
 800a024:	8013      	strh	r3, [r2, #0]
 800a026:	e2b8      	b.n	800a59a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a032:	b29b      	uxth	r3, r3
 800a034:	461a      	mov	r2, r3
 800a036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a038:	4413      	add	r3, r2
 800a03a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	011a      	lsls	r2, r3, #4
 800a042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a044:	4413      	add	r3, r2
 800a046:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800a04a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	88db      	ldrh	r3, [r3, #6]
 800a050:	085b      	lsrs	r3, r3, #1
 800a052:	b29b      	uxth	r3, r3
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	b29a      	uxth	r2, r3
 800a058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a05a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a066:	b29b      	uxth	r3, r3
 800a068:	461a      	mov	r2, r3
 800a06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a06c:	4413      	add	r3, r2
 800a06e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	011a      	lsls	r2, r3, #4
 800a076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a078:	4413      	add	r3, r2
 800a07a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a07e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a082:	881b      	ldrh	r3, [r3, #0]
 800a084:	b29b      	uxth	r3, r3
 800a086:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a08e:	801a      	strh	r2, [r3, #0]
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	691b      	ldr	r3, [r3, #16]
 800a094:	2b3e      	cmp	r3, #62	@ 0x3e
 800a096:	d91d      	bls.n	800a0d4 <USB_ActivateEndpoint+0x2b0>
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	095b      	lsrs	r3, r3, #5
 800a09e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	f003 031f 	and.w	r3, r3, #31
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d102      	bne.n	800a0b2 <USB_ActivateEndpoint+0x28e>
 800a0ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b4:	881b      	ldrh	r3, [r3, #0]
 800a0b6:	b29a      	uxth	r2, r3
 800a0b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	029b      	lsls	r3, r3, #10
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d0:	801a      	strh	r2, [r3, #0]
 800a0d2:	e026      	b.n	800a122 <USB_ActivateEndpoint+0x2fe>
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10a      	bne.n	800a0f2 <USB_ActivateEndpoint+0x2ce>
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0de:	881b      	ldrh	r3, [r3, #0]
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ee:	801a      	strh	r2, [r3, #0]
 800a0f0:	e017      	b.n	800a122 <USB_ActivateEndpoint+0x2fe>
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	085b      	lsrs	r3, r3, #1
 800a0f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	f003 0301 	and.w	r3, r3, #1
 800a102:	2b00      	cmp	r3, #0
 800a104:	d002      	beq.n	800a10c <USB_ActivateEndpoint+0x2e8>
 800a106:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a108:	3301      	adds	r3, #1
 800a10a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10e:	881b      	ldrh	r3, [r3, #0]
 800a110:	b29a      	uxth	r2, r3
 800a112:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a114:	b29b      	uxth	r3, r3
 800a116:	029b      	lsls	r3, r3, #10
 800a118:	b29b      	uxth	r3, r3
 800a11a:	4313      	orrs	r3, r2
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a120:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	4413      	add	r3, r2
 800a12c:	881b      	ldrh	r3, [r3, #0]
 800a12e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a130:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a132:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a136:	2b00      	cmp	r3, #0
 800a138:	d01b      	beq.n	800a172 <USB_ActivateEndpoint+0x34e>
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	4413      	add	r3, r2
 800a144:	881b      	ldrh	r3, [r3, #0]
 800a146:	b29b      	uxth	r3, r3
 800a148:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a14c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a150:	843b      	strh	r3, [r7, #32]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	441a      	add	r2, r3
 800a15c:	8c3b      	ldrh	r3, [r7, #32]
 800a15e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a162:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a166:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a16a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a16e:	b29b      	uxth	r3, r3
 800a170:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d124      	bne.n	800a1c4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	4413      	add	r3, r2
 800a184:	881b      	ldrh	r3, [r3, #0]
 800a186:	b29b      	uxth	r3, r3
 800a188:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a18c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a190:	83bb      	strh	r3, [r7, #28]
 800a192:	8bbb      	ldrh	r3, [r7, #28]
 800a194:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a198:	83bb      	strh	r3, [r7, #28]
 800a19a:	8bbb      	ldrh	r3, [r7, #28]
 800a19c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a1a0:	83bb      	strh	r3, [r7, #28]
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	441a      	add	r2, r3
 800a1ac:	8bbb      	ldrh	r3, [r7, #28]
 800a1ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	8013      	strh	r3, [r2, #0]
 800a1c2:	e1ea      	b.n	800a59a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	4413      	add	r3, r2
 800a1ce:	881b      	ldrh	r3, [r3, #0]
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a1d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1da:	83fb      	strh	r3, [r7, #30]
 800a1dc:	8bfb      	ldrh	r3, [r7, #30]
 800a1de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a1e2:	83fb      	strh	r3, [r7, #30]
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	441a      	add	r2, r3
 800a1ee:	8bfb      	ldrh	r3, [r7, #30]
 800a1f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a200:	b29b      	uxth	r3, r3
 800a202:	8013      	strh	r3, [r2, #0]
 800a204:	e1c9      	b.n	800a59a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	78db      	ldrb	r3, [r3, #3]
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d11e      	bne.n	800a24c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4413      	add	r3, r2
 800a218:	881b      	ldrh	r3, [r3, #0]
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a224:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	441a      	add	r2, r3
 800a232:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a236:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a23a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a23e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a246:	b29b      	uxth	r3, r3
 800a248:	8013      	strh	r3, [r2, #0]
 800a24a:	e01d      	b.n	800a288 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	4413      	add	r3, r2
 800a256:	881b      	ldrh	r3, [r3, #0]
 800a258:	b29b      	uxth	r3, r3
 800a25a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a25e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a262:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	441a      	add	r2, r3
 800a270:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a274:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a278:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a27c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a284:	b29b      	uxth	r3, r3
 800a286:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a292:	b29b      	uxth	r3, r3
 800a294:	461a      	mov	r2, r3
 800a296:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a298:	4413      	add	r3, r2
 800a29a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	011a      	lsls	r2, r3, #4
 800a2a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a2aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	891b      	ldrh	r3, [r3, #8]
 800a2b0:	085b      	lsrs	r3, r3, #1
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	b29a      	uxth	r2, r3
 800a2b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a2ba:	801a      	strh	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2cc:	4413      	add	r3, r2
 800a2ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	011a      	lsls	r2, r3, #4
 800a2d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2d8:	4413      	add	r3, r2
 800a2da:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800a2de:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	895b      	ldrh	r3, [r3, #10]
 800a2e4:	085b      	lsrs	r3, r3, #1
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	005b      	lsls	r3, r3, #1
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2ee:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	785b      	ldrb	r3, [r3, #1]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f040 8093 	bne.w	800a420 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	4413      	add	r3, r2
 800a304:	881b      	ldrh	r3, [r3, #0]
 800a306:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800a30a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a30e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d01b      	beq.n	800a34e <USB_ActivateEndpoint+0x52a>
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	4413      	add	r3, r2
 800a320:	881b      	ldrh	r3, [r3, #0]
 800a322:	b29b      	uxth	r3, r3
 800a324:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a32c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	441a      	add	r2, r3
 800a338:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a33a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a33e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a342:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	4413      	add	r3, r2
 800a358:	881b      	ldrh	r3, [r3, #0]
 800a35a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a35c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a35e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a362:	2b00      	cmp	r3, #0
 800a364:	d01b      	beq.n	800a39e <USB_ActivateEndpoint+0x57a>
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	4413      	add	r3, r2
 800a370:	881b      	ldrh	r3, [r3, #0]
 800a372:	b29b      	uxth	r3, r3
 800a374:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a37c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	441a      	add	r2, r3
 800a388:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a38a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a38e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a396:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	881b      	ldrh	r3, [r3, #0]
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a3b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3b4:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a3b6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a3b8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a3bc:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a3be:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a3c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a3c4:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	441a      	add	r2, r3
 800a3d0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a3d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	4413      	add	r3, r2
 800a3f0:	881b      	ldrh	r3, [r3, #0]
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	441a      	add	r2, r3
 800a408:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a40a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a40e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	8013      	strh	r3, [r2, #0]
 800a41e:	e0bc      	b.n	800a59a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	4413      	add	r3, r2
 800a42a:	881b      	ldrh	r3, [r3, #0]
 800a42c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a430:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a434:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d01d      	beq.n	800a478 <USB_ActivateEndpoint+0x654>
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	4413      	add	r3, r2
 800a446:	881b      	ldrh	r3, [r3, #0]
 800a448:	b29b      	uxth	r3, r3
 800a44a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a44e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a452:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	441a      	add	r2, r3
 800a460:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a464:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a468:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a46c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a474:	b29b      	uxth	r3, r3
 800a476:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	881b      	ldrh	r3, [r3, #0]
 800a484:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800a488:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800a48c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a490:	2b00      	cmp	r3, #0
 800a492:	d01d      	beq.n	800a4d0 <USB_ActivateEndpoint+0x6ac>
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	4413      	add	r3, r2
 800a49e:	881b      	ldrh	r3, [r3, #0]
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4aa:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	441a      	add	r2, r3
 800a4b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800a4bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	78db      	ldrb	r3, [r3, #3]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d024      	beq.n	800a522 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	4413      	add	r3, r2
 800a4e2:	881b      	ldrh	r3, [r3, #0]
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4ee:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a4f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a4f6:	f083 0320 	eor.w	r3, r3, #32
 800a4fa:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	441a      	add	r2, r3
 800a508:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a50c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a510:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a514:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	8013      	strh	r3, [r2, #0]
 800a520:	e01d      	b.n	800a55e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	4413      	add	r3, r2
 800a52c:	881b      	ldrh	r3, [r3, #0]
 800a52e:	b29b      	uxth	r3, r3
 800a530:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a534:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a538:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	441a      	add	r2, r3
 800a546:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a54a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a54e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	881b      	ldrh	r3, [r3, #0]
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a570:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a574:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	441a      	add	r2, r3
 800a582:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a586:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a58a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a58e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a596:	b29b      	uxth	r3, r3
 800a598:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a59a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3774      	adds	r7, #116	@ 0x74
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop

0800a5ac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b08d      	sub	sp, #52	@ 0x34
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	7b1b      	ldrb	r3, [r3, #12]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f040 808e 	bne.w	800a6dc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	785b      	ldrb	r3, [r3, #1]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d044      	beq.n	800a652 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	4413      	add	r3, r2
 800a5d2:	881b      	ldrh	r3, [r3, #0]
 800a5d4:	81bb      	strh	r3, [r7, #12]
 800a5d6:	89bb      	ldrh	r3, [r7, #12]
 800a5d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d01b      	beq.n	800a618 <USB_DeactivateEndpoint+0x6c>
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	881b      	ldrh	r3, [r3, #0]
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5f6:	817b      	strh	r3, [r7, #10]
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	441a      	add	r2, r3
 800a602:	897b      	ldrh	r3, [r7, #10]
 800a604:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a608:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a60c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a610:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a614:	b29b      	uxth	r3, r3
 800a616:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	881b      	ldrh	r3, [r3, #0]
 800a624:	b29b      	uxth	r3, r3
 800a626:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a62a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a62e:	813b      	strh	r3, [r7, #8]
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	441a      	add	r2, r3
 800a63a:	893b      	ldrh	r3, [r7, #8]
 800a63c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a640:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a644:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	8013      	strh	r3, [r2, #0]
 800a650:	e192      	b.n	800a978 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	4413      	add	r3, r2
 800a65c:	881b      	ldrh	r3, [r3, #0]
 800a65e:	827b      	strh	r3, [r7, #18]
 800a660:	8a7b      	ldrh	r3, [r7, #18]
 800a662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a666:	2b00      	cmp	r3, #0
 800a668:	d01b      	beq.n	800a6a2 <USB_DeactivateEndpoint+0xf6>
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4413      	add	r3, r2
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	b29b      	uxth	r3, r3
 800a678:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a67c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a680:	823b      	strh	r3, [r7, #16]
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	441a      	add	r2, r3
 800a68c:	8a3b      	ldrh	r3, [r7, #16]
 800a68e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a692:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a696:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a69a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	881b      	ldrh	r3, [r3, #0]
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a6b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6b8:	81fb      	strh	r3, [r7, #14]
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	441a      	add	r2, r3
 800a6c4:	89fb      	ldrh	r3, [r7, #14]
 800a6c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	8013      	strh	r3, [r2, #0]
 800a6da:	e14d      	b.n	800a978 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	785b      	ldrb	r3, [r3, #1]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f040 80a5 	bne.w	800a830 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	4413      	add	r3, r2
 800a6f0:	881b      	ldrh	r3, [r3, #0]
 800a6f2:	843b      	strh	r3, [r7, #32]
 800a6f4:	8c3b      	ldrh	r3, [r7, #32]
 800a6f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d01b      	beq.n	800a736 <USB_DeactivateEndpoint+0x18a>
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	4413      	add	r3, r2
 800a708:	881b      	ldrh	r3, [r3, #0]
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a714:	83fb      	strh	r3, [r7, #30]
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	441a      	add	r2, r3
 800a720:	8bfb      	ldrh	r3, [r7, #30]
 800a722:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a726:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a72a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a72e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a732:	b29b      	uxth	r3, r3
 800a734:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	4413      	add	r3, r2
 800a740:	881b      	ldrh	r3, [r3, #0]
 800a742:	83bb      	strh	r3, [r7, #28]
 800a744:	8bbb      	ldrh	r3, [r7, #28]
 800a746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d01b      	beq.n	800a786 <USB_DeactivateEndpoint+0x1da>
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	881b      	ldrh	r3, [r3, #0]
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a764:	837b      	strh	r3, [r7, #26]
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	441a      	add	r2, r3
 800a770:	8b7b      	ldrh	r3, [r7, #26]
 800a772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a77a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a77e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a782:	b29b      	uxth	r3, r3
 800a784:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	4413      	add	r3, r2
 800a790:	881b      	ldrh	r3, [r3, #0]
 800a792:	b29b      	uxth	r3, r3
 800a794:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a79c:	833b      	strh	r3, [r7, #24]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	441a      	add	r2, r3
 800a7a8:	8b3b      	ldrh	r3, [r7, #24]
 800a7aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	4413      	add	r3, r2
 800a7c8:	881b      	ldrh	r3, [r3, #0]
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a7d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7d4:	82fb      	strh	r3, [r7, #22]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	441a      	add	r2, r3
 800a7e0:	8afb      	ldrh	r3, [r7, #22]
 800a7e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	4413      	add	r3, r2
 800a800:	881b      	ldrh	r3, [r3, #0]
 800a802:	b29b      	uxth	r3, r3
 800a804:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a80c:	82bb      	strh	r3, [r7, #20]
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	441a      	add	r2, r3
 800a818:	8abb      	ldrh	r3, [r7, #20]
 800a81a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a81e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	8013      	strh	r3, [r2, #0]
 800a82e:	e0a3      	b.n	800a978 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	4413      	add	r3, r2
 800a83a:	881b      	ldrh	r3, [r3, #0]
 800a83c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a83e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a840:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a844:	2b00      	cmp	r3, #0
 800a846:	d01b      	beq.n	800a880 <USB_DeactivateEndpoint+0x2d4>
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4413      	add	r3, r2
 800a852:	881b      	ldrh	r3, [r3, #0]
 800a854:	b29b      	uxth	r3, r3
 800a856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a85a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a85e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	441a      	add	r2, r3
 800a86a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a86c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a874:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4413      	add	r3, r2
 800a88a:	881b      	ldrh	r3, [r3, #0]
 800a88c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800a88e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a894:	2b00      	cmp	r3, #0
 800a896:	d01b      	beq.n	800a8d0 <USB_DeactivateEndpoint+0x324>
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	881b      	ldrh	r3, [r3, #0]
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	441a      	add	r2, r3
 800a8ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a8bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	4413      	add	r3, r2
 800a8da:	881b      	ldrh	r3, [r3, #0]
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	441a      	add	r2, r3
 800a8f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a8f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a904:	b29b      	uxth	r3, r3
 800a906:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	4413      	add	r3, r2
 800a912:	881b      	ldrh	r3, [r3, #0]
 800a914:	b29b      	uxth	r3, r3
 800a916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a91a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a91e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	441a      	add	r2, r3
 800a92a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a92c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a930:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a934:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	4413      	add	r3, r2
 800a94a:	881b      	ldrh	r3, [r3, #0]
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a956:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	441a      	add	r2, r3
 800a962:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a964:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a968:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a96c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a974:	b29b      	uxth	r3, r3
 800a976:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3734      	adds	r7, #52	@ 0x34
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b0c2      	sub	sp, #264	@ 0x108
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a990:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a994:	6018      	str	r0, [r3, #0]
 800a996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a99a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a99e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a9a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	785b      	ldrb	r3, [r3, #1]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	f040 86b7 	bne.w	800b720 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a9b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	699a      	ldr	r2, [r3, #24]
 800a9be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d908      	bls.n	800a9e0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a9ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a9de:	e007      	b.n	800a9f0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a9e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	699b      	ldr	r3, [r3, #24]
 800a9ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a9f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	7b1b      	ldrb	r3, [r3, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d13a      	bne.n	800aa76 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800aa00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	6959      	ldr	r1, [r3, #20]
 800aa0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	88da      	ldrh	r2, [r3, #6]
 800aa18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800aa22:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800aa26:	6800      	ldr	r0, [r0, #0]
 800aa28:	f001 fc8c 	bl	800c344 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aa2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	613b      	str	r3, [r7, #16]
 800aa38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	461a      	mov	r2, r3
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	613b      	str	r3, [r7, #16]
 800aa50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	011a      	lsls	r2, r3, #4
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	4413      	add	r3, r2
 800aa62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800aa66:	60fb      	str	r3, [r7, #12]
 800aa68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	801a      	strh	r2, [r3, #0]
 800aa72:	f000 be1f 	b.w	800b6b4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800aa76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	78db      	ldrb	r3, [r3, #3]
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	f040 8462 	bne.w	800b34c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800aa88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	6a1a      	ldr	r2, [r3, #32]
 800aa94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	f240 83df 	bls.w	800b264 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800aaa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aab4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	4413      	add	r3, r2
 800aac0:	881b      	ldrh	r3, [r3, #0]
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aac8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aacc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800aad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aad4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	441a      	add	r2, r3
 800aaea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aaee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aaf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aaf6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800aafa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ab02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	6a1a      	ldr	r2, [r3, #32]
 800ab0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab12:	1ad2      	subs	r2, r2, r3
 800ab14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ab20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	4413      	add	r3, r2
 800ab3a:	881b      	ldrh	r3, [r3, #0]
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f000 81c7 	beq.w	800aed6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	785b      	ldrb	r3, [r3, #1]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d177      	bne.n	800ac54 <USB_EPStartXfer+0x2ce>
 800ab64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	461a      	mov	r2, r3
 800ab82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab84:	4413      	add	r3, r2
 800ab86:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	011a      	lsls	r2, r3, #4
 800ab96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab98:	4413      	add	r3, r2
 800ab9a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ab9e:	627b      	str	r3, [r7, #36]	@ 0x24
 800aba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba2:	881b      	ldrh	r3, [r3, #0]
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abaa:	b29a      	uxth	r2, r3
 800abac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abae:	801a      	strh	r2, [r3, #0]
 800abb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abb4:	2b3e      	cmp	r3, #62	@ 0x3e
 800abb6:	d921      	bls.n	800abfc <USB_EPStartXfer+0x276>
 800abb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abbc:	095b      	lsrs	r3, r3, #5
 800abbe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800abc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abc6:	f003 031f 	and.w	r3, r3, #31
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d104      	bne.n	800abd8 <USB_EPStartXfer+0x252>
 800abce:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800abd2:	3b01      	subs	r3, #1
 800abd4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800abd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abda:	881b      	ldrh	r3, [r3, #0]
 800abdc:	b29a      	uxth	r2, r3
 800abde:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	029b      	lsls	r3, r3, #10
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	4313      	orrs	r3, r2
 800abea:	b29b      	uxth	r3, r3
 800abec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abf4:	b29a      	uxth	r2, r3
 800abf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf8:	801a      	strh	r2, [r3, #0]
 800abfa:	e050      	b.n	800ac9e <USB_EPStartXfer+0x318>
 800abfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10a      	bne.n	800ac1a <USB_EPStartXfer+0x294>
 800ac04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac06:	881b      	ldrh	r3, [r3, #0]
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac12:	b29a      	uxth	r2, r3
 800ac14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac16:	801a      	strh	r2, [r3, #0]
 800ac18:	e041      	b.n	800ac9e <USB_EPStartXfer+0x318>
 800ac1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac1e:	085b      	lsrs	r3, r3, #1
 800ac20:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ac24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac28:	f003 0301 	and.w	r3, r3, #1
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d004      	beq.n	800ac3a <USB_EPStartXfer+0x2b4>
 800ac30:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ac34:	3301      	adds	r3, #1
 800ac36:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	b29a      	uxth	r2, r3
 800ac40:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	029b      	lsls	r3, r3, #10
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac50:	801a      	strh	r2, [r3, #0]
 800ac52:	e024      	b.n	800ac9e <USB_EPStartXfer+0x318>
 800ac54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	785b      	ldrb	r3, [r3, #1]
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d11c      	bne.n	800ac9e <USB_EPStartXfer+0x318>
 800ac64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	461a      	mov	r2, r3
 800ac76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac78:	4413      	add	r3, r2
 800ac7a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	011a      	lsls	r2, r3, #4
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8c:	4413      	add	r3, r2
 800ac8e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ac92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ac9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	895b      	ldrh	r3, [r3, #10]
 800acaa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800acae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	6959      	ldr	r1, [r3, #20]
 800acba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800acc4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800acc8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800accc:	6800      	ldr	r0, [r0, #0]
 800acce:	f001 fb39 	bl	800c344 <USB_WritePMA>
            ep->xfer_buff += len;
 800acd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	695a      	ldr	r2, [r3, #20]
 800acde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ace2:	441a      	add	r2, r3
 800ace4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ace8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800acf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	6a1a      	ldr	r2, [r3, #32]
 800acfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d90f      	bls.n	800ad2c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800ad0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	6a1a      	ldr	r2, [r3, #32]
 800ad18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad1c:	1ad2      	subs	r2, r2, r3
 800ad1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	621a      	str	r2, [r3, #32]
 800ad2a:	e00e      	b.n	800ad4a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800ad2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	6a1b      	ldr	r3, [r3, #32]
 800ad38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800ad3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2200      	movs	r2, #0
 800ad48:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	785b      	ldrb	r3, [r3, #1]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d177      	bne.n	800ae4a <USB_EPStartXfer+0x4c4>
 800ad5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	61bb      	str	r3, [r7, #24]
 800ad66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	461a      	mov	r2, r3
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	61bb      	str	r3, [r7, #24]
 800ad7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	011a      	lsls	r2, r3, #4
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	4413      	add	r3, r2
 800ad90:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ad94:	617b      	str	r3, [r7, #20]
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	881b      	ldrh	r3, [r3, #0]
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ada0:	b29a      	uxth	r2, r3
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	801a      	strh	r2, [r3, #0]
 800ada6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adaa:	2b3e      	cmp	r3, #62	@ 0x3e
 800adac:	d921      	bls.n	800adf2 <USB_EPStartXfer+0x46c>
 800adae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adb2:	095b      	lsrs	r3, r3, #5
 800adb4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800adb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adbc:	f003 031f 	and.w	r3, r3, #31
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d104      	bne.n	800adce <USB_EPStartXfer+0x448>
 800adc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800adc8:	3b01      	subs	r3, #1
 800adca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	881b      	ldrh	r3, [r3, #0]
 800add2:	b29a      	uxth	r2, r3
 800add4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800add8:	b29b      	uxth	r3, r3
 800adda:	029b      	lsls	r3, r3, #10
 800addc:	b29b      	uxth	r3, r3
 800adde:	4313      	orrs	r3, r2
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ade6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adea:	b29a      	uxth	r2, r3
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	801a      	strh	r2, [r3, #0]
 800adf0:	e056      	b.n	800aea0 <USB_EPStartXfer+0x51a>
 800adf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d10a      	bne.n	800ae10 <USB_EPStartXfer+0x48a>
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	881b      	ldrh	r3, [r3, #0]
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	801a      	strh	r2, [r3, #0]
 800ae0e:	e047      	b.n	800aea0 <USB_EPStartXfer+0x51a>
 800ae10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae14:	085b      	lsrs	r3, r3, #1
 800ae16:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ae1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae1e:	f003 0301 	and.w	r3, r3, #1
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d004      	beq.n	800ae30 <USB_EPStartXfer+0x4aa>
 800ae26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	881b      	ldrh	r3, [r3, #0]
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	029b      	lsls	r3, r3, #10
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	4313      	orrs	r3, r2
 800ae42:	b29a      	uxth	r2, r3
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	801a      	strh	r2, [r3, #0]
 800ae48:	e02a      	b.n	800aea0 <USB_EPStartXfer+0x51a>
 800ae4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	785b      	ldrb	r3, [r3, #1]
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d122      	bne.n	800aea0 <USB_EPStartXfer+0x51a>
 800ae5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	623b      	str	r3, [r7, #32]
 800ae66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	461a      	mov	r2, r3
 800ae78:	6a3b      	ldr	r3, [r7, #32]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	623b      	str	r3, [r7, #32]
 800ae7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	011a      	lsls	r2, r3, #4
 800ae8c:	6a3b      	ldr	r3, [r7, #32]
 800ae8e:	4413      	add	r3, r2
 800ae90:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ae94:	61fb      	str	r3, [r7, #28]
 800ae96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae9a:	b29a      	uxth	r2, r3
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800aea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	891b      	ldrh	r3, [r3, #8]
 800aeac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aeb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	6959      	ldr	r1, [r3, #20]
 800aebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800aec6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800aeca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800aece:	6800      	ldr	r0, [r0, #0]
 800aed0:	f001 fa38 	bl	800c344 <USB_WritePMA>
 800aed4:	e3ee      	b.n	800b6b4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	785b      	ldrb	r3, [r3, #1]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d177      	bne.n	800afd6 <USB_EPStartXfer+0x650>
 800aee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aef6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af00:	b29b      	uxth	r3, r3
 800af02:	461a      	mov	r2, r3
 800af04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af06:	4413      	add	r3, r2
 800af08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	011a      	lsls	r2, r3, #4
 800af18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af1a:	4413      	add	r3, r2
 800af1c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800af20:	647b      	str	r3, [r7, #68]	@ 0x44
 800af22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af24:	881b      	ldrh	r3, [r3, #0]
 800af26:	b29b      	uxth	r3, r3
 800af28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af2c:	b29a      	uxth	r2, r3
 800af2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af30:	801a      	strh	r2, [r3, #0]
 800af32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af36:	2b3e      	cmp	r3, #62	@ 0x3e
 800af38:	d921      	bls.n	800af7e <USB_EPStartXfer+0x5f8>
 800af3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af3e:	095b      	lsrs	r3, r3, #5
 800af40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800af44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af48:	f003 031f 	and.w	r3, r3, #31
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d104      	bne.n	800af5a <USB_EPStartXfer+0x5d4>
 800af50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800af54:	3b01      	subs	r3, #1
 800af56:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800af5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af5c:	881b      	ldrh	r3, [r3, #0]
 800af5e:	b29a      	uxth	r2, r3
 800af60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800af64:	b29b      	uxth	r3, r3
 800af66:	029b      	lsls	r3, r3, #10
 800af68:	b29b      	uxth	r3, r3
 800af6a:	4313      	orrs	r3, r2
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af76:	b29a      	uxth	r2, r3
 800af78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af7a:	801a      	strh	r2, [r3, #0]
 800af7c:	e056      	b.n	800b02c <USB_EPStartXfer+0x6a6>
 800af7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10a      	bne.n	800af9c <USB_EPStartXfer+0x616>
 800af86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af88:	881b      	ldrh	r3, [r3, #0]
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af94:	b29a      	uxth	r2, r3
 800af96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af98:	801a      	strh	r2, [r3, #0]
 800af9a:	e047      	b.n	800b02c <USB_EPStartXfer+0x6a6>
 800af9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afa0:	085b      	lsrs	r3, r3, #1
 800afa2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800afa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afaa:	f003 0301 	and.w	r3, r3, #1
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d004      	beq.n	800afbc <USB_EPStartXfer+0x636>
 800afb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800afb6:	3301      	adds	r3, #1
 800afb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800afbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afbe:	881b      	ldrh	r3, [r3, #0]
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	029b      	lsls	r3, r3, #10
 800afca:	b29b      	uxth	r3, r3
 800afcc:	4313      	orrs	r3, r2
 800afce:	b29a      	uxth	r2, r3
 800afd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afd2:	801a      	strh	r2, [r3, #0]
 800afd4:	e02a      	b.n	800b02c <USB_EPStartXfer+0x6a6>
 800afd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	785b      	ldrb	r3, [r3, #1]
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d122      	bne.n	800b02c <USB_EPStartXfer+0x6a6>
 800afe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	653b      	str	r3, [r7, #80]	@ 0x50
 800aff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aff6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b000:	b29b      	uxth	r3, r3
 800b002:	461a      	mov	r2, r3
 800b004:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b006:	4413      	add	r3, r2
 800b008:	653b      	str	r3, [r7, #80]	@ 0x50
 800b00a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b00e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	011a      	lsls	r2, r3, #4
 800b018:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b01a:	4413      	add	r3, r2
 800b01c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b020:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b026:	b29a      	uxth	r2, r3
 800b028:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b02a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b02c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	891b      	ldrh	r3, [r3, #8]
 800b038:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b03c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	6959      	ldr	r1, [r3, #20]
 800b048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b052:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b056:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b05a:	6800      	ldr	r0, [r0, #0]
 800b05c:	f001 f972 	bl	800c344 <USB_WritePMA>
            ep->xfer_buff += len;
 800b060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	695a      	ldr	r2, [r3, #20]
 800b06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b070:	441a      	add	r2, r3
 800b072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b07e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6a1a      	ldr	r2, [r3, #32]
 800b08a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b08e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	429a      	cmp	r2, r3
 800b098:	d90f      	bls.n	800b0ba <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800b09a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b09e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	6a1a      	ldr	r2, [r3, #32]
 800b0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0aa:	1ad2      	subs	r2, r2, r3
 800b0ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	621a      	str	r2, [r3, #32]
 800b0b8:	e00e      	b.n	800b0d8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800b0ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6a1b      	ldr	r3, [r3, #32]
 800b0c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b0ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b0d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	785b      	ldrb	r3, [r3, #1]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d177      	bne.n	800b1e4 <USB_EPStartXfer+0x85e>
 800b0f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b104:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b10e:	b29b      	uxth	r3, r3
 800b110:	461a      	mov	r2, r3
 800b112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b114:	4413      	add	r3, r2
 800b116:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b11c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	011a      	lsls	r2, r3, #4
 800b126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b128:	4413      	add	r3, r2
 800b12a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b12e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b132:	881b      	ldrh	r3, [r3, #0]
 800b134:	b29b      	uxth	r3, r3
 800b136:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b13a:	b29a      	uxth	r2, r3
 800b13c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b13e:	801a      	strh	r2, [r3, #0]
 800b140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b144:	2b3e      	cmp	r3, #62	@ 0x3e
 800b146:	d921      	bls.n	800b18c <USB_EPStartXfer+0x806>
 800b148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b14c:	095b      	lsrs	r3, r3, #5
 800b14e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b156:	f003 031f 	and.w	r3, r3, #31
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d104      	bne.n	800b168 <USB_EPStartXfer+0x7e2>
 800b15e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b162:	3b01      	subs	r3, #1
 800b164:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b16a:	881b      	ldrh	r3, [r3, #0]
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b172:	b29b      	uxth	r3, r3
 800b174:	029b      	lsls	r3, r3, #10
 800b176:	b29b      	uxth	r3, r3
 800b178:	4313      	orrs	r3, r2
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b184:	b29a      	uxth	r2, r3
 800b186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b188:	801a      	strh	r2, [r3, #0]
 800b18a:	e050      	b.n	800b22e <USB_EPStartXfer+0x8a8>
 800b18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10a      	bne.n	800b1aa <USB_EPStartXfer+0x824>
 800b194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b196:	881b      	ldrh	r3, [r3, #0]
 800b198:	b29b      	uxth	r3, r3
 800b19a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b19e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1a6:	801a      	strh	r2, [r3, #0]
 800b1a8:	e041      	b.n	800b22e <USB_EPStartXfer+0x8a8>
 800b1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1ae:	085b      	lsrs	r3, r3, #1
 800b1b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b1b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1b8:	f003 0301 	and.w	r3, r3, #1
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d004      	beq.n	800b1ca <USB_EPStartXfer+0x844>
 800b1c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b1ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1cc:	881b      	ldrh	r3, [r3, #0]
 800b1ce:	b29a      	uxth	r2, r3
 800b1d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	029b      	lsls	r3, r3, #10
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1e0:	801a      	strh	r2, [r3, #0]
 800b1e2:	e024      	b.n	800b22e <USB_EPStartXfer+0x8a8>
 800b1e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	785b      	ldrb	r3, [r3, #1]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d11c      	bne.n	800b22e <USB_EPStartXfer+0x8a8>
 800b1f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b202:	b29b      	uxth	r3, r3
 800b204:	461a      	mov	r2, r3
 800b206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b208:	4413      	add	r3, r2
 800b20a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b20c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	011a      	lsls	r2, r3, #4
 800b21a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b21c:	4413      	add	r3, r2
 800b21e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b222:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b228:	b29a      	uxth	r2, r3
 800b22a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b22c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b22e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	895b      	ldrh	r3, [r3, #10]
 800b23a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b23e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	6959      	ldr	r1, [r3, #20]
 800b24a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b24e:	b29b      	uxth	r3, r3
 800b250:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b254:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b258:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b25c:	6800      	ldr	r0, [r0, #0]
 800b25e:	f001 f871 	bl	800c344 <USB_WritePMA>
 800b262:	e227      	b.n	800b6b4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	6a1b      	ldr	r3, [r3, #32]
 800b270:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b278:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	4413      	add	r3, r2
 800b28e:	881b      	ldrh	r3, [r3, #0]
 800b290:	b29b      	uxth	r3, r3
 800b292:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b29a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b29e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	441a      	add	r2, r3
 800b2b8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b2bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b2d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b2dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2f0:	4413      	add	r3, r2
 800b2f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b2f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	011a      	lsls	r2, r3, #4
 800b302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b304:	4413      	add	r3, r2
 800b306:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b30a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b30c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b310:	b29a      	uxth	r2, r3
 800b312:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b314:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b31a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	891b      	ldrh	r3, [r3, #8]
 800b322:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b32a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	6959      	ldr	r1, [r3, #20]
 800b332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b336:	b29b      	uxth	r3, r3
 800b338:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b33c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b340:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b344:	6800      	ldr	r0, [r0, #0]
 800b346:	f000 fffd 	bl	800c344 <USB_WritePMA>
 800b34a:	e1b3      	b.n	800b6b4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b34c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	6a1a      	ldr	r2, [r3, #32]
 800b358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b35c:	1ad2      	subs	r2, r2, r3
 800b35e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b362:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b36a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b36e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	881b      	ldrh	r3, [r3, #0]
 800b386:	b29b      	uxth	r3, r3
 800b388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f000 80c6 	beq.w	800b51e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b396:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	673b      	str	r3, [r7, #112]	@ 0x70
 800b39e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	785b      	ldrb	r3, [r3, #1]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d177      	bne.n	800b49e <USB_EPStartXfer+0xb18>
 800b3ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b3ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b3ce:	4413      	add	r3, r2
 800b3d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b3d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	011a      	lsls	r2, r3, #4
 800b3e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b3e2:	4413      	add	r3, r2
 800b3e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b3e8:	667b      	str	r3, [r7, #100]	@ 0x64
 800b3ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b3ec:	881b      	ldrh	r3, [r3, #0]
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3f4:	b29a      	uxth	r2, r3
 800b3f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b3f8:	801a      	strh	r2, [r3, #0]
 800b3fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3fe:	2b3e      	cmp	r3, #62	@ 0x3e
 800b400:	d921      	bls.n	800b446 <USB_EPStartXfer+0xac0>
 800b402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b406:	095b      	lsrs	r3, r3, #5
 800b408:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b40c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b410:	f003 031f 	and.w	r3, r3, #31
 800b414:	2b00      	cmp	r3, #0
 800b416:	d104      	bne.n	800b422 <USB_EPStartXfer+0xa9c>
 800b418:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b41c:	3b01      	subs	r3, #1
 800b41e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b422:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b424:	881b      	ldrh	r3, [r3, #0]
 800b426:	b29a      	uxth	r2, r3
 800b428:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	029b      	lsls	r3, r3, #10
 800b430:	b29b      	uxth	r3, r3
 800b432:	4313      	orrs	r3, r2
 800b434:	b29b      	uxth	r3, r3
 800b436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b43a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b43e:	b29a      	uxth	r2, r3
 800b440:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b442:	801a      	strh	r2, [r3, #0]
 800b444:	e050      	b.n	800b4e8 <USB_EPStartXfer+0xb62>
 800b446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10a      	bne.n	800b464 <USB_EPStartXfer+0xade>
 800b44e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b450:	881b      	ldrh	r3, [r3, #0]
 800b452:	b29b      	uxth	r3, r3
 800b454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b45c:	b29a      	uxth	r2, r3
 800b45e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b460:	801a      	strh	r2, [r3, #0]
 800b462:	e041      	b.n	800b4e8 <USB_EPStartXfer+0xb62>
 800b464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b468:	085b      	lsrs	r3, r3, #1
 800b46a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b472:	f003 0301 	and.w	r3, r3, #1
 800b476:	2b00      	cmp	r3, #0
 800b478:	d004      	beq.n	800b484 <USB_EPStartXfer+0xafe>
 800b47a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b47e:	3301      	adds	r3, #1
 800b480:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b484:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b486:	881b      	ldrh	r3, [r3, #0]
 800b488:	b29a      	uxth	r2, r3
 800b48a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b48e:	b29b      	uxth	r3, r3
 800b490:	029b      	lsls	r3, r3, #10
 800b492:	b29b      	uxth	r3, r3
 800b494:	4313      	orrs	r3, r2
 800b496:	b29a      	uxth	r2, r3
 800b498:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b49a:	801a      	strh	r2, [r3, #0]
 800b49c:	e024      	b.n	800b4e8 <USB_EPStartXfer+0xb62>
 800b49e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	785b      	ldrb	r3, [r3, #1]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d11c      	bne.n	800b4e8 <USB_EPStartXfer+0xb62>
 800b4ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	461a      	mov	r2, r3
 800b4c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b4c2:	4413      	add	r3, r2
 800b4c4:	673b      	str	r3, [r7, #112]	@ 0x70
 800b4c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	011a      	lsls	r2, r3, #4
 800b4d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b4d6:	4413      	add	r3, r2
 800b4d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b4dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b4e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	895b      	ldrh	r3, [r3, #10]
 800b4f4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b4f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	6959      	ldr	r1, [r3, #20]
 800b504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b508:	b29b      	uxth	r3, r3
 800b50a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b50e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b512:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b516:	6800      	ldr	r0, [r0, #0]
 800b518:	f000 ff14 	bl	800c344 <USB_WritePMA>
 800b51c:	e0ca      	b.n	800b6b4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b51e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	785b      	ldrb	r3, [r3, #1]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d177      	bne.n	800b61e <USB_EPStartXfer+0xc98>
 800b52e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b532:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b53a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b53e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b548:	b29b      	uxth	r3, r3
 800b54a:	461a      	mov	r2, r3
 800b54c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b54e:	4413      	add	r3, r2
 800b550:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	011a      	lsls	r2, r3, #4
 800b560:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b562:	4413      	add	r3, r2
 800b564:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b568:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b56a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b56c:	881b      	ldrh	r3, [r3, #0]
 800b56e:	b29b      	uxth	r3, r3
 800b570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b574:	b29a      	uxth	r2, r3
 800b576:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b578:	801a      	strh	r2, [r3, #0]
 800b57a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b57e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b580:	d921      	bls.n	800b5c6 <USB_EPStartXfer+0xc40>
 800b582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b586:	095b      	lsrs	r3, r3, #5
 800b588:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b590:	f003 031f 	and.w	r3, r3, #31
 800b594:	2b00      	cmp	r3, #0
 800b596:	d104      	bne.n	800b5a2 <USB_EPStartXfer+0xc1c>
 800b598:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b59c:	3b01      	subs	r3, #1
 800b59e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b5a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5a4:	881b      	ldrh	r3, [r3, #0]
 800b5a6:	b29a      	uxth	r2, r3
 800b5a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	029b      	lsls	r3, r3, #10
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5be:	b29a      	uxth	r2, r3
 800b5c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5c2:	801a      	strh	r2, [r3, #0]
 800b5c4:	e05c      	b.n	800b680 <USB_EPStartXfer+0xcfa>
 800b5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d10a      	bne.n	800b5e4 <USB_EPStartXfer+0xc5e>
 800b5ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5d0:	881b      	ldrh	r3, [r3, #0]
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5dc:	b29a      	uxth	r2, r3
 800b5de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5e0:	801a      	strh	r2, [r3, #0]
 800b5e2:	e04d      	b.n	800b680 <USB_EPStartXfer+0xcfa>
 800b5e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5e8:	085b      	lsrs	r3, r3, #1
 800b5ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5f2:	f003 0301 	and.w	r3, r3, #1
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d004      	beq.n	800b604 <USB_EPStartXfer+0xc7e>
 800b5fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b5fe:	3301      	adds	r3, #1
 800b600:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b604:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b606:	881b      	ldrh	r3, [r3, #0]
 800b608:	b29a      	uxth	r2, r3
 800b60a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b60e:	b29b      	uxth	r3, r3
 800b610:	029b      	lsls	r3, r3, #10
 800b612:	b29b      	uxth	r3, r3
 800b614:	4313      	orrs	r3, r2
 800b616:	b29a      	uxth	r2, r3
 800b618:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b61a:	801a      	strh	r2, [r3, #0]
 800b61c:	e030      	b.n	800b680 <USB_EPStartXfer+0xcfa>
 800b61e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	785b      	ldrb	r3, [r3, #1]
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d128      	bne.n	800b680 <USB_EPStartXfer+0xcfa>
 800b62e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b632:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b63c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b640:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	461a      	mov	r2, r3
 800b64e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b652:	4413      	add	r3, r2
 800b654:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b65c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	011a      	lsls	r2, r3, #4
 800b666:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b66a:	4413      	add	r3, r2
 800b66c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b670:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b678:	b29a      	uxth	r2, r3
 800b67a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b67e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	891b      	ldrh	r3, [r3, #8]
 800b68c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	6959      	ldr	r1, [r3, #20]
 800b69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b6a6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b6aa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b6ae:	6800      	ldr	r0, [r0, #0]
 800b6b0:	f000 fe48 	bl	800c344 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b6b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4413      	add	r3, r2
 800b6ce:	881b      	ldrh	r3, [r3, #0]
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6da:	817b      	strh	r3, [r7, #10]
 800b6dc:	897b      	ldrh	r3, [r7, #10]
 800b6de:	f083 0310 	eor.w	r3, r3, #16
 800b6e2:	817b      	strh	r3, [r7, #10]
 800b6e4:	897b      	ldrh	r3, [r7, #10]
 800b6e6:	f083 0320 	eor.w	r3, r3, #32
 800b6ea:	817b      	strh	r3, [r7, #10]
 800b6ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	441a      	add	r2, r3
 800b706:	897b      	ldrh	r3, [r7, #10]
 800b708:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b70c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b710:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b718:	b29b      	uxth	r3, r3
 800b71a:	8013      	strh	r3, [r2, #0]
 800b71c:	f000 bcde 	b.w	800c0dc <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	7b1b      	ldrb	r3, [r3, #12]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	f040 80bb 	bne.w	800b8a8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	699a      	ldr	r2, [r3, #24]
 800b73e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d917      	bls.n	800b77e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b74e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b752:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800b75e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	699a      	ldr	r2, [r3, #24]
 800b76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b76e:	1ad2      	subs	r2, r2, r3
 800b770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	619a      	str	r2, [r3, #24]
 800b77c:	e00e      	b.n	800b79c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b77e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	699b      	ldr	r3, [r3, #24]
 800b78a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800b78e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2200      	movs	r2, #0
 800b79a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b79c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b7aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b7c0:	4413      	add	r3, r2
 800b7c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b7c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	011a      	lsls	r2, r3, #4
 800b7d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b7d8:	4413      	add	r3, r2
 800b7da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b7de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b7e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b7e6:	881b      	ldrh	r3, [r3, #0]
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b7f4:	801a      	strh	r2, [r3, #0]
 800b7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7fa:	2b3e      	cmp	r3, #62	@ 0x3e
 800b7fc:	d924      	bls.n	800b848 <USB_EPStartXfer+0xec2>
 800b7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b802:	095b      	lsrs	r3, r3, #5
 800b804:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b80c:	f003 031f 	and.w	r3, r3, #31
 800b810:	2b00      	cmp	r3, #0
 800b812:	d104      	bne.n	800b81e <USB_EPStartXfer+0xe98>
 800b814:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b818:	3b01      	subs	r3, #1
 800b81a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b81e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b822:	881b      	ldrh	r3, [r3, #0]
 800b824:	b29a      	uxth	r2, r3
 800b826:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	029b      	lsls	r3, r3, #10
 800b82e:	b29b      	uxth	r3, r3
 800b830:	4313      	orrs	r3, r2
 800b832:	b29b      	uxth	r3, r3
 800b834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b842:	801a      	strh	r2, [r3, #0]
 800b844:	f000 bc10 	b.w	800c068 <USB_EPStartXfer+0x16e2>
 800b848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10c      	bne.n	800b86a <USB_EPStartXfer+0xee4>
 800b850:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b854:	881b      	ldrh	r3, [r3, #0]
 800b856:	b29b      	uxth	r3, r3
 800b858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b85c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b860:	b29a      	uxth	r2, r3
 800b862:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b866:	801a      	strh	r2, [r3, #0]
 800b868:	e3fe      	b.n	800c068 <USB_EPStartXfer+0x16e2>
 800b86a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b86e:	085b      	lsrs	r3, r3, #1
 800b870:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b878:	f003 0301 	and.w	r3, r3, #1
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d004      	beq.n	800b88a <USB_EPStartXfer+0xf04>
 800b880:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b884:	3301      	adds	r3, #1
 800b886:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b88a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b88e:	881b      	ldrh	r3, [r3, #0]
 800b890:	b29a      	uxth	r2, r3
 800b892:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b896:	b29b      	uxth	r3, r3
 800b898:	029b      	lsls	r3, r3, #10
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	4313      	orrs	r3, r2
 800b89e:	b29a      	uxth	r2, r3
 800b8a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b8a4:	801a      	strh	r2, [r3, #0]
 800b8a6:	e3df      	b.n	800c068 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b8a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	78db      	ldrb	r3, [r3, #3]
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	f040 8218 	bne.w	800bcea <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b8ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	785b      	ldrb	r3, [r3, #1]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	f040 809d 	bne.w	800ba06 <USB_EPStartXfer+0x1080>
 800b8cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b8da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b8f0:	4413      	add	r3, r2
 800b8f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b8f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	011a      	lsls	r2, r3, #4
 800b904:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b908:	4413      	add	r3, r2
 800b90a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b90e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b912:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b916:	881b      	ldrh	r3, [r3, #0]
 800b918:	b29b      	uxth	r3, r3
 800b91a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b91e:	b29a      	uxth	r2, r3
 800b920:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b924:	801a      	strh	r2, [r3, #0]
 800b926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b92a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	2b3e      	cmp	r3, #62	@ 0x3e
 800b934:	d92b      	bls.n	800b98e <USB_EPStartXfer+0x1008>
 800b936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b93a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	691b      	ldr	r3, [r3, #16]
 800b942:	095b      	lsrs	r3, r3, #5
 800b944:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b94c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	f003 031f 	and.w	r3, r3, #31
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d104      	bne.n	800b966 <USB_EPStartXfer+0xfe0>
 800b95c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b960:	3b01      	subs	r3, #1
 800b962:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b966:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b96a:	881b      	ldrh	r3, [r3, #0]
 800b96c:	b29a      	uxth	r2, r3
 800b96e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b972:	b29b      	uxth	r3, r3
 800b974:	029b      	lsls	r3, r3, #10
 800b976:	b29b      	uxth	r3, r3
 800b978:	4313      	orrs	r3, r2
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b984:	b29a      	uxth	r2, r3
 800b986:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b98a:	801a      	strh	r2, [r3, #0]
 800b98c:	e070      	b.n	800ba70 <USB_EPStartXfer+0x10ea>
 800b98e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10c      	bne.n	800b9b8 <USB_EPStartXfer+0x1032>
 800b99e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9a2:	881b      	ldrh	r3, [r3, #0]
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9ae:	b29a      	uxth	r2, r3
 800b9b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9b4:	801a      	strh	r2, [r3, #0]
 800b9b6:	e05b      	b.n	800ba70 <USB_EPStartXfer+0x10ea>
 800b9b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	085b      	lsrs	r3, r3, #1
 800b9c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b9ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	691b      	ldr	r3, [r3, #16]
 800b9d6:	f003 0301 	and.w	r3, r3, #1
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d004      	beq.n	800b9e8 <USB_EPStartXfer+0x1062>
 800b9de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b9e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9ec:	881b      	ldrh	r3, [r3, #0]
 800b9ee:	b29a      	uxth	r2, r3
 800b9f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	029b      	lsls	r3, r3, #10
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba02:	801a      	strh	r2, [r3, #0]
 800ba04:	e034      	b.n	800ba70 <USB_EPStartXfer+0x10ea>
 800ba06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	785b      	ldrb	r3, [r3, #1]
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d12c      	bne.n	800ba70 <USB_EPStartXfer+0x10ea>
 800ba16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	461a      	mov	r2, r3
 800ba36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ba3a:	4413      	add	r3, r2
 800ba3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	011a      	lsls	r2, r3, #4
 800ba4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ba52:	4413      	add	r3, r2
 800ba54:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ba58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ba5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	691b      	ldr	r3, [r3, #16]
 800ba68:	b29a      	uxth	r2, r3
 800ba6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ba6e:	801a      	strh	r2, [r3, #0]
 800ba70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ba7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	785b      	ldrb	r3, [r3, #1]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f040 809d 	bne.w	800bbca <USB_EPStartXfer+0x1244>
 800ba90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ba9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800baac:	b29b      	uxth	r3, r3
 800baae:	461a      	mov	r2, r3
 800bab0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bab4:	4413      	add	r3, r2
 800bab6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800baba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800babe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	011a      	lsls	r2, r3, #4
 800bac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bacc:	4413      	add	r3, r2
 800bace:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bad2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bad6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bada:	881b      	ldrh	r3, [r3, #0]
 800badc:	b29b      	uxth	r3, r3
 800bade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bae8:	801a      	strh	r2, [r3, #0]
 800baea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	691b      	ldr	r3, [r3, #16]
 800baf6:	2b3e      	cmp	r3, #62	@ 0x3e
 800baf8:	d92b      	bls.n	800bb52 <USB_EPStartXfer+0x11cc>
 800bafa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bafe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	095b      	lsrs	r3, r3, #5
 800bb08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bb0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	691b      	ldr	r3, [r3, #16]
 800bb18:	f003 031f 	and.w	r3, r3, #31
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d104      	bne.n	800bb2a <USB_EPStartXfer+0x11a4>
 800bb20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb24:	3b01      	subs	r3, #1
 800bb26:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bb2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb2e:	881b      	ldrh	r3, [r3, #0]
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	029b      	lsls	r3, r3, #10
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb4e:	801a      	strh	r2, [r3, #0]
 800bb50:	e069      	b.n	800bc26 <USB_EPStartXfer+0x12a0>
 800bb52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d10c      	bne.n	800bb7c <USB_EPStartXfer+0x11f6>
 800bb62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb66:	881b      	ldrh	r3, [r3, #0]
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb78:	801a      	strh	r2, [r3, #0]
 800bb7a:	e054      	b.n	800bc26 <USB_EPStartXfer+0x12a0>
 800bb7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	691b      	ldr	r3, [r3, #16]
 800bb88:	085b      	lsrs	r3, r3, #1
 800bb8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bb8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	691b      	ldr	r3, [r3, #16]
 800bb9a:	f003 0301 	and.w	r3, r3, #1
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d004      	beq.n	800bbac <USB_EPStartXfer+0x1226>
 800bba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bba6:	3301      	adds	r3, #1
 800bba8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bbac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bbb0:	881b      	ldrh	r3, [r3, #0]
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	029b      	lsls	r3, r3, #10
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	b29a      	uxth	r2, r3
 800bbc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bbc6:	801a      	strh	r2, [r3, #0]
 800bbc8:	e02d      	b.n	800bc26 <USB_EPStartXfer+0x12a0>
 800bbca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	785b      	ldrb	r3, [r3, #1]
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	d125      	bne.n	800bc26 <USB_EPStartXfer+0x12a0>
 800bbda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	461a      	mov	r2, r3
 800bbec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bbf0:	4413      	add	r3, r2
 800bbf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bbf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	011a      	lsls	r2, r3, #4
 800bc04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc08:	4413      	add	r3, r2
 800bc0a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bc0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bc12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	b29a      	uxth	r2, r3
 800bc20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc24:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bc26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	69db      	ldr	r3, [r3, #28]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	f000 8218 	beq.w	800c068 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bc38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4413      	add	r3, r2
 800bc52:	881b      	ldrh	r3, [r3, #0]
 800bc54:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bc58:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bc5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d005      	beq.n	800bc70 <USB_EPStartXfer+0x12ea>
 800bc64:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bc68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10d      	bne.n	800bc8c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bc70:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bc74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	f040 81f5 	bne.w	800c068 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bc7e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bc82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	f040 81ee 	bne.w	800c068 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800bc8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	4413      	add	r3, r2
 800bca6:	881b      	ldrh	r3, [r3, #0]
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bcae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcb2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800bcb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	441a      	add	r2, r3
 800bcd0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bcd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bcd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bcdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bce0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	8013      	strh	r3, [r2, #0]
 800bce8:	e1be      	b.n	800c068 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bcea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	78db      	ldrb	r3, [r3, #3]
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	f040 81b4 	bne.w	800c064 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bcfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	699a      	ldr	r2, [r3, #24]
 800bd08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	691b      	ldr	r3, [r3, #16]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d917      	bls.n	800bd48 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800bd18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	691b      	ldr	r3, [r3, #16]
 800bd24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800bd28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	699a      	ldr	r2, [r3, #24]
 800bd34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd38:	1ad2      	subs	r2, r2, r3
 800bd3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	619a      	str	r2, [r3, #24]
 800bd46:	e00e      	b.n	800bd66 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800bd48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	699b      	ldr	r3, [r3, #24]
 800bd54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800bd58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	2200      	movs	r2, #0
 800bd64:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bd66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	785b      	ldrb	r3, [r3, #1]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	f040 8085 	bne.w	800be82 <USB_EPStartXfer+0x14fc>
 800bd78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bd86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	461a      	mov	r2, r3
 800bd98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bd9c:	4413      	add	r3, r2
 800bd9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bda2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bda6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	011a      	lsls	r2, r3, #4
 800bdb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bdb4:	4413      	add	r3, r2
 800bdb6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bdba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bdbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bdc2:	881b      	ldrh	r3, [r3, #0]
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bdca:	b29a      	uxth	r2, r3
 800bdcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bdd0:	801a      	strh	r2, [r3, #0]
 800bdd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdd6:	2b3e      	cmp	r3, #62	@ 0x3e
 800bdd8:	d923      	bls.n	800be22 <USB_EPStartXfer+0x149c>
 800bdda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdde:	095b      	lsrs	r3, r3, #5
 800bde0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bde4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bde8:	f003 031f 	and.w	r3, r3, #31
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d104      	bne.n	800bdfa <USB_EPStartXfer+0x1474>
 800bdf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bdfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bdfe:	881b      	ldrh	r3, [r3, #0]
 800be00:	b29a      	uxth	r2, r3
 800be02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be06:	b29b      	uxth	r3, r3
 800be08:	029b      	lsls	r3, r3, #10
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	4313      	orrs	r3, r2
 800be0e:	b29b      	uxth	r3, r3
 800be10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be18:	b29a      	uxth	r2, r3
 800be1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be1e:	801a      	strh	r2, [r3, #0]
 800be20:	e060      	b.n	800bee4 <USB_EPStartXfer+0x155e>
 800be22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be26:	2b00      	cmp	r3, #0
 800be28:	d10c      	bne.n	800be44 <USB_EPStartXfer+0x14be>
 800be2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be2e:	881b      	ldrh	r3, [r3, #0]
 800be30:	b29b      	uxth	r3, r3
 800be32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be3a:	b29a      	uxth	r2, r3
 800be3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be40:	801a      	strh	r2, [r3, #0]
 800be42:	e04f      	b.n	800bee4 <USB_EPStartXfer+0x155e>
 800be44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be48:	085b      	lsrs	r3, r3, #1
 800be4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800be4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be52:	f003 0301 	and.w	r3, r3, #1
 800be56:	2b00      	cmp	r3, #0
 800be58:	d004      	beq.n	800be64 <USB_EPStartXfer+0x14de>
 800be5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be5e:	3301      	adds	r3, #1
 800be60:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800be64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be68:	881b      	ldrh	r3, [r3, #0]
 800be6a:	b29a      	uxth	r2, r3
 800be6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be70:	b29b      	uxth	r3, r3
 800be72:	029b      	lsls	r3, r3, #10
 800be74:	b29b      	uxth	r3, r3
 800be76:	4313      	orrs	r3, r2
 800be78:	b29a      	uxth	r2, r3
 800be7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be7e:	801a      	strh	r2, [r3, #0]
 800be80:	e030      	b.n	800bee4 <USB_EPStartXfer+0x155e>
 800be82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	785b      	ldrb	r3, [r3, #1]
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d128      	bne.n	800bee4 <USB_EPStartXfer+0x155e>
 800be92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bea4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800beae:	b29b      	uxth	r3, r3
 800beb0:	461a      	mov	r2, r3
 800beb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800beb6:	4413      	add	r3, r2
 800beb8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	011a      	lsls	r2, r3, #4
 800beca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bece:	4413      	add	r3, r2
 800bed0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bed4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bedc:	b29a      	uxth	r2, r3
 800bede:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bee2:	801a      	strh	r2, [r3, #0]
 800bee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bee8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	785b      	ldrb	r3, [r3, #1]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	f040 8085 	bne.w	800c00e <USB_EPStartXfer+0x1688>
 800bf04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bf12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	461a      	mov	r2, r3
 800bf24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bf28:	4413      	add	r3, r2
 800bf2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bf2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	011a      	lsls	r2, r3, #4
 800bf3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bf40:	4413      	add	r3, r2
 800bf42:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bf46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bf4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bf4e:	881b      	ldrh	r3, [r3, #0]
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bf5c:	801a      	strh	r2, [r3, #0]
 800bf5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf62:	2b3e      	cmp	r3, #62	@ 0x3e
 800bf64:	d923      	bls.n	800bfae <USB_EPStartXfer+0x1628>
 800bf66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf6a:	095b      	lsrs	r3, r3, #5
 800bf6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bf70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf74:	f003 031f 	and.w	r3, r3, #31
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d104      	bne.n	800bf86 <USB_EPStartXfer+0x1600>
 800bf7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bf80:	3b01      	subs	r3, #1
 800bf82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bf86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bf8a:	881b      	ldrh	r3, [r3, #0]
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	029b      	lsls	r3, r3, #10
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bfaa:	801a      	strh	r2, [r3, #0]
 800bfac:	e05c      	b.n	800c068 <USB_EPStartXfer+0x16e2>
 800bfae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d10c      	bne.n	800bfd0 <USB_EPStartXfer+0x164a>
 800bfb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bfba:	881b      	ldrh	r3, [r3, #0]
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bfcc:	801a      	strh	r2, [r3, #0]
 800bfce:	e04b      	b.n	800c068 <USB_EPStartXfer+0x16e2>
 800bfd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfd4:	085b      	lsrs	r3, r3, #1
 800bfd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bfda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfde:	f003 0301 	and.w	r3, r3, #1
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d004      	beq.n	800bff0 <USB_EPStartXfer+0x166a>
 800bfe6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bfea:	3301      	adds	r3, #1
 800bfec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bff0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bff4:	881b      	ldrh	r3, [r3, #0]
 800bff6:	b29a      	uxth	r2, r3
 800bff8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	029b      	lsls	r3, r3, #10
 800c000:	b29b      	uxth	r3, r3
 800c002:	4313      	orrs	r3, r2
 800c004:	b29a      	uxth	r2, r3
 800c006:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c00a:	801a      	strh	r2, [r3, #0]
 800c00c:	e02c      	b.n	800c068 <USB_EPStartXfer+0x16e2>
 800c00e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c012:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	785b      	ldrb	r3, [r3, #1]
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d124      	bne.n	800c068 <USB_EPStartXfer+0x16e2>
 800c01e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c022:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	461a      	mov	r2, r3
 800c030:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c034:	4413      	add	r3, r2
 800c036:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c03a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c03e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	011a      	lsls	r2, r3, #4
 800c048:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c04c:	4413      	add	r3, r2
 800c04e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800c052:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c05a:	b29a      	uxth	r2, r3
 800c05c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c060:	801a      	strh	r2, [r3, #0]
 800c062:	e001      	b.n	800c068 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800c064:	2301      	movs	r3, #1
 800c066:	e03a      	b.n	800c0de <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c06c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	4413      	add	r3, r2
 800c082:	881b      	ldrh	r3, [r3, #0]
 800c084:	b29b      	uxth	r3, r3
 800c086:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c08a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c08e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c092:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c096:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c09a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c09e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c0a2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c0a6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c0aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	441a      	add	r2, r3
 800c0c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c0c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	785b      	ldrb	r3, [r3, #1]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d020      	beq.n	800c13c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	4413      	add	r3, r2
 800c104:	881b      	ldrh	r3, [r3, #0]
 800c106:	b29b      	uxth	r3, r3
 800c108:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c10c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c110:	81bb      	strh	r3, [r7, #12]
 800c112:	89bb      	ldrh	r3, [r7, #12]
 800c114:	f083 0310 	eor.w	r3, r3, #16
 800c118:	81bb      	strh	r3, [r7, #12]
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	441a      	add	r2, r3
 800c124:	89bb      	ldrh	r3, [r7, #12]
 800c126:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c12a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c12e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c136:	b29b      	uxth	r3, r3
 800c138:	8013      	strh	r3, [r2, #0]
 800c13a:	e01f      	b.n	800c17c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	4413      	add	r3, r2
 800c146:	881b      	ldrh	r3, [r3, #0]
 800c148:	b29b      	uxth	r3, r3
 800c14a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c14e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c152:	81fb      	strh	r3, [r7, #14]
 800c154:	89fb      	ldrh	r3, [r7, #14]
 800c156:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c15a:	81fb      	strh	r3, [r7, #14]
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	441a      	add	r2, r3
 800c166:	89fb      	ldrh	r3, [r7, #14]
 800c168:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c16c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c170:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c178:	b29b      	uxth	r3, r3
 800c17a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c17c:	2300      	movs	r3, #0
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3714      	adds	r7, #20
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr

0800c18a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c18a:	b480      	push	{r7}
 800c18c:	b087      	sub	sp, #28
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
 800c192:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	7b1b      	ldrb	r3, [r3, #12]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f040 809d 	bne.w	800c2d8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	785b      	ldrb	r3, [r3, #1]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d04c      	beq.n	800c240 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	4413      	add	r3, r2
 800c1b0:	881b      	ldrh	r3, [r3, #0]
 800c1b2:	823b      	strh	r3, [r7, #16]
 800c1b4:	8a3b      	ldrh	r3, [r7, #16]
 800c1b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d01b      	beq.n	800c1f6 <USB_EPClearStall+0x6c>
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	4413      	add	r3, r2
 800c1c8:	881b      	ldrh	r3, [r3, #0]
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1d4:	81fb      	strh	r3, [r7, #14]
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	441a      	add	r2, r3
 800c1e0:	89fb      	ldrh	r3, [r7, #14]
 800c1e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	78db      	ldrb	r3, [r3, #3]
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d06c      	beq.n	800c2d8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	4413      	add	r3, r2
 800c208:	881b      	ldrh	r3, [r3, #0]
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c210:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c214:	81bb      	strh	r3, [r7, #12]
 800c216:	89bb      	ldrh	r3, [r7, #12]
 800c218:	f083 0320 	eor.w	r3, r3, #32
 800c21c:	81bb      	strh	r3, [r7, #12]
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	441a      	add	r2, r3
 800c228:	89bb      	ldrh	r3, [r7, #12]
 800c22a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c22e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	8013      	strh	r3, [r2, #0]
 800c23e:	e04b      	b.n	800c2d8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4413      	add	r3, r2
 800c24a:	881b      	ldrh	r3, [r3, #0]
 800c24c:	82fb      	strh	r3, [r7, #22]
 800c24e:	8afb      	ldrh	r3, [r7, #22]
 800c250:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c254:	2b00      	cmp	r3, #0
 800c256:	d01b      	beq.n	800c290 <USB_EPClearStall+0x106>
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	4413      	add	r3, r2
 800c262:	881b      	ldrh	r3, [r3, #0]
 800c264:	b29b      	uxth	r3, r3
 800c266:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c26a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c26e:	82bb      	strh	r3, [r7, #20]
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	441a      	add	r2, r3
 800c27a:	8abb      	ldrh	r3, [r7, #20]
 800c27c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c280:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c284:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	4413      	add	r3, r2
 800c29a:	881b      	ldrh	r3, [r3, #0]
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c2a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2a6:	827b      	strh	r3, [r7, #18]
 800c2a8:	8a7b      	ldrh	r3, [r7, #18]
 800c2aa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c2ae:	827b      	strh	r3, [r7, #18]
 800c2b0:	8a7b      	ldrh	r3, [r7, #18]
 800c2b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c2b6:	827b      	strh	r3, [r7, #18]
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	441a      	add	r2, r3
 800c2c2:	8a7b      	ldrh	r3, [r7, #18]
 800c2c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	371c      	adds	r7, #28
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr

0800c2e6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c2e6:	b480      	push	{r7}
 800c2e8:	b083      	sub	sp, #12
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c2f2:	78fb      	ldrb	r3, [r7, #3]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d103      	bne.n	800c300 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2280      	movs	r2, #128	@ 0x80
 800c2fc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	370c      	adds	r7, #12
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr

0800c30e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c30e:	b480      	push	{r7}
 800c310:	b083      	sub	sp, #12
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c316:	2300      	movs	r3, #0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c324:	b480      	push	{r7}
 800c326:	b085      	sub	sp, #20
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c332:	b29b      	uxth	r3, r3
 800c334:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c336:	68fb      	ldr	r3, [r7, #12]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3714      	adds	r7, #20
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c344:	b480      	push	{r7}
 800c346:	b08b      	sub	sp, #44	@ 0x2c
 800c348:	af00      	add	r7, sp, #0
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	4611      	mov	r1, r2
 800c350:	461a      	mov	r2, r3
 800c352:	460b      	mov	r3, r1
 800c354:	80fb      	strh	r3, [r7, #6]
 800c356:	4613      	mov	r3, r2
 800c358:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c35a:	88bb      	ldrh	r3, [r7, #4]
 800c35c:	3301      	adds	r3, #1
 800c35e:	085b      	lsrs	r3, r3, #1
 800c360:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c36a:	88fb      	ldrh	r3, [r7, #6]
 800c36c:	005a      	lsls	r2, r3, #1
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	4413      	add	r3, r2
 800c372:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c376:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c37c:	e01e      	b.n	800c3bc <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800c37e:	69fb      	ldr	r3, [r7, #28]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	3301      	adds	r3, #1
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	021b      	lsls	r3, r3, #8
 800c38c:	b21a      	sxth	r2, r3
 800c38e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c392:	4313      	orrs	r3, r2
 800c394:	b21b      	sxth	r3, r3
 800c396:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c398:	6a3b      	ldr	r3, [r7, #32]
 800c39a:	8a7a      	ldrh	r2, [r7, #18]
 800c39c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c39e:	6a3b      	ldr	r3, [r7, #32]
 800c3a0:	3302      	adds	r3, #2
 800c3a2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c3a4:	6a3b      	ldr	r3, [r7, #32]
 800c3a6:	3302      	adds	r3, #2
 800c3a8:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800c3aa:	69fb      	ldr	r3, [r7, #28]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b8:	3b01      	subs	r3, #1
 800c3ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d1dd      	bne.n	800c37e <USB_WritePMA+0x3a>
  }
}
 800c3c2:	bf00      	nop
 800c3c4:	bf00      	nop
 800c3c6:	372c      	adds	r7, #44	@ 0x2c
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b08b      	sub	sp, #44	@ 0x2c
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	60b9      	str	r1, [r7, #8]
 800c3da:	4611      	mov	r1, r2
 800c3dc:	461a      	mov	r2, r3
 800c3de:	460b      	mov	r3, r1
 800c3e0:	80fb      	strh	r3, [r7, #6]
 800c3e2:	4613      	mov	r3, r2
 800c3e4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c3e6:	88bb      	ldrh	r3, [r7, #4]
 800c3e8:	085b      	lsrs	r3, r3, #1
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c3f6:	88fb      	ldrh	r3, [r7, #6]
 800c3f8:	005a      	lsls	r2, r3, #1
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	4413      	add	r3, r2
 800c3fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c402:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	627b      	str	r3, [r7, #36]	@ 0x24
 800c408:	e01b      	b.n	800c442 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c40a:	6a3b      	ldr	r3, [r7, #32]
 800c40c:	881b      	ldrh	r3, [r3, #0]
 800c40e:	b29b      	uxth	r3, r3
 800c410:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c412:	6a3b      	ldr	r3, [r7, #32]
 800c414:	3302      	adds	r3, #2
 800c416:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	b2da      	uxtb	r2, r3
 800c41c:	69fb      	ldr	r3, [r7, #28]
 800c41e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	3301      	adds	r3, #1
 800c424:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	0a1b      	lsrs	r3, r3, #8
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c430:	69fb      	ldr	r3, [r7, #28]
 800c432:	3301      	adds	r3, #1
 800c434:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c436:	6a3b      	ldr	r3, [r7, #32]
 800c438:	3302      	adds	r3, #2
 800c43a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800c43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c43e:	3b01      	subs	r3, #1
 800c440:	627b      	str	r3, [r7, #36]	@ 0x24
 800c442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c444:	2b00      	cmp	r3, #0
 800c446:	d1e0      	bne.n	800c40a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c448:	88bb      	ldrh	r3, [r7, #4]
 800c44a:	f003 0301 	and.w	r3, r3, #1
 800c44e:	b29b      	uxth	r3, r3
 800c450:	2b00      	cmp	r3, #0
 800c452:	d007      	beq.n	800c464 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800c454:	6a3b      	ldr	r3, [r7, #32]
 800c456:	881b      	ldrh	r3, [r3, #0]
 800c458:	b29b      	uxth	r3, r3
 800c45a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	b2da      	uxtb	r2, r3
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	701a      	strb	r2, [r3, #0]
  }
}
 800c464:	bf00      	nop
 800c466:	372c      	adds	r7, #44	@ 0x2c
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	460b      	mov	r3, r1
 800c47a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c47c:	2300      	movs	r3, #0
 800c47e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	7c1b      	ldrb	r3, [r3, #16]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d115      	bne.n	800c4b4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c488:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c48c:	2202      	movs	r2, #2
 800c48e:	2181      	movs	r1, #129	@ 0x81
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f001 fe66 	bl	800e162 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2201      	movs	r2, #1
 800c49a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c49c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c4a0:	2202      	movs	r2, #2
 800c4a2:	2101      	movs	r1, #1
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f001 fe5c 	bl	800e162 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800c4b2:	e012      	b.n	800c4da <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c4b4:	2340      	movs	r3, #64	@ 0x40
 800c4b6:	2202      	movs	r2, #2
 800c4b8:	2181      	movs	r1, #129	@ 0x81
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f001 fe51 	bl	800e162 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c4c6:	2340      	movs	r3, #64	@ 0x40
 800c4c8:	2202      	movs	r2, #2
 800c4ca:	2101      	movs	r1, #1
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f001 fe48 	bl	800e162 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c4da:	2308      	movs	r3, #8
 800c4dc:	2203      	movs	r2, #3
 800c4de:	2182      	movs	r1, #130	@ 0x82
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f001 fe3e 	bl	800e162 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c4ec:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c4f0:	f001 ff60 	bl	800e3b4 <USBD_static_malloc>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c502:	2b00      	cmp	r3, #0
 800c504:	d102      	bne.n	800c50c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800c506:	2301      	movs	r3, #1
 800c508:	73fb      	strb	r3, [r7, #15]
 800c50a:	e026      	b.n	800c55a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c512:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	2200      	movs	r2, #0
 800c522:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	2200      	movs	r2, #0
 800c52a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	7c1b      	ldrb	r3, [r3, #16]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d109      	bne.n	800c54a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c53c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c540:	2101      	movs	r1, #1
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f001 feff 	bl	800e346 <USBD_LL_PrepareReceive>
 800c548:	e007      	b.n	800c55a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c550:	2340      	movs	r3, #64	@ 0x40
 800c552:	2101      	movs	r1, #1
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f001 fef6 	bl	800e346 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800c55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3710      	adds	r7, #16
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	460b      	mov	r3, r1
 800c56e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c570:	2300      	movs	r3, #0
 800c572:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c574:	2181      	movs	r1, #129	@ 0x81
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f001 fe19 	bl	800e1ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c582:	2101      	movs	r1, #1
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f001 fe12 	bl	800e1ae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2200      	movs	r2, #0
 800c58e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c592:	2182      	movs	r1, #130	@ 0x82
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f001 fe0a 	bl	800e1ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2200      	movs	r2, #0
 800c59e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d00e      	beq.n	800c5c8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c5b0:	685b      	ldr	r3, [r3, #4]
 800c5b2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f001 ff08 	bl	800e3d0 <USBD_static_free>
    pdev->pClassData = NULL;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800c5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b086      	sub	sp, #24
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5e2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d039      	beq.n	800c670 <USBD_CDC_Setup+0x9e>
 800c5fc:	2b20      	cmp	r3, #32
 800c5fe:	d17f      	bne.n	800c700 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	88db      	ldrh	r3, [r3, #6]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d029      	beq.n	800c65c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	b25b      	sxtb	r3, r3
 800c60e:	2b00      	cmp	r3, #0
 800c610:	da11      	bge.n	800c636 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	683a      	ldr	r2, [r7, #0]
 800c61c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800c61e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c620:	683a      	ldr	r2, [r7, #0]
 800c622:	88d2      	ldrh	r2, [r2, #6]
 800c624:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c626:	6939      	ldr	r1, [r7, #16]
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	88db      	ldrh	r3, [r3, #6]
 800c62c:	461a      	mov	r2, r3
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f001 f9e0 	bl	800d9f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800c634:	e06b      	b.n	800c70e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	785a      	ldrb	r2, [r3, #1]
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	88db      	ldrh	r3, [r3, #6]
 800c644:	b2da      	uxtb	r2, r3
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c64c:	6939      	ldr	r1, [r7, #16]
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	88db      	ldrh	r3, [r3, #6]
 800c652:	461a      	mov	r2, r3
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f001 f9fb 	bl	800da50 <USBD_CtlPrepareRx>
      break;
 800c65a:	e058      	b.n	800c70e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c662:	689b      	ldr	r3, [r3, #8]
 800c664:	683a      	ldr	r2, [r7, #0]
 800c666:	7850      	ldrb	r0, [r2, #1]
 800c668:	2200      	movs	r2, #0
 800c66a:	6839      	ldr	r1, [r7, #0]
 800c66c:	4798      	blx	r3
      break;
 800c66e:	e04e      	b.n	800c70e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	785b      	ldrb	r3, [r3, #1]
 800c674:	2b0b      	cmp	r3, #11
 800c676:	d02e      	beq.n	800c6d6 <USBD_CDC_Setup+0x104>
 800c678:	2b0b      	cmp	r3, #11
 800c67a:	dc38      	bgt.n	800c6ee <USBD_CDC_Setup+0x11c>
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d002      	beq.n	800c686 <USBD_CDC_Setup+0xb4>
 800c680:	2b0a      	cmp	r3, #10
 800c682:	d014      	beq.n	800c6ae <USBD_CDC_Setup+0xdc>
 800c684:	e033      	b.n	800c6ee <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c68c:	2b03      	cmp	r3, #3
 800c68e:	d107      	bne.n	800c6a0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800c690:	f107 030c 	add.w	r3, r7, #12
 800c694:	2202      	movs	r2, #2
 800c696:	4619      	mov	r1, r3
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f001 f9ab 	bl	800d9f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c69e:	e02e      	b.n	800c6fe <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c6a0:	6839      	ldr	r1, [r7, #0]
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f001 f93b 	bl	800d91e <USBD_CtlError>
            ret = USBD_FAIL;
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	75fb      	strb	r3, [r7, #23]
          break;
 800c6ac:	e027      	b.n	800c6fe <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6b4:	2b03      	cmp	r3, #3
 800c6b6:	d107      	bne.n	800c6c8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800c6b8:	f107 030f 	add.w	r3, r7, #15
 800c6bc:	2201      	movs	r2, #1
 800c6be:	4619      	mov	r1, r3
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f001 f997 	bl	800d9f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c6c6:	e01a      	b.n	800c6fe <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c6c8:	6839      	ldr	r1, [r7, #0]
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f001 f927 	bl	800d91e <USBD_CtlError>
            ret = USBD_FAIL;
 800c6d0:	2302      	movs	r3, #2
 800c6d2:	75fb      	strb	r3, [r7, #23]
          break;
 800c6d4:	e013      	b.n	800c6fe <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6dc:	2b03      	cmp	r3, #3
 800c6de:	d00d      	beq.n	800c6fc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800c6e0:	6839      	ldr	r1, [r7, #0]
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f001 f91b 	bl	800d91e <USBD_CtlError>
            ret = USBD_FAIL;
 800c6e8:	2302      	movs	r3, #2
 800c6ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c6ec:	e006      	b.n	800c6fc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800c6ee:	6839      	ldr	r1, [r7, #0]
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f001 f914 	bl	800d91e <USBD_CtlError>
          ret = USBD_FAIL;
 800c6f6:	2302      	movs	r3, #2
 800c6f8:	75fb      	strb	r3, [r7, #23]
          break;
 800c6fa:	e000      	b.n	800c6fe <USBD_CDC_Setup+0x12c>
          break;
 800c6fc:	bf00      	nop
      }
      break;
 800c6fe:	e006      	b.n	800c70e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c700:	6839      	ldr	r1, [r7, #0]
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f001 f90b 	bl	800d91e <USBD_CtlError>
      ret = USBD_FAIL;
 800c708:	2302      	movs	r3, #2
 800c70a:	75fb      	strb	r3, [r7, #23]
      break;
 800c70c:	bf00      	nop
  }

  return ret;
 800c70e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3718      	adds	r7, #24
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	460b      	mov	r3, r1
 800c722:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c72a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c732:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d03a      	beq.n	800c7b4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c73e:	78fa      	ldrb	r2, [r7, #3]
 800c740:	6879      	ldr	r1, [r7, #4]
 800c742:	4613      	mov	r3, r2
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	4413      	add	r3, r2
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	440b      	add	r3, r1
 800c74c:	331c      	adds	r3, #28
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d029      	beq.n	800c7a8 <USBD_CDC_DataIn+0x90>
 800c754:	78fa      	ldrb	r2, [r7, #3]
 800c756:	6879      	ldr	r1, [r7, #4]
 800c758:	4613      	mov	r3, r2
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	4413      	add	r3, r2
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	440b      	add	r3, r1
 800c762:	331c      	adds	r3, #28
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	78f9      	ldrb	r1, [r7, #3]
 800c768:	68b8      	ldr	r0, [r7, #8]
 800c76a:	460b      	mov	r3, r1
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	440b      	add	r3, r1
 800c770:	00db      	lsls	r3, r3, #3
 800c772:	4403      	add	r3, r0
 800c774:	3338      	adds	r3, #56	@ 0x38
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	fbb2 f1f3 	udiv	r1, r2, r3
 800c77c:	fb01 f303 	mul.w	r3, r1, r3
 800c780:	1ad3      	subs	r3, r2, r3
 800c782:	2b00      	cmp	r3, #0
 800c784:	d110      	bne.n	800c7a8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c786:	78fa      	ldrb	r2, [r7, #3]
 800c788:	6879      	ldr	r1, [r7, #4]
 800c78a:	4613      	mov	r3, r2
 800c78c:	009b      	lsls	r3, r3, #2
 800c78e:	4413      	add	r3, r2
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	440b      	add	r3, r1
 800c794:	331c      	adds	r3, #28
 800c796:	2200      	movs	r2, #0
 800c798:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c79a:	78f9      	ldrb	r1, [r7, #3]
 800c79c:	2300      	movs	r3, #0
 800c79e:	2200      	movs	r2, #0
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f001 fdad 	bl	800e300 <USBD_LL_Transmit>
 800c7a6:	e003      	b.n	800c7b0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	e000      	b.n	800c7b6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c7b4:	2302      	movs	r3, #2
  }
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}

0800c7be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b084      	sub	sp, #16
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7d0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c7d2:	78fb      	ldrb	r3, [r7, #3]
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f001 fdd8 	bl	800e38c <USBD_LL_GetRxDataSize>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d00d      	beq.n	800c80a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	68fa      	ldr	r2, [r7, #12]
 800c7f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c802:	4611      	mov	r1, r2
 800c804:	4798      	blx	r3

    return USBD_OK;
 800c806:	2300      	movs	r3, #0
 800c808:	e000      	b.n	800c80c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c80a:	2302      	movs	r3, #2
  }
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3710      	adds	r7, #16
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c822:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d014      	beq.n	800c858 <USBD_CDC_EP0_RxReady+0x44>
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c834:	2bff      	cmp	r3, #255	@ 0xff
 800c836:	d00f      	beq.n	800c858 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800c846:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c84e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	22ff      	movs	r2, #255	@ 0xff
 800c854:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800c858:	2300      	movs	r3, #0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
	...

0800c864 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2243      	movs	r2, #67	@ 0x43
 800c870:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c872:	4b03      	ldr	r3, [pc, #12]	@ (800c880 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c874:	4618      	mov	r0, r3
 800c876:	370c      	adds	r7, #12
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr
 800c880:	200000a8 	.word	0x200000a8

0800c884 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c884:	b480      	push	{r7}
 800c886:	b083      	sub	sp, #12
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2243      	movs	r2, #67	@ 0x43
 800c890:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c892:	4b03      	ldr	r3, [pc, #12]	@ (800c8a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c894:	4618      	mov	r0, r3
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr
 800c8a0:	20000064 	.word	0x20000064

0800c8a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b083      	sub	sp, #12
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2243      	movs	r2, #67	@ 0x43
 800c8b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c8b2:	4b03      	ldr	r3, [pc, #12]	@ (800c8c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	370c      	adds	r7, #12
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr
 800c8c0:	200000ec 	.word	0x200000ec

0800c8c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	220a      	movs	r2, #10
 800c8d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c8d2:	4b03      	ldr	r3, [pc, #12]	@ (800c8e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr
 800c8e0:	20000020 	.word	0x20000020

0800c8e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c8ee:	2302      	movs	r3, #2
 800c8f0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d005      	beq.n	800c904 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	683a      	ldr	r2, [r7, #0]
 800c8fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800c900:	2300      	movs	r3, #0
 800c902:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c904:	7bfb      	ldrb	r3, [r7, #15]
}
 800c906:	4618      	mov	r0, r3
 800c908:	3714      	adds	r7, #20
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr

0800c912 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800c912:	b480      	push	{r7}
 800c914:	b087      	sub	sp, #28
 800c916:	af00      	add	r7, sp, #0
 800c918:	60f8      	str	r0, [r7, #12]
 800c91a:	60b9      	str	r1, [r7, #8]
 800c91c:	4613      	mov	r3, r2
 800c91e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c926:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	68ba      	ldr	r2, [r7, #8]
 800c92c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c930:	88fa      	ldrh	r2, [r7, #6]
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800c938:	2300      	movs	r3, #0
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	371c      	adds	r7, #28
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr

0800c946 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800c946:	b480      	push	{r7}
 800c948:	b085      	sub	sp, #20
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
 800c94e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c956:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	683a      	ldr	r2, [r7, #0]
 800c95c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800c960:	2300      	movs	r3, #0
}
 800c962:	4618      	mov	r0, r3
 800c964:	3714      	adds	r7, #20
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr

0800c96e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c96e:	b580      	push	{r7, lr}
 800c970:	b084      	sub	sp, #16
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c97c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c984:	2b00      	cmp	r3, #0
 800c986:	d017      	beq.n	800c9b8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	7c1b      	ldrb	r3, [r3, #16]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d109      	bne.n	800c9a4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c996:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c99a:	2101      	movs	r1, #1
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f001 fcd2 	bl	800e346 <USBD_LL_PrepareReceive>
 800c9a2:	e007      	b.n	800c9b4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c9aa:	2340      	movs	r3, #64	@ 0x40
 800c9ac:	2101      	movs	r1, #1
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f001 fcc9 	bl	800e346 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	e000      	b.n	800c9ba <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c9b8:	2302      	movs	r3, #2
  }
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b084      	sub	sp, #16
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	60f8      	str	r0, [r7, #12]
 800c9ca:	60b9      	str	r1, [r7, #8]
 800c9cc:	4613      	mov	r3, r2
 800c9ce:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d101      	bne.n	800c9da <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c9d6:	2302      	movs	r3, #2
 800c9d8:	e01a      	b.n	800ca10 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d003      	beq.n	800c9ec <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d003      	beq.n	800c9fa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	79fa      	ldrb	r2, [r7, #7]
 800ca06:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f001 fb35 	bl	800e078 <USBD_LL_Init>

  return USBD_OK;
 800ca0e:	2300      	movs	r3, #0
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3710      	adds	r7, #16
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b085      	sub	sp, #20
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800ca22:	2300      	movs	r3, #0
 800ca24:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d006      	beq.n	800ca3a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	683a      	ldr	r2, [r7, #0]
 800ca30:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800ca34:	2300      	movs	r3, #0
 800ca36:	73fb      	strb	r3, [r7, #15]
 800ca38:	e001      	b.n	800ca3e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ca3a:	2302      	movs	r3, #2
 800ca3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ca3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3714      	adds	r7, #20
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr

0800ca4c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f001 fb69 	bl	800e12c <USBD_LL_Start>

  return USBD_OK;
 800ca5a:	2300      	movs	r3, #0
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b083      	sub	sp, #12
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca6c:	2300      	movs	r3, #0
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	370c      	adds	r7, #12
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr

0800ca7a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b084      	sub	sp, #16
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
 800ca82:	460b      	mov	r3, r1
 800ca84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ca86:	2302      	movs	r3, #2
 800ca88:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d00c      	beq.n	800caae <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	78fa      	ldrb	r2, [r7, #3]
 800ca9e:	4611      	mov	r1, r2
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	4798      	blx	r3
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d101      	bne.n	800caae <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800caaa:	2300      	movs	r3, #0
 800caac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800caae:	7bfb      	ldrb	r3, [r7, #15]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3710      	adds	r7, #16
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	460b      	mov	r3, r1
 800cac2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	78fa      	ldrb	r2, [r7, #3]
 800cace:	4611      	mov	r1, r2
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	4798      	blx	r3

  return USBD_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3708      	adds	r7, #8
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cade:	b580      	push	{r7, lr}
 800cae0:	b082      	sub	sp, #8
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
 800cae6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800caee:	6839      	ldr	r1, [r7, #0]
 800caf0:	4618      	mov	r0, r3
 800caf2:	f000 feda 	bl	800d8aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2201      	movs	r2, #1
 800cafa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cb04:	461a      	mov	r2, r3
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800cb12:	f003 031f 	and.w	r3, r3, #31
 800cb16:	2b02      	cmp	r3, #2
 800cb18:	d016      	beq.n	800cb48 <USBD_LL_SetupStage+0x6a>
 800cb1a:	2b02      	cmp	r3, #2
 800cb1c:	d81c      	bhi.n	800cb58 <USBD_LL_SetupStage+0x7a>
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d002      	beq.n	800cb28 <USBD_LL_SetupStage+0x4a>
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d008      	beq.n	800cb38 <USBD_LL_SetupStage+0x5a>
 800cb26:	e017      	b.n	800cb58 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800cb2e:	4619      	mov	r1, r3
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 f9cd 	bl	800ced0 <USBD_StdDevReq>
      break;
 800cb36:	e01a      	b.n	800cb6e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800cb3e:	4619      	mov	r1, r3
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 fa2f 	bl	800cfa4 <USBD_StdItfReq>
      break;
 800cb46:	e012      	b.n	800cb6e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800cb4e:	4619      	mov	r1, r3
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 fa6f 	bl	800d034 <USBD_StdEPReq>
      break;
 800cb56:	e00a      	b.n	800cb6e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800cb5e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	4619      	mov	r1, r3
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f001 fb40 	bl	800e1ec <USBD_LL_StallEP>
      break;
 800cb6c:	bf00      	nop
  }

  return USBD_OK;
 800cb6e:	2300      	movs	r3, #0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3708      	adds	r7, #8
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b086      	sub	sp, #24
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	460b      	mov	r3, r1
 800cb82:	607a      	str	r2, [r7, #4]
 800cb84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800cb86:	7afb      	ldrb	r3, [r7, #11]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d14b      	bne.n	800cc24 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800cb92:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cb9a:	2b03      	cmp	r3, #3
 800cb9c:	d134      	bne.n	800cc08 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	68da      	ldr	r2, [r3, #12]
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	691b      	ldr	r3, [r3, #16]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d919      	bls.n	800cbde <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	68da      	ldr	r2, [r3, #12]
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	1ad2      	subs	r2, r2, r3
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	68da      	ldr	r2, [r3, #12]
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d203      	bcs.n	800cbcc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	e002      	b.n	800cbd2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	6879      	ldr	r1, [r7, #4]
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	f000 ff58 	bl	800da8c <USBD_CtlContinueRx>
 800cbdc:	e038      	b.n	800cc50 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbe4:	691b      	ldr	r3, [r3, #16]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d00a      	beq.n	800cc00 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cbf0:	2b03      	cmp	r3, #3
 800cbf2:	d105      	bne.n	800cc00 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbfa:	691b      	ldr	r3, [r3, #16]
 800cbfc:	68f8      	ldr	r0, [r7, #12]
 800cbfe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800cc00:	68f8      	ldr	r0, [r7, #12]
 800cc02:	f000 ff55 	bl	800dab0 <USBD_CtlSendStatus>
 800cc06:	e023      	b.n	800cc50 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cc0e:	2b05      	cmp	r3, #5
 800cc10:	d11e      	bne.n	800cc50 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2200      	movs	r2, #0
 800cc16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800cc1a:	2100      	movs	r1, #0
 800cc1c:	68f8      	ldr	r0, [r7, #12]
 800cc1e:	f001 fae5 	bl	800e1ec <USBD_LL_StallEP>
 800cc22:	e015      	b.n	800cc50 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc2a:	699b      	ldr	r3, [r3, #24]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d00d      	beq.n	800cc4c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800cc36:	2b03      	cmp	r3, #3
 800cc38:	d108      	bne.n	800cc4c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc40:	699b      	ldr	r3, [r3, #24]
 800cc42:	7afa      	ldrb	r2, [r7, #11]
 800cc44:	4611      	mov	r1, r2
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	4798      	blx	r3
 800cc4a:	e001      	b.n	800cc50 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cc4c:	2302      	movs	r3, #2
 800cc4e:	e000      	b.n	800cc52 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800cc50:	2300      	movs	r3, #0
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3718      	adds	r7, #24
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b086      	sub	sp, #24
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	60f8      	str	r0, [r7, #12]
 800cc62:	460b      	mov	r3, r1
 800cc64:	607a      	str	r2, [r7, #4]
 800cc66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800cc68:	7afb      	ldrb	r3, [r7, #11]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d17f      	bne.n	800cd6e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	3314      	adds	r3, #20
 800cc72:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cc7a:	2b02      	cmp	r3, #2
 800cc7c:	d15c      	bne.n	800cd38 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	68da      	ldr	r2, [r3, #12]
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	691b      	ldr	r3, [r3, #16]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d915      	bls.n	800ccb6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	68da      	ldr	r2, [r3, #12]
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	691b      	ldr	r3, [r3, #16]
 800cc92:	1ad2      	subs	r2, r2, r3
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	461a      	mov	r2, r3
 800cca0:	6879      	ldr	r1, [r7, #4]
 800cca2:	68f8      	ldr	r0, [r7, #12]
 800cca4:	f000 fec2 	bl	800da2c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cca8:	2300      	movs	r3, #0
 800ccaa:	2200      	movs	r2, #0
 800ccac:	2100      	movs	r1, #0
 800ccae:	68f8      	ldr	r0, [r7, #12]
 800ccb0:	f001 fb49 	bl	800e346 <USBD_LL_PrepareReceive>
 800ccb4:	e04e      	b.n	800cd54 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	697a      	ldr	r2, [r7, #20]
 800ccbc:	6912      	ldr	r2, [r2, #16]
 800ccbe:	fbb3 f1f2 	udiv	r1, r3, r2
 800ccc2:	fb01 f202 	mul.w	r2, r1, r2
 800ccc6:	1a9b      	subs	r3, r3, r2
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d11c      	bne.n	800cd06 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	689a      	ldr	r2, [r3, #8]
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d316      	bcc.n	800cd06 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	689a      	ldr	r2, [r3, #8]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d20f      	bcs.n	800cd06 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cce6:	2200      	movs	r2, #0
 800cce8:	2100      	movs	r1, #0
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	f000 fe9e 	bl	800da2c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	2100      	movs	r1, #0
 800ccfe:	68f8      	ldr	r0, [r7, #12]
 800cd00:	f001 fb21 	bl	800e346 <USBD_LL_PrepareReceive>
 800cd04:	e026      	b.n	800cd54 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d00a      	beq.n	800cd28 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800cd18:	2b03      	cmp	r3, #3
 800cd1a:	d105      	bne.n	800cd28 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	68f8      	ldr	r0, [r7, #12]
 800cd26:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800cd28:	2180      	movs	r1, #128	@ 0x80
 800cd2a:	68f8      	ldr	r0, [r7, #12]
 800cd2c:	f001 fa5e 	bl	800e1ec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f000 fed0 	bl	800dad6 <USBD_CtlReceiveStatus>
 800cd36:	e00d      	b.n	800cd54 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cd3e:	2b04      	cmp	r3, #4
 800cd40:	d004      	beq.n	800cd4c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d103      	bne.n	800cd54 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800cd4c:	2180      	movs	r1, #128	@ 0x80
 800cd4e:	68f8      	ldr	r0, [r7, #12]
 800cd50:	f001 fa4c 	bl	800e1ec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d11d      	bne.n	800cd9a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800cd5e:	68f8      	ldr	r0, [r7, #12]
 800cd60:	f7ff fe80 	bl	800ca64 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2200      	movs	r2, #0
 800cd68:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800cd6c:	e015      	b.n	800cd9a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd74:	695b      	ldr	r3, [r3, #20]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00d      	beq.n	800cd96 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800cd80:	2b03      	cmp	r3, #3
 800cd82:	d108      	bne.n	800cd96 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd8a:	695b      	ldr	r3, [r3, #20]
 800cd8c:	7afa      	ldrb	r2, [r7, #11]
 800cd8e:	4611      	mov	r1, r2
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	4798      	blx	r3
 800cd94:	e001      	b.n	800cd9a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cd96:	2302      	movs	r3, #2
 800cd98:	e000      	b.n	800cd9c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800cd9a:	2300      	movs	r3, #0
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3718      	adds	r7, #24
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cdac:	2340      	movs	r3, #64	@ 0x40
 800cdae:	2200      	movs	r2, #0
 800cdb0:	2100      	movs	r1, #0
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f001 f9d5 	bl	800e162 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2240      	movs	r2, #64	@ 0x40
 800cdc4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cdc8:	2340      	movs	r3, #64	@ 0x40
 800cdca:	2200      	movs	r2, #0
 800cdcc:	2180      	movs	r1, #128	@ 0x80
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f001 f9c7 	bl	800e162 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2240      	movs	r2, #64	@ 0x40
 800cdde:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2201      	movs	r2, #1
 800cde4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d009      	beq.n	800ce1c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	6852      	ldr	r2, [r2, #4]
 800ce14:	b2d2      	uxtb	r2, r2
 800ce16:	4611      	mov	r1, r2
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	4798      	blx	r3
  }

  return USBD_OK;
 800ce1c:	2300      	movs	r3, #0
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3708      	adds	r7, #8
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}

0800ce26 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ce26:	b480      	push	{r7}
 800ce28:	b083      	sub	sp, #12
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
 800ce2e:	460b      	mov	r3, r1
 800ce30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	78fa      	ldrb	r2, [r7, #3]
 800ce36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ce38:	2300      	movs	r3, #0
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	370c      	adds	r7, #12
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr

0800ce46 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ce46:	b480      	push	{r7}
 800ce48:	b083      	sub	sp, #12
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2204      	movs	r2, #4
 800ce5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	370c      	adds	r7, #12
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr

0800ce70 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b083      	sub	sp, #12
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce7e:	2b04      	cmp	r3, #4
 800ce80:	d105      	bne.n	800ce8e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ce8e:	2300      	movs	r3, #0
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	370c      	adds	r7, #12
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ceaa:	2b03      	cmp	r3, #3
 800ceac:	d10b      	bne.n	800cec6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ceb4:	69db      	ldr	r3, [r3, #28]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d005      	beq.n	800cec6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cec0:	69db      	ldr	r3, [r3, #28]
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cec6:	2300      	movs	r3, #0
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3708      	adds	r7, #8
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ceda:	2300      	movs	r3, #0
 800cedc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cee6:	2b40      	cmp	r3, #64	@ 0x40
 800cee8:	d005      	beq.n	800cef6 <USBD_StdDevReq+0x26>
 800ceea:	2b40      	cmp	r3, #64	@ 0x40
 800ceec:	d84f      	bhi.n	800cf8e <USBD_StdDevReq+0xbe>
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d009      	beq.n	800cf06 <USBD_StdDevReq+0x36>
 800cef2:	2b20      	cmp	r3, #32
 800cef4:	d14b      	bne.n	800cf8e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cefc:	689b      	ldr	r3, [r3, #8]
 800cefe:	6839      	ldr	r1, [r7, #0]
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	4798      	blx	r3
      break;
 800cf04:	e048      	b.n	800cf98 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	785b      	ldrb	r3, [r3, #1]
 800cf0a:	2b09      	cmp	r3, #9
 800cf0c:	d839      	bhi.n	800cf82 <USBD_StdDevReq+0xb2>
 800cf0e:	a201      	add	r2, pc, #4	@ (adr r2, 800cf14 <USBD_StdDevReq+0x44>)
 800cf10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf14:	0800cf65 	.word	0x0800cf65
 800cf18:	0800cf79 	.word	0x0800cf79
 800cf1c:	0800cf83 	.word	0x0800cf83
 800cf20:	0800cf6f 	.word	0x0800cf6f
 800cf24:	0800cf83 	.word	0x0800cf83
 800cf28:	0800cf47 	.word	0x0800cf47
 800cf2c:	0800cf3d 	.word	0x0800cf3d
 800cf30:	0800cf83 	.word	0x0800cf83
 800cf34:	0800cf5b 	.word	0x0800cf5b
 800cf38:	0800cf51 	.word	0x0800cf51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cf3c:	6839      	ldr	r1, [r7, #0]
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 f9dc 	bl	800d2fc <USBD_GetDescriptor>
          break;
 800cf44:	e022      	b.n	800cf8c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cf46:	6839      	ldr	r1, [r7, #0]
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 fb3f 	bl	800d5cc <USBD_SetAddress>
          break;
 800cf4e:	e01d      	b.n	800cf8c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800cf50:	6839      	ldr	r1, [r7, #0]
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 fb7e 	bl	800d654 <USBD_SetConfig>
          break;
 800cf58:	e018      	b.n	800cf8c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cf5a:	6839      	ldr	r1, [r7, #0]
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f000 fc07 	bl	800d770 <USBD_GetConfig>
          break;
 800cf62:	e013      	b.n	800cf8c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cf64:	6839      	ldr	r1, [r7, #0]
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 fc37 	bl	800d7da <USBD_GetStatus>
          break;
 800cf6c:	e00e      	b.n	800cf8c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cf6e:	6839      	ldr	r1, [r7, #0]
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 fc65 	bl	800d840 <USBD_SetFeature>
          break;
 800cf76:	e009      	b.n	800cf8c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cf78:	6839      	ldr	r1, [r7, #0]
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 fc74 	bl	800d868 <USBD_ClrFeature>
          break;
 800cf80:	e004      	b.n	800cf8c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800cf82:	6839      	ldr	r1, [r7, #0]
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 fcca 	bl	800d91e <USBD_CtlError>
          break;
 800cf8a:	bf00      	nop
      }
      break;
 800cf8c:	e004      	b.n	800cf98 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800cf8e:	6839      	ldr	r1, [r7, #0]
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 fcc4 	bl	800d91e <USBD_CtlError>
      break;
 800cf96:	bf00      	nop
  }

  return ret;
 800cf98:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}
 800cfa2:	bf00      	nop

0800cfa4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cfba:	2b40      	cmp	r3, #64	@ 0x40
 800cfbc:	d005      	beq.n	800cfca <USBD_StdItfReq+0x26>
 800cfbe:	2b40      	cmp	r3, #64	@ 0x40
 800cfc0:	d82e      	bhi.n	800d020 <USBD_StdItfReq+0x7c>
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d001      	beq.n	800cfca <USBD_StdItfReq+0x26>
 800cfc6:	2b20      	cmp	r3, #32
 800cfc8:	d12a      	bne.n	800d020 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfd0:	3b01      	subs	r3, #1
 800cfd2:	2b02      	cmp	r3, #2
 800cfd4:	d81d      	bhi.n	800d012 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	889b      	ldrh	r3, [r3, #4]
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d813      	bhi.n	800d008 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfe6:	689b      	ldr	r3, [r3, #8]
 800cfe8:	6839      	ldr	r1, [r7, #0]
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	4798      	blx	r3
 800cfee:	4603      	mov	r3, r0
 800cff0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	88db      	ldrh	r3, [r3, #6]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d110      	bne.n	800d01c <USBD_StdItfReq+0x78>
 800cffa:	7bfb      	ldrb	r3, [r7, #15]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d10d      	bne.n	800d01c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 fd55 	bl	800dab0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d006:	e009      	b.n	800d01c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800d008:	6839      	ldr	r1, [r7, #0]
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 fc87 	bl	800d91e <USBD_CtlError>
          break;
 800d010:	e004      	b.n	800d01c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800d012:	6839      	ldr	r1, [r7, #0]
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 fc82 	bl	800d91e <USBD_CtlError>
          break;
 800d01a:	e000      	b.n	800d01e <USBD_StdItfReq+0x7a>
          break;
 800d01c:	bf00      	nop
      }
      break;
 800d01e:	e004      	b.n	800d02a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800d020:	6839      	ldr	r1, [r7, #0]
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 fc7b 	bl	800d91e <USBD_CtlError>
      break;
 800d028:	bf00      	nop
  }

  return USBD_OK;
 800d02a:	2300      	movs	r3, #0
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3710      	adds	r7, #16
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d03e:	2300      	movs	r3, #0
 800d040:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	889b      	ldrh	r3, [r3, #4]
 800d046:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d050:	2b40      	cmp	r3, #64	@ 0x40
 800d052:	d007      	beq.n	800d064 <USBD_StdEPReq+0x30>
 800d054:	2b40      	cmp	r3, #64	@ 0x40
 800d056:	f200 8146 	bhi.w	800d2e6 <USBD_StdEPReq+0x2b2>
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d00a      	beq.n	800d074 <USBD_StdEPReq+0x40>
 800d05e:	2b20      	cmp	r3, #32
 800d060:	f040 8141 	bne.w	800d2e6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d06a:	689b      	ldr	r3, [r3, #8]
 800d06c:	6839      	ldr	r1, [r7, #0]
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	4798      	blx	r3
      break;
 800d072:	e13d      	b.n	800d2f0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d07c:	2b20      	cmp	r3, #32
 800d07e:	d10a      	bne.n	800d096 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	6839      	ldr	r1, [r7, #0]
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	4798      	blx	r3
 800d08e:	4603      	mov	r3, r0
 800d090:	73fb      	strb	r3, [r7, #15]

        return ret;
 800d092:	7bfb      	ldrb	r3, [r7, #15]
 800d094:	e12d      	b.n	800d2f2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	785b      	ldrb	r3, [r3, #1]
 800d09a:	2b03      	cmp	r3, #3
 800d09c:	d007      	beq.n	800d0ae <USBD_StdEPReq+0x7a>
 800d09e:	2b03      	cmp	r3, #3
 800d0a0:	f300 811b 	bgt.w	800d2da <USBD_StdEPReq+0x2a6>
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d072      	beq.n	800d18e <USBD_StdEPReq+0x15a>
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d03a      	beq.n	800d122 <USBD_StdEPReq+0xee>
 800d0ac:	e115      	b.n	800d2da <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0b4:	2b02      	cmp	r3, #2
 800d0b6:	d002      	beq.n	800d0be <USBD_StdEPReq+0x8a>
 800d0b8:	2b03      	cmp	r3, #3
 800d0ba:	d015      	beq.n	800d0e8 <USBD_StdEPReq+0xb4>
 800d0bc:	e02b      	b.n	800d116 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d0be:	7bbb      	ldrb	r3, [r7, #14]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d00c      	beq.n	800d0de <USBD_StdEPReq+0xaa>
 800d0c4:	7bbb      	ldrb	r3, [r7, #14]
 800d0c6:	2b80      	cmp	r3, #128	@ 0x80
 800d0c8:	d009      	beq.n	800d0de <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d0ca:	7bbb      	ldrb	r3, [r7, #14]
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f001 f88c 	bl	800e1ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d0d4:	2180      	movs	r1, #128	@ 0x80
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f001 f888 	bl	800e1ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d0dc:	e020      	b.n	800d120 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800d0de:	6839      	ldr	r1, [r7, #0]
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 fc1c 	bl	800d91e <USBD_CtlError>
              break;
 800d0e6:	e01b      	b.n	800d120 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	885b      	ldrh	r3, [r3, #2]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d10e      	bne.n	800d10e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800d0f0:	7bbb      	ldrb	r3, [r7, #14]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d00b      	beq.n	800d10e <USBD_StdEPReq+0xda>
 800d0f6:	7bbb      	ldrb	r3, [r7, #14]
 800d0f8:	2b80      	cmp	r3, #128	@ 0x80
 800d0fa:	d008      	beq.n	800d10e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	88db      	ldrh	r3, [r3, #6]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d104      	bne.n	800d10e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800d104:	7bbb      	ldrb	r3, [r7, #14]
 800d106:	4619      	mov	r1, r3
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f001 f86f 	bl	800e1ec <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 fcce 	bl	800dab0 <USBD_CtlSendStatus>

              break;
 800d114:	e004      	b.n	800d120 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800d116:	6839      	ldr	r1, [r7, #0]
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f000 fc00 	bl	800d91e <USBD_CtlError>
              break;
 800d11e:	bf00      	nop
          }
          break;
 800d120:	e0e0      	b.n	800d2e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d128:	2b02      	cmp	r3, #2
 800d12a:	d002      	beq.n	800d132 <USBD_StdEPReq+0xfe>
 800d12c:	2b03      	cmp	r3, #3
 800d12e:	d015      	beq.n	800d15c <USBD_StdEPReq+0x128>
 800d130:	e026      	b.n	800d180 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d132:	7bbb      	ldrb	r3, [r7, #14]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d00c      	beq.n	800d152 <USBD_StdEPReq+0x11e>
 800d138:	7bbb      	ldrb	r3, [r7, #14]
 800d13a:	2b80      	cmp	r3, #128	@ 0x80
 800d13c:	d009      	beq.n	800d152 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d13e:	7bbb      	ldrb	r3, [r7, #14]
 800d140:	4619      	mov	r1, r3
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f001 f852 	bl	800e1ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d148:	2180      	movs	r1, #128	@ 0x80
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f001 f84e 	bl	800e1ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d150:	e01c      	b.n	800d18c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800d152:	6839      	ldr	r1, [r7, #0]
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 fbe2 	bl	800d91e <USBD_CtlError>
              break;
 800d15a:	e017      	b.n	800d18c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	885b      	ldrh	r3, [r3, #2]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d112      	bne.n	800d18a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d164:	7bbb      	ldrb	r3, [r7, #14]
 800d166:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d004      	beq.n	800d178 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800d16e:	7bbb      	ldrb	r3, [r7, #14]
 800d170:	4619      	mov	r1, r3
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f001 f859 	bl	800e22a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 fc99 	bl	800dab0 <USBD_CtlSendStatus>
              }
              break;
 800d17e:	e004      	b.n	800d18a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800d180:	6839      	ldr	r1, [r7, #0]
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 fbcb 	bl	800d91e <USBD_CtlError>
              break;
 800d188:	e000      	b.n	800d18c <USBD_StdEPReq+0x158>
              break;
 800d18a:	bf00      	nop
          }
          break;
 800d18c:	e0aa      	b.n	800d2e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d194:	2b02      	cmp	r3, #2
 800d196:	d002      	beq.n	800d19e <USBD_StdEPReq+0x16a>
 800d198:	2b03      	cmp	r3, #3
 800d19a:	d032      	beq.n	800d202 <USBD_StdEPReq+0x1ce>
 800d19c:	e097      	b.n	800d2ce <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d19e:	7bbb      	ldrb	r3, [r7, #14]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d007      	beq.n	800d1b4 <USBD_StdEPReq+0x180>
 800d1a4:	7bbb      	ldrb	r3, [r7, #14]
 800d1a6:	2b80      	cmp	r3, #128	@ 0x80
 800d1a8:	d004      	beq.n	800d1b4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800d1aa:	6839      	ldr	r1, [r7, #0]
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f000 fbb6 	bl	800d91e <USBD_CtlError>
                break;
 800d1b2:	e091      	b.n	800d2d8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d1b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	da0b      	bge.n	800d1d4 <USBD_StdEPReq+0x1a0>
 800d1bc:	7bbb      	ldrb	r3, [r7, #14]
 800d1be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	4413      	add	r3, r2
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	3310      	adds	r3, #16
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	3304      	adds	r3, #4
 800d1d2:	e00b      	b.n	800d1ec <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d1d4:	7bbb      	ldrb	r3, [r7, #14]
 800d1d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d1da:	4613      	mov	r3, r2
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	4413      	add	r3, r2
 800d1e0:	009b      	lsls	r3, r3, #2
 800d1e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d1e6:	687a      	ldr	r2, [r7, #4]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	3304      	adds	r3, #4
 800d1ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	2202      	movs	r2, #2
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 fbfa 	bl	800d9f4 <USBD_CtlSendData>
              break;
 800d200:	e06a      	b.n	800d2d8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d202:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d206:	2b00      	cmp	r3, #0
 800d208:	da11      	bge.n	800d22e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d20a:	7bbb      	ldrb	r3, [r7, #14]
 800d20c:	f003 020f 	and.w	r2, r3, #15
 800d210:	6879      	ldr	r1, [r7, #4]
 800d212:	4613      	mov	r3, r2
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	4413      	add	r3, r2
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	440b      	add	r3, r1
 800d21c:	3318      	adds	r3, #24
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d117      	bne.n	800d254 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d224:	6839      	ldr	r1, [r7, #0]
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f000 fb79 	bl	800d91e <USBD_CtlError>
                  break;
 800d22c:	e054      	b.n	800d2d8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d22e:	7bbb      	ldrb	r3, [r7, #14]
 800d230:	f003 020f 	and.w	r2, r3, #15
 800d234:	6879      	ldr	r1, [r7, #4]
 800d236:	4613      	mov	r3, r2
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	4413      	add	r3, r2
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	440b      	add	r3, r1
 800d240:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d104      	bne.n	800d254 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d24a:	6839      	ldr	r1, [r7, #0]
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 fb66 	bl	800d91e <USBD_CtlError>
                  break;
 800d252:	e041      	b.n	800d2d8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d254:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	da0b      	bge.n	800d274 <USBD_StdEPReq+0x240>
 800d25c:	7bbb      	ldrb	r3, [r7, #14]
 800d25e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d262:	4613      	mov	r3, r2
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	4413      	add	r3, r2
 800d268:	009b      	lsls	r3, r3, #2
 800d26a:	3310      	adds	r3, #16
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	4413      	add	r3, r2
 800d270:	3304      	adds	r3, #4
 800d272:	e00b      	b.n	800d28c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d274:	7bbb      	ldrb	r3, [r7, #14]
 800d276:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d27a:	4613      	mov	r3, r2
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	4413      	add	r3, r2
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	4413      	add	r3, r2
 800d28a:	3304      	adds	r3, #4
 800d28c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d28e:	7bbb      	ldrb	r3, [r7, #14]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d002      	beq.n	800d29a <USBD_StdEPReq+0x266>
 800d294:	7bbb      	ldrb	r3, [r7, #14]
 800d296:	2b80      	cmp	r3, #128	@ 0x80
 800d298:	d103      	bne.n	800d2a2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	2200      	movs	r2, #0
 800d29e:	601a      	str	r2, [r3, #0]
 800d2a0:	e00e      	b.n	800d2c0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800d2a2:	7bbb      	ldrb	r3, [r7, #14]
 800d2a4:	4619      	mov	r1, r3
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 ffde 	bl	800e268 <USBD_LL_IsStallEP>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d003      	beq.n	800d2ba <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	601a      	str	r2, [r3, #0]
 800d2b8:	e002      	b.n	800d2c0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	2202      	movs	r2, #2
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 fb94 	bl	800d9f4 <USBD_CtlSendData>
              break;
 800d2cc:	e004      	b.n	800d2d8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800d2ce:	6839      	ldr	r1, [r7, #0]
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 fb24 	bl	800d91e <USBD_CtlError>
              break;
 800d2d6:	bf00      	nop
          }
          break;
 800d2d8:	e004      	b.n	800d2e4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800d2da:	6839      	ldr	r1, [r7, #0]
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 fb1e 	bl	800d91e <USBD_CtlError>
          break;
 800d2e2:	bf00      	nop
      }
      break;
 800d2e4:	e004      	b.n	800d2f0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800d2e6:	6839      	ldr	r1, [r7, #0]
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 fb18 	bl	800d91e <USBD_CtlError>
      break;
 800d2ee:	bf00      	nop
  }

  return ret;
 800d2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
	...

0800d2fc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d306:	2300      	movs	r3, #0
 800d308:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d30a:	2300      	movs	r3, #0
 800d30c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d30e:	2300      	movs	r3, #0
 800d310:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	885b      	ldrh	r3, [r3, #2]
 800d316:	0a1b      	lsrs	r3, r3, #8
 800d318:	b29b      	uxth	r3, r3
 800d31a:	3b01      	subs	r3, #1
 800d31c:	2b06      	cmp	r3, #6
 800d31e:	f200 8128 	bhi.w	800d572 <USBD_GetDescriptor+0x276>
 800d322:	a201      	add	r2, pc, #4	@ (adr r2, 800d328 <USBD_GetDescriptor+0x2c>)
 800d324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d328:	0800d345 	.word	0x0800d345
 800d32c:	0800d35d 	.word	0x0800d35d
 800d330:	0800d39d 	.word	0x0800d39d
 800d334:	0800d573 	.word	0x0800d573
 800d338:	0800d573 	.word	0x0800d573
 800d33c:	0800d513 	.word	0x0800d513
 800d340:	0800d53f 	.word	0x0800d53f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	687a      	ldr	r2, [r7, #4]
 800d34e:	7c12      	ldrb	r2, [r2, #16]
 800d350:	f107 0108 	add.w	r1, r7, #8
 800d354:	4610      	mov	r0, r2
 800d356:	4798      	blx	r3
 800d358:	60f8      	str	r0, [r7, #12]
      break;
 800d35a:	e112      	b.n	800d582 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	7c1b      	ldrb	r3, [r3, #16]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d10d      	bne.n	800d380 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d36a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d36c:	f107 0208 	add.w	r2, r7, #8
 800d370:	4610      	mov	r0, r2
 800d372:	4798      	blx	r3
 800d374:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	3301      	adds	r3, #1
 800d37a:	2202      	movs	r2, #2
 800d37c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d37e:	e100      	b.n	800d582 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d388:	f107 0208 	add.w	r2, r7, #8
 800d38c:	4610      	mov	r0, r2
 800d38e:	4798      	blx	r3
 800d390:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	3301      	adds	r3, #1
 800d396:	2202      	movs	r2, #2
 800d398:	701a      	strb	r2, [r3, #0]
      break;
 800d39a:	e0f2      	b.n	800d582 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	885b      	ldrh	r3, [r3, #2]
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	2b05      	cmp	r3, #5
 800d3a4:	f200 80ac 	bhi.w	800d500 <USBD_GetDescriptor+0x204>
 800d3a8:	a201      	add	r2, pc, #4	@ (adr r2, 800d3b0 <USBD_GetDescriptor+0xb4>)
 800d3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ae:	bf00      	nop
 800d3b0:	0800d3c9 	.word	0x0800d3c9
 800d3b4:	0800d3fd 	.word	0x0800d3fd
 800d3b8:	0800d431 	.word	0x0800d431
 800d3bc:	0800d465 	.word	0x0800d465
 800d3c0:	0800d499 	.word	0x0800d499
 800d3c4:	0800d4cd 	.word	0x0800d4cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d00b      	beq.n	800d3ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	7c12      	ldrb	r2, [r2, #16]
 800d3e0:	f107 0108 	add.w	r1, r7, #8
 800d3e4:	4610      	mov	r0, r2
 800d3e6:	4798      	blx	r3
 800d3e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3ea:	e091      	b.n	800d510 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d3ec:	6839      	ldr	r1, [r7, #0]
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f000 fa95 	bl	800d91e <USBD_CtlError>
            err++;
 800d3f4:	7afb      	ldrb	r3, [r7, #11]
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	72fb      	strb	r3, [r7, #11]
          break;
 800d3fa:	e089      	b.n	800d510 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d402:	689b      	ldr	r3, [r3, #8]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d00b      	beq.n	800d420 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d40e:	689b      	ldr	r3, [r3, #8]
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	7c12      	ldrb	r2, [r2, #16]
 800d414:	f107 0108 	add.w	r1, r7, #8
 800d418:	4610      	mov	r0, r2
 800d41a:	4798      	blx	r3
 800d41c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d41e:	e077      	b.n	800d510 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d420:	6839      	ldr	r1, [r7, #0]
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f000 fa7b 	bl	800d91e <USBD_CtlError>
            err++;
 800d428:	7afb      	ldrb	r3, [r7, #11]
 800d42a:	3301      	adds	r3, #1
 800d42c:	72fb      	strb	r3, [r7, #11]
          break;
 800d42e:	e06f      	b.n	800d510 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d436:	68db      	ldr	r3, [r3, #12]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d00b      	beq.n	800d454 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d442:	68db      	ldr	r3, [r3, #12]
 800d444:	687a      	ldr	r2, [r7, #4]
 800d446:	7c12      	ldrb	r2, [r2, #16]
 800d448:	f107 0108 	add.w	r1, r7, #8
 800d44c:	4610      	mov	r0, r2
 800d44e:	4798      	blx	r3
 800d450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d452:	e05d      	b.n	800d510 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d454:	6839      	ldr	r1, [r7, #0]
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f000 fa61 	bl	800d91e <USBD_CtlError>
            err++;
 800d45c:	7afb      	ldrb	r3, [r7, #11]
 800d45e:	3301      	adds	r3, #1
 800d460:	72fb      	strb	r3, [r7, #11]
          break;
 800d462:	e055      	b.n	800d510 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d00b      	beq.n	800d488 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d476:	691b      	ldr	r3, [r3, #16]
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	7c12      	ldrb	r2, [r2, #16]
 800d47c:	f107 0108 	add.w	r1, r7, #8
 800d480:	4610      	mov	r0, r2
 800d482:	4798      	blx	r3
 800d484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d486:	e043      	b.n	800d510 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d488:	6839      	ldr	r1, [r7, #0]
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 fa47 	bl	800d91e <USBD_CtlError>
            err++;
 800d490:	7afb      	ldrb	r3, [r7, #11]
 800d492:	3301      	adds	r3, #1
 800d494:	72fb      	strb	r3, [r7, #11]
          break;
 800d496:	e03b      	b.n	800d510 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d49e:	695b      	ldr	r3, [r3, #20]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d00b      	beq.n	800d4bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d4aa:	695b      	ldr	r3, [r3, #20]
 800d4ac:	687a      	ldr	r2, [r7, #4]
 800d4ae:	7c12      	ldrb	r2, [r2, #16]
 800d4b0:	f107 0108 	add.w	r1, r7, #8
 800d4b4:	4610      	mov	r0, r2
 800d4b6:	4798      	blx	r3
 800d4b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4ba:	e029      	b.n	800d510 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4bc:	6839      	ldr	r1, [r7, #0]
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f000 fa2d 	bl	800d91e <USBD_CtlError>
            err++;
 800d4c4:	7afb      	ldrb	r3, [r7, #11]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	72fb      	strb	r3, [r7, #11]
          break;
 800d4ca:	e021      	b.n	800d510 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d4d2:	699b      	ldr	r3, [r3, #24]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d00b      	beq.n	800d4f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d4de:	699b      	ldr	r3, [r3, #24]
 800d4e0:	687a      	ldr	r2, [r7, #4]
 800d4e2:	7c12      	ldrb	r2, [r2, #16]
 800d4e4:	f107 0108 	add.w	r1, r7, #8
 800d4e8:	4610      	mov	r0, r2
 800d4ea:	4798      	blx	r3
 800d4ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4ee:	e00f      	b.n	800d510 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4f0:	6839      	ldr	r1, [r7, #0]
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f000 fa13 	bl	800d91e <USBD_CtlError>
            err++;
 800d4f8:	7afb      	ldrb	r3, [r7, #11]
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	72fb      	strb	r3, [r7, #11]
          break;
 800d4fe:	e007      	b.n	800d510 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800d500:	6839      	ldr	r1, [r7, #0]
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f000 fa0b 	bl	800d91e <USBD_CtlError>
          err++;
 800d508:	7afb      	ldrb	r3, [r7, #11]
 800d50a:	3301      	adds	r3, #1
 800d50c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800d50e:	e038      	b.n	800d582 <USBD_GetDescriptor+0x286>
 800d510:	e037      	b.n	800d582 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	7c1b      	ldrb	r3, [r3, #16]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d109      	bne.n	800d52e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d522:	f107 0208 	add.w	r2, r7, #8
 800d526:	4610      	mov	r0, r2
 800d528:	4798      	blx	r3
 800d52a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d52c:	e029      	b.n	800d582 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d52e:	6839      	ldr	r1, [r7, #0]
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f000 f9f4 	bl	800d91e <USBD_CtlError>
        err++;
 800d536:	7afb      	ldrb	r3, [r7, #11]
 800d538:	3301      	adds	r3, #1
 800d53a:	72fb      	strb	r3, [r7, #11]
      break;
 800d53c:	e021      	b.n	800d582 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	7c1b      	ldrb	r3, [r3, #16]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d10d      	bne.n	800d562 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d54c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d54e:	f107 0208 	add.w	r2, r7, #8
 800d552:	4610      	mov	r0, r2
 800d554:	4798      	blx	r3
 800d556:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	3301      	adds	r3, #1
 800d55c:	2207      	movs	r2, #7
 800d55e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d560:	e00f      	b.n	800d582 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d562:	6839      	ldr	r1, [r7, #0]
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 f9da 	bl	800d91e <USBD_CtlError>
        err++;
 800d56a:	7afb      	ldrb	r3, [r7, #11]
 800d56c:	3301      	adds	r3, #1
 800d56e:	72fb      	strb	r3, [r7, #11]
      break;
 800d570:	e007      	b.n	800d582 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d572:	6839      	ldr	r1, [r7, #0]
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 f9d2 	bl	800d91e <USBD_CtlError>
      err++;
 800d57a:	7afb      	ldrb	r3, [r7, #11]
 800d57c:	3301      	adds	r3, #1
 800d57e:	72fb      	strb	r3, [r7, #11]
      break;
 800d580:	bf00      	nop
  }

  if (err != 0U)
 800d582:	7afb      	ldrb	r3, [r7, #11]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d11c      	bne.n	800d5c2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800d588:	893b      	ldrh	r3, [r7, #8]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d011      	beq.n	800d5b2 <USBD_GetDescriptor+0x2b6>
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	88db      	ldrh	r3, [r3, #6]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d00d      	beq.n	800d5b2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	88da      	ldrh	r2, [r3, #6]
 800d59a:	893b      	ldrh	r3, [r7, #8]
 800d59c:	4293      	cmp	r3, r2
 800d59e:	bf28      	it	cs
 800d5a0:	4613      	movcs	r3, r2
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d5a6:	893b      	ldrh	r3, [r7, #8]
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	68f9      	ldr	r1, [r7, #12]
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 fa21 	bl	800d9f4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	88db      	ldrh	r3, [r3, #6]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d104      	bne.n	800d5c4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f000 fa78 	bl	800dab0 <USBD_CtlSendStatus>
 800d5c0:	e000      	b.n	800d5c4 <USBD_GetDescriptor+0x2c8>
    return;
 800d5c2:	bf00      	nop
    }
  }
}
 800d5c4:	3710      	adds	r7, #16
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop

0800d5cc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	889b      	ldrh	r3, [r3, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d130      	bne.n	800d640 <USBD_SetAddress+0x74>
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	88db      	ldrh	r3, [r3, #6]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d12c      	bne.n	800d640 <USBD_SetAddress+0x74>
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	885b      	ldrh	r3, [r3, #2]
 800d5ea:	2b7f      	cmp	r3, #127	@ 0x7f
 800d5ec:	d828      	bhi.n	800d640 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	885b      	ldrh	r3, [r3, #2]
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d600:	2b03      	cmp	r3, #3
 800d602:	d104      	bne.n	800d60e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800d604:	6839      	ldr	r1, [r7, #0]
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 f989 	bl	800d91e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d60c:	e01d      	b.n	800d64a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	7bfa      	ldrb	r2, [r7, #15]
 800d612:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d616:	7bfb      	ldrb	r3, [r7, #15]
 800d618:	4619      	mov	r1, r3
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 fe51 	bl	800e2c2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f000 fa45 	bl	800dab0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d626:	7bfb      	ldrb	r3, [r7, #15]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d004      	beq.n	800d636 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2202      	movs	r2, #2
 800d630:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d634:	e009      	b.n	800d64a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2201      	movs	r2, #1
 800d63a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d63e:	e004      	b.n	800d64a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d640:	6839      	ldr	r1, [r7, #0]
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 f96b 	bl	800d91e <USBD_CtlError>
  }
}
 800d648:	bf00      	nop
 800d64a:	bf00      	nop
 800d64c:	3710      	adds	r7, #16
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
	...

0800d654 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	885b      	ldrh	r3, [r3, #2]
 800d662:	b2da      	uxtb	r2, r3
 800d664:	4b41      	ldr	r3, [pc, #260]	@ (800d76c <USBD_SetConfig+0x118>)
 800d666:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d668:	4b40      	ldr	r3, [pc, #256]	@ (800d76c <USBD_SetConfig+0x118>)
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d904      	bls.n	800d67a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d670:	6839      	ldr	r1, [r7, #0]
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 f953 	bl	800d91e <USBD_CtlError>
 800d678:	e075      	b.n	800d766 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d680:	2b02      	cmp	r3, #2
 800d682:	d002      	beq.n	800d68a <USBD_SetConfig+0x36>
 800d684:	2b03      	cmp	r3, #3
 800d686:	d023      	beq.n	800d6d0 <USBD_SetConfig+0x7c>
 800d688:	e062      	b.n	800d750 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800d68a:	4b38      	ldr	r3, [pc, #224]	@ (800d76c <USBD_SetConfig+0x118>)
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d01a      	beq.n	800d6c8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800d692:	4b36      	ldr	r3, [pc, #216]	@ (800d76c <USBD_SetConfig+0x118>)
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	461a      	mov	r2, r3
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2203      	movs	r2, #3
 800d6a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d6a4:	4b31      	ldr	r3, [pc, #196]	@ (800d76c <USBD_SetConfig+0x118>)
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f7ff f9e5 	bl	800ca7a <USBD_SetClassConfig>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b02      	cmp	r3, #2
 800d6b4:	d104      	bne.n	800d6c0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800d6b6:	6839      	ldr	r1, [r7, #0]
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f000 f930 	bl	800d91e <USBD_CtlError>
            return;
 800d6be:	e052      	b.n	800d766 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 f9f5 	bl	800dab0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d6c6:	e04e      	b.n	800d766 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f000 f9f1 	bl	800dab0 <USBD_CtlSendStatus>
        break;
 800d6ce:	e04a      	b.n	800d766 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800d6d0:	4b26      	ldr	r3, [pc, #152]	@ (800d76c <USBD_SetConfig+0x118>)
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d112      	bne.n	800d6fe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2202      	movs	r2, #2
 800d6dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800d6e0:	4b22      	ldr	r3, [pc, #136]	@ (800d76c <USBD_SetConfig+0x118>)
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800d6ea:	4b20      	ldr	r3, [pc, #128]	@ (800d76c <USBD_SetConfig+0x118>)
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f7ff f9e1 	bl	800cab8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 f9da 	bl	800dab0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d6fc:	e033      	b.n	800d766 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800d6fe:	4b1b      	ldr	r3, [pc, #108]	@ (800d76c <USBD_SetConfig+0x118>)
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	461a      	mov	r2, r3
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d01d      	beq.n	800d748 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	b2db      	uxtb	r3, r3
 800d712:	4619      	mov	r1, r3
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f7ff f9cf 	bl	800cab8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800d71a:	4b14      	ldr	r3, [pc, #80]	@ (800d76c <USBD_SetConfig+0x118>)
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	461a      	mov	r2, r3
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d724:	4b11      	ldr	r3, [pc, #68]	@ (800d76c <USBD_SetConfig+0x118>)
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	4619      	mov	r1, r3
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f7ff f9a5 	bl	800ca7a <USBD_SetClassConfig>
 800d730:	4603      	mov	r3, r0
 800d732:	2b02      	cmp	r3, #2
 800d734:	d104      	bne.n	800d740 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800d736:	6839      	ldr	r1, [r7, #0]
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 f8f0 	bl	800d91e <USBD_CtlError>
            return;
 800d73e:	e012      	b.n	800d766 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 f9b5 	bl	800dab0 <USBD_CtlSendStatus>
        break;
 800d746:	e00e      	b.n	800d766 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f000 f9b1 	bl	800dab0 <USBD_CtlSendStatus>
        break;
 800d74e:	e00a      	b.n	800d766 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800d750:	6839      	ldr	r1, [r7, #0]
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 f8e3 	bl	800d91e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800d758:	4b04      	ldr	r3, [pc, #16]	@ (800d76c <USBD_SetConfig+0x118>)
 800d75a:	781b      	ldrb	r3, [r3, #0]
 800d75c:	4619      	mov	r1, r3
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f7ff f9aa 	bl	800cab8 <USBD_ClrClassConfig>
        break;
 800d764:	bf00      	nop
    }
  }
}
 800d766:	3708      	adds	r7, #8
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	20000f40 	.word	0x20000f40

0800d770 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	88db      	ldrh	r3, [r3, #6]
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d004      	beq.n	800d78c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d782:	6839      	ldr	r1, [r7, #0]
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 f8ca 	bl	800d91e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d78a:	e022      	b.n	800d7d2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d792:	2b02      	cmp	r3, #2
 800d794:	dc02      	bgt.n	800d79c <USBD_GetConfig+0x2c>
 800d796:	2b00      	cmp	r3, #0
 800d798:	dc03      	bgt.n	800d7a2 <USBD_GetConfig+0x32>
 800d79a:	e015      	b.n	800d7c8 <USBD_GetConfig+0x58>
 800d79c:	2b03      	cmp	r3, #3
 800d79e:	d00b      	beq.n	800d7b8 <USBD_GetConfig+0x48>
 800d7a0:	e012      	b.n	800d7c8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	3308      	adds	r3, #8
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f000 f91f 	bl	800d9f4 <USBD_CtlSendData>
        break;
 800d7b6:	e00c      	b.n	800d7d2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	3304      	adds	r3, #4
 800d7bc:	2201      	movs	r2, #1
 800d7be:	4619      	mov	r1, r3
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 f917 	bl	800d9f4 <USBD_CtlSendData>
        break;
 800d7c6:	e004      	b.n	800d7d2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800d7c8:	6839      	ldr	r1, [r7, #0]
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 f8a7 	bl	800d91e <USBD_CtlError>
        break;
 800d7d0:	bf00      	nop
}
 800d7d2:	bf00      	nop
 800d7d4:	3708      	adds	r7, #8
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}

0800d7da <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7da:	b580      	push	{r7, lr}
 800d7dc:	b082      	sub	sp, #8
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
 800d7e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7ea:	3b01      	subs	r3, #1
 800d7ec:	2b02      	cmp	r3, #2
 800d7ee:	d81e      	bhi.n	800d82e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	88db      	ldrh	r3, [r3, #6]
 800d7f4:	2b02      	cmp	r3, #2
 800d7f6:	d004      	beq.n	800d802 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800d7f8:	6839      	ldr	r1, [r7, #0]
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f000 f88f 	bl	800d91e <USBD_CtlError>
        break;
 800d800:	e01a      	b.n	800d838 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2201      	movs	r2, #1
 800d806:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d005      	beq.n	800d81e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	f043 0202 	orr.w	r2, r3, #2
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	330c      	adds	r3, #12
 800d822:	2202      	movs	r2, #2
 800d824:	4619      	mov	r1, r3
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 f8e4 	bl	800d9f4 <USBD_CtlSendData>
      break;
 800d82c:	e004      	b.n	800d838 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800d82e:	6839      	ldr	r1, [r7, #0]
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 f874 	bl	800d91e <USBD_CtlError>
      break;
 800d836:	bf00      	nop
  }
}
 800d838:	bf00      	nop
 800d83a:	3708      	adds	r7, #8
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	885b      	ldrh	r3, [r3, #2]
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d106      	bne.n	800d860 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2201      	movs	r2, #1
 800d856:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 f928 	bl	800dab0 <USBD_CtlSendStatus>
  }
}
 800d860:	bf00      	nop
 800d862:	3708      	adds	r7, #8
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d878:	3b01      	subs	r3, #1
 800d87a:	2b02      	cmp	r3, #2
 800d87c:	d80b      	bhi.n	800d896 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	885b      	ldrh	r3, [r3, #2]
 800d882:	2b01      	cmp	r3, #1
 800d884:	d10c      	bne.n	800d8a0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2200      	movs	r2, #0
 800d88a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 f90e 	bl	800dab0 <USBD_CtlSendStatus>
      }
      break;
 800d894:	e004      	b.n	800d8a0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d896:	6839      	ldr	r1, [r7, #0]
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 f840 	bl	800d91e <USBD_CtlError>
      break;
 800d89e:	e000      	b.n	800d8a2 <USBD_ClrFeature+0x3a>
      break;
 800d8a0:	bf00      	nop
  }
}
 800d8a2:	bf00      	nop
 800d8a4:	3708      	adds	r7, #8
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d8aa:	b480      	push	{r7}
 800d8ac:	b083      	sub	sp, #12
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
 800d8b2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	781a      	ldrb	r2, [r3, #0]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	785a      	ldrb	r2, [r3, #1]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	3302      	adds	r3, #2
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	3303      	adds	r3, #3
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	021b      	lsls	r3, r3, #8
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	4413      	add	r3, r2
 800d8d8:	b29a      	uxth	r2, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	3304      	adds	r3, #4
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	3305      	adds	r3, #5
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	021b      	lsls	r3, r3, #8
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	4413      	add	r3, r2
 800d8f2:	b29a      	uxth	r2, r3
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	3306      	adds	r3, #6
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	461a      	mov	r2, r3
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	3307      	adds	r3, #7
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	021b      	lsls	r3, r3, #8
 800d908:	b29b      	uxth	r3, r3
 800d90a:	4413      	add	r3, r2
 800d90c:	b29a      	uxth	r2, r3
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	80da      	strh	r2, [r3, #6]

}
 800d912:	bf00      	nop
 800d914:	370c      	adds	r7, #12
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr

0800d91e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800d91e:	b580      	push	{r7, lr}
 800d920:	b082      	sub	sp, #8
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
 800d926:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d928:	2180      	movs	r1, #128	@ 0x80
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 fc5e 	bl	800e1ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d930:	2100      	movs	r1, #0
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 fc5a 	bl	800e1ec <USBD_LL_StallEP>
}
 800d938:	bf00      	nop
 800d93a:	3708      	adds	r7, #8
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b086      	sub	sp, #24
 800d944:	af00      	add	r7, sp, #0
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d94c:	2300      	movs	r3, #0
 800d94e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d032      	beq.n	800d9bc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d956:	68f8      	ldr	r0, [r7, #12]
 800d958:	f000 f834 	bl	800d9c4 <USBD_GetLen>
 800d95c:	4603      	mov	r3, r0
 800d95e:	3301      	adds	r3, #1
 800d960:	b29b      	uxth	r3, r3
 800d962:	005b      	lsls	r3, r3, #1
 800d964:	b29a      	uxth	r2, r3
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d96a:	7dfb      	ldrb	r3, [r7, #23]
 800d96c:	1c5a      	adds	r2, r3, #1
 800d96e:	75fa      	strb	r2, [r7, #23]
 800d970:	461a      	mov	r2, r3
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	4413      	add	r3, r2
 800d976:	687a      	ldr	r2, [r7, #4]
 800d978:	7812      	ldrb	r2, [r2, #0]
 800d97a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d97c:	7dfb      	ldrb	r3, [r7, #23]
 800d97e:	1c5a      	adds	r2, r3, #1
 800d980:	75fa      	strb	r2, [r7, #23]
 800d982:	461a      	mov	r2, r3
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	4413      	add	r3, r2
 800d988:	2203      	movs	r2, #3
 800d98a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d98c:	e012      	b.n	800d9b4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	1c5a      	adds	r2, r3, #1
 800d992:	60fa      	str	r2, [r7, #12]
 800d994:	7dfa      	ldrb	r2, [r7, #23]
 800d996:	1c51      	adds	r1, r2, #1
 800d998:	75f9      	strb	r1, [r7, #23]
 800d99a:	4611      	mov	r1, r2
 800d99c:	68ba      	ldr	r2, [r7, #8]
 800d99e:	440a      	add	r2, r1
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d9a4:	7dfb      	ldrb	r3, [r7, #23]
 800d9a6:	1c5a      	adds	r2, r3, #1
 800d9a8:	75fa      	strb	r2, [r7, #23]
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	4413      	add	r3, r2
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d1e8      	bne.n	800d98e <USBD_GetString+0x4e>
    }
  }
}
 800d9bc:	bf00      	nop
 800d9be:	3718      	adds	r7, #24
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b085      	sub	sp, #20
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800d9d0:	e005      	b.n	800d9de <USBD_GetLen+0x1a>
  {
    len++;
 800d9d2:	7bfb      	ldrb	r3, [r7, #15]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	3301      	adds	r3, #1
 800d9dc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d1f5      	bne.n	800d9d2 <USBD_GetLen+0xe>
  }

  return len;
 800d9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3714      	adds	r7, #20
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr

0800d9f4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	60f8      	str	r0, [r7, #12]
 800d9fc:	60b9      	str	r1, [r7, #8]
 800d9fe:	4613      	mov	r3, r2
 800da00:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2202      	movs	r2, #2
 800da06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800da0a:	88fa      	ldrh	r2, [r7, #6]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800da10:	88fa      	ldrh	r2, [r7, #6]
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da16:	88fb      	ldrh	r3, [r7, #6]
 800da18:	68ba      	ldr	r2, [r7, #8]
 800da1a:	2100      	movs	r1, #0
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f000 fc6f 	bl	800e300 <USBD_LL_Transmit>

  return USBD_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	4613      	mov	r3, r2
 800da38:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da3a:	88fb      	ldrh	r3, [r7, #6]
 800da3c:	68ba      	ldr	r2, [r7, #8]
 800da3e:	2100      	movs	r1, #0
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	f000 fc5d 	bl	800e300 <USBD_LL_Transmit>

  return USBD_OK;
 800da46:	2300      	movs	r3, #0
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3710      	adds	r7, #16
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	60b9      	str	r1, [r7, #8]
 800da5a:	4613      	mov	r3, r2
 800da5c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2203      	movs	r2, #3
 800da62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800da66:	88fa      	ldrh	r2, [r7, #6]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800da6e:	88fa      	ldrh	r2, [r7, #6]
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da76:	88fb      	ldrh	r3, [r7, #6]
 800da78:	68ba      	ldr	r2, [r7, #8]
 800da7a:	2100      	movs	r1, #0
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f000 fc62 	bl	800e346 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da82:	2300      	movs	r3, #0
}
 800da84:	4618      	mov	r0, r3
 800da86:	3710      	adds	r7, #16
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	4613      	mov	r3, r2
 800da98:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da9a:	88fb      	ldrh	r3, [r7, #6]
 800da9c:	68ba      	ldr	r2, [r7, #8]
 800da9e:	2100      	movs	r1, #0
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f000 fc50 	bl	800e346 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800daa6:	2300      	movs	r3, #0
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3710      	adds	r7, #16
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2204      	movs	r2, #4
 800dabc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dac0:	2300      	movs	r3, #0
 800dac2:	2200      	movs	r2, #0
 800dac4:	2100      	movs	r1, #0
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 fc1a 	bl	800e300 <USBD_LL_Transmit>

  return USBD_OK;
 800dacc:	2300      	movs	r3, #0
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3708      	adds	r7, #8
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}

0800dad6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dad6:	b580      	push	{r7, lr}
 800dad8:	b082      	sub	sp, #8
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2205      	movs	r2, #5
 800dae2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dae6:	2300      	movs	r3, #0
 800dae8:	2200      	movs	r2, #0
 800daea:	2100      	movs	r1, #0
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f000 fc2a 	bl	800e346 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800daf2:	2300      	movs	r3, #0
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3708      	adds	r7, #8
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800db00:	2200      	movs	r2, #0
 800db02:	4912      	ldr	r1, [pc, #72]	@ (800db4c <MX_USB_DEVICE_Init+0x50>)
 800db04:	4812      	ldr	r0, [pc, #72]	@ (800db50 <MX_USB_DEVICE_Init+0x54>)
 800db06:	f7fe ff5c 	bl	800c9c2 <USBD_Init>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d001      	beq.n	800db14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800db10:	f7f4 fd0c 	bl	800252c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800db14:	490f      	ldr	r1, [pc, #60]	@ (800db54 <MX_USB_DEVICE_Init+0x58>)
 800db16:	480e      	ldr	r0, [pc, #56]	@ (800db50 <MX_USB_DEVICE_Init+0x54>)
 800db18:	f7fe ff7e 	bl	800ca18 <USBD_RegisterClass>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d001      	beq.n	800db26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800db22:	f7f4 fd03 	bl	800252c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800db26:	490c      	ldr	r1, [pc, #48]	@ (800db58 <MX_USB_DEVICE_Init+0x5c>)
 800db28:	4809      	ldr	r0, [pc, #36]	@ (800db50 <MX_USB_DEVICE_Init+0x54>)
 800db2a:	f7fe fedb 	bl	800c8e4 <USBD_CDC_RegisterInterface>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d001      	beq.n	800db38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800db34:	f7f4 fcfa 	bl	800252c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800db38:	4805      	ldr	r0, [pc, #20]	@ (800db50 <MX_USB_DEVICE_Init+0x54>)
 800db3a:	f7fe ff87 	bl	800ca4c <USBD_Start>
 800db3e:	4603      	mov	r3, r0
 800db40:	2b00      	cmp	r3, #0
 800db42:	d001      	beq.n	800db48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800db44:	f7f4 fcf2 	bl	800252c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800db48:	bf00      	nop
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	20000140 	.word	0x20000140
 800db50:	20000f44 	.word	0x20000f44
 800db54:	2000002c 	.word	0x2000002c
 800db58:	20000130 	.word	0x20000130

0800db5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800db60:	2200      	movs	r2, #0
 800db62:	4905      	ldr	r1, [pc, #20]	@ (800db78 <CDC_Init_FS+0x1c>)
 800db64:	4805      	ldr	r0, [pc, #20]	@ (800db7c <CDC_Init_FS+0x20>)
 800db66:	f7fe fed4 	bl	800c912 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800db6a:	4905      	ldr	r1, [pc, #20]	@ (800db80 <CDC_Init_FS+0x24>)
 800db6c:	4803      	ldr	r0, [pc, #12]	@ (800db7c <CDC_Init_FS+0x20>)
 800db6e:	f7fe feea 	bl	800c946 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800db72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800db74:	4618      	mov	r0, r3
 800db76:	bd80      	pop	{r7, pc}
 800db78:	20001608 	.word	0x20001608
 800db7c:	20000f44 	.word	0x20000f44
 800db80:	20001208 	.word	0x20001208

0800db84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800db84:	b480      	push	{r7}
 800db86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800db88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr

0800db94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
 800db9a:	4603      	mov	r3, r0
 800db9c:	6039      	str	r1, [r7, #0]
 800db9e:	71fb      	strb	r3, [r7, #7]
 800dba0:	4613      	mov	r3, r2
 800dba2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dba4:	79fb      	ldrb	r3, [r7, #7]
 800dba6:	2b23      	cmp	r3, #35	@ 0x23
 800dba8:	d84a      	bhi.n	800dc40 <CDC_Control_FS+0xac>
 800dbaa:	a201      	add	r2, pc, #4	@ (adr r2, 800dbb0 <CDC_Control_FS+0x1c>)
 800dbac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbb0:	0800dc41 	.word	0x0800dc41
 800dbb4:	0800dc41 	.word	0x0800dc41
 800dbb8:	0800dc41 	.word	0x0800dc41
 800dbbc:	0800dc41 	.word	0x0800dc41
 800dbc0:	0800dc41 	.word	0x0800dc41
 800dbc4:	0800dc41 	.word	0x0800dc41
 800dbc8:	0800dc41 	.word	0x0800dc41
 800dbcc:	0800dc41 	.word	0x0800dc41
 800dbd0:	0800dc41 	.word	0x0800dc41
 800dbd4:	0800dc41 	.word	0x0800dc41
 800dbd8:	0800dc41 	.word	0x0800dc41
 800dbdc:	0800dc41 	.word	0x0800dc41
 800dbe0:	0800dc41 	.word	0x0800dc41
 800dbe4:	0800dc41 	.word	0x0800dc41
 800dbe8:	0800dc41 	.word	0x0800dc41
 800dbec:	0800dc41 	.word	0x0800dc41
 800dbf0:	0800dc41 	.word	0x0800dc41
 800dbf4:	0800dc41 	.word	0x0800dc41
 800dbf8:	0800dc41 	.word	0x0800dc41
 800dbfc:	0800dc41 	.word	0x0800dc41
 800dc00:	0800dc41 	.word	0x0800dc41
 800dc04:	0800dc41 	.word	0x0800dc41
 800dc08:	0800dc41 	.word	0x0800dc41
 800dc0c:	0800dc41 	.word	0x0800dc41
 800dc10:	0800dc41 	.word	0x0800dc41
 800dc14:	0800dc41 	.word	0x0800dc41
 800dc18:	0800dc41 	.word	0x0800dc41
 800dc1c:	0800dc41 	.word	0x0800dc41
 800dc20:	0800dc41 	.word	0x0800dc41
 800dc24:	0800dc41 	.word	0x0800dc41
 800dc28:	0800dc41 	.word	0x0800dc41
 800dc2c:	0800dc41 	.word	0x0800dc41
 800dc30:	0800dc41 	.word	0x0800dc41
 800dc34:	0800dc41 	.word	0x0800dc41
 800dc38:	0800dc41 	.word	0x0800dc41
 800dc3c:	0800dc41 	.word	0x0800dc41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dc40:	bf00      	nop
  }

  return (USBD_OK);
 800dc42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	370c      	adds	r7, #12
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr

0800dc50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dc5a:	6879      	ldr	r1, [r7, #4]
 800dc5c:	480c      	ldr	r0, [pc, #48]	@ (800dc90 <CDC_Receive_FS+0x40>)
 800dc5e:	f7fe fe72 	bl	800c946 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dc62:	480b      	ldr	r0, [pc, #44]	@ (800dc90 <CDC_Receive_FS+0x40>)
 800dc64:	f7fe fe83 	bl	800c96e <USBD_CDC_ReceivePacket>

  for (uint32_t i = 0; i < *Len; i++) {
 800dc68:	2300      	movs	r3, #0
 800dc6a:	60fb      	str	r3, [r7, #12]
 800dc6c:	e005      	b.n	800dc7a <CDC_Receive_FS+0x2a>
	  printf("test");
 800dc6e:	4809      	ldr	r0, [pc, #36]	@ (800dc94 <CDC_Receive_FS+0x44>)
 800dc70:	f001 fc68 	bl	800f544 <iprintf>
  for (uint32_t i = 0; i < *Len; i++) {
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	3301      	adds	r3, #1
 800dc78:	60fb      	str	r3, [r7, #12]
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	68fa      	ldr	r2, [r7, #12]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d3f4      	bcc.n	800dc6e <CDC_Receive_FS+0x1e>
//	  RingBuffer_PutChar(&comInputRingBuffer, Buf[i]);
  }
  return (USBD_OK);
 800dc84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3710      	adds	r7, #16
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	20000f44 	.word	0x20000f44
 800dc94:	08013858 	.word	0x08013858

0800dc98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b083      	sub	sp, #12
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	4603      	mov	r3, r0
 800dca0:	6039      	str	r1, [r7, #0]
 800dca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	2212      	movs	r2, #18
 800dca8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dcaa:	4b03      	ldr	r3, [pc, #12]	@ (800dcb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	370c      	adds	r7, #12
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr
 800dcb8:	2000015c 	.word	0x2000015c

0800dcbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	6039      	str	r1, [r7, #0]
 800dcc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	2204      	movs	r2, #4
 800dccc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dcce:	4b03      	ldr	r3, [pc, #12]	@ (800dcdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	370c      	adds	r7, #12
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr
 800dcdc:	20000170 	.word	0x20000170

0800dce0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	4603      	mov	r3, r0
 800dce8:	6039      	str	r1, [r7, #0]
 800dcea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dcec:	79fb      	ldrb	r3, [r7, #7]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d105      	bne.n	800dcfe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	4907      	ldr	r1, [pc, #28]	@ (800dd14 <USBD_FS_ProductStrDescriptor+0x34>)
 800dcf6:	4808      	ldr	r0, [pc, #32]	@ (800dd18 <USBD_FS_ProductStrDescriptor+0x38>)
 800dcf8:	f7ff fe22 	bl	800d940 <USBD_GetString>
 800dcfc:	e004      	b.n	800dd08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dcfe:	683a      	ldr	r2, [r7, #0]
 800dd00:	4904      	ldr	r1, [pc, #16]	@ (800dd14 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd02:	4805      	ldr	r0, [pc, #20]	@ (800dd18 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd04:	f7ff fe1c 	bl	800d940 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd08:	4b02      	ldr	r3, [pc, #8]	@ (800dd14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3708      	adds	r7, #8
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	20001a08 	.word	0x20001a08
 800dd18:	08013860 	.word	0x08013860

0800dd1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	4603      	mov	r3, r0
 800dd24:	6039      	str	r1, [r7, #0]
 800dd26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dd28:	683a      	ldr	r2, [r7, #0]
 800dd2a:	4904      	ldr	r1, [pc, #16]	@ (800dd3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dd2c:	4804      	ldr	r0, [pc, #16]	@ (800dd40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dd2e:	f7ff fe07 	bl	800d940 <USBD_GetString>
  return USBD_StrDesc;
 800dd32:	4b02      	ldr	r3, [pc, #8]	@ (800dd3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3708      	adds	r7, #8
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	20001a08 	.word	0x20001a08
 800dd40:	08013878 	.word	0x08013878

0800dd44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	6039      	str	r1, [r7, #0]
 800dd4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	221a      	movs	r2, #26
 800dd54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dd56:	f000 f843 	bl	800dde0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dd5a:	4b02      	ldr	r3, [pc, #8]	@ (800dd64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3708      	adds	r7, #8
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}
 800dd64:	20000174 	.word	0x20000174

0800dd68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	4603      	mov	r3, r0
 800dd70:	6039      	str	r1, [r7, #0]
 800dd72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dd74:	79fb      	ldrb	r3, [r7, #7]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d105      	bne.n	800dd86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dd7a:	683a      	ldr	r2, [r7, #0]
 800dd7c:	4907      	ldr	r1, [pc, #28]	@ (800dd9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800dd7e:	4808      	ldr	r0, [pc, #32]	@ (800dda0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dd80:	f7ff fdde 	bl	800d940 <USBD_GetString>
 800dd84:	e004      	b.n	800dd90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dd86:	683a      	ldr	r2, [r7, #0]
 800dd88:	4904      	ldr	r1, [pc, #16]	@ (800dd9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800dd8a:	4805      	ldr	r0, [pc, #20]	@ (800dda0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dd8c:	f7ff fdd8 	bl	800d940 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd90:	4b02      	ldr	r3, [pc, #8]	@ (800dd9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3708      	adds	r7, #8
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	20001a08 	.word	0x20001a08
 800dda0:	0801388c 	.word	0x0801388c

0800dda4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	4603      	mov	r3, r0
 800ddac:	6039      	str	r1, [r7, #0]
 800ddae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ddb0:	79fb      	ldrb	r3, [r7, #7]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d105      	bne.n	800ddc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ddb6:	683a      	ldr	r2, [r7, #0]
 800ddb8:	4907      	ldr	r1, [pc, #28]	@ (800ddd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ddba:	4808      	ldr	r0, [pc, #32]	@ (800dddc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ddbc:	f7ff fdc0 	bl	800d940 <USBD_GetString>
 800ddc0:	e004      	b.n	800ddcc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ddc2:	683a      	ldr	r2, [r7, #0]
 800ddc4:	4904      	ldr	r1, [pc, #16]	@ (800ddd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ddc6:	4805      	ldr	r0, [pc, #20]	@ (800dddc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ddc8:	f7ff fdba 	bl	800d940 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ddcc:	4b02      	ldr	r3, [pc, #8]	@ (800ddd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3708      	adds	r7, #8
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	20001a08 	.word	0x20001a08
 800dddc:	08013898 	.word	0x08013898

0800dde0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b084      	sub	sp, #16
 800dde4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800dde6:	68fa      	ldr	r2, [r7, #12]
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	4413      	add	r3, r2
 800ddec:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d009      	beq.n	800de08 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ddf4:	2208      	movs	r2, #8
 800ddf6:	4906      	ldr	r1, [pc, #24]	@ (800de10 <Get_SerialNum+0x30>)
 800ddf8:	68f8      	ldr	r0, [r7, #12]
 800ddfa:	f000 f80d 	bl	800de18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ddfe:	2204      	movs	r2, #4
 800de00:	4904      	ldr	r1, [pc, #16]	@ (800de14 <Get_SerialNum+0x34>)
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 f808 	bl	800de18 <IntToUnicode>
  }
}
 800de08:	bf00      	nop
 800de0a:	3710      	adds	r7, #16
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	20000176 	.word	0x20000176
 800de14:	20000186 	.word	0x20000186

0800de18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800de18:	b480      	push	{r7}
 800de1a:	b087      	sub	sp, #28
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	60b9      	str	r1, [r7, #8]
 800de22:	4613      	mov	r3, r2
 800de24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800de26:	2300      	movs	r3, #0
 800de28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800de2a:	2300      	movs	r3, #0
 800de2c:	75fb      	strb	r3, [r7, #23]
 800de2e:	e027      	b.n	800de80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	0f1b      	lsrs	r3, r3, #28
 800de34:	2b09      	cmp	r3, #9
 800de36:	d80b      	bhi.n	800de50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	0f1b      	lsrs	r3, r3, #28
 800de3c:	b2da      	uxtb	r2, r3
 800de3e:	7dfb      	ldrb	r3, [r7, #23]
 800de40:	005b      	lsls	r3, r3, #1
 800de42:	4619      	mov	r1, r3
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	440b      	add	r3, r1
 800de48:	3230      	adds	r2, #48	@ 0x30
 800de4a:	b2d2      	uxtb	r2, r2
 800de4c:	701a      	strb	r2, [r3, #0]
 800de4e:	e00a      	b.n	800de66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	0f1b      	lsrs	r3, r3, #28
 800de54:	b2da      	uxtb	r2, r3
 800de56:	7dfb      	ldrb	r3, [r7, #23]
 800de58:	005b      	lsls	r3, r3, #1
 800de5a:	4619      	mov	r1, r3
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	440b      	add	r3, r1
 800de60:	3237      	adds	r2, #55	@ 0x37
 800de62:	b2d2      	uxtb	r2, r2
 800de64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	011b      	lsls	r3, r3, #4
 800de6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800de6c:	7dfb      	ldrb	r3, [r7, #23]
 800de6e:	005b      	lsls	r3, r3, #1
 800de70:	3301      	adds	r3, #1
 800de72:	68ba      	ldr	r2, [r7, #8]
 800de74:	4413      	add	r3, r2
 800de76:	2200      	movs	r2, #0
 800de78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800de7a:	7dfb      	ldrb	r3, [r7, #23]
 800de7c:	3301      	adds	r3, #1
 800de7e:	75fb      	strb	r3, [r7, #23]
 800de80:	7dfa      	ldrb	r2, [r7, #23]
 800de82:	79fb      	ldrb	r3, [r7, #7]
 800de84:	429a      	cmp	r2, r3
 800de86:	d3d3      	bcc.n	800de30 <IntToUnicode+0x18>
  }
}
 800de88:	bf00      	nop
 800de8a:	bf00      	nop
 800de8c:	371c      	adds	r7, #28
 800de8e:	46bd      	mov	sp, r7
 800de90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de94:	4770      	bx	lr
	...

0800de98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b08a      	sub	sp, #40	@ 0x28
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dea0:	f107 0314 	add.w	r3, r7, #20
 800dea4:	2200      	movs	r2, #0
 800dea6:	601a      	str	r2, [r3, #0]
 800dea8:	605a      	str	r2, [r3, #4]
 800deaa:	609a      	str	r2, [r3, #8]
 800deac:	60da      	str	r2, [r3, #12]
 800deae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4a20      	ldr	r2, [pc, #128]	@ (800df38 <HAL_PCD_MspInit+0xa0>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d139      	bne.n	800df2e <HAL_PCD_MspInit+0x96>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800deba:	4b20      	ldr	r3, [pc, #128]	@ (800df3c <HAL_PCD_MspInit+0xa4>)
 800debc:	695b      	ldr	r3, [r3, #20]
 800debe:	4a1f      	ldr	r2, [pc, #124]	@ (800df3c <HAL_PCD_MspInit+0xa4>)
 800dec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dec4:	6153      	str	r3, [r2, #20]
 800dec6:	4b1d      	ldr	r3, [pc, #116]	@ (800df3c <HAL_PCD_MspInit+0xa4>)
 800dec8:	695b      	ldr	r3, [r3, #20]
 800deca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dece:	613b      	str	r3, [r7, #16]
 800ded0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ded2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ded6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ded8:	2302      	movs	r3, #2
 800deda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dedc:	2300      	movs	r3, #0
 800dede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800dee0:	2303      	movs	r3, #3
 800dee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800dee4:	230e      	movs	r3, #14
 800dee6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dee8:	f107 0314 	add.w	r3, r7, #20
 800deec:	4619      	mov	r1, r3
 800deee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800def2:	f7f5 f8ed 	bl	80030d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800def6:	4b11      	ldr	r3, [pc, #68]	@ (800df3c <HAL_PCD_MspInit+0xa4>)
 800def8:	69db      	ldr	r3, [r3, #28]
 800defa:	4a10      	ldr	r2, [pc, #64]	@ (800df3c <HAL_PCD_MspInit+0xa4>)
 800defc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800df00:	61d3      	str	r3, [r2, #28]
 800df02:	4b0e      	ldr	r3, [pc, #56]	@ (800df3c <HAL_PCD_MspInit+0xa4>)
 800df04:	69db      	ldr	r3, [r3, #28]
 800df06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800df0a:	60fb      	str	r3, [r7, #12]
 800df0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800df0e:	2200      	movs	r2, #0
 800df10:	2100      	movs	r1, #0
 800df12:	204a      	movs	r0, #74	@ 0x4a
 800df14:	f7f5 f82f 	bl	8002f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800df18:	204a      	movs	r0, #74	@ 0x4a
 800df1a:	f7f5 f848 	bl	8002fae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800df1e:	2200      	movs	r2, #0
 800df20:	2100      	movs	r1, #0
 800df22:	204b      	movs	r0, #75	@ 0x4b
 800df24:	f7f5 f827 	bl	8002f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800df28:	204b      	movs	r0, #75	@ 0x4b
 800df2a:	f7f5 f840 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800df2e:	bf00      	nop
 800df30:	3728      	adds	r7, #40	@ 0x28
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop
 800df38:	40005c00 	.word	0x40005c00
 800df3c:	40021000 	.word	0x40021000

0800df40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800df54:	4619      	mov	r1, r3
 800df56:	4610      	mov	r0, r2
 800df58:	f7fe fdc1 	bl	800cade <USBD_LL_SetupStage>
}
 800df5c:	bf00      	nop
 800df5e:	3708      	adds	r7, #8
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}

0800df64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	460b      	mov	r3, r1
 800df6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800df76:	78fa      	ldrb	r2, [r7, #3]
 800df78:	6879      	ldr	r1, [r7, #4]
 800df7a:	4613      	mov	r3, r2
 800df7c:	009b      	lsls	r3, r3, #2
 800df7e:	4413      	add	r3, r2
 800df80:	00db      	lsls	r3, r3, #3
 800df82:	440b      	add	r3, r1
 800df84:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	78fb      	ldrb	r3, [r7, #3]
 800df8c:	4619      	mov	r1, r3
 800df8e:	f7fe fdf3 	bl	800cb78 <USBD_LL_DataOutStage>
}
 800df92:	bf00      	nop
 800df94:	3708      	adds	r7, #8
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}

0800df9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df9a:	b580      	push	{r7, lr}
 800df9c:	b082      	sub	sp, #8
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	6078      	str	r0, [r7, #4]
 800dfa2:	460b      	mov	r3, r1
 800dfa4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800dfac:	78fa      	ldrb	r2, [r7, #3]
 800dfae:	6879      	ldr	r1, [r7, #4]
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	4413      	add	r3, r2
 800dfb6:	00db      	lsls	r3, r3, #3
 800dfb8:	440b      	add	r3, r1
 800dfba:	333c      	adds	r3, #60	@ 0x3c
 800dfbc:	681a      	ldr	r2, [r3, #0]
 800dfbe:	78fb      	ldrb	r3, [r7, #3]
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	f7fe fe4a 	bl	800cc5a <USBD_LL_DataInStage>
}
 800dfc6:	bf00      	nop
 800dfc8:	3708      	adds	r7, #8
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}

0800dfce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfce:	b580      	push	{r7, lr}
 800dfd0:	b082      	sub	sp, #8
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7fe ff5d 	bl	800ce9c <USBD_LL_SOF>
}
 800dfe2:	bf00      	nop
 800dfe4:	3708      	adds	r7, #8
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}

0800dfea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfea:	b580      	push	{r7, lr}
 800dfec:	b084      	sub	sp, #16
 800dfee:	af00      	add	r7, sp, #0
 800dff0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dff2:	2301      	movs	r3, #1
 800dff4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	689b      	ldr	r3, [r3, #8]
 800dffa:	2b02      	cmp	r3, #2
 800dffc:	d001      	beq.n	800e002 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dffe:	f7f4 fa95 	bl	800252c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800e008:	7bfa      	ldrb	r2, [r7, #15]
 800e00a:	4611      	mov	r1, r2
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fe ff0a 	bl	800ce26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800e018:	4618      	mov	r0, r3
 800e01a:	f7fe fec3 	bl	800cda4 <USBD_LL_Reset>
}
 800e01e:	bf00      	nop
 800e020:	3710      	adds	r7, #16
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
	...

0800e028 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800e036:	4618      	mov	r0, r3
 800e038:	f7fe ff05 	bl	800ce46 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	699b      	ldr	r3, [r3, #24]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d005      	beq.n	800e050 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e044:	4b04      	ldr	r3, [pc, #16]	@ (800e058 <HAL_PCD_SuspendCallback+0x30>)
 800e046:	691b      	ldr	r3, [r3, #16]
 800e048:	4a03      	ldr	r2, [pc, #12]	@ (800e058 <HAL_PCD_SuspendCallback+0x30>)
 800e04a:	f043 0306 	orr.w	r3, r3, #6
 800e04e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e050:	bf00      	nop
 800e052:	3708      	adds	r7, #8
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	e000ed00 	.word	0xe000ed00

0800e05c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fe ff00 	bl	800ce70 <USBD_LL_Resume>
}
 800e070:	bf00      	nop
 800e072:	3708      	adds	r7, #8
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}

0800e078 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e080:	4a28      	ldr	r2, [pc, #160]	@ (800e124 <USBD_LL_Init+0xac>)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f8c2 32e8 	str.w	r3, [r2, #744]	@ 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	4a26      	ldr	r2, [pc, #152]	@ (800e124 <USBD_LL_Init+0xac>)
 800e08c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800e090:	4b24      	ldr	r3, [pc, #144]	@ (800e124 <USBD_LL_Init+0xac>)
 800e092:	4a25      	ldr	r2, [pc, #148]	@ (800e128 <USBD_LL_Init+0xb0>)
 800e094:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e096:	4b23      	ldr	r3, [pc, #140]	@ (800e124 <USBD_LL_Init+0xac>)
 800e098:	2208      	movs	r2, #8
 800e09a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e09c:	4b21      	ldr	r3, [pc, #132]	@ (800e124 <USBD_LL_Init+0xac>)
 800e09e:	2202      	movs	r2, #2
 800e0a0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e0a2:	4b20      	ldr	r3, [pc, #128]	@ (800e124 <USBD_LL_Init+0xac>)
 800e0a4:	2202      	movs	r2, #2
 800e0a6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e0a8:	4b1e      	ldr	r3, [pc, #120]	@ (800e124 <USBD_LL_Init+0xac>)
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e0ae:	4b1d      	ldr	r3, [pc, #116]	@ (800e124 <USBD_LL_Init+0xac>)
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e0b4:	481b      	ldr	r0, [pc, #108]	@ (800e124 <USBD_LL_Init+0xac>)
 800e0b6:	f7f5 ff58 	bl	8003f6a <HAL_PCD_Init>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d001      	beq.n	800e0c4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800e0c0:	f7f4 fa34 	bl	800252c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e0ca:	2318      	movs	r3, #24
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	2100      	movs	r1, #0
 800e0d0:	f7f7 fbe0 	bl	8005894 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e0da:	2358      	movs	r3, #88	@ 0x58
 800e0dc:	2200      	movs	r2, #0
 800e0de:	2180      	movs	r1, #128	@ 0x80
 800e0e0:	f7f7 fbd8 	bl	8005894 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e0ea:	23c0      	movs	r3, #192	@ 0xc0
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	2181      	movs	r1, #129	@ 0x81
 800e0f0:	f7f7 fbd0 	bl	8005894 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e0fa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800e0fe:	2200      	movs	r2, #0
 800e100:	2101      	movs	r1, #1
 800e102:	f7f7 fbc7 	bl	8005894 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e10c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e110:	2200      	movs	r2, #0
 800e112:	2182      	movs	r1, #130	@ 0x82
 800e114:	f7f7 fbbe 	bl	8005894 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e118:	2300      	movs	r3, #0
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3708      	adds	r7, #8
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
 800e122:	bf00      	nop
 800e124:	20001c08 	.word	0x20001c08
 800e128:	40005c00 	.word	0x40005c00

0800e12c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b084      	sub	sp, #16
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e134:	2300      	movs	r3, #0
 800e136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e138:	2300      	movs	r3, #0
 800e13a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e142:	4618      	mov	r0, r3
 800e144:	f7f5 ffe3 	bl	800410e <HAL_PCD_Start>
 800e148:	4603      	mov	r3, r0
 800e14a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e14c:	7bfb      	ldrb	r3, [r7, #15]
 800e14e:	4618      	mov	r0, r3
 800e150:	f000 f954 	bl	800e3fc <USBD_Get_USB_Status>
 800e154:	4603      	mov	r3, r0
 800e156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e158:	7bbb      	ldrb	r3, [r7, #14]
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b084      	sub	sp, #16
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
 800e16a:	4608      	mov	r0, r1
 800e16c:	4611      	mov	r1, r2
 800e16e:	461a      	mov	r2, r3
 800e170:	4603      	mov	r3, r0
 800e172:	70fb      	strb	r3, [r7, #3]
 800e174:	460b      	mov	r3, r1
 800e176:	70bb      	strb	r3, [r7, #2]
 800e178:	4613      	mov	r3, r2
 800e17a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e17c:	2300      	movs	r3, #0
 800e17e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e180:	2300      	movs	r3, #0
 800e182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e18a:	78bb      	ldrb	r3, [r7, #2]
 800e18c:	883a      	ldrh	r2, [r7, #0]
 800e18e:	78f9      	ldrb	r1, [r7, #3]
 800e190:	f7f6 f8dc 	bl	800434c <HAL_PCD_EP_Open>
 800e194:	4603      	mov	r3, r0
 800e196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e198:	7bfb      	ldrb	r3, [r7, #15]
 800e19a:	4618      	mov	r0, r3
 800e19c:	f000 f92e 	bl	800e3fc <USBD_Get_USB_Status>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3710      	adds	r7, #16
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}

0800e1ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1ae:	b580      	push	{r7, lr}
 800e1b0:	b084      	sub	sp, #16
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	6078      	str	r0, [r7, #4]
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e1c8:	78fa      	ldrb	r2, [r7, #3]
 800e1ca:	4611      	mov	r1, r2
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7f6 f91a 	bl	8004406 <HAL_PCD_EP_Close>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1d6:	7bfb      	ldrb	r3, [r7, #15]
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f000 f90f 	bl	800e3fc <USBD_Get_USB_Status>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3710      	adds	r7, #16
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e206:	78fa      	ldrb	r2, [r7, #3]
 800e208:	4611      	mov	r1, r2
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7f6 f9c3 	bl	8004596 <HAL_PCD_EP_SetStall>
 800e210:	4603      	mov	r3, r0
 800e212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e214:	7bfb      	ldrb	r3, [r7, #15]
 800e216:	4618      	mov	r0, r3
 800e218:	f000 f8f0 	bl	800e3fc <USBD_Get_USB_Status>
 800e21c:	4603      	mov	r3, r0
 800e21e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e220:	7bbb      	ldrb	r3, [r7, #14]
}
 800e222:	4618      	mov	r0, r3
 800e224:	3710      	adds	r7, #16
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}

0800e22a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e22a:	b580      	push	{r7, lr}
 800e22c:	b084      	sub	sp, #16
 800e22e:	af00      	add	r7, sp, #0
 800e230:	6078      	str	r0, [r7, #4]
 800e232:	460b      	mov	r3, r1
 800e234:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e236:	2300      	movs	r3, #0
 800e238:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e23a:	2300      	movs	r3, #0
 800e23c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e244:	78fa      	ldrb	r2, [r7, #3]
 800e246:	4611      	mov	r1, r2
 800e248:	4618      	mov	r0, r3
 800e24a:	f7f6 f9f6 	bl	800463a <HAL_PCD_EP_ClrStall>
 800e24e:	4603      	mov	r3, r0
 800e250:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e252:	7bfb      	ldrb	r3, [r7, #15]
 800e254:	4618      	mov	r0, r3
 800e256:	f000 f8d1 	bl	800e3fc <USBD_Get_USB_Status>
 800e25a:	4603      	mov	r3, r0
 800e25c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e25e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e260:	4618      	mov	r0, r3
 800e262:	3710      	adds	r7, #16
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e268:	b480      	push	{r7}
 800e26a:	b085      	sub	sp, #20
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	460b      	mov	r3, r1
 800e272:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e27a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e27c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e280:	2b00      	cmp	r3, #0
 800e282:	da0c      	bge.n	800e29e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e284:	78fb      	ldrb	r3, [r7, #3]
 800e286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e28a:	68f9      	ldr	r1, [r7, #12]
 800e28c:	1c5a      	adds	r2, r3, #1
 800e28e:	4613      	mov	r3, r2
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	4413      	add	r3, r2
 800e294:	00db      	lsls	r3, r3, #3
 800e296:	440b      	add	r3, r1
 800e298:	3302      	adds	r3, #2
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	e00b      	b.n	800e2b6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e29e:	78fb      	ldrb	r3, [r7, #3]
 800e2a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e2a4:	68f9      	ldr	r1, [r7, #12]
 800e2a6:	4613      	mov	r3, r2
 800e2a8:	009b      	lsls	r3, r3, #2
 800e2aa:	4413      	add	r3, r2
 800e2ac:	00db      	lsls	r3, r3, #3
 800e2ae:	440b      	add	r3, r1
 800e2b0:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800e2b4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3714      	adds	r7, #20
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c0:	4770      	bx	lr

0800e2c2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e2c2:	b580      	push	{r7, lr}
 800e2c4:	b084      	sub	sp, #16
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	6078      	str	r0, [r7, #4]
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e2dc:	78fa      	ldrb	r2, [r7, #3]
 800e2de:	4611      	mov	r1, r2
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7f6 f80e 	bl	8004302 <HAL_PCD_SetAddress>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2ea:	7bfb      	ldrb	r3, [r7, #15]
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f000 f885 	bl	800e3fc <USBD_Get_USB_Status>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3710      	adds	r7, #16
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b086      	sub	sp, #24
 800e304:	af00      	add	r7, sp, #0
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	607a      	str	r2, [r7, #4]
 800e30a:	461a      	mov	r2, r3
 800e30c:	460b      	mov	r3, r1
 800e30e:	72fb      	strb	r3, [r7, #11]
 800e310:	4613      	mov	r3, r2
 800e312:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e314:	2300      	movs	r3, #0
 800e316:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e318:	2300      	movs	r3, #0
 800e31a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e322:	893b      	ldrh	r3, [r7, #8]
 800e324:	7af9      	ldrb	r1, [r7, #11]
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	f7f6 f8fe 	bl	8004528 <HAL_PCD_EP_Transmit>
 800e32c:	4603      	mov	r3, r0
 800e32e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e330:	7dfb      	ldrb	r3, [r7, #23]
 800e332:	4618      	mov	r0, r3
 800e334:	f000 f862 	bl	800e3fc <USBD_Get_USB_Status>
 800e338:	4603      	mov	r3, r0
 800e33a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e33c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3718      	adds	r7, #24
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}

0800e346 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e346:	b580      	push	{r7, lr}
 800e348:	b086      	sub	sp, #24
 800e34a:	af00      	add	r7, sp, #0
 800e34c:	60f8      	str	r0, [r7, #12]
 800e34e:	607a      	str	r2, [r7, #4]
 800e350:	461a      	mov	r2, r3
 800e352:	460b      	mov	r3, r1
 800e354:	72fb      	strb	r3, [r7, #11]
 800e356:	4613      	mov	r3, r2
 800e358:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e35a:	2300      	movs	r3, #0
 800e35c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e35e:	2300      	movs	r3, #0
 800e360:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e368:	893b      	ldrh	r3, [r7, #8]
 800e36a:	7af9      	ldrb	r1, [r7, #11]
 800e36c:	687a      	ldr	r2, [r7, #4]
 800e36e:	f7f6 f892 	bl	8004496 <HAL_PCD_EP_Receive>
 800e372:	4603      	mov	r3, r0
 800e374:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e376:	7dfb      	ldrb	r3, [r7, #23]
 800e378:	4618      	mov	r0, r3
 800e37a:	f000 f83f 	bl	800e3fc <USBD_Get_USB_Status>
 800e37e:	4603      	mov	r3, r0
 800e380:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e382:	7dbb      	ldrb	r3, [r7, #22]
}
 800e384:	4618      	mov	r0, r3
 800e386:	3718      	adds	r7, #24
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b082      	sub	sp, #8
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	460b      	mov	r3, r1
 800e396:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e39e:	78fa      	ldrb	r2, [r7, #3]
 800e3a0:	4611      	mov	r1, r2
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7f6 f8a8 	bl	80044f8 <HAL_PCD_EP_GetRxCount>
 800e3a8:	4603      	mov	r3, r0
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3708      	adds	r7, #8
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
	...

0800e3b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e3bc:	4b03      	ldr	r3, [pc, #12]	@ (800e3cc <USBD_static_malloc+0x18>)
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	370c      	adds	r7, #12
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c8:	4770      	bx	lr
 800e3ca:	bf00      	nop
 800e3cc:	20001ef4 	.word	0x20001ef4

0800e3d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]

}
 800e3d8:	bf00      	nop
 800e3da:	370c      	adds	r7, #12
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr

0800e3e4 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b083      	sub	sp, #12
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	460b      	mov	r3, r1
 800e3ee:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800e3f0:	bf00      	nop
 800e3f2:	370c      	adds	r7, #12
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr

0800e3fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b085      	sub	sp, #20
 800e400:	af00      	add	r7, sp, #0
 800e402:	4603      	mov	r3, r0
 800e404:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e406:	2300      	movs	r3, #0
 800e408:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e40a:	79fb      	ldrb	r3, [r7, #7]
 800e40c:	2b03      	cmp	r3, #3
 800e40e:	d817      	bhi.n	800e440 <USBD_Get_USB_Status+0x44>
 800e410:	a201      	add	r2, pc, #4	@ (adr r2, 800e418 <USBD_Get_USB_Status+0x1c>)
 800e412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e416:	bf00      	nop
 800e418:	0800e429 	.word	0x0800e429
 800e41c:	0800e42f 	.word	0x0800e42f
 800e420:	0800e435 	.word	0x0800e435
 800e424:	0800e43b 	.word	0x0800e43b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e428:	2300      	movs	r3, #0
 800e42a:	73fb      	strb	r3, [r7, #15]
    break;
 800e42c:	e00b      	b.n	800e446 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e42e:	2302      	movs	r3, #2
 800e430:	73fb      	strb	r3, [r7, #15]
    break;
 800e432:	e008      	b.n	800e446 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e434:	2301      	movs	r3, #1
 800e436:	73fb      	strb	r3, [r7, #15]
    break;
 800e438:	e005      	b.n	800e446 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e43a:	2302      	movs	r3, #2
 800e43c:	73fb      	strb	r3, [r7, #15]
    break;
 800e43e:	e002      	b.n	800e446 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e440:	2302      	movs	r3, #2
 800e442:	73fb      	strb	r3, [r7, #15]
    break;
 800e444:	bf00      	nop
  }
  return usb_status;
 800e446:	7bfb      	ldrb	r3, [r7, #15]
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3714      	adds	r7, #20
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <atoi>:
 800e454:	220a      	movs	r2, #10
 800e456:	2100      	movs	r1, #0
 800e458:	f000 b87c 	b.w	800e554 <strtol>

0800e45c <_strtol_l.constprop.0>:
 800e45c:	2b24      	cmp	r3, #36	@ 0x24
 800e45e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e462:	4686      	mov	lr, r0
 800e464:	4690      	mov	r8, r2
 800e466:	d801      	bhi.n	800e46c <_strtol_l.constprop.0+0x10>
 800e468:	2b01      	cmp	r3, #1
 800e46a:	d106      	bne.n	800e47a <_strtol_l.constprop.0+0x1e>
 800e46c:	f001 fa78 	bl	800f960 <__errno>
 800e470:	2316      	movs	r3, #22
 800e472:	6003      	str	r3, [r0, #0]
 800e474:	2000      	movs	r0, #0
 800e476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e47a:	4834      	ldr	r0, [pc, #208]	@ (800e54c <_strtol_l.constprop.0+0xf0>)
 800e47c:	460d      	mov	r5, r1
 800e47e:	462a      	mov	r2, r5
 800e480:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e484:	5d06      	ldrb	r6, [r0, r4]
 800e486:	f016 0608 	ands.w	r6, r6, #8
 800e48a:	d1f8      	bne.n	800e47e <_strtol_l.constprop.0+0x22>
 800e48c:	2c2d      	cmp	r4, #45	@ 0x2d
 800e48e:	d12d      	bne.n	800e4ec <_strtol_l.constprop.0+0x90>
 800e490:	782c      	ldrb	r4, [r5, #0]
 800e492:	2601      	movs	r6, #1
 800e494:	1c95      	adds	r5, r2, #2
 800e496:	f033 0210 	bics.w	r2, r3, #16
 800e49a:	d109      	bne.n	800e4b0 <_strtol_l.constprop.0+0x54>
 800e49c:	2c30      	cmp	r4, #48	@ 0x30
 800e49e:	d12a      	bne.n	800e4f6 <_strtol_l.constprop.0+0x9a>
 800e4a0:	782a      	ldrb	r2, [r5, #0]
 800e4a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e4a6:	2a58      	cmp	r2, #88	@ 0x58
 800e4a8:	d125      	bne.n	800e4f6 <_strtol_l.constprop.0+0x9a>
 800e4aa:	786c      	ldrb	r4, [r5, #1]
 800e4ac:	2310      	movs	r3, #16
 800e4ae:	3502      	adds	r5, #2
 800e4b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e4b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	fbbc f9f3 	udiv	r9, ip, r3
 800e4be:	4610      	mov	r0, r2
 800e4c0:	fb03 ca19 	mls	sl, r3, r9, ip
 800e4c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e4c8:	2f09      	cmp	r7, #9
 800e4ca:	d81b      	bhi.n	800e504 <_strtol_l.constprop.0+0xa8>
 800e4cc:	463c      	mov	r4, r7
 800e4ce:	42a3      	cmp	r3, r4
 800e4d0:	dd27      	ble.n	800e522 <_strtol_l.constprop.0+0xc6>
 800e4d2:	1c57      	adds	r7, r2, #1
 800e4d4:	d007      	beq.n	800e4e6 <_strtol_l.constprop.0+0x8a>
 800e4d6:	4581      	cmp	r9, r0
 800e4d8:	d320      	bcc.n	800e51c <_strtol_l.constprop.0+0xc0>
 800e4da:	d101      	bne.n	800e4e0 <_strtol_l.constprop.0+0x84>
 800e4dc:	45a2      	cmp	sl, r4
 800e4de:	db1d      	blt.n	800e51c <_strtol_l.constprop.0+0xc0>
 800e4e0:	fb00 4003 	mla	r0, r0, r3, r4
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e4ea:	e7eb      	b.n	800e4c4 <_strtol_l.constprop.0+0x68>
 800e4ec:	2c2b      	cmp	r4, #43	@ 0x2b
 800e4ee:	bf04      	itt	eq
 800e4f0:	782c      	ldrbeq	r4, [r5, #0]
 800e4f2:	1c95      	addeq	r5, r2, #2
 800e4f4:	e7cf      	b.n	800e496 <_strtol_l.constprop.0+0x3a>
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d1da      	bne.n	800e4b0 <_strtol_l.constprop.0+0x54>
 800e4fa:	2c30      	cmp	r4, #48	@ 0x30
 800e4fc:	bf0c      	ite	eq
 800e4fe:	2308      	moveq	r3, #8
 800e500:	230a      	movne	r3, #10
 800e502:	e7d5      	b.n	800e4b0 <_strtol_l.constprop.0+0x54>
 800e504:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e508:	2f19      	cmp	r7, #25
 800e50a:	d801      	bhi.n	800e510 <_strtol_l.constprop.0+0xb4>
 800e50c:	3c37      	subs	r4, #55	@ 0x37
 800e50e:	e7de      	b.n	800e4ce <_strtol_l.constprop.0+0x72>
 800e510:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e514:	2f19      	cmp	r7, #25
 800e516:	d804      	bhi.n	800e522 <_strtol_l.constprop.0+0xc6>
 800e518:	3c57      	subs	r4, #87	@ 0x57
 800e51a:	e7d8      	b.n	800e4ce <_strtol_l.constprop.0+0x72>
 800e51c:	f04f 32ff 	mov.w	r2, #4294967295
 800e520:	e7e1      	b.n	800e4e6 <_strtol_l.constprop.0+0x8a>
 800e522:	1c53      	adds	r3, r2, #1
 800e524:	d108      	bne.n	800e538 <_strtol_l.constprop.0+0xdc>
 800e526:	2322      	movs	r3, #34	@ 0x22
 800e528:	f8ce 3000 	str.w	r3, [lr]
 800e52c:	4660      	mov	r0, ip
 800e52e:	f1b8 0f00 	cmp.w	r8, #0
 800e532:	d0a0      	beq.n	800e476 <_strtol_l.constprop.0+0x1a>
 800e534:	1e69      	subs	r1, r5, #1
 800e536:	e006      	b.n	800e546 <_strtol_l.constprop.0+0xea>
 800e538:	b106      	cbz	r6, 800e53c <_strtol_l.constprop.0+0xe0>
 800e53a:	4240      	negs	r0, r0
 800e53c:	f1b8 0f00 	cmp.w	r8, #0
 800e540:	d099      	beq.n	800e476 <_strtol_l.constprop.0+0x1a>
 800e542:	2a00      	cmp	r2, #0
 800e544:	d1f6      	bne.n	800e534 <_strtol_l.constprop.0+0xd8>
 800e546:	f8c8 1000 	str.w	r1, [r8]
 800e54a:	e794      	b.n	800e476 <_strtol_l.constprop.0+0x1a>
 800e54c:	080138ed 	.word	0x080138ed

0800e550 <_strtol_r>:
 800e550:	f7ff bf84 	b.w	800e45c <_strtol_l.constprop.0>

0800e554 <strtol>:
 800e554:	4613      	mov	r3, r2
 800e556:	460a      	mov	r2, r1
 800e558:	4601      	mov	r1, r0
 800e55a:	4802      	ldr	r0, [pc, #8]	@ (800e564 <strtol+0x10>)
 800e55c:	6800      	ldr	r0, [r0, #0]
 800e55e:	f7ff bf7d 	b.w	800e45c <_strtol_l.constprop.0>
 800e562:	bf00      	nop
 800e564:	2000019c 	.word	0x2000019c

0800e568 <__cvt>:
 800e568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e56c:	ec57 6b10 	vmov	r6, r7, d0
 800e570:	2f00      	cmp	r7, #0
 800e572:	460c      	mov	r4, r1
 800e574:	4619      	mov	r1, r3
 800e576:	463b      	mov	r3, r7
 800e578:	bfbb      	ittet	lt
 800e57a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e57e:	461f      	movlt	r7, r3
 800e580:	2300      	movge	r3, #0
 800e582:	232d      	movlt	r3, #45	@ 0x2d
 800e584:	700b      	strb	r3, [r1, #0]
 800e586:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e588:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e58c:	4691      	mov	r9, r2
 800e58e:	f023 0820 	bic.w	r8, r3, #32
 800e592:	bfbc      	itt	lt
 800e594:	4632      	movlt	r2, r6
 800e596:	4616      	movlt	r6, r2
 800e598:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e59c:	d005      	beq.n	800e5aa <__cvt+0x42>
 800e59e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e5a2:	d100      	bne.n	800e5a6 <__cvt+0x3e>
 800e5a4:	3401      	adds	r4, #1
 800e5a6:	2102      	movs	r1, #2
 800e5a8:	e000      	b.n	800e5ac <__cvt+0x44>
 800e5aa:	2103      	movs	r1, #3
 800e5ac:	ab03      	add	r3, sp, #12
 800e5ae:	9301      	str	r3, [sp, #4]
 800e5b0:	ab02      	add	r3, sp, #8
 800e5b2:	9300      	str	r3, [sp, #0]
 800e5b4:	ec47 6b10 	vmov	d0, r6, r7
 800e5b8:	4653      	mov	r3, sl
 800e5ba:	4622      	mov	r2, r4
 800e5bc:	f001 fa9c 	bl	800faf8 <_dtoa_r>
 800e5c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e5c4:	4605      	mov	r5, r0
 800e5c6:	d119      	bne.n	800e5fc <__cvt+0x94>
 800e5c8:	f019 0f01 	tst.w	r9, #1
 800e5cc:	d00e      	beq.n	800e5ec <__cvt+0x84>
 800e5ce:	eb00 0904 	add.w	r9, r0, r4
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	4630      	mov	r0, r6
 800e5d8:	4639      	mov	r1, r7
 800e5da:	f7f2 fa75 	bl	8000ac8 <__aeabi_dcmpeq>
 800e5de:	b108      	cbz	r0, 800e5e4 <__cvt+0x7c>
 800e5e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e5e4:	2230      	movs	r2, #48	@ 0x30
 800e5e6:	9b03      	ldr	r3, [sp, #12]
 800e5e8:	454b      	cmp	r3, r9
 800e5ea:	d31e      	bcc.n	800e62a <__cvt+0xc2>
 800e5ec:	9b03      	ldr	r3, [sp, #12]
 800e5ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5f0:	1b5b      	subs	r3, r3, r5
 800e5f2:	4628      	mov	r0, r5
 800e5f4:	6013      	str	r3, [r2, #0]
 800e5f6:	b004      	add	sp, #16
 800e5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e600:	eb00 0904 	add.w	r9, r0, r4
 800e604:	d1e5      	bne.n	800e5d2 <__cvt+0x6a>
 800e606:	7803      	ldrb	r3, [r0, #0]
 800e608:	2b30      	cmp	r3, #48	@ 0x30
 800e60a:	d10a      	bne.n	800e622 <__cvt+0xba>
 800e60c:	2200      	movs	r2, #0
 800e60e:	2300      	movs	r3, #0
 800e610:	4630      	mov	r0, r6
 800e612:	4639      	mov	r1, r7
 800e614:	f7f2 fa58 	bl	8000ac8 <__aeabi_dcmpeq>
 800e618:	b918      	cbnz	r0, 800e622 <__cvt+0xba>
 800e61a:	f1c4 0401 	rsb	r4, r4, #1
 800e61e:	f8ca 4000 	str.w	r4, [sl]
 800e622:	f8da 3000 	ldr.w	r3, [sl]
 800e626:	4499      	add	r9, r3
 800e628:	e7d3      	b.n	800e5d2 <__cvt+0x6a>
 800e62a:	1c59      	adds	r1, r3, #1
 800e62c:	9103      	str	r1, [sp, #12]
 800e62e:	701a      	strb	r2, [r3, #0]
 800e630:	e7d9      	b.n	800e5e6 <__cvt+0x7e>

0800e632 <__exponent>:
 800e632:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e634:	2900      	cmp	r1, #0
 800e636:	bfba      	itte	lt
 800e638:	4249      	neglt	r1, r1
 800e63a:	232d      	movlt	r3, #45	@ 0x2d
 800e63c:	232b      	movge	r3, #43	@ 0x2b
 800e63e:	2909      	cmp	r1, #9
 800e640:	7002      	strb	r2, [r0, #0]
 800e642:	7043      	strb	r3, [r0, #1]
 800e644:	dd29      	ble.n	800e69a <__exponent+0x68>
 800e646:	f10d 0307 	add.w	r3, sp, #7
 800e64a:	461d      	mov	r5, r3
 800e64c:	270a      	movs	r7, #10
 800e64e:	461a      	mov	r2, r3
 800e650:	fbb1 f6f7 	udiv	r6, r1, r7
 800e654:	fb07 1416 	mls	r4, r7, r6, r1
 800e658:	3430      	adds	r4, #48	@ 0x30
 800e65a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e65e:	460c      	mov	r4, r1
 800e660:	2c63      	cmp	r4, #99	@ 0x63
 800e662:	f103 33ff 	add.w	r3, r3, #4294967295
 800e666:	4631      	mov	r1, r6
 800e668:	dcf1      	bgt.n	800e64e <__exponent+0x1c>
 800e66a:	3130      	adds	r1, #48	@ 0x30
 800e66c:	1e94      	subs	r4, r2, #2
 800e66e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e672:	1c41      	adds	r1, r0, #1
 800e674:	4623      	mov	r3, r4
 800e676:	42ab      	cmp	r3, r5
 800e678:	d30a      	bcc.n	800e690 <__exponent+0x5e>
 800e67a:	f10d 0309 	add.w	r3, sp, #9
 800e67e:	1a9b      	subs	r3, r3, r2
 800e680:	42ac      	cmp	r4, r5
 800e682:	bf88      	it	hi
 800e684:	2300      	movhi	r3, #0
 800e686:	3302      	adds	r3, #2
 800e688:	4403      	add	r3, r0
 800e68a:	1a18      	subs	r0, r3, r0
 800e68c:	b003      	add	sp, #12
 800e68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e690:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e694:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e698:	e7ed      	b.n	800e676 <__exponent+0x44>
 800e69a:	2330      	movs	r3, #48	@ 0x30
 800e69c:	3130      	adds	r1, #48	@ 0x30
 800e69e:	7083      	strb	r3, [r0, #2]
 800e6a0:	70c1      	strb	r1, [r0, #3]
 800e6a2:	1d03      	adds	r3, r0, #4
 800e6a4:	e7f1      	b.n	800e68a <__exponent+0x58>
	...

0800e6a8 <_printf_float>:
 800e6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ac:	b08d      	sub	sp, #52	@ 0x34
 800e6ae:	460c      	mov	r4, r1
 800e6b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e6b4:	4616      	mov	r6, r2
 800e6b6:	461f      	mov	r7, r3
 800e6b8:	4605      	mov	r5, r0
 800e6ba:	f001 f907 	bl	800f8cc <_localeconv_r>
 800e6be:	6803      	ldr	r3, [r0, #0]
 800e6c0:	9304      	str	r3, [sp, #16]
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7f1 fdd4 	bl	8000270 <strlen>
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6cc:	f8d8 3000 	ldr.w	r3, [r8]
 800e6d0:	9005      	str	r0, [sp, #20]
 800e6d2:	3307      	adds	r3, #7
 800e6d4:	f023 0307 	bic.w	r3, r3, #7
 800e6d8:	f103 0208 	add.w	r2, r3, #8
 800e6dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e6e0:	f8d4 b000 	ldr.w	fp, [r4]
 800e6e4:	f8c8 2000 	str.w	r2, [r8]
 800e6e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e6ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e6f0:	9307      	str	r3, [sp, #28]
 800e6f2:	f8cd 8018 	str.w	r8, [sp, #24]
 800e6f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e6fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6fe:	4b9c      	ldr	r3, [pc, #624]	@ (800e970 <_printf_float+0x2c8>)
 800e700:	f04f 32ff 	mov.w	r2, #4294967295
 800e704:	f7f2 fa12 	bl	8000b2c <__aeabi_dcmpun>
 800e708:	bb70      	cbnz	r0, 800e768 <_printf_float+0xc0>
 800e70a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e70e:	4b98      	ldr	r3, [pc, #608]	@ (800e970 <_printf_float+0x2c8>)
 800e710:	f04f 32ff 	mov.w	r2, #4294967295
 800e714:	f7f2 f9ec 	bl	8000af0 <__aeabi_dcmple>
 800e718:	bb30      	cbnz	r0, 800e768 <_printf_float+0xc0>
 800e71a:	2200      	movs	r2, #0
 800e71c:	2300      	movs	r3, #0
 800e71e:	4640      	mov	r0, r8
 800e720:	4649      	mov	r1, r9
 800e722:	f7f2 f9db 	bl	8000adc <__aeabi_dcmplt>
 800e726:	b110      	cbz	r0, 800e72e <_printf_float+0x86>
 800e728:	232d      	movs	r3, #45	@ 0x2d
 800e72a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e72e:	4a91      	ldr	r2, [pc, #580]	@ (800e974 <_printf_float+0x2cc>)
 800e730:	4b91      	ldr	r3, [pc, #580]	@ (800e978 <_printf_float+0x2d0>)
 800e732:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e736:	bf94      	ite	ls
 800e738:	4690      	movls	r8, r2
 800e73a:	4698      	movhi	r8, r3
 800e73c:	2303      	movs	r3, #3
 800e73e:	6123      	str	r3, [r4, #16]
 800e740:	f02b 0304 	bic.w	r3, fp, #4
 800e744:	6023      	str	r3, [r4, #0]
 800e746:	f04f 0900 	mov.w	r9, #0
 800e74a:	9700      	str	r7, [sp, #0]
 800e74c:	4633      	mov	r3, r6
 800e74e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e750:	4621      	mov	r1, r4
 800e752:	4628      	mov	r0, r5
 800e754:	f000 f9d2 	bl	800eafc <_printf_common>
 800e758:	3001      	adds	r0, #1
 800e75a:	f040 808d 	bne.w	800e878 <_printf_float+0x1d0>
 800e75e:	f04f 30ff 	mov.w	r0, #4294967295
 800e762:	b00d      	add	sp, #52	@ 0x34
 800e764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e768:	4642      	mov	r2, r8
 800e76a:	464b      	mov	r3, r9
 800e76c:	4640      	mov	r0, r8
 800e76e:	4649      	mov	r1, r9
 800e770:	f7f2 f9dc 	bl	8000b2c <__aeabi_dcmpun>
 800e774:	b140      	cbz	r0, 800e788 <_printf_float+0xe0>
 800e776:	464b      	mov	r3, r9
 800e778:	2b00      	cmp	r3, #0
 800e77a:	bfbc      	itt	lt
 800e77c:	232d      	movlt	r3, #45	@ 0x2d
 800e77e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e782:	4a7e      	ldr	r2, [pc, #504]	@ (800e97c <_printf_float+0x2d4>)
 800e784:	4b7e      	ldr	r3, [pc, #504]	@ (800e980 <_printf_float+0x2d8>)
 800e786:	e7d4      	b.n	800e732 <_printf_float+0x8a>
 800e788:	6863      	ldr	r3, [r4, #4]
 800e78a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e78e:	9206      	str	r2, [sp, #24]
 800e790:	1c5a      	adds	r2, r3, #1
 800e792:	d13b      	bne.n	800e80c <_printf_float+0x164>
 800e794:	2306      	movs	r3, #6
 800e796:	6063      	str	r3, [r4, #4]
 800e798:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e79c:	2300      	movs	r3, #0
 800e79e:	6022      	str	r2, [r4, #0]
 800e7a0:	9303      	str	r3, [sp, #12]
 800e7a2:	ab0a      	add	r3, sp, #40	@ 0x28
 800e7a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e7a8:	ab09      	add	r3, sp, #36	@ 0x24
 800e7aa:	9300      	str	r3, [sp, #0]
 800e7ac:	6861      	ldr	r1, [r4, #4]
 800e7ae:	ec49 8b10 	vmov	d0, r8, r9
 800e7b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	f7ff fed6 	bl	800e568 <__cvt>
 800e7bc:	9b06      	ldr	r3, [sp, #24]
 800e7be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e7c0:	2b47      	cmp	r3, #71	@ 0x47
 800e7c2:	4680      	mov	r8, r0
 800e7c4:	d129      	bne.n	800e81a <_printf_float+0x172>
 800e7c6:	1cc8      	adds	r0, r1, #3
 800e7c8:	db02      	blt.n	800e7d0 <_printf_float+0x128>
 800e7ca:	6863      	ldr	r3, [r4, #4]
 800e7cc:	4299      	cmp	r1, r3
 800e7ce:	dd41      	ble.n	800e854 <_printf_float+0x1ac>
 800e7d0:	f1aa 0a02 	sub.w	sl, sl, #2
 800e7d4:	fa5f fa8a 	uxtb.w	sl, sl
 800e7d8:	3901      	subs	r1, #1
 800e7da:	4652      	mov	r2, sl
 800e7dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e7e0:	9109      	str	r1, [sp, #36]	@ 0x24
 800e7e2:	f7ff ff26 	bl	800e632 <__exponent>
 800e7e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e7e8:	1813      	adds	r3, r2, r0
 800e7ea:	2a01      	cmp	r2, #1
 800e7ec:	4681      	mov	r9, r0
 800e7ee:	6123      	str	r3, [r4, #16]
 800e7f0:	dc02      	bgt.n	800e7f8 <_printf_float+0x150>
 800e7f2:	6822      	ldr	r2, [r4, #0]
 800e7f4:	07d2      	lsls	r2, r2, #31
 800e7f6:	d501      	bpl.n	800e7fc <_printf_float+0x154>
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	6123      	str	r3, [r4, #16]
 800e7fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e800:	2b00      	cmp	r3, #0
 800e802:	d0a2      	beq.n	800e74a <_printf_float+0xa2>
 800e804:	232d      	movs	r3, #45	@ 0x2d
 800e806:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e80a:	e79e      	b.n	800e74a <_printf_float+0xa2>
 800e80c:	9a06      	ldr	r2, [sp, #24]
 800e80e:	2a47      	cmp	r2, #71	@ 0x47
 800e810:	d1c2      	bne.n	800e798 <_printf_float+0xf0>
 800e812:	2b00      	cmp	r3, #0
 800e814:	d1c0      	bne.n	800e798 <_printf_float+0xf0>
 800e816:	2301      	movs	r3, #1
 800e818:	e7bd      	b.n	800e796 <_printf_float+0xee>
 800e81a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e81e:	d9db      	bls.n	800e7d8 <_printf_float+0x130>
 800e820:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e824:	d118      	bne.n	800e858 <_printf_float+0x1b0>
 800e826:	2900      	cmp	r1, #0
 800e828:	6863      	ldr	r3, [r4, #4]
 800e82a:	dd0b      	ble.n	800e844 <_printf_float+0x19c>
 800e82c:	6121      	str	r1, [r4, #16]
 800e82e:	b913      	cbnz	r3, 800e836 <_printf_float+0x18e>
 800e830:	6822      	ldr	r2, [r4, #0]
 800e832:	07d0      	lsls	r0, r2, #31
 800e834:	d502      	bpl.n	800e83c <_printf_float+0x194>
 800e836:	3301      	adds	r3, #1
 800e838:	440b      	add	r3, r1
 800e83a:	6123      	str	r3, [r4, #16]
 800e83c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e83e:	f04f 0900 	mov.w	r9, #0
 800e842:	e7db      	b.n	800e7fc <_printf_float+0x154>
 800e844:	b913      	cbnz	r3, 800e84c <_printf_float+0x1a4>
 800e846:	6822      	ldr	r2, [r4, #0]
 800e848:	07d2      	lsls	r2, r2, #31
 800e84a:	d501      	bpl.n	800e850 <_printf_float+0x1a8>
 800e84c:	3302      	adds	r3, #2
 800e84e:	e7f4      	b.n	800e83a <_printf_float+0x192>
 800e850:	2301      	movs	r3, #1
 800e852:	e7f2      	b.n	800e83a <_printf_float+0x192>
 800e854:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e858:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e85a:	4299      	cmp	r1, r3
 800e85c:	db05      	blt.n	800e86a <_printf_float+0x1c2>
 800e85e:	6823      	ldr	r3, [r4, #0]
 800e860:	6121      	str	r1, [r4, #16]
 800e862:	07d8      	lsls	r0, r3, #31
 800e864:	d5ea      	bpl.n	800e83c <_printf_float+0x194>
 800e866:	1c4b      	adds	r3, r1, #1
 800e868:	e7e7      	b.n	800e83a <_printf_float+0x192>
 800e86a:	2900      	cmp	r1, #0
 800e86c:	bfd4      	ite	le
 800e86e:	f1c1 0202 	rsble	r2, r1, #2
 800e872:	2201      	movgt	r2, #1
 800e874:	4413      	add	r3, r2
 800e876:	e7e0      	b.n	800e83a <_printf_float+0x192>
 800e878:	6823      	ldr	r3, [r4, #0]
 800e87a:	055a      	lsls	r2, r3, #21
 800e87c:	d407      	bmi.n	800e88e <_printf_float+0x1e6>
 800e87e:	6923      	ldr	r3, [r4, #16]
 800e880:	4642      	mov	r2, r8
 800e882:	4631      	mov	r1, r6
 800e884:	4628      	mov	r0, r5
 800e886:	47b8      	blx	r7
 800e888:	3001      	adds	r0, #1
 800e88a:	d12b      	bne.n	800e8e4 <_printf_float+0x23c>
 800e88c:	e767      	b.n	800e75e <_printf_float+0xb6>
 800e88e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e892:	f240 80dd 	bls.w	800ea50 <_printf_float+0x3a8>
 800e896:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e89a:	2200      	movs	r2, #0
 800e89c:	2300      	movs	r3, #0
 800e89e:	f7f2 f913 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	d033      	beq.n	800e90e <_printf_float+0x266>
 800e8a6:	4a37      	ldr	r2, [pc, #220]	@ (800e984 <_printf_float+0x2dc>)
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	4631      	mov	r1, r6
 800e8ac:	4628      	mov	r0, r5
 800e8ae:	47b8      	blx	r7
 800e8b0:	3001      	adds	r0, #1
 800e8b2:	f43f af54 	beq.w	800e75e <_printf_float+0xb6>
 800e8b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e8ba:	4543      	cmp	r3, r8
 800e8bc:	db02      	blt.n	800e8c4 <_printf_float+0x21c>
 800e8be:	6823      	ldr	r3, [r4, #0]
 800e8c0:	07d8      	lsls	r0, r3, #31
 800e8c2:	d50f      	bpl.n	800e8e4 <_printf_float+0x23c>
 800e8c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8c8:	4631      	mov	r1, r6
 800e8ca:	4628      	mov	r0, r5
 800e8cc:	47b8      	blx	r7
 800e8ce:	3001      	adds	r0, #1
 800e8d0:	f43f af45 	beq.w	800e75e <_printf_float+0xb6>
 800e8d4:	f04f 0900 	mov.w	r9, #0
 800e8d8:	f108 38ff 	add.w	r8, r8, #4294967295
 800e8dc:	f104 0a1a 	add.w	sl, r4, #26
 800e8e0:	45c8      	cmp	r8, r9
 800e8e2:	dc09      	bgt.n	800e8f8 <_printf_float+0x250>
 800e8e4:	6823      	ldr	r3, [r4, #0]
 800e8e6:	079b      	lsls	r3, r3, #30
 800e8e8:	f100 8103 	bmi.w	800eaf2 <_printf_float+0x44a>
 800e8ec:	68e0      	ldr	r0, [r4, #12]
 800e8ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8f0:	4298      	cmp	r0, r3
 800e8f2:	bfb8      	it	lt
 800e8f4:	4618      	movlt	r0, r3
 800e8f6:	e734      	b.n	800e762 <_printf_float+0xba>
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	4652      	mov	r2, sl
 800e8fc:	4631      	mov	r1, r6
 800e8fe:	4628      	mov	r0, r5
 800e900:	47b8      	blx	r7
 800e902:	3001      	adds	r0, #1
 800e904:	f43f af2b 	beq.w	800e75e <_printf_float+0xb6>
 800e908:	f109 0901 	add.w	r9, r9, #1
 800e90c:	e7e8      	b.n	800e8e0 <_printf_float+0x238>
 800e90e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e910:	2b00      	cmp	r3, #0
 800e912:	dc39      	bgt.n	800e988 <_printf_float+0x2e0>
 800e914:	4a1b      	ldr	r2, [pc, #108]	@ (800e984 <_printf_float+0x2dc>)
 800e916:	2301      	movs	r3, #1
 800e918:	4631      	mov	r1, r6
 800e91a:	4628      	mov	r0, r5
 800e91c:	47b8      	blx	r7
 800e91e:	3001      	adds	r0, #1
 800e920:	f43f af1d 	beq.w	800e75e <_printf_float+0xb6>
 800e924:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e928:	ea59 0303 	orrs.w	r3, r9, r3
 800e92c:	d102      	bne.n	800e934 <_printf_float+0x28c>
 800e92e:	6823      	ldr	r3, [r4, #0]
 800e930:	07d9      	lsls	r1, r3, #31
 800e932:	d5d7      	bpl.n	800e8e4 <_printf_float+0x23c>
 800e934:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e938:	4631      	mov	r1, r6
 800e93a:	4628      	mov	r0, r5
 800e93c:	47b8      	blx	r7
 800e93e:	3001      	adds	r0, #1
 800e940:	f43f af0d 	beq.w	800e75e <_printf_float+0xb6>
 800e944:	f04f 0a00 	mov.w	sl, #0
 800e948:	f104 0b1a 	add.w	fp, r4, #26
 800e94c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e94e:	425b      	negs	r3, r3
 800e950:	4553      	cmp	r3, sl
 800e952:	dc01      	bgt.n	800e958 <_printf_float+0x2b0>
 800e954:	464b      	mov	r3, r9
 800e956:	e793      	b.n	800e880 <_printf_float+0x1d8>
 800e958:	2301      	movs	r3, #1
 800e95a:	465a      	mov	r2, fp
 800e95c:	4631      	mov	r1, r6
 800e95e:	4628      	mov	r0, r5
 800e960:	47b8      	blx	r7
 800e962:	3001      	adds	r0, #1
 800e964:	f43f aefb 	beq.w	800e75e <_printf_float+0xb6>
 800e968:	f10a 0a01 	add.w	sl, sl, #1
 800e96c:	e7ee      	b.n	800e94c <_printf_float+0x2a4>
 800e96e:	bf00      	nop
 800e970:	7fefffff 	.word	0x7fefffff
 800e974:	080139ed 	.word	0x080139ed
 800e978:	080139f1 	.word	0x080139f1
 800e97c:	080139f5 	.word	0x080139f5
 800e980:	080139f9 	.word	0x080139f9
 800e984:	08013c87 	.word	0x08013c87
 800e988:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e98a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e98e:	4553      	cmp	r3, sl
 800e990:	bfa8      	it	ge
 800e992:	4653      	movge	r3, sl
 800e994:	2b00      	cmp	r3, #0
 800e996:	4699      	mov	r9, r3
 800e998:	dc36      	bgt.n	800ea08 <_printf_float+0x360>
 800e99a:	f04f 0b00 	mov.w	fp, #0
 800e99e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e9a2:	f104 021a 	add.w	r2, r4, #26
 800e9a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e9a8:	9306      	str	r3, [sp, #24]
 800e9aa:	eba3 0309 	sub.w	r3, r3, r9
 800e9ae:	455b      	cmp	r3, fp
 800e9b0:	dc31      	bgt.n	800ea16 <_printf_float+0x36e>
 800e9b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9b4:	459a      	cmp	sl, r3
 800e9b6:	dc3a      	bgt.n	800ea2e <_printf_float+0x386>
 800e9b8:	6823      	ldr	r3, [r4, #0]
 800e9ba:	07da      	lsls	r2, r3, #31
 800e9bc:	d437      	bmi.n	800ea2e <_printf_float+0x386>
 800e9be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9c0:	ebaa 0903 	sub.w	r9, sl, r3
 800e9c4:	9b06      	ldr	r3, [sp, #24]
 800e9c6:	ebaa 0303 	sub.w	r3, sl, r3
 800e9ca:	4599      	cmp	r9, r3
 800e9cc:	bfa8      	it	ge
 800e9ce:	4699      	movge	r9, r3
 800e9d0:	f1b9 0f00 	cmp.w	r9, #0
 800e9d4:	dc33      	bgt.n	800ea3e <_printf_float+0x396>
 800e9d6:	f04f 0800 	mov.w	r8, #0
 800e9da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e9de:	f104 0b1a 	add.w	fp, r4, #26
 800e9e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9e4:	ebaa 0303 	sub.w	r3, sl, r3
 800e9e8:	eba3 0309 	sub.w	r3, r3, r9
 800e9ec:	4543      	cmp	r3, r8
 800e9ee:	f77f af79 	ble.w	800e8e4 <_printf_float+0x23c>
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	465a      	mov	r2, fp
 800e9f6:	4631      	mov	r1, r6
 800e9f8:	4628      	mov	r0, r5
 800e9fa:	47b8      	blx	r7
 800e9fc:	3001      	adds	r0, #1
 800e9fe:	f43f aeae 	beq.w	800e75e <_printf_float+0xb6>
 800ea02:	f108 0801 	add.w	r8, r8, #1
 800ea06:	e7ec      	b.n	800e9e2 <_printf_float+0x33a>
 800ea08:	4642      	mov	r2, r8
 800ea0a:	4631      	mov	r1, r6
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	47b8      	blx	r7
 800ea10:	3001      	adds	r0, #1
 800ea12:	d1c2      	bne.n	800e99a <_printf_float+0x2f2>
 800ea14:	e6a3      	b.n	800e75e <_printf_float+0xb6>
 800ea16:	2301      	movs	r3, #1
 800ea18:	4631      	mov	r1, r6
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	9206      	str	r2, [sp, #24]
 800ea1e:	47b8      	blx	r7
 800ea20:	3001      	adds	r0, #1
 800ea22:	f43f ae9c 	beq.w	800e75e <_printf_float+0xb6>
 800ea26:	9a06      	ldr	r2, [sp, #24]
 800ea28:	f10b 0b01 	add.w	fp, fp, #1
 800ea2c:	e7bb      	b.n	800e9a6 <_printf_float+0x2fe>
 800ea2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea32:	4631      	mov	r1, r6
 800ea34:	4628      	mov	r0, r5
 800ea36:	47b8      	blx	r7
 800ea38:	3001      	adds	r0, #1
 800ea3a:	d1c0      	bne.n	800e9be <_printf_float+0x316>
 800ea3c:	e68f      	b.n	800e75e <_printf_float+0xb6>
 800ea3e:	9a06      	ldr	r2, [sp, #24]
 800ea40:	464b      	mov	r3, r9
 800ea42:	4442      	add	r2, r8
 800ea44:	4631      	mov	r1, r6
 800ea46:	4628      	mov	r0, r5
 800ea48:	47b8      	blx	r7
 800ea4a:	3001      	adds	r0, #1
 800ea4c:	d1c3      	bne.n	800e9d6 <_printf_float+0x32e>
 800ea4e:	e686      	b.n	800e75e <_printf_float+0xb6>
 800ea50:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ea54:	f1ba 0f01 	cmp.w	sl, #1
 800ea58:	dc01      	bgt.n	800ea5e <_printf_float+0x3b6>
 800ea5a:	07db      	lsls	r3, r3, #31
 800ea5c:	d536      	bpl.n	800eacc <_printf_float+0x424>
 800ea5e:	2301      	movs	r3, #1
 800ea60:	4642      	mov	r2, r8
 800ea62:	4631      	mov	r1, r6
 800ea64:	4628      	mov	r0, r5
 800ea66:	47b8      	blx	r7
 800ea68:	3001      	adds	r0, #1
 800ea6a:	f43f ae78 	beq.w	800e75e <_printf_float+0xb6>
 800ea6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea72:	4631      	mov	r1, r6
 800ea74:	4628      	mov	r0, r5
 800ea76:	47b8      	blx	r7
 800ea78:	3001      	adds	r0, #1
 800ea7a:	f43f ae70 	beq.w	800e75e <_printf_float+0xb6>
 800ea7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ea82:	2200      	movs	r2, #0
 800ea84:	2300      	movs	r3, #0
 800ea86:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea8a:	f7f2 f81d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea8e:	b9c0      	cbnz	r0, 800eac2 <_printf_float+0x41a>
 800ea90:	4653      	mov	r3, sl
 800ea92:	f108 0201 	add.w	r2, r8, #1
 800ea96:	4631      	mov	r1, r6
 800ea98:	4628      	mov	r0, r5
 800ea9a:	47b8      	blx	r7
 800ea9c:	3001      	adds	r0, #1
 800ea9e:	d10c      	bne.n	800eaba <_printf_float+0x412>
 800eaa0:	e65d      	b.n	800e75e <_printf_float+0xb6>
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	465a      	mov	r2, fp
 800eaa6:	4631      	mov	r1, r6
 800eaa8:	4628      	mov	r0, r5
 800eaaa:	47b8      	blx	r7
 800eaac:	3001      	adds	r0, #1
 800eaae:	f43f ae56 	beq.w	800e75e <_printf_float+0xb6>
 800eab2:	f108 0801 	add.w	r8, r8, #1
 800eab6:	45d0      	cmp	r8, sl
 800eab8:	dbf3      	blt.n	800eaa2 <_printf_float+0x3fa>
 800eaba:	464b      	mov	r3, r9
 800eabc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800eac0:	e6df      	b.n	800e882 <_printf_float+0x1da>
 800eac2:	f04f 0800 	mov.w	r8, #0
 800eac6:	f104 0b1a 	add.w	fp, r4, #26
 800eaca:	e7f4      	b.n	800eab6 <_printf_float+0x40e>
 800eacc:	2301      	movs	r3, #1
 800eace:	4642      	mov	r2, r8
 800ead0:	e7e1      	b.n	800ea96 <_printf_float+0x3ee>
 800ead2:	2301      	movs	r3, #1
 800ead4:	464a      	mov	r2, r9
 800ead6:	4631      	mov	r1, r6
 800ead8:	4628      	mov	r0, r5
 800eada:	47b8      	blx	r7
 800eadc:	3001      	adds	r0, #1
 800eade:	f43f ae3e 	beq.w	800e75e <_printf_float+0xb6>
 800eae2:	f108 0801 	add.w	r8, r8, #1
 800eae6:	68e3      	ldr	r3, [r4, #12]
 800eae8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eaea:	1a5b      	subs	r3, r3, r1
 800eaec:	4543      	cmp	r3, r8
 800eaee:	dcf0      	bgt.n	800ead2 <_printf_float+0x42a>
 800eaf0:	e6fc      	b.n	800e8ec <_printf_float+0x244>
 800eaf2:	f04f 0800 	mov.w	r8, #0
 800eaf6:	f104 0919 	add.w	r9, r4, #25
 800eafa:	e7f4      	b.n	800eae6 <_printf_float+0x43e>

0800eafc <_printf_common>:
 800eafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb00:	4616      	mov	r6, r2
 800eb02:	4698      	mov	r8, r3
 800eb04:	688a      	ldr	r2, [r1, #8]
 800eb06:	690b      	ldr	r3, [r1, #16]
 800eb08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	bfb8      	it	lt
 800eb10:	4613      	movlt	r3, r2
 800eb12:	6033      	str	r3, [r6, #0]
 800eb14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eb18:	4607      	mov	r7, r0
 800eb1a:	460c      	mov	r4, r1
 800eb1c:	b10a      	cbz	r2, 800eb22 <_printf_common+0x26>
 800eb1e:	3301      	adds	r3, #1
 800eb20:	6033      	str	r3, [r6, #0]
 800eb22:	6823      	ldr	r3, [r4, #0]
 800eb24:	0699      	lsls	r1, r3, #26
 800eb26:	bf42      	ittt	mi
 800eb28:	6833      	ldrmi	r3, [r6, #0]
 800eb2a:	3302      	addmi	r3, #2
 800eb2c:	6033      	strmi	r3, [r6, #0]
 800eb2e:	6825      	ldr	r5, [r4, #0]
 800eb30:	f015 0506 	ands.w	r5, r5, #6
 800eb34:	d106      	bne.n	800eb44 <_printf_common+0x48>
 800eb36:	f104 0a19 	add.w	sl, r4, #25
 800eb3a:	68e3      	ldr	r3, [r4, #12]
 800eb3c:	6832      	ldr	r2, [r6, #0]
 800eb3e:	1a9b      	subs	r3, r3, r2
 800eb40:	42ab      	cmp	r3, r5
 800eb42:	dc26      	bgt.n	800eb92 <_printf_common+0x96>
 800eb44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eb48:	6822      	ldr	r2, [r4, #0]
 800eb4a:	3b00      	subs	r3, #0
 800eb4c:	bf18      	it	ne
 800eb4e:	2301      	movne	r3, #1
 800eb50:	0692      	lsls	r2, r2, #26
 800eb52:	d42b      	bmi.n	800ebac <_printf_common+0xb0>
 800eb54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eb58:	4641      	mov	r1, r8
 800eb5a:	4638      	mov	r0, r7
 800eb5c:	47c8      	blx	r9
 800eb5e:	3001      	adds	r0, #1
 800eb60:	d01e      	beq.n	800eba0 <_printf_common+0xa4>
 800eb62:	6823      	ldr	r3, [r4, #0]
 800eb64:	6922      	ldr	r2, [r4, #16]
 800eb66:	f003 0306 	and.w	r3, r3, #6
 800eb6a:	2b04      	cmp	r3, #4
 800eb6c:	bf02      	ittt	eq
 800eb6e:	68e5      	ldreq	r5, [r4, #12]
 800eb70:	6833      	ldreq	r3, [r6, #0]
 800eb72:	1aed      	subeq	r5, r5, r3
 800eb74:	68a3      	ldr	r3, [r4, #8]
 800eb76:	bf0c      	ite	eq
 800eb78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb7c:	2500      	movne	r5, #0
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	bfc4      	itt	gt
 800eb82:	1a9b      	subgt	r3, r3, r2
 800eb84:	18ed      	addgt	r5, r5, r3
 800eb86:	2600      	movs	r6, #0
 800eb88:	341a      	adds	r4, #26
 800eb8a:	42b5      	cmp	r5, r6
 800eb8c:	d11a      	bne.n	800ebc4 <_printf_common+0xc8>
 800eb8e:	2000      	movs	r0, #0
 800eb90:	e008      	b.n	800eba4 <_printf_common+0xa8>
 800eb92:	2301      	movs	r3, #1
 800eb94:	4652      	mov	r2, sl
 800eb96:	4641      	mov	r1, r8
 800eb98:	4638      	mov	r0, r7
 800eb9a:	47c8      	blx	r9
 800eb9c:	3001      	adds	r0, #1
 800eb9e:	d103      	bne.n	800eba8 <_printf_common+0xac>
 800eba0:	f04f 30ff 	mov.w	r0, #4294967295
 800eba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eba8:	3501      	adds	r5, #1
 800ebaa:	e7c6      	b.n	800eb3a <_printf_common+0x3e>
 800ebac:	18e1      	adds	r1, r4, r3
 800ebae:	1c5a      	adds	r2, r3, #1
 800ebb0:	2030      	movs	r0, #48	@ 0x30
 800ebb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ebb6:	4422      	add	r2, r4
 800ebb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ebbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ebc0:	3302      	adds	r3, #2
 800ebc2:	e7c7      	b.n	800eb54 <_printf_common+0x58>
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	4622      	mov	r2, r4
 800ebc8:	4641      	mov	r1, r8
 800ebca:	4638      	mov	r0, r7
 800ebcc:	47c8      	blx	r9
 800ebce:	3001      	adds	r0, #1
 800ebd0:	d0e6      	beq.n	800eba0 <_printf_common+0xa4>
 800ebd2:	3601      	adds	r6, #1
 800ebd4:	e7d9      	b.n	800eb8a <_printf_common+0x8e>
	...

0800ebd8 <_printf_i>:
 800ebd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebdc:	7e0f      	ldrb	r7, [r1, #24]
 800ebde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ebe0:	2f78      	cmp	r7, #120	@ 0x78
 800ebe2:	4691      	mov	r9, r2
 800ebe4:	4680      	mov	r8, r0
 800ebe6:	460c      	mov	r4, r1
 800ebe8:	469a      	mov	sl, r3
 800ebea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ebee:	d807      	bhi.n	800ec00 <_printf_i+0x28>
 800ebf0:	2f62      	cmp	r7, #98	@ 0x62
 800ebf2:	d80a      	bhi.n	800ec0a <_printf_i+0x32>
 800ebf4:	2f00      	cmp	r7, #0
 800ebf6:	f000 80d2 	beq.w	800ed9e <_printf_i+0x1c6>
 800ebfa:	2f58      	cmp	r7, #88	@ 0x58
 800ebfc:	f000 80b9 	beq.w	800ed72 <_printf_i+0x19a>
 800ec00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ec08:	e03a      	b.n	800ec80 <_printf_i+0xa8>
 800ec0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ec0e:	2b15      	cmp	r3, #21
 800ec10:	d8f6      	bhi.n	800ec00 <_printf_i+0x28>
 800ec12:	a101      	add	r1, pc, #4	@ (adr r1, 800ec18 <_printf_i+0x40>)
 800ec14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec18:	0800ec71 	.word	0x0800ec71
 800ec1c:	0800ec85 	.word	0x0800ec85
 800ec20:	0800ec01 	.word	0x0800ec01
 800ec24:	0800ec01 	.word	0x0800ec01
 800ec28:	0800ec01 	.word	0x0800ec01
 800ec2c:	0800ec01 	.word	0x0800ec01
 800ec30:	0800ec85 	.word	0x0800ec85
 800ec34:	0800ec01 	.word	0x0800ec01
 800ec38:	0800ec01 	.word	0x0800ec01
 800ec3c:	0800ec01 	.word	0x0800ec01
 800ec40:	0800ec01 	.word	0x0800ec01
 800ec44:	0800ed85 	.word	0x0800ed85
 800ec48:	0800ecaf 	.word	0x0800ecaf
 800ec4c:	0800ed3f 	.word	0x0800ed3f
 800ec50:	0800ec01 	.word	0x0800ec01
 800ec54:	0800ec01 	.word	0x0800ec01
 800ec58:	0800eda7 	.word	0x0800eda7
 800ec5c:	0800ec01 	.word	0x0800ec01
 800ec60:	0800ecaf 	.word	0x0800ecaf
 800ec64:	0800ec01 	.word	0x0800ec01
 800ec68:	0800ec01 	.word	0x0800ec01
 800ec6c:	0800ed47 	.word	0x0800ed47
 800ec70:	6833      	ldr	r3, [r6, #0]
 800ec72:	1d1a      	adds	r2, r3, #4
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	6032      	str	r2, [r6, #0]
 800ec78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ec80:	2301      	movs	r3, #1
 800ec82:	e09d      	b.n	800edc0 <_printf_i+0x1e8>
 800ec84:	6833      	ldr	r3, [r6, #0]
 800ec86:	6820      	ldr	r0, [r4, #0]
 800ec88:	1d19      	adds	r1, r3, #4
 800ec8a:	6031      	str	r1, [r6, #0]
 800ec8c:	0606      	lsls	r6, r0, #24
 800ec8e:	d501      	bpl.n	800ec94 <_printf_i+0xbc>
 800ec90:	681d      	ldr	r5, [r3, #0]
 800ec92:	e003      	b.n	800ec9c <_printf_i+0xc4>
 800ec94:	0645      	lsls	r5, r0, #25
 800ec96:	d5fb      	bpl.n	800ec90 <_printf_i+0xb8>
 800ec98:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ec9c:	2d00      	cmp	r5, #0
 800ec9e:	da03      	bge.n	800eca8 <_printf_i+0xd0>
 800eca0:	232d      	movs	r3, #45	@ 0x2d
 800eca2:	426d      	negs	r5, r5
 800eca4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eca8:	4859      	ldr	r0, [pc, #356]	@ (800ee10 <_printf_i+0x238>)
 800ecaa:	230a      	movs	r3, #10
 800ecac:	e011      	b.n	800ecd2 <_printf_i+0xfa>
 800ecae:	6821      	ldr	r1, [r4, #0]
 800ecb0:	6833      	ldr	r3, [r6, #0]
 800ecb2:	0608      	lsls	r0, r1, #24
 800ecb4:	f853 5b04 	ldr.w	r5, [r3], #4
 800ecb8:	d402      	bmi.n	800ecc0 <_printf_i+0xe8>
 800ecba:	0649      	lsls	r1, r1, #25
 800ecbc:	bf48      	it	mi
 800ecbe:	b2ad      	uxthmi	r5, r5
 800ecc0:	2f6f      	cmp	r7, #111	@ 0x6f
 800ecc2:	4853      	ldr	r0, [pc, #332]	@ (800ee10 <_printf_i+0x238>)
 800ecc4:	6033      	str	r3, [r6, #0]
 800ecc6:	bf14      	ite	ne
 800ecc8:	230a      	movne	r3, #10
 800ecca:	2308      	moveq	r3, #8
 800eccc:	2100      	movs	r1, #0
 800ecce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ecd2:	6866      	ldr	r6, [r4, #4]
 800ecd4:	60a6      	str	r6, [r4, #8]
 800ecd6:	2e00      	cmp	r6, #0
 800ecd8:	bfa2      	ittt	ge
 800ecda:	6821      	ldrge	r1, [r4, #0]
 800ecdc:	f021 0104 	bicge.w	r1, r1, #4
 800ece0:	6021      	strge	r1, [r4, #0]
 800ece2:	b90d      	cbnz	r5, 800ece8 <_printf_i+0x110>
 800ece4:	2e00      	cmp	r6, #0
 800ece6:	d04b      	beq.n	800ed80 <_printf_i+0x1a8>
 800ece8:	4616      	mov	r6, r2
 800ecea:	fbb5 f1f3 	udiv	r1, r5, r3
 800ecee:	fb03 5711 	mls	r7, r3, r1, r5
 800ecf2:	5dc7      	ldrb	r7, [r0, r7]
 800ecf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ecf8:	462f      	mov	r7, r5
 800ecfa:	42bb      	cmp	r3, r7
 800ecfc:	460d      	mov	r5, r1
 800ecfe:	d9f4      	bls.n	800ecea <_printf_i+0x112>
 800ed00:	2b08      	cmp	r3, #8
 800ed02:	d10b      	bne.n	800ed1c <_printf_i+0x144>
 800ed04:	6823      	ldr	r3, [r4, #0]
 800ed06:	07df      	lsls	r7, r3, #31
 800ed08:	d508      	bpl.n	800ed1c <_printf_i+0x144>
 800ed0a:	6923      	ldr	r3, [r4, #16]
 800ed0c:	6861      	ldr	r1, [r4, #4]
 800ed0e:	4299      	cmp	r1, r3
 800ed10:	bfde      	ittt	le
 800ed12:	2330      	movle	r3, #48	@ 0x30
 800ed14:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed18:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ed1c:	1b92      	subs	r2, r2, r6
 800ed1e:	6122      	str	r2, [r4, #16]
 800ed20:	f8cd a000 	str.w	sl, [sp]
 800ed24:	464b      	mov	r3, r9
 800ed26:	aa03      	add	r2, sp, #12
 800ed28:	4621      	mov	r1, r4
 800ed2a:	4640      	mov	r0, r8
 800ed2c:	f7ff fee6 	bl	800eafc <_printf_common>
 800ed30:	3001      	adds	r0, #1
 800ed32:	d14a      	bne.n	800edca <_printf_i+0x1f2>
 800ed34:	f04f 30ff 	mov.w	r0, #4294967295
 800ed38:	b004      	add	sp, #16
 800ed3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed3e:	6823      	ldr	r3, [r4, #0]
 800ed40:	f043 0320 	orr.w	r3, r3, #32
 800ed44:	6023      	str	r3, [r4, #0]
 800ed46:	4833      	ldr	r0, [pc, #204]	@ (800ee14 <_printf_i+0x23c>)
 800ed48:	2778      	movs	r7, #120	@ 0x78
 800ed4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ed4e:	6823      	ldr	r3, [r4, #0]
 800ed50:	6831      	ldr	r1, [r6, #0]
 800ed52:	061f      	lsls	r7, r3, #24
 800ed54:	f851 5b04 	ldr.w	r5, [r1], #4
 800ed58:	d402      	bmi.n	800ed60 <_printf_i+0x188>
 800ed5a:	065f      	lsls	r7, r3, #25
 800ed5c:	bf48      	it	mi
 800ed5e:	b2ad      	uxthmi	r5, r5
 800ed60:	6031      	str	r1, [r6, #0]
 800ed62:	07d9      	lsls	r1, r3, #31
 800ed64:	bf44      	itt	mi
 800ed66:	f043 0320 	orrmi.w	r3, r3, #32
 800ed6a:	6023      	strmi	r3, [r4, #0]
 800ed6c:	b11d      	cbz	r5, 800ed76 <_printf_i+0x19e>
 800ed6e:	2310      	movs	r3, #16
 800ed70:	e7ac      	b.n	800eccc <_printf_i+0xf4>
 800ed72:	4827      	ldr	r0, [pc, #156]	@ (800ee10 <_printf_i+0x238>)
 800ed74:	e7e9      	b.n	800ed4a <_printf_i+0x172>
 800ed76:	6823      	ldr	r3, [r4, #0]
 800ed78:	f023 0320 	bic.w	r3, r3, #32
 800ed7c:	6023      	str	r3, [r4, #0]
 800ed7e:	e7f6      	b.n	800ed6e <_printf_i+0x196>
 800ed80:	4616      	mov	r6, r2
 800ed82:	e7bd      	b.n	800ed00 <_printf_i+0x128>
 800ed84:	6833      	ldr	r3, [r6, #0]
 800ed86:	6825      	ldr	r5, [r4, #0]
 800ed88:	6961      	ldr	r1, [r4, #20]
 800ed8a:	1d18      	adds	r0, r3, #4
 800ed8c:	6030      	str	r0, [r6, #0]
 800ed8e:	062e      	lsls	r6, r5, #24
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	d501      	bpl.n	800ed98 <_printf_i+0x1c0>
 800ed94:	6019      	str	r1, [r3, #0]
 800ed96:	e002      	b.n	800ed9e <_printf_i+0x1c6>
 800ed98:	0668      	lsls	r0, r5, #25
 800ed9a:	d5fb      	bpl.n	800ed94 <_printf_i+0x1bc>
 800ed9c:	8019      	strh	r1, [r3, #0]
 800ed9e:	2300      	movs	r3, #0
 800eda0:	6123      	str	r3, [r4, #16]
 800eda2:	4616      	mov	r6, r2
 800eda4:	e7bc      	b.n	800ed20 <_printf_i+0x148>
 800eda6:	6833      	ldr	r3, [r6, #0]
 800eda8:	1d1a      	adds	r2, r3, #4
 800edaa:	6032      	str	r2, [r6, #0]
 800edac:	681e      	ldr	r6, [r3, #0]
 800edae:	6862      	ldr	r2, [r4, #4]
 800edb0:	2100      	movs	r1, #0
 800edb2:	4630      	mov	r0, r6
 800edb4:	f7f1 fa0c 	bl	80001d0 <memchr>
 800edb8:	b108      	cbz	r0, 800edbe <_printf_i+0x1e6>
 800edba:	1b80      	subs	r0, r0, r6
 800edbc:	6060      	str	r0, [r4, #4]
 800edbe:	6863      	ldr	r3, [r4, #4]
 800edc0:	6123      	str	r3, [r4, #16]
 800edc2:	2300      	movs	r3, #0
 800edc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800edc8:	e7aa      	b.n	800ed20 <_printf_i+0x148>
 800edca:	6923      	ldr	r3, [r4, #16]
 800edcc:	4632      	mov	r2, r6
 800edce:	4649      	mov	r1, r9
 800edd0:	4640      	mov	r0, r8
 800edd2:	47d0      	blx	sl
 800edd4:	3001      	adds	r0, #1
 800edd6:	d0ad      	beq.n	800ed34 <_printf_i+0x15c>
 800edd8:	6823      	ldr	r3, [r4, #0]
 800edda:	079b      	lsls	r3, r3, #30
 800eddc:	d413      	bmi.n	800ee06 <_printf_i+0x22e>
 800edde:	68e0      	ldr	r0, [r4, #12]
 800ede0:	9b03      	ldr	r3, [sp, #12]
 800ede2:	4298      	cmp	r0, r3
 800ede4:	bfb8      	it	lt
 800ede6:	4618      	movlt	r0, r3
 800ede8:	e7a6      	b.n	800ed38 <_printf_i+0x160>
 800edea:	2301      	movs	r3, #1
 800edec:	4632      	mov	r2, r6
 800edee:	4649      	mov	r1, r9
 800edf0:	4640      	mov	r0, r8
 800edf2:	47d0      	blx	sl
 800edf4:	3001      	adds	r0, #1
 800edf6:	d09d      	beq.n	800ed34 <_printf_i+0x15c>
 800edf8:	3501      	adds	r5, #1
 800edfa:	68e3      	ldr	r3, [r4, #12]
 800edfc:	9903      	ldr	r1, [sp, #12]
 800edfe:	1a5b      	subs	r3, r3, r1
 800ee00:	42ab      	cmp	r3, r5
 800ee02:	dcf2      	bgt.n	800edea <_printf_i+0x212>
 800ee04:	e7eb      	b.n	800edde <_printf_i+0x206>
 800ee06:	2500      	movs	r5, #0
 800ee08:	f104 0619 	add.w	r6, r4, #25
 800ee0c:	e7f5      	b.n	800edfa <_printf_i+0x222>
 800ee0e:	bf00      	nop
 800ee10:	080139fd 	.word	0x080139fd
 800ee14:	08013a0e 	.word	0x08013a0e

0800ee18 <_scanf_float>:
 800ee18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee1c:	b087      	sub	sp, #28
 800ee1e:	4617      	mov	r7, r2
 800ee20:	9303      	str	r3, [sp, #12]
 800ee22:	688b      	ldr	r3, [r1, #8]
 800ee24:	1e5a      	subs	r2, r3, #1
 800ee26:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ee2a:	bf81      	itttt	hi
 800ee2c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ee30:	eb03 0b05 	addhi.w	fp, r3, r5
 800ee34:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ee38:	608b      	strhi	r3, [r1, #8]
 800ee3a:	680b      	ldr	r3, [r1, #0]
 800ee3c:	460a      	mov	r2, r1
 800ee3e:	f04f 0500 	mov.w	r5, #0
 800ee42:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ee46:	f842 3b1c 	str.w	r3, [r2], #28
 800ee4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ee4e:	4680      	mov	r8, r0
 800ee50:	460c      	mov	r4, r1
 800ee52:	bf98      	it	ls
 800ee54:	f04f 0b00 	movls.w	fp, #0
 800ee58:	9201      	str	r2, [sp, #4]
 800ee5a:	4616      	mov	r6, r2
 800ee5c:	46aa      	mov	sl, r5
 800ee5e:	46a9      	mov	r9, r5
 800ee60:	9502      	str	r5, [sp, #8]
 800ee62:	68a2      	ldr	r2, [r4, #8]
 800ee64:	b152      	cbz	r2, 800ee7c <_scanf_float+0x64>
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	2b4e      	cmp	r3, #78	@ 0x4e
 800ee6c:	d864      	bhi.n	800ef38 <_scanf_float+0x120>
 800ee6e:	2b40      	cmp	r3, #64	@ 0x40
 800ee70:	d83c      	bhi.n	800eeec <_scanf_float+0xd4>
 800ee72:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ee76:	b2c8      	uxtb	r0, r1
 800ee78:	280e      	cmp	r0, #14
 800ee7a:	d93a      	bls.n	800eef2 <_scanf_float+0xda>
 800ee7c:	f1b9 0f00 	cmp.w	r9, #0
 800ee80:	d003      	beq.n	800ee8a <_scanf_float+0x72>
 800ee82:	6823      	ldr	r3, [r4, #0]
 800ee84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ee88:	6023      	str	r3, [r4, #0]
 800ee8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee8e:	f1ba 0f01 	cmp.w	sl, #1
 800ee92:	f200 8117 	bhi.w	800f0c4 <_scanf_float+0x2ac>
 800ee96:	9b01      	ldr	r3, [sp, #4]
 800ee98:	429e      	cmp	r6, r3
 800ee9a:	f200 8108 	bhi.w	800f0ae <_scanf_float+0x296>
 800ee9e:	2001      	movs	r0, #1
 800eea0:	b007      	add	sp, #28
 800eea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eea6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800eeaa:	2a0d      	cmp	r2, #13
 800eeac:	d8e6      	bhi.n	800ee7c <_scanf_float+0x64>
 800eeae:	a101      	add	r1, pc, #4	@ (adr r1, 800eeb4 <_scanf_float+0x9c>)
 800eeb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800eeb4:	0800effb 	.word	0x0800effb
 800eeb8:	0800ee7d 	.word	0x0800ee7d
 800eebc:	0800ee7d 	.word	0x0800ee7d
 800eec0:	0800ee7d 	.word	0x0800ee7d
 800eec4:	0800f05b 	.word	0x0800f05b
 800eec8:	0800f033 	.word	0x0800f033
 800eecc:	0800ee7d 	.word	0x0800ee7d
 800eed0:	0800ee7d 	.word	0x0800ee7d
 800eed4:	0800f009 	.word	0x0800f009
 800eed8:	0800ee7d 	.word	0x0800ee7d
 800eedc:	0800ee7d 	.word	0x0800ee7d
 800eee0:	0800ee7d 	.word	0x0800ee7d
 800eee4:	0800ee7d 	.word	0x0800ee7d
 800eee8:	0800efc1 	.word	0x0800efc1
 800eeec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800eef0:	e7db      	b.n	800eeaa <_scanf_float+0x92>
 800eef2:	290e      	cmp	r1, #14
 800eef4:	d8c2      	bhi.n	800ee7c <_scanf_float+0x64>
 800eef6:	a001      	add	r0, pc, #4	@ (adr r0, 800eefc <_scanf_float+0xe4>)
 800eef8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800eefc:	0800efb1 	.word	0x0800efb1
 800ef00:	0800ee7d 	.word	0x0800ee7d
 800ef04:	0800efb1 	.word	0x0800efb1
 800ef08:	0800f047 	.word	0x0800f047
 800ef0c:	0800ee7d 	.word	0x0800ee7d
 800ef10:	0800ef59 	.word	0x0800ef59
 800ef14:	0800ef97 	.word	0x0800ef97
 800ef18:	0800ef97 	.word	0x0800ef97
 800ef1c:	0800ef97 	.word	0x0800ef97
 800ef20:	0800ef97 	.word	0x0800ef97
 800ef24:	0800ef97 	.word	0x0800ef97
 800ef28:	0800ef97 	.word	0x0800ef97
 800ef2c:	0800ef97 	.word	0x0800ef97
 800ef30:	0800ef97 	.word	0x0800ef97
 800ef34:	0800ef97 	.word	0x0800ef97
 800ef38:	2b6e      	cmp	r3, #110	@ 0x6e
 800ef3a:	d809      	bhi.n	800ef50 <_scanf_float+0x138>
 800ef3c:	2b60      	cmp	r3, #96	@ 0x60
 800ef3e:	d8b2      	bhi.n	800eea6 <_scanf_float+0x8e>
 800ef40:	2b54      	cmp	r3, #84	@ 0x54
 800ef42:	d07b      	beq.n	800f03c <_scanf_float+0x224>
 800ef44:	2b59      	cmp	r3, #89	@ 0x59
 800ef46:	d199      	bne.n	800ee7c <_scanf_float+0x64>
 800ef48:	2d07      	cmp	r5, #7
 800ef4a:	d197      	bne.n	800ee7c <_scanf_float+0x64>
 800ef4c:	2508      	movs	r5, #8
 800ef4e:	e02c      	b.n	800efaa <_scanf_float+0x192>
 800ef50:	2b74      	cmp	r3, #116	@ 0x74
 800ef52:	d073      	beq.n	800f03c <_scanf_float+0x224>
 800ef54:	2b79      	cmp	r3, #121	@ 0x79
 800ef56:	e7f6      	b.n	800ef46 <_scanf_float+0x12e>
 800ef58:	6821      	ldr	r1, [r4, #0]
 800ef5a:	05c8      	lsls	r0, r1, #23
 800ef5c:	d51b      	bpl.n	800ef96 <_scanf_float+0x17e>
 800ef5e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ef62:	6021      	str	r1, [r4, #0]
 800ef64:	f109 0901 	add.w	r9, r9, #1
 800ef68:	f1bb 0f00 	cmp.w	fp, #0
 800ef6c:	d003      	beq.n	800ef76 <_scanf_float+0x15e>
 800ef6e:	3201      	adds	r2, #1
 800ef70:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ef74:	60a2      	str	r2, [r4, #8]
 800ef76:	68a3      	ldr	r3, [r4, #8]
 800ef78:	3b01      	subs	r3, #1
 800ef7a:	60a3      	str	r3, [r4, #8]
 800ef7c:	6923      	ldr	r3, [r4, #16]
 800ef7e:	3301      	adds	r3, #1
 800ef80:	6123      	str	r3, [r4, #16]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	3b01      	subs	r3, #1
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	607b      	str	r3, [r7, #4]
 800ef8a:	f340 8087 	ble.w	800f09c <_scanf_float+0x284>
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	3301      	adds	r3, #1
 800ef92:	603b      	str	r3, [r7, #0]
 800ef94:	e765      	b.n	800ee62 <_scanf_float+0x4a>
 800ef96:	eb1a 0105 	adds.w	r1, sl, r5
 800ef9a:	f47f af6f 	bne.w	800ee7c <_scanf_float+0x64>
 800ef9e:	6822      	ldr	r2, [r4, #0]
 800efa0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800efa4:	6022      	str	r2, [r4, #0]
 800efa6:	460d      	mov	r5, r1
 800efa8:	468a      	mov	sl, r1
 800efaa:	f806 3b01 	strb.w	r3, [r6], #1
 800efae:	e7e2      	b.n	800ef76 <_scanf_float+0x15e>
 800efb0:	6822      	ldr	r2, [r4, #0]
 800efb2:	0610      	lsls	r0, r2, #24
 800efb4:	f57f af62 	bpl.w	800ee7c <_scanf_float+0x64>
 800efb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800efbc:	6022      	str	r2, [r4, #0]
 800efbe:	e7f4      	b.n	800efaa <_scanf_float+0x192>
 800efc0:	f1ba 0f00 	cmp.w	sl, #0
 800efc4:	d10e      	bne.n	800efe4 <_scanf_float+0x1cc>
 800efc6:	f1b9 0f00 	cmp.w	r9, #0
 800efca:	d10e      	bne.n	800efea <_scanf_float+0x1d2>
 800efcc:	6822      	ldr	r2, [r4, #0]
 800efce:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800efd2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800efd6:	d108      	bne.n	800efea <_scanf_float+0x1d2>
 800efd8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800efdc:	6022      	str	r2, [r4, #0]
 800efde:	f04f 0a01 	mov.w	sl, #1
 800efe2:	e7e2      	b.n	800efaa <_scanf_float+0x192>
 800efe4:	f1ba 0f02 	cmp.w	sl, #2
 800efe8:	d055      	beq.n	800f096 <_scanf_float+0x27e>
 800efea:	2d01      	cmp	r5, #1
 800efec:	d002      	beq.n	800eff4 <_scanf_float+0x1dc>
 800efee:	2d04      	cmp	r5, #4
 800eff0:	f47f af44 	bne.w	800ee7c <_scanf_float+0x64>
 800eff4:	3501      	adds	r5, #1
 800eff6:	b2ed      	uxtb	r5, r5
 800eff8:	e7d7      	b.n	800efaa <_scanf_float+0x192>
 800effa:	f1ba 0f01 	cmp.w	sl, #1
 800effe:	f47f af3d 	bne.w	800ee7c <_scanf_float+0x64>
 800f002:	f04f 0a02 	mov.w	sl, #2
 800f006:	e7d0      	b.n	800efaa <_scanf_float+0x192>
 800f008:	b97d      	cbnz	r5, 800f02a <_scanf_float+0x212>
 800f00a:	f1b9 0f00 	cmp.w	r9, #0
 800f00e:	f47f af38 	bne.w	800ee82 <_scanf_float+0x6a>
 800f012:	6822      	ldr	r2, [r4, #0]
 800f014:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f018:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f01c:	f040 8108 	bne.w	800f230 <_scanf_float+0x418>
 800f020:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f024:	6022      	str	r2, [r4, #0]
 800f026:	2501      	movs	r5, #1
 800f028:	e7bf      	b.n	800efaa <_scanf_float+0x192>
 800f02a:	2d03      	cmp	r5, #3
 800f02c:	d0e2      	beq.n	800eff4 <_scanf_float+0x1dc>
 800f02e:	2d05      	cmp	r5, #5
 800f030:	e7de      	b.n	800eff0 <_scanf_float+0x1d8>
 800f032:	2d02      	cmp	r5, #2
 800f034:	f47f af22 	bne.w	800ee7c <_scanf_float+0x64>
 800f038:	2503      	movs	r5, #3
 800f03a:	e7b6      	b.n	800efaa <_scanf_float+0x192>
 800f03c:	2d06      	cmp	r5, #6
 800f03e:	f47f af1d 	bne.w	800ee7c <_scanf_float+0x64>
 800f042:	2507      	movs	r5, #7
 800f044:	e7b1      	b.n	800efaa <_scanf_float+0x192>
 800f046:	6822      	ldr	r2, [r4, #0]
 800f048:	0591      	lsls	r1, r2, #22
 800f04a:	f57f af17 	bpl.w	800ee7c <_scanf_float+0x64>
 800f04e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f052:	6022      	str	r2, [r4, #0]
 800f054:	f8cd 9008 	str.w	r9, [sp, #8]
 800f058:	e7a7      	b.n	800efaa <_scanf_float+0x192>
 800f05a:	6822      	ldr	r2, [r4, #0]
 800f05c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f060:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f064:	d006      	beq.n	800f074 <_scanf_float+0x25c>
 800f066:	0550      	lsls	r0, r2, #21
 800f068:	f57f af08 	bpl.w	800ee7c <_scanf_float+0x64>
 800f06c:	f1b9 0f00 	cmp.w	r9, #0
 800f070:	f000 80de 	beq.w	800f230 <_scanf_float+0x418>
 800f074:	0591      	lsls	r1, r2, #22
 800f076:	bf58      	it	pl
 800f078:	9902      	ldrpl	r1, [sp, #8]
 800f07a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f07e:	bf58      	it	pl
 800f080:	eba9 0101 	subpl.w	r1, r9, r1
 800f084:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f088:	bf58      	it	pl
 800f08a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f08e:	6022      	str	r2, [r4, #0]
 800f090:	f04f 0900 	mov.w	r9, #0
 800f094:	e789      	b.n	800efaa <_scanf_float+0x192>
 800f096:	f04f 0a03 	mov.w	sl, #3
 800f09a:	e786      	b.n	800efaa <_scanf_float+0x192>
 800f09c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f0a0:	4639      	mov	r1, r7
 800f0a2:	4640      	mov	r0, r8
 800f0a4:	4798      	blx	r3
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	f43f aedb 	beq.w	800ee62 <_scanf_float+0x4a>
 800f0ac:	e6e6      	b.n	800ee7c <_scanf_float+0x64>
 800f0ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f0b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f0b6:	463a      	mov	r2, r7
 800f0b8:	4640      	mov	r0, r8
 800f0ba:	4798      	blx	r3
 800f0bc:	6923      	ldr	r3, [r4, #16]
 800f0be:	3b01      	subs	r3, #1
 800f0c0:	6123      	str	r3, [r4, #16]
 800f0c2:	e6e8      	b.n	800ee96 <_scanf_float+0x7e>
 800f0c4:	1e6b      	subs	r3, r5, #1
 800f0c6:	2b06      	cmp	r3, #6
 800f0c8:	d824      	bhi.n	800f114 <_scanf_float+0x2fc>
 800f0ca:	2d02      	cmp	r5, #2
 800f0cc:	d836      	bhi.n	800f13c <_scanf_float+0x324>
 800f0ce:	9b01      	ldr	r3, [sp, #4]
 800f0d0:	429e      	cmp	r6, r3
 800f0d2:	f67f aee4 	bls.w	800ee9e <_scanf_float+0x86>
 800f0d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f0da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f0de:	463a      	mov	r2, r7
 800f0e0:	4640      	mov	r0, r8
 800f0e2:	4798      	blx	r3
 800f0e4:	6923      	ldr	r3, [r4, #16]
 800f0e6:	3b01      	subs	r3, #1
 800f0e8:	6123      	str	r3, [r4, #16]
 800f0ea:	e7f0      	b.n	800f0ce <_scanf_float+0x2b6>
 800f0ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f0f0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f0f4:	463a      	mov	r2, r7
 800f0f6:	4640      	mov	r0, r8
 800f0f8:	4798      	blx	r3
 800f0fa:	6923      	ldr	r3, [r4, #16]
 800f0fc:	3b01      	subs	r3, #1
 800f0fe:	6123      	str	r3, [r4, #16]
 800f100:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f104:	fa5f fa8a 	uxtb.w	sl, sl
 800f108:	f1ba 0f02 	cmp.w	sl, #2
 800f10c:	d1ee      	bne.n	800f0ec <_scanf_float+0x2d4>
 800f10e:	3d03      	subs	r5, #3
 800f110:	b2ed      	uxtb	r5, r5
 800f112:	1b76      	subs	r6, r6, r5
 800f114:	6823      	ldr	r3, [r4, #0]
 800f116:	05da      	lsls	r2, r3, #23
 800f118:	d530      	bpl.n	800f17c <_scanf_float+0x364>
 800f11a:	055b      	lsls	r3, r3, #21
 800f11c:	d511      	bpl.n	800f142 <_scanf_float+0x32a>
 800f11e:	9b01      	ldr	r3, [sp, #4]
 800f120:	429e      	cmp	r6, r3
 800f122:	f67f aebc 	bls.w	800ee9e <_scanf_float+0x86>
 800f126:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f12a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f12e:	463a      	mov	r2, r7
 800f130:	4640      	mov	r0, r8
 800f132:	4798      	blx	r3
 800f134:	6923      	ldr	r3, [r4, #16]
 800f136:	3b01      	subs	r3, #1
 800f138:	6123      	str	r3, [r4, #16]
 800f13a:	e7f0      	b.n	800f11e <_scanf_float+0x306>
 800f13c:	46aa      	mov	sl, r5
 800f13e:	46b3      	mov	fp, r6
 800f140:	e7de      	b.n	800f100 <_scanf_float+0x2e8>
 800f142:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f146:	6923      	ldr	r3, [r4, #16]
 800f148:	2965      	cmp	r1, #101	@ 0x65
 800f14a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f14e:	f106 35ff 	add.w	r5, r6, #4294967295
 800f152:	6123      	str	r3, [r4, #16]
 800f154:	d00c      	beq.n	800f170 <_scanf_float+0x358>
 800f156:	2945      	cmp	r1, #69	@ 0x45
 800f158:	d00a      	beq.n	800f170 <_scanf_float+0x358>
 800f15a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f15e:	463a      	mov	r2, r7
 800f160:	4640      	mov	r0, r8
 800f162:	4798      	blx	r3
 800f164:	6923      	ldr	r3, [r4, #16]
 800f166:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f16a:	3b01      	subs	r3, #1
 800f16c:	1eb5      	subs	r5, r6, #2
 800f16e:	6123      	str	r3, [r4, #16]
 800f170:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f174:	463a      	mov	r2, r7
 800f176:	4640      	mov	r0, r8
 800f178:	4798      	blx	r3
 800f17a:	462e      	mov	r6, r5
 800f17c:	6822      	ldr	r2, [r4, #0]
 800f17e:	f012 0210 	ands.w	r2, r2, #16
 800f182:	d001      	beq.n	800f188 <_scanf_float+0x370>
 800f184:	2000      	movs	r0, #0
 800f186:	e68b      	b.n	800eea0 <_scanf_float+0x88>
 800f188:	7032      	strb	r2, [r6, #0]
 800f18a:	6823      	ldr	r3, [r4, #0]
 800f18c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f194:	d11c      	bne.n	800f1d0 <_scanf_float+0x3b8>
 800f196:	9b02      	ldr	r3, [sp, #8]
 800f198:	454b      	cmp	r3, r9
 800f19a:	eba3 0209 	sub.w	r2, r3, r9
 800f19e:	d123      	bne.n	800f1e8 <_scanf_float+0x3d0>
 800f1a0:	9901      	ldr	r1, [sp, #4]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	4640      	mov	r0, r8
 800f1a6:	f002 fe1f 	bl	8011de8 <_strtod_r>
 800f1aa:	9b03      	ldr	r3, [sp, #12]
 800f1ac:	6821      	ldr	r1, [r4, #0]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	f011 0f02 	tst.w	r1, #2
 800f1b4:	ec57 6b10 	vmov	r6, r7, d0
 800f1b8:	f103 0204 	add.w	r2, r3, #4
 800f1bc:	d01f      	beq.n	800f1fe <_scanf_float+0x3e6>
 800f1be:	9903      	ldr	r1, [sp, #12]
 800f1c0:	600a      	str	r2, [r1, #0]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	e9c3 6700 	strd	r6, r7, [r3]
 800f1c8:	68e3      	ldr	r3, [r4, #12]
 800f1ca:	3301      	adds	r3, #1
 800f1cc:	60e3      	str	r3, [r4, #12]
 800f1ce:	e7d9      	b.n	800f184 <_scanf_float+0x36c>
 800f1d0:	9b04      	ldr	r3, [sp, #16]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d0e4      	beq.n	800f1a0 <_scanf_float+0x388>
 800f1d6:	9905      	ldr	r1, [sp, #20]
 800f1d8:	230a      	movs	r3, #10
 800f1da:	3101      	adds	r1, #1
 800f1dc:	4640      	mov	r0, r8
 800f1de:	f7ff f9b7 	bl	800e550 <_strtol_r>
 800f1e2:	9b04      	ldr	r3, [sp, #16]
 800f1e4:	9e05      	ldr	r6, [sp, #20]
 800f1e6:	1ac2      	subs	r2, r0, r3
 800f1e8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f1ec:	429e      	cmp	r6, r3
 800f1ee:	bf28      	it	cs
 800f1f0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f1f4:	4910      	ldr	r1, [pc, #64]	@ (800f238 <_scanf_float+0x420>)
 800f1f6:	4630      	mov	r0, r6
 800f1f8:	f000 fa14 	bl	800f624 <siprintf>
 800f1fc:	e7d0      	b.n	800f1a0 <_scanf_float+0x388>
 800f1fe:	f011 0f04 	tst.w	r1, #4
 800f202:	9903      	ldr	r1, [sp, #12]
 800f204:	600a      	str	r2, [r1, #0]
 800f206:	d1dc      	bne.n	800f1c2 <_scanf_float+0x3aa>
 800f208:	681d      	ldr	r5, [r3, #0]
 800f20a:	4632      	mov	r2, r6
 800f20c:	463b      	mov	r3, r7
 800f20e:	4630      	mov	r0, r6
 800f210:	4639      	mov	r1, r7
 800f212:	f7f1 fc8b 	bl	8000b2c <__aeabi_dcmpun>
 800f216:	b128      	cbz	r0, 800f224 <_scanf_float+0x40c>
 800f218:	4808      	ldr	r0, [pc, #32]	@ (800f23c <_scanf_float+0x424>)
 800f21a:	f000 fbdd 	bl	800f9d8 <nanf>
 800f21e:	ed85 0a00 	vstr	s0, [r5]
 800f222:	e7d1      	b.n	800f1c8 <_scanf_float+0x3b0>
 800f224:	4630      	mov	r0, r6
 800f226:	4639      	mov	r1, r7
 800f228:	f7f1 fcde 	bl	8000be8 <__aeabi_d2f>
 800f22c:	6028      	str	r0, [r5, #0]
 800f22e:	e7cb      	b.n	800f1c8 <_scanf_float+0x3b0>
 800f230:	f04f 0900 	mov.w	r9, #0
 800f234:	e629      	b.n	800ee8a <_scanf_float+0x72>
 800f236:	bf00      	nop
 800f238:	08013a1f 	.word	0x08013a1f
 800f23c:	08013ccf 	.word	0x08013ccf

0800f240 <__sflush_r>:
 800f240:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f248:	0716      	lsls	r6, r2, #28
 800f24a:	4605      	mov	r5, r0
 800f24c:	460c      	mov	r4, r1
 800f24e:	d454      	bmi.n	800f2fa <__sflush_r+0xba>
 800f250:	684b      	ldr	r3, [r1, #4]
 800f252:	2b00      	cmp	r3, #0
 800f254:	dc02      	bgt.n	800f25c <__sflush_r+0x1c>
 800f256:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f258:	2b00      	cmp	r3, #0
 800f25a:	dd48      	ble.n	800f2ee <__sflush_r+0xae>
 800f25c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f25e:	2e00      	cmp	r6, #0
 800f260:	d045      	beq.n	800f2ee <__sflush_r+0xae>
 800f262:	2300      	movs	r3, #0
 800f264:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f268:	682f      	ldr	r7, [r5, #0]
 800f26a:	6a21      	ldr	r1, [r4, #32]
 800f26c:	602b      	str	r3, [r5, #0]
 800f26e:	d030      	beq.n	800f2d2 <__sflush_r+0x92>
 800f270:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f272:	89a3      	ldrh	r3, [r4, #12]
 800f274:	0759      	lsls	r1, r3, #29
 800f276:	d505      	bpl.n	800f284 <__sflush_r+0x44>
 800f278:	6863      	ldr	r3, [r4, #4]
 800f27a:	1ad2      	subs	r2, r2, r3
 800f27c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f27e:	b10b      	cbz	r3, 800f284 <__sflush_r+0x44>
 800f280:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f282:	1ad2      	subs	r2, r2, r3
 800f284:	2300      	movs	r3, #0
 800f286:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f288:	6a21      	ldr	r1, [r4, #32]
 800f28a:	4628      	mov	r0, r5
 800f28c:	47b0      	blx	r6
 800f28e:	1c43      	adds	r3, r0, #1
 800f290:	89a3      	ldrh	r3, [r4, #12]
 800f292:	d106      	bne.n	800f2a2 <__sflush_r+0x62>
 800f294:	6829      	ldr	r1, [r5, #0]
 800f296:	291d      	cmp	r1, #29
 800f298:	d82b      	bhi.n	800f2f2 <__sflush_r+0xb2>
 800f29a:	4a2a      	ldr	r2, [pc, #168]	@ (800f344 <__sflush_r+0x104>)
 800f29c:	410a      	asrs	r2, r1
 800f29e:	07d6      	lsls	r6, r2, #31
 800f2a0:	d427      	bmi.n	800f2f2 <__sflush_r+0xb2>
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	6062      	str	r2, [r4, #4]
 800f2a6:	04d9      	lsls	r1, r3, #19
 800f2a8:	6922      	ldr	r2, [r4, #16]
 800f2aa:	6022      	str	r2, [r4, #0]
 800f2ac:	d504      	bpl.n	800f2b8 <__sflush_r+0x78>
 800f2ae:	1c42      	adds	r2, r0, #1
 800f2b0:	d101      	bne.n	800f2b6 <__sflush_r+0x76>
 800f2b2:	682b      	ldr	r3, [r5, #0]
 800f2b4:	b903      	cbnz	r3, 800f2b8 <__sflush_r+0x78>
 800f2b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f2b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f2ba:	602f      	str	r7, [r5, #0]
 800f2bc:	b1b9      	cbz	r1, 800f2ee <__sflush_r+0xae>
 800f2be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f2c2:	4299      	cmp	r1, r3
 800f2c4:	d002      	beq.n	800f2cc <__sflush_r+0x8c>
 800f2c6:	4628      	mov	r0, r5
 800f2c8:	f001 f9da 	bl	8010680 <_free_r>
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800f2d0:	e00d      	b.n	800f2ee <__sflush_r+0xae>
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	47b0      	blx	r6
 800f2d8:	4602      	mov	r2, r0
 800f2da:	1c50      	adds	r0, r2, #1
 800f2dc:	d1c9      	bne.n	800f272 <__sflush_r+0x32>
 800f2de:	682b      	ldr	r3, [r5, #0]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d0c6      	beq.n	800f272 <__sflush_r+0x32>
 800f2e4:	2b1d      	cmp	r3, #29
 800f2e6:	d001      	beq.n	800f2ec <__sflush_r+0xac>
 800f2e8:	2b16      	cmp	r3, #22
 800f2ea:	d11e      	bne.n	800f32a <__sflush_r+0xea>
 800f2ec:	602f      	str	r7, [r5, #0]
 800f2ee:	2000      	movs	r0, #0
 800f2f0:	e022      	b.n	800f338 <__sflush_r+0xf8>
 800f2f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2f6:	b21b      	sxth	r3, r3
 800f2f8:	e01b      	b.n	800f332 <__sflush_r+0xf2>
 800f2fa:	690f      	ldr	r7, [r1, #16]
 800f2fc:	2f00      	cmp	r7, #0
 800f2fe:	d0f6      	beq.n	800f2ee <__sflush_r+0xae>
 800f300:	0793      	lsls	r3, r2, #30
 800f302:	680e      	ldr	r6, [r1, #0]
 800f304:	bf08      	it	eq
 800f306:	694b      	ldreq	r3, [r1, #20]
 800f308:	600f      	str	r7, [r1, #0]
 800f30a:	bf18      	it	ne
 800f30c:	2300      	movne	r3, #0
 800f30e:	eba6 0807 	sub.w	r8, r6, r7
 800f312:	608b      	str	r3, [r1, #8]
 800f314:	f1b8 0f00 	cmp.w	r8, #0
 800f318:	dde9      	ble.n	800f2ee <__sflush_r+0xae>
 800f31a:	6a21      	ldr	r1, [r4, #32]
 800f31c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f31e:	4643      	mov	r3, r8
 800f320:	463a      	mov	r2, r7
 800f322:	4628      	mov	r0, r5
 800f324:	47b0      	blx	r6
 800f326:	2800      	cmp	r0, #0
 800f328:	dc08      	bgt.n	800f33c <__sflush_r+0xfc>
 800f32a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f32e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f332:	81a3      	strh	r3, [r4, #12]
 800f334:	f04f 30ff 	mov.w	r0, #4294967295
 800f338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f33c:	4407      	add	r7, r0
 800f33e:	eba8 0800 	sub.w	r8, r8, r0
 800f342:	e7e7      	b.n	800f314 <__sflush_r+0xd4>
 800f344:	dfbffffe 	.word	0xdfbffffe

0800f348 <_fflush_r>:
 800f348:	b538      	push	{r3, r4, r5, lr}
 800f34a:	690b      	ldr	r3, [r1, #16]
 800f34c:	4605      	mov	r5, r0
 800f34e:	460c      	mov	r4, r1
 800f350:	b913      	cbnz	r3, 800f358 <_fflush_r+0x10>
 800f352:	2500      	movs	r5, #0
 800f354:	4628      	mov	r0, r5
 800f356:	bd38      	pop	{r3, r4, r5, pc}
 800f358:	b118      	cbz	r0, 800f362 <_fflush_r+0x1a>
 800f35a:	6a03      	ldr	r3, [r0, #32]
 800f35c:	b90b      	cbnz	r3, 800f362 <_fflush_r+0x1a>
 800f35e:	f000 f8bb 	bl	800f4d8 <__sinit>
 800f362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d0f3      	beq.n	800f352 <_fflush_r+0xa>
 800f36a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f36c:	07d0      	lsls	r0, r2, #31
 800f36e:	d404      	bmi.n	800f37a <_fflush_r+0x32>
 800f370:	0599      	lsls	r1, r3, #22
 800f372:	d402      	bmi.n	800f37a <_fflush_r+0x32>
 800f374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f376:	f000 fb1e 	bl	800f9b6 <__retarget_lock_acquire_recursive>
 800f37a:	4628      	mov	r0, r5
 800f37c:	4621      	mov	r1, r4
 800f37e:	f7ff ff5f 	bl	800f240 <__sflush_r>
 800f382:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f384:	07da      	lsls	r2, r3, #31
 800f386:	4605      	mov	r5, r0
 800f388:	d4e4      	bmi.n	800f354 <_fflush_r+0xc>
 800f38a:	89a3      	ldrh	r3, [r4, #12]
 800f38c:	059b      	lsls	r3, r3, #22
 800f38e:	d4e1      	bmi.n	800f354 <_fflush_r+0xc>
 800f390:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f392:	f000 fb11 	bl	800f9b8 <__retarget_lock_release_recursive>
 800f396:	e7dd      	b.n	800f354 <_fflush_r+0xc>

0800f398 <fflush>:
 800f398:	4601      	mov	r1, r0
 800f39a:	b920      	cbnz	r0, 800f3a6 <fflush+0xe>
 800f39c:	4a04      	ldr	r2, [pc, #16]	@ (800f3b0 <fflush+0x18>)
 800f39e:	4905      	ldr	r1, [pc, #20]	@ (800f3b4 <fflush+0x1c>)
 800f3a0:	4805      	ldr	r0, [pc, #20]	@ (800f3b8 <fflush+0x20>)
 800f3a2:	f000 b8b1 	b.w	800f508 <_fwalk_sglue>
 800f3a6:	4b05      	ldr	r3, [pc, #20]	@ (800f3bc <fflush+0x24>)
 800f3a8:	6818      	ldr	r0, [r3, #0]
 800f3aa:	f7ff bfcd 	b.w	800f348 <_fflush_r>
 800f3ae:	bf00      	nop
 800f3b0:	20000190 	.word	0x20000190
 800f3b4:	0800f349 	.word	0x0800f349
 800f3b8:	200001a0 	.word	0x200001a0
 800f3bc:	2000019c 	.word	0x2000019c

0800f3c0 <std>:
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	b510      	push	{r4, lr}
 800f3c4:	4604      	mov	r4, r0
 800f3c6:	e9c0 3300 	strd	r3, r3, [r0]
 800f3ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f3ce:	6083      	str	r3, [r0, #8]
 800f3d0:	8181      	strh	r1, [r0, #12]
 800f3d2:	6643      	str	r3, [r0, #100]	@ 0x64
 800f3d4:	81c2      	strh	r2, [r0, #14]
 800f3d6:	6183      	str	r3, [r0, #24]
 800f3d8:	4619      	mov	r1, r3
 800f3da:	2208      	movs	r2, #8
 800f3dc:	305c      	adds	r0, #92	@ 0x5c
 800f3de:	f000 fa45 	bl	800f86c <memset>
 800f3e2:	4b0d      	ldr	r3, [pc, #52]	@ (800f418 <std+0x58>)
 800f3e4:	6263      	str	r3, [r4, #36]	@ 0x24
 800f3e6:	4b0d      	ldr	r3, [pc, #52]	@ (800f41c <std+0x5c>)
 800f3e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f3ea:	4b0d      	ldr	r3, [pc, #52]	@ (800f420 <std+0x60>)
 800f3ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f3ee:	4b0d      	ldr	r3, [pc, #52]	@ (800f424 <std+0x64>)
 800f3f0:	6323      	str	r3, [r4, #48]	@ 0x30
 800f3f2:	4b0d      	ldr	r3, [pc, #52]	@ (800f428 <std+0x68>)
 800f3f4:	6224      	str	r4, [r4, #32]
 800f3f6:	429c      	cmp	r4, r3
 800f3f8:	d006      	beq.n	800f408 <std+0x48>
 800f3fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f3fe:	4294      	cmp	r4, r2
 800f400:	d002      	beq.n	800f408 <std+0x48>
 800f402:	33d0      	adds	r3, #208	@ 0xd0
 800f404:	429c      	cmp	r4, r3
 800f406:	d105      	bne.n	800f414 <std+0x54>
 800f408:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f410:	f000 bad0 	b.w	800f9b4 <__retarget_lock_init_recursive>
 800f414:	bd10      	pop	{r4, pc}
 800f416:	bf00      	nop
 800f418:	0800f6b9 	.word	0x0800f6b9
 800f41c:	0800f6df 	.word	0x0800f6df
 800f420:	0800f717 	.word	0x0800f717
 800f424:	0800f73b 	.word	0x0800f73b
 800f428:	20002114 	.word	0x20002114

0800f42c <stdio_exit_handler>:
 800f42c:	4a02      	ldr	r2, [pc, #8]	@ (800f438 <stdio_exit_handler+0xc>)
 800f42e:	4903      	ldr	r1, [pc, #12]	@ (800f43c <stdio_exit_handler+0x10>)
 800f430:	4803      	ldr	r0, [pc, #12]	@ (800f440 <stdio_exit_handler+0x14>)
 800f432:	f000 b869 	b.w	800f508 <_fwalk_sglue>
 800f436:	bf00      	nop
 800f438:	20000190 	.word	0x20000190
 800f43c:	0800f349 	.word	0x0800f349
 800f440:	200001a0 	.word	0x200001a0

0800f444 <cleanup_stdio>:
 800f444:	6841      	ldr	r1, [r0, #4]
 800f446:	4b0c      	ldr	r3, [pc, #48]	@ (800f478 <cleanup_stdio+0x34>)
 800f448:	4299      	cmp	r1, r3
 800f44a:	b510      	push	{r4, lr}
 800f44c:	4604      	mov	r4, r0
 800f44e:	d001      	beq.n	800f454 <cleanup_stdio+0x10>
 800f450:	f7ff ff7a 	bl	800f348 <_fflush_r>
 800f454:	68a1      	ldr	r1, [r4, #8]
 800f456:	4b09      	ldr	r3, [pc, #36]	@ (800f47c <cleanup_stdio+0x38>)
 800f458:	4299      	cmp	r1, r3
 800f45a:	d002      	beq.n	800f462 <cleanup_stdio+0x1e>
 800f45c:	4620      	mov	r0, r4
 800f45e:	f7ff ff73 	bl	800f348 <_fflush_r>
 800f462:	68e1      	ldr	r1, [r4, #12]
 800f464:	4b06      	ldr	r3, [pc, #24]	@ (800f480 <cleanup_stdio+0x3c>)
 800f466:	4299      	cmp	r1, r3
 800f468:	d004      	beq.n	800f474 <cleanup_stdio+0x30>
 800f46a:	4620      	mov	r0, r4
 800f46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f470:	f7ff bf6a 	b.w	800f348 <_fflush_r>
 800f474:	bd10      	pop	{r4, pc}
 800f476:	bf00      	nop
 800f478:	20002114 	.word	0x20002114
 800f47c:	2000217c 	.word	0x2000217c
 800f480:	200021e4 	.word	0x200021e4

0800f484 <global_stdio_init.part.0>:
 800f484:	b510      	push	{r4, lr}
 800f486:	4b0b      	ldr	r3, [pc, #44]	@ (800f4b4 <global_stdio_init.part.0+0x30>)
 800f488:	4c0b      	ldr	r4, [pc, #44]	@ (800f4b8 <global_stdio_init.part.0+0x34>)
 800f48a:	4a0c      	ldr	r2, [pc, #48]	@ (800f4bc <global_stdio_init.part.0+0x38>)
 800f48c:	601a      	str	r2, [r3, #0]
 800f48e:	4620      	mov	r0, r4
 800f490:	2200      	movs	r2, #0
 800f492:	2104      	movs	r1, #4
 800f494:	f7ff ff94 	bl	800f3c0 <std>
 800f498:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f49c:	2201      	movs	r2, #1
 800f49e:	2109      	movs	r1, #9
 800f4a0:	f7ff ff8e 	bl	800f3c0 <std>
 800f4a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f4a8:	2202      	movs	r2, #2
 800f4aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4ae:	2112      	movs	r1, #18
 800f4b0:	f7ff bf86 	b.w	800f3c0 <std>
 800f4b4:	2000224c 	.word	0x2000224c
 800f4b8:	20002114 	.word	0x20002114
 800f4bc:	0800f42d 	.word	0x0800f42d

0800f4c0 <__sfp_lock_acquire>:
 800f4c0:	4801      	ldr	r0, [pc, #4]	@ (800f4c8 <__sfp_lock_acquire+0x8>)
 800f4c2:	f000 ba78 	b.w	800f9b6 <__retarget_lock_acquire_recursive>
 800f4c6:	bf00      	nop
 800f4c8:	20002255 	.word	0x20002255

0800f4cc <__sfp_lock_release>:
 800f4cc:	4801      	ldr	r0, [pc, #4]	@ (800f4d4 <__sfp_lock_release+0x8>)
 800f4ce:	f000 ba73 	b.w	800f9b8 <__retarget_lock_release_recursive>
 800f4d2:	bf00      	nop
 800f4d4:	20002255 	.word	0x20002255

0800f4d8 <__sinit>:
 800f4d8:	b510      	push	{r4, lr}
 800f4da:	4604      	mov	r4, r0
 800f4dc:	f7ff fff0 	bl	800f4c0 <__sfp_lock_acquire>
 800f4e0:	6a23      	ldr	r3, [r4, #32]
 800f4e2:	b11b      	cbz	r3, 800f4ec <__sinit+0x14>
 800f4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4e8:	f7ff bff0 	b.w	800f4cc <__sfp_lock_release>
 800f4ec:	4b04      	ldr	r3, [pc, #16]	@ (800f500 <__sinit+0x28>)
 800f4ee:	6223      	str	r3, [r4, #32]
 800f4f0:	4b04      	ldr	r3, [pc, #16]	@ (800f504 <__sinit+0x2c>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d1f5      	bne.n	800f4e4 <__sinit+0xc>
 800f4f8:	f7ff ffc4 	bl	800f484 <global_stdio_init.part.0>
 800f4fc:	e7f2      	b.n	800f4e4 <__sinit+0xc>
 800f4fe:	bf00      	nop
 800f500:	0800f445 	.word	0x0800f445
 800f504:	2000224c 	.word	0x2000224c

0800f508 <_fwalk_sglue>:
 800f508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f50c:	4607      	mov	r7, r0
 800f50e:	4688      	mov	r8, r1
 800f510:	4614      	mov	r4, r2
 800f512:	2600      	movs	r6, #0
 800f514:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f518:	f1b9 0901 	subs.w	r9, r9, #1
 800f51c:	d505      	bpl.n	800f52a <_fwalk_sglue+0x22>
 800f51e:	6824      	ldr	r4, [r4, #0]
 800f520:	2c00      	cmp	r4, #0
 800f522:	d1f7      	bne.n	800f514 <_fwalk_sglue+0xc>
 800f524:	4630      	mov	r0, r6
 800f526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f52a:	89ab      	ldrh	r3, [r5, #12]
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d907      	bls.n	800f540 <_fwalk_sglue+0x38>
 800f530:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f534:	3301      	adds	r3, #1
 800f536:	d003      	beq.n	800f540 <_fwalk_sglue+0x38>
 800f538:	4629      	mov	r1, r5
 800f53a:	4638      	mov	r0, r7
 800f53c:	47c0      	blx	r8
 800f53e:	4306      	orrs	r6, r0
 800f540:	3568      	adds	r5, #104	@ 0x68
 800f542:	e7e9      	b.n	800f518 <_fwalk_sglue+0x10>

0800f544 <iprintf>:
 800f544:	b40f      	push	{r0, r1, r2, r3}
 800f546:	b507      	push	{r0, r1, r2, lr}
 800f548:	4906      	ldr	r1, [pc, #24]	@ (800f564 <iprintf+0x20>)
 800f54a:	ab04      	add	r3, sp, #16
 800f54c:	6808      	ldr	r0, [r1, #0]
 800f54e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f552:	6881      	ldr	r1, [r0, #8]
 800f554:	9301      	str	r3, [sp, #4]
 800f556:	f002 ff9b 	bl	8012490 <_vfiprintf_r>
 800f55a:	b003      	add	sp, #12
 800f55c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f560:	b004      	add	sp, #16
 800f562:	4770      	bx	lr
 800f564:	2000019c 	.word	0x2000019c

0800f568 <_puts_r>:
 800f568:	6a03      	ldr	r3, [r0, #32]
 800f56a:	b570      	push	{r4, r5, r6, lr}
 800f56c:	6884      	ldr	r4, [r0, #8]
 800f56e:	4605      	mov	r5, r0
 800f570:	460e      	mov	r6, r1
 800f572:	b90b      	cbnz	r3, 800f578 <_puts_r+0x10>
 800f574:	f7ff ffb0 	bl	800f4d8 <__sinit>
 800f578:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f57a:	07db      	lsls	r3, r3, #31
 800f57c:	d405      	bmi.n	800f58a <_puts_r+0x22>
 800f57e:	89a3      	ldrh	r3, [r4, #12]
 800f580:	0598      	lsls	r0, r3, #22
 800f582:	d402      	bmi.n	800f58a <_puts_r+0x22>
 800f584:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f586:	f000 fa16 	bl	800f9b6 <__retarget_lock_acquire_recursive>
 800f58a:	89a3      	ldrh	r3, [r4, #12]
 800f58c:	0719      	lsls	r1, r3, #28
 800f58e:	d502      	bpl.n	800f596 <_puts_r+0x2e>
 800f590:	6923      	ldr	r3, [r4, #16]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d135      	bne.n	800f602 <_puts_r+0x9a>
 800f596:	4621      	mov	r1, r4
 800f598:	4628      	mov	r0, r5
 800f59a:	f000 f911 	bl	800f7c0 <__swsetup_r>
 800f59e:	b380      	cbz	r0, 800f602 <_puts_r+0x9a>
 800f5a0:	f04f 35ff 	mov.w	r5, #4294967295
 800f5a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f5a6:	07da      	lsls	r2, r3, #31
 800f5a8:	d405      	bmi.n	800f5b6 <_puts_r+0x4e>
 800f5aa:	89a3      	ldrh	r3, [r4, #12]
 800f5ac:	059b      	lsls	r3, r3, #22
 800f5ae:	d402      	bmi.n	800f5b6 <_puts_r+0x4e>
 800f5b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5b2:	f000 fa01 	bl	800f9b8 <__retarget_lock_release_recursive>
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	bd70      	pop	{r4, r5, r6, pc}
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	da04      	bge.n	800f5c8 <_puts_r+0x60>
 800f5be:	69a2      	ldr	r2, [r4, #24]
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	dc17      	bgt.n	800f5f4 <_puts_r+0x8c>
 800f5c4:	290a      	cmp	r1, #10
 800f5c6:	d015      	beq.n	800f5f4 <_puts_r+0x8c>
 800f5c8:	6823      	ldr	r3, [r4, #0]
 800f5ca:	1c5a      	adds	r2, r3, #1
 800f5cc:	6022      	str	r2, [r4, #0]
 800f5ce:	7019      	strb	r1, [r3, #0]
 800f5d0:	68a3      	ldr	r3, [r4, #8]
 800f5d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f5d6:	3b01      	subs	r3, #1
 800f5d8:	60a3      	str	r3, [r4, #8]
 800f5da:	2900      	cmp	r1, #0
 800f5dc:	d1ed      	bne.n	800f5ba <_puts_r+0x52>
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	da11      	bge.n	800f606 <_puts_r+0x9e>
 800f5e2:	4622      	mov	r2, r4
 800f5e4:	210a      	movs	r1, #10
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	f000 f8ab 	bl	800f742 <__swbuf_r>
 800f5ec:	3001      	adds	r0, #1
 800f5ee:	d0d7      	beq.n	800f5a0 <_puts_r+0x38>
 800f5f0:	250a      	movs	r5, #10
 800f5f2:	e7d7      	b.n	800f5a4 <_puts_r+0x3c>
 800f5f4:	4622      	mov	r2, r4
 800f5f6:	4628      	mov	r0, r5
 800f5f8:	f000 f8a3 	bl	800f742 <__swbuf_r>
 800f5fc:	3001      	adds	r0, #1
 800f5fe:	d1e7      	bne.n	800f5d0 <_puts_r+0x68>
 800f600:	e7ce      	b.n	800f5a0 <_puts_r+0x38>
 800f602:	3e01      	subs	r6, #1
 800f604:	e7e4      	b.n	800f5d0 <_puts_r+0x68>
 800f606:	6823      	ldr	r3, [r4, #0]
 800f608:	1c5a      	adds	r2, r3, #1
 800f60a:	6022      	str	r2, [r4, #0]
 800f60c:	220a      	movs	r2, #10
 800f60e:	701a      	strb	r2, [r3, #0]
 800f610:	e7ee      	b.n	800f5f0 <_puts_r+0x88>
	...

0800f614 <puts>:
 800f614:	4b02      	ldr	r3, [pc, #8]	@ (800f620 <puts+0xc>)
 800f616:	4601      	mov	r1, r0
 800f618:	6818      	ldr	r0, [r3, #0]
 800f61a:	f7ff bfa5 	b.w	800f568 <_puts_r>
 800f61e:	bf00      	nop
 800f620:	2000019c 	.word	0x2000019c

0800f624 <siprintf>:
 800f624:	b40e      	push	{r1, r2, r3}
 800f626:	b500      	push	{lr}
 800f628:	b09c      	sub	sp, #112	@ 0x70
 800f62a:	ab1d      	add	r3, sp, #116	@ 0x74
 800f62c:	9002      	str	r0, [sp, #8]
 800f62e:	9006      	str	r0, [sp, #24]
 800f630:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f634:	4809      	ldr	r0, [pc, #36]	@ (800f65c <siprintf+0x38>)
 800f636:	9107      	str	r1, [sp, #28]
 800f638:	9104      	str	r1, [sp, #16]
 800f63a:	4909      	ldr	r1, [pc, #36]	@ (800f660 <siprintf+0x3c>)
 800f63c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f640:	9105      	str	r1, [sp, #20]
 800f642:	6800      	ldr	r0, [r0, #0]
 800f644:	9301      	str	r3, [sp, #4]
 800f646:	a902      	add	r1, sp, #8
 800f648:	f002 fc30 	bl	8011eac <_svfiprintf_r>
 800f64c:	9b02      	ldr	r3, [sp, #8]
 800f64e:	2200      	movs	r2, #0
 800f650:	701a      	strb	r2, [r3, #0]
 800f652:	b01c      	add	sp, #112	@ 0x70
 800f654:	f85d eb04 	ldr.w	lr, [sp], #4
 800f658:	b003      	add	sp, #12
 800f65a:	4770      	bx	lr
 800f65c:	2000019c 	.word	0x2000019c
 800f660:	ffff0208 	.word	0xffff0208

0800f664 <siscanf>:
 800f664:	b40e      	push	{r1, r2, r3}
 800f666:	b530      	push	{r4, r5, lr}
 800f668:	b09c      	sub	sp, #112	@ 0x70
 800f66a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f66c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f670:	f854 5b04 	ldr.w	r5, [r4], #4
 800f674:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f678:	9002      	str	r0, [sp, #8]
 800f67a:	9006      	str	r0, [sp, #24]
 800f67c:	f7f0 fdf8 	bl	8000270 <strlen>
 800f680:	4b0b      	ldr	r3, [pc, #44]	@ (800f6b0 <siscanf+0x4c>)
 800f682:	9003      	str	r0, [sp, #12]
 800f684:	9007      	str	r0, [sp, #28]
 800f686:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f688:	480a      	ldr	r0, [pc, #40]	@ (800f6b4 <siscanf+0x50>)
 800f68a:	9401      	str	r4, [sp, #4]
 800f68c:	2300      	movs	r3, #0
 800f68e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f690:	9314      	str	r3, [sp, #80]	@ 0x50
 800f692:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f696:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f69a:	462a      	mov	r2, r5
 800f69c:	4623      	mov	r3, r4
 800f69e:	a902      	add	r1, sp, #8
 800f6a0:	6800      	ldr	r0, [r0, #0]
 800f6a2:	f002 fd57 	bl	8012154 <__ssvfiscanf_r>
 800f6a6:	b01c      	add	sp, #112	@ 0x70
 800f6a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6ac:	b003      	add	sp, #12
 800f6ae:	4770      	bx	lr
 800f6b0:	0800f6db 	.word	0x0800f6db
 800f6b4:	2000019c 	.word	0x2000019c

0800f6b8 <__sread>:
 800f6b8:	b510      	push	{r4, lr}
 800f6ba:	460c      	mov	r4, r1
 800f6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6c0:	f000 f92a 	bl	800f918 <_read_r>
 800f6c4:	2800      	cmp	r0, #0
 800f6c6:	bfab      	itete	ge
 800f6c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f6ca:	89a3      	ldrhlt	r3, [r4, #12]
 800f6cc:	181b      	addge	r3, r3, r0
 800f6ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f6d2:	bfac      	ite	ge
 800f6d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f6d6:	81a3      	strhlt	r3, [r4, #12]
 800f6d8:	bd10      	pop	{r4, pc}

0800f6da <__seofread>:
 800f6da:	2000      	movs	r0, #0
 800f6dc:	4770      	bx	lr

0800f6de <__swrite>:
 800f6de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e2:	461f      	mov	r7, r3
 800f6e4:	898b      	ldrh	r3, [r1, #12]
 800f6e6:	05db      	lsls	r3, r3, #23
 800f6e8:	4605      	mov	r5, r0
 800f6ea:	460c      	mov	r4, r1
 800f6ec:	4616      	mov	r6, r2
 800f6ee:	d505      	bpl.n	800f6fc <__swrite+0x1e>
 800f6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6f4:	2302      	movs	r3, #2
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	f000 f8fc 	bl	800f8f4 <_lseek_r>
 800f6fc:	89a3      	ldrh	r3, [r4, #12]
 800f6fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f702:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f706:	81a3      	strh	r3, [r4, #12]
 800f708:	4632      	mov	r2, r6
 800f70a:	463b      	mov	r3, r7
 800f70c:	4628      	mov	r0, r5
 800f70e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f712:	f000 b913 	b.w	800f93c <_write_r>

0800f716 <__sseek>:
 800f716:	b510      	push	{r4, lr}
 800f718:	460c      	mov	r4, r1
 800f71a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f71e:	f000 f8e9 	bl	800f8f4 <_lseek_r>
 800f722:	1c43      	adds	r3, r0, #1
 800f724:	89a3      	ldrh	r3, [r4, #12]
 800f726:	bf15      	itete	ne
 800f728:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f72a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f72e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f732:	81a3      	strheq	r3, [r4, #12]
 800f734:	bf18      	it	ne
 800f736:	81a3      	strhne	r3, [r4, #12]
 800f738:	bd10      	pop	{r4, pc}

0800f73a <__sclose>:
 800f73a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f73e:	f000 b8c9 	b.w	800f8d4 <_close_r>

0800f742 <__swbuf_r>:
 800f742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f744:	460e      	mov	r6, r1
 800f746:	4614      	mov	r4, r2
 800f748:	4605      	mov	r5, r0
 800f74a:	b118      	cbz	r0, 800f754 <__swbuf_r+0x12>
 800f74c:	6a03      	ldr	r3, [r0, #32]
 800f74e:	b90b      	cbnz	r3, 800f754 <__swbuf_r+0x12>
 800f750:	f7ff fec2 	bl	800f4d8 <__sinit>
 800f754:	69a3      	ldr	r3, [r4, #24]
 800f756:	60a3      	str	r3, [r4, #8]
 800f758:	89a3      	ldrh	r3, [r4, #12]
 800f75a:	071a      	lsls	r2, r3, #28
 800f75c:	d501      	bpl.n	800f762 <__swbuf_r+0x20>
 800f75e:	6923      	ldr	r3, [r4, #16]
 800f760:	b943      	cbnz	r3, 800f774 <__swbuf_r+0x32>
 800f762:	4621      	mov	r1, r4
 800f764:	4628      	mov	r0, r5
 800f766:	f000 f82b 	bl	800f7c0 <__swsetup_r>
 800f76a:	b118      	cbz	r0, 800f774 <__swbuf_r+0x32>
 800f76c:	f04f 37ff 	mov.w	r7, #4294967295
 800f770:	4638      	mov	r0, r7
 800f772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f774:	6823      	ldr	r3, [r4, #0]
 800f776:	6922      	ldr	r2, [r4, #16]
 800f778:	1a98      	subs	r0, r3, r2
 800f77a:	6963      	ldr	r3, [r4, #20]
 800f77c:	b2f6      	uxtb	r6, r6
 800f77e:	4283      	cmp	r3, r0
 800f780:	4637      	mov	r7, r6
 800f782:	dc05      	bgt.n	800f790 <__swbuf_r+0x4e>
 800f784:	4621      	mov	r1, r4
 800f786:	4628      	mov	r0, r5
 800f788:	f7ff fdde 	bl	800f348 <_fflush_r>
 800f78c:	2800      	cmp	r0, #0
 800f78e:	d1ed      	bne.n	800f76c <__swbuf_r+0x2a>
 800f790:	68a3      	ldr	r3, [r4, #8]
 800f792:	3b01      	subs	r3, #1
 800f794:	60a3      	str	r3, [r4, #8]
 800f796:	6823      	ldr	r3, [r4, #0]
 800f798:	1c5a      	adds	r2, r3, #1
 800f79a:	6022      	str	r2, [r4, #0]
 800f79c:	701e      	strb	r6, [r3, #0]
 800f79e:	6962      	ldr	r2, [r4, #20]
 800f7a0:	1c43      	adds	r3, r0, #1
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d004      	beq.n	800f7b0 <__swbuf_r+0x6e>
 800f7a6:	89a3      	ldrh	r3, [r4, #12]
 800f7a8:	07db      	lsls	r3, r3, #31
 800f7aa:	d5e1      	bpl.n	800f770 <__swbuf_r+0x2e>
 800f7ac:	2e0a      	cmp	r6, #10
 800f7ae:	d1df      	bne.n	800f770 <__swbuf_r+0x2e>
 800f7b0:	4621      	mov	r1, r4
 800f7b2:	4628      	mov	r0, r5
 800f7b4:	f7ff fdc8 	bl	800f348 <_fflush_r>
 800f7b8:	2800      	cmp	r0, #0
 800f7ba:	d0d9      	beq.n	800f770 <__swbuf_r+0x2e>
 800f7bc:	e7d6      	b.n	800f76c <__swbuf_r+0x2a>
	...

0800f7c0 <__swsetup_r>:
 800f7c0:	b538      	push	{r3, r4, r5, lr}
 800f7c2:	4b29      	ldr	r3, [pc, #164]	@ (800f868 <__swsetup_r+0xa8>)
 800f7c4:	4605      	mov	r5, r0
 800f7c6:	6818      	ldr	r0, [r3, #0]
 800f7c8:	460c      	mov	r4, r1
 800f7ca:	b118      	cbz	r0, 800f7d4 <__swsetup_r+0x14>
 800f7cc:	6a03      	ldr	r3, [r0, #32]
 800f7ce:	b90b      	cbnz	r3, 800f7d4 <__swsetup_r+0x14>
 800f7d0:	f7ff fe82 	bl	800f4d8 <__sinit>
 800f7d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7d8:	0719      	lsls	r1, r3, #28
 800f7da:	d422      	bmi.n	800f822 <__swsetup_r+0x62>
 800f7dc:	06da      	lsls	r2, r3, #27
 800f7de:	d407      	bmi.n	800f7f0 <__swsetup_r+0x30>
 800f7e0:	2209      	movs	r2, #9
 800f7e2:	602a      	str	r2, [r5, #0]
 800f7e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7e8:	81a3      	strh	r3, [r4, #12]
 800f7ea:	f04f 30ff 	mov.w	r0, #4294967295
 800f7ee:	e033      	b.n	800f858 <__swsetup_r+0x98>
 800f7f0:	0758      	lsls	r0, r3, #29
 800f7f2:	d512      	bpl.n	800f81a <__swsetup_r+0x5a>
 800f7f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f7f6:	b141      	cbz	r1, 800f80a <__swsetup_r+0x4a>
 800f7f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f7fc:	4299      	cmp	r1, r3
 800f7fe:	d002      	beq.n	800f806 <__swsetup_r+0x46>
 800f800:	4628      	mov	r0, r5
 800f802:	f000 ff3d 	bl	8010680 <_free_r>
 800f806:	2300      	movs	r3, #0
 800f808:	6363      	str	r3, [r4, #52]	@ 0x34
 800f80a:	89a3      	ldrh	r3, [r4, #12]
 800f80c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f810:	81a3      	strh	r3, [r4, #12]
 800f812:	2300      	movs	r3, #0
 800f814:	6063      	str	r3, [r4, #4]
 800f816:	6923      	ldr	r3, [r4, #16]
 800f818:	6023      	str	r3, [r4, #0]
 800f81a:	89a3      	ldrh	r3, [r4, #12]
 800f81c:	f043 0308 	orr.w	r3, r3, #8
 800f820:	81a3      	strh	r3, [r4, #12]
 800f822:	6923      	ldr	r3, [r4, #16]
 800f824:	b94b      	cbnz	r3, 800f83a <__swsetup_r+0x7a>
 800f826:	89a3      	ldrh	r3, [r4, #12]
 800f828:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f82c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f830:	d003      	beq.n	800f83a <__swsetup_r+0x7a>
 800f832:	4621      	mov	r1, r4
 800f834:	4628      	mov	r0, r5
 800f836:	f003 f8b7 	bl	80129a8 <__smakebuf_r>
 800f83a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f83e:	f013 0201 	ands.w	r2, r3, #1
 800f842:	d00a      	beq.n	800f85a <__swsetup_r+0x9a>
 800f844:	2200      	movs	r2, #0
 800f846:	60a2      	str	r2, [r4, #8]
 800f848:	6962      	ldr	r2, [r4, #20]
 800f84a:	4252      	negs	r2, r2
 800f84c:	61a2      	str	r2, [r4, #24]
 800f84e:	6922      	ldr	r2, [r4, #16]
 800f850:	b942      	cbnz	r2, 800f864 <__swsetup_r+0xa4>
 800f852:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f856:	d1c5      	bne.n	800f7e4 <__swsetup_r+0x24>
 800f858:	bd38      	pop	{r3, r4, r5, pc}
 800f85a:	0799      	lsls	r1, r3, #30
 800f85c:	bf58      	it	pl
 800f85e:	6962      	ldrpl	r2, [r4, #20]
 800f860:	60a2      	str	r2, [r4, #8]
 800f862:	e7f4      	b.n	800f84e <__swsetup_r+0x8e>
 800f864:	2000      	movs	r0, #0
 800f866:	e7f7      	b.n	800f858 <__swsetup_r+0x98>
 800f868:	2000019c 	.word	0x2000019c

0800f86c <memset>:
 800f86c:	4402      	add	r2, r0
 800f86e:	4603      	mov	r3, r0
 800f870:	4293      	cmp	r3, r2
 800f872:	d100      	bne.n	800f876 <memset+0xa>
 800f874:	4770      	bx	lr
 800f876:	f803 1b01 	strb.w	r1, [r3], #1
 800f87a:	e7f9      	b.n	800f870 <memset+0x4>

0800f87c <strncmp>:
 800f87c:	b510      	push	{r4, lr}
 800f87e:	b16a      	cbz	r2, 800f89c <strncmp+0x20>
 800f880:	3901      	subs	r1, #1
 800f882:	1884      	adds	r4, r0, r2
 800f884:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f888:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d103      	bne.n	800f898 <strncmp+0x1c>
 800f890:	42a0      	cmp	r0, r4
 800f892:	d001      	beq.n	800f898 <strncmp+0x1c>
 800f894:	2a00      	cmp	r2, #0
 800f896:	d1f5      	bne.n	800f884 <strncmp+0x8>
 800f898:	1ad0      	subs	r0, r2, r3
 800f89a:	bd10      	pop	{r4, pc}
 800f89c:	4610      	mov	r0, r2
 800f89e:	e7fc      	b.n	800f89a <strncmp+0x1e>

0800f8a0 <strstr>:
 800f8a0:	780a      	ldrb	r2, [r1, #0]
 800f8a2:	b570      	push	{r4, r5, r6, lr}
 800f8a4:	b96a      	cbnz	r2, 800f8c2 <strstr+0x22>
 800f8a6:	bd70      	pop	{r4, r5, r6, pc}
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d109      	bne.n	800f8c0 <strstr+0x20>
 800f8ac:	460c      	mov	r4, r1
 800f8ae:	4605      	mov	r5, r0
 800f8b0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d0f6      	beq.n	800f8a6 <strstr+0x6>
 800f8b8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f8bc:	429e      	cmp	r6, r3
 800f8be:	d0f7      	beq.n	800f8b0 <strstr+0x10>
 800f8c0:	3001      	adds	r0, #1
 800f8c2:	7803      	ldrb	r3, [r0, #0]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d1ef      	bne.n	800f8a8 <strstr+0x8>
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	e7ec      	b.n	800f8a6 <strstr+0x6>

0800f8cc <_localeconv_r>:
 800f8cc:	4800      	ldr	r0, [pc, #0]	@ (800f8d0 <_localeconv_r+0x4>)
 800f8ce:	4770      	bx	lr
 800f8d0:	200002dc 	.word	0x200002dc

0800f8d4 <_close_r>:
 800f8d4:	b538      	push	{r3, r4, r5, lr}
 800f8d6:	4d06      	ldr	r5, [pc, #24]	@ (800f8f0 <_close_r+0x1c>)
 800f8d8:	2300      	movs	r3, #0
 800f8da:	4604      	mov	r4, r0
 800f8dc:	4608      	mov	r0, r1
 800f8de:	602b      	str	r3, [r5, #0]
 800f8e0:	f7f3 f8bd 	bl	8002a5e <_close>
 800f8e4:	1c43      	adds	r3, r0, #1
 800f8e6:	d102      	bne.n	800f8ee <_close_r+0x1a>
 800f8e8:	682b      	ldr	r3, [r5, #0]
 800f8ea:	b103      	cbz	r3, 800f8ee <_close_r+0x1a>
 800f8ec:	6023      	str	r3, [r4, #0]
 800f8ee:	bd38      	pop	{r3, r4, r5, pc}
 800f8f0:	20002250 	.word	0x20002250

0800f8f4 <_lseek_r>:
 800f8f4:	b538      	push	{r3, r4, r5, lr}
 800f8f6:	4d07      	ldr	r5, [pc, #28]	@ (800f914 <_lseek_r+0x20>)
 800f8f8:	4604      	mov	r4, r0
 800f8fa:	4608      	mov	r0, r1
 800f8fc:	4611      	mov	r1, r2
 800f8fe:	2200      	movs	r2, #0
 800f900:	602a      	str	r2, [r5, #0]
 800f902:	461a      	mov	r2, r3
 800f904:	f7f3 f8d2 	bl	8002aac <_lseek>
 800f908:	1c43      	adds	r3, r0, #1
 800f90a:	d102      	bne.n	800f912 <_lseek_r+0x1e>
 800f90c:	682b      	ldr	r3, [r5, #0]
 800f90e:	b103      	cbz	r3, 800f912 <_lseek_r+0x1e>
 800f910:	6023      	str	r3, [r4, #0]
 800f912:	bd38      	pop	{r3, r4, r5, pc}
 800f914:	20002250 	.word	0x20002250

0800f918 <_read_r>:
 800f918:	b538      	push	{r3, r4, r5, lr}
 800f91a:	4d07      	ldr	r5, [pc, #28]	@ (800f938 <_read_r+0x20>)
 800f91c:	4604      	mov	r4, r0
 800f91e:	4608      	mov	r0, r1
 800f920:	4611      	mov	r1, r2
 800f922:	2200      	movs	r2, #0
 800f924:	602a      	str	r2, [r5, #0]
 800f926:	461a      	mov	r2, r3
 800f928:	f7f3 f87c 	bl	8002a24 <_read>
 800f92c:	1c43      	adds	r3, r0, #1
 800f92e:	d102      	bne.n	800f936 <_read_r+0x1e>
 800f930:	682b      	ldr	r3, [r5, #0]
 800f932:	b103      	cbz	r3, 800f936 <_read_r+0x1e>
 800f934:	6023      	str	r3, [r4, #0]
 800f936:	bd38      	pop	{r3, r4, r5, pc}
 800f938:	20002250 	.word	0x20002250

0800f93c <_write_r>:
 800f93c:	b538      	push	{r3, r4, r5, lr}
 800f93e:	4d07      	ldr	r5, [pc, #28]	@ (800f95c <_write_r+0x20>)
 800f940:	4604      	mov	r4, r0
 800f942:	4608      	mov	r0, r1
 800f944:	4611      	mov	r1, r2
 800f946:	2200      	movs	r2, #0
 800f948:	602a      	str	r2, [r5, #0]
 800f94a:	461a      	mov	r2, r3
 800f94c:	f7f2 fdb8 	bl	80024c0 <_write>
 800f950:	1c43      	adds	r3, r0, #1
 800f952:	d102      	bne.n	800f95a <_write_r+0x1e>
 800f954:	682b      	ldr	r3, [r5, #0]
 800f956:	b103      	cbz	r3, 800f95a <_write_r+0x1e>
 800f958:	6023      	str	r3, [r4, #0]
 800f95a:	bd38      	pop	{r3, r4, r5, pc}
 800f95c:	20002250 	.word	0x20002250

0800f960 <__errno>:
 800f960:	4b01      	ldr	r3, [pc, #4]	@ (800f968 <__errno+0x8>)
 800f962:	6818      	ldr	r0, [r3, #0]
 800f964:	4770      	bx	lr
 800f966:	bf00      	nop
 800f968:	2000019c 	.word	0x2000019c

0800f96c <__libc_init_array>:
 800f96c:	b570      	push	{r4, r5, r6, lr}
 800f96e:	4d0d      	ldr	r5, [pc, #52]	@ (800f9a4 <__libc_init_array+0x38>)
 800f970:	4c0d      	ldr	r4, [pc, #52]	@ (800f9a8 <__libc_init_array+0x3c>)
 800f972:	1b64      	subs	r4, r4, r5
 800f974:	10a4      	asrs	r4, r4, #2
 800f976:	2600      	movs	r6, #0
 800f978:	42a6      	cmp	r6, r4
 800f97a:	d109      	bne.n	800f990 <__libc_init_array+0x24>
 800f97c:	4d0b      	ldr	r5, [pc, #44]	@ (800f9ac <__libc_init_array+0x40>)
 800f97e:	4c0c      	ldr	r4, [pc, #48]	@ (800f9b0 <__libc_init_array+0x44>)
 800f980:	f003 fe22 	bl	80135c8 <_init>
 800f984:	1b64      	subs	r4, r4, r5
 800f986:	10a4      	asrs	r4, r4, #2
 800f988:	2600      	movs	r6, #0
 800f98a:	42a6      	cmp	r6, r4
 800f98c:	d105      	bne.n	800f99a <__libc_init_array+0x2e>
 800f98e:	bd70      	pop	{r4, r5, r6, pc}
 800f990:	f855 3b04 	ldr.w	r3, [r5], #4
 800f994:	4798      	blx	r3
 800f996:	3601      	adds	r6, #1
 800f998:	e7ee      	b.n	800f978 <__libc_init_array+0xc>
 800f99a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f99e:	4798      	blx	r3
 800f9a0:	3601      	adds	r6, #1
 800f9a2:	e7f2      	b.n	800f98a <__libc_init_array+0x1e>
 800f9a4:	08013d38 	.word	0x08013d38
 800f9a8:	08013d38 	.word	0x08013d38
 800f9ac:	08013d38 	.word	0x08013d38
 800f9b0:	08013d3c 	.word	0x08013d3c

0800f9b4 <__retarget_lock_init_recursive>:
 800f9b4:	4770      	bx	lr

0800f9b6 <__retarget_lock_acquire_recursive>:
 800f9b6:	4770      	bx	lr

0800f9b8 <__retarget_lock_release_recursive>:
 800f9b8:	4770      	bx	lr

0800f9ba <memcpy>:
 800f9ba:	440a      	add	r2, r1
 800f9bc:	4291      	cmp	r1, r2
 800f9be:	f100 33ff 	add.w	r3, r0, #4294967295
 800f9c2:	d100      	bne.n	800f9c6 <memcpy+0xc>
 800f9c4:	4770      	bx	lr
 800f9c6:	b510      	push	{r4, lr}
 800f9c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9d0:	4291      	cmp	r1, r2
 800f9d2:	d1f9      	bne.n	800f9c8 <memcpy+0xe>
 800f9d4:	bd10      	pop	{r4, pc}
	...

0800f9d8 <nanf>:
 800f9d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f9e0 <nanf+0x8>
 800f9dc:	4770      	bx	lr
 800f9de:	bf00      	nop
 800f9e0:	7fc00000 	.word	0x7fc00000

0800f9e4 <quorem>:
 800f9e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9e8:	6903      	ldr	r3, [r0, #16]
 800f9ea:	690c      	ldr	r4, [r1, #16]
 800f9ec:	42a3      	cmp	r3, r4
 800f9ee:	4607      	mov	r7, r0
 800f9f0:	db7e      	blt.n	800faf0 <quorem+0x10c>
 800f9f2:	3c01      	subs	r4, #1
 800f9f4:	f101 0814 	add.w	r8, r1, #20
 800f9f8:	00a3      	lsls	r3, r4, #2
 800f9fa:	f100 0514 	add.w	r5, r0, #20
 800f9fe:	9300      	str	r3, [sp, #0]
 800fa00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa04:	9301      	str	r3, [sp, #4]
 800fa06:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fa0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa0e:	3301      	adds	r3, #1
 800fa10:	429a      	cmp	r2, r3
 800fa12:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fa16:	fbb2 f6f3 	udiv	r6, r2, r3
 800fa1a:	d32e      	bcc.n	800fa7a <quorem+0x96>
 800fa1c:	f04f 0a00 	mov.w	sl, #0
 800fa20:	46c4      	mov	ip, r8
 800fa22:	46ae      	mov	lr, r5
 800fa24:	46d3      	mov	fp, sl
 800fa26:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fa2a:	b298      	uxth	r0, r3
 800fa2c:	fb06 a000 	mla	r0, r6, r0, sl
 800fa30:	0c02      	lsrs	r2, r0, #16
 800fa32:	0c1b      	lsrs	r3, r3, #16
 800fa34:	fb06 2303 	mla	r3, r6, r3, r2
 800fa38:	f8de 2000 	ldr.w	r2, [lr]
 800fa3c:	b280      	uxth	r0, r0
 800fa3e:	b292      	uxth	r2, r2
 800fa40:	1a12      	subs	r2, r2, r0
 800fa42:	445a      	add	r2, fp
 800fa44:	f8de 0000 	ldr.w	r0, [lr]
 800fa48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fa52:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fa56:	b292      	uxth	r2, r2
 800fa58:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fa5c:	45e1      	cmp	r9, ip
 800fa5e:	f84e 2b04 	str.w	r2, [lr], #4
 800fa62:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fa66:	d2de      	bcs.n	800fa26 <quorem+0x42>
 800fa68:	9b00      	ldr	r3, [sp, #0]
 800fa6a:	58eb      	ldr	r3, [r5, r3]
 800fa6c:	b92b      	cbnz	r3, 800fa7a <quorem+0x96>
 800fa6e:	9b01      	ldr	r3, [sp, #4]
 800fa70:	3b04      	subs	r3, #4
 800fa72:	429d      	cmp	r5, r3
 800fa74:	461a      	mov	r2, r3
 800fa76:	d32f      	bcc.n	800fad8 <quorem+0xf4>
 800fa78:	613c      	str	r4, [r7, #16]
 800fa7a:	4638      	mov	r0, r7
 800fa7c:	f001 f9c4 	bl	8010e08 <__mcmp>
 800fa80:	2800      	cmp	r0, #0
 800fa82:	db25      	blt.n	800fad0 <quorem+0xec>
 800fa84:	4629      	mov	r1, r5
 800fa86:	2000      	movs	r0, #0
 800fa88:	f858 2b04 	ldr.w	r2, [r8], #4
 800fa8c:	f8d1 c000 	ldr.w	ip, [r1]
 800fa90:	fa1f fe82 	uxth.w	lr, r2
 800fa94:	fa1f f38c 	uxth.w	r3, ip
 800fa98:	eba3 030e 	sub.w	r3, r3, lr
 800fa9c:	4403      	add	r3, r0
 800fa9e:	0c12      	lsrs	r2, r2, #16
 800faa0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800faa4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800faae:	45c1      	cmp	r9, r8
 800fab0:	f841 3b04 	str.w	r3, [r1], #4
 800fab4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fab8:	d2e6      	bcs.n	800fa88 <quorem+0xa4>
 800faba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fabe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fac2:	b922      	cbnz	r2, 800face <quorem+0xea>
 800fac4:	3b04      	subs	r3, #4
 800fac6:	429d      	cmp	r5, r3
 800fac8:	461a      	mov	r2, r3
 800faca:	d30b      	bcc.n	800fae4 <quorem+0x100>
 800facc:	613c      	str	r4, [r7, #16]
 800face:	3601      	adds	r6, #1
 800fad0:	4630      	mov	r0, r6
 800fad2:	b003      	add	sp, #12
 800fad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fad8:	6812      	ldr	r2, [r2, #0]
 800fada:	3b04      	subs	r3, #4
 800fadc:	2a00      	cmp	r2, #0
 800fade:	d1cb      	bne.n	800fa78 <quorem+0x94>
 800fae0:	3c01      	subs	r4, #1
 800fae2:	e7c6      	b.n	800fa72 <quorem+0x8e>
 800fae4:	6812      	ldr	r2, [r2, #0]
 800fae6:	3b04      	subs	r3, #4
 800fae8:	2a00      	cmp	r2, #0
 800faea:	d1ef      	bne.n	800facc <quorem+0xe8>
 800faec:	3c01      	subs	r4, #1
 800faee:	e7ea      	b.n	800fac6 <quorem+0xe2>
 800faf0:	2000      	movs	r0, #0
 800faf2:	e7ee      	b.n	800fad2 <quorem+0xee>
 800faf4:	0000      	movs	r0, r0
	...

0800faf8 <_dtoa_r>:
 800faf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fafc:	69c7      	ldr	r7, [r0, #28]
 800fafe:	b099      	sub	sp, #100	@ 0x64
 800fb00:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fb04:	ec55 4b10 	vmov	r4, r5, d0
 800fb08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fb0a:	9109      	str	r1, [sp, #36]	@ 0x24
 800fb0c:	4683      	mov	fp, r0
 800fb0e:	920e      	str	r2, [sp, #56]	@ 0x38
 800fb10:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fb12:	b97f      	cbnz	r7, 800fb34 <_dtoa_r+0x3c>
 800fb14:	2010      	movs	r0, #16
 800fb16:	f000 fdfd 	bl	8010714 <malloc>
 800fb1a:	4602      	mov	r2, r0
 800fb1c:	f8cb 001c 	str.w	r0, [fp, #28]
 800fb20:	b920      	cbnz	r0, 800fb2c <_dtoa_r+0x34>
 800fb22:	4ba7      	ldr	r3, [pc, #668]	@ (800fdc0 <_dtoa_r+0x2c8>)
 800fb24:	21ef      	movs	r1, #239	@ 0xef
 800fb26:	48a7      	ldr	r0, [pc, #668]	@ (800fdc4 <_dtoa_r+0x2cc>)
 800fb28:	f003 f842 	bl	8012bb0 <__assert_func>
 800fb2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fb30:	6007      	str	r7, [r0, #0]
 800fb32:	60c7      	str	r7, [r0, #12]
 800fb34:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fb38:	6819      	ldr	r1, [r3, #0]
 800fb3a:	b159      	cbz	r1, 800fb54 <_dtoa_r+0x5c>
 800fb3c:	685a      	ldr	r2, [r3, #4]
 800fb3e:	604a      	str	r2, [r1, #4]
 800fb40:	2301      	movs	r3, #1
 800fb42:	4093      	lsls	r3, r2
 800fb44:	608b      	str	r3, [r1, #8]
 800fb46:	4658      	mov	r0, fp
 800fb48:	f000 feda 	bl	8010900 <_Bfree>
 800fb4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fb50:	2200      	movs	r2, #0
 800fb52:	601a      	str	r2, [r3, #0]
 800fb54:	1e2b      	subs	r3, r5, #0
 800fb56:	bfb9      	ittee	lt
 800fb58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fb5c:	9303      	strlt	r3, [sp, #12]
 800fb5e:	2300      	movge	r3, #0
 800fb60:	6033      	strge	r3, [r6, #0]
 800fb62:	9f03      	ldr	r7, [sp, #12]
 800fb64:	4b98      	ldr	r3, [pc, #608]	@ (800fdc8 <_dtoa_r+0x2d0>)
 800fb66:	bfbc      	itt	lt
 800fb68:	2201      	movlt	r2, #1
 800fb6a:	6032      	strlt	r2, [r6, #0]
 800fb6c:	43bb      	bics	r3, r7
 800fb6e:	d112      	bne.n	800fb96 <_dtoa_r+0x9e>
 800fb70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fb72:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fb76:	6013      	str	r3, [r2, #0]
 800fb78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fb7c:	4323      	orrs	r3, r4
 800fb7e:	f000 854d 	beq.w	801061c <_dtoa_r+0xb24>
 800fb82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fb84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fddc <_dtoa_r+0x2e4>
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	f000 854f 	beq.w	801062c <_dtoa_r+0xb34>
 800fb8e:	f10a 0303 	add.w	r3, sl, #3
 800fb92:	f000 bd49 	b.w	8010628 <_dtoa_r+0xb30>
 800fb96:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	ec51 0b17 	vmov	r0, r1, d7
 800fba0:	2300      	movs	r3, #0
 800fba2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fba6:	f7f0 ff8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800fbaa:	4680      	mov	r8, r0
 800fbac:	b158      	cbz	r0, 800fbc6 <_dtoa_r+0xce>
 800fbae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	6013      	str	r3, [r2, #0]
 800fbb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fbb6:	b113      	cbz	r3, 800fbbe <_dtoa_r+0xc6>
 800fbb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fbba:	4b84      	ldr	r3, [pc, #528]	@ (800fdcc <_dtoa_r+0x2d4>)
 800fbbc:	6013      	str	r3, [r2, #0]
 800fbbe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fde0 <_dtoa_r+0x2e8>
 800fbc2:	f000 bd33 	b.w	801062c <_dtoa_r+0xb34>
 800fbc6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fbca:	aa16      	add	r2, sp, #88	@ 0x58
 800fbcc:	a917      	add	r1, sp, #92	@ 0x5c
 800fbce:	4658      	mov	r0, fp
 800fbd0:	f001 fa3a 	bl	8011048 <__d2b>
 800fbd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fbd8:	4681      	mov	r9, r0
 800fbda:	2e00      	cmp	r6, #0
 800fbdc:	d077      	beq.n	800fcce <_dtoa_r+0x1d6>
 800fbde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fbe0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fbe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fbe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fbec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fbf0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fbf4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	4b74      	ldr	r3, [pc, #464]	@ (800fdd0 <_dtoa_r+0x2d8>)
 800fbfe:	f7f0 fb43 	bl	8000288 <__aeabi_dsub>
 800fc02:	a369      	add	r3, pc, #420	@ (adr r3, 800fda8 <_dtoa_r+0x2b0>)
 800fc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc08:	f7f0 fcf6 	bl	80005f8 <__aeabi_dmul>
 800fc0c:	a368      	add	r3, pc, #416	@ (adr r3, 800fdb0 <_dtoa_r+0x2b8>)
 800fc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc12:	f7f0 fb3b 	bl	800028c <__adddf3>
 800fc16:	4604      	mov	r4, r0
 800fc18:	4630      	mov	r0, r6
 800fc1a:	460d      	mov	r5, r1
 800fc1c:	f7f0 fc82 	bl	8000524 <__aeabi_i2d>
 800fc20:	a365      	add	r3, pc, #404	@ (adr r3, 800fdb8 <_dtoa_r+0x2c0>)
 800fc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc26:	f7f0 fce7 	bl	80005f8 <__aeabi_dmul>
 800fc2a:	4602      	mov	r2, r0
 800fc2c:	460b      	mov	r3, r1
 800fc2e:	4620      	mov	r0, r4
 800fc30:	4629      	mov	r1, r5
 800fc32:	f7f0 fb2b 	bl	800028c <__adddf3>
 800fc36:	4604      	mov	r4, r0
 800fc38:	460d      	mov	r5, r1
 800fc3a:	f7f0 ff8d 	bl	8000b58 <__aeabi_d2iz>
 800fc3e:	2200      	movs	r2, #0
 800fc40:	4607      	mov	r7, r0
 800fc42:	2300      	movs	r3, #0
 800fc44:	4620      	mov	r0, r4
 800fc46:	4629      	mov	r1, r5
 800fc48:	f7f0 ff48 	bl	8000adc <__aeabi_dcmplt>
 800fc4c:	b140      	cbz	r0, 800fc60 <_dtoa_r+0x168>
 800fc4e:	4638      	mov	r0, r7
 800fc50:	f7f0 fc68 	bl	8000524 <__aeabi_i2d>
 800fc54:	4622      	mov	r2, r4
 800fc56:	462b      	mov	r3, r5
 800fc58:	f7f0 ff36 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc5c:	b900      	cbnz	r0, 800fc60 <_dtoa_r+0x168>
 800fc5e:	3f01      	subs	r7, #1
 800fc60:	2f16      	cmp	r7, #22
 800fc62:	d851      	bhi.n	800fd08 <_dtoa_r+0x210>
 800fc64:	4b5b      	ldr	r3, [pc, #364]	@ (800fdd4 <_dtoa_r+0x2dc>)
 800fc66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fc72:	f7f0 ff33 	bl	8000adc <__aeabi_dcmplt>
 800fc76:	2800      	cmp	r0, #0
 800fc78:	d048      	beq.n	800fd0c <_dtoa_r+0x214>
 800fc7a:	3f01      	subs	r7, #1
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	9312      	str	r3, [sp, #72]	@ 0x48
 800fc80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fc82:	1b9b      	subs	r3, r3, r6
 800fc84:	1e5a      	subs	r2, r3, #1
 800fc86:	bf44      	itt	mi
 800fc88:	f1c3 0801 	rsbmi	r8, r3, #1
 800fc8c:	2300      	movmi	r3, #0
 800fc8e:	9208      	str	r2, [sp, #32]
 800fc90:	bf54      	ite	pl
 800fc92:	f04f 0800 	movpl.w	r8, #0
 800fc96:	9308      	strmi	r3, [sp, #32]
 800fc98:	2f00      	cmp	r7, #0
 800fc9a:	db39      	blt.n	800fd10 <_dtoa_r+0x218>
 800fc9c:	9b08      	ldr	r3, [sp, #32]
 800fc9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fca0:	443b      	add	r3, r7
 800fca2:	9308      	str	r3, [sp, #32]
 800fca4:	2300      	movs	r3, #0
 800fca6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcaa:	2b09      	cmp	r3, #9
 800fcac:	d864      	bhi.n	800fd78 <_dtoa_r+0x280>
 800fcae:	2b05      	cmp	r3, #5
 800fcb0:	bfc4      	itt	gt
 800fcb2:	3b04      	subgt	r3, #4
 800fcb4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fcb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcb8:	f1a3 0302 	sub.w	r3, r3, #2
 800fcbc:	bfcc      	ite	gt
 800fcbe:	2400      	movgt	r4, #0
 800fcc0:	2401      	movle	r4, #1
 800fcc2:	2b03      	cmp	r3, #3
 800fcc4:	d863      	bhi.n	800fd8e <_dtoa_r+0x296>
 800fcc6:	e8df f003 	tbb	[pc, r3]
 800fcca:	372a      	.short	0x372a
 800fccc:	5535      	.short	0x5535
 800fcce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fcd2:	441e      	add	r6, r3
 800fcd4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fcd8:	2b20      	cmp	r3, #32
 800fcda:	bfc1      	itttt	gt
 800fcdc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fce0:	409f      	lslgt	r7, r3
 800fce2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fce6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fcea:	bfd6      	itet	le
 800fcec:	f1c3 0320 	rsble	r3, r3, #32
 800fcf0:	ea47 0003 	orrgt.w	r0, r7, r3
 800fcf4:	fa04 f003 	lslle.w	r0, r4, r3
 800fcf8:	f7f0 fc04 	bl	8000504 <__aeabi_ui2d>
 800fcfc:	2201      	movs	r2, #1
 800fcfe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fd02:	3e01      	subs	r6, #1
 800fd04:	9214      	str	r2, [sp, #80]	@ 0x50
 800fd06:	e777      	b.n	800fbf8 <_dtoa_r+0x100>
 800fd08:	2301      	movs	r3, #1
 800fd0a:	e7b8      	b.n	800fc7e <_dtoa_r+0x186>
 800fd0c:	9012      	str	r0, [sp, #72]	@ 0x48
 800fd0e:	e7b7      	b.n	800fc80 <_dtoa_r+0x188>
 800fd10:	427b      	negs	r3, r7
 800fd12:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd14:	2300      	movs	r3, #0
 800fd16:	eba8 0807 	sub.w	r8, r8, r7
 800fd1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd1c:	e7c4      	b.n	800fca8 <_dtoa_r+0x1b0>
 800fd1e:	2300      	movs	r3, #0
 800fd20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	dc35      	bgt.n	800fd94 <_dtoa_r+0x29c>
 800fd28:	2301      	movs	r3, #1
 800fd2a:	9300      	str	r3, [sp, #0]
 800fd2c:	9307      	str	r3, [sp, #28]
 800fd2e:	461a      	mov	r2, r3
 800fd30:	920e      	str	r2, [sp, #56]	@ 0x38
 800fd32:	e00b      	b.n	800fd4c <_dtoa_r+0x254>
 800fd34:	2301      	movs	r3, #1
 800fd36:	e7f3      	b.n	800fd20 <_dtoa_r+0x228>
 800fd38:	2300      	movs	r3, #0
 800fd3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd3e:	18fb      	adds	r3, r7, r3
 800fd40:	9300      	str	r3, [sp, #0]
 800fd42:	3301      	adds	r3, #1
 800fd44:	2b01      	cmp	r3, #1
 800fd46:	9307      	str	r3, [sp, #28]
 800fd48:	bfb8      	it	lt
 800fd4a:	2301      	movlt	r3, #1
 800fd4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fd50:	2100      	movs	r1, #0
 800fd52:	2204      	movs	r2, #4
 800fd54:	f102 0514 	add.w	r5, r2, #20
 800fd58:	429d      	cmp	r5, r3
 800fd5a:	d91f      	bls.n	800fd9c <_dtoa_r+0x2a4>
 800fd5c:	6041      	str	r1, [r0, #4]
 800fd5e:	4658      	mov	r0, fp
 800fd60:	f000 fd8e 	bl	8010880 <_Balloc>
 800fd64:	4682      	mov	sl, r0
 800fd66:	2800      	cmp	r0, #0
 800fd68:	d13c      	bne.n	800fde4 <_dtoa_r+0x2ec>
 800fd6a:	4b1b      	ldr	r3, [pc, #108]	@ (800fdd8 <_dtoa_r+0x2e0>)
 800fd6c:	4602      	mov	r2, r0
 800fd6e:	f240 11af 	movw	r1, #431	@ 0x1af
 800fd72:	e6d8      	b.n	800fb26 <_dtoa_r+0x2e>
 800fd74:	2301      	movs	r3, #1
 800fd76:	e7e0      	b.n	800fd3a <_dtoa_r+0x242>
 800fd78:	2401      	movs	r4, #1
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fd80:	f04f 33ff 	mov.w	r3, #4294967295
 800fd84:	9300      	str	r3, [sp, #0]
 800fd86:	9307      	str	r3, [sp, #28]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	2312      	movs	r3, #18
 800fd8c:	e7d0      	b.n	800fd30 <_dtoa_r+0x238>
 800fd8e:	2301      	movs	r3, #1
 800fd90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd92:	e7f5      	b.n	800fd80 <_dtoa_r+0x288>
 800fd94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd96:	9300      	str	r3, [sp, #0]
 800fd98:	9307      	str	r3, [sp, #28]
 800fd9a:	e7d7      	b.n	800fd4c <_dtoa_r+0x254>
 800fd9c:	3101      	adds	r1, #1
 800fd9e:	0052      	lsls	r2, r2, #1
 800fda0:	e7d8      	b.n	800fd54 <_dtoa_r+0x25c>
 800fda2:	bf00      	nop
 800fda4:	f3af 8000 	nop.w
 800fda8:	636f4361 	.word	0x636f4361
 800fdac:	3fd287a7 	.word	0x3fd287a7
 800fdb0:	8b60c8b3 	.word	0x8b60c8b3
 800fdb4:	3fc68a28 	.word	0x3fc68a28
 800fdb8:	509f79fb 	.word	0x509f79fb
 800fdbc:	3fd34413 	.word	0x3fd34413
 800fdc0:	08013a31 	.word	0x08013a31
 800fdc4:	08013a48 	.word	0x08013a48
 800fdc8:	7ff00000 	.word	0x7ff00000
 800fdcc:	08013c88 	.word	0x08013c88
 800fdd0:	3ff80000 	.word	0x3ff80000
 800fdd4:	08013b40 	.word	0x08013b40
 800fdd8:	08013aa0 	.word	0x08013aa0
 800fddc:	08013a2d 	.word	0x08013a2d
 800fde0:	08013c87 	.word	0x08013c87
 800fde4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fde8:	6018      	str	r0, [r3, #0]
 800fdea:	9b07      	ldr	r3, [sp, #28]
 800fdec:	2b0e      	cmp	r3, #14
 800fdee:	f200 80a4 	bhi.w	800ff3a <_dtoa_r+0x442>
 800fdf2:	2c00      	cmp	r4, #0
 800fdf4:	f000 80a1 	beq.w	800ff3a <_dtoa_r+0x442>
 800fdf8:	2f00      	cmp	r7, #0
 800fdfa:	dd33      	ble.n	800fe64 <_dtoa_r+0x36c>
 800fdfc:	4bad      	ldr	r3, [pc, #692]	@ (80100b4 <_dtoa_r+0x5bc>)
 800fdfe:	f007 020f 	and.w	r2, r7, #15
 800fe02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe06:	ed93 7b00 	vldr	d7, [r3]
 800fe0a:	05f8      	lsls	r0, r7, #23
 800fe0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fe10:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fe14:	d516      	bpl.n	800fe44 <_dtoa_r+0x34c>
 800fe16:	4ba8      	ldr	r3, [pc, #672]	@ (80100b8 <_dtoa_r+0x5c0>)
 800fe18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fe1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fe20:	f7f0 fd14 	bl	800084c <__aeabi_ddiv>
 800fe24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe28:	f004 040f 	and.w	r4, r4, #15
 800fe2c:	2603      	movs	r6, #3
 800fe2e:	4da2      	ldr	r5, [pc, #648]	@ (80100b8 <_dtoa_r+0x5c0>)
 800fe30:	b954      	cbnz	r4, 800fe48 <_dtoa_r+0x350>
 800fe32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe3a:	f7f0 fd07 	bl	800084c <__aeabi_ddiv>
 800fe3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe42:	e028      	b.n	800fe96 <_dtoa_r+0x39e>
 800fe44:	2602      	movs	r6, #2
 800fe46:	e7f2      	b.n	800fe2e <_dtoa_r+0x336>
 800fe48:	07e1      	lsls	r1, r4, #31
 800fe4a:	d508      	bpl.n	800fe5e <_dtoa_r+0x366>
 800fe4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe50:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fe54:	f7f0 fbd0 	bl	80005f8 <__aeabi_dmul>
 800fe58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe5c:	3601      	adds	r6, #1
 800fe5e:	1064      	asrs	r4, r4, #1
 800fe60:	3508      	adds	r5, #8
 800fe62:	e7e5      	b.n	800fe30 <_dtoa_r+0x338>
 800fe64:	f000 80d2 	beq.w	801000c <_dtoa_r+0x514>
 800fe68:	427c      	negs	r4, r7
 800fe6a:	4b92      	ldr	r3, [pc, #584]	@ (80100b4 <_dtoa_r+0x5bc>)
 800fe6c:	4d92      	ldr	r5, [pc, #584]	@ (80100b8 <_dtoa_r+0x5c0>)
 800fe6e:	f004 020f 	and.w	r2, r4, #15
 800fe72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fe7e:	f7f0 fbbb 	bl	80005f8 <__aeabi_dmul>
 800fe82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe86:	1124      	asrs	r4, r4, #4
 800fe88:	2300      	movs	r3, #0
 800fe8a:	2602      	movs	r6, #2
 800fe8c:	2c00      	cmp	r4, #0
 800fe8e:	f040 80b2 	bne.w	800fff6 <_dtoa_r+0x4fe>
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d1d3      	bne.n	800fe3e <_dtoa_r+0x346>
 800fe96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fe98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	f000 80b7 	beq.w	8010010 <_dtoa_r+0x518>
 800fea2:	4b86      	ldr	r3, [pc, #536]	@ (80100bc <_dtoa_r+0x5c4>)
 800fea4:	2200      	movs	r2, #0
 800fea6:	4620      	mov	r0, r4
 800fea8:	4629      	mov	r1, r5
 800feaa:	f7f0 fe17 	bl	8000adc <__aeabi_dcmplt>
 800feae:	2800      	cmp	r0, #0
 800feb0:	f000 80ae 	beq.w	8010010 <_dtoa_r+0x518>
 800feb4:	9b07      	ldr	r3, [sp, #28]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	f000 80aa 	beq.w	8010010 <_dtoa_r+0x518>
 800febc:	9b00      	ldr	r3, [sp, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	dd37      	ble.n	800ff32 <_dtoa_r+0x43a>
 800fec2:	1e7b      	subs	r3, r7, #1
 800fec4:	9304      	str	r3, [sp, #16]
 800fec6:	4620      	mov	r0, r4
 800fec8:	4b7d      	ldr	r3, [pc, #500]	@ (80100c0 <_dtoa_r+0x5c8>)
 800feca:	2200      	movs	r2, #0
 800fecc:	4629      	mov	r1, r5
 800fece:	f7f0 fb93 	bl	80005f8 <__aeabi_dmul>
 800fed2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fed6:	9c00      	ldr	r4, [sp, #0]
 800fed8:	3601      	adds	r6, #1
 800feda:	4630      	mov	r0, r6
 800fedc:	f7f0 fb22 	bl	8000524 <__aeabi_i2d>
 800fee0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fee4:	f7f0 fb88 	bl	80005f8 <__aeabi_dmul>
 800fee8:	4b76      	ldr	r3, [pc, #472]	@ (80100c4 <_dtoa_r+0x5cc>)
 800feea:	2200      	movs	r2, #0
 800feec:	f7f0 f9ce 	bl	800028c <__adddf3>
 800fef0:	4605      	mov	r5, r0
 800fef2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fef6:	2c00      	cmp	r4, #0
 800fef8:	f040 808d 	bne.w	8010016 <_dtoa_r+0x51e>
 800fefc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff00:	4b71      	ldr	r3, [pc, #452]	@ (80100c8 <_dtoa_r+0x5d0>)
 800ff02:	2200      	movs	r2, #0
 800ff04:	f7f0 f9c0 	bl	8000288 <__aeabi_dsub>
 800ff08:	4602      	mov	r2, r0
 800ff0a:	460b      	mov	r3, r1
 800ff0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ff10:	462a      	mov	r2, r5
 800ff12:	4633      	mov	r3, r6
 800ff14:	f7f0 fe00 	bl	8000b18 <__aeabi_dcmpgt>
 800ff18:	2800      	cmp	r0, #0
 800ff1a:	f040 828b 	bne.w	8010434 <_dtoa_r+0x93c>
 800ff1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff22:	462a      	mov	r2, r5
 800ff24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ff28:	f7f0 fdd8 	bl	8000adc <__aeabi_dcmplt>
 800ff2c:	2800      	cmp	r0, #0
 800ff2e:	f040 8128 	bne.w	8010182 <_dtoa_r+0x68a>
 800ff32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ff36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ff3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	f2c0 815a 	blt.w	80101f6 <_dtoa_r+0x6fe>
 800ff42:	2f0e      	cmp	r7, #14
 800ff44:	f300 8157 	bgt.w	80101f6 <_dtoa_r+0x6fe>
 800ff48:	4b5a      	ldr	r3, [pc, #360]	@ (80100b4 <_dtoa_r+0x5bc>)
 800ff4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ff4e:	ed93 7b00 	vldr	d7, [r3]
 800ff52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	ed8d 7b00 	vstr	d7, [sp]
 800ff5a:	da03      	bge.n	800ff64 <_dtoa_r+0x46c>
 800ff5c:	9b07      	ldr	r3, [sp, #28]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	f340 8101 	ble.w	8010166 <_dtoa_r+0x66e>
 800ff64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ff68:	4656      	mov	r6, sl
 800ff6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff6e:	4620      	mov	r0, r4
 800ff70:	4629      	mov	r1, r5
 800ff72:	f7f0 fc6b 	bl	800084c <__aeabi_ddiv>
 800ff76:	f7f0 fdef 	bl	8000b58 <__aeabi_d2iz>
 800ff7a:	4680      	mov	r8, r0
 800ff7c:	f7f0 fad2 	bl	8000524 <__aeabi_i2d>
 800ff80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff84:	f7f0 fb38 	bl	80005f8 <__aeabi_dmul>
 800ff88:	4602      	mov	r2, r0
 800ff8a:	460b      	mov	r3, r1
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	4629      	mov	r1, r5
 800ff90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ff94:	f7f0 f978 	bl	8000288 <__aeabi_dsub>
 800ff98:	f806 4b01 	strb.w	r4, [r6], #1
 800ff9c:	9d07      	ldr	r5, [sp, #28]
 800ff9e:	eba6 040a 	sub.w	r4, r6, sl
 800ffa2:	42a5      	cmp	r5, r4
 800ffa4:	4602      	mov	r2, r0
 800ffa6:	460b      	mov	r3, r1
 800ffa8:	f040 8117 	bne.w	80101da <_dtoa_r+0x6e2>
 800ffac:	f7f0 f96e 	bl	800028c <__adddf3>
 800ffb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffb4:	4604      	mov	r4, r0
 800ffb6:	460d      	mov	r5, r1
 800ffb8:	f7f0 fdae 	bl	8000b18 <__aeabi_dcmpgt>
 800ffbc:	2800      	cmp	r0, #0
 800ffbe:	f040 80f9 	bne.w	80101b4 <_dtoa_r+0x6bc>
 800ffc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffc6:	4620      	mov	r0, r4
 800ffc8:	4629      	mov	r1, r5
 800ffca:	f7f0 fd7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ffce:	b118      	cbz	r0, 800ffd8 <_dtoa_r+0x4e0>
 800ffd0:	f018 0f01 	tst.w	r8, #1
 800ffd4:	f040 80ee 	bne.w	80101b4 <_dtoa_r+0x6bc>
 800ffd8:	4649      	mov	r1, r9
 800ffda:	4658      	mov	r0, fp
 800ffdc:	f000 fc90 	bl	8010900 <_Bfree>
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	7033      	strb	r3, [r6, #0]
 800ffe4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ffe6:	3701      	adds	r7, #1
 800ffe8:	601f      	str	r7, [r3, #0]
 800ffea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	f000 831d 	beq.w	801062c <_dtoa_r+0xb34>
 800fff2:	601e      	str	r6, [r3, #0]
 800fff4:	e31a      	b.n	801062c <_dtoa_r+0xb34>
 800fff6:	07e2      	lsls	r2, r4, #31
 800fff8:	d505      	bpl.n	8010006 <_dtoa_r+0x50e>
 800fffa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fffe:	f7f0 fafb 	bl	80005f8 <__aeabi_dmul>
 8010002:	3601      	adds	r6, #1
 8010004:	2301      	movs	r3, #1
 8010006:	1064      	asrs	r4, r4, #1
 8010008:	3508      	adds	r5, #8
 801000a:	e73f      	b.n	800fe8c <_dtoa_r+0x394>
 801000c:	2602      	movs	r6, #2
 801000e:	e742      	b.n	800fe96 <_dtoa_r+0x39e>
 8010010:	9c07      	ldr	r4, [sp, #28]
 8010012:	9704      	str	r7, [sp, #16]
 8010014:	e761      	b.n	800feda <_dtoa_r+0x3e2>
 8010016:	4b27      	ldr	r3, [pc, #156]	@ (80100b4 <_dtoa_r+0x5bc>)
 8010018:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801001a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801001e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010022:	4454      	add	r4, sl
 8010024:	2900      	cmp	r1, #0
 8010026:	d053      	beq.n	80100d0 <_dtoa_r+0x5d8>
 8010028:	4928      	ldr	r1, [pc, #160]	@ (80100cc <_dtoa_r+0x5d4>)
 801002a:	2000      	movs	r0, #0
 801002c:	f7f0 fc0e 	bl	800084c <__aeabi_ddiv>
 8010030:	4633      	mov	r3, r6
 8010032:	462a      	mov	r2, r5
 8010034:	f7f0 f928 	bl	8000288 <__aeabi_dsub>
 8010038:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801003c:	4656      	mov	r6, sl
 801003e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010042:	f7f0 fd89 	bl	8000b58 <__aeabi_d2iz>
 8010046:	4605      	mov	r5, r0
 8010048:	f7f0 fa6c 	bl	8000524 <__aeabi_i2d>
 801004c:	4602      	mov	r2, r0
 801004e:	460b      	mov	r3, r1
 8010050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010054:	f7f0 f918 	bl	8000288 <__aeabi_dsub>
 8010058:	3530      	adds	r5, #48	@ 0x30
 801005a:	4602      	mov	r2, r0
 801005c:	460b      	mov	r3, r1
 801005e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010062:	f806 5b01 	strb.w	r5, [r6], #1
 8010066:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801006a:	f7f0 fd37 	bl	8000adc <__aeabi_dcmplt>
 801006e:	2800      	cmp	r0, #0
 8010070:	d171      	bne.n	8010156 <_dtoa_r+0x65e>
 8010072:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010076:	4911      	ldr	r1, [pc, #68]	@ (80100bc <_dtoa_r+0x5c4>)
 8010078:	2000      	movs	r0, #0
 801007a:	f7f0 f905 	bl	8000288 <__aeabi_dsub>
 801007e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010082:	f7f0 fd2b 	bl	8000adc <__aeabi_dcmplt>
 8010086:	2800      	cmp	r0, #0
 8010088:	f040 8095 	bne.w	80101b6 <_dtoa_r+0x6be>
 801008c:	42a6      	cmp	r6, r4
 801008e:	f43f af50 	beq.w	800ff32 <_dtoa_r+0x43a>
 8010092:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010096:	4b0a      	ldr	r3, [pc, #40]	@ (80100c0 <_dtoa_r+0x5c8>)
 8010098:	2200      	movs	r2, #0
 801009a:	f7f0 faad 	bl	80005f8 <__aeabi_dmul>
 801009e:	4b08      	ldr	r3, [pc, #32]	@ (80100c0 <_dtoa_r+0x5c8>)
 80100a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80100a4:	2200      	movs	r2, #0
 80100a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100aa:	f7f0 faa5 	bl	80005f8 <__aeabi_dmul>
 80100ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100b2:	e7c4      	b.n	801003e <_dtoa_r+0x546>
 80100b4:	08013b40 	.word	0x08013b40
 80100b8:	08013b18 	.word	0x08013b18
 80100bc:	3ff00000 	.word	0x3ff00000
 80100c0:	40240000 	.word	0x40240000
 80100c4:	401c0000 	.word	0x401c0000
 80100c8:	40140000 	.word	0x40140000
 80100cc:	3fe00000 	.word	0x3fe00000
 80100d0:	4631      	mov	r1, r6
 80100d2:	4628      	mov	r0, r5
 80100d4:	f7f0 fa90 	bl	80005f8 <__aeabi_dmul>
 80100d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80100dc:	9415      	str	r4, [sp, #84]	@ 0x54
 80100de:	4656      	mov	r6, sl
 80100e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100e4:	f7f0 fd38 	bl	8000b58 <__aeabi_d2iz>
 80100e8:	4605      	mov	r5, r0
 80100ea:	f7f0 fa1b 	bl	8000524 <__aeabi_i2d>
 80100ee:	4602      	mov	r2, r0
 80100f0:	460b      	mov	r3, r1
 80100f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100f6:	f7f0 f8c7 	bl	8000288 <__aeabi_dsub>
 80100fa:	3530      	adds	r5, #48	@ 0x30
 80100fc:	f806 5b01 	strb.w	r5, [r6], #1
 8010100:	4602      	mov	r2, r0
 8010102:	460b      	mov	r3, r1
 8010104:	42a6      	cmp	r6, r4
 8010106:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801010a:	f04f 0200 	mov.w	r2, #0
 801010e:	d124      	bne.n	801015a <_dtoa_r+0x662>
 8010110:	4bac      	ldr	r3, [pc, #688]	@ (80103c4 <_dtoa_r+0x8cc>)
 8010112:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010116:	f7f0 f8b9 	bl	800028c <__adddf3>
 801011a:	4602      	mov	r2, r0
 801011c:	460b      	mov	r3, r1
 801011e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010122:	f7f0 fcf9 	bl	8000b18 <__aeabi_dcmpgt>
 8010126:	2800      	cmp	r0, #0
 8010128:	d145      	bne.n	80101b6 <_dtoa_r+0x6be>
 801012a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801012e:	49a5      	ldr	r1, [pc, #660]	@ (80103c4 <_dtoa_r+0x8cc>)
 8010130:	2000      	movs	r0, #0
 8010132:	f7f0 f8a9 	bl	8000288 <__aeabi_dsub>
 8010136:	4602      	mov	r2, r0
 8010138:	460b      	mov	r3, r1
 801013a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801013e:	f7f0 fccd 	bl	8000adc <__aeabi_dcmplt>
 8010142:	2800      	cmp	r0, #0
 8010144:	f43f aef5 	beq.w	800ff32 <_dtoa_r+0x43a>
 8010148:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801014a:	1e73      	subs	r3, r6, #1
 801014c:	9315      	str	r3, [sp, #84]	@ 0x54
 801014e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010152:	2b30      	cmp	r3, #48	@ 0x30
 8010154:	d0f8      	beq.n	8010148 <_dtoa_r+0x650>
 8010156:	9f04      	ldr	r7, [sp, #16]
 8010158:	e73e      	b.n	800ffd8 <_dtoa_r+0x4e0>
 801015a:	4b9b      	ldr	r3, [pc, #620]	@ (80103c8 <_dtoa_r+0x8d0>)
 801015c:	f7f0 fa4c 	bl	80005f8 <__aeabi_dmul>
 8010160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010164:	e7bc      	b.n	80100e0 <_dtoa_r+0x5e8>
 8010166:	d10c      	bne.n	8010182 <_dtoa_r+0x68a>
 8010168:	4b98      	ldr	r3, [pc, #608]	@ (80103cc <_dtoa_r+0x8d4>)
 801016a:	2200      	movs	r2, #0
 801016c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010170:	f7f0 fa42 	bl	80005f8 <__aeabi_dmul>
 8010174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010178:	f7f0 fcc4 	bl	8000b04 <__aeabi_dcmpge>
 801017c:	2800      	cmp	r0, #0
 801017e:	f000 8157 	beq.w	8010430 <_dtoa_r+0x938>
 8010182:	2400      	movs	r4, #0
 8010184:	4625      	mov	r5, r4
 8010186:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010188:	43db      	mvns	r3, r3
 801018a:	9304      	str	r3, [sp, #16]
 801018c:	4656      	mov	r6, sl
 801018e:	2700      	movs	r7, #0
 8010190:	4621      	mov	r1, r4
 8010192:	4658      	mov	r0, fp
 8010194:	f000 fbb4 	bl	8010900 <_Bfree>
 8010198:	2d00      	cmp	r5, #0
 801019a:	d0dc      	beq.n	8010156 <_dtoa_r+0x65e>
 801019c:	b12f      	cbz	r7, 80101aa <_dtoa_r+0x6b2>
 801019e:	42af      	cmp	r7, r5
 80101a0:	d003      	beq.n	80101aa <_dtoa_r+0x6b2>
 80101a2:	4639      	mov	r1, r7
 80101a4:	4658      	mov	r0, fp
 80101a6:	f000 fbab 	bl	8010900 <_Bfree>
 80101aa:	4629      	mov	r1, r5
 80101ac:	4658      	mov	r0, fp
 80101ae:	f000 fba7 	bl	8010900 <_Bfree>
 80101b2:	e7d0      	b.n	8010156 <_dtoa_r+0x65e>
 80101b4:	9704      	str	r7, [sp, #16]
 80101b6:	4633      	mov	r3, r6
 80101b8:	461e      	mov	r6, r3
 80101ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80101be:	2a39      	cmp	r2, #57	@ 0x39
 80101c0:	d107      	bne.n	80101d2 <_dtoa_r+0x6da>
 80101c2:	459a      	cmp	sl, r3
 80101c4:	d1f8      	bne.n	80101b8 <_dtoa_r+0x6c0>
 80101c6:	9a04      	ldr	r2, [sp, #16]
 80101c8:	3201      	adds	r2, #1
 80101ca:	9204      	str	r2, [sp, #16]
 80101cc:	2230      	movs	r2, #48	@ 0x30
 80101ce:	f88a 2000 	strb.w	r2, [sl]
 80101d2:	781a      	ldrb	r2, [r3, #0]
 80101d4:	3201      	adds	r2, #1
 80101d6:	701a      	strb	r2, [r3, #0]
 80101d8:	e7bd      	b.n	8010156 <_dtoa_r+0x65e>
 80101da:	4b7b      	ldr	r3, [pc, #492]	@ (80103c8 <_dtoa_r+0x8d0>)
 80101dc:	2200      	movs	r2, #0
 80101de:	f7f0 fa0b 	bl	80005f8 <__aeabi_dmul>
 80101e2:	2200      	movs	r2, #0
 80101e4:	2300      	movs	r3, #0
 80101e6:	4604      	mov	r4, r0
 80101e8:	460d      	mov	r5, r1
 80101ea:	f7f0 fc6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80101ee:	2800      	cmp	r0, #0
 80101f0:	f43f aebb 	beq.w	800ff6a <_dtoa_r+0x472>
 80101f4:	e6f0      	b.n	800ffd8 <_dtoa_r+0x4e0>
 80101f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80101f8:	2a00      	cmp	r2, #0
 80101fa:	f000 80db 	beq.w	80103b4 <_dtoa_r+0x8bc>
 80101fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010200:	2a01      	cmp	r2, #1
 8010202:	f300 80bf 	bgt.w	8010384 <_dtoa_r+0x88c>
 8010206:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010208:	2a00      	cmp	r2, #0
 801020a:	f000 80b7 	beq.w	801037c <_dtoa_r+0x884>
 801020e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010212:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010214:	4646      	mov	r6, r8
 8010216:	9a08      	ldr	r2, [sp, #32]
 8010218:	2101      	movs	r1, #1
 801021a:	441a      	add	r2, r3
 801021c:	4658      	mov	r0, fp
 801021e:	4498      	add	r8, r3
 8010220:	9208      	str	r2, [sp, #32]
 8010222:	f000 fc6b 	bl	8010afc <__i2b>
 8010226:	4605      	mov	r5, r0
 8010228:	b15e      	cbz	r6, 8010242 <_dtoa_r+0x74a>
 801022a:	9b08      	ldr	r3, [sp, #32]
 801022c:	2b00      	cmp	r3, #0
 801022e:	dd08      	ble.n	8010242 <_dtoa_r+0x74a>
 8010230:	42b3      	cmp	r3, r6
 8010232:	9a08      	ldr	r2, [sp, #32]
 8010234:	bfa8      	it	ge
 8010236:	4633      	movge	r3, r6
 8010238:	eba8 0803 	sub.w	r8, r8, r3
 801023c:	1af6      	subs	r6, r6, r3
 801023e:	1ad3      	subs	r3, r2, r3
 8010240:	9308      	str	r3, [sp, #32]
 8010242:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010244:	b1f3      	cbz	r3, 8010284 <_dtoa_r+0x78c>
 8010246:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010248:	2b00      	cmp	r3, #0
 801024a:	f000 80b7 	beq.w	80103bc <_dtoa_r+0x8c4>
 801024e:	b18c      	cbz	r4, 8010274 <_dtoa_r+0x77c>
 8010250:	4629      	mov	r1, r5
 8010252:	4622      	mov	r2, r4
 8010254:	4658      	mov	r0, fp
 8010256:	f000 fd11 	bl	8010c7c <__pow5mult>
 801025a:	464a      	mov	r2, r9
 801025c:	4601      	mov	r1, r0
 801025e:	4605      	mov	r5, r0
 8010260:	4658      	mov	r0, fp
 8010262:	f000 fc61 	bl	8010b28 <__multiply>
 8010266:	4649      	mov	r1, r9
 8010268:	9004      	str	r0, [sp, #16]
 801026a:	4658      	mov	r0, fp
 801026c:	f000 fb48 	bl	8010900 <_Bfree>
 8010270:	9b04      	ldr	r3, [sp, #16]
 8010272:	4699      	mov	r9, r3
 8010274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010276:	1b1a      	subs	r2, r3, r4
 8010278:	d004      	beq.n	8010284 <_dtoa_r+0x78c>
 801027a:	4649      	mov	r1, r9
 801027c:	4658      	mov	r0, fp
 801027e:	f000 fcfd 	bl	8010c7c <__pow5mult>
 8010282:	4681      	mov	r9, r0
 8010284:	2101      	movs	r1, #1
 8010286:	4658      	mov	r0, fp
 8010288:	f000 fc38 	bl	8010afc <__i2b>
 801028c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801028e:	4604      	mov	r4, r0
 8010290:	2b00      	cmp	r3, #0
 8010292:	f000 81cf 	beq.w	8010634 <_dtoa_r+0xb3c>
 8010296:	461a      	mov	r2, r3
 8010298:	4601      	mov	r1, r0
 801029a:	4658      	mov	r0, fp
 801029c:	f000 fcee 	bl	8010c7c <__pow5mult>
 80102a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102a2:	2b01      	cmp	r3, #1
 80102a4:	4604      	mov	r4, r0
 80102a6:	f300 8095 	bgt.w	80103d4 <_dtoa_r+0x8dc>
 80102aa:	9b02      	ldr	r3, [sp, #8]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	f040 8087 	bne.w	80103c0 <_dtoa_r+0x8c8>
 80102b2:	9b03      	ldr	r3, [sp, #12]
 80102b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	f040 8089 	bne.w	80103d0 <_dtoa_r+0x8d8>
 80102be:	9b03      	ldr	r3, [sp, #12]
 80102c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80102c4:	0d1b      	lsrs	r3, r3, #20
 80102c6:	051b      	lsls	r3, r3, #20
 80102c8:	b12b      	cbz	r3, 80102d6 <_dtoa_r+0x7de>
 80102ca:	9b08      	ldr	r3, [sp, #32]
 80102cc:	3301      	adds	r3, #1
 80102ce:	9308      	str	r3, [sp, #32]
 80102d0:	f108 0801 	add.w	r8, r8, #1
 80102d4:	2301      	movs	r3, #1
 80102d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80102d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102da:	2b00      	cmp	r3, #0
 80102dc:	f000 81b0 	beq.w	8010640 <_dtoa_r+0xb48>
 80102e0:	6923      	ldr	r3, [r4, #16]
 80102e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80102e6:	6918      	ldr	r0, [r3, #16]
 80102e8:	f000 fbbc 	bl	8010a64 <__hi0bits>
 80102ec:	f1c0 0020 	rsb	r0, r0, #32
 80102f0:	9b08      	ldr	r3, [sp, #32]
 80102f2:	4418      	add	r0, r3
 80102f4:	f010 001f 	ands.w	r0, r0, #31
 80102f8:	d077      	beq.n	80103ea <_dtoa_r+0x8f2>
 80102fa:	f1c0 0320 	rsb	r3, r0, #32
 80102fe:	2b04      	cmp	r3, #4
 8010300:	dd6b      	ble.n	80103da <_dtoa_r+0x8e2>
 8010302:	9b08      	ldr	r3, [sp, #32]
 8010304:	f1c0 001c 	rsb	r0, r0, #28
 8010308:	4403      	add	r3, r0
 801030a:	4480      	add	r8, r0
 801030c:	4406      	add	r6, r0
 801030e:	9308      	str	r3, [sp, #32]
 8010310:	f1b8 0f00 	cmp.w	r8, #0
 8010314:	dd05      	ble.n	8010322 <_dtoa_r+0x82a>
 8010316:	4649      	mov	r1, r9
 8010318:	4642      	mov	r2, r8
 801031a:	4658      	mov	r0, fp
 801031c:	f000 fd08 	bl	8010d30 <__lshift>
 8010320:	4681      	mov	r9, r0
 8010322:	9b08      	ldr	r3, [sp, #32]
 8010324:	2b00      	cmp	r3, #0
 8010326:	dd05      	ble.n	8010334 <_dtoa_r+0x83c>
 8010328:	4621      	mov	r1, r4
 801032a:	461a      	mov	r2, r3
 801032c:	4658      	mov	r0, fp
 801032e:	f000 fcff 	bl	8010d30 <__lshift>
 8010332:	4604      	mov	r4, r0
 8010334:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010336:	2b00      	cmp	r3, #0
 8010338:	d059      	beq.n	80103ee <_dtoa_r+0x8f6>
 801033a:	4621      	mov	r1, r4
 801033c:	4648      	mov	r0, r9
 801033e:	f000 fd63 	bl	8010e08 <__mcmp>
 8010342:	2800      	cmp	r0, #0
 8010344:	da53      	bge.n	80103ee <_dtoa_r+0x8f6>
 8010346:	1e7b      	subs	r3, r7, #1
 8010348:	9304      	str	r3, [sp, #16]
 801034a:	4649      	mov	r1, r9
 801034c:	2300      	movs	r3, #0
 801034e:	220a      	movs	r2, #10
 8010350:	4658      	mov	r0, fp
 8010352:	f000 faf7 	bl	8010944 <__multadd>
 8010356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010358:	4681      	mov	r9, r0
 801035a:	2b00      	cmp	r3, #0
 801035c:	f000 8172 	beq.w	8010644 <_dtoa_r+0xb4c>
 8010360:	2300      	movs	r3, #0
 8010362:	4629      	mov	r1, r5
 8010364:	220a      	movs	r2, #10
 8010366:	4658      	mov	r0, fp
 8010368:	f000 faec 	bl	8010944 <__multadd>
 801036c:	9b00      	ldr	r3, [sp, #0]
 801036e:	2b00      	cmp	r3, #0
 8010370:	4605      	mov	r5, r0
 8010372:	dc67      	bgt.n	8010444 <_dtoa_r+0x94c>
 8010374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010376:	2b02      	cmp	r3, #2
 8010378:	dc41      	bgt.n	80103fe <_dtoa_r+0x906>
 801037a:	e063      	b.n	8010444 <_dtoa_r+0x94c>
 801037c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801037e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010382:	e746      	b.n	8010212 <_dtoa_r+0x71a>
 8010384:	9b07      	ldr	r3, [sp, #28]
 8010386:	1e5c      	subs	r4, r3, #1
 8010388:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801038a:	42a3      	cmp	r3, r4
 801038c:	bfbf      	itttt	lt
 801038e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010390:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010392:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010394:	1ae3      	sublt	r3, r4, r3
 8010396:	bfb4      	ite	lt
 8010398:	18d2      	addlt	r2, r2, r3
 801039a:	1b1c      	subge	r4, r3, r4
 801039c:	9b07      	ldr	r3, [sp, #28]
 801039e:	bfbc      	itt	lt
 80103a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80103a2:	2400      	movlt	r4, #0
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	bfb5      	itete	lt
 80103a8:	eba8 0603 	sublt.w	r6, r8, r3
 80103ac:	9b07      	ldrge	r3, [sp, #28]
 80103ae:	2300      	movlt	r3, #0
 80103b0:	4646      	movge	r6, r8
 80103b2:	e730      	b.n	8010216 <_dtoa_r+0x71e>
 80103b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80103b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80103b8:	4646      	mov	r6, r8
 80103ba:	e735      	b.n	8010228 <_dtoa_r+0x730>
 80103bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80103be:	e75c      	b.n	801027a <_dtoa_r+0x782>
 80103c0:	2300      	movs	r3, #0
 80103c2:	e788      	b.n	80102d6 <_dtoa_r+0x7de>
 80103c4:	3fe00000 	.word	0x3fe00000
 80103c8:	40240000 	.word	0x40240000
 80103cc:	40140000 	.word	0x40140000
 80103d0:	9b02      	ldr	r3, [sp, #8]
 80103d2:	e780      	b.n	80102d6 <_dtoa_r+0x7de>
 80103d4:	2300      	movs	r3, #0
 80103d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80103d8:	e782      	b.n	80102e0 <_dtoa_r+0x7e8>
 80103da:	d099      	beq.n	8010310 <_dtoa_r+0x818>
 80103dc:	9a08      	ldr	r2, [sp, #32]
 80103de:	331c      	adds	r3, #28
 80103e0:	441a      	add	r2, r3
 80103e2:	4498      	add	r8, r3
 80103e4:	441e      	add	r6, r3
 80103e6:	9208      	str	r2, [sp, #32]
 80103e8:	e792      	b.n	8010310 <_dtoa_r+0x818>
 80103ea:	4603      	mov	r3, r0
 80103ec:	e7f6      	b.n	80103dc <_dtoa_r+0x8e4>
 80103ee:	9b07      	ldr	r3, [sp, #28]
 80103f0:	9704      	str	r7, [sp, #16]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	dc20      	bgt.n	8010438 <_dtoa_r+0x940>
 80103f6:	9300      	str	r3, [sp, #0]
 80103f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103fa:	2b02      	cmp	r3, #2
 80103fc:	dd1e      	ble.n	801043c <_dtoa_r+0x944>
 80103fe:	9b00      	ldr	r3, [sp, #0]
 8010400:	2b00      	cmp	r3, #0
 8010402:	f47f aec0 	bne.w	8010186 <_dtoa_r+0x68e>
 8010406:	4621      	mov	r1, r4
 8010408:	2205      	movs	r2, #5
 801040a:	4658      	mov	r0, fp
 801040c:	f000 fa9a 	bl	8010944 <__multadd>
 8010410:	4601      	mov	r1, r0
 8010412:	4604      	mov	r4, r0
 8010414:	4648      	mov	r0, r9
 8010416:	f000 fcf7 	bl	8010e08 <__mcmp>
 801041a:	2800      	cmp	r0, #0
 801041c:	f77f aeb3 	ble.w	8010186 <_dtoa_r+0x68e>
 8010420:	4656      	mov	r6, sl
 8010422:	2331      	movs	r3, #49	@ 0x31
 8010424:	f806 3b01 	strb.w	r3, [r6], #1
 8010428:	9b04      	ldr	r3, [sp, #16]
 801042a:	3301      	adds	r3, #1
 801042c:	9304      	str	r3, [sp, #16]
 801042e:	e6ae      	b.n	801018e <_dtoa_r+0x696>
 8010430:	9c07      	ldr	r4, [sp, #28]
 8010432:	9704      	str	r7, [sp, #16]
 8010434:	4625      	mov	r5, r4
 8010436:	e7f3      	b.n	8010420 <_dtoa_r+0x928>
 8010438:	9b07      	ldr	r3, [sp, #28]
 801043a:	9300      	str	r3, [sp, #0]
 801043c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801043e:	2b00      	cmp	r3, #0
 8010440:	f000 8104 	beq.w	801064c <_dtoa_r+0xb54>
 8010444:	2e00      	cmp	r6, #0
 8010446:	dd05      	ble.n	8010454 <_dtoa_r+0x95c>
 8010448:	4629      	mov	r1, r5
 801044a:	4632      	mov	r2, r6
 801044c:	4658      	mov	r0, fp
 801044e:	f000 fc6f 	bl	8010d30 <__lshift>
 8010452:	4605      	mov	r5, r0
 8010454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010456:	2b00      	cmp	r3, #0
 8010458:	d05a      	beq.n	8010510 <_dtoa_r+0xa18>
 801045a:	6869      	ldr	r1, [r5, #4]
 801045c:	4658      	mov	r0, fp
 801045e:	f000 fa0f 	bl	8010880 <_Balloc>
 8010462:	4606      	mov	r6, r0
 8010464:	b928      	cbnz	r0, 8010472 <_dtoa_r+0x97a>
 8010466:	4b84      	ldr	r3, [pc, #528]	@ (8010678 <_dtoa_r+0xb80>)
 8010468:	4602      	mov	r2, r0
 801046a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801046e:	f7ff bb5a 	b.w	800fb26 <_dtoa_r+0x2e>
 8010472:	692a      	ldr	r2, [r5, #16]
 8010474:	3202      	adds	r2, #2
 8010476:	0092      	lsls	r2, r2, #2
 8010478:	f105 010c 	add.w	r1, r5, #12
 801047c:	300c      	adds	r0, #12
 801047e:	f7ff fa9c 	bl	800f9ba <memcpy>
 8010482:	2201      	movs	r2, #1
 8010484:	4631      	mov	r1, r6
 8010486:	4658      	mov	r0, fp
 8010488:	f000 fc52 	bl	8010d30 <__lshift>
 801048c:	f10a 0301 	add.w	r3, sl, #1
 8010490:	9307      	str	r3, [sp, #28]
 8010492:	9b00      	ldr	r3, [sp, #0]
 8010494:	4453      	add	r3, sl
 8010496:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010498:	9b02      	ldr	r3, [sp, #8]
 801049a:	f003 0301 	and.w	r3, r3, #1
 801049e:	462f      	mov	r7, r5
 80104a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80104a2:	4605      	mov	r5, r0
 80104a4:	9b07      	ldr	r3, [sp, #28]
 80104a6:	4621      	mov	r1, r4
 80104a8:	3b01      	subs	r3, #1
 80104aa:	4648      	mov	r0, r9
 80104ac:	9300      	str	r3, [sp, #0]
 80104ae:	f7ff fa99 	bl	800f9e4 <quorem>
 80104b2:	4639      	mov	r1, r7
 80104b4:	9002      	str	r0, [sp, #8]
 80104b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80104ba:	4648      	mov	r0, r9
 80104bc:	f000 fca4 	bl	8010e08 <__mcmp>
 80104c0:	462a      	mov	r2, r5
 80104c2:	9008      	str	r0, [sp, #32]
 80104c4:	4621      	mov	r1, r4
 80104c6:	4658      	mov	r0, fp
 80104c8:	f000 fcba 	bl	8010e40 <__mdiff>
 80104cc:	68c2      	ldr	r2, [r0, #12]
 80104ce:	4606      	mov	r6, r0
 80104d0:	bb02      	cbnz	r2, 8010514 <_dtoa_r+0xa1c>
 80104d2:	4601      	mov	r1, r0
 80104d4:	4648      	mov	r0, r9
 80104d6:	f000 fc97 	bl	8010e08 <__mcmp>
 80104da:	4602      	mov	r2, r0
 80104dc:	4631      	mov	r1, r6
 80104de:	4658      	mov	r0, fp
 80104e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80104e2:	f000 fa0d 	bl	8010900 <_Bfree>
 80104e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80104ea:	9e07      	ldr	r6, [sp, #28]
 80104ec:	ea43 0102 	orr.w	r1, r3, r2
 80104f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80104f2:	4319      	orrs	r1, r3
 80104f4:	d110      	bne.n	8010518 <_dtoa_r+0xa20>
 80104f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80104fa:	d029      	beq.n	8010550 <_dtoa_r+0xa58>
 80104fc:	9b08      	ldr	r3, [sp, #32]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	dd02      	ble.n	8010508 <_dtoa_r+0xa10>
 8010502:	9b02      	ldr	r3, [sp, #8]
 8010504:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010508:	9b00      	ldr	r3, [sp, #0]
 801050a:	f883 8000 	strb.w	r8, [r3]
 801050e:	e63f      	b.n	8010190 <_dtoa_r+0x698>
 8010510:	4628      	mov	r0, r5
 8010512:	e7bb      	b.n	801048c <_dtoa_r+0x994>
 8010514:	2201      	movs	r2, #1
 8010516:	e7e1      	b.n	80104dc <_dtoa_r+0x9e4>
 8010518:	9b08      	ldr	r3, [sp, #32]
 801051a:	2b00      	cmp	r3, #0
 801051c:	db04      	blt.n	8010528 <_dtoa_r+0xa30>
 801051e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010520:	430b      	orrs	r3, r1
 8010522:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010524:	430b      	orrs	r3, r1
 8010526:	d120      	bne.n	801056a <_dtoa_r+0xa72>
 8010528:	2a00      	cmp	r2, #0
 801052a:	dded      	ble.n	8010508 <_dtoa_r+0xa10>
 801052c:	4649      	mov	r1, r9
 801052e:	2201      	movs	r2, #1
 8010530:	4658      	mov	r0, fp
 8010532:	f000 fbfd 	bl	8010d30 <__lshift>
 8010536:	4621      	mov	r1, r4
 8010538:	4681      	mov	r9, r0
 801053a:	f000 fc65 	bl	8010e08 <__mcmp>
 801053e:	2800      	cmp	r0, #0
 8010540:	dc03      	bgt.n	801054a <_dtoa_r+0xa52>
 8010542:	d1e1      	bne.n	8010508 <_dtoa_r+0xa10>
 8010544:	f018 0f01 	tst.w	r8, #1
 8010548:	d0de      	beq.n	8010508 <_dtoa_r+0xa10>
 801054a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801054e:	d1d8      	bne.n	8010502 <_dtoa_r+0xa0a>
 8010550:	9a00      	ldr	r2, [sp, #0]
 8010552:	2339      	movs	r3, #57	@ 0x39
 8010554:	7013      	strb	r3, [r2, #0]
 8010556:	4633      	mov	r3, r6
 8010558:	461e      	mov	r6, r3
 801055a:	3b01      	subs	r3, #1
 801055c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010560:	2a39      	cmp	r2, #57	@ 0x39
 8010562:	d052      	beq.n	801060a <_dtoa_r+0xb12>
 8010564:	3201      	adds	r2, #1
 8010566:	701a      	strb	r2, [r3, #0]
 8010568:	e612      	b.n	8010190 <_dtoa_r+0x698>
 801056a:	2a00      	cmp	r2, #0
 801056c:	dd07      	ble.n	801057e <_dtoa_r+0xa86>
 801056e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010572:	d0ed      	beq.n	8010550 <_dtoa_r+0xa58>
 8010574:	9a00      	ldr	r2, [sp, #0]
 8010576:	f108 0301 	add.w	r3, r8, #1
 801057a:	7013      	strb	r3, [r2, #0]
 801057c:	e608      	b.n	8010190 <_dtoa_r+0x698>
 801057e:	9b07      	ldr	r3, [sp, #28]
 8010580:	9a07      	ldr	r2, [sp, #28]
 8010582:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010588:	4293      	cmp	r3, r2
 801058a:	d028      	beq.n	80105de <_dtoa_r+0xae6>
 801058c:	4649      	mov	r1, r9
 801058e:	2300      	movs	r3, #0
 8010590:	220a      	movs	r2, #10
 8010592:	4658      	mov	r0, fp
 8010594:	f000 f9d6 	bl	8010944 <__multadd>
 8010598:	42af      	cmp	r7, r5
 801059a:	4681      	mov	r9, r0
 801059c:	f04f 0300 	mov.w	r3, #0
 80105a0:	f04f 020a 	mov.w	r2, #10
 80105a4:	4639      	mov	r1, r7
 80105a6:	4658      	mov	r0, fp
 80105a8:	d107      	bne.n	80105ba <_dtoa_r+0xac2>
 80105aa:	f000 f9cb 	bl	8010944 <__multadd>
 80105ae:	4607      	mov	r7, r0
 80105b0:	4605      	mov	r5, r0
 80105b2:	9b07      	ldr	r3, [sp, #28]
 80105b4:	3301      	adds	r3, #1
 80105b6:	9307      	str	r3, [sp, #28]
 80105b8:	e774      	b.n	80104a4 <_dtoa_r+0x9ac>
 80105ba:	f000 f9c3 	bl	8010944 <__multadd>
 80105be:	4629      	mov	r1, r5
 80105c0:	4607      	mov	r7, r0
 80105c2:	2300      	movs	r3, #0
 80105c4:	220a      	movs	r2, #10
 80105c6:	4658      	mov	r0, fp
 80105c8:	f000 f9bc 	bl	8010944 <__multadd>
 80105cc:	4605      	mov	r5, r0
 80105ce:	e7f0      	b.n	80105b2 <_dtoa_r+0xaba>
 80105d0:	9b00      	ldr	r3, [sp, #0]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	bfcc      	ite	gt
 80105d6:	461e      	movgt	r6, r3
 80105d8:	2601      	movle	r6, #1
 80105da:	4456      	add	r6, sl
 80105dc:	2700      	movs	r7, #0
 80105de:	4649      	mov	r1, r9
 80105e0:	2201      	movs	r2, #1
 80105e2:	4658      	mov	r0, fp
 80105e4:	f000 fba4 	bl	8010d30 <__lshift>
 80105e8:	4621      	mov	r1, r4
 80105ea:	4681      	mov	r9, r0
 80105ec:	f000 fc0c 	bl	8010e08 <__mcmp>
 80105f0:	2800      	cmp	r0, #0
 80105f2:	dcb0      	bgt.n	8010556 <_dtoa_r+0xa5e>
 80105f4:	d102      	bne.n	80105fc <_dtoa_r+0xb04>
 80105f6:	f018 0f01 	tst.w	r8, #1
 80105fa:	d1ac      	bne.n	8010556 <_dtoa_r+0xa5e>
 80105fc:	4633      	mov	r3, r6
 80105fe:	461e      	mov	r6, r3
 8010600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010604:	2a30      	cmp	r2, #48	@ 0x30
 8010606:	d0fa      	beq.n	80105fe <_dtoa_r+0xb06>
 8010608:	e5c2      	b.n	8010190 <_dtoa_r+0x698>
 801060a:	459a      	cmp	sl, r3
 801060c:	d1a4      	bne.n	8010558 <_dtoa_r+0xa60>
 801060e:	9b04      	ldr	r3, [sp, #16]
 8010610:	3301      	adds	r3, #1
 8010612:	9304      	str	r3, [sp, #16]
 8010614:	2331      	movs	r3, #49	@ 0x31
 8010616:	f88a 3000 	strb.w	r3, [sl]
 801061a:	e5b9      	b.n	8010190 <_dtoa_r+0x698>
 801061c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801061e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801067c <_dtoa_r+0xb84>
 8010622:	b11b      	cbz	r3, 801062c <_dtoa_r+0xb34>
 8010624:	f10a 0308 	add.w	r3, sl, #8
 8010628:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801062a:	6013      	str	r3, [r2, #0]
 801062c:	4650      	mov	r0, sl
 801062e:	b019      	add	sp, #100	@ 0x64
 8010630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010636:	2b01      	cmp	r3, #1
 8010638:	f77f ae37 	ble.w	80102aa <_dtoa_r+0x7b2>
 801063c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801063e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010640:	2001      	movs	r0, #1
 8010642:	e655      	b.n	80102f0 <_dtoa_r+0x7f8>
 8010644:	9b00      	ldr	r3, [sp, #0]
 8010646:	2b00      	cmp	r3, #0
 8010648:	f77f aed6 	ble.w	80103f8 <_dtoa_r+0x900>
 801064c:	4656      	mov	r6, sl
 801064e:	4621      	mov	r1, r4
 8010650:	4648      	mov	r0, r9
 8010652:	f7ff f9c7 	bl	800f9e4 <quorem>
 8010656:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801065a:	f806 8b01 	strb.w	r8, [r6], #1
 801065e:	9b00      	ldr	r3, [sp, #0]
 8010660:	eba6 020a 	sub.w	r2, r6, sl
 8010664:	4293      	cmp	r3, r2
 8010666:	ddb3      	ble.n	80105d0 <_dtoa_r+0xad8>
 8010668:	4649      	mov	r1, r9
 801066a:	2300      	movs	r3, #0
 801066c:	220a      	movs	r2, #10
 801066e:	4658      	mov	r0, fp
 8010670:	f000 f968 	bl	8010944 <__multadd>
 8010674:	4681      	mov	r9, r0
 8010676:	e7ea      	b.n	801064e <_dtoa_r+0xb56>
 8010678:	08013aa0 	.word	0x08013aa0
 801067c:	08013a24 	.word	0x08013a24

08010680 <_free_r>:
 8010680:	b538      	push	{r3, r4, r5, lr}
 8010682:	4605      	mov	r5, r0
 8010684:	2900      	cmp	r1, #0
 8010686:	d041      	beq.n	801070c <_free_r+0x8c>
 8010688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801068c:	1f0c      	subs	r4, r1, #4
 801068e:	2b00      	cmp	r3, #0
 8010690:	bfb8      	it	lt
 8010692:	18e4      	addlt	r4, r4, r3
 8010694:	f000 f8e8 	bl	8010868 <__malloc_lock>
 8010698:	4a1d      	ldr	r2, [pc, #116]	@ (8010710 <_free_r+0x90>)
 801069a:	6813      	ldr	r3, [r2, #0]
 801069c:	b933      	cbnz	r3, 80106ac <_free_r+0x2c>
 801069e:	6063      	str	r3, [r4, #4]
 80106a0:	6014      	str	r4, [r2, #0]
 80106a2:	4628      	mov	r0, r5
 80106a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106a8:	f000 b8e4 	b.w	8010874 <__malloc_unlock>
 80106ac:	42a3      	cmp	r3, r4
 80106ae:	d908      	bls.n	80106c2 <_free_r+0x42>
 80106b0:	6820      	ldr	r0, [r4, #0]
 80106b2:	1821      	adds	r1, r4, r0
 80106b4:	428b      	cmp	r3, r1
 80106b6:	bf01      	itttt	eq
 80106b8:	6819      	ldreq	r1, [r3, #0]
 80106ba:	685b      	ldreq	r3, [r3, #4]
 80106bc:	1809      	addeq	r1, r1, r0
 80106be:	6021      	streq	r1, [r4, #0]
 80106c0:	e7ed      	b.n	801069e <_free_r+0x1e>
 80106c2:	461a      	mov	r2, r3
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	b10b      	cbz	r3, 80106cc <_free_r+0x4c>
 80106c8:	42a3      	cmp	r3, r4
 80106ca:	d9fa      	bls.n	80106c2 <_free_r+0x42>
 80106cc:	6811      	ldr	r1, [r2, #0]
 80106ce:	1850      	adds	r0, r2, r1
 80106d0:	42a0      	cmp	r0, r4
 80106d2:	d10b      	bne.n	80106ec <_free_r+0x6c>
 80106d4:	6820      	ldr	r0, [r4, #0]
 80106d6:	4401      	add	r1, r0
 80106d8:	1850      	adds	r0, r2, r1
 80106da:	4283      	cmp	r3, r0
 80106dc:	6011      	str	r1, [r2, #0]
 80106de:	d1e0      	bne.n	80106a2 <_free_r+0x22>
 80106e0:	6818      	ldr	r0, [r3, #0]
 80106e2:	685b      	ldr	r3, [r3, #4]
 80106e4:	6053      	str	r3, [r2, #4]
 80106e6:	4408      	add	r0, r1
 80106e8:	6010      	str	r0, [r2, #0]
 80106ea:	e7da      	b.n	80106a2 <_free_r+0x22>
 80106ec:	d902      	bls.n	80106f4 <_free_r+0x74>
 80106ee:	230c      	movs	r3, #12
 80106f0:	602b      	str	r3, [r5, #0]
 80106f2:	e7d6      	b.n	80106a2 <_free_r+0x22>
 80106f4:	6820      	ldr	r0, [r4, #0]
 80106f6:	1821      	adds	r1, r4, r0
 80106f8:	428b      	cmp	r3, r1
 80106fa:	bf04      	itt	eq
 80106fc:	6819      	ldreq	r1, [r3, #0]
 80106fe:	685b      	ldreq	r3, [r3, #4]
 8010700:	6063      	str	r3, [r4, #4]
 8010702:	bf04      	itt	eq
 8010704:	1809      	addeq	r1, r1, r0
 8010706:	6021      	streq	r1, [r4, #0]
 8010708:	6054      	str	r4, [r2, #4]
 801070a:	e7ca      	b.n	80106a2 <_free_r+0x22>
 801070c:	bd38      	pop	{r3, r4, r5, pc}
 801070e:	bf00      	nop
 8010710:	2000225c 	.word	0x2000225c

08010714 <malloc>:
 8010714:	4b02      	ldr	r3, [pc, #8]	@ (8010720 <malloc+0xc>)
 8010716:	4601      	mov	r1, r0
 8010718:	6818      	ldr	r0, [r3, #0]
 801071a:	f000 b825 	b.w	8010768 <_malloc_r>
 801071e:	bf00      	nop
 8010720:	2000019c 	.word	0x2000019c

08010724 <sbrk_aligned>:
 8010724:	b570      	push	{r4, r5, r6, lr}
 8010726:	4e0f      	ldr	r6, [pc, #60]	@ (8010764 <sbrk_aligned+0x40>)
 8010728:	460c      	mov	r4, r1
 801072a:	6831      	ldr	r1, [r6, #0]
 801072c:	4605      	mov	r5, r0
 801072e:	b911      	cbnz	r1, 8010736 <sbrk_aligned+0x12>
 8010730:	f002 fa26 	bl	8012b80 <_sbrk_r>
 8010734:	6030      	str	r0, [r6, #0]
 8010736:	4621      	mov	r1, r4
 8010738:	4628      	mov	r0, r5
 801073a:	f002 fa21 	bl	8012b80 <_sbrk_r>
 801073e:	1c43      	adds	r3, r0, #1
 8010740:	d103      	bne.n	801074a <sbrk_aligned+0x26>
 8010742:	f04f 34ff 	mov.w	r4, #4294967295
 8010746:	4620      	mov	r0, r4
 8010748:	bd70      	pop	{r4, r5, r6, pc}
 801074a:	1cc4      	adds	r4, r0, #3
 801074c:	f024 0403 	bic.w	r4, r4, #3
 8010750:	42a0      	cmp	r0, r4
 8010752:	d0f8      	beq.n	8010746 <sbrk_aligned+0x22>
 8010754:	1a21      	subs	r1, r4, r0
 8010756:	4628      	mov	r0, r5
 8010758:	f002 fa12 	bl	8012b80 <_sbrk_r>
 801075c:	3001      	adds	r0, #1
 801075e:	d1f2      	bne.n	8010746 <sbrk_aligned+0x22>
 8010760:	e7ef      	b.n	8010742 <sbrk_aligned+0x1e>
 8010762:	bf00      	nop
 8010764:	20002258 	.word	0x20002258

08010768 <_malloc_r>:
 8010768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801076c:	1ccd      	adds	r5, r1, #3
 801076e:	f025 0503 	bic.w	r5, r5, #3
 8010772:	3508      	adds	r5, #8
 8010774:	2d0c      	cmp	r5, #12
 8010776:	bf38      	it	cc
 8010778:	250c      	movcc	r5, #12
 801077a:	2d00      	cmp	r5, #0
 801077c:	4606      	mov	r6, r0
 801077e:	db01      	blt.n	8010784 <_malloc_r+0x1c>
 8010780:	42a9      	cmp	r1, r5
 8010782:	d904      	bls.n	801078e <_malloc_r+0x26>
 8010784:	230c      	movs	r3, #12
 8010786:	6033      	str	r3, [r6, #0]
 8010788:	2000      	movs	r0, #0
 801078a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801078e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010864 <_malloc_r+0xfc>
 8010792:	f000 f869 	bl	8010868 <__malloc_lock>
 8010796:	f8d8 3000 	ldr.w	r3, [r8]
 801079a:	461c      	mov	r4, r3
 801079c:	bb44      	cbnz	r4, 80107f0 <_malloc_r+0x88>
 801079e:	4629      	mov	r1, r5
 80107a0:	4630      	mov	r0, r6
 80107a2:	f7ff ffbf 	bl	8010724 <sbrk_aligned>
 80107a6:	1c43      	adds	r3, r0, #1
 80107a8:	4604      	mov	r4, r0
 80107aa:	d158      	bne.n	801085e <_malloc_r+0xf6>
 80107ac:	f8d8 4000 	ldr.w	r4, [r8]
 80107b0:	4627      	mov	r7, r4
 80107b2:	2f00      	cmp	r7, #0
 80107b4:	d143      	bne.n	801083e <_malloc_r+0xd6>
 80107b6:	2c00      	cmp	r4, #0
 80107b8:	d04b      	beq.n	8010852 <_malloc_r+0xea>
 80107ba:	6823      	ldr	r3, [r4, #0]
 80107bc:	4639      	mov	r1, r7
 80107be:	4630      	mov	r0, r6
 80107c0:	eb04 0903 	add.w	r9, r4, r3
 80107c4:	f002 f9dc 	bl	8012b80 <_sbrk_r>
 80107c8:	4581      	cmp	r9, r0
 80107ca:	d142      	bne.n	8010852 <_malloc_r+0xea>
 80107cc:	6821      	ldr	r1, [r4, #0]
 80107ce:	1a6d      	subs	r5, r5, r1
 80107d0:	4629      	mov	r1, r5
 80107d2:	4630      	mov	r0, r6
 80107d4:	f7ff ffa6 	bl	8010724 <sbrk_aligned>
 80107d8:	3001      	adds	r0, #1
 80107da:	d03a      	beq.n	8010852 <_malloc_r+0xea>
 80107dc:	6823      	ldr	r3, [r4, #0]
 80107de:	442b      	add	r3, r5
 80107e0:	6023      	str	r3, [r4, #0]
 80107e2:	f8d8 3000 	ldr.w	r3, [r8]
 80107e6:	685a      	ldr	r2, [r3, #4]
 80107e8:	bb62      	cbnz	r2, 8010844 <_malloc_r+0xdc>
 80107ea:	f8c8 7000 	str.w	r7, [r8]
 80107ee:	e00f      	b.n	8010810 <_malloc_r+0xa8>
 80107f0:	6822      	ldr	r2, [r4, #0]
 80107f2:	1b52      	subs	r2, r2, r5
 80107f4:	d420      	bmi.n	8010838 <_malloc_r+0xd0>
 80107f6:	2a0b      	cmp	r2, #11
 80107f8:	d917      	bls.n	801082a <_malloc_r+0xc2>
 80107fa:	1961      	adds	r1, r4, r5
 80107fc:	42a3      	cmp	r3, r4
 80107fe:	6025      	str	r5, [r4, #0]
 8010800:	bf18      	it	ne
 8010802:	6059      	strne	r1, [r3, #4]
 8010804:	6863      	ldr	r3, [r4, #4]
 8010806:	bf08      	it	eq
 8010808:	f8c8 1000 	streq.w	r1, [r8]
 801080c:	5162      	str	r2, [r4, r5]
 801080e:	604b      	str	r3, [r1, #4]
 8010810:	4630      	mov	r0, r6
 8010812:	f000 f82f 	bl	8010874 <__malloc_unlock>
 8010816:	f104 000b 	add.w	r0, r4, #11
 801081a:	1d23      	adds	r3, r4, #4
 801081c:	f020 0007 	bic.w	r0, r0, #7
 8010820:	1ac2      	subs	r2, r0, r3
 8010822:	bf1c      	itt	ne
 8010824:	1a1b      	subne	r3, r3, r0
 8010826:	50a3      	strne	r3, [r4, r2]
 8010828:	e7af      	b.n	801078a <_malloc_r+0x22>
 801082a:	6862      	ldr	r2, [r4, #4]
 801082c:	42a3      	cmp	r3, r4
 801082e:	bf0c      	ite	eq
 8010830:	f8c8 2000 	streq.w	r2, [r8]
 8010834:	605a      	strne	r2, [r3, #4]
 8010836:	e7eb      	b.n	8010810 <_malloc_r+0xa8>
 8010838:	4623      	mov	r3, r4
 801083a:	6864      	ldr	r4, [r4, #4]
 801083c:	e7ae      	b.n	801079c <_malloc_r+0x34>
 801083e:	463c      	mov	r4, r7
 8010840:	687f      	ldr	r7, [r7, #4]
 8010842:	e7b6      	b.n	80107b2 <_malloc_r+0x4a>
 8010844:	461a      	mov	r2, r3
 8010846:	685b      	ldr	r3, [r3, #4]
 8010848:	42a3      	cmp	r3, r4
 801084a:	d1fb      	bne.n	8010844 <_malloc_r+0xdc>
 801084c:	2300      	movs	r3, #0
 801084e:	6053      	str	r3, [r2, #4]
 8010850:	e7de      	b.n	8010810 <_malloc_r+0xa8>
 8010852:	230c      	movs	r3, #12
 8010854:	6033      	str	r3, [r6, #0]
 8010856:	4630      	mov	r0, r6
 8010858:	f000 f80c 	bl	8010874 <__malloc_unlock>
 801085c:	e794      	b.n	8010788 <_malloc_r+0x20>
 801085e:	6005      	str	r5, [r0, #0]
 8010860:	e7d6      	b.n	8010810 <_malloc_r+0xa8>
 8010862:	bf00      	nop
 8010864:	2000225c 	.word	0x2000225c

08010868 <__malloc_lock>:
 8010868:	4801      	ldr	r0, [pc, #4]	@ (8010870 <__malloc_lock+0x8>)
 801086a:	f7ff b8a4 	b.w	800f9b6 <__retarget_lock_acquire_recursive>
 801086e:	bf00      	nop
 8010870:	20002254 	.word	0x20002254

08010874 <__malloc_unlock>:
 8010874:	4801      	ldr	r0, [pc, #4]	@ (801087c <__malloc_unlock+0x8>)
 8010876:	f7ff b89f 	b.w	800f9b8 <__retarget_lock_release_recursive>
 801087a:	bf00      	nop
 801087c:	20002254 	.word	0x20002254

08010880 <_Balloc>:
 8010880:	b570      	push	{r4, r5, r6, lr}
 8010882:	69c6      	ldr	r6, [r0, #28]
 8010884:	4604      	mov	r4, r0
 8010886:	460d      	mov	r5, r1
 8010888:	b976      	cbnz	r6, 80108a8 <_Balloc+0x28>
 801088a:	2010      	movs	r0, #16
 801088c:	f7ff ff42 	bl	8010714 <malloc>
 8010890:	4602      	mov	r2, r0
 8010892:	61e0      	str	r0, [r4, #28]
 8010894:	b920      	cbnz	r0, 80108a0 <_Balloc+0x20>
 8010896:	4b18      	ldr	r3, [pc, #96]	@ (80108f8 <_Balloc+0x78>)
 8010898:	4818      	ldr	r0, [pc, #96]	@ (80108fc <_Balloc+0x7c>)
 801089a:	216b      	movs	r1, #107	@ 0x6b
 801089c:	f002 f988 	bl	8012bb0 <__assert_func>
 80108a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80108a4:	6006      	str	r6, [r0, #0]
 80108a6:	60c6      	str	r6, [r0, #12]
 80108a8:	69e6      	ldr	r6, [r4, #28]
 80108aa:	68f3      	ldr	r3, [r6, #12]
 80108ac:	b183      	cbz	r3, 80108d0 <_Balloc+0x50>
 80108ae:	69e3      	ldr	r3, [r4, #28]
 80108b0:	68db      	ldr	r3, [r3, #12]
 80108b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80108b6:	b9b8      	cbnz	r0, 80108e8 <_Balloc+0x68>
 80108b8:	2101      	movs	r1, #1
 80108ba:	fa01 f605 	lsl.w	r6, r1, r5
 80108be:	1d72      	adds	r2, r6, #5
 80108c0:	0092      	lsls	r2, r2, #2
 80108c2:	4620      	mov	r0, r4
 80108c4:	f002 f992 	bl	8012bec <_calloc_r>
 80108c8:	b160      	cbz	r0, 80108e4 <_Balloc+0x64>
 80108ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80108ce:	e00e      	b.n	80108ee <_Balloc+0x6e>
 80108d0:	2221      	movs	r2, #33	@ 0x21
 80108d2:	2104      	movs	r1, #4
 80108d4:	4620      	mov	r0, r4
 80108d6:	f002 f989 	bl	8012bec <_calloc_r>
 80108da:	69e3      	ldr	r3, [r4, #28]
 80108dc:	60f0      	str	r0, [r6, #12]
 80108de:	68db      	ldr	r3, [r3, #12]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d1e4      	bne.n	80108ae <_Balloc+0x2e>
 80108e4:	2000      	movs	r0, #0
 80108e6:	bd70      	pop	{r4, r5, r6, pc}
 80108e8:	6802      	ldr	r2, [r0, #0]
 80108ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80108ee:	2300      	movs	r3, #0
 80108f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80108f4:	e7f7      	b.n	80108e6 <_Balloc+0x66>
 80108f6:	bf00      	nop
 80108f8:	08013a31 	.word	0x08013a31
 80108fc:	08013ab1 	.word	0x08013ab1

08010900 <_Bfree>:
 8010900:	b570      	push	{r4, r5, r6, lr}
 8010902:	69c6      	ldr	r6, [r0, #28]
 8010904:	4605      	mov	r5, r0
 8010906:	460c      	mov	r4, r1
 8010908:	b976      	cbnz	r6, 8010928 <_Bfree+0x28>
 801090a:	2010      	movs	r0, #16
 801090c:	f7ff ff02 	bl	8010714 <malloc>
 8010910:	4602      	mov	r2, r0
 8010912:	61e8      	str	r0, [r5, #28]
 8010914:	b920      	cbnz	r0, 8010920 <_Bfree+0x20>
 8010916:	4b09      	ldr	r3, [pc, #36]	@ (801093c <_Bfree+0x3c>)
 8010918:	4809      	ldr	r0, [pc, #36]	@ (8010940 <_Bfree+0x40>)
 801091a:	218f      	movs	r1, #143	@ 0x8f
 801091c:	f002 f948 	bl	8012bb0 <__assert_func>
 8010920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010924:	6006      	str	r6, [r0, #0]
 8010926:	60c6      	str	r6, [r0, #12]
 8010928:	b13c      	cbz	r4, 801093a <_Bfree+0x3a>
 801092a:	69eb      	ldr	r3, [r5, #28]
 801092c:	6862      	ldr	r2, [r4, #4]
 801092e:	68db      	ldr	r3, [r3, #12]
 8010930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010934:	6021      	str	r1, [r4, #0]
 8010936:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801093a:	bd70      	pop	{r4, r5, r6, pc}
 801093c:	08013a31 	.word	0x08013a31
 8010940:	08013ab1 	.word	0x08013ab1

08010944 <__multadd>:
 8010944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010948:	690d      	ldr	r5, [r1, #16]
 801094a:	4607      	mov	r7, r0
 801094c:	460c      	mov	r4, r1
 801094e:	461e      	mov	r6, r3
 8010950:	f101 0c14 	add.w	ip, r1, #20
 8010954:	2000      	movs	r0, #0
 8010956:	f8dc 3000 	ldr.w	r3, [ip]
 801095a:	b299      	uxth	r1, r3
 801095c:	fb02 6101 	mla	r1, r2, r1, r6
 8010960:	0c1e      	lsrs	r6, r3, #16
 8010962:	0c0b      	lsrs	r3, r1, #16
 8010964:	fb02 3306 	mla	r3, r2, r6, r3
 8010968:	b289      	uxth	r1, r1
 801096a:	3001      	adds	r0, #1
 801096c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010970:	4285      	cmp	r5, r0
 8010972:	f84c 1b04 	str.w	r1, [ip], #4
 8010976:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801097a:	dcec      	bgt.n	8010956 <__multadd+0x12>
 801097c:	b30e      	cbz	r6, 80109c2 <__multadd+0x7e>
 801097e:	68a3      	ldr	r3, [r4, #8]
 8010980:	42ab      	cmp	r3, r5
 8010982:	dc19      	bgt.n	80109b8 <__multadd+0x74>
 8010984:	6861      	ldr	r1, [r4, #4]
 8010986:	4638      	mov	r0, r7
 8010988:	3101      	adds	r1, #1
 801098a:	f7ff ff79 	bl	8010880 <_Balloc>
 801098e:	4680      	mov	r8, r0
 8010990:	b928      	cbnz	r0, 801099e <__multadd+0x5a>
 8010992:	4602      	mov	r2, r0
 8010994:	4b0c      	ldr	r3, [pc, #48]	@ (80109c8 <__multadd+0x84>)
 8010996:	480d      	ldr	r0, [pc, #52]	@ (80109cc <__multadd+0x88>)
 8010998:	21ba      	movs	r1, #186	@ 0xba
 801099a:	f002 f909 	bl	8012bb0 <__assert_func>
 801099e:	6922      	ldr	r2, [r4, #16]
 80109a0:	3202      	adds	r2, #2
 80109a2:	f104 010c 	add.w	r1, r4, #12
 80109a6:	0092      	lsls	r2, r2, #2
 80109a8:	300c      	adds	r0, #12
 80109aa:	f7ff f806 	bl	800f9ba <memcpy>
 80109ae:	4621      	mov	r1, r4
 80109b0:	4638      	mov	r0, r7
 80109b2:	f7ff ffa5 	bl	8010900 <_Bfree>
 80109b6:	4644      	mov	r4, r8
 80109b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80109bc:	3501      	adds	r5, #1
 80109be:	615e      	str	r6, [r3, #20]
 80109c0:	6125      	str	r5, [r4, #16]
 80109c2:	4620      	mov	r0, r4
 80109c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109c8:	08013aa0 	.word	0x08013aa0
 80109cc:	08013ab1 	.word	0x08013ab1

080109d0 <__s2b>:
 80109d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109d4:	460c      	mov	r4, r1
 80109d6:	4615      	mov	r5, r2
 80109d8:	461f      	mov	r7, r3
 80109da:	2209      	movs	r2, #9
 80109dc:	3308      	adds	r3, #8
 80109de:	4606      	mov	r6, r0
 80109e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80109e4:	2100      	movs	r1, #0
 80109e6:	2201      	movs	r2, #1
 80109e8:	429a      	cmp	r2, r3
 80109ea:	db09      	blt.n	8010a00 <__s2b+0x30>
 80109ec:	4630      	mov	r0, r6
 80109ee:	f7ff ff47 	bl	8010880 <_Balloc>
 80109f2:	b940      	cbnz	r0, 8010a06 <__s2b+0x36>
 80109f4:	4602      	mov	r2, r0
 80109f6:	4b19      	ldr	r3, [pc, #100]	@ (8010a5c <__s2b+0x8c>)
 80109f8:	4819      	ldr	r0, [pc, #100]	@ (8010a60 <__s2b+0x90>)
 80109fa:	21d3      	movs	r1, #211	@ 0xd3
 80109fc:	f002 f8d8 	bl	8012bb0 <__assert_func>
 8010a00:	0052      	lsls	r2, r2, #1
 8010a02:	3101      	adds	r1, #1
 8010a04:	e7f0      	b.n	80109e8 <__s2b+0x18>
 8010a06:	9b08      	ldr	r3, [sp, #32]
 8010a08:	6143      	str	r3, [r0, #20]
 8010a0a:	2d09      	cmp	r5, #9
 8010a0c:	f04f 0301 	mov.w	r3, #1
 8010a10:	6103      	str	r3, [r0, #16]
 8010a12:	dd16      	ble.n	8010a42 <__s2b+0x72>
 8010a14:	f104 0909 	add.w	r9, r4, #9
 8010a18:	46c8      	mov	r8, r9
 8010a1a:	442c      	add	r4, r5
 8010a1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010a20:	4601      	mov	r1, r0
 8010a22:	3b30      	subs	r3, #48	@ 0x30
 8010a24:	220a      	movs	r2, #10
 8010a26:	4630      	mov	r0, r6
 8010a28:	f7ff ff8c 	bl	8010944 <__multadd>
 8010a2c:	45a0      	cmp	r8, r4
 8010a2e:	d1f5      	bne.n	8010a1c <__s2b+0x4c>
 8010a30:	f1a5 0408 	sub.w	r4, r5, #8
 8010a34:	444c      	add	r4, r9
 8010a36:	1b2d      	subs	r5, r5, r4
 8010a38:	1963      	adds	r3, r4, r5
 8010a3a:	42bb      	cmp	r3, r7
 8010a3c:	db04      	blt.n	8010a48 <__s2b+0x78>
 8010a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a42:	340a      	adds	r4, #10
 8010a44:	2509      	movs	r5, #9
 8010a46:	e7f6      	b.n	8010a36 <__s2b+0x66>
 8010a48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010a4c:	4601      	mov	r1, r0
 8010a4e:	3b30      	subs	r3, #48	@ 0x30
 8010a50:	220a      	movs	r2, #10
 8010a52:	4630      	mov	r0, r6
 8010a54:	f7ff ff76 	bl	8010944 <__multadd>
 8010a58:	e7ee      	b.n	8010a38 <__s2b+0x68>
 8010a5a:	bf00      	nop
 8010a5c:	08013aa0 	.word	0x08013aa0
 8010a60:	08013ab1 	.word	0x08013ab1

08010a64 <__hi0bits>:
 8010a64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010a68:	4603      	mov	r3, r0
 8010a6a:	bf36      	itet	cc
 8010a6c:	0403      	lslcc	r3, r0, #16
 8010a6e:	2000      	movcs	r0, #0
 8010a70:	2010      	movcc	r0, #16
 8010a72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010a76:	bf3c      	itt	cc
 8010a78:	021b      	lslcc	r3, r3, #8
 8010a7a:	3008      	addcc	r0, #8
 8010a7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010a80:	bf3c      	itt	cc
 8010a82:	011b      	lslcc	r3, r3, #4
 8010a84:	3004      	addcc	r0, #4
 8010a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010a8a:	bf3c      	itt	cc
 8010a8c:	009b      	lslcc	r3, r3, #2
 8010a8e:	3002      	addcc	r0, #2
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	db05      	blt.n	8010aa0 <__hi0bits+0x3c>
 8010a94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010a98:	f100 0001 	add.w	r0, r0, #1
 8010a9c:	bf08      	it	eq
 8010a9e:	2020      	moveq	r0, #32
 8010aa0:	4770      	bx	lr

08010aa2 <__lo0bits>:
 8010aa2:	6803      	ldr	r3, [r0, #0]
 8010aa4:	4602      	mov	r2, r0
 8010aa6:	f013 0007 	ands.w	r0, r3, #7
 8010aaa:	d00b      	beq.n	8010ac4 <__lo0bits+0x22>
 8010aac:	07d9      	lsls	r1, r3, #31
 8010aae:	d421      	bmi.n	8010af4 <__lo0bits+0x52>
 8010ab0:	0798      	lsls	r0, r3, #30
 8010ab2:	bf49      	itett	mi
 8010ab4:	085b      	lsrmi	r3, r3, #1
 8010ab6:	089b      	lsrpl	r3, r3, #2
 8010ab8:	2001      	movmi	r0, #1
 8010aba:	6013      	strmi	r3, [r2, #0]
 8010abc:	bf5c      	itt	pl
 8010abe:	6013      	strpl	r3, [r2, #0]
 8010ac0:	2002      	movpl	r0, #2
 8010ac2:	4770      	bx	lr
 8010ac4:	b299      	uxth	r1, r3
 8010ac6:	b909      	cbnz	r1, 8010acc <__lo0bits+0x2a>
 8010ac8:	0c1b      	lsrs	r3, r3, #16
 8010aca:	2010      	movs	r0, #16
 8010acc:	b2d9      	uxtb	r1, r3
 8010ace:	b909      	cbnz	r1, 8010ad4 <__lo0bits+0x32>
 8010ad0:	3008      	adds	r0, #8
 8010ad2:	0a1b      	lsrs	r3, r3, #8
 8010ad4:	0719      	lsls	r1, r3, #28
 8010ad6:	bf04      	itt	eq
 8010ad8:	091b      	lsreq	r3, r3, #4
 8010ada:	3004      	addeq	r0, #4
 8010adc:	0799      	lsls	r1, r3, #30
 8010ade:	bf04      	itt	eq
 8010ae0:	089b      	lsreq	r3, r3, #2
 8010ae2:	3002      	addeq	r0, #2
 8010ae4:	07d9      	lsls	r1, r3, #31
 8010ae6:	d403      	bmi.n	8010af0 <__lo0bits+0x4e>
 8010ae8:	085b      	lsrs	r3, r3, #1
 8010aea:	f100 0001 	add.w	r0, r0, #1
 8010aee:	d003      	beq.n	8010af8 <__lo0bits+0x56>
 8010af0:	6013      	str	r3, [r2, #0]
 8010af2:	4770      	bx	lr
 8010af4:	2000      	movs	r0, #0
 8010af6:	4770      	bx	lr
 8010af8:	2020      	movs	r0, #32
 8010afa:	4770      	bx	lr

08010afc <__i2b>:
 8010afc:	b510      	push	{r4, lr}
 8010afe:	460c      	mov	r4, r1
 8010b00:	2101      	movs	r1, #1
 8010b02:	f7ff febd 	bl	8010880 <_Balloc>
 8010b06:	4602      	mov	r2, r0
 8010b08:	b928      	cbnz	r0, 8010b16 <__i2b+0x1a>
 8010b0a:	4b05      	ldr	r3, [pc, #20]	@ (8010b20 <__i2b+0x24>)
 8010b0c:	4805      	ldr	r0, [pc, #20]	@ (8010b24 <__i2b+0x28>)
 8010b0e:	f240 1145 	movw	r1, #325	@ 0x145
 8010b12:	f002 f84d 	bl	8012bb0 <__assert_func>
 8010b16:	2301      	movs	r3, #1
 8010b18:	6144      	str	r4, [r0, #20]
 8010b1a:	6103      	str	r3, [r0, #16]
 8010b1c:	bd10      	pop	{r4, pc}
 8010b1e:	bf00      	nop
 8010b20:	08013aa0 	.word	0x08013aa0
 8010b24:	08013ab1 	.word	0x08013ab1

08010b28 <__multiply>:
 8010b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b2c:	4614      	mov	r4, r2
 8010b2e:	690a      	ldr	r2, [r1, #16]
 8010b30:	6923      	ldr	r3, [r4, #16]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	bfa8      	it	ge
 8010b36:	4623      	movge	r3, r4
 8010b38:	460f      	mov	r7, r1
 8010b3a:	bfa4      	itt	ge
 8010b3c:	460c      	movge	r4, r1
 8010b3e:	461f      	movge	r7, r3
 8010b40:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010b44:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010b48:	68a3      	ldr	r3, [r4, #8]
 8010b4a:	6861      	ldr	r1, [r4, #4]
 8010b4c:	eb0a 0609 	add.w	r6, sl, r9
 8010b50:	42b3      	cmp	r3, r6
 8010b52:	b085      	sub	sp, #20
 8010b54:	bfb8      	it	lt
 8010b56:	3101      	addlt	r1, #1
 8010b58:	f7ff fe92 	bl	8010880 <_Balloc>
 8010b5c:	b930      	cbnz	r0, 8010b6c <__multiply+0x44>
 8010b5e:	4602      	mov	r2, r0
 8010b60:	4b44      	ldr	r3, [pc, #272]	@ (8010c74 <__multiply+0x14c>)
 8010b62:	4845      	ldr	r0, [pc, #276]	@ (8010c78 <__multiply+0x150>)
 8010b64:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010b68:	f002 f822 	bl	8012bb0 <__assert_func>
 8010b6c:	f100 0514 	add.w	r5, r0, #20
 8010b70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010b74:	462b      	mov	r3, r5
 8010b76:	2200      	movs	r2, #0
 8010b78:	4543      	cmp	r3, r8
 8010b7a:	d321      	bcc.n	8010bc0 <__multiply+0x98>
 8010b7c:	f107 0114 	add.w	r1, r7, #20
 8010b80:	f104 0214 	add.w	r2, r4, #20
 8010b84:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010b88:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010b8c:	9302      	str	r3, [sp, #8]
 8010b8e:	1b13      	subs	r3, r2, r4
 8010b90:	3b15      	subs	r3, #21
 8010b92:	f023 0303 	bic.w	r3, r3, #3
 8010b96:	3304      	adds	r3, #4
 8010b98:	f104 0715 	add.w	r7, r4, #21
 8010b9c:	42ba      	cmp	r2, r7
 8010b9e:	bf38      	it	cc
 8010ba0:	2304      	movcc	r3, #4
 8010ba2:	9301      	str	r3, [sp, #4]
 8010ba4:	9b02      	ldr	r3, [sp, #8]
 8010ba6:	9103      	str	r1, [sp, #12]
 8010ba8:	428b      	cmp	r3, r1
 8010baa:	d80c      	bhi.n	8010bc6 <__multiply+0x9e>
 8010bac:	2e00      	cmp	r6, #0
 8010bae:	dd03      	ble.n	8010bb8 <__multiply+0x90>
 8010bb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d05b      	beq.n	8010c70 <__multiply+0x148>
 8010bb8:	6106      	str	r6, [r0, #16]
 8010bba:	b005      	add	sp, #20
 8010bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bc0:	f843 2b04 	str.w	r2, [r3], #4
 8010bc4:	e7d8      	b.n	8010b78 <__multiply+0x50>
 8010bc6:	f8b1 a000 	ldrh.w	sl, [r1]
 8010bca:	f1ba 0f00 	cmp.w	sl, #0
 8010bce:	d024      	beq.n	8010c1a <__multiply+0xf2>
 8010bd0:	f104 0e14 	add.w	lr, r4, #20
 8010bd4:	46a9      	mov	r9, r5
 8010bd6:	f04f 0c00 	mov.w	ip, #0
 8010bda:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010bde:	f8d9 3000 	ldr.w	r3, [r9]
 8010be2:	fa1f fb87 	uxth.w	fp, r7
 8010be6:	b29b      	uxth	r3, r3
 8010be8:	fb0a 330b 	mla	r3, sl, fp, r3
 8010bec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010bf0:	f8d9 7000 	ldr.w	r7, [r9]
 8010bf4:	4463      	add	r3, ip
 8010bf6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010bfa:	fb0a c70b 	mla	r7, sl, fp, ip
 8010bfe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010c02:	b29b      	uxth	r3, r3
 8010c04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010c08:	4572      	cmp	r2, lr
 8010c0a:	f849 3b04 	str.w	r3, [r9], #4
 8010c0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010c12:	d8e2      	bhi.n	8010bda <__multiply+0xb2>
 8010c14:	9b01      	ldr	r3, [sp, #4]
 8010c16:	f845 c003 	str.w	ip, [r5, r3]
 8010c1a:	9b03      	ldr	r3, [sp, #12]
 8010c1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010c20:	3104      	adds	r1, #4
 8010c22:	f1b9 0f00 	cmp.w	r9, #0
 8010c26:	d021      	beq.n	8010c6c <__multiply+0x144>
 8010c28:	682b      	ldr	r3, [r5, #0]
 8010c2a:	f104 0c14 	add.w	ip, r4, #20
 8010c2e:	46ae      	mov	lr, r5
 8010c30:	f04f 0a00 	mov.w	sl, #0
 8010c34:	f8bc b000 	ldrh.w	fp, [ip]
 8010c38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010c3c:	fb09 770b 	mla	r7, r9, fp, r7
 8010c40:	4457      	add	r7, sl
 8010c42:	b29b      	uxth	r3, r3
 8010c44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010c48:	f84e 3b04 	str.w	r3, [lr], #4
 8010c4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010c50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010c54:	f8be 3000 	ldrh.w	r3, [lr]
 8010c58:	fb09 330a 	mla	r3, r9, sl, r3
 8010c5c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010c60:	4562      	cmp	r2, ip
 8010c62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010c66:	d8e5      	bhi.n	8010c34 <__multiply+0x10c>
 8010c68:	9f01      	ldr	r7, [sp, #4]
 8010c6a:	51eb      	str	r3, [r5, r7]
 8010c6c:	3504      	adds	r5, #4
 8010c6e:	e799      	b.n	8010ba4 <__multiply+0x7c>
 8010c70:	3e01      	subs	r6, #1
 8010c72:	e79b      	b.n	8010bac <__multiply+0x84>
 8010c74:	08013aa0 	.word	0x08013aa0
 8010c78:	08013ab1 	.word	0x08013ab1

08010c7c <__pow5mult>:
 8010c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c80:	4615      	mov	r5, r2
 8010c82:	f012 0203 	ands.w	r2, r2, #3
 8010c86:	4607      	mov	r7, r0
 8010c88:	460e      	mov	r6, r1
 8010c8a:	d007      	beq.n	8010c9c <__pow5mult+0x20>
 8010c8c:	4c25      	ldr	r4, [pc, #148]	@ (8010d24 <__pow5mult+0xa8>)
 8010c8e:	3a01      	subs	r2, #1
 8010c90:	2300      	movs	r3, #0
 8010c92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010c96:	f7ff fe55 	bl	8010944 <__multadd>
 8010c9a:	4606      	mov	r6, r0
 8010c9c:	10ad      	asrs	r5, r5, #2
 8010c9e:	d03d      	beq.n	8010d1c <__pow5mult+0xa0>
 8010ca0:	69fc      	ldr	r4, [r7, #28]
 8010ca2:	b97c      	cbnz	r4, 8010cc4 <__pow5mult+0x48>
 8010ca4:	2010      	movs	r0, #16
 8010ca6:	f7ff fd35 	bl	8010714 <malloc>
 8010caa:	4602      	mov	r2, r0
 8010cac:	61f8      	str	r0, [r7, #28]
 8010cae:	b928      	cbnz	r0, 8010cbc <__pow5mult+0x40>
 8010cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8010d28 <__pow5mult+0xac>)
 8010cb2:	481e      	ldr	r0, [pc, #120]	@ (8010d2c <__pow5mult+0xb0>)
 8010cb4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010cb8:	f001 ff7a 	bl	8012bb0 <__assert_func>
 8010cbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010cc0:	6004      	str	r4, [r0, #0]
 8010cc2:	60c4      	str	r4, [r0, #12]
 8010cc4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010cc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010ccc:	b94c      	cbnz	r4, 8010ce2 <__pow5mult+0x66>
 8010cce:	f240 2171 	movw	r1, #625	@ 0x271
 8010cd2:	4638      	mov	r0, r7
 8010cd4:	f7ff ff12 	bl	8010afc <__i2b>
 8010cd8:	2300      	movs	r3, #0
 8010cda:	f8c8 0008 	str.w	r0, [r8, #8]
 8010cde:	4604      	mov	r4, r0
 8010ce0:	6003      	str	r3, [r0, #0]
 8010ce2:	f04f 0900 	mov.w	r9, #0
 8010ce6:	07eb      	lsls	r3, r5, #31
 8010ce8:	d50a      	bpl.n	8010d00 <__pow5mult+0x84>
 8010cea:	4631      	mov	r1, r6
 8010cec:	4622      	mov	r2, r4
 8010cee:	4638      	mov	r0, r7
 8010cf0:	f7ff ff1a 	bl	8010b28 <__multiply>
 8010cf4:	4631      	mov	r1, r6
 8010cf6:	4680      	mov	r8, r0
 8010cf8:	4638      	mov	r0, r7
 8010cfa:	f7ff fe01 	bl	8010900 <_Bfree>
 8010cfe:	4646      	mov	r6, r8
 8010d00:	106d      	asrs	r5, r5, #1
 8010d02:	d00b      	beq.n	8010d1c <__pow5mult+0xa0>
 8010d04:	6820      	ldr	r0, [r4, #0]
 8010d06:	b938      	cbnz	r0, 8010d18 <__pow5mult+0x9c>
 8010d08:	4622      	mov	r2, r4
 8010d0a:	4621      	mov	r1, r4
 8010d0c:	4638      	mov	r0, r7
 8010d0e:	f7ff ff0b 	bl	8010b28 <__multiply>
 8010d12:	6020      	str	r0, [r4, #0]
 8010d14:	f8c0 9000 	str.w	r9, [r0]
 8010d18:	4604      	mov	r4, r0
 8010d1a:	e7e4      	b.n	8010ce6 <__pow5mult+0x6a>
 8010d1c:	4630      	mov	r0, r6
 8010d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d22:	bf00      	nop
 8010d24:	08013b0c 	.word	0x08013b0c
 8010d28:	08013a31 	.word	0x08013a31
 8010d2c:	08013ab1 	.word	0x08013ab1

08010d30 <__lshift>:
 8010d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d34:	460c      	mov	r4, r1
 8010d36:	6849      	ldr	r1, [r1, #4]
 8010d38:	6923      	ldr	r3, [r4, #16]
 8010d3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010d3e:	68a3      	ldr	r3, [r4, #8]
 8010d40:	4607      	mov	r7, r0
 8010d42:	4691      	mov	r9, r2
 8010d44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010d48:	f108 0601 	add.w	r6, r8, #1
 8010d4c:	42b3      	cmp	r3, r6
 8010d4e:	db0b      	blt.n	8010d68 <__lshift+0x38>
 8010d50:	4638      	mov	r0, r7
 8010d52:	f7ff fd95 	bl	8010880 <_Balloc>
 8010d56:	4605      	mov	r5, r0
 8010d58:	b948      	cbnz	r0, 8010d6e <__lshift+0x3e>
 8010d5a:	4602      	mov	r2, r0
 8010d5c:	4b28      	ldr	r3, [pc, #160]	@ (8010e00 <__lshift+0xd0>)
 8010d5e:	4829      	ldr	r0, [pc, #164]	@ (8010e04 <__lshift+0xd4>)
 8010d60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010d64:	f001 ff24 	bl	8012bb0 <__assert_func>
 8010d68:	3101      	adds	r1, #1
 8010d6a:	005b      	lsls	r3, r3, #1
 8010d6c:	e7ee      	b.n	8010d4c <__lshift+0x1c>
 8010d6e:	2300      	movs	r3, #0
 8010d70:	f100 0114 	add.w	r1, r0, #20
 8010d74:	f100 0210 	add.w	r2, r0, #16
 8010d78:	4618      	mov	r0, r3
 8010d7a:	4553      	cmp	r3, sl
 8010d7c:	db33      	blt.n	8010de6 <__lshift+0xb6>
 8010d7e:	6920      	ldr	r0, [r4, #16]
 8010d80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010d84:	f104 0314 	add.w	r3, r4, #20
 8010d88:	f019 091f 	ands.w	r9, r9, #31
 8010d8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010d90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010d94:	d02b      	beq.n	8010dee <__lshift+0xbe>
 8010d96:	f1c9 0e20 	rsb	lr, r9, #32
 8010d9a:	468a      	mov	sl, r1
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	6818      	ldr	r0, [r3, #0]
 8010da0:	fa00 f009 	lsl.w	r0, r0, r9
 8010da4:	4310      	orrs	r0, r2
 8010da6:	f84a 0b04 	str.w	r0, [sl], #4
 8010daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8010dae:	459c      	cmp	ip, r3
 8010db0:	fa22 f20e 	lsr.w	r2, r2, lr
 8010db4:	d8f3      	bhi.n	8010d9e <__lshift+0x6e>
 8010db6:	ebac 0304 	sub.w	r3, ip, r4
 8010dba:	3b15      	subs	r3, #21
 8010dbc:	f023 0303 	bic.w	r3, r3, #3
 8010dc0:	3304      	adds	r3, #4
 8010dc2:	f104 0015 	add.w	r0, r4, #21
 8010dc6:	4584      	cmp	ip, r0
 8010dc8:	bf38      	it	cc
 8010dca:	2304      	movcc	r3, #4
 8010dcc:	50ca      	str	r2, [r1, r3]
 8010dce:	b10a      	cbz	r2, 8010dd4 <__lshift+0xa4>
 8010dd0:	f108 0602 	add.w	r6, r8, #2
 8010dd4:	3e01      	subs	r6, #1
 8010dd6:	4638      	mov	r0, r7
 8010dd8:	612e      	str	r6, [r5, #16]
 8010dda:	4621      	mov	r1, r4
 8010ddc:	f7ff fd90 	bl	8010900 <_Bfree>
 8010de0:	4628      	mov	r0, r5
 8010de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010de6:	f842 0f04 	str.w	r0, [r2, #4]!
 8010dea:	3301      	adds	r3, #1
 8010dec:	e7c5      	b.n	8010d7a <__lshift+0x4a>
 8010dee:	3904      	subs	r1, #4
 8010df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010df4:	f841 2f04 	str.w	r2, [r1, #4]!
 8010df8:	459c      	cmp	ip, r3
 8010dfa:	d8f9      	bhi.n	8010df0 <__lshift+0xc0>
 8010dfc:	e7ea      	b.n	8010dd4 <__lshift+0xa4>
 8010dfe:	bf00      	nop
 8010e00:	08013aa0 	.word	0x08013aa0
 8010e04:	08013ab1 	.word	0x08013ab1

08010e08 <__mcmp>:
 8010e08:	690a      	ldr	r2, [r1, #16]
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	6900      	ldr	r0, [r0, #16]
 8010e0e:	1a80      	subs	r0, r0, r2
 8010e10:	b530      	push	{r4, r5, lr}
 8010e12:	d10e      	bne.n	8010e32 <__mcmp+0x2a>
 8010e14:	3314      	adds	r3, #20
 8010e16:	3114      	adds	r1, #20
 8010e18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010e1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010e20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010e24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010e28:	4295      	cmp	r5, r2
 8010e2a:	d003      	beq.n	8010e34 <__mcmp+0x2c>
 8010e2c:	d205      	bcs.n	8010e3a <__mcmp+0x32>
 8010e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e32:	bd30      	pop	{r4, r5, pc}
 8010e34:	42a3      	cmp	r3, r4
 8010e36:	d3f3      	bcc.n	8010e20 <__mcmp+0x18>
 8010e38:	e7fb      	b.n	8010e32 <__mcmp+0x2a>
 8010e3a:	2001      	movs	r0, #1
 8010e3c:	e7f9      	b.n	8010e32 <__mcmp+0x2a>
	...

08010e40 <__mdiff>:
 8010e40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e44:	4689      	mov	r9, r1
 8010e46:	4606      	mov	r6, r0
 8010e48:	4611      	mov	r1, r2
 8010e4a:	4648      	mov	r0, r9
 8010e4c:	4614      	mov	r4, r2
 8010e4e:	f7ff ffdb 	bl	8010e08 <__mcmp>
 8010e52:	1e05      	subs	r5, r0, #0
 8010e54:	d112      	bne.n	8010e7c <__mdiff+0x3c>
 8010e56:	4629      	mov	r1, r5
 8010e58:	4630      	mov	r0, r6
 8010e5a:	f7ff fd11 	bl	8010880 <_Balloc>
 8010e5e:	4602      	mov	r2, r0
 8010e60:	b928      	cbnz	r0, 8010e6e <__mdiff+0x2e>
 8010e62:	4b3f      	ldr	r3, [pc, #252]	@ (8010f60 <__mdiff+0x120>)
 8010e64:	f240 2137 	movw	r1, #567	@ 0x237
 8010e68:	483e      	ldr	r0, [pc, #248]	@ (8010f64 <__mdiff+0x124>)
 8010e6a:	f001 fea1 	bl	8012bb0 <__assert_func>
 8010e6e:	2301      	movs	r3, #1
 8010e70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010e74:	4610      	mov	r0, r2
 8010e76:	b003      	add	sp, #12
 8010e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e7c:	bfbc      	itt	lt
 8010e7e:	464b      	movlt	r3, r9
 8010e80:	46a1      	movlt	r9, r4
 8010e82:	4630      	mov	r0, r6
 8010e84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010e88:	bfba      	itte	lt
 8010e8a:	461c      	movlt	r4, r3
 8010e8c:	2501      	movlt	r5, #1
 8010e8e:	2500      	movge	r5, #0
 8010e90:	f7ff fcf6 	bl	8010880 <_Balloc>
 8010e94:	4602      	mov	r2, r0
 8010e96:	b918      	cbnz	r0, 8010ea0 <__mdiff+0x60>
 8010e98:	4b31      	ldr	r3, [pc, #196]	@ (8010f60 <__mdiff+0x120>)
 8010e9a:	f240 2145 	movw	r1, #581	@ 0x245
 8010e9e:	e7e3      	b.n	8010e68 <__mdiff+0x28>
 8010ea0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010ea4:	6926      	ldr	r6, [r4, #16]
 8010ea6:	60c5      	str	r5, [r0, #12]
 8010ea8:	f109 0310 	add.w	r3, r9, #16
 8010eac:	f109 0514 	add.w	r5, r9, #20
 8010eb0:	f104 0e14 	add.w	lr, r4, #20
 8010eb4:	f100 0b14 	add.w	fp, r0, #20
 8010eb8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010ebc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010ec0:	9301      	str	r3, [sp, #4]
 8010ec2:	46d9      	mov	r9, fp
 8010ec4:	f04f 0c00 	mov.w	ip, #0
 8010ec8:	9b01      	ldr	r3, [sp, #4]
 8010eca:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010ece:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010ed2:	9301      	str	r3, [sp, #4]
 8010ed4:	fa1f f38a 	uxth.w	r3, sl
 8010ed8:	4619      	mov	r1, r3
 8010eda:	b283      	uxth	r3, r0
 8010edc:	1acb      	subs	r3, r1, r3
 8010ede:	0c00      	lsrs	r0, r0, #16
 8010ee0:	4463      	add	r3, ip
 8010ee2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010ee6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010eea:	b29b      	uxth	r3, r3
 8010eec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010ef0:	4576      	cmp	r6, lr
 8010ef2:	f849 3b04 	str.w	r3, [r9], #4
 8010ef6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010efa:	d8e5      	bhi.n	8010ec8 <__mdiff+0x88>
 8010efc:	1b33      	subs	r3, r6, r4
 8010efe:	3b15      	subs	r3, #21
 8010f00:	f023 0303 	bic.w	r3, r3, #3
 8010f04:	3415      	adds	r4, #21
 8010f06:	3304      	adds	r3, #4
 8010f08:	42a6      	cmp	r6, r4
 8010f0a:	bf38      	it	cc
 8010f0c:	2304      	movcc	r3, #4
 8010f0e:	441d      	add	r5, r3
 8010f10:	445b      	add	r3, fp
 8010f12:	461e      	mov	r6, r3
 8010f14:	462c      	mov	r4, r5
 8010f16:	4544      	cmp	r4, r8
 8010f18:	d30e      	bcc.n	8010f38 <__mdiff+0xf8>
 8010f1a:	f108 0103 	add.w	r1, r8, #3
 8010f1e:	1b49      	subs	r1, r1, r5
 8010f20:	f021 0103 	bic.w	r1, r1, #3
 8010f24:	3d03      	subs	r5, #3
 8010f26:	45a8      	cmp	r8, r5
 8010f28:	bf38      	it	cc
 8010f2a:	2100      	movcc	r1, #0
 8010f2c:	440b      	add	r3, r1
 8010f2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010f32:	b191      	cbz	r1, 8010f5a <__mdiff+0x11a>
 8010f34:	6117      	str	r7, [r2, #16]
 8010f36:	e79d      	b.n	8010e74 <__mdiff+0x34>
 8010f38:	f854 1b04 	ldr.w	r1, [r4], #4
 8010f3c:	46e6      	mov	lr, ip
 8010f3e:	0c08      	lsrs	r0, r1, #16
 8010f40:	fa1c fc81 	uxtah	ip, ip, r1
 8010f44:	4471      	add	r1, lr
 8010f46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010f4a:	b289      	uxth	r1, r1
 8010f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010f50:	f846 1b04 	str.w	r1, [r6], #4
 8010f54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010f58:	e7dd      	b.n	8010f16 <__mdiff+0xd6>
 8010f5a:	3f01      	subs	r7, #1
 8010f5c:	e7e7      	b.n	8010f2e <__mdiff+0xee>
 8010f5e:	bf00      	nop
 8010f60:	08013aa0 	.word	0x08013aa0
 8010f64:	08013ab1 	.word	0x08013ab1

08010f68 <__ulp>:
 8010f68:	b082      	sub	sp, #8
 8010f6a:	ed8d 0b00 	vstr	d0, [sp]
 8010f6e:	9a01      	ldr	r2, [sp, #4]
 8010f70:	4b0f      	ldr	r3, [pc, #60]	@ (8010fb0 <__ulp+0x48>)
 8010f72:	4013      	ands	r3, r2
 8010f74:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	dc08      	bgt.n	8010f8e <__ulp+0x26>
 8010f7c:	425b      	negs	r3, r3
 8010f7e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010f82:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010f86:	da04      	bge.n	8010f92 <__ulp+0x2a>
 8010f88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010f8c:	4113      	asrs	r3, r2
 8010f8e:	2200      	movs	r2, #0
 8010f90:	e008      	b.n	8010fa4 <__ulp+0x3c>
 8010f92:	f1a2 0314 	sub.w	r3, r2, #20
 8010f96:	2b1e      	cmp	r3, #30
 8010f98:	bfda      	itte	le
 8010f9a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010f9e:	40da      	lsrle	r2, r3
 8010fa0:	2201      	movgt	r2, #1
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	4619      	mov	r1, r3
 8010fa6:	4610      	mov	r0, r2
 8010fa8:	ec41 0b10 	vmov	d0, r0, r1
 8010fac:	b002      	add	sp, #8
 8010fae:	4770      	bx	lr
 8010fb0:	7ff00000 	.word	0x7ff00000

08010fb4 <__b2d>:
 8010fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fb8:	6906      	ldr	r6, [r0, #16]
 8010fba:	f100 0814 	add.w	r8, r0, #20
 8010fbe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010fc2:	1f37      	subs	r7, r6, #4
 8010fc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010fc8:	4610      	mov	r0, r2
 8010fca:	f7ff fd4b 	bl	8010a64 <__hi0bits>
 8010fce:	f1c0 0320 	rsb	r3, r0, #32
 8010fd2:	280a      	cmp	r0, #10
 8010fd4:	600b      	str	r3, [r1, #0]
 8010fd6:	491b      	ldr	r1, [pc, #108]	@ (8011044 <__b2d+0x90>)
 8010fd8:	dc15      	bgt.n	8011006 <__b2d+0x52>
 8010fda:	f1c0 0c0b 	rsb	ip, r0, #11
 8010fde:	fa22 f30c 	lsr.w	r3, r2, ip
 8010fe2:	45b8      	cmp	r8, r7
 8010fe4:	ea43 0501 	orr.w	r5, r3, r1
 8010fe8:	bf34      	ite	cc
 8010fea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010fee:	2300      	movcs	r3, #0
 8010ff0:	3015      	adds	r0, #21
 8010ff2:	fa02 f000 	lsl.w	r0, r2, r0
 8010ff6:	fa23 f30c 	lsr.w	r3, r3, ip
 8010ffa:	4303      	orrs	r3, r0
 8010ffc:	461c      	mov	r4, r3
 8010ffe:	ec45 4b10 	vmov	d0, r4, r5
 8011002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011006:	45b8      	cmp	r8, r7
 8011008:	bf3a      	itte	cc
 801100a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801100e:	f1a6 0708 	subcc.w	r7, r6, #8
 8011012:	2300      	movcs	r3, #0
 8011014:	380b      	subs	r0, #11
 8011016:	d012      	beq.n	801103e <__b2d+0x8a>
 8011018:	f1c0 0120 	rsb	r1, r0, #32
 801101c:	fa23 f401 	lsr.w	r4, r3, r1
 8011020:	4082      	lsls	r2, r0
 8011022:	4322      	orrs	r2, r4
 8011024:	4547      	cmp	r7, r8
 8011026:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801102a:	bf8c      	ite	hi
 801102c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011030:	2200      	movls	r2, #0
 8011032:	4083      	lsls	r3, r0
 8011034:	40ca      	lsrs	r2, r1
 8011036:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801103a:	4313      	orrs	r3, r2
 801103c:	e7de      	b.n	8010ffc <__b2d+0x48>
 801103e:	ea42 0501 	orr.w	r5, r2, r1
 8011042:	e7db      	b.n	8010ffc <__b2d+0x48>
 8011044:	3ff00000 	.word	0x3ff00000

08011048 <__d2b>:
 8011048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801104c:	460f      	mov	r7, r1
 801104e:	2101      	movs	r1, #1
 8011050:	ec59 8b10 	vmov	r8, r9, d0
 8011054:	4616      	mov	r6, r2
 8011056:	f7ff fc13 	bl	8010880 <_Balloc>
 801105a:	4604      	mov	r4, r0
 801105c:	b930      	cbnz	r0, 801106c <__d2b+0x24>
 801105e:	4602      	mov	r2, r0
 8011060:	4b23      	ldr	r3, [pc, #140]	@ (80110f0 <__d2b+0xa8>)
 8011062:	4824      	ldr	r0, [pc, #144]	@ (80110f4 <__d2b+0xac>)
 8011064:	f240 310f 	movw	r1, #783	@ 0x30f
 8011068:	f001 fda2 	bl	8012bb0 <__assert_func>
 801106c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011070:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011074:	b10d      	cbz	r5, 801107a <__d2b+0x32>
 8011076:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801107a:	9301      	str	r3, [sp, #4]
 801107c:	f1b8 0300 	subs.w	r3, r8, #0
 8011080:	d023      	beq.n	80110ca <__d2b+0x82>
 8011082:	4668      	mov	r0, sp
 8011084:	9300      	str	r3, [sp, #0]
 8011086:	f7ff fd0c 	bl	8010aa2 <__lo0bits>
 801108a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801108e:	b1d0      	cbz	r0, 80110c6 <__d2b+0x7e>
 8011090:	f1c0 0320 	rsb	r3, r0, #32
 8011094:	fa02 f303 	lsl.w	r3, r2, r3
 8011098:	430b      	orrs	r3, r1
 801109a:	40c2      	lsrs	r2, r0
 801109c:	6163      	str	r3, [r4, #20]
 801109e:	9201      	str	r2, [sp, #4]
 80110a0:	9b01      	ldr	r3, [sp, #4]
 80110a2:	61a3      	str	r3, [r4, #24]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	bf0c      	ite	eq
 80110a8:	2201      	moveq	r2, #1
 80110aa:	2202      	movne	r2, #2
 80110ac:	6122      	str	r2, [r4, #16]
 80110ae:	b1a5      	cbz	r5, 80110da <__d2b+0x92>
 80110b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80110b4:	4405      	add	r5, r0
 80110b6:	603d      	str	r5, [r7, #0]
 80110b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80110bc:	6030      	str	r0, [r6, #0]
 80110be:	4620      	mov	r0, r4
 80110c0:	b003      	add	sp, #12
 80110c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110c6:	6161      	str	r1, [r4, #20]
 80110c8:	e7ea      	b.n	80110a0 <__d2b+0x58>
 80110ca:	a801      	add	r0, sp, #4
 80110cc:	f7ff fce9 	bl	8010aa2 <__lo0bits>
 80110d0:	9b01      	ldr	r3, [sp, #4]
 80110d2:	6163      	str	r3, [r4, #20]
 80110d4:	3020      	adds	r0, #32
 80110d6:	2201      	movs	r2, #1
 80110d8:	e7e8      	b.n	80110ac <__d2b+0x64>
 80110da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80110de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80110e2:	6038      	str	r0, [r7, #0]
 80110e4:	6918      	ldr	r0, [r3, #16]
 80110e6:	f7ff fcbd 	bl	8010a64 <__hi0bits>
 80110ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80110ee:	e7e5      	b.n	80110bc <__d2b+0x74>
 80110f0:	08013aa0 	.word	0x08013aa0
 80110f4:	08013ab1 	.word	0x08013ab1

080110f8 <__ratio>:
 80110f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110fc:	b085      	sub	sp, #20
 80110fe:	e9cd 1000 	strd	r1, r0, [sp]
 8011102:	a902      	add	r1, sp, #8
 8011104:	f7ff ff56 	bl	8010fb4 <__b2d>
 8011108:	9800      	ldr	r0, [sp, #0]
 801110a:	a903      	add	r1, sp, #12
 801110c:	ec55 4b10 	vmov	r4, r5, d0
 8011110:	f7ff ff50 	bl	8010fb4 <__b2d>
 8011114:	9b01      	ldr	r3, [sp, #4]
 8011116:	6919      	ldr	r1, [r3, #16]
 8011118:	9b00      	ldr	r3, [sp, #0]
 801111a:	691b      	ldr	r3, [r3, #16]
 801111c:	1ac9      	subs	r1, r1, r3
 801111e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011122:	1a9b      	subs	r3, r3, r2
 8011124:	ec5b ab10 	vmov	sl, fp, d0
 8011128:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801112c:	2b00      	cmp	r3, #0
 801112e:	bfce      	itee	gt
 8011130:	462a      	movgt	r2, r5
 8011132:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011136:	465a      	movle	r2, fp
 8011138:	462f      	mov	r7, r5
 801113a:	46d9      	mov	r9, fp
 801113c:	bfcc      	ite	gt
 801113e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011142:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011146:	464b      	mov	r3, r9
 8011148:	4652      	mov	r2, sl
 801114a:	4620      	mov	r0, r4
 801114c:	4639      	mov	r1, r7
 801114e:	f7ef fb7d 	bl	800084c <__aeabi_ddiv>
 8011152:	ec41 0b10 	vmov	d0, r0, r1
 8011156:	b005      	add	sp, #20
 8011158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801115c <__copybits>:
 801115c:	3901      	subs	r1, #1
 801115e:	b570      	push	{r4, r5, r6, lr}
 8011160:	1149      	asrs	r1, r1, #5
 8011162:	6914      	ldr	r4, [r2, #16]
 8011164:	3101      	adds	r1, #1
 8011166:	f102 0314 	add.w	r3, r2, #20
 801116a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801116e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011172:	1f05      	subs	r5, r0, #4
 8011174:	42a3      	cmp	r3, r4
 8011176:	d30c      	bcc.n	8011192 <__copybits+0x36>
 8011178:	1aa3      	subs	r3, r4, r2
 801117a:	3b11      	subs	r3, #17
 801117c:	f023 0303 	bic.w	r3, r3, #3
 8011180:	3211      	adds	r2, #17
 8011182:	42a2      	cmp	r2, r4
 8011184:	bf88      	it	hi
 8011186:	2300      	movhi	r3, #0
 8011188:	4418      	add	r0, r3
 801118a:	2300      	movs	r3, #0
 801118c:	4288      	cmp	r0, r1
 801118e:	d305      	bcc.n	801119c <__copybits+0x40>
 8011190:	bd70      	pop	{r4, r5, r6, pc}
 8011192:	f853 6b04 	ldr.w	r6, [r3], #4
 8011196:	f845 6f04 	str.w	r6, [r5, #4]!
 801119a:	e7eb      	b.n	8011174 <__copybits+0x18>
 801119c:	f840 3b04 	str.w	r3, [r0], #4
 80111a0:	e7f4      	b.n	801118c <__copybits+0x30>

080111a2 <__any_on>:
 80111a2:	f100 0214 	add.w	r2, r0, #20
 80111a6:	6900      	ldr	r0, [r0, #16]
 80111a8:	114b      	asrs	r3, r1, #5
 80111aa:	4298      	cmp	r0, r3
 80111ac:	b510      	push	{r4, lr}
 80111ae:	db11      	blt.n	80111d4 <__any_on+0x32>
 80111b0:	dd0a      	ble.n	80111c8 <__any_on+0x26>
 80111b2:	f011 011f 	ands.w	r1, r1, #31
 80111b6:	d007      	beq.n	80111c8 <__any_on+0x26>
 80111b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80111bc:	fa24 f001 	lsr.w	r0, r4, r1
 80111c0:	fa00 f101 	lsl.w	r1, r0, r1
 80111c4:	428c      	cmp	r4, r1
 80111c6:	d10b      	bne.n	80111e0 <__any_on+0x3e>
 80111c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80111cc:	4293      	cmp	r3, r2
 80111ce:	d803      	bhi.n	80111d8 <__any_on+0x36>
 80111d0:	2000      	movs	r0, #0
 80111d2:	bd10      	pop	{r4, pc}
 80111d4:	4603      	mov	r3, r0
 80111d6:	e7f7      	b.n	80111c8 <__any_on+0x26>
 80111d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80111dc:	2900      	cmp	r1, #0
 80111de:	d0f5      	beq.n	80111cc <__any_on+0x2a>
 80111e0:	2001      	movs	r0, #1
 80111e2:	e7f6      	b.n	80111d2 <__any_on+0x30>

080111e4 <sulp>:
 80111e4:	b570      	push	{r4, r5, r6, lr}
 80111e6:	4604      	mov	r4, r0
 80111e8:	460d      	mov	r5, r1
 80111ea:	ec45 4b10 	vmov	d0, r4, r5
 80111ee:	4616      	mov	r6, r2
 80111f0:	f7ff feba 	bl	8010f68 <__ulp>
 80111f4:	ec51 0b10 	vmov	r0, r1, d0
 80111f8:	b17e      	cbz	r6, 801121a <sulp+0x36>
 80111fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80111fe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011202:	2b00      	cmp	r3, #0
 8011204:	dd09      	ble.n	801121a <sulp+0x36>
 8011206:	051b      	lsls	r3, r3, #20
 8011208:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801120c:	2400      	movs	r4, #0
 801120e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8011212:	4622      	mov	r2, r4
 8011214:	462b      	mov	r3, r5
 8011216:	f7ef f9ef 	bl	80005f8 <__aeabi_dmul>
 801121a:	ec41 0b10 	vmov	d0, r0, r1
 801121e:	bd70      	pop	{r4, r5, r6, pc}

08011220 <_strtod_l>:
 8011220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011224:	b09f      	sub	sp, #124	@ 0x7c
 8011226:	460c      	mov	r4, r1
 8011228:	9217      	str	r2, [sp, #92]	@ 0x5c
 801122a:	2200      	movs	r2, #0
 801122c:	921a      	str	r2, [sp, #104]	@ 0x68
 801122e:	9005      	str	r0, [sp, #20]
 8011230:	f04f 0a00 	mov.w	sl, #0
 8011234:	f04f 0b00 	mov.w	fp, #0
 8011238:	460a      	mov	r2, r1
 801123a:	9219      	str	r2, [sp, #100]	@ 0x64
 801123c:	7811      	ldrb	r1, [r2, #0]
 801123e:	292b      	cmp	r1, #43	@ 0x2b
 8011240:	d04a      	beq.n	80112d8 <_strtod_l+0xb8>
 8011242:	d838      	bhi.n	80112b6 <_strtod_l+0x96>
 8011244:	290d      	cmp	r1, #13
 8011246:	d832      	bhi.n	80112ae <_strtod_l+0x8e>
 8011248:	2908      	cmp	r1, #8
 801124a:	d832      	bhi.n	80112b2 <_strtod_l+0x92>
 801124c:	2900      	cmp	r1, #0
 801124e:	d03b      	beq.n	80112c8 <_strtod_l+0xa8>
 8011250:	2200      	movs	r2, #0
 8011252:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011254:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011256:	782a      	ldrb	r2, [r5, #0]
 8011258:	2a30      	cmp	r2, #48	@ 0x30
 801125a:	f040 80b3 	bne.w	80113c4 <_strtod_l+0x1a4>
 801125e:	786a      	ldrb	r2, [r5, #1]
 8011260:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011264:	2a58      	cmp	r2, #88	@ 0x58
 8011266:	d16e      	bne.n	8011346 <_strtod_l+0x126>
 8011268:	9302      	str	r3, [sp, #8]
 801126a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801126c:	9301      	str	r3, [sp, #4]
 801126e:	ab1a      	add	r3, sp, #104	@ 0x68
 8011270:	9300      	str	r3, [sp, #0]
 8011272:	4a8e      	ldr	r2, [pc, #568]	@ (80114ac <_strtod_l+0x28c>)
 8011274:	9805      	ldr	r0, [sp, #20]
 8011276:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011278:	a919      	add	r1, sp, #100	@ 0x64
 801127a:	f001 fd33 	bl	8012ce4 <__gethex>
 801127e:	f010 060f 	ands.w	r6, r0, #15
 8011282:	4604      	mov	r4, r0
 8011284:	d005      	beq.n	8011292 <_strtod_l+0x72>
 8011286:	2e06      	cmp	r6, #6
 8011288:	d128      	bne.n	80112dc <_strtod_l+0xbc>
 801128a:	3501      	adds	r5, #1
 801128c:	2300      	movs	r3, #0
 801128e:	9519      	str	r5, [sp, #100]	@ 0x64
 8011290:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011292:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011294:	2b00      	cmp	r3, #0
 8011296:	f040 858e 	bne.w	8011db6 <_strtod_l+0xb96>
 801129a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801129c:	b1cb      	cbz	r3, 80112d2 <_strtod_l+0xb2>
 801129e:	4652      	mov	r2, sl
 80112a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80112a4:	ec43 2b10 	vmov	d0, r2, r3
 80112a8:	b01f      	add	sp, #124	@ 0x7c
 80112aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ae:	2920      	cmp	r1, #32
 80112b0:	d1ce      	bne.n	8011250 <_strtod_l+0x30>
 80112b2:	3201      	adds	r2, #1
 80112b4:	e7c1      	b.n	801123a <_strtod_l+0x1a>
 80112b6:	292d      	cmp	r1, #45	@ 0x2d
 80112b8:	d1ca      	bne.n	8011250 <_strtod_l+0x30>
 80112ba:	2101      	movs	r1, #1
 80112bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80112be:	1c51      	adds	r1, r2, #1
 80112c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80112c2:	7852      	ldrb	r2, [r2, #1]
 80112c4:	2a00      	cmp	r2, #0
 80112c6:	d1c5      	bne.n	8011254 <_strtod_l+0x34>
 80112c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80112ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	f040 8570 	bne.w	8011db2 <_strtod_l+0xb92>
 80112d2:	4652      	mov	r2, sl
 80112d4:	465b      	mov	r3, fp
 80112d6:	e7e5      	b.n	80112a4 <_strtod_l+0x84>
 80112d8:	2100      	movs	r1, #0
 80112da:	e7ef      	b.n	80112bc <_strtod_l+0x9c>
 80112dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80112de:	b13a      	cbz	r2, 80112f0 <_strtod_l+0xd0>
 80112e0:	2135      	movs	r1, #53	@ 0x35
 80112e2:	a81c      	add	r0, sp, #112	@ 0x70
 80112e4:	f7ff ff3a 	bl	801115c <__copybits>
 80112e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80112ea:	9805      	ldr	r0, [sp, #20]
 80112ec:	f7ff fb08 	bl	8010900 <_Bfree>
 80112f0:	3e01      	subs	r6, #1
 80112f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80112f4:	2e04      	cmp	r6, #4
 80112f6:	d806      	bhi.n	8011306 <_strtod_l+0xe6>
 80112f8:	e8df f006 	tbb	[pc, r6]
 80112fc:	201d0314 	.word	0x201d0314
 8011300:	14          	.byte	0x14
 8011301:	00          	.byte	0x00
 8011302:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011306:	05e1      	lsls	r1, r4, #23
 8011308:	bf48      	it	mi
 801130a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801130e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011312:	0d1b      	lsrs	r3, r3, #20
 8011314:	051b      	lsls	r3, r3, #20
 8011316:	2b00      	cmp	r3, #0
 8011318:	d1bb      	bne.n	8011292 <_strtod_l+0x72>
 801131a:	f7fe fb21 	bl	800f960 <__errno>
 801131e:	2322      	movs	r3, #34	@ 0x22
 8011320:	6003      	str	r3, [r0, #0]
 8011322:	e7b6      	b.n	8011292 <_strtod_l+0x72>
 8011324:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011328:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801132c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011330:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011334:	e7e7      	b.n	8011306 <_strtod_l+0xe6>
 8011336:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80114b4 <_strtod_l+0x294>
 801133a:	e7e4      	b.n	8011306 <_strtod_l+0xe6>
 801133c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011340:	f04f 3aff 	mov.w	sl, #4294967295
 8011344:	e7df      	b.n	8011306 <_strtod_l+0xe6>
 8011346:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011348:	1c5a      	adds	r2, r3, #1
 801134a:	9219      	str	r2, [sp, #100]	@ 0x64
 801134c:	785b      	ldrb	r3, [r3, #1]
 801134e:	2b30      	cmp	r3, #48	@ 0x30
 8011350:	d0f9      	beq.n	8011346 <_strtod_l+0x126>
 8011352:	2b00      	cmp	r3, #0
 8011354:	d09d      	beq.n	8011292 <_strtod_l+0x72>
 8011356:	2301      	movs	r3, #1
 8011358:	9309      	str	r3, [sp, #36]	@ 0x24
 801135a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801135c:	930c      	str	r3, [sp, #48]	@ 0x30
 801135e:	2300      	movs	r3, #0
 8011360:	9308      	str	r3, [sp, #32]
 8011362:	930a      	str	r3, [sp, #40]	@ 0x28
 8011364:	461f      	mov	r7, r3
 8011366:	220a      	movs	r2, #10
 8011368:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801136a:	7805      	ldrb	r5, [r0, #0]
 801136c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011370:	b2d9      	uxtb	r1, r3
 8011372:	2909      	cmp	r1, #9
 8011374:	d928      	bls.n	80113c8 <_strtod_l+0x1a8>
 8011376:	494e      	ldr	r1, [pc, #312]	@ (80114b0 <_strtod_l+0x290>)
 8011378:	2201      	movs	r2, #1
 801137a:	f7fe fa7f 	bl	800f87c <strncmp>
 801137e:	2800      	cmp	r0, #0
 8011380:	d032      	beq.n	80113e8 <_strtod_l+0x1c8>
 8011382:	2000      	movs	r0, #0
 8011384:	462a      	mov	r2, r5
 8011386:	4681      	mov	r9, r0
 8011388:	463d      	mov	r5, r7
 801138a:	4603      	mov	r3, r0
 801138c:	2a65      	cmp	r2, #101	@ 0x65
 801138e:	d001      	beq.n	8011394 <_strtod_l+0x174>
 8011390:	2a45      	cmp	r2, #69	@ 0x45
 8011392:	d114      	bne.n	80113be <_strtod_l+0x19e>
 8011394:	b91d      	cbnz	r5, 801139e <_strtod_l+0x17e>
 8011396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011398:	4302      	orrs	r2, r0
 801139a:	d095      	beq.n	80112c8 <_strtod_l+0xa8>
 801139c:	2500      	movs	r5, #0
 801139e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80113a0:	1c62      	adds	r2, r4, #1
 80113a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80113a4:	7862      	ldrb	r2, [r4, #1]
 80113a6:	2a2b      	cmp	r2, #43	@ 0x2b
 80113a8:	d077      	beq.n	801149a <_strtod_l+0x27a>
 80113aa:	2a2d      	cmp	r2, #45	@ 0x2d
 80113ac:	d07b      	beq.n	80114a6 <_strtod_l+0x286>
 80113ae:	f04f 0c00 	mov.w	ip, #0
 80113b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80113b6:	2909      	cmp	r1, #9
 80113b8:	f240 8082 	bls.w	80114c0 <_strtod_l+0x2a0>
 80113bc:	9419      	str	r4, [sp, #100]	@ 0x64
 80113be:	f04f 0800 	mov.w	r8, #0
 80113c2:	e0a2      	b.n	801150a <_strtod_l+0x2ea>
 80113c4:	2300      	movs	r3, #0
 80113c6:	e7c7      	b.n	8011358 <_strtod_l+0x138>
 80113c8:	2f08      	cmp	r7, #8
 80113ca:	bfd5      	itete	le
 80113cc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80113ce:	9908      	ldrgt	r1, [sp, #32]
 80113d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80113d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80113d8:	f100 0001 	add.w	r0, r0, #1
 80113dc:	bfd4      	ite	le
 80113de:	930a      	strle	r3, [sp, #40]	@ 0x28
 80113e0:	9308      	strgt	r3, [sp, #32]
 80113e2:	3701      	adds	r7, #1
 80113e4:	9019      	str	r0, [sp, #100]	@ 0x64
 80113e6:	e7bf      	b.n	8011368 <_strtod_l+0x148>
 80113e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80113ea:	1c5a      	adds	r2, r3, #1
 80113ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80113ee:	785a      	ldrb	r2, [r3, #1]
 80113f0:	b37f      	cbz	r7, 8011452 <_strtod_l+0x232>
 80113f2:	4681      	mov	r9, r0
 80113f4:	463d      	mov	r5, r7
 80113f6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80113fa:	2b09      	cmp	r3, #9
 80113fc:	d912      	bls.n	8011424 <_strtod_l+0x204>
 80113fe:	2301      	movs	r3, #1
 8011400:	e7c4      	b.n	801138c <_strtod_l+0x16c>
 8011402:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011404:	1c5a      	adds	r2, r3, #1
 8011406:	9219      	str	r2, [sp, #100]	@ 0x64
 8011408:	785a      	ldrb	r2, [r3, #1]
 801140a:	3001      	adds	r0, #1
 801140c:	2a30      	cmp	r2, #48	@ 0x30
 801140e:	d0f8      	beq.n	8011402 <_strtod_l+0x1e2>
 8011410:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011414:	2b08      	cmp	r3, #8
 8011416:	f200 84d3 	bhi.w	8011dc0 <_strtod_l+0xba0>
 801141a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801141c:	930c      	str	r3, [sp, #48]	@ 0x30
 801141e:	4681      	mov	r9, r0
 8011420:	2000      	movs	r0, #0
 8011422:	4605      	mov	r5, r0
 8011424:	3a30      	subs	r2, #48	@ 0x30
 8011426:	f100 0301 	add.w	r3, r0, #1
 801142a:	d02a      	beq.n	8011482 <_strtod_l+0x262>
 801142c:	4499      	add	r9, r3
 801142e:	eb00 0c05 	add.w	ip, r0, r5
 8011432:	462b      	mov	r3, r5
 8011434:	210a      	movs	r1, #10
 8011436:	4563      	cmp	r3, ip
 8011438:	d10d      	bne.n	8011456 <_strtod_l+0x236>
 801143a:	1c69      	adds	r1, r5, #1
 801143c:	4401      	add	r1, r0
 801143e:	4428      	add	r0, r5
 8011440:	2808      	cmp	r0, #8
 8011442:	dc16      	bgt.n	8011472 <_strtod_l+0x252>
 8011444:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011446:	230a      	movs	r3, #10
 8011448:	fb03 2300 	mla	r3, r3, r0, r2
 801144c:	930a      	str	r3, [sp, #40]	@ 0x28
 801144e:	2300      	movs	r3, #0
 8011450:	e018      	b.n	8011484 <_strtod_l+0x264>
 8011452:	4638      	mov	r0, r7
 8011454:	e7da      	b.n	801140c <_strtod_l+0x1ec>
 8011456:	2b08      	cmp	r3, #8
 8011458:	f103 0301 	add.w	r3, r3, #1
 801145c:	dc03      	bgt.n	8011466 <_strtod_l+0x246>
 801145e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011460:	434e      	muls	r6, r1
 8011462:	960a      	str	r6, [sp, #40]	@ 0x28
 8011464:	e7e7      	b.n	8011436 <_strtod_l+0x216>
 8011466:	2b10      	cmp	r3, #16
 8011468:	bfde      	ittt	le
 801146a:	9e08      	ldrle	r6, [sp, #32]
 801146c:	434e      	mulle	r6, r1
 801146e:	9608      	strle	r6, [sp, #32]
 8011470:	e7e1      	b.n	8011436 <_strtod_l+0x216>
 8011472:	280f      	cmp	r0, #15
 8011474:	dceb      	bgt.n	801144e <_strtod_l+0x22e>
 8011476:	9808      	ldr	r0, [sp, #32]
 8011478:	230a      	movs	r3, #10
 801147a:	fb03 2300 	mla	r3, r3, r0, r2
 801147e:	9308      	str	r3, [sp, #32]
 8011480:	e7e5      	b.n	801144e <_strtod_l+0x22e>
 8011482:	4629      	mov	r1, r5
 8011484:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011486:	1c50      	adds	r0, r2, #1
 8011488:	9019      	str	r0, [sp, #100]	@ 0x64
 801148a:	7852      	ldrb	r2, [r2, #1]
 801148c:	4618      	mov	r0, r3
 801148e:	460d      	mov	r5, r1
 8011490:	e7b1      	b.n	80113f6 <_strtod_l+0x1d6>
 8011492:	f04f 0900 	mov.w	r9, #0
 8011496:	2301      	movs	r3, #1
 8011498:	e77d      	b.n	8011396 <_strtod_l+0x176>
 801149a:	f04f 0c00 	mov.w	ip, #0
 801149e:	1ca2      	adds	r2, r4, #2
 80114a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80114a2:	78a2      	ldrb	r2, [r4, #2]
 80114a4:	e785      	b.n	80113b2 <_strtod_l+0x192>
 80114a6:	f04f 0c01 	mov.w	ip, #1
 80114aa:	e7f8      	b.n	801149e <_strtod_l+0x27e>
 80114ac:	08013c20 	.word	0x08013c20
 80114b0:	08013c08 	.word	0x08013c08
 80114b4:	7ff00000 	.word	0x7ff00000
 80114b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80114ba:	1c51      	adds	r1, r2, #1
 80114bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80114be:	7852      	ldrb	r2, [r2, #1]
 80114c0:	2a30      	cmp	r2, #48	@ 0x30
 80114c2:	d0f9      	beq.n	80114b8 <_strtod_l+0x298>
 80114c4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80114c8:	2908      	cmp	r1, #8
 80114ca:	f63f af78 	bhi.w	80113be <_strtod_l+0x19e>
 80114ce:	3a30      	subs	r2, #48	@ 0x30
 80114d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80114d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80114d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80114d6:	f04f 080a 	mov.w	r8, #10
 80114da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80114dc:	1c56      	adds	r6, r2, #1
 80114de:	9619      	str	r6, [sp, #100]	@ 0x64
 80114e0:	7852      	ldrb	r2, [r2, #1]
 80114e2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80114e6:	f1be 0f09 	cmp.w	lr, #9
 80114ea:	d939      	bls.n	8011560 <_strtod_l+0x340>
 80114ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80114ee:	1a76      	subs	r6, r6, r1
 80114f0:	2e08      	cmp	r6, #8
 80114f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80114f6:	dc03      	bgt.n	8011500 <_strtod_l+0x2e0>
 80114f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80114fa:	4588      	cmp	r8, r1
 80114fc:	bfa8      	it	ge
 80114fe:	4688      	movge	r8, r1
 8011500:	f1bc 0f00 	cmp.w	ip, #0
 8011504:	d001      	beq.n	801150a <_strtod_l+0x2ea>
 8011506:	f1c8 0800 	rsb	r8, r8, #0
 801150a:	2d00      	cmp	r5, #0
 801150c:	d14e      	bne.n	80115ac <_strtod_l+0x38c>
 801150e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011510:	4308      	orrs	r0, r1
 8011512:	f47f aebe 	bne.w	8011292 <_strtod_l+0x72>
 8011516:	2b00      	cmp	r3, #0
 8011518:	f47f aed6 	bne.w	80112c8 <_strtod_l+0xa8>
 801151c:	2a69      	cmp	r2, #105	@ 0x69
 801151e:	d028      	beq.n	8011572 <_strtod_l+0x352>
 8011520:	dc25      	bgt.n	801156e <_strtod_l+0x34e>
 8011522:	2a49      	cmp	r2, #73	@ 0x49
 8011524:	d025      	beq.n	8011572 <_strtod_l+0x352>
 8011526:	2a4e      	cmp	r2, #78	@ 0x4e
 8011528:	f47f aece 	bne.w	80112c8 <_strtod_l+0xa8>
 801152c:	499b      	ldr	r1, [pc, #620]	@ (801179c <_strtod_l+0x57c>)
 801152e:	a819      	add	r0, sp, #100	@ 0x64
 8011530:	f001 fdfa 	bl	8013128 <__match>
 8011534:	2800      	cmp	r0, #0
 8011536:	f43f aec7 	beq.w	80112c8 <_strtod_l+0xa8>
 801153a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801153c:	781b      	ldrb	r3, [r3, #0]
 801153e:	2b28      	cmp	r3, #40	@ 0x28
 8011540:	d12e      	bne.n	80115a0 <_strtod_l+0x380>
 8011542:	4997      	ldr	r1, [pc, #604]	@ (80117a0 <_strtod_l+0x580>)
 8011544:	aa1c      	add	r2, sp, #112	@ 0x70
 8011546:	a819      	add	r0, sp, #100	@ 0x64
 8011548:	f001 fe02 	bl	8013150 <__hexnan>
 801154c:	2805      	cmp	r0, #5
 801154e:	d127      	bne.n	80115a0 <_strtod_l+0x380>
 8011550:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011552:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011556:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801155a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801155e:	e698      	b.n	8011292 <_strtod_l+0x72>
 8011560:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011562:	fb08 2101 	mla	r1, r8, r1, r2
 8011566:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801156a:	920e      	str	r2, [sp, #56]	@ 0x38
 801156c:	e7b5      	b.n	80114da <_strtod_l+0x2ba>
 801156e:	2a6e      	cmp	r2, #110	@ 0x6e
 8011570:	e7da      	b.n	8011528 <_strtod_l+0x308>
 8011572:	498c      	ldr	r1, [pc, #560]	@ (80117a4 <_strtod_l+0x584>)
 8011574:	a819      	add	r0, sp, #100	@ 0x64
 8011576:	f001 fdd7 	bl	8013128 <__match>
 801157a:	2800      	cmp	r0, #0
 801157c:	f43f aea4 	beq.w	80112c8 <_strtod_l+0xa8>
 8011580:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011582:	4989      	ldr	r1, [pc, #548]	@ (80117a8 <_strtod_l+0x588>)
 8011584:	3b01      	subs	r3, #1
 8011586:	a819      	add	r0, sp, #100	@ 0x64
 8011588:	9319      	str	r3, [sp, #100]	@ 0x64
 801158a:	f001 fdcd 	bl	8013128 <__match>
 801158e:	b910      	cbnz	r0, 8011596 <_strtod_l+0x376>
 8011590:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011592:	3301      	adds	r3, #1
 8011594:	9319      	str	r3, [sp, #100]	@ 0x64
 8011596:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80117b8 <_strtod_l+0x598>
 801159a:	f04f 0a00 	mov.w	sl, #0
 801159e:	e678      	b.n	8011292 <_strtod_l+0x72>
 80115a0:	4882      	ldr	r0, [pc, #520]	@ (80117ac <_strtod_l+0x58c>)
 80115a2:	f001 fafd 	bl	8012ba0 <nan>
 80115a6:	ec5b ab10 	vmov	sl, fp, d0
 80115aa:	e672      	b.n	8011292 <_strtod_l+0x72>
 80115ac:	eba8 0309 	sub.w	r3, r8, r9
 80115b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80115b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80115b4:	2f00      	cmp	r7, #0
 80115b6:	bf08      	it	eq
 80115b8:	462f      	moveq	r7, r5
 80115ba:	2d10      	cmp	r5, #16
 80115bc:	462c      	mov	r4, r5
 80115be:	bfa8      	it	ge
 80115c0:	2410      	movge	r4, #16
 80115c2:	f7ee ff9f 	bl	8000504 <__aeabi_ui2d>
 80115c6:	2d09      	cmp	r5, #9
 80115c8:	4682      	mov	sl, r0
 80115ca:	468b      	mov	fp, r1
 80115cc:	dc13      	bgt.n	80115f6 <_strtod_l+0x3d6>
 80115ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	f43f ae5e 	beq.w	8011292 <_strtod_l+0x72>
 80115d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115d8:	dd78      	ble.n	80116cc <_strtod_l+0x4ac>
 80115da:	2b16      	cmp	r3, #22
 80115dc:	dc5f      	bgt.n	801169e <_strtod_l+0x47e>
 80115de:	4974      	ldr	r1, [pc, #464]	@ (80117b0 <_strtod_l+0x590>)
 80115e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80115e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115e8:	4652      	mov	r2, sl
 80115ea:	465b      	mov	r3, fp
 80115ec:	f7ef f804 	bl	80005f8 <__aeabi_dmul>
 80115f0:	4682      	mov	sl, r0
 80115f2:	468b      	mov	fp, r1
 80115f4:	e64d      	b.n	8011292 <_strtod_l+0x72>
 80115f6:	4b6e      	ldr	r3, [pc, #440]	@ (80117b0 <_strtod_l+0x590>)
 80115f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80115fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011600:	f7ee fffa 	bl	80005f8 <__aeabi_dmul>
 8011604:	4682      	mov	sl, r0
 8011606:	9808      	ldr	r0, [sp, #32]
 8011608:	468b      	mov	fp, r1
 801160a:	f7ee ff7b 	bl	8000504 <__aeabi_ui2d>
 801160e:	4602      	mov	r2, r0
 8011610:	460b      	mov	r3, r1
 8011612:	4650      	mov	r0, sl
 8011614:	4659      	mov	r1, fp
 8011616:	f7ee fe39 	bl	800028c <__adddf3>
 801161a:	2d0f      	cmp	r5, #15
 801161c:	4682      	mov	sl, r0
 801161e:	468b      	mov	fp, r1
 8011620:	ddd5      	ble.n	80115ce <_strtod_l+0x3ae>
 8011622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011624:	1b2c      	subs	r4, r5, r4
 8011626:	441c      	add	r4, r3
 8011628:	2c00      	cmp	r4, #0
 801162a:	f340 8096 	ble.w	801175a <_strtod_l+0x53a>
 801162e:	f014 030f 	ands.w	r3, r4, #15
 8011632:	d00a      	beq.n	801164a <_strtod_l+0x42a>
 8011634:	495e      	ldr	r1, [pc, #376]	@ (80117b0 <_strtod_l+0x590>)
 8011636:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801163a:	4652      	mov	r2, sl
 801163c:	465b      	mov	r3, fp
 801163e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011642:	f7ee ffd9 	bl	80005f8 <__aeabi_dmul>
 8011646:	4682      	mov	sl, r0
 8011648:	468b      	mov	fp, r1
 801164a:	f034 040f 	bics.w	r4, r4, #15
 801164e:	d073      	beq.n	8011738 <_strtod_l+0x518>
 8011650:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011654:	dd48      	ble.n	80116e8 <_strtod_l+0x4c8>
 8011656:	2400      	movs	r4, #0
 8011658:	46a0      	mov	r8, r4
 801165a:	940a      	str	r4, [sp, #40]	@ 0x28
 801165c:	46a1      	mov	r9, r4
 801165e:	9a05      	ldr	r2, [sp, #20]
 8011660:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80117b8 <_strtod_l+0x598>
 8011664:	2322      	movs	r3, #34	@ 0x22
 8011666:	6013      	str	r3, [r2, #0]
 8011668:	f04f 0a00 	mov.w	sl, #0
 801166c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801166e:	2b00      	cmp	r3, #0
 8011670:	f43f ae0f 	beq.w	8011292 <_strtod_l+0x72>
 8011674:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011676:	9805      	ldr	r0, [sp, #20]
 8011678:	f7ff f942 	bl	8010900 <_Bfree>
 801167c:	9805      	ldr	r0, [sp, #20]
 801167e:	4649      	mov	r1, r9
 8011680:	f7ff f93e 	bl	8010900 <_Bfree>
 8011684:	9805      	ldr	r0, [sp, #20]
 8011686:	4641      	mov	r1, r8
 8011688:	f7ff f93a 	bl	8010900 <_Bfree>
 801168c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801168e:	9805      	ldr	r0, [sp, #20]
 8011690:	f7ff f936 	bl	8010900 <_Bfree>
 8011694:	9805      	ldr	r0, [sp, #20]
 8011696:	4621      	mov	r1, r4
 8011698:	f7ff f932 	bl	8010900 <_Bfree>
 801169c:	e5f9      	b.n	8011292 <_strtod_l+0x72>
 801169e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80116a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80116a4:	4293      	cmp	r3, r2
 80116a6:	dbbc      	blt.n	8011622 <_strtod_l+0x402>
 80116a8:	4c41      	ldr	r4, [pc, #260]	@ (80117b0 <_strtod_l+0x590>)
 80116aa:	f1c5 050f 	rsb	r5, r5, #15
 80116ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80116b2:	4652      	mov	r2, sl
 80116b4:	465b      	mov	r3, fp
 80116b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116ba:	f7ee ff9d 	bl	80005f8 <__aeabi_dmul>
 80116be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116c0:	1b5d      	subs	r5, r3, r5
 80116c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80116c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80116ca:	e78f      	b.n	80115ec <_strtod_l+0x3cc>
 80116cc:	3316      	adds	r3, #22
 80116ce:	dba8      	blt.n	8011622 <_strtod_l+0x402>
 80116d0:	4b37      	ldr	r3, [pc, #220]	@ (80117b0 <_strtod_l+0x590>)
 80116d2:	eba9 0808 	sub.w	r8, r9, r8
 80116d6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80116da:	e9d8 2300 	ldrd	r2, r3, [r8]
 80116de:	4650      	mov	r0, sl
 80116e0:	4659      	mov	r1, fp
 80116e2:	f7ef f8b3 	bl	800084c <__aeabi_ddiv>
 80116e6:	e783      	b.n	80115f0 <_strtod_l+0x3d0>
 80116e8:	4b32      	ldr	r3, [pc, #200]	@ (80117b4 <_strtod_l+0x594>)
 80116ea:	9308      	str	r3, [sp, #32]
 80116ec:	2300      	movs	r3, #0
 80116ee:	1124      	asrs	r4, r4, #4
 80116f0:	4650      	mov	r0, sl
 80116f2:	4659      	mov	r1, fp
 80116f4:	461e      	mov	r6, r3
 80116f6:	2c01      	cmp	r4, #1
 80116f8:	dc21      	bgt.n	801173e <_strtod_l+0x51e>
 80116fa:	b10b      	cbz	r3, 8011700 <_strtod_l+0x4e0>
 80116fc:	4682      	mov	sl, r0
 80116fe:	468b      	mov	fp, r1
 8011700:	492c      	ldr	r1, [pc, #176]	@ (80117b4 <_strtod_l+0x594>)
 8011702:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011706:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801170a:	4652      	mov	r2, sl
 801170c:	465b      	mov	r3, fp
 801170e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011712:	f7ee ff71 	bl	80005f8 <__aeabi_dmul>
 8011716:	4b28      	ldr	r3, [pc, #160]	@ (80117b8 <_strtod_l+0x598>)
 8011718:	460a      	mov	r2, r1
 801171a:	400b      	ands	r3, r1
 801171c:	4927      	ldr	r1, [pc, #156]	@ (80117bc <_strtod_l+0x59c>)
 801171e:	428b      	cmp	r3, r1
 8011720:	4682      	mov	sl, r0
 8011722:	d898      	bhi.n	8011656 <_strtod_l+0x436>
 8011724:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011728:	428b      	cmp	r3, r1
 801172a:	bf86      	itte	hi
 801172c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80117c0 <_strtod_l+0x5a0>
 8011730:	f04f 3aff 	movhi.w	sl, #4294967295
 8011734:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011738:	2300      	movs	r3, #0
 801173a:	9308      	str	r3, [sp, #32]
 801173c:	e07a      	b.n	8011834 <_strtod_l+0x614>
 801173e:	07e2      	lsls	r2, r4, #31
 8011740:	d505      	bpl.n	801174e <_strtod_l+0x52e>
 8011742:	9b08      	ldr	r3, [sp, #32]
 8011744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011748:	f7ee ff56 	bl	80005f8 <__aeabi_dmul>
 801174c:	2301      	movs	r3, #1
 801174e:	9a08      	ldr	r2, [sp, #32]
 8011750:	3208      	adds	r2, #8
 8011752:	3601      	adds	r6, #1
 8011754:	1064      	asrs	r4, r4, #1
 8011756:	9208      	str	r2, [sp, #32]
 8011758:	e7cd      	b.n	80116f6 <_strtod_l+0x4d6>
 801175a:	d0ed      	beq.n	8011738 <_strtod_l+0x518>
 801175c:	4264      	negs	r4, r4
 801175e:	f014 020f 	ands.w	r2, r4, #15
 8011762:	d00a      	beq.n	801177a <_strtod_l+0x55a>
 8011764:	4b12      	ldr	r3, [pc, #72]	@ (80117b0 <_strtod_l+0x590>)
 8011766:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801176a:	4650      	mov	r0, sl
 801176c:	4659      	mov	r1, fp
 801176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011772:	f7ef f86b 	bl	800084c <__aeabi_ddiv>
 8011776:	4682      	mov	sl, r0
 8011778:	468b      	mov	fp, r1
 801177a:	1124      	asrs	r4, r4, #4
 801177c:	d0dc      	beq.n	8011738 <_strtod_l+0x518>
 801177e:	2c1f      	cmp	r4, #31
 8011780:	dd20      	ble.n	80117c4 <_strtod_l+0x5a4>
 8011782:	2400      	movs	r4, #0
 8011784:	46a0      	mov	r8, r4
 8011786:	940a      	str	r4, [sp, #40]	@ 0x28
 8011788:	46a1      	mov	r9, r4
 801178a:	9a05      	ldr	r2, [sp, #20]
 801178c:	2322      	movs	r3, #34	@ 0x22
 801178e:	f04f 0a00 	mov.w	sl, #0
 8011792:	f04f 0b00 	mov.w	fp, #0
 8011796:	6013      	str	r3, [r2, #0]
 8011798:	e768      	b.n	801166c <_strtod_l+0x44c>
 801179a:	bf00      	nop
 801179c:	080139fa 	.word	0x080139fa
 80117a0:	08013c0c 	.word	0x08013c0c
 80117a4:	080139f2 	.word	0x080139f2
 80117a8:	08013a27 	.word	0x08013a27
 80117ac:	08013ccf 	.word	0x08013ccf
 80117b0:	08013b40 	.word	0x08013b40
 80117b4:	08013b18 	.word	0x08013b18
 80117b8:	7ff00000 	.word	0x7ff00000
 80117bc:	7ca00000 	.word	0x7ca00000
 80117c0:	7fefffff 	.word	0x7fefffff
 80117c4:	f014 0310 	ands.w	r3, r4, #16
 80117c8:	bf18      	it	ne
 80117ca:	236a      	movne	r3, #106	@ 0x6a
 80117cc:	4ea9      	ldr	r6, [pc, #676]	@ (8011a74 <_strtod_l+0x854>)
 80117ce:	9308      	str	r3, [sp, #32]
 80117d0:	4650      	mov	r0, sl
 80117d2:	4659      	mov	r1, fp
 80117d4:	2300      	movs	r3, #0
 80117d6:	07e2      	lsls	r2, r4, #31
 80117d8:	d504      	bpl.n	80117e4 <_strtod_l+0x5c4>
 80117da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80117de:	f7ee ff0b 	bl	80005f8 <__aeabi_dmul>
 80117e2:	2301      	movs	r3, #1
 80117e4:	1064      	asrs	r4, r4, #1
 80117e6:	f106 0608 	add.w	r6, r6, #8
 80117ea:	d1f4      	bne.n	80117d6 <_strtod_l+0x5b6>
 80117ec:	b10b      	cbz	r3, 80117f2 <_strtod_l+0x5d2>
 80117ee:	4682      	mov	sl, r0
 80117f0:	468b      	mov	fp, r1
 80117f2:	9b08      	ldr	r3, [sp, #32]
 80117f4:	b1b3      	cbz	r3, 8011824 <_strtod_l+0x604>
 80117f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80117fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80117fe:	2b00      	cmp	r3, #0
 8011800:	4659      	mov	r1, fp
 8011802:	dd0f      	ble.n	8011824 <_strtod_l+0x604>
 8011804:	2b1f      	cmp	r3, #31
 8011806:	dd55      	ble.n	80118b4 <_strtod_l+0x694>
 8011808:	2b34      	cmp	r3, #52	@ 0x34
 801180a:	bfde      	ittt	le
 801180c:	f04f 33ff 	movle.w	r3, #4294967295
 8011810:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011814:	4093      	lslle	r3, r2
 8011816:	f04f 0a00 	mov.w	sl, #0
 801181a:	bfcc      	ite	gt
 801181c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011820:	ea03 0b01 	andle.w	fp, r3, r1
 8011824:	2200      	movs	r2, #0
 8011826:	2300      	movs	r3, #0
 8011828:	4650      	mov	r0, sl
 801182a:	4659      	mov	r1, fp
 801182c:	f7ef f94c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011830:	2800      	cmp	r0, #0
 8011832:	d1a6      	bne.n	8011782 <_strtod_l+0x562>
 8011834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011836:	9300      	str	r3, [sp, #0]
 8011838:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801183a:	9805      	ldr	r0, [sp, #20]
 801183c:	462b      	mov	r3, r5
 801183e:	463a      	mov	r2, r7
 8011840:	f7ff f8c6 	bl	80109d0 <__s2b>
 8011844:	900a      	str	r0, [sp, #40]	@ 0x28
 8011846:	2800      	cmp	r0, #0
 8011848:	f43f af05 	beq.w	8011656 <_strtod_l+0x436>
 801184c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801184e:	2a00      	cmp	r2, #0
 8011850:	eba9 0308 	sub.w	r3, r9, r8
 8011854:	bfa8      	it	ge
 8011856:	2300      	movge	r3, #0
 8011858:	9312      	str	r3, [sp, #72]	@ 0x48
 801185a:	2400      	movs	r4, #0
 801185c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011860:	9316      	str	r3, [sp, #88]	@ 0x58
 8011862:	46a0      	mov	r8, r4
 8011864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011866:	9805      	ldr	r0, [sp, #20]
 8011868:	6859      	ldr	r1, [r3, #4]
 801186a:	f7ff f809 	bl	8010880 <_Balloc>
 801186e:	4681      	mov	r9, r0
 8011870:	2800      	cmp	r0, #0
 8011872:	f43f aef4 	beq.w	801165e <_strtod_l+0x43e>
 8011876:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011878:	691a      	ldr	r2, [r3, #16]
 801187a:	3202      	adds	r2, #2
 801187c:	f103 010c 	add.w	r1, r3, #12
 8011880:	0092      	lsls	r2, r2, #2
 8011882:	300c      	adds	r0, #12
 8011884:	f7fe f899 	bl	800f9ba <memcpy>
 8011888:	ec4b ab10 	vmov	d0, sl, fp
 801188c:	9805      	ldr	r0, [sp, #20]
 801188e:	aa1c      	add	r2, sp, #112	@ 0x70
 8011890:	a91b      	add	r1, sp, #108	@ 0x6c
 8011892:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011896:	f7ff fbd7 	bl	8011048 <__d2b>
 801189a:	901a      	str	r0, [sp, #104]	@ 0x68
 801189c:	2800      	cmp	r0, #0
 801189e:	f43f aede 	beq.w	801165e <_strtod_l+0x43e>
 80118a2:	9805      	ldr	r0, [sp, #20]
 80118a4:	2101      	movs	r1, #1
 80118a6:	f7ff f929 	bl	8010afc <__i2b>
 80118aa:	4680      	mov	r8, r0
 80118ac:	b948      	cbnz	r0, 80118c2 <_strtod_l+0x6a2>
 80118ae:	f04f 0800 	mov.w	r8, #0
 80118b2:	e6d4      	b.n	801165e <_strtod_l+0x43e>
 80118b4:	f04f 32ff 	mov.w	r2, #4294967295
 80118b8:	fa02 f303 	lsl.w	r3, r2, r3
 80118bc:	ea03 0a0a 	and.w	sl, r3, sl
 80118c0:	e7b0      	b.n	8011824 <_strtod_l+0x604>
 80118c2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80118c4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80118c6:	2d00      	cmp	r5, #0
 80118c8:	bfab      	itete	ge
 80118ca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80118cc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80118ce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80118d0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80118d2:	bfac      	ite	ge
 80118d4:	18ef      	addge	r7, r5, r3
 80118d6:	1b5e      	sublt	r6, r3, r5
 80118d8:	9b08      	ldr	r3, [sp, #32]
 80118da:	1aed      	subs	r5, r5, r3
 80118dc:	4415      	add	r5, r2
 80118de:	4b66      	ldr	r3, [pc, #408]	@ (8011a78 <_strtod_l+0x858>)
 80118e0:	3d01      	subs	r5, #1
 80118e2:	429d      	cmp	r5, r3
 80118e4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80118e8:	da50      	bge.n	801198c <_strtod_l+0x76c>
 80118ea:	1b5b      	subs	r3, r3, r5
 80118ec:	2b1f      	cmp	r3, #31
 80118ee:	eba2 0203 	sub.w	r2, r2, r3
 80118f2:	f04f 0101 	mov.w	r1, #1
 80118f6:	dc3d      	bgt.n	8011974 <_strtod_l+0x754>
 80118f8:	fa01 f303 	lsl.w	r3, r1, r3
 80118fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80118fe:	2300      	movs	r3, #0
 8011900:	9310      	str	r3, [sp, #64]	@ 0x40
 8011902:	18bd      	adds	r5, r7, r2
 8011904:	9b08      	ldr	r3, [sp, #32]
 8011906:	42af      	cmp	r7, r5
 8011908:	4416      	add	r6, r2
 801190a:	441e      	add	r6, r3
 801190c:	463b      	mov	r3, r7
 801190e:	bfa8      	it	ge
 8011910:	462b      	movge	r3, r5
 8011912:	42b3      	cmp	r3, r6
 8011914:	bfa8      	it	ge
 8011916:	4633      	movge	r3, r6
 8011918:	2b00      	cmp	r3, #0
 801191a:	bfc2      	ittt	gt
 801191c:	1aed      	subgt	r5, r5, r3
 801191e:	1af6      	subgt	r6, r6, r3
 8011920:	1aff      	subgt	r7, r7, r3
 8011922:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011924:	2b00      	cmp	r3, #0
 8011926:	dd16      	ble.n	8011956 <_strtod_l+0x736>
 8011928:	4641      	mov	r1, r8
 801192a:	9805      	ldr	r0, [sp, #20]
 801192c:	461a      	mov	r2, r3
 801192e:	f7ff f9a5 	bl	8010c7c <__pow5mult>
 8011932:	4680      	mov	r8, r0
 8011934:	2800      	cmp	r0, #0
 8011936:	d0ba      	beq.n	80118ae <_strtod_l+0x68e>
 8011938:	4601      	mov	r1, r0
 801193a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801193c:	9805      	ldr	r0, [sp, #20]
 801193e:	f7ff f8f3 	bl	8010b28 <__multiply>
 8011942:	900e      	str	r0, [sp, #56]	@ 0x38
 8011944:	2800      	cmp	r0, #0
 8011946:	f43f ae8a 	beq.w	801165e <_strtod_l+0x43e>
 801194a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801194c:	9805      	ldr	r0, [sp, #20]
 801194e:	f7fe ffd7 	bl	8010900 <_Bfree>
 8011952:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011954:	931a      	str	r3, [sp, #104]	@ 0x68
 8011956:	2d00      	cmp	r5, #0
 8011958:	dc1d      	bgt.n	8011996 <_strtod_l+0x776>
 801195a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801195c:	2b00      	cmp	r3, #0
 801195e:	dd23      	ble.n	80119a8 <_strtod_l+0x788>
 8011960:	4649      	mov	r1, r9
 8011962:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011964:	9805      	ldr	r0, [sp, #20]
 8011966:	f7ff f989 	bl	8010c7c <__pow5mult>
 801196a:	4681      	mov	r9, r0
 801196c:	b9e0      	cbnz	r0, 80119a8 <_strtod_l+0x788>
 801196e:	f04f 0900 	mov.w	r9, #0
 8011972:	e674      	b.n	801165e <_strtod_l+0x43e>
 8011974:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011978:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801197c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011980:	35e2      	adds	r5, #226	@ 0xe2
 8011982:	fa01 f305 	lsl.w	r3, r1, r5
 8011986:	9310      	str	r3, [sp, #64]	@ 0x40
 8011988:	9113      	str	r1, [sp, #76]	@ 0x4c
 801198a:	e7ba      	b.n	8011902 <_strtod_l+0x6e2>
 801198c:	2300      	movs	r3, #0
 801198e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011990:	2301      	movs	r3, #1
 8011992:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011994:	e7b5      	b.n	8011902 <_strtod_l+0x6e2>
 8011996:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011998:	9805      	ldr	r0, [sp, #20]
 801199a:	462a      	mov	r2, r5
 801199c:	f7ff f9c8 	bl	8010d30 <__lshift>
 80119a0:	901a      	str	r0, [sp, #104]	@ 0x68
 80119a2:	2800      	cmp	r0, #0
 80119a4:	d1d9      	bne.n	801195a <_strtod_l+0x73a>
 80119a6:	e65a      	b.n	801165e <_strtod_l+0x43e>
 80119a8:	2e00      	cmp	r6, #0
 80119aa:	dd07      	ble.n	80119bc <_strtod_l+0x79c>
 80119ac:	4649      	mov	r1, r9
 80119ae:	9805      	ldr	r0, [sp, #20]
 80119b0:	4632      	mov	r2, r6
 80119b2:	f7ff f9bd 	bl	8010d30 <__lshift>
 80119b6:	4681      	mov	r9, r0
 80119b8:	2800      	cmp	r0, #0
 80119ba:	d0d8      	beq.n	801196e <_strtod_l+0x74e>
 80119bc:	2f00      	cmp	r7, #0
 80119be:	dd08      	ble.n	80119d2 <_strtod_l+0x7b2>
 80119c0:	4641      	mov	r1, r8
 80119c2:	9805      	ldr	r0, [sp, #20]
 80119c4:	463a      	mov	r2, r7
 80119c6:	f7ff f9b3 	bl	8010d30 <__lshift>
 80119ca:	4680      	mov	r8, r0
 80119cc:	2800      	cmp	r0, #0
 80119ce:	f43f ae46 	beq.w	801165e <_strtod_l+0x43e>
 80119d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80119d4:	9805      	ldr	r0, [sp, #20]
 80119d6:	464a      	mov	r2, r9
 80119d8:	f7ff fa32 	bl	8010e40 <__mdiff>
 80119dc:	4604      	mov	r4, r0
 80119de:	2800      	cmp	r0, #0
 80119e0:	f43f ae3d 	beq.w	801165e <_strtod_l+0x43e>
 80119e4:	68c3      	ldr	r3, [r0, #12]
 80119e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80119e8:	2300      	movs	r3, #0
 80119ea:	60c3      	str	r3, [r0, #12]
 80119ec:	4641      	mov	r1, r8
 80119ee:	f7ff fa0b 	bl	8010e08 <__mcmp>
 80119f2:	2800      	cmp	r0, #0
 80119f4:	da46      	bge.n	8011a84 <_strtod_l+0x864>
 80119f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119f8:	ea53 030a 	orrs.w	r3, r3, sl
 80119fc:	d16c      	bne.n	8011ad8 <_strtod_l+0x8b8>
 80119fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d168      	bne.n	8011ad8 <_strtod_l+0x8b8>
 8011a06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011a0a:	0d1b      	lsrs	r3, r3, #20
 8011a0c:	051b      	lsls	r3, r3, #20
 8011a0e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011a12:	d961      	bls.n	8011ad8 <_strtod_l+0x8b8>
 8011a14:	6963      	ldr	r3, [r4, #20]
 8011a16:	b913      	cbnz	r3, 8011a1e <_strtod_l+0x7fe>
 8011a18:	6923      	ldr	r3, [r4, #16]
 8011a1a:	2b01      	cmp	r3, #1
 8011a1c:	dd5c      	ble.n	8011ad8 <_strtod_l+0x8b8>
 8011a1e:	4621      	mov	r1, r4
 8011a20:	2201      	movs	r2, #1
 8011a22:	9805      	ldr	r0, [sp, #20]
 8011a24:	f7ff f984 	bl	8010d30 <__lshift>
 8011a28:	4641      	mov	r1, r8
 8011a2a:	4604      	mov	r4, r0
 8011a2c:	f7ff f9ec 	bl	8010e08 <__mcmp>
 8011a30:	2800      	cmp	r0, #0
 8011a32:	dd51      	ble.n	8011ad8 <_strtod_l+0x8b8>
 8011a34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011a38:	9a08      	ldr	r2, [sp, #32]
 8011a3a:	0d1b      	lsrs	r3, r3, #20
 8011a3c:	051b      	lsls	r3, r3, #20
 8011a3e:	2a00      	cmp	r2, #0
 8011a40:	d06b      	beq.n	8011b1a <_strtod_l+0x8fa>
 8011a42:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011a46:	d868      	bhi.n	8011b1a <_strtod_l+0x8fa>
 8011a48:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011a4c:	f67f ae9d 	bls.w	801178a <_strtod_l+0x56a>
 8011a50:	4b0a      	ldr	r3, [pc, #40]	@ (8011a7c <_strtod_l+0x85c>)
 8011a52:	4650      	mov	r0, sl
 8011a54:	4659      	mov	r1, fp
 8011a56:	2200      	movs	r2, #0
 8011a58:	f7ee fdce 	bl	80005f8 <__aeabi_dmul>
 8011a5c:	4b08      	ldr	r3, [pc, #32]	@ (8011a80 <_strtod_l+0x860>)
 8011a5e:	400b      	ands	r3, r1
 8011a60:	4682      	mov	sl, r0
 8011a62:	468b      	mov	fp, r1
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	f47f ae05 	bne.w	8011674 <_strtod_l+0x454>
 8011a6a:	9a05      	ldr	r2, [sp, #20]
 8011a6c:	2322      	movs	r3, #34	@ 0x22
 8011a6e:	6013      	str	r3, [r2, #0]
 8011a70:	e600      	b.n	8011674 <_strtod_l+0x454>
 8011a72:	bf00      	nop
 8011a74:	08013c38 	.word	0x08013c38
 8011a78:	fffffc02 	.word	0xfffffc02
 8011a7c:	39500000 	.word	0x39500000
 8011a80:	7ff00000 	.word	0x7ff00000
 8011a84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011a88:	d165      	bne.n	8011b56 <_strtod_l+0x936>
 8011a8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011a8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011a90:	b35a      	cbz	r2, 8011aea <_strtod_l+0x8ca>
 8011a92:	4a9f      	ldr	r2, [pc, #636]	@ (8011d10 <_strtod_l+0xaf0>)
 8011a94:	4293      	cmp	r3, r2
 8011a96:	d12b      	bne.n	8011af0 <_strtod_l+0x8d0>
 8011a98:	9b08      	ldr	r3, [sp, #32]
 8011a9a:	4651      	mov	r1, sl
 8011a9c:	b303      	cbz	r3, 8011ae0 <_strtod_l+0x8c0>
 8011a9e:	4b9d      	ldr	r3, [pc, #628]	@ (8011d14 <_strtod_l+0xaf4>)
 8011aa0:	465a      	mov	r2, fp
 8011aa2:	4013      	ands	r3, r2
 8011aa4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8011aac:	d81b      	bhi.n	8011ae6 <_strtod_l+0x8c6>
 8011aae:	0d1b      	lsrs	r3, r3, #20
 8011ab0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8011ab8:	4299      	cmp	r1, r3
 8011aba:	d119      	bne.n	8011af0 <_strtod_l+0x8d0>
 8011abc:	4b96      	ldr	r3, [pc, #600]	@ (8011d18 <_strtod_l+0xaf8>)
 8011abe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011ac0:	429a      	cmp	r2, r3
 8011ac2:	d102      	bne.n	8011aca <_strtod_l+0x8aa>
 8011ac4:	3101      	adds	r1, #1
 8011ac6:	f43f adca 	beq.w	801165e <_strtod_l+0x43e>
 8011aca:	4b92      	ldr	r3, [pc, #584]	@ (8011d14 <_strtod_l+0xaf4>)
 8011acc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011ace:	401a      	ands	r2, r3
 8011ad0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011ad4:	f04f 0a00 	mov.w	sl, #0
 8011ad8:	9b08      	ldr	r3, [sp, #32]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d1b8      	bne.n	8011a50 <_strtod_l+0x830>
 8011ade:	e5c9      	b.n	8011674 <_strtod_l+0x454>
 8011ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ae4:	e7e8      	b.n	8011ab8 <_strtod_l+0x898>
 8011ae6:	4613      	mov	r3, r2
 8011ae8:	e7e6      	b.n	8011ab8 <_strtod_l+0x898>
 8011aea:	ea53 030a 	orrs.w	r3, r3, sl
 8011aee:	d0a1      	beq.n	8011a34 <_strtod_l+0x814>
 8011af0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011af2:	b1db      	cbz	r3, 8011b2c <_strtod_l+0x90c>
 8011af4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011af6:	4213      	tst	r3, r2
 8011af8:	d0ee      	beq.n	8011ad8 <_strtod_l+0x8b8>
 8011afa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011afc:	9a08      	ldr	r2, [sp, #32]
 8011afe:	4650      	mov	r0, sl
 8011b00:	4659      	mov	r1, fp
 8011b02:	b1bb      	cbz	r3, 8011b34 <_strtod_l+0x914>
 8011b04:	f7ff fb6e 	bl	80111e4 <sulp>
 8011b08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011b0c:	ec53 2b10 	vmov	r2, r3, d0
 8011b10:	f7ee fbbc 	bl	800028c <__adddf3>
 8011b14:	4682      	mov	sl, r0
 8011b16:	468b      	mov	fp, r1
 8011b18:	e7de      	b.n	8011ad8 <_strtod_l+0x8b8>
 8011b1a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011b1e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011b22:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011b26:	f04f 3aff 	mov.w	sl, #4294967295
 8011b2a:	e7d5      	b.n	8011ad8 <_strtod_l+0x8b8>
 8011b2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011b2e:	ea13 0f0a 	tst.w	r3, sl
 8011b32:	e7e1      	b.n	8011af8 <_strtod_l+0x8d8>
 8011b34:	f7ff fb56 	bl	80111e4 <sulp>
 8011b38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011b3c:	ec53 2b10 	vmov	r2, r3, d0
 8011b40:	f7ee fba2 	bl	8000288 <__aeabi_dsub>
 8011b44:	2200      	movs	r2, #0
 8011b46:	2300      	movs	r3, #0
 8011b48:	4682      	mov	sl, r0
 8011b4a:	468b      	mov	fp, r1
 8011b4c:	f7ee ffbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b50:	2800      	cmp	r0, #0
 8011b52:	d0c1      	beq.n	8011ad8 <_strtod_l+0x8b8>
 8011b54:	e619      	b.n	801178a <_strtod_l+0x56a>
 8011b56:	4641      	mov	r1, r8
 8011b58:	4620      	mov	r0, r4
 8011b5a:	f7ff facd 	bl	80110f8 <__ratio>
 8011b5e:	ec57 6b10 	vmov	r6, r7, d0
 8011b62:	2200      	movs	r2, #0
 8011b64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011b68:	4630      	mov	r0, r6
 8011b6a:	4639      	mov	r1, r7
 8011b6c:	f7ee ffc0 	bl	8000af0 <__aeabi_dcmple>
 8011b70:	2800      	cmp	r0, #0
 8011b72:	d06f      	beq.n	8011c54 <_strtod_l+0xa34>
 8011b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d17a      	bne.n	8011c70 <_strtod_l+0xa50>
 8011b7a:	f1ba 0f00 	cmp.w	sl, #0
 8011b7e:	d158      	bne.n	8011c32 <_strtod_l+0xa12>
 8011b80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d15a      	bne.n	8011c40 <_strtod_l+0xa20>
 8011b8a:	4b64      	ldr	r3, [pc, #400]	@ (8011d1c <_strtod_l+0xafc>)
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	4630      	mov	r0, r6
 8011b90:	4639      	mov	r1, r7
 8011b92:	f7ee ffa3 	bl	8000adc <__aeabi_dcmplt>
 8011b96:	2800      	cmp	r0, #0
 8011b98:	d159      	bne.n	8011c4e <_strtod_l+0xa2e>
 8011b9a:	4630      	mov	r0, r6
 8011b9c:	4639      	mov	r1, r7
 8011b9e:	4b60      	ldr	r3, [pc, #384]	@ (8011d20 <_strtod_l+0xb00>)
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	f7ee fd29 	bl	80005f8 <__aeabi_dmul>
 8011ba6:	4606      	mov	r6, r0
 8011ba8:	460f      	mov	r7, r1
 8011baa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011bae:	9606      	str	r6, [sp, #24]
 8011bb0:	9307      	str	r3, [sp, #28]
 8011bb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011bb6:	4d57      	ldr	r5, [pc, #348]	@ (8011d14 <_strtod_l+0xaf4>)
 8011bb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011bbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bbe:	401d      	ands	r5, r3
 8011bc0:	4b58      	ldr	r3, [pc, #352]	@ (8011d24 <_strtod_l+0xb04>)
 8011bc2:	429d      	cmp	r5, r3
 8011bc4:	f040 80b2 	bne.w	8011d2c <_strtod_l+0xb0c>
 8011bc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011bce:	ec4b ab10 	vmov	d0, sl, fp
 8011bd2:	f7ff f9c9 	bl	8010f68 <__ulp>
 8011bd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011bda:	ec51 0b10 	vmov	r0, r1, d0
 8011bde:	f7ee fd0b 	bl	80005f8 <__aeabi_dmul>
 8011be2:	4652      	mov	r2, sl
 8011be4:	465b      	mov	r3, fp
 8011be6:	f7ee fb51 	bl	800028c <__adddf3>
 8011bea:	460b      	mov	r3, r1
 8011bec:	4949      	ldr	r1, [pc, #292]	@ (8011d14 <_strtod_l+0xaf4>)
 8011bee:	4a4e      	ldr	r2, [pc, #312]	@ (8011d28 <_strtod_l+0xb08>)
 8011bf0:	4019      	ands	r1, r3
 8011bf2:	4291      	cmp	r1, r2
 8011bf4:	4682      	mov	sl, r0
 8011bf6:	d942      	bls.n	8011c7e <_strtod_l+0xa5e>
 8011bf8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011bfa:	4b47      	ldr	r3, [pc, #284]	@ (8011d18 <_strtod_l+0xaf8>)
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	d103      	bne.n	8011c08 <_strtod_l+0x9e8>
 8011c00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c02:	3301      	adds	r3, #1
 8011c04:	f43f ad2b 	beq.w	801165e <_strtod_l+0x43e>
 8011c08:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011d18 <_strtod_l+0xaf8>
 8011c0c:	f04f 3aff 	mov.w	sl, #4294967295
 8011c10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011c12:	9805      	ldr	r0, [sp, #20]
 8011c14:	f7fe fe74 	bl	8010900 <_Bfree>
 8011c18:	9805      	ldr	r0, [sp, #20]
 8011c1a:	4649      	mov	r1, r9
 8011c1c:	f7fe fe70 	bl	8010900 <_Bfree>
 8011c20:	9805      	ldr	r0, [sp, #20]
 8011c22:	4641      	mov	r1, r8
 8011c24:	f7fe fe6c 	bl	8010900 <_Bfree>
 8011c28:	9805      	ldr	r0, [sp, #20]
 8011c2a:	4621      	mov	r1, r4
 8011c2c:	f7fe fe68 	bl	8010900 <_Bfree>
 8011c30:	e618      	b.n	8011864 <_strtod_l+0x644>
 8011c32:	f1ba 0f01 	cmp.w	sl, #1
 8011c36:	d103      	bne.n	8011c40 <_strtod_l+0xa20>
 8011c38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	f43f ada5 	beq.w	801178a <_strtod_l+0x56a>
 8011c40:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011cf0 <_strtod_l+0xad0>
 8011c44:	4f35      	ldr	r7, [pc, #212]	@ (8011d1c <_strtod_l+0xafc>)
 8011c46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011c4a:	2600      	movs	r6, #0
 8011c4c:	e7b1      	b.n	8011bb2 <_strtod_l+0x992>
 8011c4e:	4f34      	ldr	r7, [pc, #208]	@ (8011d20 <_strtod_l+0xb00>)
 8011c50:	2600      	movs	r6, #0
 8011c52:	e7aa      	b.n	8011baa <_strtod_l+0x98a>
 8011c54:	4b32      	ldr	r3, [pc, #200]	@ (8011d20 <_strtod_l+0xb00>)
 8011c56:	4630      	mov	r0, r6
 8011c58:	4639      	mov	r1, r7
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	f7ee fccc 	bl	80005f8 <__aeabi_dmul>
 8011c60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c62:	4606      	mov	r6, r0
 8011c64:	460f      	mov	r7, r1
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d09f      	beq.n	8011baa <_strtod_l+0x98a>
 8011c6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011c6e:	e7a0      	b.n	8011bb2 <_strtod_l+0x992>
 8011c70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011cf8 <_strtod_l+0xad8>
 8011c74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011c78:	ec57 6b17 	vmov	r6, r7, d7
 8011c7c:	e799      	b.n	8011bb2 <_strtod_l+0x992>
 8011c7e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011c82:	9b08      	ldr	r3, [sp, #32]
 8011c84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d1c1      	bne.n	8011c10 <_strtod_l+0x9f0>
 8011c8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011c90:	0d1b      	lsrs	r3, r3, #20
 8011c92:	051b      	lsls	r3, r3, #20
 8011c94:	429d      	cmp	r5, r3
 8011c96:	d1bb      	bne.n	8011c10 <_strtod_l+0x9f0>
 8011c98:	4630      	mov	r0, r6
 8011c9a:	4639      	mov	r1, r7
 8011c9c:	f7ee fff4 	bl	8000c88 <__aeabi_d2lz>
 8011ca0:	f7ee fc7c 	bl	800059c <__aeabi_l2d>
 8011ca4:	4602      	mov	r2, r0
 8011ca6:	460b      	mov	r3, r1
 8011ca8:	4630      	mov	r0, r6
 8011caa:	4639      	mov	r1, r7
 8011cac:	f7ee faec 	bl	8000288 <__aeabi_dsub>
 8011cb0:	460b      	mov	r3, r1
 8011cb2:	4602      	mov	r2, r0
 8011cb4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011cb8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011cbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cbe:	ea46 060a 	orr.w	r6, r6, sl
 8011cc2:	431e      	orrs	r6, r3
 8011cc4:	d06f      	beq.n	8011da6 <_strtod_l+0xb86>
 8011cc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8011d00 <_strtod_l+0xae0>)
 8011cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ccc:	f7ee ff06 	bl	8000adc <__aeabi_dcmplt>
 8011cd0:	2800      	cmp	r0, #0
 8011cd2:	f47f accf 	bne.w	8011674 <_strtod_l+0x454>
 8011cd6:	a30c      	add	r3, pc, #48	@ (adr r3, 8011d08 <_strtod_l+0xae8>)
 8011cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011ce0:	f7ee ff1a 	bl	8000b18 <__aeabi_dcmpgt>
 8011ce4:	2800      	cmp	r0, #0
 8011ce6:	d093      	beq.n	8011c10 <_strtod_l+0x9f0>
 8011ce8:	e4c4      	b.n	8011674 <_strtod_l+0x454>
 8011cea:	bf00      	nop
 8011cec:	f3af 8000 	nop.w
 8011cf0:	00000000 	.word	0x00000000
 8011cf4:	bff00000 	.word	0xbff00000
 8011cf8:	00000000 	.word	0x00000000
 8011cfc:	3ff00000 	.word	0x3ff00000
 8011d00:	94a03595 	.word	0x94a03595
 8011d04:	3fdfffff 	.word	0x3fdfffff
 8011d08:	35afe535 	.word	0x35afe535
 8011d0c:	3fe00000 	.word	0x3fe00000
 8011d10:	000fffff 	.word	0x000fffff
 8011d14:	7ff00000 	.word	0x7ff00000
 8011d18:	7fefffff 	.word	0x7fefffff
 8011d1c:	3ff00000 	.word	0x3ff00000
 8011d20:	3fe00000 	.word	0x3fe00000
 8011d24:	7fe00000 	.word	0x7fe00000
 8011d28:	7c9fffff 	.word	0x7c9fffff
 8011d2c:	9b08      	ldr	r3, [sp, #32]
 8011d2e:	b323      	cbz	r3, 8011d7a <_strtod_l+0xb5a>
 8011d30:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8011d34:	d821      	bhi.n	8011d7a <_strtod_l+0xb5a>
 8011d36:	a328      	add	r3, pc, #160	@ (adr r3, 8011dd8 <_strtod_l+0xbb8>)
 8011d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d3c:	4630      	mov	r0, r6
 8011d3e:	4639      	mov	r1, r7
 8011d40:	f7ee fed6 	bl	8000af0 <__aeabi_dcmple>
 8011d44:	b1a0      	cbz	r0, 8011d70 <_strtod_l+0xb50>
 8011d46:	4639      	mov	r1, r7
 8011d48:	4630      	mov	r0, r6
 8011d4a:	f7ee ff2d 	bl	8000ba8 <__aeabi_d2uiz>
 8011d4e:	2801      	cmp	r0, #1
 8011d50:	bf38      	it	cc
 8011d52:	2001      	movcc	r0, #1
 8011d54:	f7ee fbd6 	bl	8000504 <__aeabi_ui2d>
 8011d58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d5a:	4606      	mov	r6, r0
 8011d5c:	460f      	mov	r7, r1
 8011d5e:	b9fb      	cbnz	r3, 8011da0 <_strtod_l+0xb80>
 8011d60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011d64:	9014      	str	r0, [sp, #80]	@ 0x50
 8011d66:	9315      	str	r3, [sp, #84]	@ 0x54
 8011d68:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011d6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011d70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011d72:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011d76:	1b5b      	subs	r3, r3, r5
 8011d78:	9311      	str	r3, [sp, #68]	@ 0x44
 8011d7a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011d7e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011d82:	f7ff f8f1 	bl	8010f68 <__ulp>
 8011d86:	4650      	mov	r0, sl
 8011d88:	ec53 2b10 	vmov	r2, r3, d0
 8011d8c:	4659      	mov	r1, fp
 8011d8e:	f7ee fc33 	bl	80005f8 <__aeabi_dmul>
 8011d92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011d96:	f7ee fa79 	bl	800028c <__adddf3>
 8011d9a:	4682      	mov	sl, r0
 8011d9c:	468b      	mov	fp, r1
 8011d9e:	e770      	b.n	8011c82 <_strtod_l+0xa62>
 8011da0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011da4:	e7e0      	b.n	8011d68 <_strtod_l+0xb48>
 8011da6:	a30e      	add	r3, pc, #56	@ (adr r3, 8011de0 <_strtod_l+0xbc0>)
 8011da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dac:	f7ee fe96 	bl	8000adc <__aeabi_dcmplt>
 8011db0:	e798      	b.n	8011ce4 <_strtod_l+0xac4>
 8011db2:	2300      	movs	r3, #0
 8011db4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011db6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011db8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011dba:	6013      	str	r3, [r2, #0]
 8011dbc:	f7ff ba6d 	b.w	801129a <_strtod_l+0x7a>
 8011dc0:	2a65      	cmp	r2, #101	@ 0x65
 8011dc2:	f43f ab66 	beq.w	8011492 <_strtod_l+0x272>
 8011dc6:	2a45      	cmp	r2, #69	@ 0x45
 8011dc8:	f43f ab63 	beq.w	8011492 <_strtod_l+0x272>
 8011dcc:	2301      	movs	r3, #1
 8011dce:	f7ff bb9e 	b.w	801150e <_strtod_l+0x2ee>
 8011dd2:	bf00      	nop
 8011dd4:	f3af 8000 	nop.w
 8011dd8:	ffc00000 	.word	0xffc00000
 8011ddc:	41dfffff 	.word	0x41dfffff
 8011de0:	94a03595 	.word	0x94a03595
 8011de4:	3fcfffff 	.word	0x3fcfffff

08011de8 <_strtod_r>:
 8011de8:	4b01      	ldr	r3, [pc, #4]	@ (8011df0 <_strtod_r+0x8>)
 8011dea:	f7ff ba19 	b.w	8011220 <_strtod_l>
 8011dee:	bf00      	nop
 8011df0:	200001ec 	.word	0x200001ec

08011df4 <__ssputs_r>:
 8011df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011df8:	688e      	ldr	r6, [r1, #8]
 8011dfa:	461f      	mov	r7, r3
 8011dfc:	42be      	cmp	r6, r7
 8011dfe:	680b      	ldr	r3, [r1, #0]
 8011e00:	4682      	mov	sl, r0
 8011e02:	460c      	mov	r4, r1
 8011e04:	4690      	mov	r8, r2
 8011e06:	d82d      	bhi.n	8011e64 <__ssputs_r+0x70>
 8011e08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011e0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011e10:	d026      	beq.n	8011e60 <__ssputs_r+0x6c>
 8011e12:	6965      	ldr	r5, [r4, #20]
 8011e14:	6909      	ldr	r1, [r1, #16]
 8011e16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e1a:	eba3 0901 	sub.w	r9, r3, r1
 8011e1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e22:	1c7b      	adds	r3, r7, #1
 8011e24:	444b      	add	r3, r9
 8011e26:	106d      	asrs	r5, r5, #1
 8011e28:	429d      	cmp	r5, r3
 8011e2a:	bf38      	it	cc
 8011e2c:	461d      	movcc	r5, r3
 8011e2e:	0553      	lsls	r3, r2, #21
 8011e30:	d527      	bpl.n	8011e82 <__ssputs_r+0x8e>
 8011e32:	4629      	mov	r1, r5
 8011e34:	f7fe fc98 	bl	8010768 <_malloc_r>
 8011e38:	4606      	mov	r6, r0
 8011e3a:	b360      	cbz	r0, 8011e96 <__ssputs_r+0xa2>
 8011e3c:	6921      	ldr	r1, [r4, #16]
 8011e3e:	464a      	mov	r2, r9
 8011e40:	f7fd fdbb 	bl	800f9ba <memcpy>
 8011e44:	89a3      	ldrh	r3, [r4, #12]
 8011e46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e4e:	81a3      	strh	r3, [r4, #12]
 8011e50:	6126      	str	r6, [r4, #16]
 8011e52:	6165      	str	r5, [r4, #20]
 8011e54:	444e      	add	r6, r9
 8011e56:	eba5 0509 	sub.w	r5, r5, r9
 8011e5a:	6026      	str	r6, [r4, #0]
 8011e5c:	60a5      	str	r5, [r4, #8]
 8011e5e:	463e      	mov	r6, r7
 8011e60:	42be      	cmp	r6, r7
 8011e62:	d900      	bls.n	8011e66 <__ssputs_r+0x72>
 8011e64:	463e      	mov	r6, r7
 8011e66:	6820      	ldr	r0, [r4, #0]
 8011e68:	4632      	mov	r2, r6
 8011e6a:	4641      	mov	r1, r8
 8011e6c:	f000 fe4b 	bl	8012b06 <memmove>
 8011e70:	68a3      	ldr	r3, [r4, #8]
 8011e72:	1b9b      	subs	r3, r3, r6
 8011e74:	60a3      	str	r3, [r4, #8]
 8011e76:	6823      	ldr	r3, [r4, #0]
 8011e78:	4433      	add	r3, r6
 8011e7a:	6023      	str	r3, [r4, #0]
 8011e7c:	2000      	movs	r0, #0
 8011e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e82:	462a      	mov	r2, r5
 8011e84:	f001 fa11 	bl	80132aa <_realloc_r>
 8011e88:	4606      	mov	r6, r0
 8011e8a:	2800      	cmp	r0, #0
 8011e8c:	d1e0      	bne.n	8011e50 <__ssputs_r+0x5c>
 8011e8e:	6921      	ldr	r1, [r4, #16]
 8011e90:	4650      	mov	r0, sl
 8011e92:	f7fe fbf5 	bl	8010680 <_free_r>
 8011e96:	230c      	movs	r3, #12
 8011e98:	f8ca 3000 	str.w	r3, [sl]
 8011e9c:	89a3      	ldrh	r3, [r4, #12]
 8011e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ea2:	81a3      	strh	r3, [r4, #12]
 8011ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ea8:	e7e9      	b.n	8011e7e <__ssputs_r+0x8a>
	...

08011eac <_svfiprintf_r>:
 8011eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eb0:	4698      	mov	r8, r3
 8011eb2:	898b      	ldrh	r3, [r1, #12]
 8011eb4:	061b      	lsls	r3, r3, #24
 8011eb6:	b09d      	sub	sp, #116	@ 0x74
 8011eb8:	4607      	mov	r7, r0
 8011eba:	460d      	mov	r5, r1
 8011ebc:	4614      	mov	r4, r2
 8011ebe:	d510      	bpl.n	8011ee2 <_svfiprintf_r+0x36>
 8011ec0:	690b      	ldr	r3, [r1, #16]
 8011ec2:	b973      	cbnz	r3, 8011ee2 <_svfiprintf_r+0x36>
 8011ec4:	2140      	movs	r1, #64	@ 0x40
 8011ec6:	f7fe fc4f 	bl	8010768 <_malloc_r>
 8011eca:	6028      	str	r0, [r5, #0]
 8011ecc:	6128      	str	r0, [r5, #16]
 8011ece:	b930      	cbnz	r0, 8011ede <_svfiprintf_r+0x32>
 8011ed0:	230c      	movs	r3, #12
 8011ed2:	603b      	str	r3, [r7, #0]
 8011ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ed8:	b01d      	add	sp, #116	@ 0x74
 8011eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ede:	2340      	movs	r3, #64	@ 0x40
 8011ee0:	616b      	str	r3, [r5, #20]
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ee6:	2320      	movs	r3, #32
 8011ee8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011eec:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ef0:	2330      	movs	r3, #48	@ 0x30
 8011ef2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012090 <_svfiprintf_r+0x1e4>
 8011ef6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011efa:	f04f 0901 	mov.w	r9, #1
 8011efe:	4623      	mov	r3, r4
 8011f00:	469a      	mov	sl, r3
 8011f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f06:	b10a      	cbz	r2, 8011f0c <_svfiprintf_r+0x60>
 8011f08:	2a25      	cmp	r2, #37	@ 0x25
 8011f0a:	d1f9      	bne.n	8011f00 <_svfiprintf_r+0x54>
 8011f0c:	ebba 0b04 	subs.w	fp, sl, r4
 8011f10:	d00b      	beq.n	8011f2a <_svfiprintf_r+0x7e>
 8011f12:	465b      	mov	r3, fp
 8011f14:	4622      	mov	r2, r4
 8011f16:	4629      	mov	r1, r5
 8011f18:	4638      	mov	r0, r7
 8011f1a:	f7ff ff6b 	bl	8011df4 <__ssputs_r>
 8011f1e:	3001      	adds	r0, #1
 8011f20:	f000 80a7 	beq.w	8012072 <_svfiprintf_r+0x1c6>
 8011f24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011f26:	445a      	add	r2, fp
 8011f28:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	f000 809f 	beq.w	8012072 <_svfiprintf_r+0x1c6>
 8011f34:	2300      	movs	r3, #0
 8011f36:	f04f 32ff 	mov.w	r2, #4294967295
 8011f3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f3e:	f10a 0a01 	add.w	sl, sl, #1
 8011f42:	9304      	str	r3, [sp, #16]
 8011f44:	9307      	str	r3, [sp, #28]
 8011f46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011f4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f4c:	4654      	mov	r4, sl
 8011f4e:	2205      	movs	r2, #5
 8011f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f54:	484e      	ldr	r0, [pc, #312]	@ (8012090 <_svfiprintf_r+0x1e4>)
 8011f56:	f7ee f93b 	bl	80001d0 <memchr>
 8011f5a:	9a04      	ldr	r2, [sp, #16]
 8011f5c:	b9d8      	cbnz	r0, 8011f96 <_svfiprintf_r+0xea>
 8011f5e:	06d0      	lsls	r0, r2, #27
 8011f60:	bf44      	itt	mi
 8011f62:	2320      	movmi	r3, #32
 8011f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f68:	0711      	lsls	r1, r2, #28
 8011f6a:	bf44      	itt	mi
 8011f6c:	232b      	movmi	r3, #43	@ 0x2b
 8011f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f72:	f89a 3000 	ldrb.w	r3, [sl]
 8011f76:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f78:	d015      	beq.n	8011fa6 <_svfiprintf_r+0xfa>
 8011f7a:	9a07      	ldr	r2, [sp, #28]
 8011f7c:	4654      	mov	r4, sl
 8011f7e:	2000      	movs	r0, #0
 8011f80:	f04f 0c0a 	mov.w	ip, #10
 8011f84:	4621      	mov	r1, r4
 8011f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f8a:	3b30      	subs	r3, #48	@ 0x30
 8011f8c:	2b09      	cmp	r3, #9
 8011f8e:	d94b      	bls.n	8012028 <_svfiprintf_r+0x17c>
 8011f90:	b1b0      	cbz	r0, 8011fc0 <_svfiprintf_r+0x114>
 8011f92:	9207      	str	r2, [sp, #28]
 8011f94:	e014      	b.n	8011fc0 <_svfiprintf_r+0x114>
 8011f96:	eba0 0308 	sub.w	r3, r0, r8
 8011f9a:	fa09 f303 	lsl.w	r3, r9, r3
 8011f9e:	4313      	orrs	r3, r2
 8011fa0:	9304      	str	r3, [sp, #16]
 8011fa2:	46a2      	mov	sl, r4
 8011fa4:	e7d2      	b.n	8011f4c <_svfiprintf_r+0xa0>
 8011fa6:	9b03      	ldr	r3, [sp, #12]
 8011fa8:	1d19      	adds	r1, r3, #4
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	9103      	str	r1, [sp, #12]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	bfbb      	ittet	lt
 8011fb2:	425b      	neglt	r3, r3
 8011fb4:	f042 0202 	orrlt.w	r2, r2, #2
 8011fb8:	9307      	strge	r3, [sp, #28]
 8011fba:	9307      	strlt	r3, [sp, #28]
 8011fbc:	bfb8      	it	lt
 8011fbe:	9204      	strlt	r2, [sp, #16]
 8011fc0:	7823      	ldrb	r3, [r4, #0]
 8011fc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8011fc4:	d10a      	bne.n	8011fdc <_svfiprintf_r+0x130>
 8011fc6:	7863      	ldrb	r3, [r4, #1]
 8011fc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8011fca:	d132      	bne.n	8012032 <_svfiprintf_r+0x186>
 8011fcc:	9b03      	ldr	r3, [sp, #12]
 8011fce:	1d1a      	adds	r2, r3, #4
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	9203      	str	r2, [sp, #12]
 8011fd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011fd8:	3402      	adds	r4, #2
 8011fda:	9305      	str	r3, [sp, #20]
 8011fdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80120a0 <_svfiprintf_r+0x1f4>
 8011fe0:	7821      	ldrb	r1, [r4, #0]
 8011fe2:	2203      	movs	r2, #3
 8011fe4:	4650      	mov	r0, sl
 8011fe6:	f7ee f8f3 	bl	80001d0 <memchr>
 8011fea:	b138      	cbz	r0, 8011ffc <_svfiprintf_r+0x150>
 8011fec:	9b04      	ldr	r3, [sp, #16]
 8011fee:	eba0 000a 	sub.w	r0, r0, sl
 8011ff2:	2240      	movs	r2, #64	@ 0x40
 8011ff4:	4082      	lsls	r2, r0
 8011ff6:	4313      	orrs	r3, r2
 8011ff8:	3401      	adds	r4, #1
 8011ffa:	9304      	str	r3, [sp, #16]
 8011ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012000:	4824      	ldr	r0, [pc, #144]	@ (8012094 <_svfiprintf_r+0x1e8>)
 8012002:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012006:	2206      	movs	r2, #6
 8012008:	f7ee f8e2 	bl	80001d0 <memchr>
 801200c:	2800      	cmp	r0, #0
 801200e:	d036      	beq.n	801207e <_svfiprintf_r+0x1d2>
 8012010:	4b21      	ldr	r3, [pc, #132]	@ (8012098 <_svfiprintf_r+0x1ec>)
 8012012:	bb1b      	cbnz	r3, 801205c <_svfiprintf_r+0x1b0>
 8012014:	9b03      	ldr	r3, [sp, #12]
 8012016:	3307      	adds	r3, #7
 8012018:	f023 0307 	bic.w	r3, r3, #7
 801201c:	3308      	adds	r3, #8
 801201e:	9303      	str	r3, [sp, #12]
 8012020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012022:	4433      	add	r3, r6
 8012024:	9309      	str	r3, [sp, #36]	@ 0x24
 8012026:	e76a      	b.n	8011efe <_svfiprintf_r+0x52>
 8012028:	fb0c 3202 	mla	r2, ip, r2, r3
 801202c:	460c      	mov	r4, r1
 801202e:	2001      	movs	r0, #1
 8012030:	e7a8      	b.n	8011f84 <_svfiprintf_r+0xd8>
 8012032:	2300      	movs	r3, #0
 8012034:	3401      	adds	r4, #1
 8012036:	9305      	str	r3, [sp, #20]
 8012038:	4619      	mov	r1, r3
 801203a:	f04f 0c0a 	mov.w	ip, #10
 801203e:	4620      	mov	r0, r4
 8012040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012044:	3a30      	subs	r2, #48	@ 0x30
 8012046:	2a09      	cmp	r2, #9
 8012048:	d903      	bls.n	8012052 <_svfiprintf_r+0x1a6>
 801204a:	2b00      	cmp	r3, #0
 801204c:	d0c6      	beq.n	8011fdc <_svfiprintf_r+0x130>
 801204e:	9105      	str	r1, [sp, #20]
 8012050:	e7c4      	b.n	8011fdc <_svfiprintf_r+0x130>
 8012052:	fb0c 2101 	mla	r1, ip, r1, r2
 8012056:	4604      	mov	r4, r0
 8012058:	2301      	movs	r3, #1
 801205a:	e7f0      	b.n	801203e <_svfiprintf_r+0x192>
 801205c:	ab03      	add	r3, sp, #12
 801205e:	9300      	str	r3, [sp, #0]
 8012060:	462a      	mov	r2, r5
 8012062:	4b0e      	ldr	r3, [pc, #56]	@ (801209c <_svfiprintf_r+0x1f0>)
 8012064:	a904      	add	r1, sp, #16
 8012066:	4638      	mov	r0, r7
 8012068:	f7fc fb1e 	bl	800e6a8 <_printf_float>
 801206c:	1c42      	adds	r2, r0, #1
 801206e:	4606      	mov	r6, r0
 8012070:	d1d6      	bne.n	8012020 <_svfiprintf_r+0x174>
 8012072:	89ab      	ldrh	r3, [r5, #12]
 8012074:	065b      	lsls	r3, r3, #25
 8012076:	f53f af2d 	bmi.w	8011ed4 <_svfiprintf_r+0x28>
 801207a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801207c:	e72c      	b.n	8011ed8 <_svfiprintf_r+0x2c>
 801207e:	ab03      	add	r3, sp, #12
 8012080:	9300      	str	r3, [sp, #0]
 8012082:	462a      	mov	r2, r5
 8012084:	4b05      	ldr	r3, [pc, #20]	@ (801209c <_svfiprintf_r+0x1f0>)
 8012086:	a904      	add	r1, sp, #16
 8012088:	4638      	mov	r0, r7
 801208a:	f7fc fda5 	bl	800ebd8 <_printf_i>
 801208e:	e7ed      	b.n	801206c <_svfiprintf_r+0x1c0>
 8012090:	08013c60 	.word	0x08013c60
 8012094:	08013c6a 	.word	0x08013c6a
 8012098:	0800e6a9 	.word	0x0800e6a9
 801209c:	08011df5 	.word	0x08011df5
 80120a0:	08013c66 	.word	0x08013c66

080120a4 <_sungetc_r>:
 80120a4:	b538      	push	{r3, r4, r5, lr}
 80120a6:	1c4b      	adds	r3, r1, #1
 80120a8:	4614      	mov	r4, r2
 80120aa:	d103      	bne.n	80120b4 <_sungetc_r+0x10>
 80120ac:	f04f 35ff 	mov.w	r5, #4294967295
 80120b0:	4628      	mov	r0, r5
 80120b2:	bd38      	pop	{r3, r4, r5, pc}
 80120b4:	8993      	ldrh	r3, [r2, #12]
 80120b6:	f023 0320 	bic.w	r3, r3, #32
 80120ba:	8193      	strh	r3, [r2, #12]
 80120bc:	6853      	ldr	r3, [r2, #4]
 80120be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80120c0:	b2cd      	uxtb	r5, r1
 80120c2:	b18a      	cbz	r2, 80120e8 <_sungetc_r+0x44>
 80120c4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80120c6:	429a      	cmp	r2, r3
 80120c8:	dd08      	ble.n	80120dc <_sungetc_r+0x38>
 80120ca:	6823      	ldr	r3, [r4, #0]
 80120cc:	1e5a      	subs	r2, r3, #1
 80120ce:	6022      	str	r2, [r4, #0]
 80120d0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80120d4:	6863      	ldr	r3, [r4, #4]
 80120d6:	3301      	adds	r3, #1
 80120d8:	6063      	str	r3, [r4, #4]
 80120da:	e7e9      	b.n	80120b0 <_sungetc_r+0xc>
 80120dc:	4621      	mov	r1, r4
 80120de:	f000 fcd8 	bl	8012a92 <__submore>
 80120e2:	2800      	cmp	r0, #0
 80120e4:	d0f1      	beq.n	80120ca <_sungetc_r+0x26>
 80120e6:	e7e1      	b.n	80120ac <_sungetc_r+0x8>
 80120e8:	6921      	ldr	r1, [r4, #16]
 80120ea:	6822      	ldr	r2, [r4, #0]
 80120ec:	b141      	cbz	r1, 8012100 <_sungetc_r+0x5c>
 80120ee:	4291      	cmp	r1, r2
 80120f0:	d206      	bcs.n	8012100 <_sungetc_r+0x5c>
 80120f2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80120f6:	42a9      	cmp	r1, r5
 80120f8:	d102      	bne.n	8012100 <_sungetc_r+0x5c>
 80120fa:	3a01      	subs	r2, #1
 80120fc:	6022      	str	r2, [r4, #0]
 80120fe:	e7ea      	b.n	80120d6 <_sungetc_r+0x32>
 8012100:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8012104:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012108:	6363      	str	r3, [r4, #52]	@ 0x34
 801210a:	2303      	movs	r3, #3
 801210c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801210e:	4623      	mov	r3, r4
 8012110:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012114:	6023      	str	r3, [r4, #0]
 8012116:	2301      	movs	r3, #1
 8012118:	e7de      	b.n	80120d8 <_sungetc_r+0x34>

0801211a <__ssrefill_r>:
 801211a:	b510      	push	{r4, lr}
 801211c:	460c      	mov	r4, r1
 801211e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012120:	b169      	cbz	r1, 801213e <__ssrefill_r+0x24>
 8012122:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012126:	4299      	cmp	r1, r3
 8012128:	d001      	beq.n	801212e <__ssrefill_r+0x14>
 801212a:	f7fe faa9 	bl	8010680 <_free_r>
 801212e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012130:	6063      	str	r3, [r4, #4]
 8012132:	2000      	movs	r0, #0
 8012134:	6360      	str	r0, [r4, #52]	@ 0x34
 8012136:	b113      	cbz	r3, 801213e <__ssrefill_r+0x24>
 8012138:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801213a:	6023      	str	r3, [r4, #0]
 801213c:	bd10      	pop	{r4, pc}
 801213e:	6923      	ldr	r3, [r4, #16]
 8012140:	6023      	str	r3, [r4, #0]
 8012142:	2300      	movs	r3, #0
 8012144:	6063      	str	r3, [r4, #4]
 8012146:	89a3      	ldrh	r3, [r4, #12]
 8012148:	f043 0320 	orr.w	r3, r3, #32
 801214c:	81a3      	strh	r3, [r4, #12]
 801214e:	f04f 30ff 	mov.w	r0, #4294967295
 8012152:	e7f3      	b.n	801213c <__ssrefill_r+0x22>

08012154 <__ssvfiscanf_r>:
 8012154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012158:	460c      	mov	r4, r1
 801215a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801215e:	2100      	movs	r1, #0
 8012160:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8012164:	49a5      	ldr	r1, [pc, #660]	@ (80123fc <__ssvfiscanf_r+0x2a8>)
 8012166:	91a0      	str	r1, [sp, #640]	@ 0x280
 8012168:	f10d 0804 	add.w	r8, sp, #4
 801216c:	49a4      	ldr	r1, [pc, #656]	@ (8012400 <__ssvfiscanf_r+0x2ac>)
 801216e:	4fa5      	ldr	r7, [pc, #660]	@ (8012404 <__ssvfiscanf_r+0x2b0>)
 8012170:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8012174:	4606      	mov	r6, r0
 8012176:	91a1      	str	r1, [sp, #644]	@ 0x284
 8012178:	9300      	str	r3, [sp, #0]
 801217a:	7813      	ldrb	r3, [r2, #0]
 801217c:	2b00      	cmp	r3, #0
 801217e:	f000 8158 	beq.w	8012432 <__ssvfiscanf_r+0x2de>
 8012182:	5cf9      	ldrb	r1, [r7, r3]
 8012184:	f011 0108 	ands.w	r1, r1, #8
 8012188:	f102 0501 	add.w	r5, r2, #1
 801218c:	d019      	beq.n	80121c2 <__ssvfiscanf_r+0x6e>
 801218e:	6863      	ldr	r3, [r4, #4]
 8012190:	2b00      	cmp	r3, #0
 8012192:	dd0f      	ble.n	80121b4 <__ssvfiscanf_r+0x60>
 8012194:	6823      	ldr	r3, [r4, #0]
 8012196:	781a      	ldrb	r2, [r3, #0]
 8012198:	5cba      	ldrb	r2, [r7, r2]
 801219a:	0712      	lsls	r2, r2, #28
 801219c:	d401      	bmi.n	80121a2 <__ssvfiscanf_r+0x4e>
 801219e:	462a      	mov	r2, r5
 80121a0:	e7eb      	b.n	801217a <__ssvfiscanf_r+0x26>
 80121a2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80121a4:	3201      	adds	r2, #1
 80121a6:	9245      	str	r2, [sp, #276]	@ 0x114
 80121a8:	6862      	ldr	r2, [r4, #4]
 80121aa:	3301      	adds	r3, #1
 80121ac:	3a01      	subs	r2, #1
 80121ae:	6062      	str	r2, [r4, #4]
 80121b0:	6023      	str	r3, [r4, #0]
 80121b2:	e7ec      	b.n	801218e <__ssvfiscanf_r+0x3a>
 80121b4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80121b6:	4621      	mov	r1, r4
 80121b8:	4630      	mov	r0, r6
 80121ba:	4798      	blx	r3
 80121bc:	2800      	cmp	r0, #0
 80121be:	d0e9      	beq.n	8012194 <__ssvfiscanf_r+0x40>
 80121c0:	e7ed      	b.n	801219e <__ssvfiscanf_r+0x4a>
 80121c2:	2b25      	cmp	r3, #37	@ 0x25
 80121c4:	d012      	beq.n	80121ec <__ssvfiscanf_r+0x98>
 80121c6:	4699      	mov	r9, r3
 80121c8:	6863      	ldr	r3, [r4, #4]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	f340 8093 	ble.w	80122f6 <__ssvfiscanf_r+0x1a2>
 80121d0:	6822      	ldr	r2, [r4, #0]
 80121d2:	7813      	ldrb	r3, [r2, #0]
 80121d4:	454b      	cmp	r3, r9
 80121d6:	f040 812c 	bne.w	8012432 <__ssvfiscanf_r+0x2de>
 80121da:	6863      	ldr	r3, [r4, #4]
 80121dc:	3b01      	subs	r3, #1
 80121de:	6063      	str	r3, [r4, #4]
 80121e0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80121e2:	3201      	adds	r2, #1
 80121e4:	3301      	adds	r3, #1
 80121e6:	6022      	str	r2, [r4, #0]
 80121e8:	9345      	str	r3, [sp, #276]	@ 0x114
 80121ea:	e7d8      	b.n	801219e <__ssvfiscanf_r+0x4a>
 80121ec:	9141      	str	r1, [sp, #260]	@ 0x104
 80121ee:	9143      	str	r1, [sp, #268]	@ 0x10c
 80121f0:	7853      	ldrb	r3, [r2, #1]
 80121f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80121f4:	bf02      	ittt	eq
 80121f6:	2310      	moveq	r3, #16
 80121f8:	1c95      	addeq	r5, r2, #2
 80121fa:	9341      	streq	r3, [sp, #260]	@ 0x104
 80121fc:	220a      	movs	r2, #10
 80121fe:	46a9      	mov	r9, r5
 8012200:	f819 1b01 	ldrb.w	r1, [r9], #1
 8012204:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8012208:	2b09      	cmp	r3, #9
 801220a:	d91e      	bls.n	801224a <__ssvfiscanf_r+0xf6>
 801220c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8012408 <__ssvfiscanf_r+0x2b4>
 8012210:	2203      	movs	r2, #3
 8012212:	4650      	mov	r0, sl
 8012214:	f7ed ffdc 	bl	80001d0 <memchr>
 8012218:	b138      	cbz	r0, 801222a <__ssvfiscanf_r+0xd6>
 801221a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801221c:	eba0 000a 	sub.w	r0, r0, sl
 8012220:	2301      	movs	r3, #1
 8012222:	4083      	lsls	r3, r0
 8012224:	4313      	orrs	r3, r2
 8012226:	9341      	str	r3, [sp, #260]	@ 0x104
 8012228:	464d      	mov	r5, r9
 801222a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801222e:	2b78      	cmp	r3, #120	@ 0x78
 8012230:	d806      	bhi.n	8012240 <__ssvfiscanf_r+0xec>
 8012232:	2b57      	cmp	r3, #87	@ 0x57
 8012234:	d810      	bhi.n	8012258 <__ssvfiscanf_r+0x104>
 8012236:	2b25      	cmp	r3, #37	@ 0x25
 8012238:	d0c5      	beq.n	80121c6 <__ssvfiscanf_r+0x72>
 801223a:	d857      	bhi.n	80122ec <__ssvfiscanf_r+0x198>
 801223c:	2b00      	cmp	r3, #0
 801223e:	d065      	beq.n	801230c <__ssvfiscanf_r+0x1b8>
 8012240:	2303      	movs	r3, #3
 8012242:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012244:	230a      	movs	r3, #10
 8012246:	9342      	str	r3, [sp, #264]	@ 0x108
 8012248:	e078      	b.n	801233c <__ssvfiscanf_r+0x1e8>
 801224a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801224c:	fb02 1103 	mla	r1, r2, r3, r1
 8012250:	3930      	subs	r1, #48	@ 0x30
 8012252:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012254:	464d      	mov	r5, r9
 8012256:	e7d2      	b.n	80121fe <__ssvfiscanf_r+0xaa>
 8012258:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801225c:	2a20      	cmp	r2, #32
 801225e:	d8ef      	bhi.n	8012240 <__ssvfiscanf_r+0xec>
 8012260:	a101      	add	r1, pc, #4	@ (adr r1, 8012268 <__ssvfiscanf_r+0x114>)
 8012262:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012266:	bf00      	nop
 8012268:	0801231b 	.word	0x0801231b
 801226c:	08012241 	.word	0x08012241
 8012270:	08012241 	.word	0x08012241
 8012274:	08012375 	.word	0x08012375
 8012278:	08012241 	.word	0x08012241
 801227c:	08012241 	.word	0x08012241
 8012280:	08012241 	.word	0x08012241
 8012284:	08012241 	.word	0x08012241
 8012288:	08012241 	.word	0x08012241
 801228c:	08012241 	.word	0x08012241
 8012290:	08012241 	.word	0x08012241
 8012294:	0801238b 	.word	0x0801238b
 8012298:	08012371 	.word	0x08012371
 801229c:	080122f3 	.word	0x080122f3
 80122a0:	080122f3 	.word	0x080122f3
 80122a4:	080122f3 	.word	0x080122f3
 80122a8:	08012241 	.word	0x08012241
 80122ac:	0801232d 	.word	0x0801232d
 80122b0:	08012241 	.word	0x08012241
 80122b4:	08012241 	.word	0x08012241
 80122b8:	08012241 	.word	0x08012241
 80122bc:	08012241 	.word	0x08012241
 80122c0:	0801239b 	.word	0x0801239b
 80122c4:	08012335 	.word	0x08012335
 80122c8:	08012313 	.word	0x08012313
 80122cc:	08012241 	.word	0x08012241
 80122d0:	08012241 	.word	0x08012241
 80122d4:	08012397 	.word	0x08012397
 80122d8:	08012241 	.word	0x08012241
 80122dc:	08012371 	.word	0x08012371
 80122e0:	08012241 	.word	0x08012241
 80122e4:	08012241 	.word	0x08012241
 80122e8:	0801231b 	.word	0x0801231b
 80122ec:	3b45      	subs	r3, #69	@ 0x45
 80122ee:	2b02      	cmp	r3, #2
 80122f0:	d8a6      	bhi.n	8012240 <__ssvfiscanf_r+0xec>
 80122f2:	2305      	movs	r3, #5
 80122f4:	e021      	b.n	801233a <__ssvfiscanf_r+0x1e6>
 80122f6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80122f8:	4621      	mov	r1, r4
 80122fa:	4630      	mov	r0, r6
 80122fc:	4798      	blx	r3
 80122fe:	2800      	cmp	r0, #0
 8012300:	f43f af66 	beq.w	80121d0 <__ssvfiscanf_r+0x7c>
 8012304:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012306:	2800      	cmp	r0, #0
 8012308:	f040 808b 	bne.w	8012422 <__ssvfiscanf_r+0x2ce>
 801230c:	f04f 30ff 	mov.w	r0, #4294967295
 8012310:	e08b      	b.n	801242a <__ssvfiscanf_r+0x2d6>
 8012312:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012314:	f042 0220 	orr.w	r2, r2, #32
 8012318:	9241      	str	r2, [sp, #260]	@ 0x104
 801231a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801231c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012320:	9241      	str	r2, [sp, #260]	@ 0x104
 8012322:	2210      	movs	r2, #16
 8012324:	2b6e      	cmp	r3, #110	@ 0x6e
 8012326:	9242      	str	r2, [sp, #264]	@ 0x108
 8012328:	d902      	bls.n	8012330 <__ssvfiscanf_r+0x1dc>
 801232a:	e005      	b.n	8012338 <__ssvfiscanf_r+0x1e4>
 801232c:	2300      	movs	r3, #0
 801232e:	9342      	str	r3, [sp, #264]	@ 0x108
 8012330:	2303      	movs	r3, #3
 8012332:	e002      	b.n	801233a <__ssvfiscanf_r+0x1e6>
 8012334:	2308      	movs	r3, #8
 8012336:	9342      	str	r3, [sp, #264]	@ 0x108
 8012338:	2304      	movs	r3, #4
 801233a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801233c:	6863      	ldr	r3, [r4, #4]
 801233e:	2b00      	cmp	r3, #0
 8012340:	dd39      	ble.n	80123b6 <__ssvfiscanf_r+0x262>
 8012342:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012344:	0659      	lsls	r1, r3, #25
 8012346:	d404      	bmi.n	8012352 <__ssvfiscanf_r+0x1fe>
 8012348:	6823      	ldr	r3, [r4, #0]
 801234a:	781a      	ldrb	r2, [r3, #0]
 801234c:	5cba      	ldrb	r2, [r7, r2]
 801234e:	0712      	lsls	r2, r2, #28
 8012350:	d438      	bmi.n	80123c4 <__ssvfiscanf_r+0x270>
 8012352:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8012354:	2b02      	cmp	r3, #2
 8012356:	dc47      	bgt.n	80123e8 <__ssvfiscanf_r+0x294>
 8012358:	466b      	mov	r3, sp
 801235a:	4622      	mov	r2, r4
 801235c:	a941      	add	r1, sp, #260	@ 0x104
 801235e:	4630      	mov	r0, r6
 8012360:	f000 f9ae 	bl	80126c0 <_scanf_chars>
 8012364:	2801      	cmp	r0, #1
 8012366:	d064      	beq.n	8012432 <__ssvfiscanf_r+0x2de>
 8012368:	2802      	cmp	r0, #2
 801236a:	f47f af18 	bne.w	801219e <__ssvfiscanf_r+0x4a>
 801236e:	e7c9      	b.n	8012304 <__ssvfiscanf_r+0x1b0>
 8012370:	220a      	movs	r2, #10
 8012372:	e7d7      	b.n	8012324 <__ssvfiscanf_r+0x1d0>
 8012374:	4629      	mov	r1, r5
 8012376:	4640      	mov	r0, r8
 8012378:	f000 fb52 	bl	8012a20 <__sccl>
 801237c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801237e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012382:	9341      	str	r3, [sp, #260]	@ 0x104
 8012384:	4605      	mov	r5, r0
 8012386:	2301      	movs	r3, #1
 8012388:	e7d7      	b.n	801233a <__ssvfiscanf_r+0x1e6>
 801238a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801238c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012390:	9341      	str	r3, [sp, #260]	@ 0x104
 8012392:	2300      	movs	r3, #0
 8012394:	e7d1      	b.n	801233a <__ssvfiscanf_r+0x1e6>
 8012396:	2302      	movs	r3, #2
 8012398:	e7cf      	b.n	801233a <__ssvfiscanf_r+0x1e6>
 801239a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801239c:	06c3      	lsls	r3, r0, #27
 801239e:	f53f aefe 	bmi.w	801219e <__ssvfiscanf_r+0x4a>
 80123a2:	9b00      	ldr	r3, [sp, #0]
 80123a4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80123a6:	1d19      	adds	r1, r3, #4
 80123a8:	9100      	str	r1, [sp, #0]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	07c0      	lsls	r0, r0, #31
 80123ae:	bf4c      	ite	mi
 80123b0:	801a      	strhmi	r2, [r3, #0]
 80123b2:	601a      	strpl	r2, [r3, #0]
 80123b4:	e6f3      	b.n	801219e <__ssvfiscanf_r+0x4a>
 80123b6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80123b8:	4621      	mov	r1, r4
 80123ba:	4630      	mov	r0, r6
 80123bc:	4798      	blx	r3
 80123be:	2800      	cmp	r0, #0
 80123c0:	d0bf      	beq.n	8012342 <__ssvfiscanf_r+0x1ee>
 80123c2:	e79f      	b.n	8012304 <__ssvfiscanf_r+0x1b0>
 80123c4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80123c6:	3201      	adds	r2, #1
 80123c8:	9245      	str	r2, [sp, #276]	@ 0x114
 80123ca:	6862      	ldr	r2, [r4, #4]
 80123cc:	3a01      	subs	r2, #1
 80123ce:	2a00      	cmp	r2, #0
 80123d0:	6062      	str	r2, [r4, #4]
 80123d2:	dd02      	ble.n	80123da <__ssvfiscanf_r+0x286>
 80123d4:	3301      	adds	r3, #1
 80123d6:	6023      	str	r3, [r4, #0]
 80123d8:	e7b6      	b.n	8012348 <__ssvfiscanf_r+0x1f4>
 80123da:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80123dc:	4621      	mov	r1, r4
 80123de:	4630      	mov	r0, r6
 80123e0:	4798      	blx	r3
 80123e2:	2800      	cmp	r0, #0
 80123e4:	d0b0      	beq.n	8012348 <__ssvfiscanf_r+0x1f4>
 80123e6:	e78d      	b.n	8012304 <__ssvfiscanf_r+0x1b0>
 80123e8:	2b04      	cmp	r3, #4
 80123ea:	dc0f      	bgt.n	801240c <__ssvfiscanf_r+0x2b8>
 80123ec:	466b      	mov	r3, sp
 80123ee:	4622      	mov	r2, r4
 80123f0:	a941      	add	r1, sp, #260	@ 0x104
 80123f2:	4630      	mov	r0, r6
 80123f4:	f000 f9be 	bl	8012774 <_scanf_i>
 80123f8:	e7b4      	b.n	8012364 <__ssvfiscanf_r+0x210>
 80123fa:	bf00      	nop
 80123fc:	080120a5 	.word	0x080120a5
 8012400:	0801211b 	.word	0x0801211b
 8012404:	080138ed 	.word	0x080138ed
 8012408:	08013c66 	.word	0x08013c66
 801240c:	4b0a      	ldr	r3, [pc, #40]	@ (8012438 <__ssvfiscanf_r+0x2e4>)
 801240e:	2b00      	cmp	r3, #0
 8012410:	f43f aec5 	beq.w	801219e <__ssvfiscanf_r+0x4a>
 8012414:	466b      	mov	r3, sp
 8012416:	4622      	mov	r2, r4
 8012418:	a941      	add	r1, sp, #260	@ 0x104
 801241a:	4630      	mov	r0, r6
 801241c:	f7fc fcfc 	bl	800ee18 <_scanf_float>
 8012420:	e7a0      	b.n	8012364 <__ssvfiscanf_r+0x210>
 8012422:	89a3      	ldrh	r3, [r4, #12]
 8012424:	065b      	lsls	r3, r3, #25
 8012426:	f53f af71 	bmi.w	801230c <__ssvfiscanf_r+0x1b8>
 801242a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801242e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012432:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012434:	e7f9      	b.n	801242a <__ssvfiscanf_r+0x2d6>
 8012436:	bf00      	nop
 8012438:	0800ee19 	.word	0x0800ee19

0801243c <__sfputc_r>:
 801243c:	6893      	ldr	r3, [r2, #8]
 801243e:	3b01      	subs	r3, #1
 8012440:	2b00      	cmp	r3, #0
 8012442:	b410      	push	{r4}
 8012444:	6093      	str	r3, [r2, #8]
 8012446:	da08      	bge.n	801245a <__sfputc_r+0x1e>
 8012448:	6994      	ldr	r4, [r2, #24]
 801244a:	42a3      	cmp	r3, r4
 801244c:	db01      	blt.n	8012452 <__sfputc_r+0x16>
 801244e:	290a      	cmp	r1, #10
 8012450:	d103      	bne.n	801245a <__sfputc_r+0x1e>
 8012452:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012456:	f7fd b974 	b.w	800f742 <__swbuf_r>
 801245a:	6813      	ldr	r3, [r2, #0]
 801245c:	1c58      	adds	r0, r3, #1
 801245e:	6010      	str	r0, [r2, #0]
 8012460:	7019      	strb	r1, [r3, #0]
 8012462:	4608      	mov	r0, r1
 8012464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012468:	4770      	bx	lr

0801246a <__sfputs_r>:
 801246a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801246c:	4606      	mov	r6, r0
 801246e:	460f      	mov	r7, r1
 8012470:	4614      	mov	r4, r2
 8012472:	18d5      	adds	r5, r2, r3
 8012474:	42ac      	cmp	r4, r5
 8012476:	d101      	bne.n	801247c <__sfputs_r+0x12>
 8012478:	2000      	movs	r0, #0
 801247a:	e007      	b.n	801248c <__sfputs_r+0x22>
 801247c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012480:	463a      	mov	r2, r7
 8012482:	4630      	mov	r0, r6
 8012484:	f7ff ffda 	bl	801243c <__sfputc_r>
 8012488:	1c43      	adds	r3, r0, #1
 801248a:	d1f3      	bne.n	8012474 <__sfputs_r+0xa>
 801248c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012490 <_vfiprintf_r>:
 8012490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012494:	460d      	mov	r5, r1
 8012496:	b09d      	sub	sp, #116	@ 0x74
 8012498:	4614      	mov	r4, r2
 801249a:	4698      	mov	r8, r3
 801249c:	4606      	mov	r6, r0
 801249e:	b118      	cbz	r0, 80124a8 <_vfiprintf_r+0x18>
 80124a0:	6a03      	ldr	r3, [r0, #32]
 80124a2:	b90b      	cbnz	r3, 80124a8 <_vfiprintf_r+0x18>
 80124a4:	f7fd f818 	bl	800f4d8 <__sinit>
 80124a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124aa:	07d9      	lsls	r1, r3, #31
 80124ac:	d405      	bmi.n	80124ba <_vfiprintf_r+0x2a>
 80124ae:	89ab      	ldrh	r3, [r5, #12]
 80124b0:	059a      	lsls	r2, r3, #22
 80124b2:	d402      	bmi.n	80124ba <_vfiprintf_r+0x2a>
 80124b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124b6:	f7fd fa7e 	bl	800f9b6 <__retarget_lock_acquire_recursive>
 80124ba:	89ab      	ldrh	r3, [r5, #12]
 80124bc:	071b      	lsls	r3, r3, #28
 80124be:	d501      	bpl.n	80124c4 <_vfiprintf_r+0x34>
 80124c0:	692b      	ldr	r3, [r5, #16]
 80124c2:	b99b      	cbnz	r3, 80124ec <_vfiprintf_r+0x5c>
 80124c4:	4629      	mov	r1, r5
 80124c6:	4630      	mov	r0, r6
 80124c8:	f7fd f97a 	bl	800f7c0 <__swsetup_r>
 80124cc:	b170      	cbz	r0, 80124ec <_vfiprintf_r+0x5c>
 80124ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124d0:	07dc      	lsls	r4, r3, #31
 80124d2:	d504      	bpl.n	80124de <_vfiprintf_r+0x4e>
 80124d4:	f04f 30ff 	mov.w	r0, #4294967295
 80124d8:	b01d      	add	sp, #116	@ 0x74
 80124da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124de:	89ab      	ldrh	r3, [r5, #12]
 80124e0:	0598      	lsls	r0, r3, #22
 80124e2:	d4f7      	bmi.n	80124d4 <_vfiprintf_r+0x44>
 80124e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124e6:	f7fd fa67 	bl	800f9b8 <__retarget_lock_release_recursive>
 80124ea:	e7f3      	b.n	80124d4 <_vfiprintf_r+0x44>
 80124ec:	2300      	movs	r3, #0
 80124ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80124f0:	2320      	movs	r3, #32
 80124f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80124f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80124fa:	2330      	movs	r3, #48	@ 0x30
 80124fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80126ac <_vfiprintf_r+0x21c>
 8012500:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012504:	f04f 0901 	mov.w	r9, #1
 8012508:	4623      	mov	r3, r4
 801250a:	469a      	mov	sl, r3
 801250c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012510:	b10a      	cbz	r2, 8012516 <_vfiprintf_r+0x86>
 8012512:	2a25      	cmp	r2, #37	@ 0x25
 8012514:	d1f9      	bne.n	801250a <_vfiprintf_r+0x7a>
 8012516:	ebba 0b04 	subs.w	fp, sl, r4
 801251a:	d00b      	beq.n	8012534 <_vfiprintf_r+0xa4>
 801251c:	465b      	mov	r3, fp
 801251e:	4622      	mov	r2, r4
 8012520:	4629      	mov	r1, r5
 8012522:	4630      	mov	r0, r6
 8012524:	f7ff ffa1 	bl	801246a <__sfputs_r>
 8012528:	3001      	adds	r0, #1
 801252a:	f000 80a7 	beq.w	801267c <_vfiprintf_r+0x1ec>
 801252e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012530:	445a      	add	r2, fp
 8012532:	9209      	str	r2, [sp, #36]	@ 0x24
 8012534:	f89a 3000 	ldrb.w	r3, [sl]
 8012538:	2b00      	cmp	r3, #0
 801253a:	f000 809f 	beq.w	801267c <_vfiprintf_r+0x1ec>
 801253e:	2300      	movs	r3, #0
 8012540:	f04f 32ff 	mov.w	r2, #4294967295
 8012544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012548:	f10a 0a01 	add.w	sl, sl, #1
 801254c:	9304      	str	r3, [sp, #16]
 801254e:	9307      	str	r3, [sp, #28]
 8012550:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012554:	931a      	str	r3, [sp, #104]	@ 0x68
 8012556:	4654      	mov	r4, sl
 8012558:	2205      	movs	r2, #5
 801255a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801255e:	4853      	ldr	r0, [pc, #332]	@ (80126ac <_vfiprintf_r+0x21c>)
 8012560:	f7ed fe36 	bl	80001d0 <memchr>
 8012564:	9a04      	ldr	r2, [sp, #16]
 8012566:	b9d8      	cbnz	r0, 80125a0 <_vfiprintf_r+0x110>
 8012568:	06d1      	lsls	r1, r2, #27
 801256a:	bf44      	itt	mi
 801256c:	2320      	movmi	r3, #32
 801256e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012572:	0713      	lsls	r3, r2, #28
 8012574:	bf44      	itt	mi
 8012576:	232b      	movmi	r3, #43	@ 0x2b
 8012578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801257c:	f89a 3000 	ldrb.w	r3, [sl]
 8012580:	2b2a      	cmp	r3, #42	@ 0x2a
 8012582:	d015      	beq.n	80125b0 <_vfiprintf_r+0x120>
 8012584:	9a07      	ldr	r2, [sp, #28]
 8012586:	4654      	mov	r4, sl
 8012588:	2000      	movs	r0, #0
 801258a:	f04f 0c0a 	mov.w	ip, #10
 801258e:	4621      	mov	r1, r4
 8012590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012594:	3b30      	subs	r3, #48	@ 0x30
 8012596:	2b09      	cmp	r3, #9
 8012598:	d94b      	bls.n	8012632 <_vfiprintf_r+0x1a2>
 801259a:	b1b0      	cbz	r0, 80125ca <_vfiprintf_r+0x13a>
 801259c:	9207      	str	r2, [sp, #28]
 801259e:	e014      	b.n	80125ca <_vfiprintf_r+0x13a>
 80125a0:	eba0 0308 	sub.w	r3, r0, r8
 80125a4:	fa09 f303 	lsl.w	r3, r9, r3
 80125a8:	4313      	orrs	r3, r2
 80125aa:	9304      	str	r3, [sp, #16]
 80125ac:	46a2      	mov	sl, r4
 80125ae:	e7d2      	b.n	8012556 <_vfiprintf_r+0xc6>
 80125b0:	9b03      	ldr	r3, [sp, #12]
 80125b2:	1d19      	adds	r1, r3, #4
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	9103      	str	r1, [sp, #12]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	bfbb      	ittet	lt
 80125bc:	425b      	neglt	r3, r3
 80125be:	f042 0202 	orrlt.w	r2, r2, #2
 80125c2:	9307      	strge	r3, [sp, #28]
 80125c4:	9307      	strlt	r3, [sp, #28]
 80125c6:	bfb8      	it	lt
 80125c8:	9204      	strlt	r2, [sp, #16]
 80125ca:	7823      	ldrb	r3, [r4, #0]
 80125cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80125ce:	d10a      	bne.n	80125e6 <_vfiprintf_r+0x156>
 80125d0:	7863      	ldrb	r3, [r4, #1]
 80125d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80125d4:	d132      	bne.n	801263c <_vfiprintf_r+0x1ac>
 80125d6:	9b03      	ldr	r3, [sp, #12]
 80125d8:	1d1a      	adds	r2, r3, #4
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	9203      	str	r2, [sp, #12]
 80125de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80125e2:	3402      	adds	r4, #2
 80125e4:	9305      	str	r3, [sp, #20]
 80125e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80126bc <_vfiprintf_r+0x22c>
 80125ea:	7821      	ldrb	r1, [r4, #0]
 80125ec:	2203      	movs	r2, #3
 80125ee:	4650      	mov	r0, sl
 80125f0:	f7ed fdee 	bl	80001d0 <memchr>
 80125f4:	b138      	cbz	r0, 8012606 <_vfiprintf_r+0x176>
 80125f6:	9b04      	ldr	r3, [sp, #16]
 80125f8:	eba0 000a 	sub.w	r0, r0, sl
 80125fc:	2240      	movs	r2, #64	@ 0x40
 80125fe:	4082      	lsls	r2, r0
 8012600:	4313      	orrs	r3, r2
 8012602:	3401      	adds	r4, #1
 8012604:	9304      	str	r3, [sp, #16]
 8012606:	f814 1b01 	ldrb.w	r1, [r4], #1
 801260a:	4829      	ldr	r0, [pc, #164]	@ (80126b0 <_vfiprintf_r+0x220>)
 801260c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012610:	2206      	movs	r2, #6
 8012612:	f7ed fddd 	bl	80001d0 <memchr>
 8012616:	2800      	cmp	r0, #0
 8012618:	d03f      	beq.n	801269a <_vfiprintf_r+0x20a>
 801261a:	4b26      	ldr	r3, [pc, #152]	@ (80126b4 <_vfiprintf_r+0x224>)
 801261c:	bb1b      	cbnz	r3, 8012666 <_vfiprintf_r+0x1d6>
 801261e:	9b03      	ldr	r3, [sp, #12]
 8012620:	3307      	adds	r3, #7
 8012622:	f023 0307 	bic.w	r3, r3, #7
 8012626:	3308      	adds	r3, #8
 8012628:	9303      	str	r3, [sp, #12]
 801262a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801262c:	443b      	add	r3, r7
 801262e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012630:	e76a      	b.n	8012508 <_vfiprintf_r+0x78>
 8012632:	fb0c 3202 	mla	r2, ip, r2, r3
 8012636:	460c      	mov	r4, r1
 8012638:	2001      	movs	r0, #1
 801263a:	e7a8      	b.n	801258e <_vfiprintf_r+0xfe>
 801263c:	2300      	movs	r3, #0
 801263e:	3401      	adds	r4, #1
 8012640:	9305      	str	r3, [sp, #20]
 8012642:	4619      	mov	r1, r3
 8012644:	f04f 0c0a 	mov.w	ip, #10
 8012648:	4620      	mov	r0, r4
 801264a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801264e:	3a30      	subs	r2, #48	@ 0x30
 8012650:	2a09      	cmp	r2, #9
 8012652:	d903      	bls.n	801265c <_vfiprintf_r+0x1cc>
 8012654:	2b00      	cmp	r3, #0
 8012656:	d0c6      	beq.n	80125e6 <_vfiprintf_r+0x156>
 8012658:	9105      	str	r1, [sp, #20]
 801265a:	e7c4      	b.n	80125e6 <_vfiprintf_r+0x156>
 801265c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012660:	4604      	mov	r4, r0
 8012662:	2301      	movs	r3, #1
 8012664:	e7f0      	b.n	8012648 <_vfiprintf_r+0x1b8>
 8012666:	ab03      	add	r3, sp, #12
 8012668:	9300      	str	r3, [sp, #0]
 801266a:	462a      	mov	r2, r5
 801266c:	4b12      	ldr	r3, [pc, #72]	@ (80126b8 <_vfiprintf_r+0x228>)
 801266e:	a904      	add	r1, sp, #16
 8012670:	4630      	mov	r0, r6
 8012672:	f7fc f819 	bl	800e6a8 <_printf_float>
 8012676:	4607      	mov	r7, r0
 8012678:	1c78      	adds	r0, r7, #1
 801267a:	d1d6      	bne.n	801262a <_vfiprintf_r+0x19a>
 801267c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801267e:	07d9      	lsls	r1, r3, #31
 8012680:	d405      	bmi.n	801268e <_vfiprintf_r+0x1fe>
 8012682:	89ab      	ldrh	r3, [r5, #12]
 8012684:	059a      	lsls	r2, r3, #22
 8012686:	d402      	bmi.n	801268e <_vfiprintf_r+0x1fe>
 8012688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801268a:	f7fd f995 	bl	800f9b8 <__retarget_lock_release_recursive>
 801268e:	89ab      	ldrh	r3, [r5, #12]
 8012690:	065b      	lsls	r3, r3, #25
 8012692:	f53f af1f 	bmi.w	80124d4 <_vfiprintf_r+0x44>
 8012696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012698:	e71e      	b.n	80124d8 <_vfiprintf_r+0x48>
 801269a:	ab03      	add	r3, sp, #12
 801269c:	9300      	str	r3, [sp, #0]
 801269e:	462a      	mov	r2, r5
 80126a0:	4b05      	ldr	r3, [pc, #20]	@ (80126b8 <_vfiprintf_r+0x228>)
 80126a2:	a904      	add	r1, sp, #16
 80126a4:	4630      	mov	r0, r6
 80126a6:	f7fc fa97 	bl	800ebd8 <_printf_i>
 80126aa:	e7e4      	b.n	8012676 <_vfiprintf_r+0x1e6>
 80126ac:	08013c60 	.word	0x08013c60
 80126b0:	08013c6a 	.word	0x08013c6a
 80126b4:	0800e6a9 	.word	0x0800e6a9
 80126b8:	0801246b 	.word	0x0801246b
 80126bc:	08013c66 	.word	0x08013c66

080126c0 <_scanf_chars>:
 80126c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126c4:	4615      	mov	r5, r2
 80126c6:	688a      	ldr	r2, [r1, #8]
 80126c8:	4680      	mov	r8, r0
 80126ca:	460c      	mov	r4, r1
 80126cc:	b932      	cbnz	r2, 80126dc <_scanf_chars+0x1c>
 80126ce:	698a      	ldr	r2, [r1, #24]
 80126d0:	2a00      	cmp	r2, #0
 80126d2:	bf14      	ite	ne
 80126d4:	f04f 32ff 	movne.w	r2, #4294967295
 80126d8:	2201      	moveq	r2, #1
 80126da:	608a      	str	r2, [r1, #8]
 80126dc:	6822      	ldr	r2, [r4, #0]
 80126de:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012770 <_scanf_chars+0xb0>
 80126e2:	06d1      	lsls	r1, r2, #27
 80126e4:	bf5f      	itttt	pl
 80126e6:	681a      	ldrpl	r2, [r3, #0]
 80126e8:	1d11      	addpl	r1, r2, #4
 80126ea:	6019      	strpl	r1, [r3, #0]
 80126ec:	6816      	ldrpl	r6, [r2, #0]
 80126ee:	2700      	movs	r7, #0
 80126f0:	69a0      	ldr	r0, [r4, #24]
 80126f2:	b188      	cbz	r0, 8012718 <_scanf_chars+0x58>
 80126f4:	2801      	cmp	r0, #1
 80126f6:	d107      	bne.n	8012708 <_scanf_chars+0x48>
 80126f8:	682b      	ldr	r3, [r5, #0]
 80126fa:	781a      	ldrb	r2, [r3, #0]
 80126fc:	6963      	ldr	r3, [r4, #20]
 80126fe:	5c9b      	ldrb	r3, [r3, r2]
 8012700:	b953      	cbnz	r3, 8012718 <_scanf_chars+0x58>
 8012702:	2f00      	cmp	r7, #0
 8012704:	d031      	beq.n	801276a <_scanf_chars+0xaa>
 8012706:	e022      	b.n	801274e <_scanf_chars+0x8e>
 8012708:	2802      	cmp	r0, #2
 801270a:	d120      	bne.n	801274e <_scanf_chars+0x8e>
 801270c:	682b      	ldr	r3, [r5, #0]
 801270e:	781b      	ldrb	r3, [r3, #0]
 8012710:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012714:	071b      	lsls	r3, r3, #28
 8012716:	d41a      	bmi.n	801274e <_scanf_chars+0x8e>
 8012718:	6823      	ldr	r3, [r4, #0]
 801271a:	06da      	lsls	r2, r3, #27
 801271c:	bf5e      	ittt	pl
 801271e:	682b      	ldrpl	r3, [r5, #0]
 8012720:	781b      	ldrbpl	r3, [r3, #0]
 8012722:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012726:	682a      	ldr	r2, [r5, #0]
 8012728:	686b      	ldr	r3, [r5, #4]
 801272a:	3201      	adds	r2, #1
 801272c:	602a      	str	r2, [r5, #0]
 801272e:	68a2      	ldr	r2, [r4, #8]
 8012730:	3b01      	subs	r3, #1
 8012732:	3a01      	subs	r2, #1
 8012734:	606b      	str	r3, [r5, #4]
 8012736:	3701      	adds	r7, #1
 8012738:	60a2      	str	r2, [r4, #8]
 801273a:	b142      	cbz	r2, 801274e <_scanf_chars+0x8e>
 801273c:	2b00      	cmp	r3, #0
 801273e:	dcd7      	bgt.n	80126f0 <_scanf_chars+0x30>
 8012740:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012744:	4629      	mov	r1, r5
 8012746:	4640      	mov	r0, r8
 8012748:	4798      	blx	r3
 801274a:	2800      	cmp	r0, #0
 801274c:	d0d0      	beq.n	80126f0 <_scanf_chars+0x30>
 801274e:	6823      	ldr	r3, [r4, #0]
 8012750:	f013 0310 	ands.w	r3, r3, #16
 8012754:	d105      	bne.n	8012762 <_scanf_chars+0xa2>
 8012756:	68e2      	ldr	r2, [r4, #12]
 8012758:	3201      	adds	r2, #1
 801275a:	60e2      	str	r2, [r4, #12]
 801275c:	69a2      	ldr	r2, [r4, #24]
 801275e:	b102      	cbz	r2, 8012762 <_scanf_chars+0xa2>
 8012760:	7033      	strb	r3, [r6, #0]
 8012762:	6923      	ldr	r3, [r4, #16]
 8012764:	443b      	add	r3, r7
 8012766:	6123      	str	r3, [r4, #16]
 8012768:	2000      	movs	r0, #0
 801276a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801276e:	bf00      	nop
 8012770:	080138ed 	.word	0x080138ed

08012774 <_scanf_i>:
 8012774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012778:	4698      	mov	r8, r3
 801277a:	4b74      	ldr	r3, [pc, #464]	@ (801294c <_scanf_i+0x1d8>)
 801277c:	460c      	mov	r4, r1
 801277e:	4682      	mov	sl, r0
 8012780:	4616      	mov	r6, r2
 8012782:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012786:	b087      	sub	sp, #28
 8012788:	ab03      	add	r3, sp, #12
 801278a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801278e:	4b70      	ldr	r3, [pc, #448]	@ (8012950 <_scanf_i+0x1dc>)
 8012790:	69a1      	ldr	r1, [r4, #24]
 8012792:	4a70      	ldr	r2, [pc, #448]	@ (8012954 <_scanf_i+0x1e0>)
 8012794:	2903      	cmp	r1, #3
 8012796:	bf08      	it	eq
 8012798:	461a      	moveq	r2, r3
 801279a:	68a3      	ldr	r3, [r4, #8]
 801279c:	9201      	str	r2, [sp, #4]
 801279e:	1e5a      	subs	r2, r3, #1
 80127a0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80127a4:	bf88      	it	hi
 80127a6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80127aa:	4627      	mov	r7, r4
 80127ac:	bf82      	ittt	hi
 80127ae:	eb03 0905 	addhi.w	r9, r3, r5
 80127b2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80127b6:	60a3      	strhi	r3, [r4, #8]
 80127b8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80127bc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80127c0:	bf98      	it	ls
 80127c2:	f04f 0900 	movls.w	r9, #0
 80127c6:	6023      	str	r3, [r4, #0]
 80127c8:	463d      	mov	r5, r7
 80127ca:	f04f 0b00 	mov.w	fp, #0
 80127ce:	6831      	ldr	r1, [r6, #0]
 80127d0:	ab03      	add	r3, sp, #12
 80127d2:	7809      	ldrb	r1, [r1, #0]
 80127d4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80127d8:	2202      	movs	r2, #2
 80127da:	f7ed fcf9 	bl	80001d0 <memchr>
 80127de:	b328      	cbz	r0, 801282c <_scanf_i+0xb8>
 80127e0:	f1bb 0f01 	cmp.w	fp, #1
 80127e4:	d159      	bne.n	801289a <_scanf_i+0x126>
 80127e6:	6862      	ldr	r2, [r4, #4]
 80127e8:	b92a      	cbnz	r2, 80127f6 <_scanf_i+0x82>
 80127ea:	6822      	ldr	r2, [r4, #0]
 80127ec:	2108      	movs	r1, #8
 80127ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80127f2:	6061      	str	r1, [r4, #4]
 80127f4:	6022      	str	r2, [r4, #0]
 80127f6:	6822      	ldr	r2, [r4, #0]
 80127f8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80127fc:	6022      	str	r2, [r4, #0]
 80127fe:	68a2      	ldr	r2, [r4, #8]
 8012800:	1e51      	subs	r1, r2, #1
 8012802:	60a1      	str	r1, [r4, #8]
 8012804:	b192      	cbz	r2, 801282c <_scanf_i+0xb8>
 8012806:	6832      	ldr	r2, [r6, #0]
 8012808:	1c51      	adds	r1, r2, #1
 801280a:	6031      	str	r1, [r6, #0]
 801280c:	7812      	ldrb	r2, [r2, #0]
 801280e:	f805 2b01 	strb.w	r2, [r5], #1
 8012812:	6872      	ldr	r2, [r6, #4]
 8012814:	3a01      	subs	r2, #1
 8012816:	2a00      	cmp	r2, #0
 8012818:	6072      	str	r2, [r6, #4]
 801281a:	dc07      	bgt.n	801282c <_scanf_i+0xb8>
 801281c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012820:	4631      	mov	r1, r6
 8012822:	4650      	mov	r0, sl
 8012824:	4790      	blx	r2
 8012826:	2800      	cmp	r0, #0
 8012828:	f040 8085 	bne.w	8012936 <_scanf_i+0x1c2>
 801282c:	f10b 0b01 	add.w	fp, fp, #1
 8012830:	f1bb 0f03 	cmp.w	fp, #3
 8012834:	d1cb      	bne.n	80127ce <_scanf_i+0x5a>
 8012836:	6863      	ldr	r3, [r4, #4]
 8012838:	b90b      	cbnz	r3, 801283e <_scanf_i+0xca>
 801283a:	230a      	movs	r3, #10
 801283c:	6063      	str	r3, [r4, #4]
 801283e:	6863      	ldr	r3, [r4, #4]
 8012840:	4945      	ldr	r1, [pc, #276]	@ (8012958 <_scanf_i+0x1e4>)
 8012842:	6960      	ldr	r0, [r4, #20]
 8012844:	1ac9      	subs	r1, r1, r3
 8012846:	f000 f8eb 	bl	8012a20 <__sccl>
 801284a:	f04f 0b00 	mov.w	fp, #0
 801284e:	68a3      	ldr	r3, [r4, #8]
 8012850:	6822      	ldr	r2, [r4, #0]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d03d      	beq.n	80128d2 <_scanf_i+0x15e>
 8012856:	6831      	ldr	r1, [r6, #0]
 8012858:	6960      	ldr	r0, [r4, #20]
 801285a:	f891 c000 	ldrb.w	ip, [r1]
 801285e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012862:	2800      	cmp	r0, #0
 8012864:	d035      	beq.n	80128d2 <_scanf_i+0x15e>
 8012866:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801286a:	d124      	bne.n	80128b6 <_scanf_i+0x142>
 801286c:	0510      	lsls	r0, r2, #20
 801286e:	d522      	bpl.n	80128b6 <_scanf_i+0x142>
 8012870:	f10b 0b01 	add.w	fp, fp, #1
 8012874:	f1b9 0f00 	cmp.w	r9, #0
 8012878:	d003      	beq.n	8012882 <_scanf_i+0x10e>
 801287a:	3301      	adds	r3, #1
 801287c:	f109 39ff 	add.w	r9, r9, #4294967295
 8012880:	60a3      	str	r3, [r4, #8]
 8012882:	6873      	ldr	r3, [r6, #4]
 8012884:	3b01      	subs	r3, #1
 8012886:	2b00      	cmp	r3, #0
 8012888:	6073      	str	r3, [r6, #4]
 801288a:	dd1b      	ble.n	80128c4 <_scanf_i+0x150>
 801288c:	6833      	ldr	r3, [r6, #0]
 801288e:	3301      	adds	r3, #1
 8012890:	6033      	str	r3, [r6, #0]
 8012892:	68a3      	ldr	r3, [r4, #8]
 8012894:	3b01      	subs	r3, #1
 8012896:	60a3      	str	r3, [r4, #8]
 8012898:	e7d9      	b.n	801284e <_scanf_i+0xda>
 801289a:	f1bb 0f02 	cmp.w	fp, #2
 801289e:	d1ae      	bne.n	80127fe <_scanf_i+0x8a>
 80128a0:	6822      	ldr	r2, [r4, #0]
 80128a2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80128a6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80128aa:	d1bf      	bne.n	801282c <_scanf_i+0xb8>
 80128ac:	2110      	movs	r1, #16
 80128ae:	6061      	str	r1, [r4, #4]
 80128b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80128b4:	e7a2      	b.n	80127fc <_scanf_i+0x88>
 80128b6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80128ba:	6022      	str	r2, [r4, #0]
 80128bc:	780b      	ldrb	r3, [r1, #0]
 80128be:	f805 3b01 	strb.w	r3, [r5], #1
 80128c2:	e7de      	b.n	8012882 <_scanf_i+0x10e>
 80128c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80128c8:	4631      	mov	r1, r6
 80128ca:	4650      	mov	r0, sl
 80128cc:	4798      	blx	r3
 80128ce:	2800      	cmp	r0, #0
 80128d0:	d0df      	beq.n	8012892 <_scanf_i+0x11e>
 80128d2:	6823      	ldr	r3, [r4, #0]
 80128d4:	05d9      	lsls	r1, r3, #23
 80128d6:	d50d      	bpl.n	80128f4 <_scanf_i+0x180>
 80128d8:	42bd      	cmp	r5, r7
 80128da:	d909      	bls.n	80128f0 <_scanf_i+0x17c>
 80128dc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80128e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80128e4:	4632      	mov	r2, r6
 80128e6:	4650      	mov	r0, sl
 80128e8:	4798      	blx	r3
 80128ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80128ee:	464d      	mov	r5, r9
 80128f0:	42bd      	cmp	r5, r7
 80128f2:	d028      	beq.n	8012946 <_scanf_i+0x1d2>
 80128f4:	6822      	ldr	r2, [r4, #0]
 80128f6:	f012 0210 	ands.w	r2, r2, #16
 80128fa:	d113      	bne.n	8012924 <_scanf_i+0x1b0>
 80128fc:	702a      	strb	r2, [r5, #0]
 80128fe:	6863      	ldr	r3, [r4, #4]
 8012900:	9e01      	ldr	r6, [sp, #4]
 8012902:	4639      	mov	r1, r7
 8012904:	4650      	mov	r0, sl
 8012906:	47b0      	blx	r6
 8012908:	f8d8 3000 	ldr.w	r3, [r8]
 801290c:	6821      	ldr	r1, [r4, #0]
 801290e:	1d1a      	adds	r2, r3, #4
 8012910:	f8c8 2000 	str.w	r2, [r8]
 8012914:	f011 0f20 	tst.w	r1, #32
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	d00f      	beq.n	801293c <_scanf_i+0x1c8>
 801291c:	6018      	str	r0, [r3, #0]
 801291e:	68e3      	ldr	r3, [r4, #12]
 8012920:	3301      	adds	r3, #1
 8012922:	60e3      	str	r3, [r4, #12]
 8012924:	6923      	ldr	r3, [r4, #16]
 8012926:	1bed      	subs	r5, r5, r7
 8012928:	445d      	add	r5, fp
 801292a:	442b      	add	r3, r5
 801292c:	6123      	str	r3, [r4, #16]
 801292e:	2000      	movs	r0, #0
 8012930:	b007      	add	sp, #28
 8012932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012936:	f04f 0b00 	mov.w	fp, #0
 801293a:	e7ca      	b.n	80128d2 <_scanf_i+0x15e>
 801293c:	07ca      	lsls	r2, r1, #31
 801293e:	bf4c      	ite	mi
 8012940:	8018      	strhmi	r0, [r3, #0]
 8012942:	6018      	strpl	r0, [r3, #0]
 8012944:	e7eb      	b.n	801291e <_scanf_i+0x1aa>
 8012946:	2001      	movs	r0, #1
 8012948:	e7f2      	b.n	8012930 <_scanf_i+0x1bc>
 801294a:	bf00      	nop
 801294c:	080138a8 	.word	0x080138a8
 8012950:	0800e551 	.word	0x0800e551
 8012954:	080133e5 	.word	0x080133e5
 8012958:	08013c81 	.word	0x08013c81

0801295c <__swhatbuf_r>:
 801295c:	b570      	push	{r4, r5, r6, lr}
 801295e:	460c      	mov	r4, r1
 8012960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012964:	2900      	cmp	r1, #0
 8012966:	b096      	sub	sp, #88	@ 0x58
 8012968:	4615      	mov	r5, r2
 801296a:	461e      	mov	r6, r3
 801296c:	da0d      	bge.n	801298a <__swhatbuf_r+0x2e>
 801296e:	89a3      	ldrh	r3, [r4, #12]
 8012970:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012974:	f04f 0100 	mov.w	r1, #0
 8012978:	bf14      	ite	ne
 801297a:	2340      	movne	r3, #64	@ 0x40
 801297c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012980:	2000      	movs	r0, #0
 8012982:	6031      	str	r1, [r6, #0]
 8012984:	602b      	str	r3, [r5, #0]
 8012986:	b016      	add	sp, #88	@ 0x58
 8012988:	bd70      	pop	{r4, r5, r6, pc}
 801298a:	466a      	mov	r2, sp
 801298c:	f000 f8d6 	bl	8012b3c <_fstat_r>
 8012990:	2800      	cmp	r0, #0
 8012992:	dbec      	blt.n	801296e <__swhatbuf_r+0x12>
 8012994:	9901      	ldr	r1, [sp, #4]
 8012996:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801299a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801299e:	4259      	negs	r1, r3
 80129a0:	4159      	adcs	r1, r3
 80129a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80129a6:	e7eb      	b.n	8012980 <__swhatbuf_r+0x24>

080129a8 <__smakebuf_r>:
 80129a8:	898b      	ldrh	r3, [r1, #12]
 80129aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80129ac:	079d      	lsls	r5, r3, #30
 80129ae:	4606      	mov	r6, r0
 80129b0:	460c      	mov	r4, r1
 80129b2:	d507      	bpl.n	80129c4 <__smakebuf_r+0x1c>
 80129b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80129b8:	6023      	str	r3, [r4, #0]
 80129ba:	6123      	str	r3, [r4, #16]
 80129bc:	2301      	movs	r3, #1
 80129be:	6163      	str	r3, [r4, #20]
 80129c0:	b003      	add	sp, #12
 80129c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129c4:	ab01      	add	r3, sp, #4
 80129c6:	466a      	mov	r2, sp
 80129c8:	f7ff ffc8 	bl	801295c <__swhatbuf_r>
 80129cc:	9f00      	ldr	r7, [sp, #0]
 80129ce:	4605      	mov	r5, r0
 80129d0:	4639      	mov	r1, r7
 80129d2:	4630      	mov	r0, r6
 80129d4:	f7fd fec8 	bl	8010768 <_malloc_r>
 80129d8:	b948      	cbnz	r0, 80129ee <__smakebuf_r+0x46>
 80129da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129de:	059a      	lsls	r2, r3, #22
 80129e0:	d4ee      	bmi.n	80129c0 <__smakebuf_r+0x18>
 80129e2:	f023 0303 	bic.w	r3, r3, #3
 80129e6:	f043 0302 	orr.w	r3, r3, #2
 80129ea:	81a3      	strh	r3, [r4, #12]
 80129ec:	e7e2      	b.n	80129b4 <__smakebuf_r+0xc>
 80129ee:	89a3      	ldrh	r3, [r4, #12]
 80129f0:	6020      	str	r0, [r4, #0]
 80129f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80129f6:	81a3      	strh	r3, [r4, #12]
 80129f8:	9b01      	ldr	r3, [sp, #4]
 80129fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80129fe:	b15b      	cbz	r3, 8012a18 <__smakebuf_r+0x70>
 8012a00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a04:	4630      	mov	r0, r6
 8012a06:	f000 f8ab 	bl	8012b60 <_isatty_r>
 8012a0a:	b128      	cbz	r0, 8012a18 <__smakebuf_r+0x70>
 8012a0c:	89a3      	ldrh	r3, [r4, #12]
 8012a0e:	f023 0303 	bic.w	r3, r3, #3
 8012a12:	f043 0301 	orr.w	r3, r3, #1
 8012a16:	81a3      	strh	r3, [r4, #12]
 8012a18:	89a3      	ldrh	r3, [r4, #12]
 8012a1a:	431d      	orrs	r5, r3
 8012a1c:	81a5      	strh	r5, [r4, #12]
 8012a1e:	e7cf      	b.n	80129c0 <__smakebuf_r+0x18>

08012a20 <__sccl>:
 8012a20:	b570      	push	{r4, r5, r6, lr}
 8012a22:	780b      	ldrb	r3, [r1, #0]
 8012a24:	4604      	mov	r4, r0
 8012a26:	2b5e      	cmp	r3, #94	@ 0x5e
 8012a28:	bf0b      	itete	eq
 8012a2a:	784b      	ldrbeq	r3, [r1, #1]
 8012a2c:	1c4a      	addne	r2, r1, #1
 8012a2e:	1c8a      	addeq	r2, r1, #2
 8012a30:	2100      	movne	r1, #0
 8012a32:	bf08      	it	eq
 8012a34:	2101      	moveq	r1, #1
 8012a36:	3801      	subs	r0, #1
 8012a38:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012a3c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012a40:	42a8      	cmp	r0, r5
 8012a42:	d1fb      	bne.n	8012a3c <__sccl+0x1c>
 8012a44:	b90b      	cbnz	r3, 8012a4a <__sccl+0x2a>
 8012a46:	1e50      	subs	r0, r2, #1
 8012a48:	bd70      	pop	{r4, r5, r6, pc}
 8012a4a:	f081 0101 	eor.w	r1, r1, #1
 8012a4e:	54e1      	strb	r1, [r4, r3]
 8012a50:	4610      	mov	r0, r2
 8012a52:	4602      	mov	r2, r0
 8012a54:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012a58:	2d2d      	cmp	r5, #45	@ 0x2d
 8012a5a:	d005      	beq.n	8012a68 <__sccl+0x48>
 8012a5c:	2d5d      	cmp	r5, #93	@ 0x5d
 8012a5e:	d016      	beq.n	8012a8e <__sccl+0x6e>
 8012a60:	2d00      	cmp	r5, #0
 8012a62:	d0f1      	beq.n	8012a48 <__sccl+0x28>
 8012a64:	462b      	mov	r3, r5
 8012a66:	e7f2      	b.n	8012a4e <__sccl+0x2e>
 8012a68:	7846      	ldrb	r6, [r0, #1]
 8012a6a:	2e5d      	cmp	r6, #93	@ 0x5d
 8012a6c:	d0fa      	beq.n	8012a64 <__sccl+0x44>
 8012a6e:	42b3      	cmp	r3, r6
 8012a70:	dcf8      	bgt.n	8012a64 <__sccl+0x44>
 8012a72:	3002      	adds	r0, #2
 8012a74:	461a      	mov	r2, r3
 8012a76:	3201      	adds	r2, #1
 8012a78:	4296      	cmp	r6, r2
 8012a7a:	54a1      	strb	r1, [r4, r2]
 8012a7c:	dcfb      	bgt.n	8012a76 <__sccl+0x56>
 8012a7e:	1af2      	subs	r2, r6, r3
 8012a80:	3a01      	subs	r2, #1
 8012a82:	1c5d      	adds	r5, r3, #1
 8012a84:	42b3      	cmp	r3, r6
 8012a86:	bfa8      	it	ge
 8012a88:	2200      	movge	r2, #0
 8012a8a:	18ab      	adds	r3, r5, r2
 8012a8c:	e7e1      	b.n	8012a52 <__sccl+0x32>
 8012a8e:	4610      	mov	r0, r2
 8012a90:	e7da      	b.n	8012a48 <__sccl+0x28>

08012a92 <__submore>:
 8012a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a96:	460c      	mov	r4, r1
 8012a98:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012a9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012a9e:	4299      	cmp	r1, r3
 8012aa0:	d11d      	bne.n	8012ade <__submore+0x4c>
 8012aa2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012aa6:	f7fd fe5f 	bl	8010768 <_malloc_r>
 8012aaa:	b918      	cbnz	r0, 8012ab4 <__submore+0x22>
 8012aac:	f04f 30ff 	mov.w	r0, #4294967295
 8012ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ab4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012ab8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012aba:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012abe:	6360      	str	r0, [r4, #52]	@ 0x34
 8012ac0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012ac4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012ac8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012acc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012ad0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012ad4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012ad8:	6020      	str	r0, [r4, #0]
 8012ada:	2000      	movs	r0, #0
 8012adc:	e7e8      	b.n	8012ab0 <__submore+0x1e>
 8012ade:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012ae0:	0077      	lsls	r7, r6, #1
 8012ae2:	463a      	mov	r2, r7
 8012ae4:	f000 fbe1 	bl	80132aa <_realloc_r>
 8012ae8:	4605      	mov	r5, r0
 8012aea:	2800      	cmp	r0, #0
 8012aec:	d0de      	beq.n	8012aac <__submore+0x1a>
 8012aee:	eb00 0806 	add.w	r8, r0, r6
 8012af2:	4601      	mov	r1, r0
 8012af4:	4632      	mov	r2, r6
 8012af6:	4640      	mov	r0, r8
 8012af8:	f7fc ff5f 	bl	800f9ba <memcpy>
 8012afc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012b00:	f8c4 8000 	str.w	r8, [r4]
 8012b04:	e7e9      	b.n	8012ada <__submore+0x48>

08012b06 <memmove>:
 8012b06:	4288      	cmp	r0, r1
 8012b08:	b510      	push	{r4, lr}
 8012b0a:	eb01 0402 	add.w	r4, r1, r2
 8012b0e:	d902      	bls.n	8012b16 <memmove+0x10>
 8012b10:	4284      	cmp	r4, r0
 8012b12:	4623      	mov	r3, r4
 8012b14:	d807      	bhi.n	8012b26 <memmove+0x20>
 8012b16:	1e43      	subs	r3, r0, #1
 8012b18:	42a1      	cmp	r1, r4
 8012b1a:	d008      	beq.n	8012b2e <memmove+0x28>
 8012b1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b20:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b24:	e7f8      	b.n	8012b18 <memmove+0x12>
 8012b26:	4402      	add	r2, r0
 8012b28:	4601      	mov	r1, r0
 8012b2a:	428a      	cmp	r2, r1
 8012b2c:	d100      	bne.n	8012b30 <memmove+0x2a>
 8012b2e:	bd10      	pop	{r4, pc}
 8012b30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b38:	e7f7      	b.n	8012b2a <memmove+0x24>
	...

08012b3c <_fstat_r>:
 8012b3c:	b538      	push	{r3, r4, r5, lr}
 8012b3e:	4d07      	ldr	r5, [pc, #28]	@ (8012b5c <_fstat_r+0x20>)
 8012b40:	2300      	movs	r3, #0
 8012b42:	4604      	mov	r4, r0
 8012b44:	4608      	mov	r0, r1
 8012b46:	4611      	mov	r1, r2
 8012b48:	602b      	str	r3, [r5, #0]
 8012b4a:	f7ef ff94 	bl	8002a76 <_fstat>
 8012b4e:	1c43      	adds	r3, r0, #1
 8012b50:	d102      	bne.n	8012b58 <_fstat_r+0x1c>
 8012b52:	682b      	ldr	r3, [r5, #0]
 8012b54:	b103      	cbz	r3, 8012b58 <_fstat_r+0x1c>
 8012b56:	6023      	str	r3, [r4, #0]
 8012b58:	bd38      	pop	{r3, r4, r5, pc}
 8012b5a:	bf00      	nop
 8012b5c:	20002250 	.word	0x20002250

08012b60 <_isatty_r>:
 8012b60:	b538      	push	{r3, r4, r5, lr}
 8012b62:	4d06      	ldr	r5, [pc, #24]	@ (8012b7c <_isatty_r+0x1c>)
 8012b64:	2300      	movs	r3, #0
 8012b66:	4604      	mov	r4, r0
 8012b68:	4608      	mov	r0, r1
 8012b6a:	602b      	str	r3, [r5, #0]
 8012b6c:	f7ef ff93 	bl	8002a96 <_isatty>
 8012b70:	1c43      	adds	r3, r0, #1
 8012b72:	d102      	bne.n	8012b7a <_isatty_r+0x1a>
 8012b74:	682b      	ldr	r3, [r5, #0]
 8012b76:	b103      	cbz	r3, 8012b7a <_isatty_r+0x1a>
 8012b78:	6023      	str	r3, [r4, #0]
 8012b7a:	bd38      	pop	{r3, r4, r5, pc}
 8012b7c:	20002250 	.word	0x20002250

08012b80 <_sbrk_r>:
 8012b80:	b538      	push	{r3, r4, r5, lr}
 8012b82:	4d06      	ldr	r5, [pc, #24]	@ (8012b9c <_sbrk_r+0x1c>)
 8012b84:	2300      	movs	r3, #0
 8012b86:	4604      	mov	r4, r0
 8012b88:	4608      	mov	r0, r1
 8012b8a:	602b      	str	r3, [r5, #0]
 8012b8c:	f7ef ff9c 	bl	8002ac8 <_sbrk>
 8012b90:	1c43      	adds	r3, r0, #1
 8012b92:	d102      	bne.n	8012b9a <_sbrk_r+0x1a>
 8012b94:	682b      	ldr	r3, [r5, #0]
 8012b96:	b103      	cbz	r3, 8012b9a <_sbrk_r+0x1a>
 8012b98:	6023      	str	r3, [r4, #0]
 8012b9a:	bd38      	pop	{r3, r4, r5, pc}
 8012b9c:	20002250 	.word	0x20002250

08012ba0 <nan>:
 8012ba0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012ba8 <nan+0x8>
 8012ba4:	4770      	bx	lr
 8012ba6:	bf00      	nop
 8012ba8:	00000000 	.word	0x00000000
 8012bac:	7ff80000 	.word	0x7ff80000

08012bb0 <__assert_func>:
 8012bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012bb2:	4614      	mov	r4, r2
 8012bb4:	461a      	mov	r2, r3
 8012bb6:	4b09      	ldr	r3, [pc, #36]	@ (8012bdc <__assert_func+0x2c>)
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	4605      	mov	r5, r0
 8012bbc:	68d8      	ldr	r0, [r3, #12]
 8012bbe:	b954      	cbnz	r4, 8012bd6 <__assert_func+0x26>
 8012bc0:	4b07      	ldr	r3, [pc, #28]	@ (8012be0 <__assert_func+0x30>)
 8012bc2:	461c      	mov	r4, r3
 8012bc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012bc8:	9100      	str	r1, [sp, #0]
 8012bca:	462b      	mov	r3, r5
 8012bcc:	4905      	ldr	r1, [pc, #20]	@ (8012be4 <__assert_func+0x34>)
 8012bce:	f000 fc19 	bl	8013404 <fiprintf>
 8012bd2:	f000 fc29 	bl	8013428 <abort>
 8012bd6:	4b04      	ldr	r3, [pc, #16]	@ (8012be8 <__assert_func+0x38>)
 8012bd8:	e7f4      	b.n	8012bc4 <__assert_func+0x14>
 8012bda:	bf00      	nop
 8012bdc:	2000019c 	.word	0x2000019c
 8012be0:	08013ccf 	.word	0x08013ccf
 8012be4:	08013ca1 	.word	0x08013ca1
 8012be8:	08013c94 	.word	0x08013c94

08012bec <_calloc_r>:
 8012bec:	b570      	push	{r4, r5, r6, lr}
 8012bee:	fba1 5402 	umull	r5, r4, r1, r2
 8012bf2:	b93c      	cbnz	r4, 8012c04 <_calloc_r+0x18>
 8012bf4:	4629      	mov	r1, r5
 8012bf6:	f7fd fdb7 	bl	8010768 <_malloc_r>
 8012bfa:	4606      	mov	r6, r0
 8012bfc:	b928      	cbnz	r0, 8012c0a <_calloc_r+0x1e>
 8012bfe:	2600      	movs	r6, #0
 8012c00:	4630      	mov	r0, r6
 8012c02:	bd70      	pop	{r4, r5, r6, pc}
 8012c04:	220c      	movs	r2, #12
 8012c06:	6002      	str	r2, [r0, #0]
 8012c08:	e7f9      	b.n	8012bfe <_calloc_r+0x12>
 8012c0a:	462a      	mov	r2, r5
 8012c0c:	4621      	mov	r1, r4
 8012c0e:	f7fc fe2d 	bl	800f86c <memset>
 8012c12:	e7f5      	b.n	8012c00 <_calloc_r+0x14>

08012c14 <rshift>:
 8012c14:	6903      	ldr	r3, [r0, #16]
 8012c16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012c1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012c1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012c22:	f100 0414 	add.w	r4, r0, #20
 8012c26:	dd45      	ble.n	8012cb4 <rshift+0xa0>
 8012c28:	f011 011f 	ands.w	r1, r1, #31
 8012c2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012c30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012c34:	d10c      	bne.n	8012c50 <rshift+0x3c>
 8012c36:	f100 0710 	add.w	r7, r0, #16
 8012c3a:	4629      	mov	r1, r5
 8012c3c:	42b1      	cmp	r1, r6
 8012c3e:	d334      	bcc.n	8012caa <rshift+0x96>
 8012c40:	1a9b      	subs	r3, r3, r2
 8012c42:	009b      	lsls	r3, r3, #2
 8012c44:	1eea      	subs	r2, r5, #3
 8012c46:	4296      	cmp	r6, r2
 8012c48:	bf38      	it	cc
 8012c4a:	2300      	movcc	r3, #0
 8012c4c:	4423      	add	r3, r4
 8012c4e:	e015      	b.n	8012c7c <rshift+0x68>
 8012c50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012c54:	f1c1 0820 	rsb	r8, r1, #32
 8012c58:	40cf      	lsrs	r7, r1
 8012c5a:	f105 0e04 	add.w	lr, r5, #4
 8012c5e:	46a1      	mov	r9, r4
 8012c60:	4576      	cmp	r6, lr
 8012c62:	46f4      	mov	ip, lr
 8012c64:	d815      	bhi.n	8012c92 <rshift+0x7e>
 8012c66:	1a9a      	subs	r2, r3, r2
 8012c68:	0092      	lsls	r2, r2, #2
 8012c6a:	3a04      	subs	r2, #4
 8012c6c:	3501      	adds	r5, #1
 8012c6e:	42ae      	cmp	r6, r5
 8012c70:	bf38      	it	cc
 8012c72:	2200      	movcc	r2, #0
 8012c74:	18a3      	adds	r3, r4, r2
 8012c76:	50a7      	str	r7, [r4, r2]
 8012c78:	b107      	cbz	r7, 8012c7c <rshift+0x68>
 8012c7a:	3304      	adds	r3, #4
 8012c7c:	1b1a      	subs	r2, r3, r4
 8012c7e:	42a3      	cmp	r3, r4
 8012c80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012c84:	bf08      	it	eq
 8012c86:	2300      	moveq	r3, #0
 8012c88:	6102      	str	r2, [r0, #16]
 8012c8a:	bf08      	it	eq
 8012c8c:	6143      	streq	r3, [r0, #20]
 8012c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c92:	f8dc c000 	ldr.w	ip, [ip]
 8012c96:	fa0c fc08 	lsl.w	ip, ip, r8
 8012c9a:	ea4c 0707 	orr.w	r7, ip, r7
 8012c9e:	f849 7b04 	str.w	r7, [r9], #4
 8012ca2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012ca6:	40cf      	lsrs	r7, r1
 8012ca8:	e7da      	b.n	8012c60 <rshift+0x4c>
 8012caa:	f851 cb04 	ldr.w	ip, [r1], #4
 8012cae:	f847 cf04 	str.w	ip, [r7, #4]!
 8012cb2:	e7c3      	b.n	8012c3c <rshift+0x28>
 8012cb4:	4623      	mov	r3, r4
 8012cb6:	e7e1      	b.n	8012c7c <rshift+0x68>

08012cb8 <__hexdig_fun>:
 8012cb8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012cbc:	2b09      	cmp	r3, #9
 8012cbe:	d802      	bhi.n	8012cc6 <__hexdig_fun+0xe>
 8012cc0:	3820      	subs	r0, #32
 8012cc2:	b2c0      	uxtb	r0, r0
 8012cc4:	4770      	bx	lr
 8012cc6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012cca:	2b05      	cmp	r3, #5
 8012ccc:	d801      	bhi.n	8012cd2 <__hexdig_fun+0x1a>
 8012cce:	3847      	subs	r0, #71	@ 0x47
 8012cd0:	e7f7      	b.n	8012cc2 <__hexdig_fun+0xa>
 8012cd2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012cd6:	2b05      	cmp	r3, #5
 8012cd8:	d801      	bhi.n	8012cde <__hexdig_fun+0x26>
 8012cda:	3827      	subs	r0, #39	@ 0x27
 8012cdc:	e7f1      	b.n	8012cc2 <__hexdig_fun+0xa>
 8012cde:	2000      	movs	r0, #0
 8012ce0:	4770      	bx	lr
	...

08012ce4 <__gethex>:
 8012ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ce8:	b085      	sub	sp, #20
 8012cea:	468a      	mov	sl, r1
 8012cec:	9302      	str	r3, [sp, #8]
 8012cee:	680b      	ldr	r3, [r1, #0]
 8012cf0:	9001      	str	r0, [sp, #4]
 8012cf2:	4690      	mov	r8, r2
 8012cf4:	1c9c      	adds	r4, r3, #2
 8012cf6:	46a1      	mov	r9, r4
 8012cf8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012cfc:	2830      	cmp	r0, #48	@ 0x30
 8012cfe:	d0fa      	beq.n	8012cf6 <__gethex+0x12>
 8012d00:	eba9 0303 	sub.w	r3, r9, r3
 8012d04:	f1a3 0b02 	sub.w	fp, r3, #2
 8012d08:	f7ff ffd6 	bl	8012cb8 <__hexdig_fun>
 8012d0c:	4605      	mov	r5, r0
 8012d0e:	2800      	cmp	r0, #0
 8012d10:	d168      	bne.n	8012de4 <__gethex+0x100>
 8012d12:	49a0      	ldr	r1, [pc, #640]	@ (8012f94 <__gethex+0x2b0>)
 8012d14:	2201      	movs	r2, #1
 8012d16:	4648      	mov	r0, r9
 8012d18:	f7fc fdb0 	bl	800f87c <strncmp>
 8012d1c:	4607      	mov	r7, r0
 8012d1e:	2800      	cmp	r0, #0
 8012d20:	d167      	bne.n	8012df2 <__gethex+0x10e>
 8012d22:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012d26:	4626      	mov	r6, r4
 8012d28:	f7ff ffc6 	bl	8012cb8 <__hexdig_fun>
 8012d2c:	2800      	cmp	r0, #0
 8012d2e:	d062      	beq.n	8012df6 <__gethex+0x112>
 8012d30:	4623      	mov	r3, r4
 8012d32:	7818      	ldrb	r0, [r3, #0]
 8012d34:	2830      	cmp	r0, #48	@ 0x30
 8012d36:	4699      	mov	r9, r3
 8012d38:	f103 0301 	add.w	r3, r3, #1
 8012d3c:	d0f9      	beq.n	8012d32 <__gethex+0x4e>
 8012d3e:	f7ff ffbb 	bl	8012cb8 <__hexdig_fun>
 8012d42:	fab0 f580 	clz	r5, r0
 8012d46:	096d      	lsrs	r5, r5, #5
 8012d48:	f04f 0b01 	mov.w	fp, #1
 8012d4c:	464a      	mov	r2, r9
 8012d4e:	4616      	mov	r6, r2
 8012d50:	3201      	adds	r2, #1
 8012d52:	7830      	ldrb	r0, [r6, #0]
 8012d54:	f7ff ffb0 	bl	8012cb8 <__hexdig_fun>
 8012d58:	2800      	cmp	r0, #0
 8012d5a:	d1f8      	bne.n	8012d4e <__gethex+0x6a>
 8012d5c:	498d      	ldr	r1, [pc, #564]	@ (8012f94 <__gethex+0x2b0>)
 8012d5e:	2201      	movs	r2, #1
 8012d60:	4630      	mov	r0, r6
 8012d62:	f7fc fd8b 	bl	800f87c <strncmp>
 8012d66:	2800      	cmp	r0, #0
 8012d68:	d13f      	bne.n	8012dea <__gethex+0x106>
 8012d6a:	b944      	cbnz	r4, 8012d7e <__gethex+0x9a>
 8012d6c:	1c74      	adds	r4, r6, #1
 8012d6e:	4622      	mov	r2, r4
 8012d70:	4616      	mov	r6, r2
 8012d72:	3201      	adds	r2, #1
 8012d74:	7830      	ldrb	r0, [r6, #0]
 8012d76:	f7ff ff9f 	bl	8012cb8 <__hexdig_fun>
 8012d7a:	2800      	cmp	r0, #0
 8012d7c:	d1f8      	bne.n	8012d70 <__gethex+0x8c>
 8012d7e:	1ba4      	subs	r4, r4, r6
 8012d80:	00a7      	lsls	r7, r4, #2
 8012d82:	7833      	ldrb	r3, [r6, #0]
 8012d84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012d88:	2b50      	cmp	r3, #80	@ 0x50
 8012d8a:	d13e      	bne.n	8012e0a <__gethex+0x126>
 8012d8c:	7873      	ldrb	r3, [r6, #1]
 8012d8e:	2b2b      	cmp	r3, #43	@ 0x2b
 8012d90:	d033      	beq.n	8012dfa <__gethex+0x116>
 8012d92:	2b2d      	cmp	r3, #45	@ 0x2d
 8012d94:	d034      	beq.n	8012e00 <__gethex+0x11c>
 8012d96:	1c71      	adds	r1, r6, #1
 8012d98:	2400      	movs	r4, #0
 8012d9a:	7808      	ldrb	r0, [r1, #0]
 8012d9c:	f7ff ff8c 	bl	8012cb8 <__hexdig_fun>
 8012da0:	1e43      	subs	r3, r0, #1
 8012da2:	b2db      	uxtb	r3, r3
 8012da4:	2b18      	cmp	r3, #24
 8012da6:	d830      	bhi.n	8012e0a <__gethex+0x126>
 8012da8:	f1a0 0210 	sub.w	r2, r0, #16
 8012dac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012db0:	f7ff ff82 	bl	8012cb8 <__hexdig_fun>
 8012db4:	f100 3cff 	add.w	ip, r0, #4294967295
 8012db8:	fa5f fc8c 	uxtb.w	ip, ip
 8012dbc:	f1bc 0f18 	cmp.w	ip, #24
 8012dc0:	f04f 030a 	mov.w	r3, #10
 8012dc4:	d91e      	bls.n	8012e04 <__gethex+0x120>
 8012dc6:	b104      	cbz	r4, 8012dca <__gethex+0xe6>
 8012dc8:	4252      	negs	r2, r2
 8012dca:	4417      	add	r7, r2
 8012dcc:	f8ca 1000 	str.w	r1, [sl]
 8012dd0:	b1ed      	cbz	r5, 8012e0e <__gethex+0x12a>
 8012dd2:	f1bb 0f00 	cmp.w	fp, #0
 8012dd6:	bf0c      	ite	eq
 8012dd8:	2506      	moveq	r5, #6
 8012dda:	2500      	movne	r5, #0
 8012ddc:	4628      	mov	r0, r5
 8012dde:	b005      	add	sp, #20
 8012de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012de4:	2500      	movs	r5, #0
 8012de6:	462c      	mov	r4, r5
 8012de8:	e7b0      	b.n	8012d4c <__gethex+0x68>
 8012dea:	2c00      	cmp	r4, #0
 8012dec:	d1c7      	bne.n	8012d7e <__gethex+0x9a>
 8012dee:	4627      	mov	r7, r4
 8012df0:	e7c7      	b.n	8012d82 <__gethex+0x9e>
 8012df2:	464e      	mov	r6, r9
 8012df4:	462f      	mov	r7, r5
 8012df6:	2501      	movs	r5, #1
 8012df8:	e7c3      	b.n	8012d82 <__gethex+0x9e>
 8012dfa:	2400      	movs	r4, #0
 8012dfc:	1cb1      	adds	r1, r6, #2
 8012dfe:	e7cc      	b.n	8012d9a <__gethex+0xb6>
 8012e00:	2401      	movs	r4, #1
 8012e02:	e7fb      	b.n	8012dfc <__gethex+0x118>
 8012e04:	fb03 0002 	mla	r0, r3, r2, r0
 8012e08:	e7ce      	b.n	8012da8 <__gethex+0xc4>
 8012e0a:	4631      	mov	r1, r6
 8012e0c:	e7de      	b.n	8012dcc <__gethex+0xe8>
 8012e0e:	eba6 0309 	sub.w	r3, r6, r9
 8012e12:	3b01      	subs	r3, #1
 8012e14:	4629      	mov	r1, r5
 8012e16:	2b07      	cmp	r3, #7
 8012e18:	dc0a      	bgt.n	8012e30 <__gethex+0x14c>
 8012e1a:	9801      	ldr	r0, [sp, #4]
 8012e1c:	f7fd fd30 	bl	8010880 <_Balloc>
 8012e20:	4604      	mov	r4, r0
 8012e22:	b940      	cbnz	r0, 8012e36 <__gethex+0x152>
 8012e24:	4b5c      	ldr	r3, [pc, #368]	@ (8012f98 <__gethex+0x2b4>)
 8012e26:	4602      	mov	r2, r0
 8012e28:	21e4      	movs	r1, #228	@ 0xe4
 8012e2a:	485c      	ldr	r0, [pc, #368]	@ (8012f9c <__gethex+0x2b8>)
 8012e2c:	f7ff fec0 	bl	8012bb0 <__assert_func>
 8012e30:	3101      	adds	r1, #1
 8012e32:	105b      	asrs	r3, r3, #1
 8012e34:	e7ef      	b.n	8012e16 <__gethex+0x132>
 8012e36:	f100 0a14 	add.w	sl, r0, #20
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	4655      	mov	r5, sl
 8012e3e:	469b      	mov	fp, r3
 8012e40:	45b1      	cmp	r9, r6
 8012e42:	d337      	bcc.n	8012eb4 <__gethex+0x1d0>
 8012e44:	f845 bb04 	str.w	fp, [r5], #4
 8012e48:	eba5 050a 	sub.w	r5, r5, sl
 8012e4c:	10ad      	asrs	r5, r5, #2
 8012e4e:	6125      	str	r5, [r4, #16]
 8012e50:	4658      	mov	r0, fp
 8012e52:	f7fd fe07 	bl	8010a64 <__hi0bits>
 8012e56:	016d      	lsls	r5, r5, #5
 8012e58:	f8d8 6000 	ldr.w	r6, [r8]
 8012e5c:	1a2d      	subs	r5, r5, r0
 8012e5e:	42b5      	cmp	r5, r6
 8012e60:	dd54      	ble.n	8012f0c <__gethex+0x228>
 8012e62:	1bad      	subs	r5, r5, r6
 8012e64:	4629      	mov	r1, r5
 8012e66:	4620      	mov	r0, r4
 8012e68:	f7fe f99b 	bl	80111a2 <__any_on>
 8012e6c:	4681      	mov	r9, r0
 8012e6e:	b178      	cbz	r0, 8012e90 <__gethex+0x1ac>
 8012e70:	1e6b      	subs	r3, r5, #1
 8012e72:	1159      	asrs	r1, r3, #5
 8012e74:	f003 021f 	and.w	r2, r3, #31
 8012e78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012e7c:	f04f 0901 	mov.w	r9, #1
 8012e80:	fa09 f202 	lsl.w	r2, r9, r2
 8012e84:	420a      	tst	r2, r1
 8012e86:	d003      	beq.n	8012e90 <__gethex+0x1ac>
 8012e88:	454b      	cmp	r3, r9
 8012e8a:	dc36      	bgt.n	8012efa <__gethex+0x216>
 8012e8c:	f04f 0902 	mov.w	r9, #2
 8012e90:	4629      	mov	r1, r5
 8012e92:	4620      	mov	r0, r4
 8012e94:	f7ff febe 	bl	8012c14 <rshift>
 8012e98:	442f      	add	r7, r5
 8012e9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012e9e:	42bb      	cmp	r3, r7
 8012ea0:	da42      	bge.n	8012f28 <__gethex+0x244>
 8012ea2:	9801      	ldr	r0, [sp, #4]
 8012ea4:	4621      	mov	r1, r4
 8012ea6:	f7fd fd2b 	bl	8010900 <_Bfree>
 8012eaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012eac:	2300      	movs	r3, #0
 8012eae:	6013      	str	r3, [r2, #0]
 8012eb0:	25a3      	movs	r5, #163	@ 0xa3
 8012eb2:	e793      	b.n	8012ddc <__gethex+0xf8>
 8012eb4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012eb8:	2a2e      	cmp	r2, #46	@ 0x2e
 8012eba:	d012      	beq.n	8012ee2 <__gethex+0x1fe>
 8012ebc:	2b20      	cmp	r3, #32
 8012ebe:	d104      	bne.n	8012eca <__gethex+0x1e6>
 8012ec0:	f845 bb04 	str.w	fp, [r5], #4
 8012ec4:	f04f 0b00 	mov.w	fp, #0
 8012ec8:	465b      	mov	r3, fp
 8012eca:	7830      	ldrb	r0, [r6, #0]
 8012ecc:	9303      	str	r3, [sp, #12]
 8012ece:	f7ff fef3 	bl	8012cb8 <__hexdig_fun>
 8012ed2:	9b03      	ldr	r3, [sp, #12]
 8012ed4:	f000 000f 	and.w	r0, r0, #15
 8012ed8:	4098      	lsls	r0, r3
 8012eda:	ea4b 0b00 	orr.w	fp, fp, r0
 8012ede:	3304      	adds	r3, #4
 8012ee0:	e7ae      	b.n	8012e40 <__gethex+0x15c>
 8012ee2:	45b1      	cmp	r9, r6
 8012ee4:	d8ea      	bhi.n	8012ebc <__gethex+0x1d8>
 8012ee6:	492b      	ldr	r1, [pc, #172]	@ (8012f94 <__gethex+0x2b0>)
 8012ee8:	9303      	str	r3, [sp, #12]
 8012eea:	2201      	movs	r2, #1
 8012eec:	4630      	mov	r0, r6
 8012eee:	f7fc fcc5 	bl	800f87c <strncmp>
 8012ef2:	9b03      	ldr	r3, [sp, #12]
 8012ef4:	2800      	cmp	r0, #0
 8012ef6:	d1e1      	bne.n	8012ebc <__gethex+0x1d8>
 8012ef8:	e7a2      	b.n	8012e40 <__gethex+0x15c>
 8012efa:	1ea9      	subs	r1, r5, #2
 8012efc:	4620      	mov	r0, r4
 8012efe:	f7fe f950 	bl	80111a2 <__any_on>
 8012f02:	2800      	cmp	r0, #0
 8012f04:	d0c2      	beq.n	8012e8c <__gethex+0x1a8>
 8012f06:	f04f 0903 	mov.w	r9, #3
 8012f0a:	e7c1      	b.n	8012e90 <__gethex+0x1ac>
 8012f0c:	da09      	bge.n	8012f22 <__gethex+0x23e>
 8012f0e:	1b75      	subs	r5, r6, r5
 8012f10:	4621      	mov	r1, r4
 8012f12:	9801      	ldr	r0, [sp, #4]
 8012f14:	462a      	mov	r2, r5
 8012f16:	f7fd ff0b 	bl	8010d30 <__lshift>
 8012f1a:	1b7f      	subs	r7, r7, r5
 8012f1c:	4604      	mov	r4, r0
 8012f1e:	f100 0a14 	add.w	sl, r0, #20
 8012f22:	f04f 0900 	mov.w	r9, #0
 8012f26:	e7b8      	b.n	8012e9a <__gethex+0x1b6>
 8012f28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012f2c:	42bd      	cmp	r5, r7
 8012f2e:	dd6f      	ble.n	8013010 <__gethex+0x32c>
 8012f30:	1bed      	subs	r5, r5, r7
 8012f32:	42ae      	cmp	r6, r5
 8012f34:	dc34      	bgt.n	8012fa0 <__gethex+0x2bc>
 8012f36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012f3a:	2b02      	cmp	r3, #2
 8012f3c:	d022      	beq.n	8012f84 <__gethex+0x2a0>
 8012f3e:	2b03      	cmp	r3, #3
 8012f40:	d024      	beq.n	8012f8c <__gethex+0x2a8>
 8012f42:	2b01      	cmp	r3, #1
 8012f44:	d115      	bne.n	8012f72 <__gethex+0x28e>
 8012f46:	42ae      	cmp	r6, r5
 8012f48:	d113      	bne.n	8012f72 <__gethex+0x28e>
 8012f4a:	2e01      	cmp	r6, #1
 8012f4c:	d10b      	bne.n	8012f66 <__gethex+0x282>
 8012f4e:	9a02      	ldr	r2, [sp, #8]
 8012f50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012f54:	6013      	str	r3, [r2, #0]
 8012f56:	2301      	movs	r3, #1
 8012f58:	6123      	str	r3, [r4, #16]
 8012f5a:	f8ca 3000 	str.w	r3, [sl]
 8012f5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f60:	2562      	movs	r5, #98	@ 0x62
 8012f62:	601c      	str	r4, [r3, #0]
 8012f64:	e73a      	b.n	8012ddc <__gethex+0xf8>
 8012f66:	1e71      	subs	r1, r6, #1
 8012f68:	4620      	mov	r0, r4
 8012f6a:	f7fe f91a 	bl	80111a2 <__any_on>
 8012f6e:	2800      	cmp	r0, #0
 8012f70:	d1ed      	bne.n	8012f4e <__gethex+0x26a>
 8012f72:	9801      	ldr	r0, [sp, #4]
 8012f74:	4621      	mov	r1, r4
 8012f76:	f7fd fcc3 	bl	8010900 <_Bfree>
 8012f7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	6013      	str	r3, [r2, #0]
 8012f80:	2550      	movs	r5, #80	@ 0x50
 8012f82:	e72b      	b.n	8012ddc <__gethex+0xf8>
 8012f84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d1f3      	bne.n	8012f72 <__gethex+0x28e>
 8012f8a:	e7e0      	b.n	8012f4e <__gethex+0x26a>
 8012f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d1dd      	bne.n	8012f4e <__gethex+0x26a>
 8012f92:	e7ee      	b.n	8012f72 <__gethex+0x28e>
 8012f94:	08013c08 	.word	0x08013c08
 8012f98:	08013aa0 	.word	0x08013aa0
 8012f9c:	08013cd0 	.word	0x08013cd0
 8012fa0:	1e6f      	subs	r7, r5, #1
 8012fa2:	f1b9 0f00 	cmp.w	r9, #0
 8012fa6:	d130      	bne.n	801300a <__gethex+0x326>
 8012fa8:	b127      	cbz	r7, 8012fb4 <__gethex+0x2d0>
 8012faa:	4639      	mov	r1, r7
 8012fac:	4620      	mov	r0, r4
 8012fae:	f7fe f8f8 	bl	80111a2 <__any_on>
 8012fb2:	4681      	mov	r9, r0
 8012fb4:	117a      	asrs	r2, r7, #5
 8012fb6:	2301      	movs	r3, #1
 8012fb8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012fbc:	f007 071f 	and.w	r7, r7, #31
 8012fc0:	40bb      	lsls	r3, r7
 8012fc2:	4213      	tst	r3, r2
 8012fc4:	4629      	mov	r1, r5
 8012fc6:	4620      	mov	r0, r4
 8012fc8:	bf18      	it	ne
 8012fca:	f049 0902 	orrne.w	r9, r9, #2
 8012fce:	f7ff fe21 	bl	8012c14 <rshift>
 8012fd2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012fd6:	1b76      	subs	r6, r6, r5
 8012fd8:	2502      	movs	r5, #2
 8012fda:	f1b9 0f00 	cmp.w	r9, #0
 8012fde:	d047      	beq.n	8013070 <__gethex+0x38c>
 8012fe0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012fe4:	2b02      	cmp	r3, #2
 8012fe6:	d015      	beq.n	8013014 <__gethex+0x330>
 8012fe8:	2b03      	cmp	r3, #3
 8012fea:	d017      	beq.n	801301c <__gethex+0x338>
 8012fec:	2b01      	cmp	r3, #1
 8012fee:	d109      	bne.n	8013004 <__gethex+0x320>
 8012ff0:	f019 0f02 	tst.w	r9, #2
 8012ff4:	d006      	beq.n	8013004 <__gethex+0x320>
 8012ff6:	f8da 3000 	ldr.w	r3, [sl]
 8012ffa:	ea49 0903 	orr.w	r9, r9, r3
 8012ffe:	f019 0f01 	tst.w	r9, #1
 8013002:	d10e      	bne.n	8013022 <__gethex+0x33e>
 8013004:	f045 0510 	orr.w	r5, r5, #16
 8013008:	e032      	b.n	8013070 <__gethex+0x38c>
 801300a:	f04f 0901 	mov.w	r9, #1
 801300e:	e7d1      	b.n	8012fb4 <__gethex+0x2d0>
 8013010:	2501      	movs	r5, #1
 8013012:	e7e2      	b.n	8012fda <__gethex+0x2f6>
 8013014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013016:	f1c3 0301 	rsb	r3, r3, #1
 801301a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801301c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801301e:	2b00      	cmp	r3, #0
 8013020:	d0f0      	beq.n	8013004 <__gethex+0x320>
 8013022:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013026:	f104 0314 	add.w	r3, r4, #20
 801302a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801302e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013032:	f04f 0c00 	mov.w	ip, #0
 8013036:	4618      	mov	r0, r3
 8013038:	f853 2b04 	ldr.w	r2, [r3], #4
 801303c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013040:	d01b      	beq.n	801307a <__gethex+0x396>
 8013042:	3201      	adds	r2, #1
 8013044:	6002      	str	r2, [r0, #0]
 8013046:	2d02      	cmp	r5, #2
 8013048:	f104 0314 	add.w	r3, r4, #20
 801304c:	d13c      	bne.n	80130c8 <__gethex+0x3e4>
 801304e:	f8d8 2000 	ldr.w	r2, [r8]
 8013052:	3a01      	subs	r2, #1
 8013054:	42b2      	cmp	r2, r6
 8013056:	d109      	bne.n	801306c <__gethex+0x388>
 8013058:	1171      	asrs	r1, r6, #5
 801305a:	2201      	movs	r2, #1
 801305c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013060:	f006 061f 	and.w	r6, r6, #31
 8013064:	fa02 f606 	lsl.w	r6, r2, r6
 8013068:	421e      	tst	r6, r3
 801306a:	d13a      	bne.n	80130e2 <__gethex+0x3fe>
 801306c:	f045 0520 	orr.w	r5, r5, #32
 8013070:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013072:	601c      	str	r4, [r3, #0]
 8013074:	9b02      	ldr	r3, [sp, #8]
 8013076:	601f      	str	r7, [r3, #0]
 8013078:	e6b0      	b.n	8012ddc <__gethex+0xf8>
 801307a:	4299      	cmp	r1, r3
 801307c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013080:	d8d9      	bhi.n	8013036 <__gethex+0x352>
 8013082:	68a3      	ldr	r3, [r4, #8]
 8013084:	459b      	cmp	fp, r3
 8013086:	db17      	blt.n	80130b8 <__gethex+0x3d4>
 8013088:	6861      	ldr	r1, [r4, #4]
 801308a:	9801      	ldr	r0, [sp, #4]
 801308c:	3101      	adds	r1, #1
 801308e:	f7fd fbf7 	bl	8010880 <_Balloc>
 8013092:	4681      	mov	r9, r0
 8013094:	b918      	cbnz	r0, 801309e <__gethex+0x3ba>
 8013096:	4b1a      	ldr	r3, [pc, #104]	@ (8013100 <__gethex+0x41c>)
 8013098:	4602      	mov	r2, r0
 801309a:	2184      	movs	r1, #132	@ 0x84
 801309c:	e6c5      	b.n	8012e2a <__gethex+0x146>
 801309e:	6922      	ldr	r2, [r4, #16]
 80130a0:	3202      	adds	r2, #2
 80130a2:	f104 010c 	add.w	r1, r4, #12
 80130a6:	0092      	lsls	r2, r2, #2
 80130a8:	300c      	adds	r0, #12
 80130aa:	f7fc fc86 	bl	800f9ba <memcpy>
 80130ae:	4621      	mov	r1, r4
 80130b0:	9801      	ldr	r0, [sp, #4]
 80130b2:	f7fd fc25 	bl	8010900 <_Bfree>
 80130b6:	464c      	mov	r4, r9
 80130b8:	6923      	ldr	r3, [r4, #16]
 80130ba:	1c5a      	adds	r2, r3, #1
 80130bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80130c0:	6122      	str	r2, [r4, #16]
 80130c2:	2201      	movs	r2, #1
 80130c4:	615a      	str	r2, [r3, #20]
 80130c6:	e7be      	b.n	8013046 <__gethex+0x362>
 80130c8:	6922      	ldr	r2, [r4, #16]
 80130ca:	455a      	cmp	r2, fp
 80130cc:	dd0b      	ble.n	80130e6 <__gethex+0x402>
 80130ce:	2101      	movs	r1, #1
 80130d0:	4620      	mov	r0, r4
 80130d2:	f7ff fd9f 	bl	8012c14 <rshift>
 80130d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80130da:	3701      	adds	r7, #1
 80130dc:	42bb      	cmp	r3, r7
 80130de:	f6ff aee0 	blt.w	8012ea2 <__gethex+0x1be>
 80130e2:	2501      	movs	r5, #1
 80130e4:	e7c2      	b.n	801306c <__gethex+0x388>
 80130e6:	f016 061f 	ands.w	r6, r6, #31
 80130ea:	d0fa      	beq.n	80130e2 <__gethex+0x3fe>
 80130ec:	4453      	add	r3, sl
 80130ee:	f1c6 0620 	rsb	r6, r6, #32
 80130f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80130f6:	f7fd fcb5 	bl	8010a64 <__hi0bits>
 80130fa:	42b0      	cmp	r0, r6
 80130fc:	dbe7      	blt.n	80130ce <__gethex+0x3ea>
 80130fe:	e7f0      	b.n	80130e2 <__gethex+0x3fe>
 8013100:	08013aa0 	.word	0x08013aa0

08013104 <L_shift>:
 8013104:	f1c2 0208 	rsb	r2, r2, #8
 8013108:	0092      	lsls	r2, r2, #2
 801310a:	b570      	push	{r4, r5, r6, lr}
 801310c:	f1c2 0620 	rsb	r6, r2, #32
 8013110:	6843      	ldr	r3, [r0, #4]
 8013112:	6804      	ldr	r4, [r0, #0]
 8013114:	fa03 f506 	lsl.w	r5, r3, r6
 8013118:	432c      	orrs	r4, r5
 801311a:	40d3      	lsrs	r3, r2
 801311c:	6004      	str	r4, [r0, #0]
 801311e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013122:	4288      	cmp	r0, r1
 8013124:	d3f4      	bcc.n	8013110 <L_shift+0xc>
 8013126:	bd70      	pop	{r4, r5, r6, pc}

08013128 <__match>:
 8013128:	b530      	push	{r4, r5, lr}
 801312a:	6803      	ldr	r3, [r0, #0]
 801312c:	3301      	adds	r3, #1
 801312e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013132:	b914      	cbnz	r4, 801313a <__match+0x12>
 8013134:	6003      	str	r3, [r0, #0]
 8013136:	2001      	movs	r0, #1
 8013138:	bd30      	pop	{r4, r5, pc}
 801313a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801313e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013142:	2d19      	cmp	r5, #25
 8013144:	bf98      	it	ls
 8013146:	3220      	addls	r2, #32
 8013148:	42a2      	cmp	r2, r4
 801314a:	d0f0      	beq.n	801312e <__match+0x6>
 801314c:	2000      	movs	r0, #0
 801314e:	e7f3      	b.n	8013138 <__match+0x10>

08013150 <__hexnan>:
 8013150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013154:	680b      	ldr	r3, [r1, #0]
 8013156:	6801      	ldr	r1, [r0, #0]
 8013158:	115e      	asrs	r6, r3, #5
 801315a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801315e:	f013 031f 	ands.w	r3, r3, #31
 8013162:	b087      	sub	sp, #28
 8013164:	bf18      	it	ne
 8013166:	3604      	addne	r6, #4
 8013168:	2500      	movs	r5, #0
 801316a:	1f37      	subs	r7, r6, #4
 801316c:	4682      	mov	sl, r0
 801316e:	4690      	mov	r8, r2
 8013170:	9301      	str	r3, [sp, #4]
 8013172:	f846 5c04 	str.w	r5, [r6, #-4]
 8013176:	46b9      	mov	r9, r7
 8013178:	463c      	mov	r4, r7
 801317a:	9502      	str	r5, [sp, #8]
 801317c:	46ab      	mov	fp, r5
 801317e:	784a      	ldrb	r2, [r1, #1]
 8013180:	1c4b      	adds	r3, r1, #1
 8013182:	9303      	str	r3, [sp, #12]
 8013184:	b342      	cbz	r2, 80131d8 <__hexnan+0x88>
 8013186:	4610      	mov	r0, r2
 8013188:	9105      	str	r1, [sp, #20]
 801318a:	9204      	str	r2, [sp, #16]
 801318c:	f7ff fd94 	bl	8012cb8 <__hexdig_fun>
 8013190:	2800      	cmp	r0, #0
 8013192:	d151      	bne.n	8013238 <__hexnan+0xe8>
 8013194:	9a04      	ldr	r2, [sp, #16]
 8013196:	9905      	ldr	r1, [sp, #20]
 8013198:	2a20      	cmp	r2, #32
 801319a:	d818      	bhi.n	80131ce <__hexnan+0x7e>
 801319c:	9b02      	ldr	r3, [sp, #8]
 801319e:	459b      	cmp	fp, r3
 80131a0:	dd13      	ble.n	80131ca <__hexnan+0x7a>
 80131a2:	454c      	cmp	r4, r9
 80131a4:	d206      	bcs.n	80131b4 <__hexnan+0x64>
 80131a6:	2d07      	cmp	r5, #7
 80131a8:	dc04      	bgt.n	80131b4 <__hexnan+0x64>
 80131aa:	462a      	mov	r2, r5
 80131ac:	4649      	mov	r1, r9
 80131ae:	4620      	mov	r0, r4
 80131b0:	f7ff ffa8 	bl	8013104 <L_shift>
 80131b4:	4544      	cmp	r4, r8
 80131b6:	d952      	bls.n	801325e <__hexnan+0x10e>
 80131b8:	2300      	movs	r3, #0
 80131ba:	f1a4 0904 	sub.w	r9, r4, #4
 80131be:	f844 3c04 	str.w	r3, [r4, #-4]
 80131c2:	f8cd b008 	str.w	fp, [sp, #8]
 80131c6:	464c      	mov	r4, r9
 80131c8:	461d      	mov	r5, r3
 80131ca:	9903      	ldr	r1, [sp, #12]
 80131cc:	e7d7      	b.n	801317e <__hexnan+0x2e>
 80131ce:	2a29      	cmp	r2, #41	@ 0x29
 80131d0:	d157      	bne.n	8013282 <__hexnan+0x132>
 80131d2:	3102      	adds	r1, #2
 80131d4:	f8ca 1000 	str.w	r1, [sl]
 80131d8:	f1bb 0f00 	cmp.w	fp, #0
 80131dc:	d051      	beq.n	8013282 <__hexnan+0x132>
 80131de:	454c      	cmp	r4, r9
 80131e0:	d206      	bcs.n	80131f0 <__hexnan+0xa0>
 80131e2:	2d07      	cmp	r5, #7
 80131e4:	dc04      	bgt.n	80131f0 <__hexnan+0xa0>
 80131e6:	462a      	mov	r2, r5
 80131e8:	4649      	mov	r1, r9
 80131ea:	4620      	mov	r0, r4
 80131ec:	f7ff ff8a 	bl	8013104 <L_shift>
 80131f0:	4544      	cmp	r4, r8
 80131f2:	d936      	bls.n	8013262 <__hexnan+0x112>
 80131f4:	f1a8 0204 	sub.w	r2, r8, #4
 80131f8:	4623      	mov	r3, r4
 80131fa:	f853 1b04 	ldr.w	r1, [r3], #4
 80131fe:	f842 1f04 	str.w	r1, [r2, #4]!
 8013202:	429f      	cmp	r7, r3
 8013204:	d2f9      	bcs.n	80131fa <__hexnan+0xaa>
 8013206:	1b3b      	subs	r3, r7, r4
 8013208:	f023 0303 	bic.w	r3, r3, #3
 801320c:	3304      	adds	r3, #4
 801320e:	3401      	adds	r4, #1
 8013210:	3e03      	subs	r6, #3
 8013212:	42b4      	cmp	r4, r6
 8013214:	bf88      	it	hi
 8013216:	2304      	movhi	r3, #4
 8013218:	4443      	add	r3, r8
 801321a:	2200      	movs	r2, #0
 801321c:	f843 2b04 	str.w	r2, [r3], #4
 8013220:	429f      	cmp	r7, r3
 8013222:	d2fb      	bcs.n	801321c <__hexnan+0xcc>
 8013224:	683b      	ldr	r3, [r7, #0]
 8013226:	b91b      	cbnz	r3, 8013230 <__hexnan+0xe0>
 8013228:	4547      	cmp	r7, r8
 801322a:	d128      	bne.n	801327e <__hexnan+0x12e>
 801322c:	2301      	movs	r3, #1
 801322e:	603b      	str	r3, [r7, #0]
 8013230:	2005      	movs	r0, #5
 8013232:	b007      	add	sp, #28
 8013234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013238:	3501      	adds	r5, #1
 801323a:	2d08      	cmp	r5, #8
 801323c:	f10b 0b01 	add.w	fp, fp, #1
 8013240:	dd06      	ble.n	8013250 <__hexnan+0x100>
 8013242:	4544      	cmp	r4, r8
 8013244:	d9c1      	bls.n	80131ca <__hexnan+0x7a>
 8013246:	2300      	movs	r3, #0
 8013248:	f844 3c04 	str.w	r3, [r4, #-4]
 801324c:	2501      	movs	r5, #1
 801324e:	3c04      	subs	r4, #4
 8013250:	6822      	ldr	r2, [r4, #0]
 8013252:	f000 000f 	and.w	r0, r0, #15
 8013256:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801325a:	6020      	str	r0, [r4, #0]
 801325c:	e7b5      	b.n	80131ca <__hexnan+0x7a>
 801325e:	2508      	movs	r5, #8
 8013260:	e7b3      	b.n	80131ca <__hexnan+0x7a>
 8013262:	9b01      	ldr	r3, [sp, #4]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d0dd      	beq.n	8013224 <__hexnan+0xd4>
 8013268:	f1c3 0320 	rsb	r3, r3, #32
 801326c:	f04f 32ff 	mov.w	r2, #4294967295
 8013270:	40da      	lsrs	r2, r3
 8013272:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013276:	4013      	ands	r3, r2
 8013278:	f846 3c04 	str.w	r3, [r6, #-4]
 801327c:	e7d2      	b.n	8013224 <__hexnan+0xd4>
 801327e:	3f04      	subs	r7, #4
 8013280:	e7d0      	b.n	8013224 <__hexnan+0xd4>
 8013282:	2004      	movs	r0, #4
 8013284:	e7d5      	b.n	8013232 <__hexnan+0xe2>

08013286 <__ascii_mbtowc>:
 8013286:	b082      	sub	sp, #8
 8013288:	b901      	cbnz	r1, 801328c <__ascii_mbtowc+0x6>
 801328a:	a901      	add	r1, sp, #4
 801328c:	b142      	cbz	r2, 80132a0 <__ascii_mbtowc+0x1a>
 801328e:	b14b      	cbz	r3, 80132a4 <__ascii_mbtowc+0x1e>
 8013290:	7813      	ldrb	r3, [r2, #0]
 8013292:	600b      	str	r3, [r1, #0]
 8013294:	7812      	ldrb	r2, [r2, #0]
 8013296:	1e10      	subs	r0, r2, #0
 8013298:	bf18      	it	ne
 801329a:	2001      	movne	r0, #1
 801329c:	b002      	add	sp, #8
 801329e:	4770      	bx	lr
 80132a0:	4610      	mov	r0, r2
 80132a2:	e7fb      	b.n	801329c <__ascii_mbtowc+0x16>
 80132a4:	f06f 0001 	mvn.w	r0, #1
 80132a8:	e7f8      	b.n	801329c <__ascii_mbtowc+0x16>

080132aa <_realloc_r>:
 80132aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132ae:	4680      	mov	r8, r0
 80132b0:	4615      	mov	r5, r2
 80132b2:	460c      	mov	r4, r1
 80132b4:	b921      	cbnz	r1, 80132c0 <_realloc_r+0x16>
 80132b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132ba:	4611      	mov	r1, r2
 80132bc:	f7fd ba54 	b.w	8010768 <_malloc_r>
 80132c0:	b92a      	cbnz	r2, 80132ce <_realloc_r+0x24>
 80132c2:	f7fd f9dd 	bl	8010680 <_free_r>
 80132c6:	2400      	movs	r4, #0
 80132c8:	4620      	mov	r0, r4
 80132ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132ce:	f000 f8b2 	bl	8013436 <_malloc_usable_size_r>
 80132d2:	4285      	cmp	r5, r0
 80132d4:	4606      	mov	r6, r0
 80132d6:	d802      	bhi.n	80132de <_realloc_r+0x34>
 80132d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80132dc:	d8f4      	bhi.n	80132c8 <_realloc_r+0x1e>
 80132de:	4629      	mov	r1, r5
 80132e0:	4640      	mov	r0, r8
 80132e2:	f7fd fa41 	bl	8010768 <_malloc_r>
 80132e6:	4607      	mov	r7, r0
 80132e8:	2800      	cmp	r0, #0
 80132ea:	d0ec      	beq.n	80132c6 <_realloc_r+0x1c>
 80132ec:	42b5      	cmp	r5, r6
 80132ee:	462a      	mov	r2, r5
 80132f0:	4621      	mov	r1, r4
 80132f2:	bf28      	it	cs
 80132f4:	4632      	movcs	r2, r6
 80132f6:	f7fc fb60 	bl	800f9ba <memcpy>
 80132fa:	4621      	mov	r1, r4
 80132fc:	4640      	mov	r0, r8
 80132fe:	f7fd f9bf 	bl	8010680 <_free_r>
 8013302:	463c      	mov	r4, r7
 8013304:	e7e0      	b.n	80132c8 <_realloc_r+0x1e>
	...

08013308 <_strtoul_l.constprop.0>:
 8013308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801330c:	4e34      	ldr	r6, [pc, #208]	@ (80133e0 <_strtoul_l.constprop.0+0xd8>)
 801330e:	4686      	mov	lr, r0
 8013310:	460d      	mov	r5, r1
 8013312:	4628      	mov	r0, r5
 8013314:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013318:	5d37      	ldrb	r7, [r6, r4]
 801331a:	f017 0708 	ands.w	r7, r7, #8
 801331e:	d1f8      	bne.n	8013312 <_strtoul_l.constprop.0+0xa>
 8013320:	2c2d      	cmp	r4, #45	@ 0x2d
 8013322:	d12f      	bne.n	8013384 <_strtoul_l.constprop.0+0x7c>
 8013324:	782c      	ldrb	r4, [r5, #0]
 8013326:	2701      	movs	r7, #1
 8013328:	1c85      	adds	r5, r0, #2
 801332a:	f033 0010 	bics.w	r0, r3, #16
 801332e:	d109      	bne.n	8013344 <_strtoul_l.constprop.0+0x3c>
 8013330:	2c30      	cmp	r4, #48	@ 0x30
 8013332:	d12c      	bne.n	801338e <_strtoul_l.constprop.0+0x86>
 8013334:	7828      	ldrb	r0, [r5, #0]
 8013336:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801333a:	2858      	cmp	r0, #88	@ 0x58
 801333c:	d127      	bne.n	801338e <_strtoul_l.constprop.0+0x86>
 801333e:	786c      	ldrb	r4, [r5, #1]
 8013340:	2310      	movs	r3, #16
 8013342:	3502      	adds	r5, #2
 8013344:	f04f 38ff 	mov.w	r8, #4294967295
 8013348:	2600      	movs	r6, #0
 801334a:	fbb8 f8f3 	udiv	r8, r8, r3
 801334e:	fb03 f908 	mul.w	r9, r3, r8
 8013352:	ea6f 0909 	mvn.w	r9, r9
 8013356:	4630      	mov	r0, r6
 8013358:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801335c:	f1bc 0f09 	cmp.w	ip, #9
 8013360:	d81c      	bhi.n	801339c <_strtoul_l.constprop.0+0x94>
 8013362:	4664      	mov	r4, ip
 8013364:	42a3      	cmp	r3, r4
 8013366:	dd2a      	ble.n	80133be <_strtoul_l.constprop.0+0xb6>
 8013368:	f1b6 3fff 	cmp.w	r6, #4294967295
 801336c:	d007      	beq.n	801337e <_strtoul_l.constprop.0+0x76>
 801336e:	4580      	cmp	r8, r0
 8013370:	d322      	bcc.n	80133b8 <_strtoul_l.constprop.0+0xb0>
 8013372:	d101      	bne.n	8013378 <_strtoul_l.constprop.0+0x70>
 8013374:	45a1      	cmp	r9, r4
 8013376:	db1f      	blt.n	80133b8 <_strtoul_l.constprop.0+0xb0>
 8013378:	fb00 4003 	mla	r0, r0, r3, r4
 801337c:	2601      	movs	r6, #1
 801337e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013382:	e7e9      	b.n	8013358 <_strtoul_l.constprop.0+0x50>
 8013384:	2c2b      	cmp	r4, #43	@ 0x2b
 8013386:	bf04      	itt	eq
 8013388:	782c      	ldrbeq	r4, [r5, #0]
 801338a:	1c85      	addeq	r5, r0, #2
 801338c:	e7cd      	b.n	801332a <_strtoul_l.constprop.0+0x22>
 801338e:	2b00      	cmp	r3, #0
 8013390:	d1d8      	bne.n	8013344 <_strtoul_l.constprop.0+0x3c>
 8013392:	2c30      	cmp	r4, #48	@ 0x30
 8013394:	bf0c      	ite	eq
 8013396:	2308      	moveq	r3, #8
 8013398:	230a      	movne	r3, #10
 801339a:	e7d3      	b.n	8013344 <_strtoul_l.constprop.0+0x3c>
 801339c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80133a0:	f1bc 0f19 	cmp.w	ip, #25
 80133a4:	d801      	bhi.n	80133aa <_strtoul_l.constprop.0+0xa2>
 80133a6:	3c37      	subs	r4, #55	@ 0x37
 80133a8:	e7dc      	b.n	8013364 <_strtoul_l.constprop.0+0x5c>
 80133aa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80133ae:	f1bc 0f19 	cmp.w	ip, #25
 80133b2:	d804      	bhi.n	80133be <_strtoul_l.constprop.0+0xb6>
 80133b4:	3c57      	subs	r4, #87	@ 0x57
 80133b6:	e7d5      	b.n	8013364 <_strtoul_l.constprop.0+0x5c>
 80133b8:	f04f 36ff 	mov.w	r6, #4294967295
 80133bc:	e7df      	b.n	801337e <_strtoul_l.constprop.0+0x76>
 80133be:	1c73      	adds	r3, r6, #1
 80133c0:	d106      	bne.n	80133d0 <_strtoul_l.constprop.0+0xc8>
 80133c2:	2322      	movs	r3, #34	@ 0x22
 80133c4:	f8ce 3000 	str.w	r3, [lr]
 80133c8:	4630      	mov	r0, r6
 80133ca:	b932      	cbnz	r2, 80133da <_strtoul_l.constprop.0+0xd2>
 80133cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133d0:	b107      	cbz	r7, 80133d4 <_strtoul_l.constprop.0+0xcc>
 80133d2:	4240      	negs	r0, r0
 80133d4:	2a00      	cmp	r2, #0
 80133d6:	d0f9      	beq.n	80133cc <_strtoul_l.constprop.0+0xc4>
 80133d8:	b106      	cbz	r6, 80133dc <_strtoul_l.constprop.0+0xd4>
 80133da:	1e69      	subs	r1, r5, #1
 80133dc:	6011      	str	r1, [r2, #0]
 80133de:	e7f5      	b.n	80133cc <_strtoul_l.constprop.0+0xc4>
 80133e0:	080138ed 	.word	0x080138ed

080133e4 <_strtoul_r>:
 80133e4:	f7ff bf90 	b.w	8013308 <_strtoul_l.constprop.0>

080133e8 <__ascii_wctomb>:
 80133e8:	4603      	mov	r3, r0
 80133ea:	4608      	mov	r0, r1
 80133ec:	b141      	cbz	r1, 8013400 <__ascii_wctomb+0x18>
 80133ee:	2aff      	cmp	r2, #255	@ 0xff
 80133f0:	d904      	bls.n	80133fc <__ascii_wctomb+0x14>
 80133f2:	228a      	movs	r2, #138	@ 0x8a
 80133f4:	601a      	str	r2, [r3, #0]
 80133f6:	f04f 30ff 	mov.w	r0, #4294967295
 80133fa:	4770      	bx	lr
 80133fc:	700a      	strb	r2, [r1, #0]
 80133fe:	2001      	movs	r0, #1
 8013400:	4770      	bx	lr
	...

08013404 <fiprintf>:
 8013404:	b40e      	push	{r1, r2, r3}
 8013406:	b503      	push	{r0, r1, lr}
 8013408:	4601      	mov	r1, r0
 801340a:	ab03      	add	r3, sp, #12
 801340c:	4805      	ldr	r0, [pc, #20]	@ (8013424 <fiprintf+0x20>)
 801340e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013412:	6800      	ldr	r0, [r0, #0]
 8013414:	9301      	str	r3, [sp, #4]
 8013416:	f7ff f83b 	bl	8012490 <_vfiprintf_r>
 801341a:	b002      	add	sp, #8
 801341c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013420:	b003      	add	sp, #12
 8013422:	4770      	bx	lr
 8013424:	2000019c 	.word	0x2000019c

08013428 <abort>:
 8013428:	b508      	push	{r3, lr}
 801342a:	2006      	movs	r0, #6
 801342c:	f000 f834 	bl	8013498 <raise>
 8013430:	2001      	movs	r0, #1
 8013432:	f7ef faed 	bl	8002a10 <_exit>

08013436 <_malloc_usable_size_r>:
 8013436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801343a:	1f18      	subs	r0, r3, #4
 801343c:	2b00      	cmp	r3, #0
 801343e:	bfbc      	itt	lt
 8013440:	580b      	ldrlt	r3, [r1, r0]
 8013442:	18c0      	addlt	r0, r0, r3
 8013444:	4770      	bx	lr

08013446 <_raise_r>:
 8013446:	291f      	cmp	r1, #31
 8013448:	b538      	push	{r3, r4, r5, lr}
 801344a:	4605      	mov	r5, r0
 801344c:	460c      	mov	r4, r1
 801344e:	d904      	bls.n	801345a <_raise_r+0x14>
 8013450:	2316      	movs	r3, #22
 8013452:	6003      	str	r3, [r0, #0]
 8013454:	f04f 30ff 	mov.w	r0, #4294967295
 8013458:	bd38      	pop	{r3, r4, r5, pc}
 801345a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801345c:	b112      	cbz	r2, 8013464 <_raise_r+0x1e>
 801345e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013462:	b94b      	cbnz	r3, 8013478 <_raise_r+0x32>
 8013464:	4628      	mov	r0, r5
 8013466:	f000 f831 	bl	80134cc <_getpid_r>
 801346a:	4622      	mov	r2, r4
 801346c:	4601      	mov	r1, r0
 801346e:	4628      	mov	r0, r5
 8013470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013474:	f000 b818 	b.w	80134a8 <_kill_r>
 8013478:	2b01      	cmp	r3, #1
 801347a:	d00a      	beq.n	8013492 <_raise_r+0x4c>
 801347c:	1c59      	adds	r1, r3, #1
 801347e:	d103      	bne.n	8013488 <_raise_r+0x42>
 8013480:	2316      	movs	r3, #22
 8013482:	6003      	str	r3, [r0, #0]
 8013484:	2001      	movs	r0, #1
 8013486:	e7e7      	b.n	8013458 <_raise_r+0x12>
 8013488:	2100      	movs	r1, #0
 801348a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801348e:	4620      	mov	r0, r4
 8013490:	4798      	blx	r3
 8013492:	2000      	movs	r0, #0
 8013494:	e7e0      	b.n	8013458 <_raise_r+0x12>
	...

08013498 <raise>:
 8013498:	4b02      	ldr	r3, [pc, #8]	@ (80134a4 <raise+0xc>)
 801349a:	4601      	mov	r1, r0
 801349c:	6818      	ldr	r0, [r3, #0]
 801349e:	f7ff bfd2 	b.w	8013446 <_raise_r>
 80134a2:	bf00      	nop
 80134a4:	2000019c 	.word	0x2000019c

080134a8 <_kill_r>:
 80134a8:	b538      	push	{r3, r4, r5, lr}
 80134aa:	4d07      	ldr	r5, [pc, #28]	@ (80134c8 <_kill_r+0x20>)
 80134ac:	2300      	movs	r3, #0
 80134ae:	4604      	mov	r4, r0
 80134b0:	4608      	mov	r0, r1
 80134b2:	4611      	mov	r1, r2
 80134b4:	602b      	str	r3, [r5, #0]
 80134b6:	f7ef fa9b 	bl	80029f0 <_kill>
 80134ba:	1c43      	adds	r3, r0, #1
 80134bc:	d102      	bne.n	80134c4 <_kill_r+0x1c>
 80134be:	682b      	ldr	r3, [r5, #0]
 80134c0:	b103      	cbz	r3, 80134c4 <_kill_r+0x1c>
 80134c2:	6023      	str	r3, [r4, #0]
 80134c4:	bd38      	pop	{r3, r4, r5, pc}
 80134c6:	bf00      	nop
 80134c8:	20002250 	.word	0x20002250

080134cc <_getpid_r>:
 80134cc:	f7ef ba88 	b.w	80029e0 <_getpid>

080134d0 <floor>:
 80134d0:	ec51 0b10 	vmov	r0, r1, d0
 80134d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80134d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134dc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80134e0:	2e13      	cmp	r6, #19
 80134e2:	460c      	mov	r4, r1
 80134e4:	4605      	mov	r5, r0
 80134e6:	4680      	mov	r8, r0
 80134e8:	dc34      	bgt.n	8013554 <floor+0x84>
 80134ea:	2e00      	cmp	r6, #0
 80134ec:	da17      	bge.n	801351e <floor+0x4e>
 80134ee:	a332      	add	r3, pc, #200	@ (adr r3, 80135b8 <floor+0xe8>)
 80134f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134f4:	f7ec feca 	bl	800028c <__adddf3>
 80134f8:	2200      	movs	r2, #0
 80134fa:	2300      	movs	r3, #0
 80134fc:	f7ed fb0c 	bl	8000b18 <__aeabi_dcmpgt>
 8013500:	b150      	cbz	r0, 8013518 <floor+0x48>
 8013502:	2c00      	cmp	r4, #0
 8013504:	da55      	bge.n	80135b2 <floor+0xe2>
 8013506:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801350a:	432c      	orrs	r4, r5
 801350c:	2500      	movs	r5, #0
 801350e:	42ac      	cmp	r4, r5
 8013510:	4c2b      	ldr	r4, [pc, #172]	@ (80135c0 <floor+0xf0>)
 8013512:	bf08      	it	eq
 8013514:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8013518:	4621      	mov	r1, r4
 801351a:	4628      	mov	r0, r5
 801351c:	e023      	b.n	8013566 <floor+0x96>
 801351e:	4f29      	ldr	r7, [pc, #164]	@ (80135c4 <floor+0xf4>)
 8013520:	4137      	asrs	r7, r6
 8013522:	ea01 0307 	and.w	r3, r1, r7
 8013526:	4303      	orrs	r3, r0
 8013528:	d01d      	beq.n	8013566 <floor+0x96>
 801352a:	a323      	add	r3, pc, #140	@ (adr r3, 80135b8 <floor+0xe8>)
 801352c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013530:	f7ec feac 	bl	800028c <__adddf3>
 8013534:	2200      	movs	r2, #0
 8013536:	2300      	movs	r3, #0
 8013538:	f7ed faee 	bl	8000b18 <__aeabi_dcmpgt>
 801353c:	2800      	cmp	r0, #0
 801353e:	d0eb      	beq.n	8013518 <floor+0x48>
 8013540:	2c00      	cmp	r4, #0
 8013542:	bfbe      	ittt	lt
 8013544:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013548:	4133      	asrlt	r3, r6
 801354a:	18e4      	addlt	r4, r4, r3
 801354c:	ea24 0407 	bic.w	r4, r4, r7
 8013550:	2500      	movs	r5, #0
 8013552:	e7e1      	b.n	8013518 <floor+0x48>
 8013554:	2e33      	cmp	r6, #51	@ 0x33
 8013556:	dd0a      	ble.n	801356e <floor+0x9e>
 8013558:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801355c:	d103      	bne.n	8013566 <floor+0x96>
 801355e:	4602      	mov	r2, r0
 8013560:	460b      	mov	r3, r1
 8013562:	f7ec fe93 	bl	800028c <__adddf3>
 8013566:	ec41 0b10 	vmov	d0, r0, r1
 801356a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801356e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8013572:	f04f 37ff 	mov.w	r7, #4294967295
 8013576:	40df      	lsrs	r7, r3
 8013578:	4207      	tst	r7, r0
 801357a:	d0f4      	beq.n	8013566 <floor+0x96>
 801357c:	a30e      	add	r3, pc, #56	@ (adr r3, 80135b8 <floor+0xe8>)
 801357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013582:	f7ec fe83 	bl	800028c <__adddf3>
 8013586:	2200      	movs	r2, #0
 8013588:	2300      	movs	r3, #0
 801358a:	f7ed fac5 	bl	8000b18 <__aeabi_dcmpgt>
 801358e:	2800      	cmp	r0, #0
 8013590:	d0c2      	beq.n	8013518 <floor+0x48>
 8013592:	2c00      	cmp	r4, #0
 8013594:	da0a      	bge.n	80135ac <floor+0xdc>
 8013596:	2e14      	cmp	r6, #20
 8013598:	d101      	bne.n	801359e <floor+0xce>
 801359a:	3401      	adds	r4, #1
 801359c:	e006      	b.n	80135ac <floor+0xdc>
 801359e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80135a2:	2301      	movs	r3, #1
 80135a4:	40b3      	lsls	r3, r6
 80135a6:	441d      	add	r5, r3
 80135a8:	4545      	cmp	r5, r8
 80135aa:	d3f6      	bcc.n	801359a <floor+0xca>
 80135ac:	ea25 0507 	bic.w	r5, r5, r7
 80135b0:	e7b2      	b.n	8013518 <floor+0x48>
 80135b2:	2500      	movs	r5, #0
 80135b4:	462c      	mov	r4, r5
 80135b6:	e7af      	b.n	8013518 <floor+0x48>
 80135b8:	8800759c 	.word	0x8800759c
 80135bc:	7e37e43c 	.word	0x7e37e43c
 80135c0:	bff00000 	.word	0xbff00000
 80135c4:	000fffff 	.word	0x000fffff

080135c8 <_init>:
 80135c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135ca:	bf00      	nop
 80135cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135ce:	bc08      	pop	{r3}
 80135d0:	469e      	mov	lr, r3
 80135d2:	4770      	bx	lr

080135d4 <_fini>:
 80135d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135d6:	bf00      	nop
 80135d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135da:	bc08      	pop	{r3}
 80135dc:	469e      	mov	lr, r3
 80135de:	4770      	bx	lr
