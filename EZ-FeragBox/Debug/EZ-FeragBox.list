
EZ-FeragBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca40  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000700  0800cbd0  0800cbd0  0000dbd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2d0  0800d2d0  0000f1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2d0  0800d2d0  0000e2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2d8  0800d2d8  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2d8  0800d2d8  0000e2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2dc  0800d2dc  0000e2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d2e0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ff8  200001e8  0800d4c8  0000f1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011e0  0800d4c8  000101e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152e9  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003203  00000000  00000000  00024501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  00027708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e97  00000000  00000000  000289b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e087  00000000  00000000  0002984f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018978  00000000  00000000  000478d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9f47  00000000  00000000  0006024e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a195  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065d0  00000000  00000000  0010a1d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  001107a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cbb8 	.word	0x0800cbb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800cbb8 	.word	0x0800cbb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <AD55936_init>:
#define _ADAC_ADC_READ        0b01000000
#define _ADAC_DAC_READ        0b01010000
#define _ADAC_GPIO_READ       0b01100000
#define _ADAC_REG_READ        0b01110000

HAL_StatusTypeDef AD55936_init(I2C_HandleTypeDef *hi2c, uint16_t DevAddress) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	uint8_t data[3];

	data[0] = _ADAC_GP_CONTROL;
 8000d00:	2303      	movs	r3, #3
 8000d02:	733b      	strb	r3, [r7, #12]
	data[1] = 0x01;
 8000d04:	2301      	movs	r3, #1
 8000d06:	737b      	strb	r3, [r7, #13]
	data[2] = 0x00;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, 3, HAL_MAX_DELAY);
 8000d0c:	f107 020c 	add.w	r2, r7, #12
 8000d10:	8879      	ldrh	r1, [r7, #2]
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2303      	movs	r3, #3
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f002 fbf6 	bl	800350c <HAL_I2C_Master_Transmit>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <AD55936_init+0x3a>
		return status;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	e029      	b.n	8000d82 <AD55936_init+0x8e>

	data[0] = _ADAC_POWER_REF_CTRL;
 8000d2e:	230b      	movs	r3, #11
 8000d30:	733b      	strb	r3, [r7, #12]
	data[1] = 0x02;
 8000d32:	2302      	movs	r3, #2
 8000d34:	737b      	strb	r3, [r7, #13]
	data[2] = 0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, 3, HAL_MAX_DELAY);
 8000d3a:	f107 020c 	add.w	r2, r7, #12
 8000d3e:	8879      	ldrh	r1, [r7, #2]
 8000d40:	f04f 33ff 	mov.w	r3, #4294967295
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2303      	movs	r3, #3
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f002 fbdf 	bl	800350c <HAL_I2C_Master_Transmit>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <AD55936_init+0x68>
		return status;
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	e012      	b.n	8000d82 <AD55936_init+0x8e>

	data[0] = _ADAC_ADC_CONFIG;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	733b      	strb	r3, [r7, #12]
	data[1] = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	737b      	strb	r3, [r7, #13]
	data[2] = 0xFF;
 8000d64:	23ff      	movs	r3, #255	@ 0xff
 8000d66:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, 3, HAL_MAX_DELAY);
 8000d68:	f107 020c 	add.w	r2, r7, #12
 8000d6c:	8879      	ldrh	r1, [r7, #2]
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2303      	movs	r3, #3
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f002 fbc8 	bl	800350c <HAL_I2C_Master_Transmit>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	73fb      	strb	r3, [r7, #15]

	return status;
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <AD5593R_ReadADC>:

HAL_StatusTypeDef AD5593R_ReadADC(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t channel, uint16_t *adcValue) {
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b08a      	sub	sp, #40	@ 0x28
 8000d8e:	af02      	add	r7, sp, #8
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	817b      	strh	r3, [r7, #10]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	727b      	strb	r3, [r7, #9]
    uint16_t channelBit = 1 << channel;
 8000d9c:	7a7b      	ldrb	r3, [r7, #9]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	83fb      	strh	r3, [r7, #30]

	if (channel > 8) {
 8000da6:	7a7b      	ldrb	r3, [r7, #9]
 8000da8:	2b08      	cmp	r3, #8
 8000daa:	d901      	bls.n	8000db0 <AD5593R_ReadADC+0x26>
        // Invalid channel, return error (0-7 = ADC Inputs, 8 = Internal Temperature Sensor)
        return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e04a      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    HAL_StatusTypeDef status;
    uint8_t command[3];
    uint8_t data[2];

    // Configure the ADC channel
    command[0] = _ADAC_ADC_SEQUENCE;
 8000db0:	2302      	movs	r3, #2
 8000db2:	763b      	strb	r3, [r7, #24]

    // Select Channel
    command[1] = (uint8_t)(channelBit >> 8);
 8000db4:	8bfb      	ldrh	r3, [r7, #30]
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	767b      	strb	r3, [r7, #25]
    command[2] = (uint8_t)(channelBit & 0xFF);
 8000dbe:	8bfb      	ldrh	r3, [r7, #30]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	76bb      	strb	r3, [r7, #26]

    status = HAL_I2C_Master_Transmit(hi2c, DevAddress, command, sizeof(command), HAL_MAX_DELAY);
 8000dc4:	f107 0218 	add.w	r2, r7, #24
 8000dc8:	8979      	ldrh	r1, [r7, #10]
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	68f8      	ldr	r0, [r7, #12]
 8000dd4:	f002 fb9a 	bl	800350c <HAL_I2C_Master_Transmit>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	777b      	strb	r3, [r7, #29]

    if (status != HAL_OK) {
 8000ddc:	7f7b      	ldrb	r3, [r7, #29]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <AD5593R_ReadADC+0x5c>
        // Handle error here
        return status;
 8000de2:	7f7b      	ldrb	r3, [r7, #29]
 8000de4:	e02f      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    }

	// Initiate an ADC read
	command[0] = _ADAC_ADC_READ;
 8000de6:	2340      	movs	r3, #64	@ 0x40
 8000de8:	763b      	strb	r3, [r7, #24]

    // Begin transmission to set the ADC read pointer
    status = HAL_I2C_Master_Transmit(hi2c, DevAddress, command, 1, HAL_MAX_DELAY);
 8000dea:	f107 0218 	add.w	r2, r7, #24
 8000dee:	8979      	ldrh	r1, [r7, #10]
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2301      	movs	r3, #1
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f002 fb87 	bl	800350c <HAL_I2C_Master_Transmit>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	777b      	strb	r3, [r7, #29]

    if (status != HAL_OK) {
 8000e02:	7f7b      	ldrb	r3, [r7, #29]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <AD5593R_ReadADC+0x82>
        // Handle error here
        return status;
 8000e08:	7f7b      	ldrb	r3, [r7, #29]
 8000e0a:	e01c      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    }

    // Read the ADC value (2 bytes)
    status = HAL_I2C_Master_Receive(hi2c, DevAddress, data, 2, HAL_MAX_DELAY);
 8000e0c:	f107 0214 	add.w	r2, r7, #20
 8000e10:	8979      	ldrh	r1, [r7, #10]
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2302      	movs	r3, #2
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f002 fc6a 	bl	80036f4 <HAL_I2C_Master_Receive>
 8000e20:	4603      	mov	r3, r0
 8000e22:	777b      	strb	r3, [r7, #29]

    if (status != HAL_OK) {
 8000e24:	7f7b      	ldrb	r3, [r7, #29]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <AD5593R_ReadADC+0xa4>
        // Handle error here
        return status;
 8000e2a:	7f7b      	ldrb	r3, [r7, #29]
 8000e2c:	e00b      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    }

    // Convert the two received bytes into a single 16-bit value
    *adcValue = (uint16_t)((data[0] & 0x0F) << 8) + data[1];
 8000e2e:	7d3b      	ldrb	r3, [r7, #20]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	7d7a      	ldrb	r2, [r7, #21]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	801a      	strh	r2, [r3, #0]

    return status;
 8000e44:	7f7b      	ldrb	r3, [r7, #29]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <box_init>:
static void _check_printer_ready(void);
static void _send_print_done(void);

//--- box_init -------------------------------
void box_init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	memset(&_Status, 0, sizeof(_Status));
 8000e54:	223c      	movs	r2, #60	@ 0x3c
 8000e56:	2100      	movs	r1, #0
 8000e58:	480e      	ldr	r0, [pc, #56]	@ (8000e94 <box_init+0x44>)
 8000e5a:	f008 f817 	bl	8008e8c <memset>
	_FeragMsgIn      = 0;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <box_init+0x48>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
	_FeragMsgOut     = 0;
 8000e64:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <box_init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
	_TrackInIdx  	 = 0;
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <box_init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
	_TrackOutIdx 	 = 0;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <box_init+0x54>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
	_PrintDoneDelay  = 0;
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <box_init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
	_PrinterReadyIn  = -1;
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <box_init+0x5c>)
 8000e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e82:	601a      	str	r2, [r3, #0]
	box_start();
 8000e84:	f000 f82a 	bl	8000edc <box_start>
	printf("LOG: box_init\n");
 8000e88:	4809      	ldr	r0, [pc, #36]	@ (8000eb0 <box_init+0x60>)
 8000e8a:	f007 fed3 	bl	8008c34 <puts>
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000208 	.word	0x20000208
 8000e98:	20000250 	.word	0x20000250
 8000e9c:	20000254 	.word	0x20000254
 8000ea0:	20000558 	.word	0x20000558
 8000ea4:	2000055c 	.word	0x2000055c
 8000ea8:	2000056c 	.word	0x2000056c
 8000eac:	20000004 	.word	0x20000004
 8000eb0:	0800cbd0 	.word	0x0800cbd0

08000eb4 <box_set_pgDelay>:

//--- box_set_pgDelay ------------------------------------
void box_set_pgDelay(int delay)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	_PrintGoDelay = delay;
 8000ebc:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <box_set_pgDelay+0x20>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
	printf("set pgDelay=%d\n", delay);
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	4804      	ldr	r0, [pc, #16]	@ (8000ed8 <box_set_pgDelay+0x24>)
 8000ec6:	f007 fe4d 	bl	8008b64 <iprintf>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	0800cbe0 	.word	0x0800cbe0

08000edc <box_start>:

//--- box_start -------------------------
void box_start(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	printf("start\n");
 8000ee0:	481b      	ldr	r0, [pc, #108]	@ (8000f50 <box_start+0x74>)
 8000ee2:	f007 fea7 	bl	8008c34 <puts>
	_FeragMsgIn   = 0;
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <box_start+0x78>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
	_FeragMsgOut  = 0;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <box_start+0x7c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
	_TrackInIdx  	  = 0;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <box_start+0x80>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
	_TrackOutIdx 	  = 0;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <box_start+0x84>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
	_Status.dtCnt = 0;
 8000efe:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <box_start+0x88>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	625a      	str	r2, [r3, #36]	@ 0x24
	_Status.pgCnt = 0;
 8000f04:	4b17      	ldr	r3, [pc, #92]	@ (8000f64 <box_start+0x88>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	635a      	str	r2, [r3, #52]	@ 0x34
	_Status.pdCnt = 0;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	@ (8000f64 <box_start+0x88>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	639a      	str	r2, [r3, #56]	@ 0x38
	_EncoderPos   = 0;
 8000f10:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <box_start+0x8c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
	_TrackingError = FALSE;
 8000f16:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <box_start+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
	_PrintDoneDelay = 0;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <box_start+0x94>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
	_PrinterReadyIn  = -1;
 8000f22:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <box_start+0x98>)
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	601a      	str	r2, [r3, #0]
	_PaceId		  = -1;
 8000f2a:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <box_start+0x9c>)
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	601a      	str	r2, [r3, #0]
	box_send_status();
 8000f32:	f000 fb97 	bl	8001664 <box_send_status>
	_Running = TRUE;
 8000f36:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <box_start+0xa0>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f42:	480f      	ldr	r0, [pc, #60]	@ (8000f80 <box_start+0xa4>)
 8000f44:	f002 fa3a 	bl	80033bc <HAL_GPIO_WritePin>
	enc_start();
 8000f48:	f000 fd6c 	bl	8001a24 <enc_start>
		enc_set_speed(100);
		//--- PaceId 10 ----
		box_handle_ferag_char(0x11);
		box_handle_ferag_char(0x8a);
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	0800cbf0 	.word	0x0800cbf0
 8000f54:	20000250 	.word	0x20000250
 8000f58:	20000254 	.word	0x20000254
 8000f5c:	20000558 	.word	0x20000558
 8000f60:	2000055c 	.word	0x2000055c
 8000f64:	20000208 	.word	0x20000208
 8000f68:	20000568 	.word	0x20000568
 8000f6c:	20000570 	.word	0x20000570
 8000f70:	2000056c 	.word	0x2000056c
 8000f74:	20000004 	.word	0x20000004
 8000f78:	20000560 	.word	0x20000560
 8000f7c:	20000204 	.word	0x20000204
 8000f80:	48001000 	.word	0x48001000

08000f84 <box_stop>:

//--- box_stop ----------------------------
void box_stop(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	_Running = FALSE;
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <box_stop+0x20>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
	enc_stop();
 8000f8e:	f000 fd61 	bl	8001a54 <enc_stop>
	HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f98:	4803      	ldr	r0, [pc, #12]	@ (8000fa8 <box_stop+0x24>)
 8000f9a:	f002 fa0f 	bl	80033bc <HAL_GPIO_WritePin>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000204 	.word	0x20000204
 8000fa8:	48001000 	.word	0x48001000

08000fac <box_idle>:

//--- box_idle ----------------------------------------
void box_idle(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	_handle_feragMsg();
 8000fb0:	f000 f934 	bl	800121c <_handle_feragMsg>
	_handle_encoder();
 8000fb4:	f000 f9b2 	bl	800131c <_handle_encoder>
//	_check_printer_ready();
//	if (!SIMULATION) _check_print_done();
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <box_tick_10ms>:

//--- box_tick_10ms ------------------
void box_tick_10ms(int ticks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	_Ticks = ticks;
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <box_tick_10ms+0x34>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]

	if (_Ticks > _TicksSysCheck)
 8000fca:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <box_tick_10ms+0x34>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <box_tick_10ms+0x38>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	dd07      	ble.n	8000fe6 <box_tick_10ms+0x2a>
	{
		_TicksSysCheck = _Ticks+500;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <box_tick_10ms+0x34>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000fde:	4a05      	ldr	r2, [pc, #20]	@ (8000ff4 <box_tick_10ms+0x38>)
 8000fe0:	6013      	str	r3, [r2, #0]
		_check_system();
 8000fe2:	f000 f809 	bl	8000ff8 <_check_system>
	}
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000244 	.word	0x20000244
 8000ff4:	20000248 	.word	0x20000248

08000ff8 <_check_system>:

//--- _check_system -----------------
static void _check_system(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
	_Status.voltages.voltage24V 			= (INT8)(10*adc_get_value(0, 30.0));
 8000ffe:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001002:	2000      	movs	r0, #0
 8001004:	f001 f938 	bl	8002278 <adc_get_value>
 8001008:	eef0 7a40 	vmov.f32	s15, s0
 800100c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001014:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001018:	edc7 7a01 	vstr	s15, [r7, #4]
 800101c:	793b      	ldrb	r3, [r7, #4]
 800101e:	b25b      	sxtb	r3, r3
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b62      	ldr	r3, [pc, #392]	@ (80011ac <_check_system+0x1b4>)
 8001024:	725a      	strb	r2, [r3, #9]
	_Status.voltages.voltage12V 			= (INT8)(10*adc_get_value(1, 15.0));
 8001026:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800102a:	2001      	movs	r0, #1
 800102c:	f001 f924 	bl	8002278 <adc_get_value>
 8001030:	eef0 7a40 	vmov.f32	s15, s0
 8001034:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001038:	ee67 7a87 	vmul.f32	s15, s15, s14
 800103c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001040:	edc7 7a01 	vstr	s15, [r7, #4]
 8001044:	793b      	ldrb	r3, [r7, #4]
 8001046:	b25b      	sxtb	r3, r3
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b58      	ldr	r3, [pc, #352]	@ (80011ac <_check_system+0x1b4>)
 800104c:	719a      	strb	r2, [r3, #6]
	_Status.voltages.voltage12VNuc 			= (INT8)(10*adc_get_value(2, 15.0));
 800104e:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001052:	2002      	movs	r0, #2
 8001054:	f001 f910 	bl	8002278 <adc_get_value>
 8001058:	eef0 7a40 	vmov.f32	s15, s0
 800105c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001068:	edc7 7a01 	vstr	s15, [r7, #4]
 800106c:	793b      	ldrb	r3, [r7, #4]
 800106e:	b25b      	sxtb	r3, r3
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b4e      	ldr	r3, [pc, #312]	@ (80011ac <_check_system+0x1b4>)
 8001074:	71da      	strb	r2, [r3, #7]
	_Status.voltages.voltage12VDisplay 		= (INT8)(10*adc_get_value(3, 15.0));
 8001076:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800107a:	2003      	movs	r0, #3
 800107c:	f001 f8fc 	bl	8002278 <adc_get_value>
 8001080:	eef0 7a40 	vmov.f32	s15, s0
 8001084:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001090:	edc7 7a01 	vstr	s15, [r7, #4]
 8001094:	793b      	ldrb	r3, [r7, #4]
 8001096:	b25b      	sxtb	r3, r3
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b44      	ldr	r3, [pc, #272]	@ (80011ac <_check_system+0x1b4>)
 800109c:	721a      	strb	r2, [r3, #8]
	_Status.voltages.voltage5V 				= (INT8)(10*adc_get_value(4, 6.25));
 800109e:	eeb1 0a09 	vmov.f32	s0, #25	@ 0x40c80000  6.250
 80010a2:	2004      	movs	r0, #4
 80010a4:	f001 f8e8 	bl	8002278 <adc_get_value>
 80010a8:	eef0 7a40 	vmov.f32	s15, s0
 80010ac:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80010b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80010bc:	793b      	ldrb	r3, [r7, #4]
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b3a      	ldr	r3, [pc, #232]	@ (80011ac <_check_system+0x1b4>)
 80010c4:	715a      	strb	r2, [r3, #5]
	_Status.voltages.voltage3V3 			= (INT8)(10*adc_get_value(5, 4.125));
 80010c6:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 80011b0 <_check_system+0x1b8>
 80010ca:	2005      	movs	r0, #5
 80010cc:	f001 f8d4 	bl	8002278 <adc_get_value>
 80010d0:	eef0 7a40 	vmov.f32	s15, s0
 80010d4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80010d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80010e4:	793b      	ldrb	r3, [r7, #4]
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b30      	ldr	r3, [pc, #192]	@ (80011ac <_check_system+0x1b4>)
 80010ec:	711a      	strb	r2, [r3, #4]
	_Status.voltages.voltagePcbRevision 	= (INT8)(10*adc_get_value(6, 4.125));
 80010ee:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 80011b0 <_check_system+0x1b8>
 80010f2:	2006      	movs	r0, #6
 80010f4:	f001 f8c0 	bl	8002278 <adc_get_value>
 80010f8:	eef0 7a40 	vmov.f32	s15, s0
 80010fc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001100:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001104:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001108:	edc7 7a01 	vstr	s15, [r7, #4]
 800110c:	793b      	ldrb	r3, [r7, #4]
 800110e:	b25b      	sxtb	r3, r3
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b26      	ldr	r3, [pc, #152]	@ (80011ac <_check_system+0x1b4>)
 8001114:	729a      	strb	r2, [r3, #10]
	_Status.pcbRevision 					= adc_get_revision(_Status.voltages.voltagePcbRevision);
 8001116:	4b25      	ldr	r3, [pc, #148]	@ (80011ac <_check_system+0x1b4>)
 8001118:	7a9b      	ldrb	r3, [r3, #10]
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001122:	eeb0 0a67 	vmov.f32	s0, s15
 8001126:	f001 f8f7 	bl	8002318 <adc_get_revision>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ac <_check_system+0x1b4>)
 8001130:	72da      	strb	r2, [r3, #11]
	_Status.boardTemperature 				= (INT8)(10*adc_get_temp());
 8001132:	f001 f8c7 	bl	80022c4 <adc_get_temp>
 8001136:	eef0 7a40 	vmov.f32	s15, s0
 800113a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800113e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001146:	edc7 7a01 	vstr	s15, [r7, #4]
 800114a:	793b      	ldrb	r3, [r7, #4]
 800114c:	b25b      	sxtb	r3, r3
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <_check_system+0x1b4>)
 8001152:	70da      	strb	r2, [r3, #3]

	// Update DIP Switch inputs
	_Status.dipSwitch						= gpio_get_dipswitches();
 8001154:	f001 f928 	bl	80023a8 <gpio_get_dipswitches>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <_check_system+0x1b4>)
 800115e:	709a      	strb	r2, [r3, #2]

	// Update encoder generator parameters
	enc_get_status(&_Status.enc);
 8001160:	4814      	ldr	r0, [pc, #80]	@ (80011b4 <_check_system+0x1bc>)
 8001162:	f000 fb5f 	bl	8001824 <enc_get_status>

	// Update Power Status
	_Status.flags=0;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <_check_system+0x1b4>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin)) _Status.flags |= FLAG_nucPower;
 800116c:	2140      	movs	r1, #64	@ 0x40
 800116e:	4812      	ldr	r0, [pc, #72]	@ (80011b8 <_check_system+0x1c0>)
 8001170:	f002 f90c 	bl	800338c <HAL_GPIO_ReadPin>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <_check_system+0x190>
 800117a:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <_check_system+0x1b4>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <_check_system+0x1b4>)
 8001186:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin)) _Status.flags |= FLAG_displayPower;
 8001188:	2180      	movs	r1, #128	@ 0x80
 800118a:	480b      	ldr	r0, [pc, #44]	@ (80011b8 <_check_system+0x1c0>)
 800118c:	f002 f8fe 	bl	800338c <HAL_GPIO_ReadPin>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d006      	beq.n	80011a4 <_check_system+0x1ac>
 8001196:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <_check_system+0x1b4>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	f043 0302 	orr.w	r3, r3, #2
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b02      	ldr	r3, [pc, #8]	@ (80011ac <_check_system+0x1b4>)
 80011a2:	701a      	strb	r2, [r3, #0]
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000208 	.word	0x20000208
 80011b0:	40840000 	.word	0x40840000
 80011b4:	20000214 	.word	0x20000214
 80011b8:	48001400 	.word	0x48001400

080011bc <box_handle_ferag_char>:

//--- box_handle_ferag_char -----------------------------
void box_handle_ferag_char(char data)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	if (data & 0x80)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	da18      	bge.n	8001200 <box_handle_ferag_char+0x44>
	{
		_FeragMsg.data[1]=data;
 80011ce:	4a10      	ldr	r2, [pc, #64]	@ (8001210 <box_handle_ferag_char+0x54>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	7053      	strb	r3, [r2, #1]
		_Status.paceId = _FeragMsg.paceId;
 80011d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <box_handle_ferag_char+0x54>)
 80011d6:	785b      	ldrb	r3, [r3, #1]
 80011d8:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	461a      	mov	r2, r3
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <box_handle_ferag_char+0x58>)
 80011e2:	621a      	str	r2, [r3, #32]
	//	printf("FERAG in 0x%02x 0x%02x, type=%d, info=%d, paceId=0x%02x\n", _FeragMsg.data[0], _FeragMsg.data[1], _FeragMsg.type, _FeragMsg.info, _FeragMsg.paceId);

		_Status.feragMsgInCnt++;
 80011e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <box_handle_ferag_char+0x58>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <box_handle_ferag_char+0x58>)
 80011ec:	6193      	str	r3, [r2, #24]
		_FeragMsgIn++;
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <box_handle_ferag_char+0x5c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	3301      	adds	r3, #1
 80011f4:	4a08      	ldr	r2, [pc, #32]	@ (8001218 <box_handle_ferag_char+0x5c>)
 80011f6:	6013      	str	r3, [r2, #0]
		ferag_send_char(0x80);
 80011f8:	2080      	movs	r0, #128	@ 0x80
 80011fa:	f001 f81d 	bl	8002238 <ferag_send_char>
	}
	else
	{
		_FeragMsg.data[0]=data;
	}
}
 80011fe:	e002      	b.n	8001206 <box_handle_ferag_char+0x4a>
		_FeragMsg.data[0]=data;
 8001200:	4a03      	ldr	r2, [pc, #12]	@ (8001210 <box_handle_ferag_char+0x54>)
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	7013      	strb	r3, [r2, #0]
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000024c 	.word	0x2000024c
 8001214:	20000208 	.word	0x20000208
 8001218:	20000250 	.word	0x20000250

0800121c <_handle_feragMsg>:

//--- _handle_feragMsg ---------------------
static void _handle_feragMsg(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
	if (_FeragMsgOut!=_FeragMsgIn)
 8001222:	4b33      	ldr	r3, [pc, #204]	@ (80012f0 <_handle_feragMsg+0xd4>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4b33      	ldr	r3, [pc, #204]	@ (80012f4 <_handle_feragMsg+0xd8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d05c      	beq.n	80012e8 <_handle_feragMsg+0xcc>
	{
		int idx;
		switch (_FeragMsg.type)
 800122e:	4b32      	ldr	r3, [pc, #200]	@ (80012f8 <_handle_feragMsg+0xdc>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b01      	cmp	r3, #1
 800123a:	d002      	beq.n	8001242 <_handle_feragMsg+0x26>
 800123c:	2b02      	cmp	r3, #2
 800123e:	d039      	beq.n	80012b4 <_handle_feragMsg+0x98>
 8001240:	e03e      	b.n	80012c0 <_handle_feragMsg+0xa4>
		{
		case 1:	idx=(_TrackInIdx+1)% TRACKING_CNT;
 8001242:	4b2e      	ldr	r3, [pc, #184]	@ (80012fc <_handle_feragMsg+0xe0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	425a      	negs	r2, r3
 800124a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800124e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001252:	bf58      	it	pl
 8001254:	4253      	negpl	r3, r2
 8001256:	607b      	str	r3, [r7, #4]
				if (idx==_TrackOutIdx)
 8001258:	4b29      	ldr	r3, [pc, #164]	@ (8001300 <_handle_feragMsg+0xe4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	429a      	cmp	r2, r3
 8001260:	d10a      	bne.n	8001278 <_handle_feragMsg+0x5c>
				{
					if (!_TrackingError)
 8001262:	4b28      	ldr	r3, [pc, #160]	@ (8001304 <_handle_feragMsg+0xe8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d102      	bne.n	8001270 <_handle_feragMsg+0x54>
					 printf("ERROR: Tracking overflow\n");
 800126a:	4827      	ldr	r0, [pc, #156]	@ (8001308 <_handle_feragMsg+0xec>)
 800126c:	f007 fce2 	bl	8008c34 <puts>
					_TrackingError= TRUE;
 8001270:	4b24      	ldr	r3, [pc, #144]	@ (8001304 <_handle_feragMsg+0xe8>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]
					_TrackInIdx=idx;
				//	if (_FeragMsg.info&1) printf("ProductDetect %d: PaceId=%d, \n", _Status.dtCnt, _FeragMsg.paceId);
				//	else printf("ProductDetect %d: PaceId=%d (EMPTY)\n", _Status.dtCnt, _FeragMsg.paceId);
					_Status.dtCnt++;
				}
				break;
 8001276:	e02d      	b.n	80012d4 <_handle_feragMsg+0xb8>
					memcpy(&_Tracking[idx].prod, &_FeragMsg,  sizeof(_Tracking[idx].prod));
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4a22      	ldr	r2, [pc, #136]	@ (800130c <_handle_feragMsg+0xf0>)
 8001284:	4413      	add	r3, r2
 8001286:	3304      	adds	r3, #4
 8001288:	4a1b      	ldr	r2, [pc, #108]	@ (80012f8 <_handle_feragMsg+0xdc>)
 800128a:	8812      	ldrh	r2, [r2, #0]
 800128c:	801a      	strh	r2, [r3, #0]
					_Tracking[idx].delay = _PrintGoDelay;
 800128e:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <_handle_feragMsg+0xf4>)
 8001290:	6819      	ldr	r1, [r3, #0]
 8001292:	481e      	ldr	r0, [pc, #120]	@ (800130c <_handle_feragMsg+0xf0>)
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4403      	add	r3, r0
 80012a0:	6019      	str	r1, [r3, #0]
					_TrackInIdx=idx;
 80012a2:	4a16      	ldr	r2, [pc, #88]	@ (80012fc <_handle_feragMsg+0xe0>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6013      	str	r3, [r2, #0]
					_Status.dtCnt++;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <_handle_feragMsg+0xf8>)
 80012aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a19      	ldr	r2, [pc, #100]	@ (8001314 <_handle_feragMsg+0xf8>)
 80012b0:	6253      	str	r3, [r2, #36]	@ 0x24
				break;
 80012b2:	e00f      	b.n	80012d4 <_handle_feragMsg+0xb8>

		case 2:		// printf("Alive\n");
					_Status.aliveCnt++; break;
 80012b4:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <_handle_feragMsg+0xf8>)
 80012b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b8:	3301      	adds	r3, #1
 80012ba:	4a16      	ldr	r2, [pc, #88]	@ (8001314 <_handle_feragMsg+0xf8>)
 80012bc:	6293      	str	r3, [r2, #40]	@ 0x28
 80012be:	e009      	b.n	80012d4 <_handle_feragMsg+0xb8>
		default: 	printf("Unknown Message Type=%d\n", _FeragMsg.type);
 80012c0:	4b0d      	ldr	r3, [pc, #52]	@ (80012f8 <_handle_feragMsg+0xdc>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4619      	mov	r1, r3
 80012cc:	4812      	ldr	r0, [pc, #72]	@ (8001318 <_handle_feragMsg+0xfc>)
 80012ce:	f007 fc49 	bl	8008b64 <iprintf>
					break;
 80012d2:	bf00      	nop
		}
		_Status.feragMsgOutCnt++;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <_handle_feragMsg+0xf8>)
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	3301      	adds	r3, #1
 80012da:	4a0e      	ldr	r2, [pc, #56]	@ (8001314 <_handle_feragMsg+0xf8>)
 80012dc:	61d3      	str	r3, [r2, #28]
		_FeragMsgOut++;
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <_handle_feragMsg+0xd4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	3301      	adds	r3, #1
 80012e4:	4a02      	ldr	r2, [pc, #8]	@ (80012f0 <_handle_feragMsg+0xd4>)
 80012e6:	6013      	str	r3, [r2, #0]
	}
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000254 	.word	0x20000254
 80012f4:	20000250 	.word	0x20000250
 80012f8:	2000024c 	.word	0x2000024c
 80012fc:	20000558 	.word	0x20000558
 8001300:	2000055c 	.word	0x2000055c
 8001304:	20000570 	.word	0x20000570
 8001308:	0800cbf8 	.word	0x0800cbf8
 800130c:	20000258 	.word	0x20000258
 8001310:	20000000 	.word	0x20000000
 8001314:	20000208 	.word	0x20000208
 8001318:	0800cc14 	.word	0x0800cc14

0800131c <_handle_encoder>:

//--- _handle_encoder -------------------------------------
static void _handle_encoder(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
	if (_EncoderPos!=EZ_EncoderOutPos)
 8001322:	4b40      	ldr	r3, [pc, #256]	@ (8001424 <_handle_encoder+0x108>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b40      	ldr	r3, [pc, #256]	@ (8001428 <_handle_encoder+0x10c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d075      	beq.n	800141a <_handle_encoder+0xfe>
	{
		_EncoderPos++;
 800132e:	4b3d      	ldr	r3, [pc, #244]	@ (8001424 <_handle_encoder+0x108>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	4a3b      	ldr	r2, [pc, #236]	@ (8001424 <_handle_encoder+0x108>)
 8001336:	6013      	str	r3, [r2, #0]
	//	if (_EncoderPos%1000==0)
	//		printf("Enc=%d: DELAY=%d, %d, %d ,%d, %d, %d, %d, %d\n", _EncoderPos, _Tracking[0].delay, _Tracking[1].delay, _Tracking[2].delay, _Tracking[3].delay, _Tracking[4].delay, _Tracking[5].delay, _Tracking[6].delay, _Tracking[7].delay);
		for (int i=0; i<TRACKING_CNT; i++)
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	e048      	b.n	80013d0 <_handle_encoder+0xb4>
		{
			if (_Tracking[i].delay>0 && (--_Tracking[i].delay)==0)
 800133e:	493b      	ldr	r1, [pc, #236]	@ (800142c <_handle_encoder+0x110>)
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	440b      	add	r3, r1
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	dd3b      	ble.n	80013ca <_handle_encoder+0xae>
 8001352:	4936      	ldr	r1, [pc, #216]	@ (800142c <_handle_encoder+0x110>)
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	440b      	add	r3, r1
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	1e59      	subs	r1, r3, #1
 8001364:	4831      	ldr	r0, [pc, #196]	@ (800142c <_handle_encoder+0x110>)
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4403      	add	r3, r0
 8001372:	6019      	str	r1, [r3, #0]
 8001374:	492d      	ldr	r1, [pc, #180]	@ (800142c <_handle_encoder+0x110>)
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	440b      	add	r3, r1
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d120      	bne.n	80013ca <_handle_encoder+0xae>
			{
				_TrackOutIdx=i;
 8001388:	4a29      	ldr	r2, [pc, #164]	@ (8001430 <_handle_encoder+0x114>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
				printf("PrintGo PaceId=%d, ok=%d\n", _Tracking[i].prod.paceId, _Tracking[i].prod.info);
 800138e:	4927      	ldr	r1, [pc, #156]	@ (800142c <_handle_encoder+0x110>)
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	440b      	add	r3, r1
 800139c:	795b      	ldrb	r3, [r3, #5]
 800139e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	4921      	ldr	r1, [pc, #132]	@ (800142c <_handle_encoder+0x110>)
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4413      	add	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	440b      	add	r3, r1
 80013b4:	791b      	ldrb	r3, [r3, #4]
 80013b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	4601      	mov	r1, r0
 80013c0:	481c      	ldr	r0, [pc, #112]	@ (8001434 <_handle_encoder+0x118>)
 80013c2:	f007 fbcf 	bl	8008b64 <iprintf>
				box_printGo();
 80013c6:	f000 f8b9 	bl	800153c <box_printGo>
		for (int i=0; i<TRACKING_CNT; i++)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3301      	adds	r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80013d4:	ddb3      	ble.n	800133e <_handle_encoder+0x22>
			}
		}
		if (_PrintGoOffDelay>0)
 80013d6:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <_handle_encoder+0x11c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	dd0e      	ble.n	80013fc <_handle_encoder+0xe0>
		{
			if ((--_PrintGoOffDelay)==0)
 80013de:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <_handle_encoder+0x11c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <_handle_encoder+0x11c>)
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <_handle_encoder+0x11c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d105      	bne.n	80013fc <_handle_encoder+0xe0>
				HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013f6:	4811      	ldr	r0, [pc, #68]	@ (800143c <_handle_encoder+0x120>)
 80013f8:	f001 ffe0 	bl	80033bc <HAL_GPIO_WritePin>
		}

		if (_PrintDoneDelay>0)
 80013fc:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <_handle_encoder+0x124>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	dd0a      	ble.n	800141a <_handle_encoder+0xfe>
		{
			if ((--_PrintDoneDelay)==0)
 8001404:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <_handle_encoder+0x124>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	3b01      	subs	r3, #1
 800140a:	4a0d      	ldr	r2, [pc, #52]	@ (8001440 <_handle_encoder+0x124>)
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <_handle_encoder+0x124>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <_handle_encoder+0xfe>
				_send_print_done();
 8001416:	f000 f815 	bl	8001444 <_send_print_done>
		}
	}
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000568 	.word	0x20000568
 8001428:	20000594 	.word	0x20000594
 800142c:	20000258 	.word	0x20000258
 8001430:	2000055c 	.word	0x2000055c
 8001434:	0800cc30 	.word	0x0800cc30
 8001438:	20000564 	.word	0x20000564
 800143c:	48001000 	.word	0x48001000
 8001440:	2000056c 	.word	0x2000056c

08001444 <_send_print_done>:
	_PrinterReadyIn = ready;
}

//--- _send_print_done ----------------------------------------
static void _send_print_done(void)
{
 8001444:	b5b0      	push	{r4, r5, r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af02      	add	r7, sp, #8
	if (enc_fixSpeed() || _Tracking[_TrackOutIdx].prod.info&0x01)
 800144a:	f000 fa59 	bl	8001900 <enc_fixSpeed>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d10f      	bne.n	8001474 <_send_print_done+0x30>
 8001454:	4b33      	ldr	r3, [pc, #204]	@ (8001524 <_send_print_done+0xe0>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4933      	ldr	r1, [pc, #204]	@ (8001528 <_send_print_done+0xe4>)
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	440b      	add	r3, r1
 8001464:	791b      	ldrb	r3, [r3, #4]
 8001466:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800146a:	b2db      	uxtb	r3, r3
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d028      	beq.n	80014c6 <_send_print_done+0x82>
	{
		printf("PrintDone %d: PaceId[%d]=%d, ok=%d\n", _Status.pdCnt, _TrackOutIdx, _Tracking[_TrackOutIdx].prod.paceId, _Tracking[_TrackOutIdx].prod.info);
 8001474:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <_send_print_done+0xe8>)
 8001476:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001478:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <_send_print_done+0xe0>)
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	4b29      	ldr	r3, [pc, #164]	@ (8001524 <_send_print_done+0xe0>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4c29      	ldr	r4, [pc, #164]	@ (8001528 <_send_print_done+0xe4>)
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4423      	add	r3, r4
 800148c:	795b      	ldrb	r3, [r3, #5]
 800148e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001492:	b2db      	uxtb	r3, r3
 8001494:	461d      	mov	r5, r3
 8001496:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <_send_print_done+0xe0>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4c23      	ldr	r4, [pc, #140]	@ (8001528 <_send_print_done+0xe4>)
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4423      	add	r3, r4
 80014a6:	791b      	ldrb	r3, [r3, #4]
 80014a8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	462b      	mov	r3, r5
 80014b2:	4602      	mov	r2, r0
 80014b4:	481e      	ldr	r0, [pc, #120]	@ (8001530 <_send_print_done+0xec>)
 80014b6:	f007 fb55 	bl	8008b64 <iprintf>
		_Status.pdCnt++;
 80014ba:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <_send_print_done+0xe8>)
 80014bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014be:	3301      	adds	r3, #1
 80014c0:	4a1a      	ldr	r2, [pc, #104]	@ (800152c <_send_print_done+0xe8>)
 80014c2:	6393      	str	r3, [r2, #56]	@ 0x38
 80014c4:	e027      	b.n	8001516 <_send_print_done+0xd2>
	}
	else
	{
		printf("EmptyDone %d: PaceId[%d]=%d, ok=%d\n", _Status.emptyDoneCnt, _TrackOutIdx, _Tracking[_TrackOutIdx].prod.paceId, _Tracking[_TrackOutIdx].prod.info);
 80014c6:	4b19      	ldr	r3, [pc, #100]	@ (800152c <_send_print_done+0xe8>)
 80014c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014ca:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <_send_print_done+0xe0>)
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <_send_print_done+0xe0>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4c15      	ldr	r4, [pc, #84]	@ (8001528 <_send_print_done+0xe4>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4423      	add	r3, r4
 80014de:	795b      	ldrb	r3, [r3, #5]
 80014e0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	461d      	mov	r5, r3
 80014e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <_send_print_done+0xe0>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4c0e      	ldr	r4, [pc, #56]	@ (8001528 <_send_print_done+0xe4>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4423      	add	r3, r4
 80014f8:	791b      	ldrb	r3, [r3, #4]
 80014fa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	462b      	mov	r3, r5
 8001504:	4602      	mov	r2, r0
 8001506:	480b      	ldr	r0, [pc, #44]	@ (8001534 <_send_print_done+0xf0>)
 8001508:	f007 fb2c 	bl	8008b64 <iprintf>
		_Status.emptyDoneCnt++;
 800150c:	4b07      	ldr	r3, [pc, #28]	@ (800152c <_send_print_done+0xe8>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001510:	3301      	adds	r3, #1
 8001512:	4a06      	ldr	r2, [pc, #24]	@ (800152c <_send_print_done+0xe8>)
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	_PaceId = -1;
 8001516:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <_send_print_done+0xf4>)
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	601a      	str	r2, [r3, #0]
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	bdb0      	pop	{r4, r5, r7, pc}
 8001524:	2000055c 	.word	0x2000055c
 8001528:	20000258 	.word	0x20000258
 800152c:	20000208 	.word	0x20000208
 8001530:	0800cc6c 	.word	0x0800cc6c
 8001534:	0800cc90 	.word	0x0800cc90
 8001538:	20000560 	.word	0x20000560

0800153c <box_printGo>:

//--- box_printGo ----------------------
void box_printGo(void)
{
 800153c:	b598      	push	{r3, r4, r7, lr}
 800153e:	af00      	add	r7, sp, #0
//	printf("PrintGo ON %d\n",  _Ticks);
	_Status.paceId = _Tracking[_TrackOutIdx].prod.paceId;
 8001540:	4b3e      	ldr	r3, [pc, #248]	@ (800163c <box_printGo+0x100>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	493e      	ldr	r1, [pc, #248]	@ (8001640 <box_printGo+0x104>)
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	440b      	add	r3, r1
 8001550:	795b      	ldrb	r3, [r3, #5]
 8001552:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001556:	b2db      	uxtb	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	4b3a      	ldr	r3, [pc, #232]	@ (8001644 <box_printGo+0x108>)
 800155c:	621a      	str	r2, [r3, #32]
	_PaceId = _Tracking[_TrackOutIdx].prod.paceId;
 800155e:	4b37      	ldr	r3, [pc, #220]	@ (800163c <box_printGo+0x100>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	4937      	ldr	r1, [pc, #220]	@ (8001640 <box_printGo+0x104>)
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	440b      	add	r3, r1
 800156e:	795b      	ldrb	r3, [r3, #5]
 8001570:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001574:	b2db      	uxtb	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	4b33      	ldr	r3, [pc, #204]	@ (8001648 <box_printGo+0x10c>)
 800157a:	601a      	str	r2, [r3, #0]
	if (enc_fixSpeed() || _Tracking[_TrackOutIdx].prod.info&0x01)
 800157c:	f000 f9c0 	bl	8001900 <enc_fixSpeed>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10f      	bne.n	80015a6 <box_printGo+0x6a>
 8001586:	4b2d      	ldr	r3, [pc, #180]	@ (800163c <box_printGo+0x100>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	492d      	ldr	r1, [pc, #180]	@ (8001640 <box_printGo+0x104>)
 800158c:	4613      	mov	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	440b      	add	r3, r1
 8001596:	791b      	ldrb	r3, [r3, #4]
 8001598:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d01f      	beq.n	80015e6 <box_printGo+0xaa>
	{
		printf("PrintGo %d: PaceId[%d]=%d\n", _Status.pgCnt, _TrackOutIdx, _Tracking[_TrackOutIdx].prod.paceId);
 80015a6:	4b27      	ldr	r3, [pc, #156]	@ (8001644 <box_printGo+0x108>)
 80015a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015aa:	4b24      	ldr	r3, [pc, #144]	@ (800163c <box_printGo+0x100>)
 80015ac:	6818      	ldr	r0, [r3, #0]
 80015ae:	4b23      	ldr	r3, [pc, #140]	@ (800163c <box_printGo+0x100>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4c23      	ldr	r4, [pc, #140]	@ (8001640 <box_printGo+0x104>)
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4423      	add	r3, r4
 80015be:	795b      	ldrb	r3, [r3, #5]
 80015c0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	4602      	mov	r2, r0
 80015c8:	4820      	ldr	r0, [pc, #128]	@ (800164c <box_printGo+0x110>)
 80015ca:	f007 facb 	bl	8008b64 <iprintf>
		_Status.pgCnt++;
 80015ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001644 <box_printGo+0x108>)
 80015d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d2:	3301      	adds	r3, #1
 80015d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001644 <box_printGo+0x108>)
 80015d6:	6353      	str	r3, [r2, #52]	@ 0x34
		HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015de:	481c      	ldr	r0, [pc, #112]	@ (8001650 <box_printGo+0x114>)
 80015e0:	f001 feec 	bl	80033bc <HAL_GPIO_WritePin>
 80015e4:	e018      	b.n	8001618 <box_printGo+0xdc>
	}
	else
	{
		printf("EmptyGo %d: PaceId[%d]=%d\n", _Status.pgCnt, _TrackOutIdx, _Tracking[_TrackOutIdx].prod.paceId);
 80015e6:	4b17      	ldr	r3, [pc, #92]	@ (8001644 <box_printGo+0x108>)
 80015e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015ea:	4b14      	ldr	r3, [pc, #80]	@ (800163c <box_printGo+0x100>)
 80015ec:	6818      	ldr	r0, [r3, #0]
 80015ee:	4b13      	ldr	r3, [pc, #76]	@ (800163c <box_printGo+0x100>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4c13      	ldr	r4, [pc, #76]	@ (8001640 <box_printGo+0x104>)
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4423      	add	r3, r4
 80015fe:	795b      	ldrb	r3, [r3, #5]
 8001600:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4602      	mov	r2, r0
 8001608:	4812      	ldr	r0, [pc, #72]	@ (8001654 <box_printGo+0x118>)
 800160a:	f007 faab 	bl	8008b64 <iprintf>
		_Status.emptyGoCnt++;
 800160e:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <box_printGo+0x108>)
 8001610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001612:	3301      	adds	r3, #1
 8001614:	4a0b      	ldr	r2, [pc, #44]	@ (8001644 <box_printGo+0x108>)
 8001616:	62d3      	str	r3, [r2, #44]	@ 0x2c
	}
	if (_PrintDoneDelay) printf("ERROR: PringGo while still printing _PrintDoneDelay=%d\n",_PrintDoneDelay);
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <box_printGo+0x11c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <box_printGo+0xf0>
 8001620:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <box_printGo+0x11c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	480d      	ldr	r0, [pc, #52]	@ (800165c <box_printGo+0x120>)
 8001628:	f007 fa9c 	bl	8008b64 <iprintf>
	_PrintGoOffDelay = 10;
 800162c:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <box_printGo+0x124>)
 800162e:	220a      	movs	r2, #10
 8001630:	601a      	str	r2, [r3, #0]
	_PrintDoneDelay = 20;
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <box_printGo+0x11c>)
 8001634:	2214      	movs	r2, #20
 8001636:	601a      	str	r2, [r3, #0]
}
 8001638:	bf00      	nop
 800163a:	bd98      	pop	{r3, r4, r7, pc}
 800163c:	2000055c 	.word	0x2000055c
 8001640:	20000258 	.word	0x20000258
 8001644:	20000208 	.word	0x20000208
 8001648:	20000560 	.word	0x20000560
 800164c:	0800ccb4 	.word	0x0800ccb4
 8001650:	48001000 	.word	0x48001000
 8001654:	0800ccd0 	.word	0x0800ccd0
 8001658:	2000056c 	.word	0x2000056c
 800165c:	0800ccec 	.word	0x0800ccec
 8001660:	20000564 	.word	0x20000564

08001664 <box_send_status>:

//--- box_send_status ----------------------------------------
void box_send_status(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800166a:	af00      	add	r7, sp, #0
	printf("encOut Pos:     %d\n",    (int)_Status.enc.encOutPos);
	printf("PrintGo Cnt:    %d\n",    (int)_Status.pgCnt);
	printf("\n");
	 */
	char msg[512];
	_Status.test++;
 800166c:	4b0d      	ldr	r3, [pc, #52]	@ (80016a4 <box_send_status+0x40>)
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	3301      	adds	r3, #1
 8001672:	4a0c      	ldr	r2, [pc, #48]	@ (80016a4 <box_send_status+0x40>)
 8001674:	6153      	str	r3, [r2, #20]
		printf(&msg[start]);
		msg[start+l]=ch;
		start+=l;
	}
	*/
	printf("STATUS %s\n", bin2hex(msg, &_Status, sizeof(_Status)));
 8001676:	463b      	mov	r3, r7
 8001678:	223c      	movs	r2, #60	@ 0x3c
 800167a:	490a      	ldr	r1, [pc, #40]	@ (80016a4 <box_send_status+0x40>)
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fa33 	bl	8001ae8 <bin2hex>
 8001682:	4603      	mov	r3, r0
 8001684:	4619      	mov	r1, r3
 8001686:	4808      	ldr	r0, [pc, #32]	@ (80016a8 <box_send_status+0x44>)
 8001688:	f007 fa6c 	bl	8008b64 <iprintf>
	fflush(stdout);
 800168c:	4b07      	ldr	r3, [pc, #28]	@ (80016ac <box_send_status+0x48>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	4618      	mov	r0, r3
 8001694:	f007 f990 	bl	80089b8 <fflush>
}
 8001698:	bf00      	nop
 800169a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000208 	.word	0x20000208
 80016a8:	0800cd24 	.word	0x0800cd24
 80016ac:	2000002c 	.word	0x2000002c

080016b0 <enc_init>:

static void _set_speed(int32_t speed);

//--- enc_init ----------------------------------
void enc_init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	_Timer_clock_frequency = HAL_RCC_GetPCLK1Freq(); // Adjust based on your clock tree settings
 80016b4:	f003 fe70 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4a05      	ldr	r2, [pc, #20]	@ (80016d0 <enc_init+0x20>)
 80016bc:	6013      	str	r3, [r2, #0]
	_Prescaler=1;
 80016be:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <enc_init+0x24>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]
	_EncoderInPos = 0;
 80016c4:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <enc_init+0x28>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000574 	.word	0x20000574
 80016d4:	20000578 	.word	0x20000578
 80016d8:	20000584 	.word	0x20000584

080016dc <enc_in_irq>:

//--- enc_irq ------------------------
void enc_in_irq(TIM_HandleTypeDef *htim)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	int time=HAL_GetTick();
 80016e4:	f001 fb44 	bl	8002d70 <HAL_GetTick>
 80016e8:	4603      	mov	r3, r0
 80016ea:	617b      	str	r3, [r7, #20]
	int pos = _EncoderInPos;
 80016ec:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <enc_in_irq+0x90>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	613b      	str	r3, [r7, #16]
	_EncoderInPos = enc_get_pos();
 80016f2:	f000 fd5f 	bl	80021b4 <enc_get_pos>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4a1c      	ldr	r2, [pc, #112]	@ (800176c <enc_in_irq+0x90>)
 80016fa:	6013      	str	r3, [r2, #0]
	int dist=_EncoderInPos-pos;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <enc_in_irq+0x90>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	60fb      	str	r3, [r7, #12]
	int t=time-_EncInTime;
 8001706:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <enc_in_irq+0x94>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	60bb      	str	r3, [r7, #8]
	if (t==0) _EncStatus.encInSpeed=0;
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d103      	bne.n	800171e <enc_in_irq+0x42>
 8001716:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <enc_in_irq+0x98>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	e009      	b.n	8001732 <enc_in_irq+0x56>
	else _EncStatus.encInSpeed = (dist*1000)/t;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001724:	fb03 f202 	mul.w	r2, r3, r2
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	fb92 f3f3 	sdiv	r3, r2, r3
 800172e:	4a11      	ldr	r2, [pc, #68]	@ (8001774 <enc_in_irq+0x98>)
 8001730:	6013      	str	r3, [r2, #0]

	_EncInTime=time;
 8001732:	4a0f      	ldr	r2, [pc, #60]	@ (8001770 <enc_in_irq+0x94>)
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	6013      	str	r3, [r2, #0]

	//--- set output speed ------
	enc_set_speed((int)(_EncStatus.encInSpeed*_EncOut_incPM/_EncIn_incPM));
 8001738:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <enc_in_irq+0x98>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	ee07 3a90 	vmov	s15, r3
 8001740:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <enc_in_irq+0x9c>)
 8001746:	edd3 7a00 	vldr	s15, [r3]
 800174a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800174e:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <enc_in_irq+0xa0>)
 8001750:	ed93 7a00 	vldr	s14, [r3]
 8001754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001758:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800175c:	ee17 0a90 	vmov	r0, s15
 8001760:	f000 f89e 	bl	80018a0 <enc_set_speed>

//	if (!_Running)
//		enc_start();

//	printf("TRACE: Encoder In: pos=%d, speed=%d, time=%d\n", (int)_EncStatus.encInPos, (int)_EncStatus.encInSpeed, t);
}
 8001764:	bf00      	nop
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000584 	.word	0x20000584
 8001770:	20000590 	.word	0x20000590
 8001774:	2000057c 	.word	0x2000057c
 8001778:	2000000c 	.word	0x2000000c
 800177c:	20000008 	.word	0x20000008

08001780 <enc_tick_10ms>:

//--- enc_tick_10ms ---------------------------
void enc_tick_10ms(int ticks)
{
 8001780:	b5b0      	push	{r4, r5, r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	if (ticks-_EncOutTime>1000)
 8001788:	4b22      	ldr	r3, [pc, #136]	@ (8001814 <enc_tick_10ms+0x94>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001794:	dd39      	ble.n	800180a <enc_tick_10ms+0x8a>
	{
		float t=(float)(ticks-_EncOutTime);
 8001796:	4b1f      	ldr	r3, [pc, #124]	@ (8001814 <enc_tick_10ms+0x94>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a6:	edc7 7a03 	vstr	s15, [r7, #12]
		_EncStatus.encOutSpeed = (int32_t) (1000.0*_EncOutSpeedCnt/t/2);
 80017aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <enc_tick_10ms+0x98>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe feb8 	bl	8000524 <__aeabi_i2d>
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	4b18      	ldr	r3, [pc, #96]	@ (800181c <enc_tick_10ms+0x9c>)
 80017ba:	f7fe ff1d 	bl	80005f8 <__aeabi_dmul>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4614      	mov	r4, r2
 80017c4:	461d      	mov	r5, r3
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f7fe febe 	bl	8000548 <__aeabi_f2d>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4620      	mov	r0, r4
 80017d2:	4629      	mov	r1, r5
 80017d4:	f7ff f83a 	bl	800084c <__aeabi_ddiv>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017e8:	f7ff f830 	bl	800084c <__aeabi_ddiv>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7ff f9b0 	bl	8000b58 <__aeabi_d2iz>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4a09      	ldr	r2, [pc, #36]	@ (8001820 <enc_tick_10ms+0xa0>)
 80017fc:	6053      	str	r3, [r2, #4]
		_EncOutTime=ticks;
 80017fe:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <enc_tick_10ms+0x94>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6013      	str	r3, [r2, #0]
		_EncOutSpeedCnt=0;
 8001804:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <enc_tick_10ms+0x98>)
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
	}
}
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bdb0      	pop	{r4, r5, r7, pc}
 8001812:	bf00      	nop
 8001814:	200005a0 	.word	0x200005a0
 8001818:	200005a4 	.word	0x200005a4
 800181c:	408f4000 	.word	0x408f4000
 8001820:	2000057c 	.word	0x2000057c

08001824 <enc_get_status>:

//--- enc_get_status -------------------------------
void enc_get_status(SEZFB_EncStatus *pstatus)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	memcpy(pstatus, &_EncStatus, sizeof(_EncStatus));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4906      	ldr	r1, [pc, #24]	@ (8001848 <enc_get_status+0x24>)
 8001830:	461a      	mov	r2, r3
 8001832:	460b      	mov	r3, r1
 8001834:	cb03      	ldmia	r3!, {r0, r1}
 8001836:	6010      	str	r0, [r2, #0]
 8001838:	6051      	str	r1, [r2, #4]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	2000057c 	.word	0x2000057c

0800184c <enc_command>:

//--- enc_command ----------------------------------
void enc_command(const char *args)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
    int cnt=0;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]

   // Parse the command arguments for action type
  //  if (strstr(args, "start")) 		enc_start();
  //  else if (strstr(args, "stop"))	enc_stop();
  //  else
    if ((cnt=sscanf(args, "speed %d", &_FixedSpeed)))
 8001858:	4a0d      	ldr	r2, [pc, #52]	@ (8001890 <enc_command+0x44>)
 800185a:	490e      	ldr	r1, [pc, #56]	@ (8001894 <enc_command+0x48>)
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f007 fa11 	bl	8008c84 <siscanf>
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00b      	beq.n	8001882 <enc_command+0x36>
    {
    	printf("LOG: enc_command speed=%d Hz\n", _FixedSpeed);
 800186a:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <enc_command+0x44>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4619      	mov	r1, r3
 8001870:	4809      	ldr	r0, [pc, #36]	@ (8001898 <enc_command+0x4c>)
 8001872:	f007 f977 	bl	8008b64 <iprintf>
    	enc_set_speed(_FixedSpeed);
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <enc_command+0x44>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f810 	bl	80018a0 <enc_set_speed>
    }
    else
    {
        printf("Unknown command. Use 'encoder start', 'encoder stop', or 'encoder speed ...'\n");
    }
}
 8001880:	e002      	b.n	8001888 <enc_command+0x3c>
        printf("Unknown command. Use 'encoder start', 'encoder stop', or 'encoder speed ...'\n");
 8001882:	4806      	ldr	r0, [pc, #24]	@ (800189c <enc_command+0x50>)
 8001884:	f007 f9d6 	bl	8008c34 <puts>
}
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200005a8 	.word	0x200005a8
 8001894:	0800cd30 	.word	0x0800cd30
 8001898:	0800cd3c 	.word	0x0800cd3c
 800189c:	0800cd5c 	.word	0x0800cd5c

080018a0 <enc_set_speed>:

//--- enc_set_speed ---------------------------
void enc_set_speed(int32_t speed)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	if (_FixedSpeed) speed=_FixedSpeed;
 80018a8:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <enc_set_speed+0x4c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d002      	beq.n	80018b6 <enc_set_speed+0x16>
 80018b0:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <enc_set_speed+0x4c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	607b      	str	r3, [r7, #4]
	if (!_Init) _set_speed(speed);
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <enc_set_speed+0x50>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d103      	bne.n	80018c6 <enc_set_speed+0x26>
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f82a 	bl	8001918 <_set_speed>
	{
		_SpeedOutChange = TRUE;
		_SpeedOutSet = speed;
		printf("Encoder Speedchange=%d\n", speed);
	}
}
 80018c4:	e00e      	b.n	80018e4 <enc_set_speed+0x44>
	else if (speed!=_SpeedOutSet)
 80018c6:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <enc_set_speed+0x54>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d009      	beq.n	80018e4 <enc_set_speed+0x44>
		_SpeedOutChange = TRUE;
 80018d0:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <enc_set_speed+0x58>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
		_SpeedOutSet = speed;
 80018d6:	4a07      	ldr	r2, [pc, #28]	@ (80018f4 <enc_set_speed+0x54>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6013      	str	r3, [r2, #0]
		printf("Encoder Speedchange=%d\n", speed);
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4807      	ldr	r0, [pc, #28]	@ (80018fc <enc_set_speed+0x5c>)
 80018e0:	f007 f940 	bl	8008b64 <iprintf>
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200005a8 	.word	0x200005a8
 80018f0:	20000588 	.word	0x20000588
 80018f4:	20000598 	.word	0x20000598
 80018f8:	2000059c 	.word	0x2000059c
 80018fc:	0800cdac 	.word	0x0800cdac

08001900 <enc_fixSpeed>:

//--- enc_fixSpeed ----------------------------
int  enc_fixSpeed(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
	return _FixedSpeed;
 8001904:	4b03      	ldr	r3, [pc, #12]	@ (8001914 <enc_fixSpeed+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	200005a8 	.word	0x200005a8

08001918 <_set_speed>:

//--- _set_speed ------------------------------
static void _set_speed(int32_t speed)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	if (htim2.Instance)
 8001920:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <_set_speed+0x60>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d023      	beq.n	8001970 <_set_speed+0x58>
	{
		if (speed==0)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d106      	bne.n	800193c <_set_speed+0x24>
		{
			HAL_TIM_Base_Stop(&htim2);
 800192e:	4812      	ldr	r0, [pc, #72]	@ (8001978 <_set_speed+0x60>)
 8001930:	f003 ff9a 	bl	8005868 <HAL_TIM_Base_Stop>
			_Running = FALSE;
 8001934:	4b11      	ldr	r3, [pc, #68]	@ (800197c <_set_speed+0x64>)
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
				_Running = TRUE;
				HAL_TIM_Base_Start_IT(&htim2);
			}
		}
	}
}
 800193a:	e019      	b.n	8001970 <_set_speed+0x58>
			uint32_t period = ((_Timer_clock_frequency / (_Prescaler * speed)) / 2) - 1;
 800193c:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <_set_speed+0x68>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <_set_speed+0x6c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	fb01 f303 	mul.w	r3, r1, r3
 800194a:	fbb2 f3f3 	udiv	r3, r2, r3
 800194e:	085b      	lsrs	r3, r3, #1
 8001950:	3b01      	subs	r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
			TIM2->CNT = period;
 8001954:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6253      	str	r3, [r2, #36]	@ 0x24
			if (!_Running)
 800195c:	4b07      	ldr	r3, [pc, #28]	@ (800197c <_set_speed+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <_set_speed+0x58>
				_Running = TRUE;
 8001964:	4b05      	ldr	r3, [pc, #20]	@ (800197c <_set_speed+0x64>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 800196a:	4803      	ldr	r0, [pc, #12]	@ (8001978 <_set_speed+0x60>)
 800196c:	f003 ffa4 	bl	80058b8 <HAL_TIM_Base_Start_IT>
}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000600 	.word	0x20000600
 800197c:	2000058c 	.word	0x2000058c
 8001980:	20000574 	.word	0x20000574
 8001984:	20000578 	.word	0x20000578

08001988 <HAL_TIM_QUARTER_PulseFinishedCallback>:

//--- HAL_TIM_QUARTER_PulseFinishedCallback -------------------------------
void HAL_TIM_QUARTER_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  EZ_EncoderOutPos++;
 8001990:	4b1f      	ldr	r3, [pc, #124]	@ (8001a10 <HAL_TIM_QUARTER_PulseFinishedCallback+0x88>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3301      	adds	r3, #1
 8001996:	4a1e      	ldr	r2, [pc, #120]	@ (8001a10 <HAL_TIM_QUARTER_PulseFinishedCallback+0x88>)
 8001998:	6013      	str	r3, [r2, #0]
  _EncOutSpeedCnt++;
 800199a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a14 <HAL_TIM_QUARTER_PulseFinishedCallback+0x8c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001a14 <HAL_TIM_QUARTER_PulseFinishedCallback+0x8c>)
 80019a2:	6013      	str	r3, [r2, #0]
  switch(EZ_EncoderOutPos&0x03)
 80019a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <HAL_TIM_QUARTER_PulseFinishedCallback+0x88>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d81f      	bhi.n	80019f0 <HAL_TIM_QUARTER_PulseFinishedCallback+0x68>
 80019b0:	a201      	add	r2, pc, #4	@ (adr r2, 80019b8 <HAL_TIM_QUARTER_PulseFinishedCallback+0x30>)
 80019b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b6:	bf00      	nop
 80019b8:	080019c9 	.word	0x080019c9
 80019bc:	080019d5 	.word	0x080019d5
 80019c0:	080019dd 	.word	0x080019dd
 80019c4:	080019e9 	.word	0x080019e9
  {
  case 0: ENCODER_A_GPIO_Port->BRR  = ENCODER_A_Pin; break;
 80019c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80019d2:	e00d      	b.n	80019f0 <HAL_TIM_QUARTER_PulseFinishedCallback+0x68>
  case 1: ENCODER_B_GPIO_Port->BRR  = ENCODER_B_Pin; break;
 80019d4:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <HAL_TIM_QUARTER_PulseFinishedCallback+0x90>)
 80019d6:	2208      	movs	r2, #8
 80019d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80019da:	e009      	b.n	80019f0 <HAL_TIM_QUARTER_PulseFinishedCallback+0x68>
  case 2: ENCODER_A_GPIO_Port->BSRR = ENCODER_A_Pin; break;
 80019dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019e0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019e4:	619a      	str	r2, [r3, #24]
 80019e6:	e003      	b.n	80019f0 <HAL_TIM_QUARTER_PulseFinishedCallback+0x68>
  case 3: ENCODER_B_GPIO_Port->BSRR = ENCODER_B_Pin; break;
 80019e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <HAL_TIM_QUARTER_PulseFinishedCallback+0x90>)
 80019ea:	2208      	movs	r2, #8
 80019ec:	619a      	str	r2, [r3, #24]
 80019ee:	bf00      	nop
  }
  if (_SpeedOutChange)
 80019f0:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <HAL_TIM_QUARTER_PulseFinishedCallback+0x94>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d004      	beq.n	8001a02 <HAL_TIM_QUARTER_PulseFinishedCallback+0x7a>
	  _set_speed(_SpeedOutSet);
 80019f8:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <HAL_TIM_QUARTER_PulseFinishedCallback+0x98>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff8b 	bl	8001918 <_set_speed>
  _SpeedOutChange = FALSE;
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_TIM_QUARTER_PulseFinishedCallback+0x94>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000594 	.word	0x20000594
 8001a14:	200005a4 	.word	0x200005a4
 8001a18:	48000400 	.word	0x48000400
 8001a1c:	2000059c 	.word	0x2000059c
 8001a20:	20000598 	.word	0x20000598

08001a24 <enc_start>:

//--- enc_start ---------------------------
void enc_start(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	if (_FixedSpeed) printf("WARN: Encoder speed fixed to %d Hz\n", _FixedSpeed);
 8001a28:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <enc_start+0x24>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <enc_start+0x18>
 8001a30:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <enc_start+0x24>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	4805      	ldr	r0, [pc, #20]	@ (8001a4c <enc_start+0x28>)
 8001a38:	f007 f894 	bl	8008b64 <iprintf>

    // Apply the last configured settings and start PWM
	EZ_EncoderOutPos=0;
 8001a3c:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <enc_start+0x2c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200005a8 	.word	0x200005a8
 8001a4c:	0800cdc4 	.word	0x0800cdc4
 8001a50:	20000594 	.word	0x20000594

08001a54 <enc_stop>:

//--- enc_stop ---------------------------------
void enc_stop(void) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
    // Stop the PWM and ensure both outputs are low
	if (_Running)
 8001a58:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <enc_stop+0x38>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d012      	beq.n	8001a86 <enc_stop+0x32>
	{
		_SpeedOutSet=0;
 8001a60:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <enc_stop+0x3c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
		_SpeedOutChange=TRUE;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <enc_stop+0x40>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(ENCODER_A_GPIO_Port, ENCODER_A_Pin, GPIO_PIN_SET);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a76:	f001 fca1 	bl	80033bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENCODER_B_GPIO_Port, ENCODER_A_Pin, GPIO_PIN_SET);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a80:	4805      	ldr	r0, [pc, #20]	@ (8001a98 <enc_stop+0x44>)
 8001a82:	f001 fc9b 	bl	80033bc <HAL_GPIO_WritePin>
	}
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2000058c 	.word	0x2000058c
 8001a90:	20000598 	.word	0x20000598
 8001a94:	2000059c 	.word	0x2000059c
 8001a98:	48000400 	.word	0x48000400

08001a9c <strstart>:
#include <stdlib.h>
#include "ge_common.h"

//--- strstart ---------------------------------------
char *strstart(const char *str, const char *start)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
	int len=strlen(start);
 8001aa6:	6838      	ldr	r0, [r7, #0]
 8001aa8:	f7fe fbe2 	bl	8000270 <strlen>
 8001aac:	4603      	mov	r3, r0
 8001aae:	60fb      	str	r3, [r7, #12]
	if (!strncmp(str, start, len))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	6839      	ldr	r1, [r7, #0]
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f007 f9f0 	bl	8008e9c <strncmp>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10d      	bne.n	8001ade <strstart+0x42>
	{
		while (str[len]==' ') len++;
 8001ac2:	e002      	b.n	8001aca <strstart+0x2e>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	4413      	add	r3, r2
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b20      	cmp	r3, #32
 8001ad4:	d0f6      	beq.n	8001ac4 <strstart+0x28>
		return (char*)&str[len];
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	e000      	b.n	8001ae0 <strstart+0x44>
	}
	return 0;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <bin2hex>:

//--- bin2hex ------------------------------
char *bin2hex(char *str, void *data, int len)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
	UINT8 *src=(UINT8*)data;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	61fb      	str	r3, [r7, #28]
	char *dst = str;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	61bb      	str	r3, [r7, #24]
	dst+= sprintf(dst, "%03d ", len);
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4913      	ldr	r1, [pc, #76]	@ (8001b4c <bin2hex+0x64>)
 8001b00:	69b8      	ldr	r0, [r7, #24]
 8001b02:	f007 f89f 	bl	8008c44 <siprintf>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461a      	mov	r2, r3
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
	for(int i=0; i<len; i++, src++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e011      	b.n	8001b3a <bin2hex+0x52>
	{
		dst+=sprintf(dst, "%02x ", *src);
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	@ (8001b50 <bin2hex+0x68>)
 8001b1e:	69b8      	ldr	r0, [r7, #24]
 8001b20:	f007 f890 	bl	8008c44 <siprintf>
 8001b24:	4603      	mov	r3, r0
 8001b26:	461a      	mov	r2, r3
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
	for(int i=0; i<len; i++, src++)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3301      	adds	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	3301      	adds	r3, #1
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	dbe9      	blt.n	8001b16 <bin2hex+0x2e>
	}
	return str;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3720      	adds	r7, #32
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	0800cde8 	.word	0x0800cde8
 8001b50:	0800cdf0 	.word	0x0800cdf0

08001b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b5a:	f001 f8af 	bl	8002cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b5e:	f000 f85d 	bl	8001c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b62:	f000 fa57 	bl	8002014 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001b66:	f000 fa25 	bl	8001fb4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001b6a:	f000 f943 	bl	8001df4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001b6e:	f000 f8b5 	bl	8001cdc <MX_I2C1_Init>
  MX_TIM2_Init();
 8001b72:	f000 f8f3 	bl	8001d5c <MX_TIM2_Init>
  MX_TIM5_Init();
 8001b76:	f000 f997 	bl	8001ea8 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001b7a:	f000 f9e9 	bl	8001f50 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001b7e:	213c      	movs	r1, #60	@ 0x3c
 8001b80:	481f      	ldr	r0, [pc, #124]	@ (8001c00 <main+0xac>)
 8001b82:	f003 ffa7 	bl	8005ad4 <HAL_TIM_Encoder_Start>

  // Kick off asynchronous UART RCV
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&RxDataFERAG, 1);
 8001b86:	2201      	movs	r2, #1
 8001b88:	491e      	ldr	r1, [pc, #120]	@ (8001c04 <main+0xb0>)
 8001b8a:	481f      	ldr	r0, [pc, #124]	@ (8001c08 <main+0xb4>)
 8001b8c:	f004 fd40 	bl	8006610 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&RxDataNUC, 1);
 8001b90:	2201      	movs	r2, #1
 8001b92:	491e      	ldr	r1, [pc, #120]	@ (8001c0c <main+0xb8>)
 8001b94:	481e      	ldr	r0, [pc, #120]	@ (8001c10 <main+0xbc>)
 8001b96:	f004 fd3b 	bl	8006610 <HAL_UART_Receive_IT>

  term_init();
 8001b9a:	f000 ffc1 	bl	8002b20 <term_init>
  enc_init();
 8001b9e:	f7ff fd87 	bl	80016b0 <enc_init>
  box_init();
 8001ba2:	f7ff f955 	bl	8000e50 <box_init>

  power_nuc(TRUE);
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f000 fc52 	bl	8002450 <power_nuc>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	AD55936_init(&hi2c1, 0x10 << 1);
 8001bac:	2120      	movs	r1, #32
 8001bae:	4819      	ldr	r0, [pc, #100]	@ (8001c14 <main+0xc0>)
 8001bb0:	f7ff f8a0 	bl	8000cf4 <AD55936_init>
	int _ticks=0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	607b      	str	r3, [r7, #4]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		int ticks= HAL_GetTick();
 8001bb8:	f001 f8da 	bl	8002d70 <HAL_GetTick>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	603b      	str	r3, [r7, #0]

		while (ticks-_ticks>9)
 8001bc0:	e013      	b.n	8001bea <main+0x96>
		{
			_tick_10ms(ticks);
 8001bc2:	6838      	ldr	r0, [r7, #0]
 8001bc4:	f000 fb4a 	bl	800225c <_tick_10ms>
			_ticks=ticks;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	607b      	str	r3, [r7, #4]
			if (_powerDisplay && _ticks>_powerDisplay)
 8001bcc:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <main+0xc4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00a      	beq.n	8001bea <main+0x96>
 8001bd4:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <main+0xc4>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	dd05      	ble.n	8001bea <main+0x96>
			{
				_powerDisplay=0;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	@ (8001c18 <main+0xc4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
				power_display(TRUE);
 8001be4:	2001      	movs	r0, #1
 8001be6:	f000 fc4b 	bl	8002480 <power_display>
		while (ticks-_ticks>9)
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b09      	cmp	r3, #9
 8001bf2:	dce6      	bgt.n	8001bc2 <main+0x6e>
			}
		}
		box_idle();
 8001bf4:	f7ff f9da 	bl	8000fac <box_idle>
		term_idle();
 8001bf8:	f000 ffbe 	bl	8002b78 <term_idle>
	{
 8001bfc:	e7dc      	b.n	8001bb8 <main+0x64>
 8001bfe:	bf00      	nop
 8001c00:	20000698 	.word	0x20000698
 8001c04:	200007f5 	.word	0x200007f5
 8001c08:	200006e4 	.word	0x200006e4
 8001c0c:	200007f4 	.word	0x200007f4
 8001c10:	2000076c 	.word	0x2000076c
 8001c14:	200005ac 	.word	0x200005ac
 8001c18:	20000010 	.word	0x20000010

08001c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b09a      	sub	sp, #104	@ 0x68
 8001c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c22:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c26:	2228      	movs	r2, #40	@ 0x28
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f007 f92e 	bl	8008e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c40:	463b      	mov	r3, r7
 8001c42:	222c      	movs	r2, #44	@ 0x2c
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f007 f920 	bl	8008e8c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c56:	2300      	movs	r3, #0
 8001c58:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c5e:	2310      	movs	r3, #16
 8001c60:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c62:	2302      	movs	r3, #2
 8001c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c6a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001c6c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c70:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c72:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c76:	4618      	mov	r0, r3
 8001c78:	f002 f95c 	bl	8003f34 <HAL_RCC_OscConfig>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001c82:	f000 fca9 	bl	80025d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c86:	230f      	movs	r3, #15
 8001c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ca0:	2102      	movs	r1, #2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 f984 	bl	8004fb0 <HAL_RCC_ClockConfig>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001cae:	f000 fc93 	bl	80025d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8001cb2:	2325      	movs	r3, #37	@ 0x25
 8001cb4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f003 fbab 	bl	8005420 <HAL_RCCEx_PeriphCLKConfig>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001cd0:	f000 fc82 	bl	80025d8 <Error_Handler>
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	3768      	adds	r7, #104	@ 0x68
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d54 <MX_I2C1_Init+0x78>)
 8001ce4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d58 <MX_I2C1_Init+0x7c>)
 8001cea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001cec:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cfe:	4b14      	ldr	r3, [pc, #80]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d04:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d0a:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d16:	480e      	ldr	r0, [pc, #56]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001d18:	f001 fb68 	bl	80033ec <HAL_I2C_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d22:	f000 fc59 	bl	80025d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d26:	2100      	movs	r1, #0
 8001d28:	4809      	ldr	r0, [pc, #36]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001d2a:	f002 f86b 	bl	8003e04 <HAL_I2CEx_ConfigAnalogFilter>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d34:	f000 fc50 	bl	80025d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4805      	ldr	r0, [pc, #20]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001d3c:	f002 f8ad 	bl	8003e9a <HAL_I2CEx_ConfigDigitalFilter>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d46:	f000 fc47 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200005ac 	.word	0x200005ac
 8001d54:	40005400 	.word	0x40005400
 8001d58:	2000090e 	.word	0x2000090e

08001d5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
//	PWM for encoder output
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d62:	f107 0308 	add.w	r3, r7, #8
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d70:	463b      	mov	r3, r7
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d78:	4b1d      	ldr	r3, [pc, #116]	@ (8001df0 <MX_TIM2_Init+0x94>)
 8001d7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d80:	4b1b      	ldr	r3, [pc, #108]	@ (8001df0 <MX_TIM2_Init+0x94>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d86:	4b1a      	ldr	r3, [pc, #104]	@ (8001df0 <MX_TIM2_Init+0x94>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d8c:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <MX_TIM2_Init+0x94>)
 8001d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d94:	4b16      	ldr	r3, [pc, #88]	@ (8001df0 <MX_TIM2_Init+0x94>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <MX_TIM2_Init+0x94>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001da0:	4813      	ldr	r0, [pc, #76]	@ (8001df0 <MX_TIM2_Init+0x94>)
 8001da2:	f003 fcb1 	bl	8005708 <HAL_TIM_Base_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001dac:	f000 fc14 	bl	80025d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001db4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480c      	ldr	r0, [pc, #48]	@ (8001df0 <MX_TIM2_Init+0x94>)
 8001dbe:	f004 f81f 	bl	8005e00 <HAL_TIM_ConfigClockSource>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001dc8:	f000 fc06 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4805      	ldr	r0, [pc, #20]	@ (8001df0 <MX_TIM2_Init+0x94>)
 8001dda:	f004 fa5b 	bl	8006294 <HAL_TIMEx_MasterConfigSynchronization>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001de4:	f000 fbf8 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001de8:	bf00      	nop
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000600 	.word	0x20000600

08001df4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e08:	463b      	mov	r3, r7
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e10:	4b23      	ldr	r3, [pc, #140]	@ (8001ea0 <MX_TIM3_Init+0xac>)
 8001e12:	4a24      	ldr	r2, [pc, #144]	@ (8001ea4 <MX_TIM3_Init+0xb0>)
 8001e14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 8001e16:	4b22      	ldr	r3, [pc, #136]	@ (8001ea0 <MX_TIM3_Init+0xac>)
 8001e18:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001e1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001e1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ea0 <MX_TIM3_Init+0xac>)
 8001e20:	2210      	movs	r2, #16
 8001e22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001e24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea0 <MX_TIM3_Init+0xac>)
 8001e26:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001e2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea0 <MX_TIM3_Init+0xac>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e32:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea0 <MX_TIM3_Init+0xac>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e38:	4819      	ldr	r0, [pc, #100]	@ (8001ea0 <MX_TIM3_Init+0xac>)
 8001e3a:	f003 fc65 	bl	8005708 <HAL_TIM_Base_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001e44:	f000 fbc8 	bl	80025d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e4e:	f107 0308 	add.w	r3, r7, #8
 8001e52:	4619      	mov	r1, r3
 8001e54:	4812      	ldr	r0, [pc, #72]	@ (8001ea0 <MX_TIM3_Init+0xac>)
 8001e56:	f003 ffd3 	bl	8005e00 <HAL_TIM_ConfigClockSource>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e60:	f000 fbba 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e64:	2300      	movs	r3, #0
 8001e66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	4619      	mov	r1, r3
 8001e70:	480b      	ldr	r0, [pc, #44]	@ (8001ea0 <MX_TIM3_Init+0xac>)
 8001e72:	f004 fa0f 	bl	8006294 <HAL_TIMEx_MasterConfigSynchronization>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e7c:	f000 fbac 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK) {
 8001e80:	4807      	ldr	r0, [pc, #28]	@ (8001ea0 <MX_TIM3_Init+0xac>)
 8001e82:	f003 fd19 	bl	80058b8 <HAL_TIM_Base_Start_IT>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM3_Init+0x9c>
		Error_Handler();
 8001e8c:	f000 fba4 	bl	80025d8 <Error_Handler>
	}
	HAL_TIM_Base_Start(&htim3);
 8001e90:	4803      	ldr	r0, [pc, #12]	@ (8001ea0 <MX_TIM3_Init+0xac>)
 8001e92:	f003 fc89 	bl	80057a8 <HAL_TIM_Base_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000064c 	.word	0x2000064c
 8001ea4:	40000400 	.word	0x40000400

08001ea8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08c      	sub	sp, #48	@ 0x30
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001eae:	f107 030c 	add.w	r3, r7, #12
 8001eb2:	2224      	movs	r2, #36	@ 0x24
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f006 ffe8 	bl	8008e8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ec4:	4b20      	ldr	r3, [pc, #128]	@ (8001f48 <MX_TIM5_Init+0xa0>)
 8001ec6:	4a21      	ldr	r2, [pc, #132]	@ (8001f4c <MX_TIM5_Init+0xa4>)
 8001ec8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001eca:	4b1f      	ldr	r3, [pc, #124]	@ (8001f48 <MX_TIM5_Init+0xa0>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f48 <MX_TIM5_Init+0xa0>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f48 <MX_TIM5_Init+0xa0>)
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8001edc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ede:	4b1a      	ldr	r3, [pc, #104]	@ (8001f48 <MX_TIM5_Init+0xa0>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ee4:	4b18      	ldr	r3, [pc, #96]	@ (8001f48 <MX_TIM5_Init+0xa0>)
 8001ee6:	2280      	movs	r2, #128	@ 0x80
 8001ee8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001eea:	2303      	movs	r3, #3
 8001eec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001efa:	230a      	movs	r3, #10
 8001efc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f02:	2301      	movs	r3, #1
 8001f04:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001f0a:	230a      	movs	r3, #10
 8001f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001f0e:	f107 030c 	add.w	r3, r7, #12
 8001f12:	4619      	mov	r1, r3
 8001f14:	480c      	ldr	r0, [pc, #48]	@ (8001f48 <MX_TIM5_Init+0xa0>)
 8001f16:	f003 fd37 	bl	8005988 <HAL_TIM_Encoder_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001f20:	f000 fb5a 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f24:	2300      	movs	r3, #0
 8001f26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4805      	ldr	r0, [pc, #20]	@ (8001f48 <MX_TIM5_Init+0xa0>)
 8001f32:	f004 f9af 	bl	8006294 <HAL_TIMEx_MasterConfigSynchronization>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001f3c:	f000 fb4c 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f40:	bf00      	nop
 8001f42:	3730      	adds	r7, #48	@ 0x30
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000698 	.word	0x20000698
 8001f4c:	40000c00 	.word	0x40000c00

08001f50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f54:	4b15      	ldr	r3, [pc, #84]	@ (8001fac <MX_USART1_UART_Init+0x5c>)
 8001f56:	4a16      	ldr	r2, [pc, #88]	@ (8001fb0 <MX_USART1_UART_Init+0x60>)
 8001f58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001f5a:	4b14      	ldr	r3, [pc, #80]	@ (8001fac <MX_USART1_UART_Init+0x5c>)
 8001f5c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001f60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001f62:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <MX_USART1_UART_Init+0x5c>)
 8001f64:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f68:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <MX_USART1_UART_Init+0x5c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001f70:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <MX_USART1_UART_Init+0x5c>)
 8001f72:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001f76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <MX_USART1_UART_Init+0x5c>)
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <MX_USART1_UART_Init+0x5c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f84:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <MX_USART1_UART_Init+0x5c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <MX_USART1_UART_Init+0x5c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <MX_USART1_UART_Init+0x5c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	@ (8001fac <MX_USART1_UART_Init+0x5c>)
 8001f98:	f004 fa04 	bl	80063a4 <HAL_UART_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001fa2:	f000 fb19 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200006e4 	.word	0x200006e4
 8001fb0:	40013800 	.word	0x40013800

08001fb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fb8:	4b14      	ldr	r3, [pc, #80]	@ (800200c <MX_USART3_UART_Init+0x58>)
 8001fba:	4a15      	ldr	r2, [pc, #84]	@ (8002010 <MX_USART3_UART_Init+0x5c>)
 8001fbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fbe:	4b13      	ldr	r3, [pc, #76]	@ (800200c <MX_USART3_UART_Init+0x58>)
 8001fc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc6:	4b11      	ldr	r3, [pc, #68]	@ (800200c <MX_USART3_UART_Init+0x58>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <MX_USART3_UART_Init+0x58>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <MX_USART3_UART_Init+0x58>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <MX_USART3_UART_Init+0x58>)
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <MX_USART3_UART_Init+0x58>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	4b09      	ldr	r3, [pc, #36]	@ (800200c <MX_USART3_UART_Init+0x58>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fea:	4b08      	ldr	r3, [pc, #32]	@ (800200c <MX_USART3_UART_Init+0x58>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	@ (800200c <MX_USART3_UART_Init+0x58>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ff6:	4805      	ldr	r0, [pc, #20]	@ (800200c <MX_USART3_UART_Init+0x58>)
 8001ff8:	f004 f9d4 	bl	80063a4 <HAL_UART_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002002:	f000 fae9 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	2000076c 	.word	0x2000076c
 8002010:	40004800 	.word	0x40004800

08002014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	@ 0x28
 8002018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
 8002028:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800202a:	4b50      	ldr	r3, [pc, #320]	@ (800216c <MX_GPIO_Init+0x158>)
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	4a4f      	ldr	r2, [pc, #316]	@ (800216c <MX_GPIO_Init+0x158>)
 8002030:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002034:	6153      	str	r3, [r2, #20]
 8002036:	4b4d      	ldr	r3, [pc, #308]	@ (800216c <MX_GPIO_Init+0x158>)
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002042:	4b4a      	ldr	r3, [pc, #296]	@ (800216c <MX_GPIO_Init+0x158>)
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	4a49      	ldr	r2, [pc, #292]	@ (800216c <MX_GPIO_Init+0x158>)
 8002048:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800204c:	6153      	str	r3, [r2, #20]
 800204e:	4b47      	ldr	r3, [pc, #284]	@ (800216c <MX_GPIO_Init+0x158>)
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800205a:	4b44      	ldr	r3, [pc, #272]	@ (800216c <MX_GPIO_Init+0x158>)
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	4a43      	ldr	r2, [pc, #268]	@ (800216c <MX_GPIO_Init+0x158>)
 8002060:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002064:	6153      	str	r3, [r2, #20]
 8002066:	4b41      	ldr	r3, [pc, #260]	@ (800216c <MX_GPIO_Init+0x158>)
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	4b3e      	ldr	r3, [pc, #248]	@ (800216c <MX_GPIO_Init+0x158>)
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	4a3d      	ldr	r2, [pc, #244]	@ (800216c <MX_GPIO_Init+0x158>)
 8002078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800207c:	6153      	str	r3, [r2, #20]
 800207e:	4b3b      	ldr	r3, [pc, #236]	@ (800216c <MX_GPIO_Init+0x158>)
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 800208a:	2200      	movs	r2, #0
 800208c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002090:	4837      	ldr	r0, [pc, #220]	@ (8002170 <MX_GPIO_Init+0x15c>)
 8002092:	f001 f993 	bl	80033bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, NUC_PWR_EN_Pin|DISPLAY_PWR_EN_Pin, GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	21c0      	movs	r1, #192	@ 0xc0
 800209a:	4836      	ldr	r0, [pc, #216]	@ (8002174 <MX_GPIO_Init+0x160>)
 800209c:	f001 f98e 	bl	80033bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER_A_GPIO_Port, ENCODER_A_Pin, GPIO_PIN_SET);
 80020a0:	2201      	movs	r2, #1
 80020a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020aa:	f001 f987 	bl	80033bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER_B_GPIO_Port, ENCODER_B_Pin, GPIO_PIN_SET);
 80020ae:	2201      	movs	r2, #1
 80020b0:	2108      	movs	r1, #8
 80020b2:	4831      	ldr	r0, [pc, #196]	@ (8002178 <MX_GPIO_Init+0x164>)
 80020b4:	f001 f982 	bl	80033bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIP_5_Pin DIP_4_Pin DIP_3_Pin DIP_2_Pin
                           DIP_1_Pin DIP_0_Pin */
  GPIO_InitStruct.Pin = DIP_5_Pin|DIP_4_Pin|DIP_3_Pin|DIP_2_Pin
 80020b8:	f44f 73be 	mov.w	r3, #380	@ 0x17c
 80020bc:	617b      	str	r3, [r7, #20]
                          |DIP_1_Pin|DIP_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c6:	f107 0314 	add.w	r3, r7, #20
 80020ca:	4619      	mov	r1, r3
 80020cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020d0:	f000 ffe2 	bl	8003098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PRINT_GO_Pin */
  GPIO_InitStruct.Pin = PRINT_GO_Pin;
 80020d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020da:	2301      	movs	r3, #1
 80020dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PRINT_GO_GPIO_Port, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	4820      	ldr	r0, [pc, #128]	@ (8002170 <MX_GPIO_Init+0x15c>)
 80020ee:	f000 ffd3 	bl	8003098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PRINT_DONE_Pin */
  GPIO_InitStruct.Pin = PRINT_DONE_Pin;
 80020f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PRINT_DONE_GPIO_Port, &GPIO_InitStruct);
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	4619      	mov	r1, r3
 8002106:	481a      	ldr	r0, [pc, #104]	@ (8002170 <MX_GPIO_Init+0x15c>)
 8002108:	f000 ffc6 	bl	8003098 <HAL_GPIO_Init>

  /*Configure GPIO pins : NUC_PWR_EN_Pin DISPLAY_PWR_EN_Pin */
  GPIO_InitStruct.Pin = NUC_PWR_EN_Pin|DISPLAY_PWR_EN_Pin;
 800210c:	23c0      	movs	r3, #192	@ 0xc0
 800210e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002110:	2301      	movs	r3, #1
 8002112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	4619      	mov	r1, r3
 8002122:	4814      	ldr	r0, [pc, #80]	@ (8002174 <MX_GPIO_Init+0x160>)
 8002124:	f000 ffb8 	bl	8003098 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_A_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin;
 8002128:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800212c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212e:	2301      	movs	r3, #1
 8002130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002136:	2303      	movs	r3, #3
 8002138:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	4619      	mov	r1, r3
 8002140:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002144:	f000 ffa8 	bl	8003098 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_B_Pin;
 8002148:	2308      	movs	r3, #8
 800214a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214c:	2301      	movs	r3, #1
 800214e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002154:	2303      	movs	r3, #3
 8002156:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	4619      	mov	r1, r3
 800215e:	4806      	ldr	r0, [pc, #24]	@ (8002178 <MX_GPIO_Init+0x164>)
 8002160:	f000 ff9a 	bl	8003098 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002164:	bf00      	nop
 8002166:	3728      	adds	r7, #40	@ 0x28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	48001000 	.word	0x48001000
 8002174:	48001400 	.word	0x48001400
 8002178:	48000400 	.word	0x48000400

0800217c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//--- HAL_TIM_PeriodElapsedCallback -------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
	if (htim==&htim3) enc_in_irq(htim);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a09      	ldr	r2, [pc, #36]	@ (80021ac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d103      	bne.n	8002194 <HAL_TIM_PeriodElapsedCallback+0x18>
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff faa5 	bl	80016dc <enc_in_irq>
	else if (htim==&htim2) HAL_TIM_QUARTER_PulseFinishedCallback(htim);
}
 8002192:	e006      	b.n	80021a2 <HAL_TIM_PeriodElapsedCallback+0x26>
	else if (htim==&htim2) HAL_TIM_QUARTER_PulseFinishedCallback(htim);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a06      	ldr	r2, [pc, #24]	@ (80021b0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d102      	bne.n	80021a2 <HAL_TIM_PeriodElapsedCallback+0x26>
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff fbf3 	bl	8001988 <HAL_TIM_QUARTER_PulseFinishedCallback>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	2000064c 	.word	0x2000064c
 80021b0:	20000600 	.word	0x20000600

080021b4 <enc_get_pos>:

//--- enc_get_pos -------------------------------------
int32_t	enc_get_pos(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5);
 80021b8:	4b03      	ldr	r3, [pc, #12]	@ (80021c8 <enc_get_pos+0x14>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	20000698 	.word	0x20000698

080021cc <HAL_UART_RxCpltCallback>:

// UART RX Interrupt function override
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a11      	ldr	r2, [pc, #68]	@ (8002220 <HAL_UART_RxCpltCallback+0x54>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d10b      	bne.n	80021f6 <HAL_UART_RxCpltCallback+0x2a>
	{
		box_handle_ferag_char(RxDataFERAG);
 80021de:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <HAL_UART_RxCpltCallback+0x58>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe ffe9 	bl	80011bc <box_handle_ferag_char>
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&RxDataFERAG, 1);
 80021ea:	2201      	movs	r2, #1
 80021ec:	490d      	ldr	r1, [pc, #52]	@ (8002224 <HAL_UART_RxCpltCallback+0x58>)
 80021ee:	480e      	ldr	r0, [pc, #56]	@ (8002228 <HAL_UART_RxCpltCallback+0x5c>)
 80021f0:	f004 fa0e 	bl	8006610 <HAL_UART_Receive_IT>
	else if (huart->Instance == USART3)
	{
		term_handle_char(RxDataNUC);
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&RxDataNUC, 1);
	}
}
 80021f4:	e00f      	b.n	8002216 <HAL_UART_RxCpltCallback+0x4a>
	else if (huart->Instance == USART3)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a0c      	ldr	r2, [pc, #48]	@ (800222c <HAL_UART_RxCpltCallback+0x60>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d10a      	bne.n	8002216 <HAL_UART_RxCpltCallback+0x4a>
		term_handle_char(RxDataNUC);
 8002200:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <HAL_UART_RxCpltCallback+0x64>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fc96 	bl	8002b38 <term_handle_char>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&RxDataNUC, 1);
 800220c:	2201      	movs	r2, #1
 800220e:	4908      	ldr	r1, [pc, #32]	@ (8002230 <HAL_UART_RxCpltCallback+0x64>)
 8002210:	4808      	ldr	r0, [pc, #32]	@ (8002234 <HAL_UART_RxCpltCallback+0x68>)
 8002212:	f004 f9fd 	bl	8006610 <HAL_UART_Receive_IT>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40013800 	.word	0x40013800
 8002224:	200007f5 	.word	0x200007f5
 8002228:	200006e4 	.word	0x200006e4
 800222c:	40004800 	.word	0x40004800
 8002230:	200007f4 	.word	0x200007f4
 8002234:	2000076c 	.word	0x2000076c

08002238 <ferag_send_char>:

//--- ferag_send_char -----------------------
void ferag_send_char(char data)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 8002242:	1df9      	adds	r1, r7, #7
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
 8002248:	2201      	movs	r2, #1
 800224a:	4803      	ldr	r0, [pc, #12]	@ (8002258 <ferag_send_char+0x20>)
 800224c:	f004 f8f8 	bl	8006440 <HAL_UART_Transmit>
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	200006e4 	.word	0x200006e4

0800225c <_tick_10ms>:

//--- _tick_10ms ---------------------
static void _tick_10ms(int ticks)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	box_tick_10ms(ticks);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7fe fea9 	bl	8000fbc <box_tick_10ms>
	enc_tick_10ms(ticks);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff fa88 	bl	8001780 <enc_tick_10ms>
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <adc_get_value>:

//--- adc_get_value --------------------------
float adc_get_value(int no, float factor)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	ed87 0a00 	vstr	s0, [r7]
	uint16_t val;
	AD5593R_ReadADC(&hi2c1, 0x10 << 1, no, &val);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	b2da      	uxtb	r2, r3
 8002288:	f107 030e 	add.w	r3, r7, #14
 800228c:	2120      	movs	r1, #32
 800228e:	480b      	ldr	r0, [pc, #44]	@ (80022bc <adc_get_value+0x44>)
 8002290:	f7fe fd7b 	bl	8000d8a <AD5593R_ReadADC>
	return ((float)val * factor) / 4095.0;
 8002294:	89fb      	ldrh	r3, [r7, #14]
 8002296:	ee07 3a90 	vmov	s15, r3
 800229a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800229e:	edd7 7a00 	vldr	s15, [r7]
 80022a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80022c0 <adc_get_value+0x48>
 80022aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022ae:	eef0 7a66 	vmov.f32	s15, s13
}
 80022b2:	eeb0 0a67 	vmov.f32	s0, s15
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	200005ac 	.word	0x200005ac
 80022c0:	457ff000 	.word	0x457ff000

080022c4 <adc_get_temp>:

//--- adc_get_temp --------------------------------------
float adc_get_temp(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
    const float ADC_25 = 819.0; // ADC value at 25 degrees Celsius
 80022ca:	4b10      	ldr	r3, [pc, #64]	@ (800230c <adc_get_temp+0x48>)
 80022cc:	60fb      	str	r3, [r7, #12]
    const float SLOPE = 2.654; // ADC counts per degree Celsius
 80022ce:	4b10      	ldr	r3, [pc, #64]	@ (8002310 <adc_get_temp+0x4c>)
 80022d0:	60bb      	str	r3, [r7, #8]
	uint16_t val;
	AD5593R_ReadADC(&hi2c1, 0x10 << 1, 8, &val);
 80022d2:	1dbb      	adds	r3, r7, #6
 80022d4:	2208      	movs	r2, #8
 80022d6:	2120      	movs	r1, #32
 80022d8:	480e      	ldr	r0, [pc, #56]	@ (8002314 <adc_get_temp+0x50>)
 80022da:	f7fe fd56 	bl	8000d8a <AD5593R_ReadADC>
    return 25.0 + ((float)val - ADC_25) / SLOPE;
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	ee07 3a90 	vmov	s15, r3
 80022e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80022ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80022f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80022fc:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8002300:	eeb0 0a67 	vmov.f32	s0, s15
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	444cc000 	.word	0x444cc000
 8002310:	4029db23 	.word	0x4029db23
 8002314:	200005ac 	.word	0x200005ac

08002318 <adc_get_revision>:

//--- adc_get_revision ------------------------------------
uint8_t adc_get_revision(float val)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	ed87 0a01 	vstr	s0, [r7, #4]
	const float baseVoltage = 0.075f; // Base voltage (0.1V - 0.025V)
 8002322:	4b1e      	ldr	r3, [pc, #120]	@ (800239c <adc_get_revision+0x84>)
 8002324:	617b      	str	r3, [r7, #20]
    const float increment = 0.1f; // Voltage increment per revision
 8002326:	4b1e      	ldr	r3, [pc, #120]	@ (80023a0 <adc_get_revision+0x88>)
 8002328:	613b      	str	r3, [r7, #16]
    const float maxValidVoltage = 26.0f; // Example: max expected voltage, adjust based on your last revision
 800232a:	4b1e      	ldr	r3, [pc, #120]	@ (80023a4 <adc_get_revision+0x8c>)
 800232c:	60fb      	str	r3, [r7, #12]

    if (val < baseVoltage || val > maxValidVoltage) return 0; // Invalid voltage
 800232e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002332:	edd7 7a05 	vldr	s15, [r7, #20]
 8002336:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233e:	d408      	bmi.n	8002352 <adc_get_revision+0x3a>
 8002340:	ed97 7a01 	vldr	s14, [r7, #4]
 8002344:	edd7 7a03 	vldr	s15, [r7, #12]
 8002348:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002350:	dd01      	ble.n	8002356 <adc_get_revision+0x3e>
 8002352:	2300      	movs	r3, #0
 8002354:	e01d      	b.n	8002392 <adc_get_revision+0x7a>

    return (uint8_t)floor((val - baseVoltage) / increment) + 1;
 8002356:	ed97 7a01 	vldr	s14, [r7, #4]
 800235a:	edd7 7a05 	vldr	s15, [r7, #20]
 800235e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002362:	edd7 7a04 	vldr	s15, [r7, #16]
 8002366:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800236a:	ee16 0a90 	vmov	r0, s13
 800236e:	f7fe f8eb 	bl	8000548 <__aeabi_f2d>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	ec43 2b10 	vmov	d0, r2, r3
 800237a:	f00a fba1 	bl	800cac0 <floor>
 800237e:	ec53 2b10 	vmov	r2, r3, d0
 8002382:	4610      	mov	r0, r2
 8002384:	4619      	mov	r1, r3
 8002386:	f7fe fc0f 	bl	8000ba8 <__aeabi_d2uiz>
 800238a:	4603      	mov	r3, r0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	3301      	adds	r3, #1
 8002390:	b2db      	uxtb	r3, r3
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	3d99999a 	.word	0x3d99999a
 80023a0:	3dcccccd 	.word	0x3dcccccd
 80023a4:	41d00000 	.word	0x41d00000

080023a8 <gpio_get_dipswitches>:

//--- gpio_get_dipswitches -------------------------------
uint8_t gpio_get_dipswitches(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
    uint8_t dipswitches = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	71fb      	strb	r3, [r7, #7]

    if (HAL_GPIO_ReadPin(DIP_0_GPIO_Port, DIP_0_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 0;
 80023b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ba:	f000 ffe7 	bl	800338c <HAL_GPIO_ReadPin>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d103      	bne.n	80023cc <gpio_get_dipswitches+0x24>
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_1_GPIO_Port, DIP_1_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 1;
 80023cc:	2140      	movs	r1, #64	@ 0x40
 80023ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023d2:	f000 ffdb 	bl	800338c <HAL_GPIO_ReadPin>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d103      	bne.n	80023e4 <gpio_get_dipswitches+0x3c>
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	f043 0302 	orr.w	r3, r3, #2
 80023e2:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_2_GPIO_Port, DIP_2_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 2;
 80023e4:	2120      	movs	r1, #32
 80023e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ea:	f000 ffcf 	bl	800338c <HAL_GPIO_ReadPin>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d103      	bne.n	80023fc <gpio_get_dipswitches+0x54>
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_3_GPIO_Port, DIP_3_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 3;
 80023fc:	2110      	movs	r1, #16
 80023fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002402:	f000 ffc3 	bl	800338c <HAL_GPIO_ReadPin>
 8002406:	4603      	mov	r3, r0
 8002408:	2b01      	cmp	r3, #1
 800240a:	d103      	bne.n	8002414 <gpio_get_dipswitches+0x6c>
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	f043 0308 	orr.w	r3, r3, #8
 8002412:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_4_GPIO_Port, DIP_4_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 4;
 8002414:	2108      	movs	r1, #8
 8002416:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800241a:	f000 ffb7 	bl	800338c <HAL_GPIO_ReadPin>
 800241e:	4603      	mov	r3, r0
 8002420:	2b01      	cmp	r3, #1
 8002422:	d103      	bne.n	800242c <gpio_get_dipswitches+0x84>
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	f043 0310 	orr.w	r3, r3, #16
 800242a:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_5_GPIO_Port, DIP_5_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 5;
 800242c:	2104      	movs	r1, #4
 800242e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002432:	f000 ffab 	bl	800338c <HAL_GPIO_ReadPin>
 8002436:	4603      	mov	r3, r0
 8002438:	2b01      	cmp	r3, #1
 800243a:	d103      	bne.n	8002444 <gpio_get_dipswitches+0x9c>
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	f043 0320 	orr.w	r3, r3, #32
 8002442:	71fb      	strb	r3, [r7, #7]

    return dipswitches;
 8002444:	79fb      	ldrb	r3, [r7, #7]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <power_nuc>:

//--- power_nuc -----------------------------
void    power_nuc(int on)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	if (on) HAL_GPIO_WritePin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin, GPIO_PIN_SET);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d005      	beq.n	800246a <power_nuc+0x1a>
 800245e:	2201      	movs	r2, #1
 8002460:	2140      	movs	r1, #64	@ 0x40
 8002462:	4806      	ldr	r0, [pc, #24]	@ (800247c <power_nuc+0x2c>)
 8002464:	f000 ffaa 	bl	80033bc <HAL_GPIO_WritePin>
	else 	HAL_GPIO_WritePin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin, GPIO_PIN_RESET);
}
 8002468:	e004      	b.n	8002474 <power_nuc+0x24>
	else 	HAL_GPIO_WritePin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin, GPIO_PIN_RESET);
 800246a:	2200      	movs	r2, #0
 800246c:	2140      	movs	r1, #64	@ 0x40
 800246e:	4803      	ldr	r0, [pc, #12]	@ (800247c <power_nuc+0x2c>)
 8002470:	f000 ffa4 	bl	80033bc <HAL_GPIO_WritePin>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	48001400 	.word	0x48001400

08002480 <power_display>:

//--- power_display -------------------------
void    power_display(int on)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	if (on) HAL_GPIO_WritePin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin, GPIO_PIN_SET);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <power_display+0x1a>
 800248e:	2201      	movs	r2, #1
 8002490:	2180      	movs	r1, #128	@ 0x80
 8002492:	4806      	ldr	r0, [pc, #24]	@ (80024ac <power_display+0x2c>)
 8002494:	f000 ff92 	bl	80033bc <HAL_GPIO_WritePin>
	else 	HAL_GPIO_WritePin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin, GPIO_PIN_RESET);
}
 8002498:	e004      	b.n	80024a4 <power_display+0x24>
	else 	HAL_GPIO_WritePin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin, GPIO_PIN_RESET);
 800249a:	2200      	movs	r2, #0
 800249c:	2180      	movs	r1, #128	@ 0x80
 800249e:	4803      	ldr	r0, [pc, #12]	@ (80024ac <power_display+0x2c>)
 80024a0:	f000 ff8c 	bl	80033bc <HAL_GPIO_WritePin>
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	48001400 	.word	0x48001400

080024b0 <_nuc_send_next>:

void _nuc_send_next()
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
	if (_NUC_InIdx!=_NUC_StartIdx && !_NUC_Busy)
 80024b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002530 <_nuc_send_next+0x80>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002534 <_nuc_send_next+0x84>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d031      	beq.n	8002526 <_nuc_send_next+0x76>
 80024c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002538 <_nuc_send_next+0x88>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d12d      	bne.n	8002526 <_nuc_send_next+0x76>
	{
		int time=HAL_GetTick();
 80024ca:	f000 fc51 	bl	8002d70 <HAL_GetTick>
 80024ce:	4603      	mov	r3, r0
 80024d0:	607b      	str	r3, [r7, #4]
		_NUC_Busy = TRUE;
 80024d2:	4b19      	ldr	r3, [pc, #100]	@ (8002538 <_nuc_send_next+0x88>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, TxDataNuc[_NUC_StartIdx], TxDataLenNuc[_NUC_StartIdx]); // NUC
 80024d8:	4b16      	ldr	r3, [pc, #88]	@ (8002534 <_nuc_send_next+0x84>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	025b      	lsls	r3, r3, #9
 80024de:	4a17      	ldr	r2, [pc, #92]	@ (800253c <_nuc_send_next+0x8c>)
 80024e0:	1899      	adds	r1, r3, r2
 80024e2:	4b14      	ldr	r3, [pc, #80]	@ (8002534 <_nuc_send_next+0x84>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a16      	ldr	r2, [pc, #88]	@ (8002540 <_nuc_send_next+0x90>)
 80024e8:	5cd3      	ldrb	r3, [r2, r3]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	461a      	mov	r2, r3
 80024ee:	4815      	ldr	r0, [pc, #84]	@ (8002544 <_nuc_send_next+0x94>)
 80024f0:	f004 f830 	bl	8006554 <HAL_UART_Transmit_IT>
		_NUC_StartIdx = (_NUC_StartIdx+1) % NUC_FIFO_CNT;
 80024f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002534 <_nuc_send_next+0x84>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3301      	adds	r3, #1
 80024fa:	425a      	negs	r2, r3
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	f002 0203 	and.w	r2, r2, #3
 8002504:	bf58      	it	pl
 8002506:	4253      	negpl	r3, r2
 8002508:	4a0a      	ldr	r2, [pc, #40]	@ (8002534 <_nuc_send_next+0x84>)
 800250a:	6013      	str	r3, [r2, #0]
	    time=HAL_GetTick()-time;
 800250c:	f000 fc30 	bl	8002d70 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	607b      	str	r3, [r7, #4]
	    if (time>1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b01      	cmp	r3, #1
 800251c:	dd03      	ble.n	8002526 <_nuc_send_next+0x76>
	    	printf("WARN: UART send time=%d\n", time);
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4809      	ldr	r0, [pc, #36]	@ (8002548 <_nuc_send_next+0x98>)
 8002522:	f006 fb1f 	bl	8008b64 <iprintf>
	}
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000ffc 	.word	0x20000ffc
 8002534:	20001000 	.word	0x20001000
 8002538:	20001004 	.word	0x20001004
 800253c:	200007f8 	.word	0x200007f8
 8002540:	20000ff8 	.word	0x20000ff8
 8002544:	2000076c 	.word	0x2000076c
 8002548:	0800ce00 	.word	0x0800ce00

0800254c <HAL_UART_TxCpltCallback>:

//--- HAL_UART_TxCpltCallback ---------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
	_NUC_Busy = FALSE;
 8002554:	4b04      	ldr	r3, [pc, #16]	@ (8002568 <HAL_UART_TxCpltCallback+0x1c>)
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
	_nuc_send_next();
 800255a:	f7ff ffa9 	bl	80024b0 <_nuc_send_next>
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20001004 	.word	0x20001004

0800256c <_write>:

//--- WRITE_PROTOTYPE ----------------------------------------------------
// Retarget stdout to UART and CDC
WRITE_PROTOTYPE {
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
	int idx = (_NUC_InIdx+1) % NUC_FIFO_CNT;
 8002578:	4b14      	ldr	r3, [pc, #80]	@ (80025cc <_write+0x60>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	3301      	adds	r3, #1
 800257e:	425a      	negs	r2, r3
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	f002 0203 	and.w	r2, r2, #3
 8002588:	bf58      	it	pl
 800258a:	4253      	negpl	r3, r2
 800258c:	617b      	str	r3, [r7, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800258e:	b672      	cpsid	i
}
 8002590:	bf00      	nop
	__disable_irq();
	TxDataLenNuc[_NUC_InIdx] = len;
 8002592:	4b0e      	ldr	r3, [pc, #56]	@ (80025cc <_write+0x60>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	b2d1      	uxtb	r1, r2
 800259a:	4a0d      	ldr	r2, [pc, #52]	@ (80025d0 <_write+0x64>)
 800259c:	54d1      	strb	r1, [r2, r3]
	memcpy(&TxDataNuc[_NUC_InIdx], ptr, len);
 800259e:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <_write+0x60>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	025b      	lsls	r3, r3, #9
 80025a4:	4a0b      	ldr	r2, [pc, #44]	@ (80025d4 <_write+0x68>)
 80025a6:	4413      	add	r3, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f006 fcfe 	bl	8008fae <memcpy>
	_NUC_InIdx = idx;
 80025b2:	4a06      	ldr	r2, [pc, #24]	@ (80025cc <_write+0x60>)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025b8:	b662      	cpsie	i
}
 80025ba:	bf00      	nop
	__enable_irq();

	_nuc_send_next();
 80025bc:	f7ff ff78 	bl	80024b0 <_nuc_send_next>
  //  HAL_UART_Transmit_IT(&huart1, ptr, len); // debugging
    time=HAL_GetTick()-time;
    if (time>0)
    	printf("WARN: UART send time=%d\n", time);
    	*/
    return len; // Return the number of characters written
 80025c0:	687b      	ldr	r3, [r7, #4]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000ffc 	.word	0x20000ffc
 80025d0:	20000ff8 	.word	0x20000ff8
 80025d4:	200007f8 	.word	0x200007f8

080025d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025dc:	b672      	cpsid	i
}
 80025de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80025e0:	e7fe      	b.n	80025e0 <Error_Handler+0x8>
	...

080025e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <HAL_MspInit+0x50>)
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	4a11      	ldr	r2, [pc, #68]	@ (8002634 <HAL_MspInit+0x50>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6193      	str	r3, [r2, #24]
 80025f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002634 <HAL_MspInit+0x50>)
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	607b      	str	r3, [r7, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	4b0c      	ldr	r3, [pc, #48]	@ (8002634 <HAL_MspInit+0x50>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	4a0b      	ldr	r2, [pc, #44]	@ (8002634 <HAL_MspInit+0x50>)
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800260c:	61d3      	str	r3, [r2, #28]
 800260e:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <HAL_MspInit+0x50>)
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	2005      	movs	r0, #5
 8002620:	f000 fc8d 	bl	8002f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002624:	2005      	movs	r0, #5
 8002626:	f000 fca6 	bl	8002f76 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000

08002638 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	@ 0x28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a17      	ldr	r2, [pc, #92]	@ (80026b4 <HAL_I2C_MspInit+0x7c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d127      	bne.n	80026aa <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800265a:	4b17      	ldr	r3, [pc, #92]	@ (80026b8 <HAL_I2C_MspInit+0x80>)
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	4a16      	ldr	r2, [pc, #88]	@ (80026b8 <HAL_I2C_MspInit+0x80>)
 8002660:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002664:	6153      	str	r3, [r2, #20]
 8002666:	4b14      	ldr	r3, [pc, #80]	@ (80026b8 <HAL_I2C_MspInit+0x80>)
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002672:	23c0      	movs	r3, #192	@ 0xc0
 8002674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002676:	2312      	movs	r3, #18
 8002678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800267e:	2303      	movs	r3, #3
 8002680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002682:	2304      	movs	r3, #4
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	4619      	mov	r1, r3
 800268c:	480b      	ldr	r0, [pc, #44]	@ (80026bc <HAL_I2C_MspInit+0x84>)
 800268e:	f000 fd03 	bl	8003098 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002692:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <HAL_I2C_MspInit+0x80>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	4a08      	ldr	r2, [pc, #32]	@ (80026b8 <HAL_I2C_MspInit+0x80>)
 8002698:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800269c:	61d3      	str	r3, [r2, #28]
 800269e:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <HAL_I2C_MspInit+0x80>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026aa:	bf00      	nop
 80026ac:	3728      	adds	r7, #40	@ 0x28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40005400 	.word	0x40005400
 80026b8:	40021000 	.word	0x40021000
 80026bc:	48000400 	.word	0x48000400

080026c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026d0:	d114      	bne.n	80026fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026d2:	4b19      	ldr	r3, [pc, #100]	@ (8002738 <HAL_TIM_Base_MspInit+0x78>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	4a18      	ldr	r2, [pc, #96]	@ (8002738 <HAL_TIM_Base_MspInit+0x78>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	61d3      	str	r3, [r2, #28]
 80026de:	4b16      	ldr	r3, [pc, #88]	@ (8002738 <HAL_TIM_Base_MspInit+0x78>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2101      	movs	r1, #1
 80026ee:	201c      	movs	r0, #28
 80026f0:	f000 fc25 	bl	8002f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026f4:	201c      	movs	r0, #28
 80026f6:	f000 fc3e 	bl	8002f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026fa:	e018      	b.n	800272e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0e      	ldr	r2, [pc, #56]	@ (800273c <HAL_TIM_Base_MspInit+0x7c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d113      	bne.n	800272e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002706:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <HAL_TIM_Base_MspInit+0x78>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4a0b      	ldr	r2, [pc, #44]	@ (8002738 <HAL_TIM_Base_MspInit+0x78>)
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	61d3      	str	r3, [r2, #28]
 8002712:	4b09      	ldr	r3, [pc, #36]	@ (8002738 <HAL_TIM_Base_MspInit+0x78>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800271e:	2200      	movs	r2, #0
 8002720:	2100      	movs	r1, #0
 8002722:	201d      	movs	r0, #29
 8002724:	f000 fc0b 	bl	8002f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002728:	201d      	movs	r0, #29
 800272a:	f000 fc24 	bl	8002f76 <HAL_NVIC_EnableIRQ>
}
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000
 800273c:	40000400 	.word	0x40000400

08002740 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	@ 0x28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a1b      	ldr	r2, [pc, #108]	@ (80027cc <HAL_TIM_Encoder_MspInit+0x8c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d130      	bne.n	80027c4 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002762:	4b1b      	ldr	r3, [pc, #108]	@ (80027d0 <HAL_TIM_Encoder_MspInit+0x90>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	4a1a      	ldr	r2, [pc, #104]	@ (80027d0 <HAL_TIM_Encoder_MspInit+0x90>)
 8002768:	f043 0308 	orr.w	r3, r3, #8
 800276c:	61d3      	str	r3, [r2, #28]
 800276e:	4b18      	ldr	r3, [pc, #96]	@ (80027d0 <HAL_TIM_Encoder_MspInit+0x90>)
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277a:	4b15      	ldr	r3, [pc, #84]	@ (80027d0 <HAL_TIM_Encoder_MspInit+0x90>)
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	4a14      	ldr	r2, [pc, #80]	@ (80027d0 <HAL_TIM_Encoder_MspInit+0x90>)
 8002780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002784:	6153      	str	r3, [r2, #20]
 8002786:	4b12      	ldr	r3, [pc, #72]	@ (80027d0 <HAL_TIM_Encoder_MspInit+0x90>)
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002792:	2303      	movs	r3, #3
 8002794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279e:	2300      	movs	r3, #0
 80027a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80027a2:	2302      	movs	r3, #2
 80027a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a6:	f107 0314 	add.w	r3, r7, #20
 80027aa:	4619      	mov	r1, r3
 80027ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027b0:	f000 fc72 	bl	8003098 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80027b4:	2200      	movs	r2, #0
 80027b6:	2100      	movs	r1, #0
 80027b8:	2032      	movs	r0, #50	@ 0x32
 80027ba:	f000 fbc0 	bl	8002f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80027be:	2032      	movs	r0, #50	@ 0x32
 80027c0:	f000 fbd9 	bl	8002f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80027c4:	bf00      	nop
 80027c6:	3728      	adds	r7, #40	@ 0x28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40000c00 	.word	0x40000c00
 80027d0:	40021000 	.word	0x40021000

080027d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08c      	sub	sp, #48	@ 0x30
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 031c 	add.w	r3, r7, #28
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a37      	ldr	r2, [pc, #220]	@ (80028d0 <HAL_UART_MspInit+0xfc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d132      	bne.n	800285c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027f6:	4b37      	ldr	r3, [pc, #220]	@ (80028d4 <HAL_UART_MspInit+0x100>)
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	4a36      	ldr	r2, [pc, #216]	@ (80028d4 <HAL_UART_MspInit+0x100>)
 80027fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002800:	6193      	str	r3, [r2, #24]
 8002802:	4b34      	ldr	r3, [pc, #208]	@ (80028d4 <HAL_UART_MspInit+0x100>)
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800280a:	61bb      	str	r3, [r7, #24]
 800280c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	4b31      	ldr	r3, [pc, #196]	@ (80028d4 <HAL_UART_MspInit+0x100>)
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	4a30      	ldr	r2, [pc, #192]	@ (80028d4 <HAL_UART_MspInit+0x100>)
 8002814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002818:	6153      	str	r3, [r2, #20]
 800281a:	4b2e      	ldr	r3, [pc, #184]	@ (80028d4 <HAL_UART_MspInit+0x100>)
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS422_COM_TX_Pin|RS422_COM_RX_Pin;
 8002826:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800282a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002834:	2303      	movs	r3, #3
 8002836:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002838:	2307      	movs	r3, #7
 800283a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283c:	f107 031c 	add.w	r3, r7, #28
 8002840:	4619      	mov	r1, r3
 8002842:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002846:	f000 fc27 	bl	8003098 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800284a:	2200      	movs	r2, #0
 800284c:	2100      	movs	r1, #0
 800284e:	2025      	movs	r0, #37	@ 0x25
 8002850:	f000 fb75 	bl	8002f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002854:	2025      	movs	r0, #37	@ 0x25
 8002856:	f000 fb8e 	bl	8002f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800285a:	e035      	b.n	80028c8 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a1d      	ldr	r2, [pc, #116]	@ (80028d8 <HAL_UART_MspInit+0x104>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d130      	bne.n	80028c8 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002866:	4b1b      	ldr	r3, [pc, #108]	@ (80028d4 <HAL_UART_MspInit+0x100>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	4a1a      	ldr	r2, [pc, #104]	@ (80028d4 <HAL_UART_MspInit+0x100>)
 800286c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002870:	61d3      	str	r3, [r2, #28]
 8002872:	4b18      	ldr	r3, [pc, #96]	@ (80028d4 <HAL_UART_MspInit+0x100>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	4b15      	ldr	r3, [pc, #84]	@ (80028d4 <HAL_UART_MspInit+0x100>)
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	4a14      	ldr	r2, [pc, #80]	@ (80028d4 <HAL_UART_MspInit+0x100>)
 8002884:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002888:	6153      	str	r3, [r2, #20]
 800288a:	4b12      	ldr	r3, [pc, #72]	@ (80028d4 <HAL_UART_MspInit+0x100>)
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_NUC_TX_Pin|UART_NUC_RX_Pin;
 8002896:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800289a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028a4:	2303      	movs	r3, #3
 80028a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028a8:	2307      	movs	r3, #7
 80028aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ac:	f107 031c 	add.w	r3, r7, #28
 80028b0:	4619      	mov	r1, r3
 80028b2:	480a      	ldr	r0, [pc, #40]	@ (80028dc <HAL_UART_MspInit+0x108>)
 80028b4:	f000 fbf0 	bl	8003098 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80028b8:	2200      	movs	r2, #0
 80028ba:	2100      	movs	r1, #0
 80028bc:	2027      	movs	r0, #39	@ 0x27
 80028be:	f000 fb3e 	bl	8002f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028c2:	2027      	movs	r0, #39	@ 0x27
 80028c4:	f000 fb57 	bl	8002f76 <HAL_NVIC_EnableIRQ>
}
 80028c8:	bf00      	nop
 80028ca:	3730      	adds	r7, #48	@ 0x30
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40013800 	.word	0x40013800
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40004800 	.word	0x40004800
 80028dc:	48000400 	.word	0x48000400

080028e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80028e4:	e7fe      	b.n	80028e4 <NMI_Handler+0x4>

080028e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ea:	e7fe      	b.n	80028ea <HardFault_Handler+0x4>

080028ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <MemManage_Handler+0x4>

080028f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f6:	e7fe      	b.n	80028f6 <BusFault_Handler+0x4>

080028f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028fc:	e7fe      	b.n	80028fc <UsageFault_Handler+0x4>

080028fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800292c:	f000 fa0c 	bl	8002d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}

08002934 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002948:	4802      	ldr	r0, [pc, #8]	@ (8002954 <TIM2_IRQHandler+0x10>)
 800294a:	f003 f951 	bl	8005bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000600 	.word	0x20000600

08002958 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800295c:	4802      	ldr	r0, [pc, #8]	@ (8002968 <TIM3_IRQHandler+0x10>)
 800295e:	f003 f947 	bl	8005bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	2000064c 	.word	0x2000064c

0800296c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002970:	4802      	ldr	r0, [pc, #8]	@ (800297c <USART1_IRQHandler+0x10>)
 8002972:	f003 fe91 	bl	8006698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	200006e4 	.word	0x200006e4

08002980 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002984:	4802      	ldr	r0, [pc, #8]	@ (8002990 <USART3_IRQHandler+0x10>)
 8002986:	f003 fe87 	bl	8006698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	2000076c 	.word	0x2000076c

08002994 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002998:	4802      	ldr	r0, [pc, #8]	@ (80029a4 <TIM5_IRQHandler+0x10>)
 800299a:	f003 f929 	bl	8005bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000698 	.word	0x20000698

080029a8 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
	return 1;
 80029ac:	2301      	movs	r3, #1
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <_kill>:

int _kill(int pid, int sig) {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80029c2:	f006 fac7 	bl	8008f54 <__errno>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2216      	movs	r2, #22
 80029ca:	601a      	str	r2, [r3, #0]
	return -1;
 80029cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <_exit>:

void _exit(int status) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029e0:	f04f 31ff 	mov.w	r1, #4294967295
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ffe7 	bl	80029b8 <_kill>
	while (1) {
 80029ea:	e7fe      	b.n	80029ea <_exit+0x12>

080029ec <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	e00a      	b.n	8002a14 <_read+0x28>
		*ptr++ = __io_getchar();
 80029fe:	f3af 8000 	nop.w
 8002a02:	4601      	mov	r1, r0
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	60ba      	str	r2, [r7, #8]
 8002a0a:	b2ca      	uxtb	r2, r1
 8002a0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	3301      	adds	r3, #1
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	dbf0      	blt.n	80029fe <_read+0x12>
	}

	return len;
 8002a1c:	687b      	ldr	r3, [r7, #4]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002a2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <_fstat>:

int _fstat(int file, struct stat *st) {
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a4e:	605a      	str	r2, [r3, #4]
	return 0;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <_isatty>:

int _isatty(int file) {
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002a66:	2301      	movs	r3, #1
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002a98:	4a14      	ldr	r2, [pc, #80]	@ (8002aec <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002a9a:	4b15      	ldr	r3, [pc, #84]	@ (8002af0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002aa4:	4b13      	ldr	r3, [pc, #76]	@ (8002af4 <_sbrk+0x64>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d102      	bne.n	8002ab2 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002aac:	4b11      	ldr	r3, [pc, #68]	@ (8002af4 <_sbrk+0x64>)
 8002aae:	4a12      	ldr	r2, [pc, #72]	@ (8002af8 <_sbrk+0x68>)
 8002ab0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002ab2:	4b10      	ldr	r3, [pc, #64]	@ (8002af4 <_sbrk+0x64>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d207      	bcs.n	8002ad0 <_sbrk+0x40>
		errno = ENOMEM;
 8002ac0:	f006 fa48 	bl	8008f54 <__errno>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	220c      	movs	r2, #12
 8002ac8:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ace:	e009      	b.n	8002ae4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002ad0:	4b08      	ldr	r3, [pc, #32]	@ (8002af4 <_sbrk+0x64>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002ad6:	4b07      	ldr	r3, [pc, #28]	@ (8002af4 <_sbrk+0x64>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4413      	add	r3, r2
 8002ade:	4a05      	ldr	r2, [pc, #20]	@ (8002af4 <_sbrk+0x64>)
 8002ae0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20008000 	.word	0x20008000
 8002af0:	00000400 	.word	0x00000400
 8002af4:	20001008 	.word	0x20001008
 8002af8:	200011e0 	.word	0x200011e0

08002afc <SystemInit>:
/**
 * @brief  Setup the microcontroller system
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
	/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002b00:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <SystemInit+0x20>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b06:	4a05      	ldr	r2, [pc, #20]	@ (8002b1c <SystemInit+0x20>)
 8002b08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <term_init>:
static char _Input[128];
static int	_InputLen=0;

//--- terminal_init --------------------------------
void term_init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
	memset(_Input, 0, sizeof(_Input));
 8002b24:	2280      	movs	r2, #128	@ 0x80
 8002b26:	2100      	movs	r1, #0
 8002b28:	4802      	ldr	r0, [pc, #8]	@ (8002b34 <term_init+0x14>)
 8002b2a:	f006 f9af 	bl	8008e8c <memset>
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	2000100c 	.word	0x2000100c

08002b38 <term_handle_char>:
//--- term_handle_char -------------------------
void term_handle_char(char ch)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
	if (_InputLen<sizeof(_Input)) _Input[_InputLen++] = ch;
 8002b42:	4b0b      	ldr	r3, [pc, #44]	@ (8002b70 <term_handle_char+0x38>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b48:	d808      	bhi.n	8002b5c <term_handle_char+0x24>
 8002b4a:	4b09      	ldr	r3, [pc, #36]	@ (8002b70 <term_handle_char+0x38>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	4907      	ldr	r1, [pc, #28]	@ (8002b70 <term_handle_char+0x38>)
 8002b52:	600a      	str	r2, [r1, #0]
 8002b54:	4907      	ldr	r1, [pc, #28]	@ (8002b74 <term_handle_char+0x3c>)
 8002b56:	79fa      	ldrb	r2, [r7, #7]
 8002b58:	54ca      	strb	r2, [r1, r3]
	else _InputLen=0;
//	putchar(ch);
}
 8002b5a:	e002      	b.n	8002b62 <term_handle_char+0x2a>
	else _InputLen=0;
 8002b5c:	4b04      	ldr	r3, [pc, #16]	@ (8002b70 <term_handle_char+0x38>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	2000108c 	.word	0x2000108c
 8002b74:	2000100c 	.word	0x2000100c

08002b78 <term_idle>:

//--- term_idle -------------------------------
void term_idle(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
    if (_InputLen>1 && (_Input[_InputLen-1]=='\r' || _Input[_InputLen-1]=='\n'))
 8002b7e:	4b32      	ldr	r3, [pc, #200]	@ (8002c48 <term_idle+0xd0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	dd5b      	ble.n	8002c3e <term_idle+0xc6>
 8002b86:	4b30      	ldr	r3, [pc, #192]	@ (8002c48 <term_idle+0xd0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	4a2f      	ldr	r2, [pc, #188]	@ (8002c4c <term_idle+0xd4>)
 8002b8e:	5cd3      	ldrb	r3, [r2, r3]
 8002b90:	2b0d      	cmp	r3, #13
 8002b92:	d006      	beq.n	8002ba2 <term_idle+0x2a>
 8002b94:	4b2c      	ldr	r3, [pc, #176]	@ (8002c48 <term_idle+0xd0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	4a2c      	ldr	r2, [pc, #176]	@ (8002c4c <term_idle+0xd4>)
 8002b9c:	5cd3      	ldrb	r3, [r2, r3]
 8002b9e:	2b0a      	cmp	r3, #10
 8002ba0:	d14d      	bne.n	8002c3e <term_idle+0xc6>
    {
    	char *args;
    //	printf("TERM: >>%s<<\n", _Input);
    	if (strstart(_Input, "status")) 		  		box_send_status();
 8002ba2:	492b      	ldr	r1, [pc, #172]	@ (8002c50 <term_idle+0xd8>)
 8002ba4:	4829      	ldr	r0, [pc, #164]	@ (8002c4c <term_idle+0xd4>)
 8002ba6:	f7fe ff79 	bl	8001a9c <strstart>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <term_idle+0x3e>
 8002bb0:	f7fe fd58 	bl	8001664 <box_send_status>
 8002bb4:	e03b      	b.n	8002c2e <term_idle+0xb6>
    	else if ((args=strstart(_Input, "encoder"))) 	enc_command(args);
 8002bb6:	4927      	ldr	r1, [pc, #156]	@ (8002c54 <term_idle+0xdc>)
 8002bb8:	4824      	ldr	r0, [pc, #144]	@ (8002c4c <term_idle+0xd4>)
 8002bba:	f7fe ff6f 	bl	8001a9c <strstart>
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <term_idle+0x56>
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fe fe40 	bl	800184c <enc_command>
 8002bcc:	e02f      	b.n	8002c2e <term_idle+0xb6>
    	else if ((args=strstart(_Input, "start"))) 		box_start();
 8002bce:	4922      	ldr	r1, [pc, #136]	@ (8002c58 <term_idle+0xe0>)
 8002bd0:	481e      	ldr	r0, [pc, #120]	@ (8002c4c <term_idle+0xd4>)
 8002bd2:	f7fe ff63 	bl	8001a9c <strstart>
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <term_idle+0x6c>
 8002bde:	f7fe f97d 	bl	8000edc <box_start>
 8002be2:	e024      	b.n	8002c2e <term_idle+0xb6>
    	else if ((args=strstart(_Input, "stop"))) 		box_stop();
 8002be4:	491d      	ldr	r1, [pc, #116]	@ (8002c5c <term_idle+0xe4>)
 8002be6:	4819      	ldr	r0, [pc, #100]	@ (8002c4c <term_idle+0xd4>)
 8002be8:	f7fe ff58 	bl	8001a9c <strstart>
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <term_idle+0x82>
 8002bf4:	f7fe f9c6 	bl	8000f84 <box_stop>
 8002bf8:	e019      	b.n	8002c2e <term_idle+0xb6>
    	else if ((args=strstart(_Input, "pgDelay"))) 	box_set_pgDelay(atoi(args));
 8002bfa:	4919      	ldr	r1, [pc, #100]	@ (8002c60 <term_idle+0xe8>)
 8002bfc:	4813      	ldr	r0, [pc, #76]	@ (8002c4c <term_idle+0xd4>)
 8002bfe:	f7fe ff4d 	bl	8001a9c <strstart>
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <term_idle+0xa2>
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f004 ff31 	bl	8007a72 <atoi>
 8002c10:	4603      	mov	r3, r0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe f94e 	bl	8000eb4 <box_set_pgDelay>
 8002c18:	e009      	b.n	8002c2e <term_idle+0xb6>
    	else if ((args=strstart(_Input, "pg"))) 		box_printGo();
 8002c1a:	4912      	ldr	r1, [pc, #72]	@ (8002c64 <term_idle+0xec>)
 8002c1c:	480b      	ldr	r0, [pc, #44]	@ (8002c4c <term_idle+0xd4>)
 8002c1e:	f7fe ff3d 	bl	8001a9c <strstart>
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <term_idle+0xb6>
 8002c2a:	f7fe fc87 	bl	800153c <box_printGo>

    	memset(_Input, 0, sizeof(_Input));
 8002c2e:	2280      	movs	r2, #128	@ 0x80
 8002c30:	2100      	movs	r1, #0
 8002c32:	4806      	ldr	r0, [pc, #24]	@ (8002c4c <term_idle+0xd4>)
 8002c34:	f006 f92a 	bl	8008e8c <memset>
    	_InputLen=0;
 8002c38:	4b03      	ldr	r3, [pc, #12]	@ (8002c48 <term_idle+0xd0>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
    }
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	2000108c 	.word	0x2000108c
 8002c4c:	2000100c 	.word	0x2000100c
 8002c50:	0800ce1c 	.word	0x0800ce1c
 8002c54:	0800ce24 	.word	0x0800ce24
 8002c58:	0800ce2c 	.word	0x0800ce2c
 8002c5c:	0800ce34 	.word	0x0800ce34
 8002c60:	0800ce3c 	.word	0x0800ce3c
 8002c64:	0800ce44 	.word	0x0800ce44

08002c68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ca0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c6c:	f7ff ff46 	bl	8002afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c70:	480c      	ldr	r0, [pc, #48]	@ (8002ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c72:	490d      	ldr	r1, [pc, #52]	@ (8002ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c74:	4a0d      	ldr	r2, [pc, #52]	@ (8002cac <LoopForever+0xe>)
  movs r3, #0
 8002c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c78:	e002      	b.n	8002c80 <LoopCopyDataInit>

08002c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c7e:	3304      	adds	r3, #4

08002c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c84:	d3f9      	bcc.n	8002c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c86:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c88:	4c0a      	ldr	r4, [pc, #40]	@ (8002cb4 <LoopForever+0x16>)
  movs r3, #0
 8002c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c8c:	e001      	b.n	8002c92 <LoopFillZerobss>

08002c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c90:	3204      	adds	r2, #4

08002c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c94:	d3fb      	bcc.n	8002c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c96:	f006 f963 	bl	8008f60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c9a:	f7fe ff5b 	bl	8001b54 <main>

08002c9e <LoopForever>:

LoopForever:
    b LoopForever
 8002c9e:	e7fe      	b.n	8002c9e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ca0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ca8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002cac:	0800d2e0 	.word	0x0800d2e0
  ldr r2, =_sbss
 8002cb0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002cb4:	200011e0 	.word	0x200011e0

08002cb8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cb8:	e7fe      	b.n	8002cb8 <ADC1_IRQHandler>
	...

08002cbc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc0:	4b08      	ldr	r3, [pc, #32]	@ (8002ce4 <HAL_Init+0x28>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a07      	ldr	r2, [pc, #28]	@ (8002ce4 <HAL_Init+0x28>)
 8002cc6:	f043 0310 	orr.w	r3, r3, #16
 8002cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ccc:	2003      	movs	r0, #3
 8002cce:	f000 f92b 	bl	8002f28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cd2:	200f      	movs	r0, #15
 8002cd4:	f000 f808 	bl	8002ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cd8:	f7ff fc84 	bl	80025e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40022000 	.word	0x40022000

08002ce8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cf0:	4b12      	ldr	r3, [pc, #72]	@ (8002d3c <HAL_InitTick+0x54>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4b12      	ldr	r3, [pc, #72]	@ (8002d40 <HAL_InitTick+0x58>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f943 	bl	8002f92 <HAL_SYSTICK_Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e00e      	b.n	8002d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b0f      	cmp	r3, #15
 8002d1a:	d80a      	bhi.n	8002d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295
 8002d24:	f000 f90b 	bl	8002f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d28:	4a06      	ldr	r2, [pc, #24]	@ (8002d44 <HAL_InitTick+0x5c>)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e000      	b.n	8002d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000014 	.word	0x20000014
 8002d40:	2000001c 	.word	0x2000001c
 8002d44:	20000018 	.word	0x20000018

08002d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <HAL_IncTick+0x20>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <HAL_IncTick+0x24>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	4a04      	ldr	r2, [pc, #16]	@ (8002d6c <HAL_IncTick+0x24>)
 8002d5a:	6013      	str	r3, [r2, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	2000001c 	.word	0x2000001c
 8002d6c:	20001090 	.word	0x20001090

08002d70 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return uwTick;  
 8002d74:	4b03      	ldr	r3, [pc, #12]	@ (8002d84 <HAL_GetTick+0x14>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20001090 	.word	0x20001090

08002d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d98:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <__NVIC_SetPriorityGrouping+0x44>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002da4:	4013      	ands	r3, r2
 8002da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dba:	4a04      	ldr	r2, [pc, #16]	@ (8002dcc <__NVIC_SetPriorityGrouping+0x44>)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	60d3      	str	r3, [r2, #12]
}
 8002dc0:	bf00      	nop
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd4:	4b04      	ldr	r3, [pc, #16]	@ (8002de8 <__NVIC_GetPriorityGrouping+0x18>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	0a1b      	lsrs	r3, r3, #8
 8002dda:	f003 0307 	and.w	r3, r3, #7
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	db0b      	blt.n	8002e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	f003 021f 	and.w	r2, r3, #31
 8002e04:	4907      	ldr	r1, [pc, #28]	@ (8002e24 <__NVIC_EnableIRQ+0x38>)
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000e100 	.word	0xe000e100

08002e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	6039      	str	r1, [r7, #0]
 8002e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	db0a      	blt.n	8002e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	490c      	ldr	r1, [pc, #48]	@ (8002e74 <__NVIC_SetPriority+0x4c>)
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	0112      	lsls	r2, r2, #4
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e50:	e00a      	b.n	8002e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	4908      	ldr	r1, [pc, #32]	@ (8002e78 <__NVIC_SetPriority+0x50>)
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	3b04      	subs	r3, #4
 8002e60:	0112      	lsls	r2, r2, #4
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	440b      	add	r3, r1
 8002e66:	761a      	strb	r2, [r3, #24]
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000e100 	.word	0xe000e100
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b089      	sub	sp, #36	@ 0x24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f1c3 0307 	rsb	r3, r3, #7
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	bf28      	it	cs
 8002e9a:	2304      	movcs	r3, #4
 8002e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d902      	bls.n	8002eac <NVIC_EncodePriority+0x30>
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3b03      	subs	r3, #3
 8002eaa:	e000      	b.n	8002eae <NVIC_EncodePriority+0x32>
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ece:	43d9      	mvns	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed4:	4313      	orrs	r3, r2
         );
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3724      	adds	r7, #36	@ 0x24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ef4:	d301      	bcc.n	8002efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e00f      	b.n	8002f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002efa:	4a0a      	ldr	r2, [pc, #40]	@ (8002f24 <SysTick_Config+0x40>)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f02:	210f      	movs	r1, #15
 8002f04:	f04f 30ff 	mov.w	r0, #4294967295
 8002f08:	f7ff ff8e 	bl	8002e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f0c:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <SysTick_Config+0x40>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f12:	4b04      	ldr	r3, [pc, #16]	@ (8002f24 <SysTick_Config+0x40>)
 8002f14:	2207      	movs	r2, #7
 8002f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	e000e010 	.word	0xe000e010

08002f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff ff29 	bl	8002d88 <__NVIC_SetPriorityGrouping>
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b086      	sub	sp, #24
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	4603      	mov	r3, r0
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f50:	f7ff ff3e 	bl	8002dd0 <__NVIC_GetPriorityGrouping>
 8002f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	6978      	ldr	r0, [r7, #20]
 8002f5c:	f7ff ff8e 	bl	8002e7c <NVIC_EncodePriority>
 8002f60:	4602      	mov	r2, r0
 8002f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff5d 	bl	8002e28 <__NVIC_SetPriority>
}
 8002f6e:	bf00      	nop
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ff31 	bl	8002dec <__NVIC_EnableIRQ>
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff ffa2 	bl	8002ee4 <SysTick_Config>
 8002fa0:	4603      	mov	r3, r0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d008      	beq.n	8002fce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e020      	b.n	8003010 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 020e 	bic.w	r2, r2, #14
 8002fdc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800302e:	2b02      	cmp	r3, #2
 8003030:	d005      	beq.n	800303e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2204      	movs	r2, #4
 8003036:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
 800303c:	e027      	b.n	800308e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 020e 	bic.w	r2, r2, #14
 800304c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003066:	2101      	movs	r1, #1
 8003068:	fa01 f202 	lsl.w	r2, r1, r2
 800306c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	4798      	blx	r3
    } 
  }
  return status;
 800308e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030a6:	e154      	b.n	8003352 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	2101      	movs	r1, #1
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	fa01 f303 	lsl.w	r3, r1, r3
 80030b4:	4013      	ands	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8146 	beq.w	800334c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d005      	beq.n	80030d8 <HAL_GPIO_Init+0x40>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d130      	bne.n	800313a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	2203      	movs	r2, #3
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800310e:	2201      	movs	r2, #1
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4013      	ands	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	f003 0201 	and.w	r2, r3, #1
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b03      	cmp	r3, #3
 8003144:	d017      	beq.n	8003176 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	2203      	movs	r2, #3
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4013      	ands	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d123      	bne.n	80031ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	08da      	lsrs	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3208      	adds	r2, #8
 800318a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800318e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	220f      	movs	r2, #15
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4013      	ands	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	08da      	lsrs	r2, r3, #3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3208      	adds	r2, #8
 80031c4:	6939      	ldr	r1, [r7, #16]
 80031c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	2203      	movs	r2, #3
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43db      	mvns	r3, r3
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4013      	ands	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 0203 	and.w	r2, r3, #3
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 80a0 	beq.w	800334c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320c:	4b58      	ldr	r3, [pc, #352]	@ (8003370 <HAL_GPIO_Init+0x2d8>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	4a57      	ldr	r2, [pc, #348]	@ (8003370 <HAL_GPIO_Init+0x2d8>)
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	6193      	str	r3, [r2, #24]
 8003218:	4b55      	ldr	r3, [pc, #340]	@ (8003370 <HAL_GPIO_Init+0x2d8>)
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003224:	4a53      	ldr	r2, [pc, #332]	@ (8003374 <HAL_GPIO_Init+0x2dc>)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	089b      	lsrs	r3, r3, #2
 800322a:	3302      	adds	r3, #2
 800322c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003230:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	220f      	movs	r2, #15
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800324e:	d019      	beq.n	8003284 <HAL_GPIO_Init+0x1ec>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a49      	ldr	r2, [pc, #292]	@ (8003378 <HAL_GPIO_Init+0x2e0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d013      	beq.n	8003280 <HAL_GPIO_Init+0x1e8>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a48      	ldr	r2, [pc, #288]	@ (800337c <HAL_GPIO_Init+0x2e4>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00d      	beq.n	800327c <HAL_GPIO_Init+0x1e4>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a47      	ldr	r2, [pc, #284]	@ (8003380 <HAL_GPIO_Init+0x2e8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d007      	beq.n	8003278 <HAL_GPIO_Init+0x1e0>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a46      	ldr	r2, [pc, #280]	@ (8003384 <HAL_GPIO_Init+0x2ec>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d101      	bne.n	8003274 <HAL_GPIO_Init+0x1dc>
 8003270:	2304      	movs	r3, #4
 8003272:	e008      	b.n	8003286 <HAL_GPIO_Init+0x1ee>
 8003274:	2305      	movs	r3, #5
 8003276:	e006      	b.n	8003286 <HAL_GPIO_Init+0x1ee>
 8003278:	2303      	movs	r3, #3
 800327a:	e004      	b.n	8003286 <HAL_GPIO_Init+0x1ee>
 800327c:	2302      	movs	r3, #2
 800327e:	e002      	b.n	8003286 <HAL_GPIO_Init+0x1ee>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <HAL_GPIO_Init+0x1ee>
 8003284:	2300      	movs	r3, #0
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	f002 0203 	and.w	r2, r2, #3
 800328c:	0092      	lsls	r2, r2, #2
 800328e:	4093      	lsls	r3, r2
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003296:	4937      	ldr	r1, [pc, #220]	@ (8003374 <HAL_GPIO_Init+0x2dc>)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	3302      	adds	r3, #2
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032a4:	4b38      	ldr	r3, [pc, #224]	@ (8003388 <HAL_GPIO_Init+0x2f0>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003388 <HAL_GPIO_Init+0x2f0>)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032ce:	4b2e      	ldr	r3, [pc, #184]	@ (8003388 <HAL_GPIO_Init+0x2f0>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	43db      	mvns	r3, r3
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4013      	ands	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032f2:	4a25      	ldr	r2, [pc, #148]	@ (8003388 <HAL_GPIO_Init+0x2f0>)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032f8:	4b23      	ldr	r3, [pc, #140]	@ (8003388 <HAL_GPIO_Init+0x2f0>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	43db      	mvns	r3, r3
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800331c:	4a1a      	ldr	r2, [pc, #104]	@ (8003388 <HAL_GPIO_Init+0x2f0>)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003322:	4b19      	ldr	r3, [pc, #100]	@ (8003388 <HAL_GPIO_Init+0x2f0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	43db      	mvns	r3, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003346:	4a10      	ldr	r2, [pc, #64]	@ (8003388 <HAL_GPIO_Init+0x2f0>)
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	3301      	adds	r3, #1
 8003350:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	f47f aea3 	bne.w	80030a8 <HAL_GPIO_Init+0x10>
  }
}
 8003362:	bf00      	nop
 8003364:	bf00      	nop
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	40021000 	.word	0x40021000
 8003374:	40010000 	.word	0x40010000
 8003378:	48000400 	.word	0x48000400
 800337c:	48000800 	.word	0x48000800
 8003380:	48000c00 	.word	0x48000c00
 8003384:	48001000 	.word	0x48001000
 8003388:	40010400 	.word	0x40010400

0800338c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	887b      	ldrh	r3, [r7, #2]
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
 80033a8:	e001      	b.n	80033ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033aa:	2300      	movs	r3, #0
 80033ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	807b      	strh	r3, [r7, #2]
 80033c8:	4613      	mov	r3, r2
 80033ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033cc:	787b      	ldrb	r3, [r7, #1]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033d2:	887a      	ldrh	r2, [r7, #2]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033d8:	e002      	b.n	80033e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033da:	887a      	ldrh	r2, [r7, #2]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e081      	b.n	8003502 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff f910 	bl	8002638 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2224      	movs	r2, #36	@ 0x24
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800343c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800344c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d107      	bne.n	8003466 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	e006      	b.n	8003474 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003472:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d104      	bne.n	8003486 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003484:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003494:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003498:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69d9      	ldr	r1, [r3, #28]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1a      	ldr	r2, [r3, #32]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af02      	add	r7, sp, #8
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	607a      	str	r2, [r7, #4]
 8003516:	461a      	mov	r2, r3
 8003518:	460b      	mov	r3, r1
 800351a:	817b      	strh	r3, [r7, #10]
 800351c:	4613      	mov	r3, r2
 800351e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b20      	cmp	r3, #32
 800352a:	f040 80da 	bne.w	80036e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_I2C_Master_Transmit+0x30>
 8003538:	2302      	movs	r3, #2
 800353a:	e0d3      	b.n	80036e4 <HAL_I2C_Master_Transmit+0x1d8>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003544:	f7ff fc14 	bl	8002d70 <HAL_GetTick>
 8003548:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	2319      	movs	r3, #25
 8003550:	2201      	movs	r2, #1
 8003552:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f9e6 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e0be      	b.n	80036e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2221      	movs	r2, #33	@ 0x21
 800356a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2210      	movs	r2, #16
 8003572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	893a      	ldrh	r2, [r7, #8]
 8003586:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003592:	b29b      	uxth	r3, r3
 8003594:	2bff      	cmp	r3, #255	@ 0xff
 8003596:	d90e      	bls.n	80035b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	22ff      	movs	r2, #255	@ 0xff
 800359c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	8979      	ldrh	r1, [r7, #10]
 80035a6:	4b51      	ldr	r3, [pc, #324]	@ (80036ec <HAL_I2C_Master_Transmit+0x1e0>)
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 fbf6 	bl	8003da0 <I2C_TransferConfig>
 80035b4:	e06c      	b.n	8003690 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	8979      	ldrh	r1, [r7, #10]
 80035c8:	4b48      	ldr	r3, [pc, #288]	@ (80036ec <HAL_I2C_Master_Transmit+0x1e0>)
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 fbe5 	bl	8003da0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80035d6:	e05b      	b.n	8003690 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	6a39      	ldr	r1, [r7, #32]
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f9f2 	bl	80039c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e07b      	b.n	80036e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f0:	781a      	ldrb	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d034      	beq.n	8003690 <HAL_I2C_Master_Transmit+0x184>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362a:	2b00      	cmp	r3, #0
 800362c:	d130      	bne.n	8003690 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	2200      	movs	r2, #0
 8003636:	2180      	movs	r1, #128	@ 0x80
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 f975 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e04d      	b.n	80036e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	2bff      	cmp	r3, #255	@ 0xff
 8003650:	d90e      	bls.n	8003670 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	22ff      	movs	r2, #255	@ 0xff
 8003656:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365c:	b2da      	uxtb	r2, r3
 800365e:	8979      	ldrh	r1, [r7, #10]
 8003660:	2300      	movs	r3, #0
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 fb99 	bl	8003da0 <I2C_TransferConfig>
 800366e:	e00f      	b.n	8003690 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367e:	b2da      	uxtb	r2, r3
 8003680:	8979      	ldrh	r1, [r7, #10]
 8003682:	2300      	movs	r3, #0
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fb88 	bl	8003da0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d19e      	bne.n	80035d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	6a39      	ldr	r1, [r7, #32]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f9d8 	bl	8003a54 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e01a      	b.n	80036e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2220      	movs	r2, #32
 80036b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6859      	ldr	r1, [r3, #4]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b0b      	ldr	r3, [pc, #44]	@ (80036f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80036c2:	400b      	ands	r3, r1
 80036c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	e000      	b.n	80036e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80036e2:	2302      	movs	r3, #2
  }
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	80002000 	.word	0x80002000
 80036f0:	fe00e800 	.word	0xfe00e800

080036f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	461a      	mov	r2, r3
 8003700:	460b      	mov	r3, r1
 8003702:	817b      	strh	r3, [r7, #10]
 8003704:	4613      	mov	r3, r2
 8003706:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b20      	cmp	r3, #32
 8003712:	f040 80db 	bne.w	80038cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_I2C_Master_Receive+0x30>
 8003720:	2302      	movs	r3, #2
 8003722:	e0d4      	b.n	80038ce <HAL_I2C_Master_Receive+0x1da>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800372c:	f7ff fb20 	bl	8002d70 <HAL_GetTick>
 8003730:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	2319      	movs	r3, #25
 8003738:	2201      	movs	r2, #1
 800373a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f8f2 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e0bf      	b.n	80038ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2222      	movs	r2, #34	@ 0x22
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2210      	movs	r2, #16
 800375a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	893a      	ldrh	r2, [r7, #8]
 800376e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377a:	b29b      	uxth	r3, r3
 800377c:	2bff      	cmp	r3, #255	@ 0xff
 800377e:	d90e      	bls.n	800379e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	22ff      	movs	r2, #255	@ 0xff
 8003784:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378a:	b2da      	uxtb	r2, r3
 800378c:	8979      	ldrh	r1, [r7, #10]
 800378e:	4b52      	ldr	r3, [pc, #328]	@ (80038d8 <HAL_I2C_Master_Receive+0x1e4>)
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 fb02 	bl	8003da0 <I2C_TransferConfig>
 800379c:	e06d      	b.n	800387a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	8979      	ldrh	r1, [r7, #10]
 80037b0:	4b49      	ldr	r3, [pc, #292]	@ (80038d8 <HAL_I2C_Master_Receive+0x1e4>)
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 faf1 	bl	8003da0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80037be:	e05c      	b.n	800387a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	6a39      	ldr	r1, [r7, #32]
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f989 	bl	8003adc <I2C_WaitOnRXNEFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e07c      	b.n	80038ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d034      	beq.n	800387a <HAL_I2C_Master_Receive+0x186>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003814:	2b00      	cmp	r3, #0
 8003816:	d130      	bne.n	800387a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	2200      	movs	r2, #0
 8003820:	2180      	movs	r1, #128	@ 0x80
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f880 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e04d      	b.n	80038ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003836:	b29b      	uxth	r3, r3
 8003838:	2bff      	cmp	r3, #255	@ 0xff
 800383a:	d90e      	bls.n	800385a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	22ff      	movs	r2, #255	@ 0xff
 8003840:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003846:	b2da      	uxtb	r2, r3
 8003848:	8979      	ldrh	r1, [r7, #10]
 800384a:	2300      	movs	r3, #0
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 faa4 	bl	8003da0 <I2C_TransferConfig>
 8003858:	e00f      	b.n	800387a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003868:	b2da      	uxtb	r2, r3
 800386a:	8979      	ldrh	r1, [r7, #10]
 800386c:	2300      	movs	r3, #0
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fa93 	bl	8003da0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d19d      	bne.n	80037c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	6a39      	ldr	r1, [r7, #32]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f8e3 	bl	8003a54 <I2C_WaitOnSTOPFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e01a      	b.n	80038ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2220      	movs	r2, #32
 800389e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6859      	ldr	r1, [r3, #4]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	4b0c      	ldr	r3, [pc, #48]	@ (80038dc <HAL_I2C_Master_Receive+0x1e8>)
 80038ac:	400b      	ands	r3, r1
 80038ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	e000      	b.n	80038ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80038cc:	2302      	movs	r3, #2
  }
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	80002400 	.word	0x80002400
 80038dc:	fe00e800 	.word	0xfe00e800

080038e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d103      	bne.n	80038fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2200      	movs	r2, #0
 80038fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b01      	cmp	r3, #1
 800390a:	d007      	beq.n	800391c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	619a      	str	r2, [r3, #24]
  }
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	4613      	mov	r3, r2
 8003936:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003938:	e031      	b.n	800399e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d02d      	beq.n	800399e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003942:	f7ff fa15 	bl	8002d70 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d302      	bcc.n	8003958 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d122      	bne.n	800399e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	4013      	ands	r3, r2
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	429a      	cmp	r2, r3
 8003966:	bf0c      	ite	eq
 8003968:	2301      	moveq	r3, #1
 800396a:	2300      	movne	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	461a      	mov	r2, r3
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	429a      	cmp	r2, r3
 8003974:	d113      	bne.n	800399e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397a:	f043 0220 	orr.w	r2, r3, #32
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e00f      	b.n	80039be <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699a      	ldr	r2, [r3, #24]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4013      	ands	r3, r2
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	bf0c      	ite	eq
 80039ae:	2301      	moveq	r3, #1
 80039b0:	2300      	movne	r3, #0
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d0be      	beq.n	800393a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039d2:	e033      	b.n	8003a3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	68b9      	ldr	r1, [r7, #8]
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f901 	bl	8003be0 <I2C_IsErrorOccurred>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e031      	b.n	8003a4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ee:	d025      	beq.n	8003a3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f0:	f7ff f9be 	bl	8002d70 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d302      	bcc.n	8003a06 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11a      	bne.n	8003a3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d013      	beq.n	8003a3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a18:	f043 0220 	orr.w	r2, r3, #32
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e007      	b.n	8003a4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d1c4      	bne.n	80039d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a60:	e02f      	b.n	8003ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68b9      	ldr	r1, [r7, #8]
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f8ba 	bl	8003be0 <I2C_IsErrorOccurred>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e02d      	b.n	8003ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a76:	f7ff f97b 	bl	8002d70 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d11a      	bne.n	8003ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	f003 0320 	and.w	r3, r3, #32
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	d013      	beq.n	8003ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9e:	f043 0220 	orr.w	r2, r3, #32
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e007      	b.n	8003ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d1c8      	bne.n	8003a62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ae8:	e06b      	b.n	8003bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f876 	bl	8003be0 <I2C_IsErrorOccurred>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e069      	b.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d138      	bne.n	8003b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d105      	bne.n	8003b26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	e055      	b.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b10      	cmp	r3, #16
 8003b32:	d107      	bne.n	8003b44 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2210      	movs	r2, #16
 8003b3a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2204      	movs	r2, #4
 8003b40:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b42:	e002      	b.n	8003b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6859      	ldr	r1, [r3, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bdc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003b5e:	400b      	ands	r3, r1
 8003b60:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e029      	b.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7e:	f7ff f8f7 	bl	8002d70 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d302      	bcc.n	8003b94 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d116      	bne.n	8003bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d00f      	beq.n	8003bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba6:	f043 0220 	orr.w	r2, r3, #32
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e007      	b.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d18c      	bne.n	8003aea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	fe00e800 	.word	0xfe00e800

08003be0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	@ 0x28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d068      	beq.n	8003cde <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2210      	movs	r2, #16
 8003c12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c14:	e049      	b.n	8003caa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1c:	d045      	beq.n	8003caa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c1e:	f7ff f8a7 	bl	8002d70 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d302      	bcc.n	8003c34 <I2C_IsErrorOccurred+0x54>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d13a      	bne.n	8003caa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c56:	d121      	bne.n	8003c9c <I2C_IsErrorOccurred+0xbc>
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c5e:	d01d      	beq.n	8003c9c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c60:	7cfb      	ldrb	r3, [r7, #19]
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d01a      	beq.n	8003c9c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c76:	f7ff f87b 	bl	8002d70 <HAL_GetTick>
 8003c7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c7c:	e00e      	b.n	8003c9c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c7e:	f7ff f877 	bl	8002d70 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b19      	cmp	r3, #25
 8003c8a:	d907      	bls.n	8003c9c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	f043 0320 	orr.w	r3, r3, #32
 8003c92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003c9a:	e006      	b.n	8003caa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d1e9      	bne.n	8003c7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b20      	cmp	r3, #32
 8003cb6:	d003      	beq.n	8003cc0 <I2C_IsErrorOccurred+0xe0>
 8003cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0aa      	beq.n	8003c16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d103      	bne.n	8003cd0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	f043 0304 	orr.w	r3, r3, #4
 8003cd6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00b      	beq.n	8003d08 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00b      	beq.n	8003d2a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	f043 0308 	orr.w	r3, r3, #8
 8003d18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00b      	beq.n	8003d4c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	f043 0302 	orr.w	r3, r3, #2
 8003d3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d01c      	beq.n	8003d8e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f7ff fdc3 	bl	80038e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	4b0d      	ldr	r3, [pc, #52]	@ (8003d9c <I2C_IsErrorOccurred+0x1bc>)
 8003d66:	400b      	ands	r3, r1
 8003d68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	431a      	orrs	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3728      	adds	r7, #40	@ 0x28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	fe00e800 	.word	0xfe00e800

08003da0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	460b      	mov	r3, r1
 8003dac:	817b      	strh	r3, [r7, #10]
 8003dae:	4613      	mov	r3, r2
 8003db0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003db2:	897b      	ldrh	r3, [r7, #10]
 8003db4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003db8:	7a7b      	ldrb	r3, [r7, #9]
 8003dba:	041b      	lsls	r3, r3, #16
 8003dbc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dc0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003dce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	0d5b      	lsrs	r3, r3, #21
 8003dda:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003dde:	4b08      	ldr	r3, [pc, #32]	@ (8003e00 <I2C_TransferConfig+0x60>)
 8003de0:	430b      	orrs	r3, r1
 8003de2:	43db      	mvns	r3, r3
 8003de4:	ea02 0103 	and.w	r1, r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	03ff63ff 	.word	0x03ff63ff

08003e04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d138      	bne.n	8003e8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e032      	b.n	8003e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2224      	movs	r2, #36	@ 0x24
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6819      	ldr	r1, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e000      	b.n	8003e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
  }
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d139      	bne.n	8003f24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e033      	b.n	8003f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2224      	movs	r2, #36	@ 0x24
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0201 	bic.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003eec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	e000      	b.n	8003f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
  }
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
	...

08003f34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f44:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f001 b823 	b.w	8004fa0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 817d 	beq.w	800426a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f70:	4bbc      	ldr	r3, [pc, #752]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 030c 	and.w	r3, r3, #12
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d00c      	beq.n	8003f96 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f7c:	4bb9      	ldr	r3, [pc, #740]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 030c 	and.w	r3, r3, #12
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d15c      	bne.n	8004042 <HAL_RCC_OscConfig+0x10e>
 8003f88:	4bb6      	ldr	r3, [pc, #728]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f94:	d155      	bne.n	8004042 <HAL_RCC_OscConfig+0x10e>
 8003f96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f9a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003fa2:	fa93 f3a3 	rbit	r3, r3
 8003fa6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003faa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fae:	fab3 f383 	clz	r3, r3
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	095b      	lsrs	r3, r3, #5
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d102      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x94>
 8003fc2:	4ba8      	ldr	r3, [pc, #672]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	e015      	b.n	8003ff4 <HAL_RCC_OscConfig+0xc0>
 8003fc8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fcc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003fd4:	fa93 f3a3 	rbit	r3, r3
 8003fd8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003fdc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fe0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003fe4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003fe8:	fa93 f3a3 	rbit	r3, r3
 8003fec:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003ff0:	4b9c      	ldr	r3, [pc, #624]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003ff8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003ffc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004000:	fa92 f2a2 	rbit	r2, r2
 8004004:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8004008:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800400c:	fab2 f282 	clz	r2, r2
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	f042 0220 	orr.w	r2, r2, #32
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	f002 021f 	and.w	r2, r2, #31
 800401c:	2101      	movs	r1, #1
 800401e:	fa01 f202 	lsl.w	r2, r1, r2
 8004022:	4013      	ands	r3, r2
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 811f 	beq.w	8004268 <HAL_RCC_OscConfig+0x334>
 800402a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800402e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f040 8116 	bne.w	8004268 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	f000 bfaf 	b.w	8004fa0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004046:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004052:	d106      	bne.n	8004062 <HAL_RCC_OscConfig+0x12e>
 8004054:	4b83      	ldr	r3, [pc, #524]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a82      	ldr	r2, [pc, #520]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 800405a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	e036      	b.n	80040d0 <HAL_RCC_OscConfig+0x19c>
 8004062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004066:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10c      	bne.n	800408c <HAL_RCC_OscConfig+0x158>
 8004072:	4b7c      	ldr	r3, [pc, #496]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a7b      	ldr	r2, [pc, #492]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 8004078:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	4b79      	ldr	r3, [pc, #484]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a78      	ldr	r2, [pc, #480]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 8004084:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	e021      	b.n	80040d0 <HAL_RCC_OscConfig+0x19c>
 800408c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004090:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800409c:	d10c      	bne.n	80040b8 <HAL_RCC_OscConfig+0x184>
 800409e:	4b71      	ldr	r3, [pc, #452]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a70      	ldr	r2, [pc, #448]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 80040a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	4b6e      	ldr	r3, [pc, #440]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a6d      	ldr	r2, [pc, #436]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e00b      	b.n	80040d0 <HAL_RCC_OscConfig+0x19c>
 80040b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a69      	ldr	r2, [pc, #420]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 80040be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	4b67      	ldr	r3, [pc, #412]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a66      	ldr	r2, [pc, #408]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 80040ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040ce:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040d0:	4b64      	ldr	r3, [pc, #400]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 80040d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d4:	f023 020f 	bic.w	r2, r3, #15
 80040d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	495f      	ldr	r1, [pc, #380]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d059      	beq.n	80041ae <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fa:	f7fe fe39 	bl	8002d70 <HAL_GetTick>
 80040fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	e00a      	b.n	800411a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004104:	f7fe fe34 	bl	8002d70 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b64      	cmp	r3, #100	@ 0x64
 8004112:	d902      	bls.n	800411a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	f000 bf43 	b.w	8004fa0 <HAL_RCC_OscConfig+0x106c>
 800411a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800411e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004122:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8004126:	fa93 f3a3 	rbit	r3, r3
 800412a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800412e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004132:	fab3 f383 	clz	r3, r3
 8004136:	b2db      	uxtb	r3, r3
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	b2db      	uxtb	r3, r3
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b01      	cmp	r3, #1
 8004144:	d102      	bne.n	800414c <HAL_RCC_OscConfig+0x218>
 8004146:	4b47      	ldr	r3, [pc, #284]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	e015      	b.n	8004178 <HAL_RCC_OscConfig+0x244>
 800414c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004150:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004154:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8004158:	fa93 f3a3 	rbit	r3, r3
 800415c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004160:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004164:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004168:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800416c:	fa93 f3a3 	rbit	r3, r3
 8004170:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004174:	4b3b      	ldr	r3, [pc, #236]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800417c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004180:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004184:	fa92 f2a2 	rbit	r2, r2
 8004188:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800418c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004190:	fab2 f282 	clz	r2, r2
 8004194:	b2d2      	uxtb	r2, r2
 8004196:	f042 0220 	orr.w	r2, r2, #32
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	f002 021f 	and.w	r2, r2, #31
 80041a0:	2101      	movs	r1, #1
 80041a2:	fa01 f202 	lsl.w	r2, r1, r2
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0ab      	beq.n	8004104 <HAL_RCC_OscConfig+0x1d0>
 80041ac:	e05d      	b.n	800426a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ae:	f7fe fddf 	bl	8002d70 <HAL_GetTick>
 80041b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fe fdda 	bl	8002d70 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b64      	cmp	r3, #100	@ 0x64
 80041c6:	d902      	bls.n	80041ce <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	f000 bee9 	b.w	8004fa0 <HAL_RCC_OscConfig+0x106c>
 80041ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041d2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80041da:	fa93 f3a3 	rbit	r3, r3
 80041de:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80041e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d102      	bne.n	8004200 <HAL_RCC_OscConfig+0x2cc>
 80041fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	e015      	b.n	800422c <HAL_RCC_OscConfig+0x2f8>
 8004200:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004204:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004208:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800420c:	fa93 f3a3 	rbit	r3, r3
 8004210:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004214:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004218:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800421c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004220:	fa93 f3a3 	rbit	r3, r3
 8004224:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004228:	4b0e      	ldr	r3, [pc, #56]	@ (8004264 <HAL_RCC_OscConfig+0x330>)
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004230:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8004234:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004238:	fa92 f2a2 	rbit	r2, r2
 800423c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8004240:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8004244:	fab2 f282 	clz	r2, r2
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	f042 0220 	orr.w	r2, r2, #32
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	f002 021f 	and.w	r2, r2, #31
 8004254:	2101      	movs	r1, #1
 8004256:	fa01 f202 	lsl.w	r2, r1, r2
 800425a:	4013      	ands	r3, r2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1ab      	bne.n	80041b8 <HAL_RCC_OscConfig+0x284>
 8004260:	e003      	b.n	800426a <HAL_RCC_OscConfig+0x336>
 8004262:	bf00      	nop
 8004264:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800426a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800426e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 817d 	beq.w	800457a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004280:	4ba6      	ldr	r3, [pc, #664]	@ (800451c <HAL_RCC_OscConfig+0x5e8>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 030c 	and.w	r3, r3, #12
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00b      	beq.n	80042a4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800428c:	4ba3      	ldr	r3, [pc, #652]	@ (800451c <HAL_RCC_OscConfig+0x5e8>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 030c 	and.w	r3, r3, #12
 8004294:	2b08      	cmp	r3, #8
 8004296:	d172      	bne.n	800437e <HAL_RCC_OscConfig+0x44a>
 8004298:	4ba0      	ldr	r3, [pc, #640]	@ (800451c <HAL_RCC_OscConfig+0x5e8>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d16c      	bne.n	800437e <HAL_RCC_OscConfig+0x44a>
 80042a4:	2302      	movs	r3, #2
 80042a6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042aa:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80042ae:	fa93 f3a3 	rbit	r3, r3
 80042b2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80042b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d102      	bne.n	80042d4 <HAL_RCC_OscConfig+0x3a0>
 80042ce:	4b93      	ldr	r3, [pc, #588]	@ (800451c <HAL_RCC_OscConfig+0x5e8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	e013      	b.n	80042fc <HAL_RCC_OscConfig+0x3c8>
 80042d4:	2302      	movs	r3, #2
 80042d6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042da:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80042de:	fa93 f3a3 	rbit	r3, r3
 80042e2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80042e6:	2302      	movs	r3, #2
 80042e8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80042ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80042f0:	fa93 f3a3 	rbit	r3, r3
 80042f4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80042f8:	4b88      	ldr	r3, [pc, #544]	@ (800451c <HAL_RCC_OscConfig+0x5e8>)
 80042fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fc:	2202      	movs	r2, #2
 80042fe:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8004302:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004306:	fa92 f2a2 	rbit	r2, r2
 800430a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800430e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004312:	fab2 f282 	clz	r2, r2
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	f042 0220 	orr.w	r2, r2, #32
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	f002 021f 	and.w	r2, r2, #31
 8004322:	2101      	movs	r1, #1
 8004324:	fa01 f202 	lsl.w	r2, r1, r2
 8004328:	4013      	ands	r3, r2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_RCC_OscConfig+0x410>
 800432e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004332:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d002      	beq.n	8004344 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	f000 be2e 	b.w	8004fa0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004344:	4b75      	ldr	r3, [pc, #468]	@ (800451c <HAL_RCC_OscConfig+0x5e8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800434c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004350:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	21f8      	movs	r1, #248	@ 0xf8
 800435a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004362:	fa91 f1a1 	rbit	r1, r1
 8004366:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800436a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800436e:	fab1 f181 	clz	r1, r1
 8004372:	b2c9      	uxtb	r1, r1
 8004374:	408b      	lsls	r3, r1
 8004376:	4969      	ldr	r1, [pc, #420]	@ (800451c <HAL_RCC_OscConfig+0x5e8>)
 8004378:	4313      	orrs	r3, r2
 800437a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437c:	e0fd      	b.n	800457a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800437e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004382:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 8088 	beq.w	80044a0 <HAL_RCC_OscConfig+0x56c>
 8004390:	2301      	movs	r3, #1
 8004392:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004396:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800439a:	fa93 f3a3 	rbit	r3, r3
 800439e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80043a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a6:	fab3 f383 	clz	r3, r3
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80043b0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	461a      	mov	r2, r3
 80043b8:	2301      	movs	r3, #1
 80043ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043bc:	f7fe fcd8 	bl	8002d70 <HAL_GetTick>
 80043c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c4:	e00a      	b.n	80043dc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043c6:	f7fe fcd3 	bl	8002d70 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d902      	bls.n	80043dc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	f000 bde2 	b.w	8004fa0 <HAL_RCC_OscConfig+0x106c>
 80043dc:	2302      	movs	r3, #2
 80043de:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80043e6:	fa93 f3a3 	rbit	r3, r3
 80043ea:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80043ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f2:	fab3 f383 	clz	r3, r3
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	d102      	bne.n	800440c <HAL_RCC_OscConfig+0x4d8>
 8004406:	4b45      	ldr	r3, [pc, #276]	@ (800451c <HAL_RCC_OscConfig+0x5e8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	e013      	b.n	8004434 <HAL_RCC_OscConfig+0x500>
 800440c:	2302      	movs	r3, #2
 800440e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004412:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004416:	fa93 f3a3 	rbit	r3, r3
 800441a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800441e:	2302      	movs	r3, #2
 8004420:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004424:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004428:	fa93 f3a3 	rbit	r3, r3
 800442c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004430:	4b3a      	ldr	r3, [pc, #232]	@ (800451c <HAL_RCC_OscConfig+0x5e8>)
 8004432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004434:	2202      	movs	r2, #2
 8004436:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800443a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800443e:	fa92 f2a2 	rbit	r2, r2
 8004442:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8004446:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800444a:	fab2 f282 	clz	r2, r2
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	f042 0220 	orr.w	r2, r2, #32
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	f002 021f 	and.w	r2, r2, #31
 800445a:	2101      	movs	r1, #1
 800445c:	fa01 f202 	lsl.w	r2, r1, r2
 8004460:	4013      	ands	r3, r2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0af      	beq.n	80043c6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004466:	4b2d      	ldr	r3, [pc, #180]	@ (800451c <HAL_RCC_OscConfig+0x5e8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800446e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004472:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	21f8      	movs	r1, #248	@ 0xf8
 800447c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004480:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004484:	fa91 f1a1 	rbit	r1, r1
 8004488:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800448c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004490:	fab1 f181 	clz	r1, r1
 8004494:	b2c9      	uxtb	r1, r1
 8004496:	408b      	lsls	r3, r1
 8004498:	4920      	ldr	r1, [pc, #128]	@ (800451c <HAL_RCC_OscConfig+0x5e8>)
 800449a:	4313      	orrs	r3, r2
 800449c:	600b      	str	r3, [r1, #0]
 800449e:	e06c      	b.n	800457a <HAL_RCC_OscConfig+0x646>
 80044a0:	2301      	movs	r3, #1
 80044a2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80044aa:	fa93 f3a3 	rbit	r3, r3
 80044ae:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80044b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044b6:	fab3 f383 	clz	r3, r3
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80044c0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	461a      	mov	r2, r3
 80044c8:	2300      	movs	r3, #0
 80044ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044cc:	f7fe fc50 	bl	8002d70 <HAL_GetTick>
 80044d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d4:	e00a      	b.n	80044ec <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044d6:	f7fe fc4b 	bl	8002d70 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d902      	bls.n	80044ec <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	f000 bd5a 	b.w	8004fa0 <HAL_RCC_OscConfig+0x106c>
 80044ec:	2302      	movs	r3, #2
 80044ee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80044f6:	fa93 f3a3 	rbit	r3, r3
 80044fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80044fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004502:	fab3 f383 	clz	r3, r3
 8004506:	b2db      	uxtb	r3, r3
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	b2db      	uxtb	r3, r3
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b01      	cmp	r3, #1
 8004514:	d104      	bne.n	8004520 <HAL_RCC_OscConfig+0x5ec>
 8004516:	4b01      	ldr	r3, [pc, #4]	@ (800451c <HAL_RCC_OscConfig+0x5e8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	e015      	b.n	8004548 <HAL_RCC_OscConfig+0x614>
 800451c:	40021000 	.word	0x40021000
 8004520:	2302      	movs	r3, #2
 8004522:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800452a:	fa93 f3a3 	rbit	r3, r3
 800452e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004532:	2302      	movs	r3, #2
 8004534:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004538:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800453c:	fa93 f3a3 	rbit	r3, r3
 8004540:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004544:	4bc8      	ldr	r3, [pc, #800]	@ (8004868 <HAL_RCC_OscConfig+0x934>)
 8004546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004548:	2202      	movs	r2, #2
 800454a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800454e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004552:	fa92 f2a2 	rbit	r2, r2
 8004556:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800455a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800455e:	fab2 f282 	clz	r2, r2
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	f042 0220 	orr.w	r2, r2, #32
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	f002 021f 	and.w	r2, r2, #31
 800456e:	2101      	movs	r1, #1
 8004570:	fa01 f202 	lsl.w	r2, r1, r2
 8004574:	4013      	ands	r3, r2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1ad      	bne.n	80044d6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800457a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800457e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 8110 	beq.w	80047b0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004594:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d079      	beq.n	8004694 <HAL_RCC_OscConfig+0x760>
 80045a0:	2301      	movs	r3, #1
 80045a2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80045aa:	fa93 f3a3 	rbit	r3, r3
 80045ae:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80045b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045b6:	fab3 f383 	clz	r3, r3
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	461a      	mov	r2, r3
 80045be:	4bab      	ldr	r3, [pc, #684]	@ (800486c <HAL_RCC_OscConfig+0x938>)
 80045c0:	4413      	add	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	461a      	mov	r2, r3
 80045c6:	2301      	movs	r3, #1
 80045c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ca:	f7fe fbd1 	bl	8002d70 <HAL_GetTick>
 80045ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045d2:	e00a      	b.n	80045ea <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045d4:	f7fe fbcc 	bl	8002d70 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d902      	bls.n	80045ea <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	f000 bcdb 	b.w	8004fa0 <HAL_RCC_OscConfig+0x106c>
 80045ea:	2302      	movs	r3, #2
 80045ec:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80045f4:	fa93 f3a3 	rbit	r3, r3
 80045f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80045fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004600:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004604:	2202      	movs	r2, #2
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800460c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	fa93 f2a3 	rbit	r2, r3
 8004616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800461a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004628:	2202      	movs	r2, #2
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	fa93 f2a3 	rbit	r2, r3
 800463a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800463e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004642:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004644:	4b88      	ldr	r3, [pc, #544]	@ (8004868 <HAL_RCC_OscConfig+0x934>)
 8004646:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800464c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004650:	2102      	movs	r1, #2
 8004652:	6019      	str	r1, [r3, #0]
 8004654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004658:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	fa93 f1a3 	rbit	r1, r3
 8004662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004666:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800466a:	6019      	str	r1, [r3, #0]
  return result;
 800466c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004670:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	fab3 f383 	clz	r3, r3
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f003 031f 	and.w	r3, r3, #31
 8004686:	2101      	movs	r1, #1
 8004688:	fa01 f303 	lsl.w	r3, r1, r3
 800468c:	4013      	ands	r3, r2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0a0      	beq.n	80045d4 <HAL_RCC_OscConfig+0x6a0>
 8004692:	e08d      	b.n	80047b0 <HAL_RCC_OscConfig+0x87c>
 8004694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004698:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800469c:	2201      	movs	r2, #1
 800469e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	fa93 f2a3 	rbit	r2, r3
 80046ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046b2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80046b6:	601a      	str	r2, [r3, #0]
  return result;
 80046b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046bc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80046c0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c2:	fab3 f383 	clz	r3, r3
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	4b68      	ldr	r3, [pc, #416]	@ (800486c <HAL_RCC_OscConfig+0x938>)
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	461a      	mov	r2, r3
 80046d2:	2300      	movs	r3, #0
 80046d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d6:	f7fe fb4b 	bl	8002d70 <HAL_GetTick>
 80046da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046de:	e00a      	b.n	80046f6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046e0:	f7fe fb46 	bl	8002d70 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d902      	bls.n	80046f6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	f000 bc55 	b.w	8004fa0 <HAL_RCC_OscConfig+0x106c>
 80046f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046fa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80046fe:	2202      	movs	r2, #2
 8004700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004706:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	fa93 f2a3 	rbit	r2, r3
 8004710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004714:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800471e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004722:	2202      	movs	r2, #2
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800472a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	fa93 f2a3 	rbit	r2, r3
 8004734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004738:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004742:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004746:	2202      	movs	r2, #2
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800474e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	fa93 f2a3 	rbit	r2, r3
 8004758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800475c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004760:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004762:	4b41      	ldr	r3, [pc, #260]	@ (8004868 <HAL_RCC_OscConfig+0x934>)
 8004764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800476a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800476e:	2102      	movs	r1, #2
 8004770:	6019      	str	r1, [r3, #0]
 8004772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004776:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	fa93 f1a3 	rbit	r1, r3
 8004780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004784:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004788:	6019      	str	r1, [r3, #0]
  return result;
 800478a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800478e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	fab3 f383 	clz	r3, r3
 8004798:	b2db      	uxtb	r3, r3
 800479a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	2101      	movs	r1, #1
 80047a6:	fa01 f303 	lsl.w	r3, r1, r3
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d197      	bne.n	80046e0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 81a1 	beq.w	8004b08 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c6:	2300      	movs	r3, #0
 80047c8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047cc:	4b26      	ldr	r3, [pc, #152]	@ (8004868 <HAL_RCC_OscConfig+0x934>)
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d116      	bne.n	8004806 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d8:	4b23      	ldr	r3, [pc, #140]	@ (8004868 <HAL_RCC_OscConfig+0x934>)
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	4a22      	ldr	r2, [pc, #136]	@ (8004868 <HAL_RCC_OscConfig+0x934>)
 80047de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047e2:	61d3      	str	r3, [r2, #28]
 80047e4:	4b20      	ldr	r3, [pc, #128]	@ (8004868 <HAL_RCC_OscConfig+0x934>)
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80047ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047f0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047fa:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80047fe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004800:	2301      	movs	r3, #1
 8004802:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004806:	4b1a      	ldr	r3, [pc, #104]	@ (8004870 <HAL_RCC_OscConfig+0x93c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d11a      	bne.n	8004848 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004812:	4b17      	ldr	r3, [pc, #92]	@ (8004870 <HAL_RCC_OscConfig+0x93c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a16      	ldr	r2, [pc, #88]	@ (8004870 <HAL_RCC_OscConfig+0x93c>)
 8004818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800481c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800481e:	f7fe faa7 	bl	8002d70 <HAL_GetTick>
 8004822:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004826:	e009      	b.n	800483c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004828:	f7fe faa2 	bl	8002d70 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b64      	cmp	r3, #100	@ 0x64
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e3b1      	b.n	8004fa0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483c:	4b0c      	ldr	r3, [pc, #48]	@ (8004870 <HAL_RCC_OscConfig+0x93c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0ef      	beq.n	8004828 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800484c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d10d      	bne.n	8004874 <HAL_RCC_OscConfig+0x940>
 8004858:	4b03      	ldr	r3, [pc, #12]	@ (8004868 <HAL_RCC_OscConfig+0x934>)
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	4a02      	ldr	r2, [pc, #8]	@ (8004868 <HAL_RCC_OscConfig+0x934>)
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	6213      	str	r3, [r2, #32]
 8004864:	e03c      	b.n	80048e0 <HAL_RCC_OscConfig+0x9ac>
 8004866:	bf00      	nop
 8004868:	40021000 	.word	0x40021000
 800486c:	10908120 	.word	0x10908120
 8004870:	40007000 	.word	0x40007000
 8004874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004878:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10c      	bne.n	800489e <HAL_RCC_OscConfig+0x96a>
 8004884:	4bc1      	ldr	r3, [pc, #772]	@ (8004b8c <HAL_RCC_OscConfig+0xc58>)
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	4ac0      	ldr	r2, [pc, #768]	@ (8004b8c <HAL_RCC_OscConfig+0xc58>)
 800488a:	f023 0301 	bic.w	r3, r3, #1
 800488e:	6213      	str	r3, [r2, #32]
 8004890:	4bbe      	ldr	r3, [pc, #760]	@ (8004b8c <HAL_RCC_OscConfig+0xc58>)
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	4abd      	ldr	r2, [pc, #756]	@ (8004b8c <HAL_RCC_OscConfig+0xc58>)
 8004896:	f023 0304 	bic.w	r3, r3, #4
 800489a:	6213      	str	r3, [r2, #32]
 800489c:	e020      	b.n	80048e0 <HAL_RCC_OscConfig+0x9ac>
 800489e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	2b05      	cmp	r3, #5
 80048ac:	d10c      	bne.n	80048c8 <HAL_RCC_OscConfig+0x994>
 80048ae:	4bb7      	ldr	r3, [pc, #732]	@ (8004b8c <HAL_RCC_OscConfig+0xc58>)
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	4ab6      	ldr	r2, [pc, #728]	@ (8004b8c <HAL_RCC_OscConfig+0xc58>)
 80048b4:	f043 0304 	orr.w	r3, r3, #4
 80048b8:	6213      	str	r3, [r2, #32]
 80048ba:	4bb4      	ldr	r3, [pc, #720]	@ (8004b8c <HAL_RCC_OscConfig+0xc58>)
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	4ab3      	ldr	r2, [pc, #716]	@ (8004b8c <HAL_RCC_OscConfig+0xc58>)
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	6213      	str	r3, [r2, #32]
 80048c6:	e00b      	b.n	80048e0 <HAL_RCC_OscConfig+0x9ac>
 80048c8:	4bb0      	ldr	r3, [pc, #704]	@ (8004b8c <HAL_RCC_OscConfig+0xc58>)
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	4aaf      	ldr	r2, [pc, #700]	@ (8004b8c <HAL_RCC_OscConfig+0xc58>)
 80048ce:	f023 0301 	bic.w	r3, r3, #1
 80048d2:	6213      	str	r3, [r2, #32]
 80048d4:	4bad      	ldr	r3, [pc, #692]	@ (8004b8c <HAL_RCC_OscConfig+0xc58>)
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	4aac      	ldr	r2, [pc, #688]	@ (8004b8c <HAL_RCC_OscConfig+0xc58>)
 80048da:	f023 0304 	bic.w	r3, r3, #4
 80048de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8081 	beq.w	80049f4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f2:	f7fe fa3d 	bl	8002d70 <HAL_GetTick>
 80048f6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fa:	e00b      	b.n	8004914 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048fc:	f7fe fa38 	bl	8002d70 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	f241 3288 	movw	r2, #5000	@ 0x1388
 800490c:	4293      	cmp	r3, r2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e345      	b.n	8004fa0 <HAL_RCC_OscConfig+0x106c>
 8004914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004918:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800491c:	2202      	movs	r2, #2
 800491e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004924:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	fa93 f2a3 	rbit	r2, r3
 800492e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004932:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800493c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004940:	2202      	movs	r2, #2
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004948:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	fa93 f2a3 	rbit	r2, r3
 8004952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004956:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800495a:	601a      	str	r2, [r3, #0]
  return result;
 800495c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004960:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004964:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004966:	fab3 f383 	clz	r3, r3
 800496a:	b2db      	uxtb	r3, r3
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	b2db      	uxtb	r3, r3
 8004970:	f043 0302 	orr.w	r3, r3, #2
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d102      	bne.n	8004980 <HAL_RCC_OscConfig+0xa4c>
 800497a:	4b84      	ldr	r3, [pc, #528]	@ (8004b8c <HAL_RCC_OscConfig+0xc58>)
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	e013      	b.n	80049a8 <HAL_RCC_OscConfig+0xa74>
 8004980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004984:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004988:	2202      	movs	r2, #2
 800498a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004990:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	fa93 f2a3 	rbit	r2, r3
 800499a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800499e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	4b79      	ldr	r3, [pc, #484]	@ (8004b8c <HAL_RCC_OscConfig+0xc58>)
 80049a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049ac:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80049b0:	2102      	movs	r1, #2
 80049b2:	6011      	str	r1, [r2, #0]
 80049b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049b8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	fa92 f1a2 	rbit	r1, r2
 80049c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049c6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80049ca:	6011      	str	r1, [r2, #0]
  return result;
 80049cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049d0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80049d4:	6812      	ldr	r2, [r2, #0]
 80049d6:	fab2 f282 	clz	r2, r2
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	f002 021f 	and.w	r2, r2, #31
 80049e6:	2101      	movs	r1, #1
 80049e8:	fa01 f202 	lsl.w	r2, r1, r2
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d084      	beq.n	80048fc <HAL_RCC_OscConfig+0x9c8>
 80049f2:	e07f      	b.n	8004af4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f4:	f7fe f9bc 	bl	8002d70 <HAL_GetTick>
 80049f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fc:	e00b      	b.n	8004a16 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049fe:	f7fe f9b7 	bl	8002d70 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e2c4      	b.n	8004fa0 <HAL_RCC_OscConfig+0x106c>
 8004a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a1a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004a1e:	2202      	movs	r2, #2
 8004a20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a26:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	fa93 f2a3 	rbit	r2, r3
 8004a30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a34:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a3e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004a42:	2202      	movs	r2, #2
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a4a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	fa93 f2a3 	rbit	r2, r3
 8004a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a58:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004a5c:	601a      	str	r2, [r3, #0]
  return result;
 8004a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a62:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004a66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a68:	fab3 f383 	clz	r3, r3
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	095b      	lsrs	r3, r3, #5
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	f043 0302 	orr.w	r3, r3, #2
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d102      	bne.n	8004a82 <HAL_RCC_OscConfig+0xb4e>
 8004a7c:	4b43      	ldr	r3, [pc, #268]	@ (8004b8c <HAL_RCC_OscConfig+0xc58>)
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	e013      	b.n	8004aaa <HAL_RCC_OscConfig+0xb76>
 8004a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a86:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a92:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	fa93 f2a3 	rbit	r2, r3
 8004a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aa0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	4b39      	ldr	r3, [pc, #228]	@ (8004b8c <HAL_RCC_OscConfig+0xc58>)
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aaa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004aae:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004ab2:	2102      	movs	r1, #2
 8004ab4:	6011      	str	r1, [r2, #0]
 8004ab6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004aba:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	fa92 f1a2 	rbit	r1, r2
 8004ac4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ac8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004acc:	6011      	str	r1, [r2, #0]
  return result;
 8004ace:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ad2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004ad6:	6812      	ldr	r2, [r2, #0]
 8004ad8:	fab2 f282 	clz	r2, r2
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	f002 021f 	and.w	r2, r2, #31
 8004ae8:	2101      	movs	r1, #1
 8004aea:	fa01 f202 	lsl.w	r2, r1, r2
 8004aee:	4013      	ands	r3, r2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d184      	bne.n	80049fe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004af4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d105      	bne.n	8004b08 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afc:	4b23      	ldr	r3, [pc, #140]	@ (8004b8c <HAL_RCC_OscConfig+0xc58>)
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	4a22      	ldr	r2, [pc, #136]	@ (8004b8c <HAL_RCC_OscConfig+0xc58>)
 8004b02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b06:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8242 	beq.w	8004f9e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8004b8c <HAL_RCC_OscConfig+0xc58>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	f000 8213 	beq.w	8004f4e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	f040 8162 	bne.w	8004dfe <HAL_RCC_OscConfig+0xeca>
 8004b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b3e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004b42:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b4c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	fa93 f2a3 	rbit	r2, r3
 8004b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b5a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004b5e:	601a      	str	r2, [r3, #0]
  return result;
 8004b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b64:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004b68:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b6a:	fab3 f383 	clz	r3, r3
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004b74:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b80:	f7fe f8f6 	bl	8002d70 <HAL_GetTick>
 8004b84:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b88:	e00c      	b.n	8004ba4 <HAL_RCC_OscConfig+0xc70>
 8004b8a:	bf00      	nop
 8004b8c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b90:	f7fe f8ee 	bl	8002d70 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e1fd      	b.n	8004fa0 <HAL_RCC_OscConfig+0x106c>
 8004ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ba8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004bac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004bb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bb6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	fa93 f2a3 	rbit	r2, r3
 8004bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bc4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004bc8:	601a      	str	r2, [r3, #0]
  return result;
 8004bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bce:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004bd2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bd4:	fab3 f383 	clz	r3, r3
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d102      	bne.n	8004bee <HAL_RCC_OscConfig+0xcba>
 8004be8:	4bb0      	ldr	r3, [pc, #704]	@ (8004eac <HAL_RCC_OscConfig+0xf78>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	e027      	b.n	8004c3e <HAL_RCC_OscConfig+0xd0a>
 8004bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bf2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004bf6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004bfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c00:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	fa93 f2a3 	rbit	r2, r3
 8004c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c0e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c18:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004c1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c26:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	fa93 f2a3 	rbit	r2, r3
 8004c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c34:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	4b9c      	ldr	r3, [pc, #624]	@ (8004eac <HAL_RCC_OscConfig+0xf78>)
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c42:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004c46:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004c4a:	6011      	str	r1, [r2, #0]
 8004c4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c50:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	fa92 f1a2 	rbit	r1, r2
 8004c5a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c5e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004c62:	6011      	str	r1, [r2, #0]
  return result;
 8004c64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c68:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004c6c:	6812      	ldr	r2, [r2, #0]
 8004c6e:	fab2 f282 	clz	r2, r2
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	f042 0220 	orr.w	r2, r2, #32
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	f002 021f 	and.w	r2, r2, #31
 8004c7e:	2101      	movs	r1, #1
 8004c80:	fa01 f202 	lsl.w	r2, r1, r2
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d182      	bne.n	8004b90 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c8a:	4b88      	ldr	r3, [pc, #544]	@ (8004eac <HAL_RCC_OscConfig+0xf78>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ca2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	430b      	orrs	r3, r1
 8004cac:	497f      	ldr	r1, [pc, #508]	@ (8004eac <HAL_RCC_OscConfig+0xf78>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	604b      	str	r3, [r1, #4]
 8004cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cb6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004cba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004cbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cc4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	fa93 f2a3 	rbit	r2, r3
 8004cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cd2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004cd6:	601a      	str	r2, [r3, #0]
  return result;
 8004cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cdc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004ce0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ce2:	fab3 f383 	clz	r3, r3
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004cec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf8:	f7fe f83a 	bl	8002d70 <HAL_GetTick>
 8004cfc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d00:	e009      	b.n	8004d16 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d02:	f7fe f835 	bl	8002d70 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e144      	b.n	8004fa0 <HAL_RCC_OscConfig+0x106c>
 8004d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d1a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004d1e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d28:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	fa93 f2a3 	rbit	r2, r3
 8004d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d36:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004d3a:	601a      	str	r2, [r3, #0]
  return result;
 8004d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d40:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004d44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d46:	fab3 f383 	clz	r3, r3
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	095b      	lsrs	r3, r3, #5
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d102      	bne.n	8004d60 <HAL_RCC_OscConfig+0xe2c>
 8004d5a:	4b54      	ldr	r3, [pc, #336]	@ (8004eac <HAL_RCC_OscConfig+0xf78>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	e027      	b.n	8004db0 <HAL_RCC_OscConfig+0xe7c>
 8004d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d64:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004d68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d72:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	fa93 f2a3 	rbit	r2, r3
 8004d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d80:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d8a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004d8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d98:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	fa93 f2a3 	rbit	r2, r3
 8004da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004da6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	4b3f      	ldr	r3, [pc, #252]	@ (8004eac <HAL_RCC_OscConfig+0xf78>)
 8004dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004db4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004db8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004dbc:	6011      	str	r1, [r2, #0]
 8004dbe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004dc2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	fa92 f1a2 	rbit	r1, r2
 8004dcc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004dd0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004dd4:	6011      	str	r1, [r2, #0]
  return result;
 8004dd6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004dda:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004dde:	6812      	ldr	r2, [r2, #0]
 8004de0:	fab2 f282 	clz	r2, r2
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	f042 0220 	orr.w	r2, r2, #32
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	f002 021f 	and.w	r2, r2, #31
 8004df0:	2101      	movs	r1, #1
 8004df2:	fa01 f202 	lsl.w	r2, r1, r2
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d082      	beq.n	8004d02 <HAL_RCC_OscConfig+0xdce>
 8004dfc:	e0cf      	b.n	8004f9e <HAL_RCC_OscConfig+0x106a>
 8004dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e02:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004e06:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e10:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	fa93 f2a3 	rbit	r2, r3
 8004e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e1e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004e22:	601a      	str	r2, [r3, #0]
  return result;
 8004e24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e28:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004e2c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e2e:	fab3 f383 	clz	r3, r3
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004e38:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	461a      	mov	r2, r3
 8004e40:	2300      	movs	r3, #0
 8004e42:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e44:	f7fd ff94 	bl	8002d70 <HAL_GetTick>
 8004e48:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e4c:	e009      	b.n	8004e62 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e4e:	f7fd ff8f 	bl	8002d70 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e09e      	b.n	8004fa0 <HAL_RCC_OscConfig+0x106c>
 8004e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e66:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004e6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e74:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	fa93 f2a3 	rbit	r2, r3
 8004e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e82:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004e86:	601a      	str	r2, [r3, #0]
  return result;
 8004e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e8c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004e90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e92:	fab3 f383 	clz	r3, r3
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	095b      	lsrs	r3, r3, #5
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	f043 0301 	orr.w	r3, r3, #1
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d104      	bne.n	8004eb0 <HAL_RCC_OscConfig+0xf7c>
 8004ea6:	4b01      	ldr	r3, [pc, #4]	@ (8004eac <HAL_RCC_OscConfig+0xf78>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	e029      	b.n	8004f00 <HAL_RCC_OscConfig+0xfcc>
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eb4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004eb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ebc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ec2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	fa93 f2a3 	rbit	r2, r3
 8004ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ed0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eda:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004ede:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ee8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	fa93 f2a3 	rbit	r2, r3
 8004ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ef6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	4b2b      	ldr	r3, [pc, #172]	@ (8004fac <HAL_RCC_OscConfig+0x1078>)
 8004efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f04:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004f08:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004f0c:	6011      	str	r1, [r2, #0]
 8004f0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f12:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	fa92 f1a2 	rbit	r1, r2
 8004f1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f20:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004f24:	6011      	str	r1, [r2, #0]
  return result;
 8004f26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f2a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	fab2 f282 	clz	r2, r2
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	f042 0220 	orr.w	r2, r2, #32
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	f002 021f 	and.w	r2, r2, #31
 8004f40:	2101      	movs	r1, #1
 8004f42:	fa01 f202 	lsl.w	r2, r1, r2
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d180      	bne.n	8004e4e <HAL_RCC_OscConfig+0xf1a>
 8004f4c:	e027      	b.n	8004f9e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e01e      	b.n	8004fa0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f62:	4b12      	ldr	r3, [pc, #72]	@ (8004fac <HAL_RCC_OscConfig+0x1078>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004f6a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004f6e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d10b      	bne.n	8004f9a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004f82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004f86:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004f8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d001      	beq.n	8004f9e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	40021000 	.word	0x40021000

08004fb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b09e      	sub	sp, #120	@ 0x78
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e162      	b.n	800528e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc8:	4b90      	ldr	r3, [pc, #576]	@ (800520c <HAL_RCC_ClockConfig+0x25c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d910      	bls.n	8004ff8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd6:	4b8d      	ldr	r3, [pc, #564]	@ (800520c <HAL_RCC_ClockConfig+0x25c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f023 0207 	bic.w	r2, r3, #7
 8004fde:	498b      	ldr	r1, [pc, #556]	@ (800520c <HAL_RCC_ClockConfig+0x25c>)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe6:	4b89      	ldr	r3, [pc, #548]	@ (800520c <HAL_RCC_ClockConfig+0x25c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d001      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e14a      	b.n	800528e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d008      	beq.n	8005016 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005004:	4b82      	ldr	r3, [pc, #520]	@ (8005210 <HAL_RCC_ClockConfig+0x260>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	497f      	ldr	r1, [pc, #508]	@ (8005210 <HAL_RCC_ClockConfig+0x260>)
 8005012:	4313      	orrs	r3, r2
 8005014:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 80dc 	beq.w	80051dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d13c      	bne.n	80050a6 <HAL_RCC_ClockConfig+0xf6>
 800502c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005030:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005032:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005034:	fa93 f3a3 	rbit	r3, r3
 8005038:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800503a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503c:	fab3 f383 	clz	r3, r3
 8005040:	b2db      	uxtb	r3, r3
 8005042:	095b      	lsrs	r3, r3, #5
 8005044:	b2db      	uxtb	r3, r3
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	d102      	bne.n	8005056 <HAL_RCC_ClockConfig+0xa6>
 8005050:	4b6f      	ldr	r3, [pc, #444]	@ (8005210 <HAL_RCC_ClockConfig+0x260>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	e00f      	b.n	8005076 <HAL_RCC_ClockConfig+0xc6>
 8005056:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800505a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800505e:	fa93 f3a3 	rbit	r3, r3
 8005062:	667b      	str	r3, [r7, #100]	@ 0x64
 8005064:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005068:	663b      	str	r3, [r7, #96]	@ 0x60
 800506a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800506c:	fa93 f3a3 	rbit	r3, r3
 8005070:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005072:	4b67      	ldr	r3, [pc, #412]	@ (8005210 <HAL_RCC_ClockConfig+0x260>)
 8005074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005076:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800507a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800507c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800507e:	fa92 f2a2 	rbit	r2, r2
 8005082:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005084:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005086:	fab2 f282 	clz	r2, r2
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	f042 0220 	orr.w	r2, r2, #32
 8005090:	b2d2      	uxtb	r2, r2
 8005092:	f002 021f 	and.w	r2, r2, #31
 8005096:	2101      	movs	r1, #1
 8005098:	fa01 f202 	lsl.w	r2, r1, r2
 800509c:	4013      	ands	r3, r2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d17b      	bne.n	800519a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e0f3      	b.n	800528e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d13c      	bne.n	8005128 <HAL_RCC_ClockConfig+0x178>
 80050ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050b2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050b6:	fa93 f3a3 	rbit	r3, r3
 80050ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80050bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050be:	fab3 f383 	clz	r3, r3
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	095b      	lsrs	r3, r3, #5
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	f043 0301 	orr.w	r3, r3, #1
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d102      	bne.n	80050d8 <HAL_RCC_ClockConfig+0x128>
 80050d2:	4b4f      	ldr	r3, [pc, #316]	@ (8005210 <HAL_RCC_ClockConfig+0x260>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	e00f      	b.n	80050f8 <HAL_RCC_ClockConfig+0x148>
 80050d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050e0:	fa93 f3a3 	rbit	r3, r3
 80050e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80050e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80050ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050ee:	fa93 f3a3 	rbit	r3, r3
 80050f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050f4:	4b46      	ldr	r3, [pc, #280]	@ (8005210 <HAL_RCC_ClockConfig+0x260>)
 80050f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050fc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80050fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005100:	fa92 f2a2 	rbit	r2, r2
 8005104:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8005106:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005108:	fab2 f282 	clz	r2, r2
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	f042 0220 	orr.w	r2, r2, #32
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	f002 021f 	and.w	r2, r2, #31
 8005118:	2101      	movs	r1, #1
 800511a:	fa01 f202 	lsl.w	r2, r1, r2
 800511e:	4013      	ands	r3, r2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d13a      	bne.n	800519a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e0b2      	b.n	800528e <HAL_RCC_ClockConfig+0x2de>
 8005128:	2302      	movs	r3, #2
 800512a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512e:	fa93 f3a3 	rbit	r3, r3
 8005132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005136:	fab3 f383 	clz	r3, r3
 800513a:	b2db      	uxtb	r3, r3
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	b2db      	uxtb	r3, r3
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b01      	cmp	r3, #1
 8005148:	d102      	bne.n	8005150 <HAL_RCC_ClockConfig+0x1a0>
 800514a:	4b31      	ldr	r3, [pc, #196]	@ (8005210 <HAL_RCC_ClockConfig+0x260>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	e00d      	b.n	800516c <HAL_RCC_ClockConfig+0x1bc>
 8005150:	2302      	movs	r3, #2
 8005152:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005156:	fa93 f3a3 	rbit	r3, r3
 800515a:	627b      	str	r3, [r7, #36]	@ 0x24
 800515c:	2302      	movs	r3, #2
 800515e:	623b      	str	r3, [r7, #32]
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	fa93 f3a3 	rbit	r3, r3
 8005166:	61fb      	str	r3, [r7, #28]
 8005168:	4b29      	ldr	r3, [pc, #164]	@ (8005210 <HAL_RCC_ClockConfig+0x260>)
 800516a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516c:	2202      	movs	r2, #2
 800516e:	61ba      	str	r2, [r7, #24]
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	fa92 f2a2 	rbit	r2, r2
 8005176:	617a      	str	r2, [r7, #20]
  return result;
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	fab2 f282 	clz	r2, r2
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	f042 0220 	orr.w	r2, r2, #32
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	f002 021f 	and.w	r2, r2, #31
 800518a:	2101      	movs	r1, #1
 800518c:	fa01 f202 	lsl.w	r2, r1, r2
 8005190:	4013      	ands	r3, r2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e079      	b.n	800528e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800519a:	4b1d      	ldr	r3, [pc, #116]	@ (8005210 <HAL_RCC_ClockConfig+0x260>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f023 0203 	bic.w	r2, r3, #3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	491a      	ldr	r1, [pc, #104]	@ (8005210 <HAL_RCC_ClockConfig+0x260>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051ac:	f7fd fde0 	bl	8002d70 <HAL_GetTick>
 80051b0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b2:	e00a      	b.n	80051ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051b4:	f7fd fddc 	bl	8002d70 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e061      	b.n	800528e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ca:	4b11      	ldr	r3, [pc, #68]	@ (8005210 <HAL_RCC_ClockConfig+0x260>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f003 020c 	and.w	r2, r3, #12
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	429a      	cmp	r2, r3
 80051da:	d1eb      	bne.n	80051b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051dc:	4b0b      	ldr	r3, [pc, #44]	@ (800520c <HAL_RCC_ClockConfig+0x25c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d214      	bcs.n	8005214 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ea:	4b08      	ldr	r3, [pc, #32]	@ (800520c <HAL_RCC_ClockConfig+0x25c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f023 0207 	bic.w	r2, r3, #7
 80051f2:	4906      	ldr	r1, [pc, #24]	@ (800520c <HAL_RCC_ClockConfig+0x25c>)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fa:	4b04      	ldr	r3, [pc, #16]	@ (800520c <HAL_RCC_ClockConfig+0x25c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d005      	beq.n	8005214 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e040      	b.n	800528e <HAL_RCC_ClockConfig+0x2de>
 800520c:	40022000 	.word	0x40022000
 8005210:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005220:	4b1d      	ldr	r3, [pc, #116]	@ (8005298 <HAL_RCC_ClockConfig+0x2e8>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	491a      	ldr	r1, [pc, #104]	@ (8005298 <HAL_RCC_ClockConfig+0x2e8>)
 800522e:	4313      	orrs	r3, r2
 8005230:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d009      	beq.n	8005252 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800523e:	4b16      	ldr	r3, [pc, #88]	@ (8005298 <HAL_RCC_ClockConfig+0x2e8>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	4912      	ldr	r1, [pc, #72]	@ (8005298 <HAL_RCC_ClockConfig+0x2e8>)
 800524e:	4313      	orrs	r3, r2
 8005250:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005252:	f000 f829 	bl	80052a8 <HAL_RCC_GetSysClockFreq>
 8005256:	4601      	mov	r1, r0
 8005258:	4b0f      	ldr	r3, [pc, #60]	@ (8005298 <HAL_RCC_ClockConfig+0x2e8>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005260:	22f0      	movs	r2, #240	@ 0xf0
 8005262:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	fa92 f2a2 	rbit	r2, r2
 800526a:	60fa      	str	r2, [r7, #12]
  return result;
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	fab2 f282 	clz	r2, r2
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	40d3      	lsrs	r3, r2
 8005276:	4a09      	ldr	r2, [pc, #36]	@ (800529c <HAL_RCC_ClockConfig+0x2ec>)
 8005278:	5cd3      	ldrb	r3, [r2, r3]
 800527a:	fa21 f303 	lsr.w	r3, r1, r3
 800527e:	4a08      	ldr	r2, [pc, #32]	@ (80052a0 <HAL_RCC_ClockConfig+0x2f0>)
 8005280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005282:	4b08      	ldr	r3, [pc, #32]	@ (80052a4 <HAL_RCC_ClockConfig+0x2f4>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f7fd fd2e 	bl	8002ce8 <HAL_InitTick>
  
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3778      	adds	r7, #120	@ 0x78
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40021000 	.word	0x40021000
 800529c:	0800ce54 	.word	0x0800ce54
 80052a0:	20000014 	.word	0x20000014
 80052a4:	20000018 	.word	0x20000018

080052a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b08b      	sub	sp, #44	@ 0x2c
 80052ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
 80052b2:	2300      	movs	r3, #0
 80052b4:	61bb      	str	r3, [r7, #24]
 80052b6:	2300      	movs	r3, #0
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80052c2:	4b29      	ldr	r3, [pc, #164]	@ (8005368 <HAL_RCC_GetSysClockFreq+0xc0>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f003 030c 	and.w	r3, r3, #12
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d002      	beq.n	80052d8 <HAL_RCC_GetSysClockFreq+0x30>
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d003      	beq.n	80052de <HAL_RCC_GetSysClockFreq+0x36>
 80052d6:	e03c      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052d8:	4b24      	ldr	r3, [pc, #144]	@ (800536c <HAL_RCC_GetSysClockFreq+0xc4>)
 80052da:	623b      	str	r3, [r7, #32]
      break;
 80052dc:	e03c      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80052e4:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80052e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	fa92 f2a2 	rbit	r2, r2
 80052f0:	607a      	str	r2, [r7, #4]
  return result;
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	fab2 f282 	clz	r2, r2
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	40d3      	lsrs	r3, r2
 80052fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005370 <HAL_RCC_GetSysClockFreq+0xc8>)
 80052fe:	5cd3      	ldrb	r3, [r2, r3]
 8005300:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005302:	4b19      	ldr	r3, [pc, #100]	@ (8005368 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	220f      	movs	r2, #15
 800530c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	fa92 f2a2 	rbit	r2, r2
 8005314:	60fa      	str	r2, [r7, #12]
  return result;
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	fab2 f282 	clz	r2, r2
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	40d3      	lsrs	r3, r2
 8005320:	4a14      	ldr	r2, [pc, #80]	@ (8005374 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005322:	5cd3      	ldrb	r3, [r2, r3]
 8005324:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d008      	beq.n	8005342 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005330:	4a0e      	ldr	r2, [pc, #56]	@ (800536c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	fbb2 f2f3 	udiv	r2, r2, r3
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	fb02 f303 	mul.w	r3, r2, r3
 800533e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005340:	e004      	b.n	800534c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	4a0c      	ldr	r2, [pc, #48]	@ (8005378 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800534c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534e:	623b      	str	r3, [r7, #32]
      break;
 8005350:	e002      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005352:	4b0a      	ldr	r3, [pc, #40]	@ (800537c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005354:	623b      	str	r3, [r7, #32]
      break;
 8005356:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005358:	6a3b      	ldr	r3, [r7, #32]
}
 800535a:	4618      	mov	r0, r3
 800535c:	372c      	adds	r7, #44	@ 0x2c
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40021000 	.word	0x40021000
 800536c:	00b71b00 	.word	0x00b71b00
 8005370:	0800ce6c 	.word	0x0800ce6c
 8005374:	0800ce7c 	.word	0x0800ce7c
 8005378:	003d0900 	.word	0x003d0900
 800537c:	007a1200 	.word	0x007a1200

08005380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005384:	4b03      	ldr	r3, [pc, #12]	@ (8005394 <HAL_RCC_GetHCLKFreq+0x14>)
 8005386:	681b      	ldr	r3, [r3, #0]
}
 8005388:	4618      	mov	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	20000014 	.word	0x20000014

08005398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800539e:	f7ff ffef 	bl	8005380 <HAL_RCC_GetHCLKFreq>
 80053a2:	4601      	mov	r1, r0
 80053a4:	4b0b      	ldr	r3, [pc, #44]	@ (80053d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053ac:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80053b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	fa92 f2a2 	rbit	r2, r2
 80053b8:	603a      	str	r2, [r7, #0]
  return result;
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	fab2 f282 	clz	r2, r2
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	40d3      	lsrs	r3, r2
 80053c4:	4a04      	ldr	r2, [pc, #16]	@ (80053d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80053c6:	5cd3      	ldrb	r3, [r2, r3]
 80053c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40021000 	.word	0x40021000
 80053d8:	0800ce64 	.word	0x0800ce64

080053dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80053e2:	f7ff ffcd 	bl	8005380 <HAL_RCC_GetHCLKFreq>
 80053e6:	4601      	mov	r1, r0
 80053e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005418 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80053f0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80053f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	fa92 f2a2 	rbit	r2, r2
 80053fc:	603a      	str	r2, [r7, #0]
  return result;
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	fab2 f282 	clz	r2, r2
 8005404:	b2d2      	uxtb	r2, r2
 8005406:	40d3      	lsrs	r3, r2
 8005408:	4a04      	ldr	r2, [pc, #16]	@ (800541c <HAL_RCC_GetPCLK2Freq+0x40>)
 800540a:	5cd3      	ldrb	r3, [r2, r3]
 800540c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005410:	4618      	mov	r0, r3
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40021000 	.word	0x40021000
 800541c:	0800ce64 	.word	0x0800ce64

08005420 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b092      	sub	sp, #72	@ 0x48
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005430:	2300      	movs	r3, #0
 8005432:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 80d4 	beq.w	80055ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005444:	4b4e      	ldr	r3, [pc, #312]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10e      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005450:	4b4b      	ldr	r3, [pc, #300]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	4a4a      	ldr	r2, [pc, #296]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800545a:	61d3      	str	r3, [r2, #28]
 800545c:	4b48      	ldr	r3, [pc, #288]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005464:	60bb      	str	r3, [r7, #8]
 8005466:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005468:	2301      	movs	r3, #1
 800546a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800546e:	4b45      	ldr	r3, [pc, #276]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005476:	2b00      	cmp	r3, #0
 8005478:	d118      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800547a:	4b42      	ldr	r3, [pc, #264]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a41      	ldr	r2, [pc, #260]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005484:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005486:	f7fd fc73 	bl	8002d70 <HAL_GetTick>
 800548a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800548c:	e008      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800548e:	f7fd fc6f 	bl	8002d70 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b64      	cmp	r3, #100	@ 0x64
 800549a:	d901      	bls.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e12d      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a0:	4b38      	ldr	r3, [pc, #224]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054ac:	4b34      	ldr	r3, [pc, #208]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 8084 	beq.w	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d07c      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054cc:	4b2c      	ldr	r3, [pc, #176]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80054da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054de:	fa93 f3a3 	rbit	r3, r3
 80054e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80054e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054e6:	fab3 f383 	clz	r3, r3
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	461a      	mov	r2, r3
 80054ee:	4b26      	ldr	r3, [pc, #152]	@ (8005588 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	461a      	mov	r2, r3
 80054f6:	2301      	movs	r3, #1
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80054fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005502:	fa93 f3a3 	rbit	r3, r3
 8005506:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800550a:	fab3 f383 	clz	r3, r3
 800550e:	b2db      	uxtb	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	4b1d      	ldr	r3, [pc, #116]	@ (8005588 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005514:	4413      	add	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	461a      	mov	r2, r3
 800551a:	2300      	movs	r3, #0
 800551c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800551e:	4a18      	ldr	r2, [pc, #96]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005522:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d04b      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552e:	f7fd fc1f 	bl	8002d70 <HAL_GetTick>
 8005532:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005534:	e00a      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005536:	f7fd fc1b 	bl	8002d70 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005544:	4293      	cmp	r3, r2
 8005546:	d901      	bls.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e0d7      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800554c:	2302      	movs	r3, #2
 800554e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005552:	fa93 f3a3 	rbit	r3, r3
 8005556:	627b      	str	r3, [r7, #36]	@ 0x24
 8005558:	2302      	movs	r3, #2
 800555a:	623b      	str	r3, [r7, #32]
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	fa93 f3a3 	rbit	r3, r3
 8005562:	61fb      	str	r3, [r7, #28]
  return result;
 8005564:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005566:	fab3 f383 	clz	r3, r3
 800556a:	b2db      	uxtb	r3, r3
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	b2db      	uxtb	r3, r3
 8005570:	f043 0302 	orr.w	r3, r3, #2
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d108      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800557a:	4b01      	ldr	r3, [pc, #4]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	e00d      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005580:	40021000 	.word	0x40021000
 8005584:	40007000 	.word	0x40007000
 8005588:	10908100 	.word	0x10908100
 800558c:	2302      	movs	r3, #2
 800558e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	fa93 f3a3 	rbit	r3, r3
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	4b5a      	ldr	r3, [pc, #360]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800559a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559c:	2202      	movs	r2, #2
 800559e:	613a      	str	r2, [r7, #16]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	fa92 f2a2 	rbit	r2, r2
 80055a6:	60fa      	str	r2, [r7, #12]
  return result;
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	fab2 f282 	clz	r2, r2
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	f002 021f 	and.w	r2, r2, #31
 80055ba:	2101      	movs	r1, #1
 80055bc:	fa01 f202 	lsl.w	r2, r1, r2
 80055c0:	4013      	ands	r3, r2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0b7      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80055c6:	4b4f      	ldr	r3, [pc, #316]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	494c      	ldr	r1, [pc, #304]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d105      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055e0:	4b48      	ldr	r3, [pc, #288]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	4a47      	ldr	r2, [pc, #284]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80055e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d008      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055f8:	4b42      	ldr	r3, [pc, #264]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80055fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fc:	f023 0203 	bic.w	r2, r3, #3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	493f      	ldr	r1, [pc, #252]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005606:	4313      	orrs	r3, r2
 8005608:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d008      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005616:	4b3b      	ldr	r3, [pc, #236]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	4938      	ldr	r1, [pc, #224]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005624:	4313      	orrs	r3, r2
 8005626:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005634:	4b33      	ldr	r3, [pc, #204]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005638:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	4930      	ldr	r1, [pc, #192]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005642:	4313      	orrs	r3, r2
 8005644:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	2b00      	cmp	r3, #0
 8005650:	d008      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005652:	4b2c      	ldr	r3, [pc, #176]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005656:	f023 0210 	bic.w	r2, r3, #16
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	4929      	ldr	r1, [pc, #164]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005660:	4313      	orrs	r3, r2
 8005662:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005670:	4b24      	ldr	r3, [pc, #144]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567c:	4921      	ldr	r1, [pc, #132]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800567e:	4313      	orrs	r3, r2
 8005680:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d008      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800568e:	4b1d      	ldr	r3, [pc, #116]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005692:	f023 0220 	bic.w	r2, r3, #32
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	491a      	ldr	r1, [pc, #104]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800569c:	4313      	orrs	r3, r2
 800569e:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d008      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80056ac:	4b15      	ldr	r3, [pc, #84]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	4912      	ldr	r1, [pc, #72]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d008      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 80056ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	490b      	ldr	r1, [pc, #44]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d008      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80056e8:	4b06      	ldr	r3, [pc, #24]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ec:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f4:	4903      	ldr	r1, [pc, #12]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3748      	adds	r7, #72	@ 0x48
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40021000 	.word	0x40021000

08005708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e041      	b.n	800579e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d106      	bne.n	8005734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fc ffc6 	bl	80026c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3304      	adds	r3, #4
 8005744:	4619      	mov	r1, r3
 8005746:	4610      	mov	r0, r2
 8005748:	f000 fc4a 	bl	8005fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d001      	beq.n	80057c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e041      	b.n	8005844 <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d0:	d01d      	beq.n	800580e <HAL_TIM_Base_Start+0x66>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005850 <HAL_TIM_Base_Start+0xa8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d018      	beq.n	800580e <HAL_TIM_Base_Start+0x66>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005854 <HAL_TIM_Base_Start+0xac>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d013      	beq.n	800580e <HAL_TIM_Base_Start+0x66>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005858 <HAL_TIM_Base_Start+0xb0>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00e      	beq.n	800580e <HAL_TIM_Base_Start+0x66>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a19      	ldr	r2, [pc, #100]	@ (800585c <HAL_TIM_Base_Start+0xb4>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d009      	beq.n	800580e <HAL_TIM_Base_Start+0x66>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a18      	ldr	r2, [pc, #96]	@ (8005860 <HAL_TIM_Base_Start+0xb8>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d004      	beq.n	800580e <HAL_TIM_Base_Start+0x66>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a16      	ldr	r2, [pc, #88]	@ (8005864 <HAL_TIM_Base_Start+0xbc>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d111      	bne.n	8005832 <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f003 0307 	and.w	r3, r3, #7
 8005818:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b06      	cmp	r3, #6
 800581e:	d010      	beq.n	8005842 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005830:	e007      	b.n	8005842 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 0201 	orr.w	r2, r2, #1
 8005840:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	40000400 	.word	0x40000400
 8005854:	40000800 	.word	0x40000800
 8005858:	40000c00 	.word	0x40000c00
 800585c:	40001800 	.word	0x40001800
 8005860:	40014000 	.word	0x40014000
 8005864:	40015c00 	.word	0x40015c00

08005868 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6a1a      	ldr	r2, [r3, #32]
 8005876:	f241 1311 	movw	r3, #4369	@ 0x1111
 800587a:	4013      	ands	r3, r2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10f      	bne.n	80058a0 <HAL_TIM_Base_Stop+0x38>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6a1a      	ldr	r2, [r3, #32]
 8005886:	f240 4344 	movw	r3, #1092	@ 0x444
 800588a:	4013      	ands	r3, r2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d107      	bne.n	80058a0 <HAL_TIM_Base_Stop+0x38>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0201 	bic.w	r2, r2, #1
 800589e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
	...

080058b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d001      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e049      	b.n	8005964 <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058f0:	d01d      	beq.n	800592e <HAL_TIM_Base_Start_IT+0x76>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005970 <HAL_TIM_Base_Start_IT+0xb8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d018      	beq.n	800592e <HAL_TIM_Base_Start_IT+0x76>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1c      	ldr	r2, [pc, #112]	@ (8005974 <HAL_TIM_Base_Start_IT+0xbc>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d013      	beq.n	800592e <HAL_TIM_Base_Start_IT+0x76>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1b      	ldr	r2, [pc, #108]	@ (8005978 <HAL_TIM_Base_Start_IT+0xc0>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00e      	beq.n	800592e <HAL_TIM_Base_Start_IT+0x76>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a19      	ldr	r2, [pc, #100]	@ (800597c <HAL_TIM_Base_Start_IT+0xc4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d009      	beq.n	800592e <HAL_TIM_Base_Start_IT+0x76>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a18      	ldr	r2, [pc, #96]	@ (8005980 <HAL_TIM_Base_Start_IT+0xc8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d004      	beq.n	800592e <HAL_TIM_Base_Start_IT+0x76>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a16      	ldr	r2, [pc, #88]	@ (8005984 <HAL_TIM_Base_Start_IT+0xcc>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d111      	bne.n	8005952 <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2b06      	cmp	r3, #6
 800593e:	d010      	beq.n	8005962 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005950:	e007      	b.n	8005962 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 0201 	orr.w	r2, r2, #1
 8005960:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40001800 	.word	0x40001800
 8005980:	40014000 	.word	0x40014000
 8005984:	40015c00 	.word	0x40015c00

08005988 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e097      	b.n	8005acc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d106      	bne.n	80059b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7fc fec5 	bl	8002740 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6812      	ldr	r2, [r2, #0]
 80059c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059cc:	f023 0307 	bic.w	r3, r3, #7
 80059d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	3304      	adds	r3, #4
 80059da:	4619      	mov	r1, r3
 80059dc:	4610      	mov	r0, r2
 80059de:	f000 faff 	bl	8005fe0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a0a:	f023 0303 	bic.w	r3, r3, #3
 8005a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	021b      	lsls	r3, r3, #8
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005a28:	f023 030c 	bic.w	r3, r3, #12
 8005a2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	021b      	lsls	r3, r3, #8
 8005a44:	4313      	orrs	r3, r2
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	011a      	lsls	r2, r3, #4
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	031b      	lsls	r3, r3, #12
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005a6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ae4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005aec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005af4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005afc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d110      	bne.n	8005b26 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d102      	bne.n	8005b10 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b0a:	7b7b      	ldrb	r3, [r7, #13]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d001      	beq.n	8005b14 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e069      	b.n	8005be8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b24:	e031      	b.n	8005b8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d110      	bne.n	8005b4e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b2c:	7bbb      	ldrb	r3, [r7, #14]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d102      	bne.n	8005b38 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b32:	7b3b      	ldrb	r3, [r7, #12]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d001      	beq.n	8005b3c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e055      	b.n	8005be8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b4c:	e01d      	b.n	8005b8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d108      	bne.n	8005b66 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b54:	7bbb      	ldrb	r3, [r7, #14]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d105      	bne.n	8005b66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b5a:	7b7b      	ldrb	r3, [r7, #13]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d102      	bne.n	8005b66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b60:	7b3b      	ldrb	r3, [r7, #12]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d001      	beq.n	8005b6a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e03e      	b.n	8005be8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2202      	movs	r2, #2
 8005b76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2202      	movs	r2, #2
 8005b86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <HAL_TIM_Encoder_Start+0xc4>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d008      	beq.n	8005ba8 <HAL_TIM_Encoder_Start+0xd4>
 8005b96:	e00f      	b.n	8005bb8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 fb51 	bl	8006248 <TIM_CCxChannelCmd>
      break;
 8005ba6:	e016      	b.n	8005bd6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2201      	movs	r2, #1
 8005bae:	2104      	movs	r1, #4
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fb49 	bl	8006248 <TIM_CCxChannelCmd>
      break;
 8005bb6:	e00e      	b.n	8005bd6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fb41 	bl	8006248 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	2104      	movs	r1, #4
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fb3a 	bl	8006248 <TIM_CCxChannelCmd>
      break;
 8005bd4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0201 	orr.w	r2, r2, #1
 8005be4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d122      	bne.n	8005c4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d11b      	bne.n	8005c4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f06f 0202 	mvn.w	r2, #2
 8005c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f9b5 	bl	8005fa2 <HAL_TIM_IC_CaptureCallback>
 8005c38:	e005      	b.n	8005c46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f9a7 	bl	8005f8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f9b8 	bl	8005fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d122      	bne.n	8005ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d11b      	bne.n	8005ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f06f 0204 	mvn.w	r2, #4
 8005c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2202      	movs	r2, #2
 8005c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f98b 	bl	8005fa2 <HAL_TIM_IC_CaptureCallback>
 8005c8c:	e005      	b.n	8005c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f97d 	bl	8005f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f98e 	bl	8005fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	f003 0308 	and.w	r3, r3, #8
 8005caa:	2b08      	cmp	r3, #8
 8005cac:	d122      	bne.n	8005cf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d11b      	bne.n	8005cf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f06f 0208 	mvn.w	r2, #8
 8005cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2204      	movs	r2, #4
 8005cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f961 	bl	8005fa2 <HAL_TIM_IC_CaptureCallback>
 8005ce0:	e005      	b.n	8005cee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f953 	bl	8005f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f964 	bl	8005fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f003 0310 	and.w	r3, r3, #16
 8005cfe:	2b10      	cmp	r3, #16
 8005d00:	d122      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	2b10      	cmp	r3, #16
 8005d0e:	d11b      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f06f 0210 	mvn.w	r2, #16
 8005d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2208      	movs	r2, #8
 8005d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f937 	bl	8005fa2 <HAL_TIM_IC_CaptureCallback>
 8005d34:	e005      	b.n	8005d42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f929 	bl	8005f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f93a 	bl	8005fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d10e      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d107      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0201 	mvn.w	r2, #1
 8005d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fc fa04 	bl	800217c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d7e:	2b80      	cmp	r3, #128	@ 0x80
 8005d80:	d10e      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d8c:	2b80      	cmp	r3, #128	@ 0x80
 8005d8e:	d107      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 faf8 	bl	8006390 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005daa:	2b40      	cmp	r3, #64	@ 0x40
 8005dac:	d10e      	bne.n	8005dcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db8:	2b40      	cmp	r3, #64	@ 0x40
 8005dba:	d107      	bne.n	8005dcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f8ff 	bl	8005fca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d10e      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f003 0320 	and.w	r3, r3, #32
 8005de4:	2b20      	cmp	r3, #32
 8005de6:	d107      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f06f 0220 	mvn.w	r2, #32
 8005df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fac2 	bl	800637c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005df8:	bf00      	nop
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_TIM_ConfigClockSource+0x1c>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e0b4      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x186>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e54:	d03e      	beq.n	8005ed4 <HAL_TIM_ConfigClockSource+0xd4>
 8005e56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e5a:	f200 8087 	bhi.w	8005f6c <HAL_TIM_ConfigClockSource+0x16c>
 8005e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e62:	f000 8086 	beq.w	8005f72 <HAL_TIM_ConfigClockSource+0x172>
 8005e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e6a:	d87f      	bhi.n	8005f6c <HAL_TIM_ConfigClockSource+0x16c>
 8005e6c:	2b70      	cmp	r3, #112	@ 0x70
 8005e6e:	d01a      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0xa6>
 8005e70:	2b70      	cmp	r3, #112	@ 0x70
 8005e72:	d87b      	bhi.n	8005f6c <HAL_TIM_ConfigClockSource+0x16c>
 8005e74:	2b60      	cmp	r3, #96	@ 0x60
 8005e76:	d050      	beq.n	8005f1a <HAL_TIM_ConfigClockSource+0x11a>
 8005e78:	2b60      	cmp	r3, #96	@ 0x60
 8005e7a:	d877      	bhi.n	8005f6c <HAL_TIM_ConfigClockSource+0x16c>
 8005e7c:	2b50      	cmp	r3, #80	@ 0x50
 8005e7e:	d03c      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0xfa>
 8005e80:	2b50      	cmp	r3, #80	@ 0x50
 8005e82:	d873      	bhi.n	8005f6c <HAL_TIM_ConfigClockSource+0x16c>
 8005e84:	2b40      	cmp	r3, #64	@ 0x40
 8005e86:	d058      	beq.n	8005f3a <HAL_TIM_ConfigClockSource+0x13a>
 8005e88:	2b40      	cmp	r3, #64	@ 0x40
 8005e8a:	d86f      	bhi.n	8005f6c <HAL_TIM_ConfigClockSource+0x16c>
 8005e8c:	2b30      	cmp	r3, #48	@ 0x30
 8005e8e:	d064      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0x15a>
 8005e90:	2b30      	cmp	r3, #48	@ 0x30
 8005e92:	d86b      	bhi.n	8005f6c <HAL_TIM_ConfigClockSource+0x16c>
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	d060      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0x15a>
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d867      	bhi.n	8005f6c <HAL_TIM_ConfigClockSource+0x16c>
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d05c      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0x15a>
 8005ea0:	2b10      	cmp	r3, #16
 8005ea2:	d05a      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0x15a>
 8005ea4:	e062      	b.n	8005f6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005eb6:	f000 f9a7 	bl	8006208 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ec8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	609a      	str	r2, [r3, #8]
      break;
 8005ed2:	e04f      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ee4:	f000 f990 	bl	8006208 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ef6:	609a      	str	r2, [r3, #8]
      break;
 8005ef8:	e03c      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f06:	461a      	mov	r2, r3
 8005f08:	f000 f904 	bl	8006114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2150      	movs	r1, #80	@ 0x50
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 f95d 	bl	80061d2 <TIM_ITRx_SetConfig>
      break;
 8005f18:	e02c      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f26:	461a      	mov	r2, r3
 8005f28:	f000 f923 	bl	8006172 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2160      	movs	r1, #96	@ 0x60
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 f94d 	bl	80061d2 <TIM_ITRx_SetConfig>
      break;
 8005f38:	e01c      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f46:	461a      	mov	r2, r3
 8005f48:	f000 f8e4 	bl	8006114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2140      	movs	r1, #64	@ 0x40
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 f93d 	bl	80061d2 <TIM_ITRx_SetConfig>
      break;
 8005f58:	e00c      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4619      	mov	r1, r3
 8005f64:	4610      	mov	r0, r2
 8005f66:	f000 f934 	bl	80061d2 <TIM_ITRx_SetConfig>
      break;
 8005f6a:	e003      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f70:	e000      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
	...

08005fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff6:	d00f      	beq.n	8006018 <TIM_Base_SetConfig+0x38>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a3c      	ldr	r2, [pc, #240]	@ (80060ec <TIM_Base_SetConfig+0x10c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00b      	beq.n	8006018 <TIM_Base_SetConfig+0x38>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a3b      	ldr	r2, [pc, #236]	@ (80060f0 <TIM_Base_SetConfig+0x110>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d007      	beq.n	8006018 <TIM_Base_SetConfig+0x38>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a3a      	ldr	r2, [pc, #232]	@ (80060f4 <TIM_Base_SetConfig+0x114>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d003      	beq.n	8006018 <TIM_Base_SetConfig+0x38>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a39      	ldr	r2, [pc, #228]	@ (80060f8 <TIM_Base_SetConfig+0x118>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d108      	bne.n	800602a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800601e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006030:	d027      	beq.n	8006082 <TIM_Base_SetConfig+0xa2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a2d      	ldr	r2, [pc, #180]	@ (80060ec <TIM_Base_SetConfig+0x10c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d023      	beq.n	8006082 <TIM_Base_SetConfig+0xa2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a2c      	ldr	r2, [pc, #176]	@ (80060f0 <TIM_Base_SetConfig+0x110>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d01f      	beq.n	8006082 <TIM_Base_SetConfig+0xa2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2b      	ldr	r2, [pc, #172]	@ (80060f4 <TIM_Base_SetConfig+0x114>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d01b      	beq.n	8006082 <TIM_Base_SetConfig+0xa2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a2b      	ldr	r2, [pc, #172]	@ (80060fc <TIM_Base_SetConfig+0x11c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d017      	beq.n	8006082 <TIM_Base_SetConfig+0xa2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a2a      	ldr	r2, [pc, #168]	@ (8006100 <TIM_Base_SetConfig+0x120>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d013      	beq.n	8006082 <TIM_Base_SetConfig+0xa2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a29      	ldr	r2, [pc, #164]	@ (8006104 <TIM_Base_SetConfig+0x124>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00f      	beq.n	8006082 <TIM_Base_SetConfig+0xa2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a28      	ldr	r2, [pc, #160]	@ (8006108 <TIM_Base_SetConfig+0x128>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00b      	beq.n	8006082 <TIM_Base_SetConfig+0xa2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a27      	ldr	r2, [pc, #156]	@ (800610c <TIM_Base_SetConfig+0x12c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d007      	beq.n	8006082 <TIM_Base_SetConfig+0xa2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a26      	ldr	r2, [pc, #152]	@ (8006110 <TIM_Base_SetConfig+0x130>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d003      	beq.n	8006082 <TIM_Base_SetConfig+0xa2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a1e      	ldr	r2, [pc, #120]	@ (80060f8 <TIM_Base_SetConfig+0x118>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d108      	bne.n	8006094 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4313      	orrs	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a13      	ldr	r2, [pc, #76]	@ (8006108 <TIM_Base_SetConfig+0x128>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d007      	beq.n	80060d0 <TIM_Base_SetConfig+0xf0>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a12      	ldr	r2, [pc, #72]	@ (800610c <TIM_Base_SetConfig+0x12c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d003      	beq.n	80060d0 <TIM_Base_SetConfig+0xf0>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a11      	ldr	r2, [pc, #68]	@ (8006110 <TIM_Base_SetConfig+0x130>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d103      	bne.n	80060d8 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	615a      	str	r2, [r3, #20]
}
 80060de:	bf00      	nop
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40000400 	.word	0x40000400
 80060f0:	40000800 	.word	0x40000800
 80060f4:	40000c00 	.word	0x40000c00
 80060f8:	40015c00 	.word	0x40015c00
 80060fc:	40001800 	.word	0x40001800
 8006100:	40001c00 	.word	0x40001c00
 8006104:	40002000 	.word	0x40002000
 8006108:	40014000 	.word	0x40014000
 800610c:	40014400 	.word	0x40014400
 8006110:	40014800 	.word	0x40014800

08006114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	f023 0201 	bic.w	r2, r3, #1
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800613e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	011b      	lsls	r3, r3, #4
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f023 030a 	bic.w	r3, r3, #10
 8006150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4313      	orrs	r3, r2
 8006158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	621a      	str	r2, [r3, #32]
}
 8006166:	bf00      	nop
 8006168:	371c      	adds	r7, #28
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006172:	b480      	push	{r7}
 8006174:	b087      	sub	sp, #28
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	f023 0210 	bic.w	r2, r3, #16
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800619c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	031b      	lsls	r3, r3, #12
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	011b      	lsls	r3, r3, #4
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	621a      	str	r2, [r3, #32]
}
 80061c6:	bf00      	nop
 80061c8:	371c      	adds	r7, #28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b085      	sub	sp, #20
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f043 0307 	orr.w	r3, r3, #7
 80061f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	609a      	str	r2, [r3, #8]
}
 80061fc:	bf00      	nop
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	021a      	lsls	r2, r3, #8
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	431a      	orrs	r2, r3
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	4313      	orrs	r3, r2
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	4313      	orrs	r3, r2
 8006234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	609a      	str	r2, [r3, #8]
}
 800623c:	bf00      	nop
 800623e:	371c      	adds	r7, #28
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f003 031f 	and.w	r3, r3, #31
 800625a:	2201      	movs	r2, #1
 800625c:	fa02 f303 	lsl.w	r3, r2, r3
 8006260:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6a1a      	ldr	r2, [r3, #32]
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	43db      	mvns	r3, r3
 800626a:	401a      	ands	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6a1a      	ldr	r2, [r3, #32]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f003 031f 	and.w	r3, r3, #31
 800627a:	6879      	ldr	r1, [r7, #4]
 800627c:	fa01 f303 	lsl.w	r3, r1, r3
 8006280:	431a      	orrs	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	621a      	str	r2, [r3, #32]
}
 8006286:	bf00      	nop
 8006288:	371c      	adds	r7, #28
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
	...

08006294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e055      	b.n	8006358 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ee:	d01d      	beq.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006364 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d018      	beq.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006368 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d013      	beq.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a18      	ldr	r2, [pc, #96]	@ (800636c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00e      	beq.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a17      	ldr	r2, [pc, #92]	@ (8006370 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d009      	beq.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a15      	ldr	r2, [pc, #84]	@ (8006374 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d004      	beq.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a14      	ldr	r2, [pc, #80]	@ (8006378 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d10c      	bne.n	8006346 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006332:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	4313      	orrs	r3, r2
 800633c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	40000400 	.word	0x40000400
 8006368:	40000800 	.word	0x40000800
 800636c:	40000c00 	.word	0x40000c00
 8006370:	40001800 	.word	0x40001800
 8006374:	40014000 	.word	0x40014000
 8006378:	40015c00 	.word	0x40015c00

0800637c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e040      	b.n	8006438 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7fc fa04 	bl	80027d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2224      	movs	r2, #36	@ 0x24
 80063d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0201 	bic.w	r2, r2, #1
 80063e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fc54 	bl	8006c90 <UART_SetConfig>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e022      	b.n	8006438 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fdc2 	bl	8006f84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800640e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800641e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0201 	orr.w	r2, r2, #1
 800642e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fe49 	bl	80070c8 <UART_CheckIdleState>
 8006436:	4603      	mov	r3, r0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	@ 0x28
 8006444:	af02      	add	r7, sp, #8
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	4613      	mov	r3, r2
 800644e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006454:	2b20      	cmp	r3, #32
 8006456:	d177      	bne.n	8006548 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <HAL_UART_Transmit+0x24>
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e070      	b.n	800654a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2221      	movs	r2, #33	@ 0x21
 8006474:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006476:	f7fc fc7b 	bl	8002d70 <HAL_GetTick>
 800647a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	88fa      	ldrh	r2, [r7, #6]
 8006480:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	88fa      	ldrh	r2, [r7, #6]
 8006488:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006494:	d108      	bne.n	80064a8 <HAL_UART_Transmit+0x68>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	e003      	b.n	80064b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064ac:	2300      	movs	r3, #0
 80064ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064b0:	e02f      	b.n	8006512 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2200      	movs	r2, #0
 80064ba:	2180      	movs	r1, #128	@ 0x80
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 feab 	bl	8007218 <UART_WaitOnFlagUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d004      	beq.n	80064d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e03b      	b.n	800654a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10b      	bne.n	80064f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	881a      	ldrh	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064e4:	b292      	uxth	r2, r2
 80064e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	3302      	adds	r3, #2
 80064ec:	61bb      	str	r3, [r7, #24]
 80064ee:	e007      	b.n	8006500 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	781a      	ldrb	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	3301      	adds	r3, #1
 80064fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006506:	b29b      	uxth	r3, r3
 8006508:	3b01      	subs	r3, #1
 800650a:	b29a      	uxth	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1c9      	bne.n	80064b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2200      	movs	r2, #0
 8006526:	2140      	movs	r1, #64	@ 0x40
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 fe75 	bl	8007218 <UART_WaitOnFlagUntilTimeout>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d004      	beq.n	800653e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2220      	movs	r2, #32
 8006538:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e005      	b.n	800654a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	e000      	b.n	800654a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006548:	2302      	movs	r3, #2
  }
}
 800654a:	4618      	mov	r0, r3
 800654c:	3720      	adds	r7, #32
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006554:	b480      	push	{r7}
 8006556:	b08b      	sub	sp, #44	@ 0x2c
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	4613      	mov	r3, r2
 8006560:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006566:	2b20      	cmp	r3, #32
 8006568:	d147      	bne.n	80065fa <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <HAL_UART_Transmit_IT+0x22>
 8006570:	88fb      	ldrh	r3, [r7, #6]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e040      	b.n	80065fc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	88fa      	ldrh	r2, [r7, #6]
 8006584:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	88fa      	ldrh	r2, [r7, #6]
 800658c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2221      	movs	r2, #33	@ 0x21
 80065a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ac:	d107      	bne.n	80065be <HAL_UART_Transmit_IT+0x6a>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d103      	bne.n	80065be <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4a13      	ldr	r2, [pc, #76]	@ (8006608 <HAL_UART_Transmit_IT+0xb4>)
 80065ba:	66da      	str	r2, [r3, #108]	@ 0x6c
 80065bc:	e002      	b.n	80065c4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4a12      	ldr	r2, [pc, #72]	@ (800660c <HAL_UART_Transmit_IT+0xb8>)
 80065c2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	613b      	str	r3, [r7, #16]
   return(result);
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e2:	623b      	str	r3, [r7, #32]
 80065e4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	69f9      	ldr	r1, [r7, #28]
 80065e8:	6a3a      	ldr	r2, [r7, #32]
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e6      	bne.n	80065c4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	e000      	b.n	80065fc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80065fa:	2302      	movs	r3, #2
  }
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	372c      	adds	r7, #44	@ 0x2c
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	080075fb 	.word	0x080075fb
 800660c:	08007545 	.word	0x08007545

08006610 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08a      	sub	sp, #40	@ 0x28
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	4613      	mov	r3, r2
 800661c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006624:	2b20      	cmp	r3, #32
 8006626:	d132      	bne.n	800668e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <HAL_UART_Receive_IT+0x24>
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e02b      	b.n	8006690 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d018      	beq.n	800667e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	613b      	str	r3, [r7, #16]
   return(result);
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006660:	627b      	str	r3, [r7, #36]	@ 0x24
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666a:	623b      	str	r3, [r7, #32]
 800666c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	69f9      	ldr	r1, [r7, #28]
 8006670:	6a3a      	ldr	r2, [r7, #32]
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	61bb      	str	r3, [r7, #24]
   return(result);
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e6      	bne.n	800664c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800667e:	88fb      	ldrh	r3, [r7, #6]
 8006680:	461a      	mov	r2, r3
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 fe2f 	bl	80072e8 <UART_Start_Receive_IT>
 800668a:	4603      	mov	r3, r0
 800668c:	e000      	b.n	8006690 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800668e:	2302      	movs	r3, #2
  }
}
 8006690:	4618      	mov	r0, r3
 8006692:	3728      	adds	r7, #40	@ 0x28
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b0ba      	sub	sp, #232	@ 0xe8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80066c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80066c6:	4013      	ands	r3, r2
 80066c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80066cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d115      	bne.n	8006700 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80066d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066d8:	f003 0320 	and.w	r3, r3, #32
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00f      	beq.n	8006700 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066e4:	f003 0320 	and.w	r3, r3, #32
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d009      	beq.n	8006700 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 82ab 	beq.w	8006c4c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	4798      	blx	r3
      }
      return;
 80066fe:	e2a5      	b.n	8006c4c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 8117 	beq.w	8006938 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800670a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d106      	bne.n	8006724 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006716:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800671a:	4b85      	ldr	r3, [pc, #532]	@ (8006930 <HAL_UART_IRQHandler+0x298>)
 800671c:	4013      	ands	r3, r2
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 810a 	beq.w	8006938 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d011      	beq.n	8006754 <HAL_UART_IRQHandler+0xbc>
 8006730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2201      	movs	r2, #1
 8006742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800674a:	f043 0201 	orr.w	r2, r3, #1
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d011      	beq.n	8006784 <HAL_UART_IRQHandler+0xec>
 8006760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00b      	beq.n	8006784 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2202      	movs	r2, #2
 8006772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800677a:	f043 0204 	orr.w	r2, r3, #4
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006788:	f003 0304 	and.w	r3, r3, #4
 800678c:	2b00      	cmp	r3, #0
 800678e:	d011      	beq.n	80067b4 <HAL_UART_IRQHandler+0x11c>
 8006790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00b      	beq.n	80067b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2204      	movs	r2, #4
 80067a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067aa:	f043 0202 	orr.w	r2, r3, #2
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067b8:	f003 0308 	and.w	r3, r3, #8
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d017      	beq.n	80067f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067c4:	f003 0320 	and.w	r3, r3, #32
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d105      	bne.n	80067d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80067cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00b      	beq.n	80067f0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2208      	movs	r2, #8
 80067de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067e6:	f043 0208 	orr.w	r2, r3, #8
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d012      	beq.n	8006822 <HAL_UART_IRQHandler+0x18a>
 80067fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006800:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00c      	beq.n	8006822 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006818:	f043 0220 	orr.w	r2, r3, #32
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 8211 	beq.w	8006c50 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00d      	beq.n	8006856 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800683a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b00      	cmp	r3, #0
 8006844:	d007      	beq.n	8006856 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800685c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800686a:	2b40      	cmp	r3, #64	@ 0x40
 800686c:	d005      	beq.n	800687a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800686e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006872:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006876:	2b00      	cmp	r3, #0
 8006878:	d04f      	beq.n	800691a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fde8 	bl	8007450 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800688a:	2b40      	cmp	r3, #64	@ 0x40
 800688c:	d141      	bne.n	8006912 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3308      	adds	r3, #8
 8006894:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80068a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3308      	adds	r3, #8
 80068b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80068ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80068be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80068c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80068d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1d9      	bne.n	800688e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d013      	beq.n	800690a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068e6:	4a13      	ldr	r2, [pc, #76]	@ (8006934 <HAL_UART_IRQHandler+0x29c>)
 80068e8:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fc fb94 	bl	800301c <HAL_DMA_Abort_IT>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d017      	beq.n	800692a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006904:	4610      	mov	r0, r2
 8006906:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006908:	e00f      	b.n	800692a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f9aa 	bl	8006c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006910:	e00b      	b.n	800692a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f9a6 	bl	8006c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006918:	e007      	b.n	800692a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f9a2 	bl	8006c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006928:	e192      	b.n	8006c50 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800692a:	bf00      	nop
    return;
 800692c:	e190      	b.n	8006c50 <HAL_UART_IRQHandler+0x5b8>
 800692e:	bf00      	nop
 8006930:	04000120 	.word	0x04000120
 8006934:	08007519 	.word	0x08007519

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800693c:	2b01      	cmp	r3, #1
 800693e:	f040 814b 	bne.w	8006bd8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006946:	f003 0310 	and.w	r3, r3, #16
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 8144 	beq.w	8006bd8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006954:	f003 0310 	and.w	r3, r3, #16
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 813d 	beq.w	8006bd8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2210      	movs	r2, #16
 8006964:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006970:	2b40      	cmp	r3, #64	@ 0x40
 8006972:	f040 80b5 	bne.w	8006ae0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006982:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 8164 	beq.w	8006c54 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006992:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006996:	429a      	cmp	r2, r3
 8006998:	f080 815c 	bcs.w	8006c54 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	2b20      	cmp	r3, #32
 80069ae:	f000 8086 	beq.w	8006abe <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80069c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80069e0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80069e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80069ec:	e841 2300 	strex	r3, r2, [r1]
 80069f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80069f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1da      	bne.n	80069b2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3308      	adds	r3, #8
 8006a02:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a06:	e853 3f00 	ldrex	r3, [r3]
 8006a0a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a0e:	f023 0301 	bic.w	r3, r3, #1
 8006a12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a20:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a24:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a28:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a2c:	e841 2300 	strex	r3, r2, [r1]
 8006a30:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1e1      	bne.n	80069fc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a5c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a5e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a60:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a62:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a64:	e841 2300 	strex	r3, r2, [r1]
 8006a68:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1e3      	bne.n	8006a38 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a86:	e853 3f00 	ldrex	r3, [r3]
 8006a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a8e:	f023 0310 	bic.w	r3, r3, #16
 8006a92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006aa0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006aa2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006aa6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006aa8:	e841 2300 	strex	r3, r2, [r1]
 8006aac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1e4      	bne.n	8006a7e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fc fa76 	bl	8002faa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f8cd 	bl	8006c78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ade:	e0b9      	b.n	8006c54 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 80ab 	beq.w	8006c58 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006b02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 80a6 	beq.w	8006c58 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b14:	e853 3f00 	ldrex	r3, [r3]
 8006b18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b30:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1e4      	bne.n	8006b0c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3308      	adds	r3, #8
 8006b48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	623b      	str	r3, [r7, #32]
   return(result);
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	f023 0301 	bic.w	r3, r3, #1
 8006b58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3308      	adds	r3, #8
 8006b62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b66:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e3      	bne.n	8006b42 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0310 	bic.w	r3, r3, #16
 8006ba2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006bb0:	61fb      	str	r3, [r7, #28]
 8006bb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb4:	69b9      	ldr	r1, [r7, #24]
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	e841 2300 	strex	r3, r2, [r1]
 8006bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1e4      	bne.n	8006b8e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f851 	bl	8006c78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bd6:	e03f      	b.n	8006c58 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00e      	beq.n	8006c02 <HAL_UART_IRQHandler+0x56a>
 8006be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006be8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d008      	beq.n	8006c02 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006bf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 ff2f 	bl	8007a5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c00:	e02d      	b.n	8006c5e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00e      	beq.n	8006c2c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d008      	beq.n	8006c2c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d01c      	beq.n	8006c5c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	4798      	blx	r3
    }
    return;
 8006c2a:	e017      	b.n	8006c5c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d012      	beq.n	8006c5e <HAL_UART_IRQHandler+0x5c6>
 8006c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00c      	beq.n	8006c5e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fd38 	bl	80076ba <UART_EndTransmit_IT>
    return;
 8006c4a:	e008      	b.n	8006c5e <HAL_UART_IRQHandler+0x5c6>
      return;
 8006c4c:	bf00      	nop
 8006c4e:	e006      	b.n	8006c5e <HAL_UART_IRQHandler+0x5c6>
    return;
 8006c50:	bf00      	nop
 8006c52:	e004      	b.n	8006c5e <HAL_UART_IRQHandler+0x5c6>
      return;
 8006c54:	bf00      	nop
 8006c56:	e002      	b.n	8006c5e <HAL_UART_IRQHandler+0x5c6>
      return;
 8006c58:	bf00      	nop
 8006c5a:	e000      	b.n	8006c5e <HAL_UART_IRQHandler+0x5c6>
    return;
 8006c5c:	bf00      	nop
  }

}
 8006c5e:	37e8      	adds	r7, #232	@ 0xe8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b088      	sub	sp, #32
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	431a      	orrs	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	69db      	ldr	r3, [r3, #28]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8006cbe:	f023 030c 	bic.w	r3, r3, #12
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6812      	ldr	r2, [r2, #0]
 8006cc6:	6979      	ldr	r1, [r7, #20]
 8006cc8:	430b      	orrs	r3, r1
 8006cca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68da      	ldr	r2, [r3, #12]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a99      	ldr	r2, [pc, #612]	@ (8006f70 <UART_SetConfig+0x2e0>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d120      	bne.n	8006d52 <UART_SetConfig+0xc2>
 8006d10:	4b98      	ldr	r3, [pc, #608]	@ (8006f74 <UART_SetConfig+0x2e4>)
 8006d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d14:	f003 0303 	and.w	r3, r3, #3
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	d817      	bhi.n	8006d4c <UART_SetConfig+0xbc>
 8006d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d24 <UART_SetConfig+0x94>)
 8006d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d22:	bf00      	nop
 8006d24:	08006d35 	.word	0x08006d35
 8006d28:	08006d41 	.word	0x08006d41
 8006d2c:	08006d47 	.word	0x08006d47
 8006d30:	08006d3b 	.word	0x08006d3b
 8006d34:	2301      	movs	r3, #1
 8006d36:	77fb      	strb	r3, [r7, #31]
 8006d38:	e061      	b.n	8006dfe <UART_SetConfig+0x16e>
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	77fb      	strb	r3, [r7, #31]
 8006d3e:	e05e      	b.n	8006dfe <UART_SetConfig+0x16e>
 8006d40:	2304      	movs	r3, #4
 8006d42:	77fb      	strb	r3, [r7, #31]
 8006d44:	e05b      	b.n	8006dfe <UART_SetConfig+0x16e>
 8006d46:	2308      	movs	r3, #8
 8006d48:	77fb      	strb	r3, [r7, #31]
 8006d4a:	e058      	b.n	8006dfe <UART_SetConfig+0x16e>
 8006d4c:	2310      	movs	r3, #16
 8006d4e:	77fb      	strb	r3, [r7, #31]
 8006d50:	e055      	b.n	8006dfe <UART_SetConfig+0x16e>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a88      	ldr	r2, [pc, #544]	@ (8006f78 <UART_SetConfig+0x2e8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d124      	bne.n	8006da6 <UART_SetConfig+0x116>
 8006d5c:	4b85      	ldr	r3, [pc, #532]	@ (8006f74 <UART_SetConfig+0x2e4>)
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d68:	d011      	beq.n	8006d8e <UART_SetConfig+0xfe>
 8006d6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d6e:	d817      	bhi.n	8006da0 <UART_SetConfig+0x110>
 8006d70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d74:	d011      	beq.n	8006d9a <UART_SetConfig+0x10a>
 8006d76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d7a:	d811      	bhi.n	8006da0 <UART_SetConfig+0x110>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <UART_SetConfig+0xf8>
 8006d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d84:	d006      	beq.n	8006d94 <UART_SetConfig+0x104>
 8006d86:	e00b      	b.n	8006da0 <UART_SetConfig+0x110>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	77fb      	strb	r3, [r7, #31]
 8006d8c:	e037      	b.n	8006dfe <UART_SetConfig+0x16e>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	77fb      	strb	r3, [r7, #31]
 8006d92:	e034      	b.n	8006dfe <UART_SetConfig+0x16e>
 8006d94:	2304      	movs	r3, #4
 8006d96:	77fb      	strb	r3, [r7, #31]
 8006d98:	e031      	b.n	8006dfe <UART_SetConfig+0x16e>
 8006d9a:	2308      	movs	r3, #8
 8006d9c:	77fb      	strb	r3, [r7, #31]
 8006d9e:	e02e      	b.n	8006dfe <UART_SetConfig+0x16e>
 8006da0:	2310      	movs	r3, #16
 8006da2:	77fb      	strb	r3, [r7, #31]
 8006da4:	e02b      	b.n	8006dfe <UART_SetConfig+0x16e>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a74      	ldr	r2, [pc, #464]	@ (8006f7c <UART_SetConfig+0x2ec>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d124      	bne.n	8006dfa <UART_SetConfig+0x16a>
 8006db0:	4b70      	ldr	r3, [pc, #448]	@ (8006f74 <UART_SetConfig+0x2e4>)
 8006db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006db8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006dbc:	d011      	beq.n	8006de2 <UART_SetConfig+0x152>
 8006dbe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006dc2:	d817      	bhi.n	8006df4 <UART_SetConfig+0x164>
 8006dc4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006dc8:	d011      	beq.n	8006dee <UART_SetConfig+0x15e>
 8006dca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006dce:	d811      	bhi.n	8006df4 <UART_SetConfig+0x164>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <UART_SetConfig+0x14c>
 8006dd4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006dd8:	d006      	beq.n	8006de8 <UART_SetConfig+0x158>
 8006dda:	e00b      	b.n	8006df4 <UART_SetConfig+0x164>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	77fb      	strb	r3, [r7, #31]
 8006de0:	e00d      	b.n	8006dfe <UART_SetConfig+0x16e>
 8006de2:	2302      	movs	r3, #2
 8006de4:	77fb      	strb	r3, [r7, #31]
 8006de6:	e00a      	b.n	8006dfe <UART_SetConfig+0x16e>
 8006de8:	2304      	movs	r3, #4
 8006dea:	77fb      	strb	r3, [r7, #31]
 8006dec:	e007      	b.n	8006dfe <UART_SetConfig+0x16e>
 8006dee:	2308      	movs	r3, #8
 8006df0:	77fb      	strb	r3, [r7, #31]
 8006df2:	e004      	b.n	8006dfe <UART_SetConfig+0x16e>
 8006df4:	2310      	movs	r3, #16
 8006df6:	77fb      	strb	r3, [r7, #31]
 8006df8:	e001      	b.n	8006dfe <UART_SetConfig+0x16e>
 8006dfa:	2310      	movs	r3, #16
 8006dfc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e06:	d15a      	bne.n	8006ebe <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 8006e08:	7ffb      	ldrb	r3, [r7, #31]
 8006e0a:	2b08      	cmp	r3, #8
 8006e0c:	d827      	bhi.n	8006e5e <UART_SetConfig+0x1ce>
 8006e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e14 <UART_SetConfig+0x184>)
 8006e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e14:	08006e39 	.word	0x08006e39
 8006e18:	08006e41 	.word	0x08006e41
 8006e1c:	08006e49 	.word	0x08006e49
 8006e20:	08006e5f 	.word	0x08006e5f
 8006e24:	08006e4f 	.word	0x08006e4f
 8006e28:	08006e5f 	.word	0x08006e5f
 8006e2c:	08006e5f 	.word	0x08006e5f
 8006e30:	08006e5f 	.word	0x08006e5f
 8006e34:	08006e57 	.word	0x08006e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e38:	f7fe faae 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 8006e3c:	61b8      	str	r0, [r7, #24]
        break;
 8006e3e:	e013      	b.n	8006e68 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e40:	f7fe facc 	bl	80053dc <HAL_RCC_GetPCLK2Freq>
 8006e44:	61b8      	str	r0, [r7, #24]
        break;
 8006e46:	e00f      	b.n	8006e68 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e48:	4b4d      	ldr	r3, [pc, #308]	@ (8006f80 <UART_SetConfig+0x2f0>)
 8006e4a:	61bb      	str	r3, [r7, #24]
        break;
 8006e4c:	e00c      	b.n	8006e68 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e4e:	f7fe fa2b 	bl	80052a8 <HAL_RCC_GetSysClockFreq>
 8006e52:	61b8      	str	r0, [r7, #24]
        break;
 8006e54:	e008      	b.n	8006e68 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e5a:	61bb      	str	r3, [r7, #24]
        break;
 8006e5c:	e004      	b.n	8006e68 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	77bb      	strb	r3, [r7, #30]
        break;
 8006e66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d074      	beq.n	8006f58 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	005a      	lsls	r2, r3, #1
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	085b      	lsrs	r3, r3, #1
 8006e78:	441a      	add	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	2b0f      	cmp	r3, #15
 8006e88:	d916      	bls.n	8006eb8 <UART_SetConfig+0x228>
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e90:	d212      	bcs.n	8006eb8 <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	f023 030f 	bic.w	r3, r3, #15
 8006e9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	085b      	lsrs	r3, r3, #1
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	89fb      	ldrh	r3, [r7, #14]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	89fa      	ldrh	r2, [r7, #14]
 8006eb4:	60da      	str	r2, [r3, #12]
 8006eb6:	e04f      	b.n	8006f58 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	77bb      	strb	r3, [r7, #30]
 8006ebc:	e04c      	b.n	8006f58 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ebe:	7ffb      	ldrb	r3, [r7, #31]
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d828      	bhi.n	8006f16 <UART_SetConfig+0x286>
 8006ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8006ecc <UART_SetConfig+0x23c>)
 8006ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eca:	bf00      	nop
 8006ecc:	08006ef1 	.word	0x08006ef1
 8006ed0:	08006ef9 	.word	0x08006ef9
 8006ed4:	08006f01 	.word	0x08006f01
 8006ed8:	08006f17 	.word	0x08006f17
 8006edc:	08006f07 	.word	0x08006f07
 8006ee0:	08006f17 	.word	0x08006f17
 8006ee4:	08006f17 	.word	0x08006f17
 8006ee8:	08006f17 	.word	0x08006f17
 8006eec:	08006f0f 	.word	0x08006f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ef0:	f7fe fa52 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 8006ef4:	61b8      	str	r0, [r7, #24]
        break;
 8006ef6:	e013      	b.n	8006f20 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ef8:	f7fe fa70 	bl	80053dc <HAL_RCC_GetPCLK2Freq>
 8006efc:	61b8      	str	r0, [r7, #24]
        break;
 8006efe:	e00f      	b.n	8006f20 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f00:	4b1f      	ldr	r3, [pc, #124]	@ (8006f80 <UART_SetConfig+0x2f0>)
 8006f02:	61bb      	str	r3, [r7, #24]
        break;
 8006f04:	e00c      	b.n	8006f20 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f06:	f7fe f9cf 	bl	80052a8 <HAL_RCC_GetSysClockFreq>
 8006f0a:	61b8      	str	r0, [r7, #24]
        break;
 8006f0c:	e008      	b.n	8006f20 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f12:	61bb      	str	r3, [r7, #24]
        break;
 8006f14:	e004      	b.n	8006f20 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	77bb      	strb	r3, [r7, #30]
        break;
 8006f1e:	bf00      	nop
    }

    if (pclk != 0U)
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d018      	beq.n	8006f58 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	085a      	lsrs	r2, r3, #1
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	441a      	add	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	2b0f      	cmp	r3, #15
 8006f3e:	d909      	bls.n	8006f54 <UART_SetConfig+0x2c4>
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f46:	d205      	bcs.n	8006f54 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	60da      	str	r2, [r3, #12]
 8006f52:	e001      	b.n	8006f58 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006f64:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3720      	adds	r7, #32
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	40013800 	.word	0x40013800
 8006f74:	40021000 	.word	0x40021000
 8006f78:	40004400 	.word	0x40004400
 8006f7c:	40004800 	.word	0x40004800
 8006f80:	007a1200 	.word	0x007a1200

08006f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00a      	beq.n	8006ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff6:	f003 0308 	and.w	r3, r3, #8
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	430a      	orrs	r2, r1
 8007012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007018:	f003 0310 	and.w	r3, r3, #16
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00a      	beq.n	8007036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01a      	beq.n	800709a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800707e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007082:	d10a      	bne.n	800709a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00a      	beq.n	80070bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	605a      	str	r2, [r3, #4]
  }
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b098      	sub	sp, #96	@ 0x60
 80070cc:	af02      	add	r7, sp, #8
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070d8:	f7fb fe4a 	bl	8002d70 <HAL_GetTick>
 80070dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0308 	and.w	r3, r3, #8
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d12e      	bne.n	800714a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070f4:	2200      	movs	r2, #0
 80070f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f88c 	bl	8007218 <UART_WaitOnFlagUntilTimeout>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d021      	beq.n	800714a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007116:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800711a:	653b      	str	r3, [r7, #80]	@ 0x50
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	461a      	mov	r2, r3
 8007122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007124:	647b      	str	r3, [r7, #68]	@ 0x44
 8007126:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800712a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800712c:	e841 2300 	strex	r3, r2, [r1]
 8007130:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e6      	bne.n	8007106 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2220      	movs	r2, #32
 800713c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e062      	b.n	8007210 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b04      	cmp	r3, #4
 8007156:	d149      	bne.n	80071ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007158:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007160:	2200      	movs	r2, #0
 8007162:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f856 	bl	8007218 <UART_WaitOnFlagUntilTimeout>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d03c      	beq.n	80071ec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717a:	e853 3f00 	ldrex	r3, [r3]
 800717e:	623b      	str	r3, [r7, #32]
   return(result);
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	461a      	mov	r2, r3
 800718e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007190:	633b      	str	r3, [r7, #48]	@ 0x30
 8007192:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007194:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007198:	e841 2300 	strex	r3, r2, [r1]
 800719c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800719e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1e6      	bne.n	8007172 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	3308      	adds	r3, #8
 80071aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	e853 3f00 	ldrex	r3, [r3]
 80071b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 0301 	bic.w	r3, r3, #1
 80071ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3308      	adds	r3, #8
 80071c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071c4:	61fa      	str	r2, [r7, #28]
 80071c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c8:	69b9      	ldr	r1, [r7, #24]
 80071ca:	69fa      	ldr	r2, [r7, #28]
 80071cc:	e841 2300 	strex	r3, r2, [r1]
 80071d0:	617b      	str	r3, [r7, #20]
   return(result);
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e5      	bne.n	80071a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2220      	movs	r2, #32
 80071dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e011      	b.n	8007210 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3758      	adds	r7, #88	@ 0x58
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	603b      	str	r3, [r7, #0]
 8007224:	4613      	mov	r3, r2
 8007226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007228:	e049      	b.n	80072be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007230:	d045      	beq.n	80072be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007232:	f7fb fd9d 	bl	8002d70 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	429a      	cmp	r2, r3
 8007240:	d302      	bcc.n	8007248 <UART_WaitOnFlagUntilTimeout+0x30>
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e048      	b.n	80072de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0304 	and.w	r3, r3, #4
 8007256:	2b00      	cmp	r3, #0
 8007258:	d031      	beq.n	80072be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	f003 0308 	and.w	r3, r3, #8
 8007264:	2b08      	cmp	r3, #8
 8007266:	d110      	bne.n	800728a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2208      	movs	r2, #8
 800726e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 f8ed 	bl	8007450 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2208      	movs	r2, #8
 800727a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e029      	b.n	80072de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	69db      	ldr	r3, [r3, #28]
 8007290:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007294:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007298:	d111      	bne.n	80072be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f8d3 	bl	8007450 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2220      	movs	r2, #32
 80072ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e00f      	b.n	80072de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69da      	ldr	r2, [r3, #28]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	4013      	ands	r3, r2
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	bf0c      	ite	eq
 80072ce:	2301      	moveq	r3, #1
 80072d0:	2300      	movne	r3, #0
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	461a      	mov	r2, r3
 80072d6:	79fb      	ldrb	r3, [r7, #7]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d0a6      	beq.n	800722a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b097      	sub	sp, #92	@ 0x5c
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	4613      	mov	r3, r2
 80072f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	88fa      	ldrh	r2, [r7, #6]
 8007300:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	88fa      	ldrh	r2, [r7, #6]
 8007308:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800731a:	d10e      	bne.n	800733a <UART_Start_Receive_IT+0x52>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d105      	bne.n	8007330 <UART_Start_Receive_IT+0x48>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800732a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800732e:	e01a      	b.n	8007366 <UART_Start_Receive_IT+0x7e>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	22ff      	movs	r2, #255	@ 0xff
 8007334:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007338:	e015      	b.n	8007366 <UART_Start_Receive_IT+0x7e>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10d      	bne.n	800735e <UART_Start_Receive_IT+0x76>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d104      	bne.n	8007354 <UART_Start_Receive_IT+0x6c>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	22ff      	movs	r2, #255	@ 0xff
 800734e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007352:	e008      	b.n	8007366 <UART_Start_Receive_IT+0x7e>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	227f      	movs	r2, #127	@ 0x7f
 8007358:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800735c:	e003      	b.n	8007366 <UART_Start_Receive_IT+0x7e>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2222      	movs	r2, #34	@ 0x22
 8007372:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3308      	adds	r3, #8
 800737c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007380:	e853 3f00 	ldrex	r3, [r3]
 8007384:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007388:	f043 0301 	orr.w	r3, r3, #1
 800738c:	657b      	str	r3, [r7, #84]	@ 0x54
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3308      	adds	r3, #8
 8007394:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007396:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007398:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800739c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800739e:	e841 2300 	strex	r3, r2, [r1]
 80073a2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80073a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1e5      	bne.n	8007376 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073b2:	d107      	bne.n	80073c4 <UART_Start_Receive_IT+0xdc>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d103      	bne.n	80073c4 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4a22      	ldr	r2, [pc, #136]	@ (8007448 <UART_Start_Receive_IT+0x160>)
 80073c0:	669a      	str	r2, [r3, #104]	@ 0x68
 80073c2:	e002      	b.n	80073ca <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4a21      	ldr	r2, [pc, #132]	@ (800744c <UART_Start_Receive_IT+0x164>)
 80073c8:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d019      	beq.n	8007406 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073da:	e853 3f00 	ldrex	r3, [r3]
 80073de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80073e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	461a      	mov	r2, r3
 80073ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073f2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073f8:	e841 2300 	strex	r3, r2, [r1]
 80073fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80073fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e6      	bne.n	80073d2 <UART_Start_Receive_IT+0xea>
 8007404:	e018      	b.n	8007438 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	e853 3f00 	ldrex	r3, [r3]
 8007412:	613b      	str	r3, [r7, #16]
   return(result);
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f043 0320 	orr.w	r3, r3, #32
 800741a:	653b      	str	r3, [r7, #80]	@ 0x50
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	461a      	mov	r2, r3
 8007422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007424:	623b      	str	r3, [r7, #32]
 8007426:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	69f9      	ldr	r1, [r7, #28]
 800742a:	6a3a      	ldr	r2, [r7, #32]
 800742c:	e841 2300 	strex	r3, r2, [r1]
 8007430:	61bb      	str	r3, [r7, #24]
   return(result);
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e6      	bne.n	8007406 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	375c      	adds	r7, #92	@ 0x5c
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	080078b7 	.word	0x080078b7
 800744c:	0800770f 	.word	0x0800770f

08007450 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007450:	b480      	push	{r7}
 8007452:	b095      	sub	sp, #84	@ 0x54
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007468:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800746c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007476:	643b      	str	r3, [r7, #64]	@ 0x40
 8007478:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800747c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e6      	bne.n	8007458 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3308      	adds	r3, #8
 8007490:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	61fb      	str	r3, [r7, #28]
   return(result);
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	f023 0301 	bic.w	r3, r3, #1
 80074a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3308      	adds	r3, #8
 80074a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074b2:	e841 2300 	strex	r3, r2, [r1]
 80074b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1e5      	bne.n	800748a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d118      	bne.n	80074f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f023 0310 	bic.w	r3, r3, #16
 80074da:	647b      	str	r3, [r7, #68]	@ 0x44
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	461a      	mov	r2, r3
 80074e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074e4:	61bb      	str	r3, [r7, #24]
 80074e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	6979      	ldr	r1, [r7, #20]
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	613b      	str	r3, [r7, #16]
   return(result);
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e6      	bne.n	80074c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2220      	movs	r2, #32
 80074fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800750c:	bf00      	nop
 800750e:	3754      	adds	r7, #84	@ 0x54
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007524:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f7ff fb94 	bl	8006c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800753c:	bf00      	nop
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007544:	b480      	push	{r7}
 8007546:	b08f      	sub	sp, #60	@ 0x3c
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007550:	2b21      	cmp	r3, #33	@ 0x21
 8007552:	d14c      	bne.n	80075ee <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800755a:	b29b      	uxth	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d132      	bne.n	80075c6 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	e853 3f00 	ldrex	r3, [r3]
 800756c:	61fb      	str	r3, [r7, #28]
   return(result);
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007574:	637b      	str	r3, [r7, #52]	@ 0x34
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800757e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007580:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007582:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007584:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007586:	e841 2300 	strex	r3, r2, [r1]
 800758a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800758c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1e6      	bne.n	8007560 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	60bb      	str	r3, [r7, #8]
   return(result);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b0:	61bb      	str	r3, [r7, #24]
 80075b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6979      	ldr	r1, [r7, #20]
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	613b      	str	r3, [r7, #16]
   return(result);
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e6      	bne.n	8007592 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80075c4:	e013      	b.n	80075ee <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075ca:	781a      	ldrb	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075d6:	1c5a      	adds	r2, r3, #1
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	3b01      	subs	r3, #1
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80075ee:	bf00      	nop
 80075f0:	373c      	adds	r7, #60	@ 0x3c
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b091      	sub	sp, #68	@ 0x44
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007606:	2b21      	cmp	r3, #33	@ 0x21
 8007608:	d151      	bne.n	80076ae <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007610:	b29b      	uxth	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d132      	bne.n	800767c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761e:	e853 3f00 	ldrex	r3, [r3]
 8007622:	623b      	str	r3, [r7, #32]
   return(result);
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800762a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	461a      	mov	r2, r3
 8007632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007634:	633b      	str	r3, [r7, #48]	@ 0x30
 8007636:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007638:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800763a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800763c:	e841 2300 	strex	r3, r2, [r1]
 8007640:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1e6      	bne.n	8007616 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	60fb      	str	r3, [r7, #12]
   return(result);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800765c:	637b      	str	r3, [r7, #52]	@ 0x34
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007666:	61fb      	str	r3, [r7, #28]
 8007668:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	69b9      	ldr	r1, [r7, #24]
 800766c:	69fa      	ldr	r2, [r7, #28]
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	617b      	str	r3, [r7, #20]
   return(result);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e6      	bne.n	8007648 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800767a:	e018      	b.n	80076ae <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007680:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007684:	881a      	ldrh	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800768e:	b292      	uxth	r2, r2
 8007690:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007696:	1c9a      	adds	r2, r3, #2
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80076ae:	bf00      	nop
 80076b0:	3744      	adds	r7, #68	@ 0x44
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b088      	sub	sp, #32
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	e853 3f00 	ldrex	r3, [r3]
 80076ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076d6:	61fb      	str	r3, [r7, #28]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	461a      	mov	r2, r3
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	61bb      	str	r3, [r7, #24]
 80076e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	6979      	ldr	r1, [r7, #20]
 80076e6:	69ba      	ldr	r2, [r7, #24]
 80076e8:	e841 2300 	strex	r3, r2, [r1]
 80076ec:	613b      	str	r3, [r7, #16]
   return(result);
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e6      	bne.n	80076c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2220      	movs	r2, #32
 80076f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7fa ff23 	bl	800254c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007706:	bf00      	nop
 8007708:	3720      	adds	r7, #32
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b09c      	sub	sp, #112	@ 0x70
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800771c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007726:	2b22      	cmp	r3, #34	@ 0x22
 8007728:	f040 80b9 	bne.w	800789e <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007732:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007736:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800773a:	b2d9      	uxtb	r1, r3
 800773c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007740:	b2da      	uxtb	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007746:	400a      	ands	r2, r1
 8007748:	b2d2      	uxtb	r2, r2
 800774a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800775c:	b29b      	uxth	r3, r3
 800775e:	3b01      	subs	r3, #1
 8007760:	b29a      	uxth	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800776e:	b29b      	uxth	r3, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	f040 809c 	bne.w	80078ae <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800777e:	e853 3f00 	ldrex	r3, [r3]
 8007782:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007786:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800778a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	461a      	mov	r2, r3
 8007792:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007794:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007796:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007798:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800779a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800779c:	e841 2300 	strex	r3, r2, [r1]
 80077a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80077a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1e6      	bne.n	8007776 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3308      	adds	r3, #8
 80077ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b2:	e853 3f00 	ldrex	r3, [r3]
 80077b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ba:	f023 0301 	bic.w	r3, r3, #1
 80077be:	667b      	str	r3, [r7, #100]	@ 0x64
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3308      	adds	r3, #8
 80077c6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80077c8:	647a      	str	r2, [r7, #68]	@ 0x44
 80077ca:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077d0:	e841 2300 	strex	r3, r2, [r1]
 80077d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e5      	bne.n	80077a8 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2220      	movs	r2, #32
 80077e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d018      	beq.n	8007830 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	623b      	str	r3, [r7, #32]
   return(result);
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007812:	663b      	str	r3, [r7, #96]	@ 0x60
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800781c:	633b      	str	r3, [r7, #48]	@ 0x30
 800781e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800782a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e6      	bne.n	80077fe <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007834:	2b01      	cmp	r3, #1
 8007836:	d12e      	bne.n	8007896 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	e853 3f00 	ldrex	r3, [r3]
 800784a:	60fb      	str	r3, [r7, #12]
   return(result);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 0310 	bic.w	r3, r3, #16
 8007852:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800785c:	61fb      	str	r3, [r7, #28]
 800785e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	69b9      	ldr	r1, [r7, #24]
 8007862:	69fa      	ldr	r2, [r7, #28]
 8007864:	e841 2300 	strex	r3, r2, [r1]
 8007868:	617b      	str	r3, [r7, #20]
   return(result);
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e6      	bne.n	800783e <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	f003 0310 	and.w	r3, r3, #16
 800787a:	2b10      	cmp	r3, #16
 800787c:	d103      	bne.n	8007886 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2210      	movs	r2, #16
 8007884:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff f9f2 	bl	8006c78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007894:	e00b      	b.n	80078ae <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7fa fc98 	bl	80021cc <HAL_UART_RxCpltCallback>
}
 800789c:	e007      	b.n	80078ae <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	699a      	ldr	r2, [r3, #24]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f042 0208 	orr.w	r2, r2, #8
 80078ac:	619a      	str	r2, [r3, #24]
}
 80078ae:	bf00      	nop
 80078b0:	3770      	adds	r7, #112	@ 0x70
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b09c      	sub	sp, #112	@ 0x70
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078c4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078ce:	2b22      	cmp	r3, #34	@ 0x22
 80078d0:	f040 80b9 	bne.w	8007a46 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80078da:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078e2:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80078e4:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80078e8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80078ec:	4013      	ands	r3, r2
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80078f2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f8:	1c9a      	adds	r2, r3, #2
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007904:	b29b      	uxth	r3, r3
 8007906:	3b01      	subs	r3, #1
 8007908:	b29a      	uxth	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007916:	b29b      	uxth	r3, r3
 8007918:	2b00      	cmp	r3, #0
 800791a:	f040 809c 	bne.w	8007a56 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007926:	e853 3f00 	ldrex	r3, [r3]
 800792a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800792c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800792e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007932:	667b      	str	r3, [r7, #100]	@ 0x64
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	461a      	mov	r2, r3
 800793a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800793c:	657b      	str	r3, [r7, #84]	@ 0x54
 800793e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007940:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007942:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007944:	e841 2300 	strex	r3, r2, [r1]
 8007948:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800794a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1e6      	bne.n	800791e <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3308      	adds	r3, #8
 8007956:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800795a:	e853 3f00 	ldrex	r3, [r3]
 800795e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007962:	f023 0301 	bic.w	r3, r3, #1
 8007966:	663b      	str	r3, [r7, #96]	@ 0x60
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3308      	adds	r3, #8
 800796e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007970:	643a      	str	r2, [r7, #64]	@ 0x40
 8007972:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007974:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007976:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007978:	e841 2300 	strex	r3, r2, [r1]
 800797c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800797e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1e5      	bne.n	8007950 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2220      	movs	r2, #32
 8007988:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d018      	beq.n	80079d8 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079c6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e6      	bne.n	80079a6 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d12e      	bne.n	8007a3e <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	e853 3f00 	ldrex	r3, [r3]
 80079f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	f023 0310 	bic.w	r3, r3, #16
 80079fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	461a      	mov	r2, r3
 8007a02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a04:	61bb      	str	r3, [r7, #24]
 8007a06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a08:	6979      	ldr	r1, [r7, #20]
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	e841 2300 	strex	r3, r2, [r1]
 8007a10:	613b      	str	r3, [r7, #16]
   return(result);
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e6      	bne.n	80079e6 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	f003 0310 	and.w	r3, r3, #16
 8007a22:	2b10      	cmp	r3, #16
 8007a24:	d103      	bne.n	8007a2e <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2210      	movs	r2, #16
 8007a2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a34:	4619      	mov	r1, r3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7ff f91e 	bl	8006c78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a3c:	e00b      	b.n	8007a56 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7fa fbc4 	bl	80021cc <HAL_UART_RxCpltCallback>
}
 8007a44:	e007      	b.n	8007a56 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	699a      	ldr	r2, [r3, #24]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f042 0208 	orr.w	r2, r2, #8
 8007a54:	619a      	str	r2, [r3, #24]
}
 8007a56:	bf00      	nop
 8007a58:	3770      	adds	r7, #112	@ 0x70
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <atoi>:
 8007a72:	220a      	movs	r2, #10
 8007a74:	2100      	movs	r1, #0
 8007a76:	f000 b87d 	b.w	8007b74 <strtol>
	...

08007a7c <_strtol_l.constprop.0>:
 8007a7c:	2b24      	cmp	r3, #36	@ 0x24
 8007a7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a82:	4686      	mov	lr, r0
 8007a84:	4690      	mov	r8, r2
 8007a86:	d801      	bhi.n	8007a8c <_strtol_l.constprop.0+0x10>
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d106      	bne.n	8007a9a <_strtol_l.constprop.0+0x1e>
 8007a8c:	f001 fa62 	bl	8008f54 <__errno>
 8007a90:	2316      	movs	r3, #22
 8007a92:	6003      	str	r3, [r0, #0]
 8007a94:	2000      	movs	r0, #0
 8007a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a9a:	4834      	ldr	r0, [pc, #208]	@ (8007b6c <_strtol_l.constprop.0+0xf0>)
 8007a9c:	460d      	mov	r5, r1
 8007a9e:	462a      	mov	r2, r5
 8007aa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007aa4:	5d06      	ldrb	r6, [r0, r4]
 8007aa6:	f016 0608 	ands.w	r6, r6, #8
 8007aaa:	d1f8      	bne.n	8007a9e <_strtol_l.constprop.0+0x22>
 8007aac:	2c2d      	cmp	r4, #45	@ 0x2d
 8007aae:	d12d      	bne.n	8007b0c <_strtol_l.constprop.0+0x90>
 8007ab0:	782c      	ldrb	r4, [r5, #0]
 8007ab2:	2601      	movs	r6, #1
 8007ab4:	1c95      	adds	r5, r2, #2
 8007ab6:	f033 0210 	bics.w	r2, r3, #16
 8007aba:	d109      	bne.n	8007ad0 <_strtol_l.constprop.0+0x54>
 8007abc:	2c30      	cmp	r4, #48	@ 0x30
 8007abe:	d12a      	bne.n	8007b16 <_strtol_l.constprop.0+0x9a>
 8007ac0:	782a      	ldrb	r2, [r5, #0]
 8007ac2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007ac6:	2a58      	cmp	r2, #88	@ 0x58
 8007ac8:	d125      	bne.n	8007b16 <_strtol_l.constprop.0+0x9a>
 8007aca:	786c      	ldrb	r4, [r5, #1]
 8007acc:	2310      	movs	r3, #16
 8007ace:	3502      	adds	r5, #2
 8007ad0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007ad4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007ad8:	2200      	movs	r2, #0
 8007ada:	fbbc f9f3 	udiv	r9, ip, r3
 8007ade:	4610      	mov	r0, r2
 8007ae0:	fb03 ca19 	mls	sl, r3, r9, ip
 8007ae4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007ae8:	2f09      	cmp	r7, #9
 8007aea:	d81b      	bhi.n	8007b24 <_strtol_l.constprop.0+0xa8>
 8007aec:	463c      	mov	r4, r7
 8007aee:	42a3      	cmp	r3, r4
 8007af0:	dd27      	ble.n	8007b42 <_strtol_l.constprop.0+0xc6>
 8007af2:	1c57      	adds	r7, r2, #1
 8007af4:	d007      	beq.n	8007b06 <_strtol_l.constprop.0+0x8a>
 8007af6:	4581      	cmp	r9, r0
 8007af8:	d320      	bcc.n	8007b3c <_strtol_l.constprop.0+0xc0>
 8007afa:	d101      	bne.n	8007b00 <_strtol_l.constprop.0+0x84>
 8007afc:	45a2      	cmp	sl, r4
 8007afe:	db1d      	blt.n	8007b3c <_strtol_l.constprop.0+0xc0>
 8007b00:	fb00 4003 	mla	r0, r0, r3, r4
 8007b04:	2201      	movs	r2, #1
 8007b06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b0a:	e7eb      	b.n	8007ae4 <_strtol_l.constprop.0+0x68>
 8007b0c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007b0e:	bf04      	itt	eq
 8007b10:	782c      	ldrbeq	r4, [r5, #0]
 8007b12:	1c95      	addeq	r5, r2, #2
 8007b14:	e7cf      	b.n	8007ab6 <_strtol_l.constprop.0+0x3a>
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1da      	bne.n	8007ad0 <_strtol_l.constprop.0+0x54>
 8007b1a:	2c30      	cmp	r4, #48	@ 0x30
 8007b1c:	bf0c      	ite	eq
 8007b1e:	2308      	moveq	r3, #8
 8007b20:	230a      	movne	r3, #10
 8007b22:	e7d5      	b.n	8007ad0 <_strtol_l.constprop.0+0x54>
 8007b24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007b28:	2f19      	cmp	r7, #25
 8007b2a:	d801      	bhi.n	8007b30 <_strtol_l.constprop.0+0xb4>
 8007b2c:	3c37      	subs	r4, #55	@ 0x37
 8007b2e:	e7de      	b.n	8007aee <_strtol_l.constprop.0+0x72>
 8007b30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007b34:	2f19      	cmp	r7, #25
 8007b36:	d804      	bhi.n	8007b42 <_strtol_l.constprop.0+0xc6>
 8007b38:	3c57      	subs	r4, #87	@ 0x57
 8007b3a:	e7d8      	b.n	8007aee <_strtol_l.constprop.0+0x72>
 8007b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b40:	e7e1      	b.n	8007b06 <_strtol_l.constprop.0+0x8a>
 8007b42:	1c53      	adds	r3, r2, #1
 8007b44:	d108      	bne.n	8007b58 <_strtol_l.constprop.0+0xdc>
 8007b46:	2322      	movs	r3, #34	@ 0x22
 8007b48:	f8ce 3000 	str.w	r3, [lr]
 8007b4c:	4660      	mov	r0, ip
 8007b4e:	f1b8 0f00 	cmp.w	r8, #0
 8007b52:	d0a0      	beq.n	8007a96 <_strtol_l.constprop.0+0x1a>
 8007b54:	1e69      	subs	r1, r5, #1
 8007b56:	e006      	b.n	8007b66 <_strtol_l.constprop.0+0xea>
 8007b58:	b106      	cbz	r6, 8007b5c <_strtol_l.constprop.0+0xe0>
 8007b5a:	4240      	negs	r0, r0
 8007b5c:	f1b8 0f00 	cmp.w	r8, #0
 8007b60:	d099      	beq.n	8007a96 <_strtol_l.constprop.0+0x1a>
 8007b62:	2a00      	cmp	r2, #0
 8007b64:	d1f6      	bne.n	8007b54 <_strtol_l.constprop.0+0xd8>
 8007b66:	f8c8 1000 	str.w	r1, [r8]
 8007b6a:	e794      	b.n	8007a96 <_strtol_l.constprop.0+0x1a>
 8007b6c:	0800ce8d 	.word	0x0800ce8d

08007b70 <_strtol_r>:
 8007b70:	f7ff bf84 	b.w	8007a7c <_strtol_l.constprop.0>

08007b74 <strtol>:
 8007b74:	4613      	mov	r3, r2
 8007b76:	460a      	mov	r2, r1
 8007b78:	4601      	mov	r1, r0
 8007b7a:	4802      	ldr	r0, [pc, #8]	@ (8007b84 <strtol+0x10>)
 8007b7c:	6800      	ldr	r0, [r0, #0]
 8007b7e:	f7ff bf7d 	b.w	8007a7c <_strtol_l.constprop.0>
 8007b82:	bf00      	nop
 8007b84:	2000002c 	.word	0x2000002c

08007b88 <__cvt>:
 8007b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b8c:	ec57 6b10 	vmov	r6, r7, d0
 8007b90:	2f00      	cmp	r7, #0
 8007b92:	460c      	mov	r4, r1
 8007b94:	4619      	mov	r1, r3
 8007b96:	463b      	mov	r3, r7
 8007b98:	bfbb      	ittet	lt
 8007b9a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007b9e:	461f      	movlt	r7, r3
 8007ba0:	2300      	movge	r3, #0
 8007ba2:	232d      	movlt	r3, #45	@ 0x2d
 8007ba4:	700b      	strb	r3, [r1, #0]
 8007ba6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ba8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007bac:	4691      	mov	r9, r2
 8007bae:	f023 0820 	bic.w	r8, r3, #32
 8007bb2:	bfbc      	itt	lt
 8007bb4:	4632      	movlt	r2, r6
 8007bb6:	4616      	movlt	r6, r2
 8007bb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007bbc:	d005      	beq.n	8007bca <__cvt+0x42>
 8007bbe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007bc2:	d100      	bne.n	8007bc6 <__cvt+0x3e>
 8007bc4:	3401      	adds	r4, #1
 8007bc6:	2102      	movs	r1, #2
 8007bc8:	e000      	b.n	8007bcc <__cvt+0x44>
 8007bca:	2103      	movs	r1, #3
 8007bcc:	ab03      	add	r3, sp, #12
 8007bce:	9301      	str	r3, [sp, #4]
 8007bd0:	ab02      	add	r3, sp, #8
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	ec47 6b10 	vmov	d0, r6, r7
 8007bd8:	4653      	mov	r3, sl
 8007bda:	4622      	mov	r2, r4
 8007bdc:	f001 fa84 	bl	80090e8 <_dtoa_r>
 8007be0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007be4:	4605      	mov	r5, r0
 8007be6:	d119      	bne.n	8007c1c <__cvt+0x94>
 8007be8:	f019 0f01 	tst.w	r9, #1
 8007bec:	d00e      	beq.n	8007c0c <__cvt+0x84>
 8007bee:	eb00 0904 	add.w	r9, r0, r4
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	4639      	mov	r1, r7
 8007bfa:	f7f8 ff65 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bfe:	b108      	cbz	r0, 8007c04 <__cvt+0x7c>
 8007c00:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c04:	2230      	movs	r2, #48	@ 0x30
 8007c06:	9b03      	ldr	r3, [sp, #12]
 8007c08:	454b      	cmp	r3, r9
 8007c0a:	d31e      	bcc.n	8007c4a <__cvt+0xc2>
 8007c0c:	9b03      	ldr	r3, [sp, #12]
 8007c0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c10:	1b5b      	subs	r3, r3, r5
 8007c12:	4628      	mov	r0, r5
 8007c14:	6013      	str	r3, [r2, #0]
 8007c16:	b004      	add	sp, #16
 8007c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c20:	eb00 0904 	add.w	r9, r0, r4
 8007c24:	d1e5      	bne.n	8007bf2 <__cvt+0x6a>
 8007c26:	7803      	ldrb	r3, [r0, #0]
 8007c28:	2b30      	cmp	r3, #48	@ 0x30
 8007c2a:	d10a      	bne.n	8007c42 <__cvt+0xba>
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2300      	movs	r3, #0
 8007c30:	4630      	mov	r0, r6
 8007c32:	4639      	mov	r1, r7
 8007c34:	f7f8 ff48 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c38:	b918      	cbnz	r0, 8007c42 <__cvt+0xba>
 8007c3a:	f1c4 0401 	rsb	r4, r4, #1
 8007c3e:	f8ca 4000 	str.w	r4, [sl]
 8007c42:	f8da 3000 	ldr.w	r3, [sl]
 8007c46:	4499      	add	r9, r3
 8007c48:	e7d3      	b.n	8007bf2 <__cvt+0x6a>
 8007c4a:	1c59      	adds	r1, r3, #1
 8007c4c:	9103      	str	r1, [sp, #12]
 8007c4e:	701a      	strb	r2, [r3, #0]
 8007c50:	e7d9      	b.n	8007c06 <__cvt+0x7e>

08007c52 <__exponent>:
 8007c52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c54:	2900      	cmp	r1, #0
 8007c56:	bfba      	itte	lt
 8007c58:	4249      	neglt	r1, r1
 8007c5a:	232d      	movlt	r3, #45	@ 0x2d
 8007c5c:	232b      	movge	r3, #43	@ 0x2b
 8007c5e:	2909      	cmp	r1, #9
 8007c60:	7002      	strb	r2, [r0, #0]
 8007c62:	7043      	strb	r3, [r0, #1]
 8007c64:	dd29      	ble.n	8007cba <__exponent+0x68>
 8007c66:	f10d 0307 	add.w	r3, sp, #7
 8007c6a:	461d      	mov	r5, r3
 8007c6c:	270a      	movs	r7, #10
 8007c6e:	461a      	mov	r2, r3
 8007c70:	fbb1 f6f7 	udiv	r6, r1, r7
 8007c74:	fb07 1416 	mls	r4, r7, r6, r1
 8007c78:	3430      	adds	r4, #48	@ 0x30
 8007c7a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007c7e:	460c      	mov	r4, r1
 8007c80:	2c63      	cmp	r4, #99	@ 0x63
 8007c82:	f103 33ff 	add.w	r3, r3, #4294967295
 8007c86:	4631      	mov	r1, r6
 8007c88:	dcf1      	bgt.n	8007c6e <__exponent+0x1c>
 8007c8a:	3130      	adds	r1, #48	@ 0x30
 8007c8c:	1e94      	subs	r4, r2, #2
 8007c8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007c92:	1c41      	adds	r1, r0, #1
 8007c94:	4623      	mov	r3, r4
 8007c96:	42ab      	cmp	r3, r5
 8007c98:	d30a      	bcc.n	8007cb0 <__exponent+0x5e>
 8007c9a:	f10d 0309 	add.w	r3, sp, #9
 8007c9e:	1a9b      	subs	r3, r3, r2
 8007ca0:	42ac      	cmp	r4, r5
 8007ca2:	bf88      	it	hi
 8007ca4:	2300      	movhi	r3, #0
 8007ca6:	3302      	adds	r3, #2
 8007ca8:	4403      	add	r3, r0
 8007caa:	1a18      	subs	r0, r3, r0
 8007cac:	b003      	add	sp, #12
 8007cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cb0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007cb4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007cb8:	e7ed      	b.n	8007c96 <__exponent+0x44>
 8007cba:	2330      	movs	r3, #48	@ 0x30
 8007cbc:	3130      	adds	r1, #48	@ 0x30
 8007cbe:	7083      	strb	r3, [r0, #2]
 8007cc0:	70c1      	strb	r1, [r0, #3]
 8007cc2:	1d03      	adds	r3, r0, #4
 8007cc4:	e7f1      	b.n	8007caa <__exponent+0x58>
	...

08007cc8 <_printf_float>:
 8007cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ccc:	b08d      	sub	sp, #52	@ 0x34
 8007cce:	460c      	mov	r4, r1
 8007cd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007cd4:	4616      	mov	r6, r2
 8007cd6:	461f      	mov	r7, r3
 8007cd8:	4605      	mov	r5, r0
 8007cda:	f001 f8f1 	bl	8008ec0 <_localeconv_r>
 8007cde:	6803      	ldr	r3, [r0, #0]
 8007ce0:	9304      	str	r3, [sp, #16]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7f8 fac4 	bl	8000270 <strlen>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cec:	f8d8 3000 	ldr.w	r3, [r8]
 8007cf0:	9005      	str	r0, [sp, #20]
 8007cf2:	3307      	adds	r3, #7
 8007cf4:	f023 0307 	bic.w	r3, r3, #7
 8007cf8:	f103 0208 	add.w	r2, r3, #8
 8007cfc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d00:	f8d4 b000 	ldr.w	fp, [r4]
 8007d04:	f8c8 2000 	str.w	r2, [r8]
 8007d08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007d10:	9307      	str	r3, [sp, #28]
 8007d12:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007d1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d1e:	4b9c      	ldr	r3, [pc, #624]	@ (8007f90 <_printf_float+0x2c8>)
 8007d20:	f04f 32ff 	mov.w	r2, #4294967295
 8007d24:	f7f8 ff02 	bl	8000b2c <__aeabi_dcmpun>
 8007d28:	bb70      	cbnz	r0, 8007d88 <_printf_float+0xc0>
 8007d2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d2e:	4b98      	ldr	r3, [pc, #608]	@ (8007f90 <_printf_float+0x2c8>)
 8007d30:	f04f 32ff 	mov.w	r2, #4294967295
 8007d34:	f7f8 fedc 	bl	8000af0 <__aeabi_dcmple>
 8007d38:	bb30      	cbnz	r0, 8007d88 <_printf_float+0xc0>
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4640      	mov	r0, r8
 8007d40:	4649      	mov	r1, r9
 8007d42:	f7f8 fecb 	bl	8000adc <__aeabi_dcmplt>
 8007d46:	b110      	cbz	r0, 8007d4e <_printf_float+0x86>
 8007d48:	232d      	movs	r3, #45	@ 0x2d
 8007d4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d4e:	4a91      	ldr	r2, [pc, #580]	@ (8007f94 <_printf_float+0x2cc>)
 8007d50:	4b91      	ldr	r3, [pc, #580]	@ (8007f98 <_printf_float+0x2d0>)
 8007d52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007d56:	bf94      	ite	ls
 8007d58:	4690      	movls	r8, r2
 8007d5a:	4698      	movhi	r8, r3
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	6123      	str	r3, [r4, #16]
 8007d60:	f02b 0304 	bic.w	r3, fp, #4
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	f04f 0900 	mov.w	r9, #0
 8007d6a:	9700      	str	r7, [sp, #0]
 8007d6c:	4633      	mov	r3, r6
 8007d6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007d70:	4621      	mov	r1, r4
 8007d72:	4628      	mov	r0, r5
 8007d74:	f000 f9d2 	bl	800811c <_printf_common>
 8007d78:	3001      	adds	r0, #1
 8007d7a:	f040 808d 	bne.w	8007e98 <_printf_float+0x1d0>
 8007d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d82:	b00d      	add	sp, #52	@ 0x34
 8007d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d88:	4642      	mov	r2, r8
 8007d8a:	464b      	mov	r3, r9
 8007d8c:	4640      	mov	r0, r8
 8007d8e:	4649      	mov	r1, r9
 8007d90:	f7f8 fecc 	bl	8000b2c <__aeabi_dcmpun>
 8007d94:	b140      	cbz	r0, 8007da8 <_printf_float+0xe0>
 8007d96:	464b      	mov	r3, r9
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	bfbc      	itt	lt
 8007d9c:	232d      	movlt	r3, #45	@ 0x2d
 8007d9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007da2:	4a7e      	ldr	r2, [pc, #504]	@ (8007f9c <_printf_float+0x2d4>)
 8007da4:	4b7e      	ldr	r3, [pc, #504]	@ (8007fa0 <_printf_float+0x2d8>)
 8007da6:	e7d4      	b.n	8007d52 <_printf_float+0x8a>
 8007da8:	6863      	ldr	r3, [r4, #4]
 8007daa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007dae:	9206      	str	r2, [sp, #24]
 8007db0:	1c5a      	adds	r2, r3, #1
 8007db2:	d13b      	bne.n	8007e2c <_printf_float+0x164>
 8007db4:	2306      	movs	r3, #6
 8007db6:	6063      	str	r3, [r4, #4]
 8007db8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	6022      	str	r2, [r4, #0]
 8007dc0:	9303      	str	r3, [sp, #12]
 8007dc2:	ab0a      	add	r3, sp, #40	@ 0x28
 8007dc4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007dc8:	ab09      	add	r3, sp, #36	@ 0x24
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	6861      	ldr	r1, [r4, #4]
 8007dce:	ec49 8b10 	vmov	d0, r8, r9
 8007dd2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	f7ff fed6 	bl	8007b88 <__cvt>
 8007ddc:	9b06      	ldr	r3, [sp, #24]
 8007dde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007de0:	2b47      	cmp	r3, #71	@ 0x47
 8007de2:	4680      	mov	r8, r0
 8007de4:	d129      	bne.n	8007e3a <_printf_float+0x172>
 8007de6:	1cc8      	adds	r0, r1, #3
 8007de8:	db02      	blt.n	8007df0 <_printf_float+0x128>
 8007dea:	6863      	ldr	r3, [r4, #4]
 8007dec:	4299      	cmp	r1, r3
 8007dee:	dd41      	ble.n	8007e74 <_printf_float+0x1ac>
 8007df0:	f1aa 0a02 	sub.w	sl, sl, #2
 8007df4:	fa5f fa8a 	uxtb.w	sl, sl
 8007df8:	3901      	subs	r1, #1
 8007dfa:	4652      	mov	r2, sl
 8007dfc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e00:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e02:	f7ff ff26 	bl	8007c52 <__exponent>
 8007e06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e08:	1813      	adds	r3, r2, r0
 8007e0a:	2a01      	cmp	r2, #1
 8007e0c:	4681      	mov	r9, r0
 8007e0e:	6123      	str	r3, [r4, #16]
 8007e10:	dc02      	bgt.n	8007e18 <_printf_float+0x150>
 8007e12:	6822      	ldr	r2, [r4, #0]
 8007e14:	07d2      	lsls	r2, r2, #31
 8007e16:	d501      	bpl.n	8007e1c <_printf_float+0x154>
 8007e18:	3301      	adds	r3, #1
 8007e1a:	6123      	str	r3, [r4, #16]
 8007e1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d0a2      	beq.n	8007d6a <_printf_float+0xa2>
 8007e24:	232d      	movs	r3, #45	@ 0x2d
 8007e26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e2a:	e79e      	b.n	8007d6a <_printf_float+0xa2>
 8007e2c:	9a06      	ldr	r2, [sp, #24]
 8007e2e:	2a47      	cmp	r2, #71	@ 0x47
 8007e30:	d1c2      	bne.n	8007db8 <_printf_float+0xf0>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1c0      	bne.n	8007db8 <_printf_float+0xf0>
 8007e36:	2301      	movs	r3, #1
 8007e38:	e7bd      	b.n	8007db6 <_printf_float+0xee>
 8007e3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e3e:	d9db      	bls.n	8007df8 <_printf_float+0x130>
 8007e40:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007e44:	d118      	bne.n	8007e78 <_printf_float+0x1b0>
 8007e46:	2900      	cmp	r1, #0
 8007e48:	6863      	ldr	r3, [r4, #4]
 8007e4a:	dd0b      	ble.n	8007e64 <_printf_float+0x19c>
 8007e4c:	6121      	str	r1, [r4, #16]
 8007e4e:	b913      	cbnz	r3, 8007e56 <_printf_float+0x18e>
 8007e50:	6822      	ldr	r2, [r4, #0]
 8007e52:	07d0      	lsls	r0, r2, #31
 8007e54:	d502      	bpl.n	8007e5c <_printf_float+0x194>
 8007e56:	3301      	adds	r3, #1
 8007e58:	440b      	add	r3, r1
 8007e5a:	6123      	str	r3, [r4, #16]
 8007e5c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007e5e:	f04f 0900 	mov.w	r9, #0
 8007e62:	e7db      	b.n	8007e1c <_printf_float+0x154>
 8007e64:	b913      	cbnz	r3, 8007e6c <_printf_float+0x1a4>
 8007e66:	6822      	ldr	r2, [r4, #0]
 8007e68:	07d2      	lsls	r2, r2, #31
 8007e6a:	d501      	bpl.n	8007e70 <_printf_float+0x1a8>
 8007e6c:	3302      	adds	r3, #2
 8007e6e:	e7f4      	b.n	8007e5a <_printf_float+0x192>
 8007e70:	2301      	movs	r3, #1
 8007e72:	e7f2      	b.n	8007e5a <_printf_float+0x192>
 8007e74:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007e78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e7a:	4299      	cmp	r1, r3
 8007e7c:	db05      	blt.n	8007e8a <_printf_float+0x1c2>
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	6121      	str	r1, [r4, #16]
 8007e82:	07d8      	lsls	r0, r3, #31
 8007e84:	d5ea      	bpl.n	8007e5c <_printf_float+0x194>
 8007e86:	1c4b      	adds	r3, r1, #1
 8007e88:	e7e7      	b.n	8007e5a <_printf_float+0x192>
 8007e8a:	2900      	cmp	r1, #0
 8007e8c:	bfd4      	ite	le
 8007e8e:	f1c1 0202 	rsble	r2, r1, #2
 8007e92:	2201      	movgt	r2, #1
 8007e94:	4413      	add	r3, r2
 8007e96:	e7e0      	b.n	8007e5a <_printf_float+0x192>
 8007e98:	6823      	ldr	r3, [r4, #0]
 8007e9a:	055a      	lsls	r2, r3, #21
 8007e9c:	d407      	bmi.n	8007eae <_printf_float+0x1e6>
 8007e9e:	6923      	ldr	r3, [r4, #16]
 8007ea0:	4642      	mov	r2, r8
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	47b8      	blx	r7
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	d12b      	bne.n	8007f04 <_printf_float+0x23c>
 8007eac:	e767      	b.n	8007d7e <_printf_float+0xb6>
 8007eae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007eb2:	f240 80dd 	bls.w	8008070 <_printf_float+0x3a8>
 8007eb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f7f8 fe03 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d033      	beq.n	8007f2e <_printf_float+0x266>
 8007ec6:	4a37      	ldr	r2, [pc, #220]	@ (8007fa4 <_printf_float+0x2dc>)
 8007ec8:	2301      	movs	r3, #1
 8007eca:	4631      	mov	r1, r6
 8007ecc:	4628      	mov	r0, r5
 8007ece:	47b8      	blx	r7
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	f43f af54 	beq.w	8007d7e <_printf_float+0xb6>
 8007ed6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007eda:	4543      	cmp	r3, r8
 8007edc:	db02      	blt.n	8007ee4 <_printf_float+0x21c>
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	07d8      	lsls	r0, r3, #31
 8007ee2:	d50f      	bpl.n	8007f04 <_printf_float+0x23c>
 8007ee4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ee8:	4631      	mov	r1, r6
 8007eea:	4628      	mov	r0, r5
 8007eec:	47b8      	blx	r7
 8007eee:	3001      	adds	r0, #1
 8007ef0:	f43f af45 	beq.w	8007d7e <_printf_float+0xb6>
 8007ef4:	f04f 0900 	mov.w	r9, #0
 8007ef8:	f108 38ff 	add.w	r8, r8, #4294967295
 8007efc:	f104 0a1a 	add.w	sl, r4, #26
 8007f00:	45c8      	cmp	r8, r9
 8007f02:	dc09      	bgt.n	8007f18 <_printf_float+0x250>
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	079b      	lsls	r3, r3, #30
 8007f08:	f100 8103 	bmi.w	8008112 <_printf_float+0x44a>
 8007f0c:	68e0      	ldr	r0, [r4, #12]
 8007f0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f10:	4298      	cmp	r0, r3
 8007f12:	bfb8      	it	lt
 8007f14:	4618      	movlt	r0, r3
 8007f16:	e734      	b.n	8007d82 <_printf_float+0xba>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	4652      	mov	r2, sl
 8007f1c:	4631      	mov	r1, r6
 8007f1e:	4628      	mov	r0, r5
 8007f20:	47b8      	blx	r7
 8007f22:	3001      	adds	r0, #1
 8007f24:	f43f af2b 	beq.w	8007d7e <_printf_float+0xb6>
 8007f28:	f109 0901 	add.w	r9, r9, #1
 8007f2c:	e7e8      	b.n	8007f00 <_printf_float+0x238>
 8007f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	dc39      	bgt.n	8007fa8 <_printf_float+0x2e0>
 8007f34:	4a1b      	ldr	r2, [pc, #108]	@ (8007fa4 <_printf_float+0x2dc>)
 8007f36:	2301      	movs	r3, #1
 8007f38:	4631      	mov	r1, r6
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	47b8      	blx	r7
 8007f3e:	3001      	adds	r0, #1
 8007f40:	f43f af1d 	beq.w	8007d7e <_printf_float+0xb6>
 8007f44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007f48:	ea59 0303 	orrs.w	r3, r9, r3
 8007f4c:	d102      	bne.n	8007f54 <_printf_float+0x28c>
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	07d9      	lsls	r1, r3, #31
 8007f52:	d5d7      	bpl.n	8007f04 <_printf_float+0x23c>
 8007f54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f58:	4631      	mov	r1, r6
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	47b8      	blx	r7
 8007f5e:	3001      	adds	r0, #1
 8007f60:	f43f af0d 	beq.w	8007d7e <_printf_float+0xb6>
 8007f64:	f04f 0a00 	mov.w	sl, #0
 8007f68:	f104 0b1a 	add.w	fp, r4, #26
 8007f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f6e:	425b      	negs	r3, r3
 8007f70:	4553      	cmp	r3, sl
 8007f72:	dc01      	bgt.n	8007f78 <_printf_float+0x2b0>
 8007f74:	464b      	mov	r3, r9
 8007f76:	e793      	b.n	8007ea0 <_printf_float+0x1d8>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	465a      	mov	r2, fp
 8007f7c:	4631      	mov	r1, r6
 8007f7e:	4628      	mov	r0, r5
 8007f80:	47b8      	blx	r7
 8007f82:	3001      	adds	r0, #1
 8007f84:	f43f aefb 	beq.w	8007d7e <_printf_float+0xb6>
 8007f88:	f10a 0a01 	add.w	sl, sl, #1
 8007f8c:	e7ee      	b.n	8007f6c <_printf_float+0x2a4>
 8007f8e:	bf00      	nop
 8007f90:	7fefffff 	.word	0x7fefffff
 8007f94:	0800cf8d 	.word	0x0800cf8d
 8007f98:	0800cf91 	.word	0x0800cf91
 8007f9c:	0800cf95 	.word	0x0800cf95
 8007fa0:	0800cf99 	.word	0x0800cf99
 8007fa4:	0800d227 	.word	0x0800d227
 8007fa8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007faa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007fae:	4553      	cmp	r3, sl
 8007fb0:	bfa8      	it	ge
 8007fb2:	4653      	movge	r3, sl
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	4699      	mov	r9, r3
 8007fb8:	dc36      	bgt.n	8008028 <_printf_float+0x360>
 8007fba:	f04f 0b00 	mov.w	fp, #0
 8007fbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fc2:	f104 021a 	add.w	r2, r4, #26
 8007fc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007fc8:	9306      	str	r3, [sp, #24]
 8007fca:	eba3 0309 	sub.w	r3, r3, r9
 8007fce:	455b      	cmp	r3, fp
 8007fd0:	dc31      	bgt.n	8008036 <_printf_float+0x36e>
 8007fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fd4:	459a      	cmp	sl, r3
 8007fd6:	dc3a      	bgt.n	800804e <_printf_float+0x386>
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	07da      	lsls	r2, r3, #31
 8007fdc:	d437      	bmi.n	800804e <_printf_float+0x386>
 8007fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fe0:	ebaa 0903 	sub.w	r9, sl, r3
 8007fe4:	9b06      	ldr	r3, [sp, #24]
 8007fe6:	ebaa 0303 	sub.w	r3, sl, r3
 8007fea:	4599      	cmp	r9, r3
 8007fec:	bfa8      	it	ge
 8007fee:	4699      	movge	r9, r3
 8007ff0:	f1b9 0f00 	cmp.w	r9, #0
 8007ff4:	dc33      	bgt.n	800805e <_printf_float+0x396>
 8007ff6:	f04f 0800 	mov.w	r8, #0
 8007ffa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ffe:	f104 0b1a 	add.w	fp, r4, #26
 8008002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008004:	ebaa 0303 	sub.w	r3, sl, r3
 8008008:	eba3 0309 	sub.w	r3, r3, r9
 800800c:	4543      	cmp	r3, r8
 800800e:	f77f af79 	ble.w	8007f04 <_printf_float+0x23c>
 8008012:	2301      	movs	r3, #1
 8008014:	465a      	mov	r2, fp
 8008016:	4631      	mov	r1, r6
 8008018:	4628      	mov	r0, r5
 800801a:	47b8      	blx	r7
 800801c:	3001      	adds	r0, #1
 800801e:	f43f aeae 	beq.w	8007d7e <_printf_float+0xb6>
 8008022:	f108 0801 	add.w	r8, r8, #1
 8008026:	e7ec      	b.n	8008002 <_printf_float+0x33a>
 8008028:	4642      	mov	r2, r8
 800802a:	4631      	mov	r1, r6
 800802c:	4628      	mov	r0, r5
 800802e:	47b8      	blx	r7
 8008030:	3001      	adds	r0, #1
 8008032:	d1c2      	bne.n	8007fba <_printf_float+0x2f2>
 8008034:	e6a3      	b.n	8007d7e <_printf_float+0xb6>
 8008036:	2301      	movs	r3, #1
 8008038:	4631      	mov	r1, r6
 800803a:	4628      	mov	r0, r5
 800803c:	9206      	str	r2, [sp, #24]
 800803e:	47b8      	blx	r7
 8008040:	3001      	adds	r0, #1
 8008042:	f43f ae9c 	beq.w	8007d7e <_printf_float+0xb6>
 8008046:	9a06      	ldr	r2, [sp, #24]
 8008048:	f10b 0b01 	add.w	fp, fp, #1
 800804c:	e7bb      	b.n	8007fc6 <_printf_float+0x2fe>
 800804e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008052:	4631      	mov	r1, r6
 8008054:	4628      	mov	r0, r5
 8008056:	47b8      	blx	r7
 8008058:	3001      	adds	r0, #1
 800805a:	d1c0      	bne.n	8007fde <_printf_float+0x316>
 800805c:	e68f      	b.n	8007d7e <_printf_float+0xb6>
 800805e:	9a06      	ldr	r2, [sp, #24]
 8008060:	464b      	mov	r3, r9
 8008062:	4442      	add	r2, r8
 8008064:	4631      	mov	r1, r6
 8008066:	4628      	mov	r0, r5
 8008068:	47b8      	blx	r7
 800806a:	3001      	adds	r0, #1
 800806c:	d1c3      	bne.n	8007ff6 <_printf_float+0x32e>
 800806e:	e686      	b.n	8007d7e <_printf_float+0xb6>
 8008070:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008074:	f1ba 0f01 	cmp.w	sl, #1
 8008078:	dc01      	bgt.n	800807e <_printf_float+0x3b6>
 800807a:	07db      	lsls	r3, r3, #31
 800807c:	d536      	bpl.n	80080ec <_printf_float+0x424>
 800807e:	2301      	movs	r3, #1
 8008080:	4642      	mov	r2, r8
 8008082:	4631      	mov	r1, r6
 8008084:	4628      	mov	r0, r5
 8008086:	47b8      	blx	r7
 8008088:	3001      	adds	r0, #1
 800808a:	f43f ae78 	beq.w	8007d7e <_printf_float+0xb6>
 800808e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008092:	4631      	mov	r1, r6
 8008094:	4628      	mov	r0, r5
 8008096:	47b8      	blx	r7
 8008098:	3001      	adds	r0, #1
 800809a:	f43f ae70 	beq.w	8007d7e <_printf_float+0xb6>
 800809e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80080a2:	2200      	movs	r2, #0
 80080a4:	2300      	movs	r3, #0
 80080a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080aa:	f7f8 fd0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80080ae:	b9c0      	cbnz	r0, 80080e2 <_printf_float+0x41a>
 80080b0:	4653      	mov	r3, sl
 80080b2:	f108 0201 	add.w	r2, r8, #1
 80080b6:	4631      	mov	r1, r6
 80080b8:	4628      	mov	r0, r5
 80080ba:	47b8      	blx	r7
 80080bc:	3001      	adds	r0, #1
 80080be:	d10c      	bne.n	80080da <_printf_float+0x412>
 80080c0:	e65d      	b.n	8007d7e <_printf_float+0xb6>
 80080c2:	2301      	movs	r3, #1
 80080c4:	465a      	mov	r2, fp
 80080c6:	4631      	mov	r1, r6
 80080c8:	4628      	mov	r0, r5
 80080ca:	47b8      	blx	r7
 80080cc:	3001      	adds	r0, #1
 80080ce:	f43f ae56 	beq.w	8007d7e <_printf_float+0xb6>
 80080d2:	f108 0801 	add.w	r8, r8, #1
 80080d6:	45d0      	cmp	r8, sl
 80080d8:	dbf3      	blt.n	80080c2 <_printf_float+0x3fa>
 80080da:	464b      	mov	r3, r9
 80080dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80080e0:	e6df      	b.n	8007ea2 <_printf_float+0x1da>
 80080e2:	f04f 0800 	mov.w	r8, #0
 80080e6:	f104 0b1a 	add.w	fp, r4, #26
 80080ea:	e7f4      	b.n	80080d6 <_printf_float+0x40e>
 80080ec:	2301      	movs	r3, #1
 80080ee:	4642      	mov	r2, r8
 80080f0:	e7e1      	b.n	80080b6 <_printf_float+0x3ee>
 80080f2:	2301      	movs	r3, #1
 80080f4:	464a      	mov	r2, r9
 80080f6:	4631      	mov	r1, r6
 80080f8:	4628      	mov	r0, r5
 80080fa:	47b8      	blx	r7
 80080fc:	3001      	adds	r0, #1
 80080fe:	f43f ae3e 	beq.w	8007d7e <_printf_float+0xb6>
 8008102:	f108 0801 	add.w	r8, r8, #1
 8008106:	68e3      	ldr	r3, [r4, #12]
 8008108:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800810a:	1a5b      	subs	r3, r3, r1
 800810c:	4543      	cmp	r3, r8
 800810e:	dcf0      	bgt.n	80080f2 <_printf_float+0x42a>
 8008110:	e6fc      	b.n	8007f0c <_printf_float+0x244>
 8008112:	f04f 0800 	mov.w	r8, #0
 8008116:	f104 0919 	add.w	r9, r4, #25
 800811a:	e7f4      	b.n	8008106 <_printf_float+0x43e>

0800811c <_printf_common>:
 800811c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008120:	4616      	mov	r6, r2
 8008122:	4698      	mov	r8, r3
 8008124:	688a      	ldr	r2, [r1, #8]
 8008126:	690b      	ldr	r3, [r1, #16]
 8008128:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800812c:	4293      	cmp	r3, r2
 800812e:	bfb8      	it	lt
 8008130:	4613      	movlt	r3, r2
 8008132:	6033      	str	r3, [r6, #0]
 8008134:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008138:	4607      	mov	r7, r0
 800813a:	460c      	mov	r4, r1
 800813c:	b10a      	cbz	r2, 8008142 <_printf_common+0x26>
 800813e:	3301      	adds	r3, #1
 8008140:	6033      	str	r3, [r6, #0]
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	0699      	lsls	r1, r3, #26
 8008146:	bf42      	ittt	mi
 8008148:	6833      	ldrmi	r3, [r6, #0]
 800814a:	3302      	addmi	r3, #2
 800814c:	6033      	strmi	r3, [r6, #0]
 800814e:	6825      	ldr	r5, [r4, #0]
 8008150:	f015 0506 	ands.w	r5, r5, #6
 8008154:	d106      	bne.n	8008164 <_printf_common+0x48>
 8008156:	f104 0a19 	add.w	sl, r4, #25
 800815a:	68e3      	ldr	r3, [r4, #12]
 800815c:	6832      	ldr	r2, [r6, #0]
 800815e:	1a9b      	subs	r3, r3, r2
 8008160:	42ab      	cmp	r3, r5
 8008162:	dc26      	bgt.n	80081b2 <_printf_common+0x96>
 8008164:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008168:	6822      	ldr	r2, [r4, #0]
 800816a:	3b00      	subs	r3, #0
 800816c:	bf18      	it	ne
 800816e:	2301      	movne	r3, #1
 8008170:	0692      	lsls	r2, r2, #26
 8008172:	d42b      	bmi.n	80081cc <_printf_common+0xb0>
 8008174:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008178:	4641      	mov	r1, r8
 800817a:	4638      	mov	r0, r7
 800817c:	47c8      	blx	r9
 800817e:	3001      	adds	r0, #1
 8008180:	d01e      	beq.n	80081c0 <_printf_common+0xa4>
 8008182:	6823      	ldr	r3, [r4, #0]
 8008184:	6922      	ldr	r2, [r4, #16]
 8008186:	f003 0306 	and.w	r3, r3, #6
 800818a:	2b04      	cmp	r3, #4
 800818c:	bf02      	ittt	eq
 800818e:	68e5      	ldreq	r5, [r4, #12]
 8008190:	6833      	ldreq	r3, [r6, #0]
 8008192:	1aed      	subeq	r5, r5, r3
 8008194:	68a3      	ldr	r3, [r4, #8]
 8008196:	bf0c      	ite	eq
 8008198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800819c:	2500      	movne	r5, #0
 800819e:	4293      	cmp	r3, r2
 80081a0:	bfc4      	itt	gt
 80081a2:	1a9b      	subgt	r3, r3, r2
 80081a4:	18ed      	addgt	r5, r5, r3
 80081a6:	2600      	movs	r6, #0
 80081a8:	341a      	adds	r4, #26
 80081aa:	42b5      	cmp	r5, r6
 80081ac:	d11a      	bne.n	80081e4 <_printf_common+0xc8>
 80081ae:	2000      	movs	r0, #0
 80081b0:	e008      	b.n	80081c4 <_printf_common+0xa8>
 80081b2:	2301      	movs	r3, #1
 80081b4:	4652      	mov	r2, sl
 80081b6:	4641      	mov	r1, r8
 80081b8:	4638      	mov	r0, r7
 80081ba:	47c8      	blx	r9
 80081bc:	3001      	adds	r0, #1
 80081be:	d103      	bne.n	80081c8 <_printf_common+0xac>
 80081c0:	f04f 30ff 	mov.w	r0, #4294967295
 80081c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081c8:	3501      	adds	r5, #1
 80081ca:	e7c6      	b.n	800815a <_printf_common+0x3e>
 80081cc:	18e1      	adds	r1, r4, r3
 80081ce:	1c5a      	adds	r2, r3, #1
 80081d0:	2030      	movs	r0, #48	@ 0x30
 80081d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80081d6:	4422      	add	r2, r4
 80081d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80081dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80081e0:	3302      	adds	r3, #2
 80081e2:	e7c7      	b.n	8008174 <_printf_common+0x58>
 80081e4:	2301      	movs	r3, #1
 80081e6:	4622      	mov	r2, r4
 80081e8:	4641      	mov	r1, r8
 80081ea:	4638      	mov	r0, r7
 80081ec:	47c8      	blx	r9
 80081ee:	3001      	adds	r0, #1
 80081f0:	d0e6      	beq.n	80081c0 <_printf_common+0xa4>
 80081f2:	3601      	adds	r6, #1
 80081f4:	e7d9      	b.n	80081aa <_printf_common+0x8e>
	...

080081f8 <_printf_i>:
 80081f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081fc:	7e0f      	ldrb	r7, [r1, #24]
 80081fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008200:	2f78      	cmp	r7, #120	@ 0x78
 8008202:	4691      	mov	r9, r2
 8008204:	4680      	mov	r8, r0
 8008206:	460c      	mov	r4, r1
 8008208:	469a      	mov	sl, r3
 800820a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800820e:	d807      	bhi.n	8008220 <_printf_i+0x28>
 8008210:	2f62      	cmp	r7, #98	@ 0x62
 8008212:	d80a      	bhi.n	800822a <_printf_i+0x32>
 8008214:	2f00      	cmp	r7, #0
 8008216:	f000 80d2 	beq.w	80083be <_printf_i+0x1c6>
 800821a:	2f58      	cmp	r7, #88	@ 0x58
 800821c:	f000 80b9 	beq.w	8008392 <_printf_i+0x19a>
 8008220:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008224:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008228:	e03a      	b.n	80082a0 <_printf_i+0xa8>
 800822a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800822e:	2b15      	cmp	r3, #21
 8008230:	d8f6      	bhi.n	8008220 <_printf_i+0x28>
 8008232:	a101      	add	r1, pc, #4	@ (adr r1, 8008238 <_printf_i+0x40>)
 8008234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008238:	08008291 	.word	0x08008291
 800823c:	080082a5 	.word	0x080082a5
 8008240:	08008221 	.word	0x08008221
 8008244:	08008221 	.word	0x08008221
 8008248:	08008221 	.word	0x08008221
 800824c:	08008221 	.word	0x08008221
 8008250:	080082a5 	.word	0x080082a5
 8008254:	08008221 	.word	0x08008221
 8008258:	08008221 	.word	0x08008221
 800825c:	08008221 	.word	0x08008221
 8008260:	08008221 	.word	0x08008221
 8008264:	080083a5 	.word	0x080083a5
 8008268:	080082cf 	.word	0x080082cf
 800826c:	0800835f 	.word	0x0800835f
 8008270:	08008221 	.word	0x08008221
 8008274:	08008221 	.word	0x08008221
 8008278:	080083c7 	.word	0x080083c7
 800827c:	08008221 	.word	0x08008221
 8008280:	080082cf 	.word	0x080082cf
 8008284:	08008221 	.word	0x08008221
 8008288:	08008221 	.word	0x08008221
 800828c:	08008367 	.word	0x08008367
 8008290:	6833      	ldr	r3, [r6, #0]
 8008292:	1d1a      	adds	r2, r3, #4
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	6032      	str	r2, [r6, #0]
 8008298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800829c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80082a0:	2301      	movs	r3, #1
 80082a2:	e09d      	b.n	80083e0 <_printf_i+0x1e8>
 80082a4:	6833      	ldr	r3, [r6, #0]
 80082a6:	6820      	ldr	r0, [r4, #0]
 80082a8:	1d19      	adds	r1, r3, #4
 80082aa:	6031      	str	r1, [r6, #0]
 80082ac:	0606      	lsls	r6, r0, #24
 80082ae:	d501      	bpl.n	80082b4 <_printf_i+0xbc>
 80082b0:	681d      	ldr	r5, [r3, #0]
 80082b2:	e003      	b.n	80082bc <_printf_i+0xc4>
 80082b4:	0645      	lsls	r5, r0, #25
 80082b6:	d5fb      	bpl.n	80082b0 <_printf_i+0xb8>
 80082b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80082bc:	2d00      	cmp	r5, #0
 80082be:	da03      	bge.n	80082c8 <_printf_i+0xd0>
 80082c0:	232d      	movs	r3, #45	@ 0x2d
 80082c2:	426d      	negs	r5, r5
 80082c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082c8:	4859      	ldr	r0, [pc, #356]	@ (8008430 <_printf_i+0x238>)
 80082ca:	230a      	movs	r3, #10
 80082cc:	e011      	b.n	80082f2 <_printf_i+0xfa>
 80082ce:	6821      	ldr	r1, [r4, #0]
 80082d0:	6833      	ldr	r3, [r6, #0]
 80082d2:	0608      	lsls	r0, r1, #24
 80082d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80082d8:	d402      	bmi.n	80082e0 <_printf_i+0xe8>
 80082da:	0649      	lsls	r1, r1, #25
 80082dc:	bf48      	it	mi
 80082de:	b2ad      	uxthmi	r5, r5
 80082e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80082e2:	4853      	ldr	r0, [pc, #332]	@ (8008430 <_printf_i+0x238>)
 80082e4:	6033      	str	r3, [r6, #0]
 80082e6:	bf14      	ite	ne
 80082e8:	230a      	movne	r3, #10
 80082ea:	2308      	moveq	r3, #8
 80082ec:	2100      	movs	r1, #0
 80082ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80082f2:	6866      	ldr	r6, [r4, #4]
 80082f4:	60a6      	str	r6, [r4, #8]
 80082f6:	2e00      	cmp	r6, #0
 80082f8:	bfa2      	ittt	ge
 80082fa:	6821      	ldrge	r1, [r4, #0]
 80082fc:	f021 0104 	bicge.w	r1, r1, #4
 8008300:	6021      	strge	r1, [r4, #0]
 8008302:	b90d      	cbnz	r5, 8008308 <_printf_i+0x110>
 8008304:	2e00      	cmp	r6, #0
 8008306:	d04b      	beq.n	80083a0 <_printf_i+0x1a8>
 8008308:	4616      	mov	r6, r2
 800830a:	fbb5 f1f3 	udiv	r1, r5, r3
 800830e:	fb03 5711 	mls	r7, r3, r1, r5
 8008312:	5dc7      	ldrb	r7, [r0, r7]
 8008314:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008318:	462f      	mov	r7, r5
 800831a:	42bb      	cmp	r3, r7
 800831c:	460d      	mov	r5, r1
 800831e:	d9f4      	bls.n	800830a <_printf_i+0x112>
 8008320:	2b08      	cmp	r3, #8
 8008322:	d10b      	bne.n	800833c <_printf_i+0x144>
 8008324:	6823      	ldr	r3, [r4, #0]
 8008326:	07df      	lsls	r7, r3, #31
 8008328:	d508      	bpl.n	800833c <_printf_i+0x144>
 800832a:	6923      	ldr	r3, [r4, #16]
 800832c:	6861      	ldr	r1, [r4, #4]
 800832e:	4299      	cmp	r1, r3
 8008330:	bfde      	ittt	le
 8008332:	2330      	movle	r3, #48	@ 0x30
 8008334:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008338:	f106 36ff 	addle.w	r6, r6, #4294967295
 800833c:	1b92      	subs	r2, r2, r6
 800833e:	6122      	str	r2, [r4, #16]
 8008340:	f8cd a000 	str.w	sl, [sp]
 8008344:	464b      	mov	r3, r9
 8008346:	aa03      	add	r2, sp, #12
 8008348:	4621      	mov	r1, r4
 800834a:	4640      	mov	r0, r8
 800834c:	f7ff fee6 	bl	800811c <_printf_common>
 8008350:	3001      	adds	r0, #1
 8008352:	d14a      	bne.n	80083ea <_printf_i+0x1f2>
 8008354:	f04f 30ff 	mov.w	r0, #4294967295
 8008358:	b004      	add	sp, #16
 800835a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	f043 0320 	orr.w	r3, r3, #32
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	4833      	ldr	r0, [pc, #204]	@ (8008434 <_printf_i+0x23c>)
 8008368:	2778      	movs	r7, #120	@ 0x78
 800836a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800836e:	6823      	ldr	r3, [r4, #0]
 8008370:	6831      	ldr	r1, [r6, #0]
 8008372:	061f      	lsls	r7, r3, #24
 8008374:	f851 5b04 	ldr.w	r5, [r1], #4
 8008378:	d402      	bmi.n	8008380 <_printf_i+0x188>
 800837a:	065f      	lsls	r7, r3, #25
 800837c:	bf48      	it	mi
 800837e:	b2ad      	uxthmi	r5, r5
 8008380:	6031      	str	r1, [r6, #0]
 8008382:	07d9      	lsls	r1, r3, #31
 8008384:	bf44      	itt	mi
 8008386:	f043 0320 	orrmi.w	r3, r3, #32
 800838a:	6023      	strmi	r3, [r4, #0]
 800838c:	b11d      	cbz	r5, 8008396 <_printf_i+0x19e>
 800838e:	2310      	movs	r3, #16
 8008390:	e7ac      	b.n	80082ec <_printf_i+0xf4>
 8008392:	4827      	ldr	r0, [pc, #156]	@ (8008430 <_printf_i+0x238>)
 8008394:	e7e9      	b.n	800836a <_printf_i+0x172>
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	f023 0320 	bic.w	r3, r3, #32
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	e7f6      	b.n	800838e <_printf_i+0x196>
 80083a0:	4616      	mov	r6, r2
 80083a2:	e7bd      	b.n	8008320 <_printf_i+0x128>
 80083a4:	6833      	ldr	r3, [r6, #0]
 80083a6:	6825      	ldr	r5, [r4, #0]
 80083a8:	6961      	ldr	r1, [r4, #20]
 80083aa:	1d18      	adds	r0, r3, #4
 80083ac:	6030      	str	r0, [r6, #0]
 80083ae:	062e      	lsls	r6, r5, #24
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	d501      	bpl.n	80083b8 <_printf_i+0x1c0>
 80083b4:	6019      	str	r1, [r3, #0]
 80083b6:	e002      	b.n	80083be <_printf_i+0x1c6>
 80083b8:	0668      	lsls	r0, r5, #25
 80083ba:	d5fb      	bpl.n	80083b4 <_printf_i+0x1bc>
 80083bc:	8019      	strh	r1, [r3, #0]
 80083be:	2300      	movs	r3, #0
 80083c0:	6123      	str	r3, [r4, #16]
 80083c2:	4616      	mov	r6, r2
 80083c4:	e7bc      	b.n	8008340 <_printf_i+0x148>
 80083c6:	6833      	ldr	r3, [r6, #0]
 80083c8:	1d1a      	adds	r2, r3, #4
 80083ca:	6032      	str	r2, [r6, #0]
 80083cc:	681e      	ldr	r6, [r3, #0]
 80083ce:	6862      	ldr	r2, [r4, #4]
 80083d0:	2100      	movs	r1, #0
 80083d2:	4630      	mov	r0, r6
 80083d4:	f7f7 fefc 	bl	80001d0 <memchr>
 80083d8:	b108      	cbz	r0, 80083de <_printf_i+0x1e6>
 80083da:	1b80      	subs	r0, r0, r6
 80083dc:	6060      	str	r0, [r4, #4]
 80083de:	6863      	ldr	r3, [r4, #4]
 80083e0:	6123      	str	r3, [r4, #16]
 80083e2:	2300      	movs	r3, #0
 80083e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083e8:	e7aa      	b.n	8008340 <_printf_i+0x148>
 80083ea:	6923      	ldr	r3, [r4, #16]
 80083ec:	4632      	mov	r2, r6
 80083ee:	4649      	mov	r1, r9
 80083f0:	4640      	mov	r0, r8
 80083f2:	47d0      	blx	sl
 80083f4:	3001      	adds	r0, #1
 80083f6:	d0ad      	beq.n	8008354 <_printf_i+0x15c>
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	079b      	lsls	r3, r3, #30
 80083fc:	d413      	bmi.n	8008426 <_printf_i+0x22e>
 80083fe:	68e0      	ldr	r0, [r4, #12]
 8008400:	9b03      	ldr	r3, [sp, #12]
 8008402:	4298      	cmp	r0, r3
 8008404:	bfb8      	it	lt
 8008406:	4618      	movlt	r0, r3
 8008408:	e7a6      	b.n	8008358 <_printf_i+0x160>
 800840a:	2301      	movs	r3, #1
 800840c:	4632      	mov	r2, r6
 800840e:	4649      	mov	r1, r9
 8008410:	4640      	mov	r0, r8
 8008412:	47d0      	blx	sl
 8008414:	3001      	adds	r0, #1
 8008416:	d09d      	beq.n	8008354 <_printf_i+0x15c>
 8008418:	3501      	adds	r5, #1
 800841a:	68e3      	ldr	r3, [r4, #12]
 800841c:	9903      	ldr	r1, [sp, #12]
 800841e:	1a5b      	subs	r3, r3, r1
 8008420:	42ab      	cmp	r3, r5
 8008422:	dcf2      	bgt.n	800840a <_printf_i+0x212>
 8008424:	e7eb      	b.n	80083fe <_printf_i+0x206>
 8008426:	2500      	movs	r5, #0
 8008428:	f104 0619 	add.w	r6, r4, #25
 800842c:	e7f5      	b.n	800841a <_printf_i+0x222>
 800842e:	bf00      	nop
 8008430:	0800cf9d 	.word	0x0800cf9d
 8008434:	0800cfae 	.word	0x0800cfae

08008438 <_scanf_float>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	b087      	sub	sp, #28
 800843e:	4617      	mov	r7, r2
 8008440:	9303      	str	r3, [sp, #12]
 8008442:	688b      	ldr	r3, [r1, #8]
 8008444:	1e5a      	subs	r2, r3, #1
 8008446:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800844a:	bf81      	itttt	hi
 800844c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008450:	eb03 0b05 	addhi.w	fp, r3, r5
 8008454:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008458:	608b      	strhi	r3, [r1, #8]
 800845a:	680b      	ldr	r3, [r1, #0]
 800845c:	460a      	mov	r2, r1
 800845e:	f04f 0500 	mov.w	r5, #0
 8008462:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008466:	f842 3b1c 	str.w	r3, [r2], #28
 800846a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800846e:	4680      	mov	r8, r0
 8008470:	460c      	mov	r4, r1
 8008472:	bf98      	it	ls
 8008474:	f04f 0b00 	movls.w	fp, #0
 8008478:	9201      	str	r2, [sp, #4]
 800847a:	4616      	mov	r6, r2
 800847c:	46aa      	mov	sl, r5
 800847e:	46a9      	mov	r9, r5
 8008480:	9502      	str	r5, [sp, #8]
 8008482:	68a2      	ldr	r2, [r4, #8]
 8008484:	b152      	cbz	r2, 800849c <_scanf_float+0x64>
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	2b4e      	cmp	r3, #78	@ 0x4e
 800848c:	d864      	bhi.n	8008558 <_scanf_float+0x120>
 800848e:	2b40      	cmp	r3, #64	@ 0x40
 8008490:	d83c      	bhi.n	800850c <_scanf_float+0xd4>
 8008492:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008496:	b2c8      	uxtb	r0, r1
 8008498:	280e      	cmp	r0, #14
 800849a:	d93a      	bls.n	8008512 <_scanf_float+0xda>
 800849c:	f1b9 0f00 	cmp.w	r9, #0
 80084a0:	d003      	beq.n	80084aa <_scanf_float+0x72>
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084ae:	f1ba 0f01 	cmp.w	sl, #1
 80084b2:	f200 8117 	bhi.w	80086e4 <_scanf_float+0x2ac>
 80084b6:	9b01      	ldr	r3, [sp, #4]
 80084b8:	429e      	cmp	r6, r3
 80084ba:	f200 8108 	bhi.w	80086ce <_scanf_float+0x296>
 80084be:	2001      	movs	r0, #1
 80084c0:	b007      	add	sp, #28
 80084c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80084ca:	2a0d      	cmp	r2, #13
 80084cc:	d8e6      	bhi.n	800849c <_scanf_float+0x64>
 80084ce:	a101      	add	r1, pc, #4	@ (adr r1, 80084d4 <_scanf_float+0x9c>)
 80084d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80084d4:	0800861b 	.word	0x0800861b
 80084d8:	0800849d 	.word	0x0800849d
 80084dc:	0800849d 	.word	0x0800849d
 80084e0:	0800849d 	.word	0x0800849d
 80084e4:	0800867b 	.word	0x0800867b
 80084e8:	08008653 	.word	0x08008653
 80084ec:	0800849d 	.word	0x0800849d
 80084f0:	0800849d 	.word	0x0800849d
 80084f4:	08008629 	.word	0x08008629
 80084f8:	0800849d 	.word	0x0800849d
 80084fc:	0800849d 	.word	0x0800849d
 8008500:	0800849d 	.word	0x0800849d
 8008504:	0800849d 	.word	0x0800849d
 8008508:	080085e1 	.word	0x080085e1
 800850c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008510:	e7db      	b.n	80084ca <_scanf_float+0x92>
 8008512:	290e      	cmp	r1, #14
 8008514:	d8c2      	bhi.n	800849c <_scanf_float+0x64>
 8008516:	a001      	add	r0, pc, #4	@ (adr r0, 800851c <_scanf_float+0xe4>)
 8008518:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800851c:	080085d1 	.word	0x080085d1
 8008520:	0800849d 	.word	0x0800849d
 8008524:	080085d1 	.word	0x080085d1
 8008528:	08008667 	.word	0x08008667
 800852c:	0800849d 	.word	0x0800849d
 8008530:	08008579 	.word	0x08008579
 8008534:	080085b7 	.word	0x080085b7
 8008538:	080085b7 	.word	0x080085b7
 800853c:	080085b7 	.word	0x080085b7
 8008540:	080085b7 	.word	0x080085b7
 8008544:	080085b7 	.word	0x080085b7
 8008548:	080085b7 	.word	0x080085b7
 800854c:	080085b7 	.word	0x080085b7
 8008550:	080085b7 	.word	0x080085b7
 8008554:	080085b7 	.word	0x080085b7
 8008558:	2b6e      	cmp	r3, #110	@ 0x6e
 800855a:	d809      	bhi.n	8008570 <_scanf_float+0x138>
 800855c:	2b60      	cmp	r3, #96	@ 0x60
 800855e:	d8b2      	bhi.n	80084c6 <_scanf_float+0x8e>
 8008560:	2b54      	cmp	r3, #84	@ 0x54
 8008562:	d07b      	beq.n	800865c <_scanf_float+0x224>
 8008564:	2b59      	cmp	r3, #89	@ 0x59
 8008566:	d199      	bne.n	800849c <_scanf_float+0x64>
 8008568:	2d07      	cmp	r5, #7
 800856a:	d197      	bne.n	800849c <_scanf_float+0x64>
 800856c:	2508      	movs	r5, #8
 800856e:	e02c      	b.n	80085ca <_scanf_float+0x192>
 8008570:	2b74      	cmp	r3, #116	@ 0x74
 8008572:	d073      	beq.n	800865c <_scanf_float+0x224>
 8008574:	2b79      	cmp	r3, #121	@ 0x79
 8008576:	e7f6      	b.n	8008566 <_scanf_float+0x12e>
 8008578:	6821      	ldr	r1, [r4, #0]
 800857a:	05c8      	lsls	r0, r1, #23
 800857c:	d51b      	bpl.n	80085b6 <_scanf_float+0x17e>
 800857e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008582:	6021      	str	r1, [r4, #0]
 8008584:	f109 0901 	add.w	r9, r9, #1
 8008588:	f1bb 0f00 	cmp.w	fp, #0
 800858c:	d003      	beq.n	8008596 <_scanf_float+0x15e>
 800858e:	3201      	adds	r2, #1
 8008590:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008594:	60a2      	str	r2, [r4, #8]
 8008596:	68a3      	ldr	r3, [r4, #8]
 8008598:	3b01      	subs	r3, #1
 800859a:	60a3      	str	r3, [r4, #8]
 800859c:	6923      	ldr	r3, [r4, #16]
 800859e:	3301      	adds	r3, #1
 80085a0:	6123      	str	r3, [r4, #16]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	3b01      	subs	r3, #1
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	607b      	str	r3, [r7, #4]
 80085aa:	f340 8087 	ble.w	80086bc <_scanf_float+0x284>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	3301      	adds	r3, #1
 80085b2:	603b      	str	r3, [r7, #0]
 80085b4:	e765      	b.n	8008482 <_scanf_float+0x4a>
 80085b6:	eb1a 0105 	adds.w	r1, sl, r5
 80085ba:	f47f af6f 	bne.w	800849c <_scanf_float+0x64>
 80085be:	6822      	ldr	r2, [r4, #0]
 80085c0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80085c4:	6022      	str	r2, [r4, #0]
 80085c6:	460d      	mov	r5, r1
 80085c8:	468a      	mov	sl, r1
 80085ca:	f806 3b01 	strb.w	r3, [r6], #1
 80085ce:	e7e2      	b.n	8008596 <_scanf_float+0x15e>
 80085d0:	6822      	ldr	r2, [r4, #0]
 80085d2:	0610      	lsls	r0, r2, #24
 80085d4:	f57f af62 	bpl.w	800849c <_scanf_float+0x64>
 80085d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80085dc:	6022      	str	r2, [r4, #0]
 80085de:	e7f4      	b.n	80085ca <_scanf_float+0x192>
 80085e0:	f1ba 0f00 	cmp.w	sl, #0
 80085e4:	d10e      	bne.n	8008604 <_scanf_float+0x1cc>
 80085e6:	f1b9 0f00 	cmp.w	r9, #0
 80085ea:	d10e      	bne.n	800860a <_scanf_float+0x1d2>
 80085ec:	6822      	ldr	r2, [r4, #0]
 80085ee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80085f2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80085f6:	d108      	bne.n	800860a <_scanf_float+0x1d2>
 80085f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80085fc:	6022      	str	r2, [r4, #0]
 80085fe:	f04f 0a01 	mov.w	sl, #1
 8008602:	e7e2      	b.n	80085ca <_scanf_float+0x192>
 8008604:	f1ba 0f02 	cmp.w	sl, #2
 8008608:	d055      	beq.n	80086b6 <_scanf_float+0x27e>
 800860a:	2d01      	cmp	r5, #1
 800860c:	d002      	beq.n	8008614 <_scanf_float+0x1dc>
 800860e:	2d04      	cmp	r5, #4
 8008610:	f47f af44 	bne.w	800849c <_scanf_float+0x64>
 8008614:	3501      	adds	r5, #1
 8008616:	b2ed      	uxtb	r5, r5
 8008618:	e7d7      	b.n	80085ca <_scanf_float+0x192>
 800861a:	f1ba 0f01 	cmp.w	sl, #1
 800861e:	f47f af3d 	bne.w	800849c <_scanf_float+0x64>
 8008622:	f04f 0a02 	mov.w	sl, #2
 8008626:	e7d0      	b.n	80085ca <_scanf_float+0x192>
 8008628:	b97d      	cbnz	r5, 800864a <_scanf_float+0x212>
 800862a:	f1b9 0f00 	cmp.w	r9, #0
 800862e:	f47f af38 	bne.w	80084a2 <_scanf_float+0x6a>
 8008632:	6822      	ldr	r2, [r4, #0]
 8008634:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008638:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800863c:	f040 8108 	bne.w	8008850 <_scanf_float+0x418>
 8008640:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008644:	6022      	str	r2, [r4, #0]
 8008646:	2501      	movs	r5, #1
 8008648:	e7bf      	b.n	80085ca <_scanf_float+0x192>
 800864a:	2d03      	cmp	r5, #3
 800864c:	d0e2      	beq.n	8008614 <_scanf_float+0x1dc>
 800864e:	2d05      	cmp	r5, #5
 8008650:	e7de      	b.n	8008610 <_scanf_float+0x1d8>
 8008652:	2d02      	cmp	r5, #2
 8008654:	f47f af22 	bne.w	800849c <_scanf_float+0x64>
 8008658:	2503      	movs	r5, #3
 800865a:	e7b6      	b.n	80085ca <_scanf_float+0x192>
 800865c:	2d06      	cmp	r5, #6
 800865e:	f47f af1d 	bne.w	800849c <_scanf_float+0x64>
 8008662:	2507      	movs	r5, #7
 8008664:	e7b1      	b.n	80085ca <_scanf_float+0x192>
 8008666:	6822      	ldr	r2, [r4, #0]
 8008668:	0591      	lsls	r1, r2, #22
 800866a:	f57f af17 	bpl.w	800849c <_scanf_float+0x64>
 800866e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008672:	6022      	str	r2, [r4, #0]
 8008674:	f8cd 9008 	str.w	r9, [sp, #8]
 8008678:	e7a7      	b.n	80085ca <_scanf_float+0x192>
 800867a:	6822      	ldr	r2, [r4, #0]
 800867c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008680:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008684:	d006      	beq.n	8008694 <_scanf_float+0x25c>
 8008686:	0550      	lsls	r0, r2, #21
 8008688:	f57f af08 	bpl.w	800849c <_scanf_float+0x64>
 800868c:	f1b9 0f00 	cmp.w	r9, #0
 8008690:	f000 80de 	beq.w	8008850 <_scanf_float+0x418>
 8008694:	0591      	lsls	r1, r2, #22
 8008696:	bf58      	it	pl
 8008698:	9902      	ldrpl	r1, [sp, #8]
 800869a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800869e:	bf58      	it	pl
 80086a0:	eba9 0101 	subpl.w	r1, r9, r1
 80086a4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80086a8:	bf58      	it	pl
 80086aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80086ae:	6022      	str	r2, [r4, #0]
 80086b0:	f04f 0900 	mov.w	r9, #0
 80086b4:	e789      	b.n	80085ca <_scanf_float+0x192>
 80086b6:	f04f 0a03 	mov.w	sl, #3
 80086ba:	e786      	b.n	80085ca <_scanf_float+0x192>
 80086bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80086c0:	4639      	mov	r1, r7
 80086c2:	4640      	mov	r0, r8
 80086c4:	4798      	blx	r3
 80086c6:	2800      	cmp	r0, #0
 80086c8:	f43f aedb 	beq.w	8008482 <_scanf_float+0x4a>
 80086cc:	e6e6      	b.n	800849c <_scanf_float+0x64>
 80086ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80086d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086d6:	463a      	mov	r2, r7
 80086d8:	4640      	mov	r0, r8
 80086da:	4798      	blx	r3
 80086dc:	6923      	ldr	r3, [r4, #16]
 80086de:	3b01      	subs	r3, #1
 80086e0:	6123      	str	r3, [r4, #16]
 80086e2:	e6e8      	b.n	80084b6 <_scanf_float+0x7e>
 80086e4:	1e6b      	subs	r3, r5, #1
 80086e6:	2b06      	cmp	r3, #6
 80086e8:	d824      	bhi.n	8008734 <_scanf_float+0x2fc>
 80086ea:	2d02      	cmp	r5, #2
 80086ec:	d836      	bhi.n	800875c <_scanf_float+0x324>
 80086ee:	9b01      	ldr	r3, [sp, #4]
 80086f0:	429e      	cmp	r6, r3
 80086f2:	f67f aee4 	bls.w	80084be <_scanf_float+0x86>
 80086f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80086fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086fe:	463a      	mov	r2, r7
 8008700:	4640      	mov	r0, r8
 8008702:	4798      	blx	r3
 8008704:	6923      	ldr	r3, [r4, #16]
 8008706:	3b01      	subs	r3, #1
 8008708:	6123      	str	r3, [r4, #16]
 800870a:	e7f0      	b.n	80086ee <_scanf_float+0x2b6>
 800870c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008710:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008714:	463a      	mov	r2, r7
 8008716:	4640      	mov	r0, r8
 8008718:	4798      	blx	r3
 800871a:	6923      	ldr	r3, [r4, #16]
 800871c:	3b01      	subs	r3, #1
 800871e:	6123      	str	r3, [r4, #16]
 8008720:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008724:	fa5f fa8a 	uxtb.w	sl, sl
 8008728:	f1ba 0f02 	cmp.w	sl, #2
 800872c:	d1ee      	bne.n	800870c <_scanf_float+0x2d4>
 800872e:	3d03      	subs	r5, #3
 8008730:	b2ed      	uxtb	r5, r5
 8008732:	1b76      	subs	r6, r6, r5
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	05da      	lsls	r2, r3, #23
 8008738:	d530      	bpl.n	800879c <_scanf_float+0x364>
 800873a:	055b      	lsls	r3, r3, #21
 800873c:	d511      	bpl.n	8008762 <_scanf_float+0x32a>
 800873e:	9b01      	ldr	r3, [sp, #4]
 8008740:	429e      	cmp	r6, r3
 8008742:	f67f aebc 	bls.w	80084be <_scanf_float+0x86>
 8008746:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800874a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800874e:	463a      	mov	r2, r7
 8008750:	4640      	mov	r0, r8
 8008752:	4798      	blx	r3
 8008754:	6923      	ldr	r3, [r4, #16]
 8008756:	3b01      	subs	r3, #1
 8008758:	6123      	str	r3, [r4, #16]
 800875a:	e7f0      	b.n	800873e <_scanf_float+0x306>
 800875c:	46aa      	mov	sl, r5
 800875e:	46b3      	mov	fp, r6
 8008760:	e7de      	b.n	8008720 <_scanf_float+0x2e8>
 8008762:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008766:	6923      	ldr	r3, [r4, #16]
 8008768:	2965      	cmp	r1, #101	@ 0x65
 800876a:	f103 33ff 	add.w	r3, r3, #4294967295
 800876e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008772:	6123      	str	r3, [r4, #16]
 8008774:	d00c      	beq.n	8008790 <_scanf_float+0x358>
 8008776:	2945      	cmp	r1, #69	@ 0x45
 8008778:	d00a      	beq.n	8008790 <_scanf_float+0x358>
 800877a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800877e:	463a      	mov	r2, r7
 8008780:	4640      	mov	r0, r8
 8008782:	4798      	blx	r3
 8008784:	6923      	ldr	r3, [r4, #16]
 8008786:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800878a:	3b01      	subs	r3, #1
 800878c:	1eb5      	subs	r5, r6, #2
 800878e:	6123      	str	r3, [r4, #16]
 8008790:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008794:	463a      	mov	r2, r7
 8008796:	4640      	mov	r0, r8
 8008798:	4798      	blx	r3
 800879a:	462e      	mov	r6, r5
 800879c:	6822      	ldr	r2, [r4, #0]
 800879e:	f012 0210 	ands.w	r2, r2, #16
 80087a2:	d001      	beq.n	80087a8 <_scanf_float+0x370>
 80087a4:	2000      	movs	r0, #0
 80087a6:	e68b      	b.n	80084c0 <_scanf_float+0x88>
 80087a8:	7032      	strb	r2, [r6, #0]
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80087b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087b4:	d11c      	bne.n	80087f0 <_scanf_float+0x3b8>
 80087b6:	9b02      	ldr	r3, [sp, #8]
 80087b8:	454b      	cmp	r3, r9
 80087ba:	eba3 0209 	sub.w	r2, r3, r9
 80087be:	d123      	bne.n	8008808 <_scanf_float+0x3d0>
 80087c0:	9901      	ldr	r1, [sp, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	4640      	mov	r0, r8
 80087c6:	f002 fe07 	bl	800b3d8 <_strtod_r>
 80087ca:	9b03      	ldr	r3, [sp, #12]
 80087cc:	6821      	ldr	r1, [r4, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f011 0f02 	tst.w	r1, #2
 80087d4:	ec57 6b10 	vmov	r6, r7, d0
 80087d8:	f103 0204 	add.w	r2, r3, #4
 80087dc:	d01f      	beq.n	800881e <_scanf_float+0x3e6>
 80087de:	9903      	ldr	r1, [sp, #12]
 80087e0:	600a      	str	r2, [r1, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	e9c3 6700 	strd	r6, r7, [r3]
 80087e8:	68e3      	ldr	r3, [r4, #12]
 80087ea:	3301      	adds	r3, #1
 80087ec:	60e3      	str	r3, [r4, #12]
 80087ee:	e7d9      	b.n	80087a4 <_scanf_float+0x36c>
 80087f0:	9b04      	ldr	r3, [sp, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d0e4      	beq.n	80087c0 <_scanf_float+0x388>
 80087f6:	9905      	ldr	r1, [sp, #20]
 80087f8:	230a      	movs	r3, #10
 80087fa:	3101      	adds	r1, #1
 80087fc:	4640      	mov	r0, r8
 80087fe:	f7ff f9b7 	bl	8007b70 <_strtol_r>
 8008802:	9b04      	ldr	r3, [sp, #16]
 8008804:	9e05      	ldr	r6, [sp, #20]
 8008806:	1ac2      	subs	r2, r0, r3
 8008808:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800880c:	429e      	cmp	r6, r3
 800880e:	bf28      	it	cs
 8008810:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008814:	4910      	ldr	r1, [pc, #64]	@ (8008858 <_scanf_float+0x420>)
 8008816:	4630      	mov	r0, r6
 8008818:	f000 fa14 	bl	8008c44 <siprintf>
 800881c:	e7d0      	b.n	80087c0 <_scanf_float+0x388>
 800881e:	f011 0f04 	tst.w	r1, #4
 8008822:	9903      	ldr	r1, [sp, #12]
 8008824:	600a      	str	r2, [r1, #0]
 8008826:	d1dc      	bne.n	80087e2 <_scanf_float+0x3aa>
 8008828:	681d      	ldr	r5, [r3, #0]
 800882a:	4632      	mov	r2, r6
 800882c:	463b      	mov	r3, r7
 800882e:	4630      	mov	r0, r6
 8008830:	4639      	mov	r1, r7
 8008832:	f7f8 f97b 	bl	8000b2c <__aeabi_dcmpun>
 8008836:	b128      	cbz	r0, 8008844 <_scanf_float+0x40c>
 8008838:	4808      	ldr	r0, [pc, #32]	@ (800885c <_scanf_float+0x424>)
 800883a:	f000 fbc7 	bl	8008fcc <nanf>
 800883e:	ed85 0a00 	vstr	s0, [r5]
 8008842:	e7d1      	b.n	80087e8 <_scanf_float+0x3b0>
 8008844:	4630      	mov	r0, r6
 8008846:	4639      	mov	r1, r7
 8008848:	f7f8 f9ce 	bl	8000be8 <__aeabi_d2f>
 800884c:	6028      	str	r0, [r5, #0]
 800884e:	e7cb      	b.n	80087e8 <_scanf_float+0x3b0>
 8008850:	f04f 0900 	mov.w	r9, #0
 8008854:	e629      	b.n	80084aa <_scanf_float+0x72>
 8008856:	bf00      	nop
 8008858:	0800cfbf 	.word	0x0800cfbf
 800885c:	0800d26f 	.word	0x0800d26f

08008860 <__sflush_r>:
 8008860:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008868:	0716      	lsls	r6, r2, #28
 800886a:	4605      	mov	r5, r0
 800886c:	460c      	mov	r4, r1
 800886e:	d454      	bmi.n	800891a <__sflush_r+0xba>
 8008870:	684b      	ldr	r3, [r1, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	dc02      	bgt.n	800887c <__sflush_r+0x1c>
 8008876:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008878:	2b00      	cmp	r3, #0
 800887a:	dd48      	ble.n	800890e <__sflush_r+0xae>
 800887c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800887e:	2e00      	cmp	r6, #0
 8008880:	d045      	beq.n	800890e <__sflush_r+0xae>
 8008882:	2300      	movs	r3, #0
 8008884:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008888:	682f      	ldr	r7, [r5, #0]
 800888a:	6a21      	ldr	r1, [r4, #32]
 800888c:	602b      	str	r3, [r5, #0]
 800888e:	d030      	beq.n	80088f2 <__sflush_r+0x92>
 8008890:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008892:	89a3      	ldrh	r3, [r4, #12]
 8008894:	0759      	lsls	r1, r3, #29
 8008896:	d505      	bpl.n	80088a4 <__sflush_r+0x44>
 8008898:	6863      	ldr	r3, [r4, #4]
 800889a:	1ad2      	subs	r2, r2, r3
 800889c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800889e:	b10b      	cbz	r3, 80088a4 <__sflush_r+0x44>
 80088a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088a2:	1ad2      	subs	r2, r2, r3
 80088a4:	2300      	movs	r3, #0
 80088a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088a8:	6a21      	ldr	r1, [r4, #32]
 80088aa:	4628      	mov	r0, r5
 80088ac:	47b0      	blx	r6
 80088ae:	1c43      	adds	r3, r0, #1
 80088b0:	89a3      	ldrh	r3, [r4, #12]
 80088b2:	d106      	bne.n	80088c2 <__sflush_r+0x62>
 80088b4:	6829      	ldr	r1, [r5, #0]
 80088b6:	291d      	cmp	r1, #29
 80088b8:	d82b      	bhi.n	8008912 <__sflush_r+0xb2>
 80088ba:	4a2a      	ldr	r2, [pc, #168]	@ (8008964 <__sflush_r+0x104>)
 80088bc:	410a      	asrs	r2, r1
 80088be:	07d6      	lsls	r6, r2, #31
 80088c0:	d427      	bmi.n	8008912 <__sflush_r+0xb2>
 80088c2:	2200      	movs	r2, #0
 80088c4:	6062      	str	r2, [r4, #4]
 80088c6:	04d9      	lsls	r1, r3, #19
 80088c8:	6922      	ldr	r2, [r4, #16]
 80088ca:	6022      	str	r2, [r4, #0]
 80088cc:	d504      	bpl.n	80088d8 <__sflush_r+0x78>
 80088ce:	1c42      	adds	r2, r0, #1
 80088d0:	d101      	bne.n	80088d6 <__sflush_r+0x76>
 80088d2:	682b      	ldr	r3, [r5, #0]
 80088d4:	b903      	cbnz	r3, 80088d8 <__sflush_r+0x78>
 80088d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80088d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088da:	602f      	str	r7, [r5, #0]
 80088dc:	b1b9      	cbz	r1, 800890e <__sflush_r+0xae>
 80088de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088e2:	4299      	cmp	r1, r3
 80088e4:	d002      	beq.n	80088ec <__sflush_r+0x8c>
 80088e6:	4628      	mov	r0, r5
 80088e8:	f001 f9c2 	bl	8009c70 <_free_r>
 80088ec:	2300      	movs	r3, #0
 80088ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80088f0:	e00d      	b.n	800890e <__sflush_r+0xae>
 80088f2:	2301      	movs	r3, #1
 80088f4:	4628      	mov	r0, r5
 80088f6:	47b0      	blx	r6
 80088f8:	4602      	mov	r2, r0
 80088fa:	1c50      	adds	r0, r2, #1
 80088fc:	d1c9      	bne.n	8008892 <__sflush_r+0x32>
 80088fe:	682b      	ldr	r3, [r5, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d0c6      	beq.n	8008892 <__sflush_r+0x32>
 8008904:	2b1d      	cmp	r3, #29
 8008906:	d001      	beq.n	800890c <__sflush_r+0xac>
 8008908:	2b16      	cmp	r3, #22
 800890a:	d11e      	bne.n	800894a <__sflush_r+0xea>
 800890c:	602f      	str	r7, [r5, #0]
 800890e:	2000      	movs	r0, #0
 8008910:	e022      	b.n	8008958 <__sflush_r+0xf8>
 8008912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008916:	b21b      	sxth	r3, r3
 8008918:	e01b      	b.n	8008952 <__sflush_r+0xf2>
 800891a:	690f      	ldr	r7, [r1, #16]
 800891c:	2f00      	cmp	r7, #0
 800891e:	d0f6      	beq.n	800890e <__sflush_r+0xae>
 8008920:	0793      	lsls	r3, r2, #30
 8008922:	680e      	ldr	r6, [r1, #0]
 8008924:	bf08      	it	eq
 8008926:	694b      	ldreq	r3, [r1, #20]
 8008928:	600f      	str	r7, [r1, #0]
 800892a:	bf18      	it	ne
 800892c:	2300      	movne	r3, #0
 800892e:	eba6 0807 	sub.w	r8, r6, r7
 8008932:	608b      	str	r3, [r1, #8]
 8008934:	f1b8 0f00 	cmp.w	r8, #0
 8008938:	dde9      	ble.n	800890e <__sflush_r+0xae>
 800893a:	6a21      	ldr	r1, [r4, #32]
 800893c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800893e:	4643      	mov	r3, r8
 8008940:	463a      	mov	r2, r7
 8008942:	4628      	mov	r0, r5
 8008944:	47b0      	blx	r6
 8008946:	2800      	cmp	r0, #0
 8008948:	dc08      	bgt.n	800895c <__sflush_r+0xfc>
 800894a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800894e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008952:	81a3      	strh	r3, [r4, #12]
 8008954:	f04f 30ff 	mov.w	r0, #4294967295
 8008958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800895c:	4407      	add	r7, r0
 800895e:	eba8 0800 	sub.w	r8, r8, r0
 8008962:	e7e7      	b.n	8008934 <__sflush_r+0xd4>
 8008964:	dfbffffe 	.word	0xdfbffffe

08008968 <_fflush_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	690b      	ldr	r3, [r1, #16]
 800896c:	4605      	mov	r5, r0
 800896e:	460c      	mov	r4, r1
 8008970:	b913      	cbnz	r3, 8008978 <_fflush_r+0x10>
 8008972:	2500      	movs	r5, #0
 8008974:	4628      	mov	r0, r5
 8008976:	bd38      	pop	{r3, r4, r5, pc}
 8008978:	b118      	cbz	r0, 8008982 <_fflush_r+0x1a>
 800897a:	6a03      	ldr	r3, [r0, #32]
 800897c:	b90b      	cbnz	r3, 8008982 <_fflush_r+0x1a>
 800897e:	f000 f8bb 	bl	8008af8 <__sinit>
 8008982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d0f3      	beq.n	8008972 <_fflush_r+0xa>
 800898a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800898c:	07d0      	lsls	r0, r2, #31
 800898e:	d404      	bmi.n	800899a <_fflush_r+0x32>
 8008990:	0599      	lsls	r1, r3, #22
 8008992:	d402      	bmi.n	800899a <_fflush_r+0x32>
 8008994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008996:	f000 fb08 	bl	8008faa <__retarget_lock_acquire_recursive>
 800899a:	4628      	mov	r0, r5
 800899c:	4621      	mov	r1, r4
 800899e:	f7ff ff5f 	bl	8008860 <__sflush_r>
 80089a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089a4:	07da      	lsls	r2, r3, #31
 80089a6:	4605      	mov	r5, r0
 80089a8:	d4e4      	bmi.n	8008974 <_fflush_r+0xc>
 80089aa:	89a3      	ldrh	r3, [r4, #12]
 80089ac:	059b      	lsls	r3, r3, #22
 80089ae:	d4e1      	bmi.n	8008974 <_fflush_r+0xc>
 80089b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089b2:	f000 fafb 	bl	8008fac <__retarget_lock_release_recursive>
 80089b6:	e7dd      	b.n	8008974 <_fflush_r+0xc>

080089b8 <fflush>:
 80089b8:	4601      	mov	r1, r0
 80089ba:	b920      	cbnz	r0, 80089c6 <fflush+0xe>
 80089bc:	4a04      	ldr	r2, [pc, #16]	@ (80089d0 <fflush+0x18>)
 80089be:	4905      	ldr	r1, [pc, #20]	@ (80089d4 <fflush+0x1c>)
 80089c0:	4805      	ldr	r0, [pc, #20]	@ (80089d8 <fflush+0x20>)
 80089c2:	f000 b8b1 	b.w	8008b28 <_fwalk_sglue>
 80089c6:	4b05      	ldr	r3, [pc, #20]	@ (80089dc <fflush+0x24>)
 80089c8:	6818      	ldr	r0, [r3, #0]
 80089ca:	f7ff bfcd 	b.w	8008968 <_fflush_r>
 80089ce:	bf00      	nop
 80089d0:	20000020 	.word	0x20000020
 80089d4:	08008969 	.word	0x08008969
 80089d8:	20000030 	.word	0x20000030
 80089dc:	2000002c 	.word	0x2000002c

080089e0 <std>:
 80089e0:	2300      	movs	r3, #0
 80089e2:	b510      	push	{r4, lr}
 80089e4:	4604      	mov	r4, r0
 80089e6:	e9c0 3300 	strd	r3, r3, [r0]
 80089ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089ee:	6083      	str	r3, [r0, #8]
 80089f0:	8181      	strh	r1, [r0, #12]
 80089f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80089f4:	81c2      	strh	r2, [r0, #14]
 80089f6:	6183      	str	r3, [r0, #24]
 80089f8:	4619      	mov	r1, r3
 80089fa:	2208      	movs	r2, #8
 80089fc:	305c      	adds	r0, #92	@ 0x5c
 80089fe:	f000 fa45 	bl	8008e8c <memset>
 8008a02:	4b0d      	ldr	r3, [pc, #52]	@ (8008a38 <std+0x58>)
 8008a04:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a06:	4b0d      	ldr	r3, [pc, #52]	@ (8008a3c <std+0x5c>)
 8008a08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a40 <std+0x60>)
 8008a0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008a44 <std+0x64>)
 8008a10:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a12:	4b0d      	ldr	r3, [pc, #52]	@ (8008a48 <std+0x68>)
 8008a14:	6224      	str	r4, [r4, #32]
 8008a16:	429c      	cmp	r4, r3
 8008a18:	d006      	beq.n	8008a28 <std+0x48>
 8008a1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a1e:	4294      	cmp	r4, r2
 8008a20:	d002      	beq.n	8008a28 <std+0x48>
 8008a22:	33d0      	adds	r3, #208	@ 0xd0
 8008a24:	429c      	cmp	r4, r3
 8008a26:	d105      	bne.n	8008a34 <std+0x54>
 8008a28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a30:	f000 baba 	b.w	8008fa8 <__retarget_lock_init_recursive>
 8008a34:	bd10      	pop	{r4, pc}
 8008a36:	bf00      	nop
 8008a38:	08008cd9 	.word	0x08008cd9
 8008a3c:	08008cff 	.word	0x08008cff
 8008a40:	08008d37 	.word	0x08008d37
 8008a44:	08008d5b 	.word	0x08008d5b
 8008a48:	20001094 	.word	0x20001094

08008a4c <stdio_exit_handler>:
 8008a4c:	4a02      	ldr	r2, [pc, #8]	@ (8008a58 <stdio_exit_handler+0xc>)
 8008a4e:	4903      	ldr	r1, [pc, #12]	@ (8008a5c <stdio_exit_handler+0x10>)
 8008a50:	4803      	ldr	r0, [pc, #12]	@ (8008a60 <stdio_exit_handler+0x14>)
 8008a52:	f000 b869 	b.w	8008b28 <_fwalk_sglue>
 8008a56:	bf00      	nop
 8008a58:	20000020 	.word	0x20000020
 8008a5c:	08008969 	.word	0x08008969
 8008a60:	20000030 	.word	0x20000030

08008a64 <cleanup_stdio>:
 8008a64:	6841      	ldr	r1, [r0, #4]
 8008a66:	4b0c      	ldr	r3, [pc, #48]	@ (8008a98 <cleanup_stdio+0x34>)
 8008a68:	4299      	cmp	r1, r3
 8008a6a:	b510      	push	{r4, lr}
 8008a6c:	4604      	mov	r4, r0
 8008a6e:	d001      	beq.n	8008a74 <cleanup_stdio+0x10>
 8008a70:	f7ff ff7a 	bl	8008968 <_fflush_r>
 8008a74:	68a1      	ldr	r1, [r4, #8]
 8008a76:	4b09      	ldr	r3, [pc, #36]	@ (8008a9c <cleanup_stdio+0x38>)
 8008a78:	4299      	cmp	r1, r3
 8008a7a:	d002      	beq.n	8008a82 <cleanup_stdio+0x1e>
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f7ff ff73 	bl	8008968 <_fflush_r>
 8008a82:	68e1      	ldr	r1, [r4, #12]
 8008a84:	4b06      	ldr	r3, [pc, #24]	@ (8008aa0 <cleanup_stdio+0x3c>)
 8008a86:	4299      	cmp	r1, r3
 8008a88:	d004      	beq.n	8008a94 <cleanup_stdio+0x30>
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a90:	f7ff bf6a 	b.w	8008968 <_fflush_r>
 8008a94:	bd10      	pop	{r4, pc}
 8008a96:	bf00      	nop
 8008a98:	20001094 	.word	0x20001094
 8008a9c:	200010fc 	.word	0x200010fc
 8008aa0:	20001164 	.word	0x20001164

08008aa4 <global_stdio_init.part.0>:
 8008aa4:	b510      	push	{r4, lr}
 8008aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ad4 <global_stdio_init.part.0+0x30>)
 8008aa8:	4c0b      	ldr	r4, [pc, #44]	@ (8008ad8 <global_stdio_init.part.0+0x34>)
 8008aaa:	4a0c      	ldr	r2, [pc, #48]	@ (8008adc <global_stdio_init.part.0+0x38>)
 8008aac:	601a      	str	r2, [r3, #0]
 8008aae:	4620      	mov	r0, r4
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2104      	movs	r1, #4
 8008ab4:	f7ff ff94 	bl	80089e0 <std>
 8008ab8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008abc:	2201      	movs	r2, #1
 8008abe:	2109      	movs	r1, #9
 8008ac0:	f7ff ff8e 	bl	80089e0 <std>
 8008ac4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ac8:	2202      	movs	r2, #2
 8008aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ace:	2112      	movs	r1, #18
 8008ad0:	f7ff bf86 	b.w	80089e0 <std>
 8008ad4:	200011cc 	.word	0x200011cc
 8008ad8:	20001094 	.word	0x20001094
 8008adc:	08008a4d 	.word	0x08008a4d

08008ae0 <__sfp_lock_acquire>:
 8008ae0:	4801      	ldr	r0, [pc, #4]	@ (8008ae8 <__sfp_lock_acquire+0x8>)
 8008ae2:	f000 ba62 	b.w	8008faa <__retarget_lock_acquire_recursive>
 8008ae6:	bf00      	nop
 8008ae8:	200011d5 	.word	0x200011d5

08008aec <__sfp_lock_release>:
 8008aec:	4801      	ldr	r0, [pc, #4]	@ (8008af4 <__sfp_lock_release+0x8>)
 8008aee:	f000 ba5d 	b.w	8008fac <__retarget_lock_release_recursive>
 8008af2:	bf00      	nop
 8008af4:	200011d5 	.word	0x200011d5

08008af8 <__sinit>:
 8008af8:	b510      	push	{r4, lr}
 8008afa:	4604      	mov	r4, r0
 8008afc:	f7ff fff0 	bl	8008ae0 <__sfp_lock_acquire>
 8008b00:	6a23      	ldr	r3, [r4, #32]
 8008b02:	b11b      	cbz	r3, 8008b0c <__sinit+0x14>
 8008b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b08:	f7ff bff0 	b.w	8008aec <__sfp_lock_release>
 8008b0c:	4b04      	ldr	r3, [pc, #16]	@ (8008b20 <__sinit+0x28>)
 8008b0e:	6223      	str	r3, [r4, #32]
 8008b10:	4b04      	ldr	r3, [pc, #16]	@ (8008b24 <__sinit+0x2c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1f5      	bne.n	8008b04 <__sinit+0xc>
 8008b18:	f7ff ffc4 	bl	8008aa4 <global_stdio_init.part.0>
 8008b1c:	e7f2      	b.n	8008b04 <__sinit+0xc>
 8008b1e:	bf00      	nop
 8008b20:	08008a65 	.word	0x08008a65
 8008b24:	200011cc 	.word	0x200011cc

08008b28 <_fwalk_sglue>:
 8008b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b2c:	4607      	mov	r7, r0
 8008b2e:	4688      	mov	r8, r1
 8008b30:	4614      	mov	r4, r2
 8008b32:	2600      	movs	r6, #0
 8008b34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b38:	f1b9 0901 	subs.w	r9, r9, #1
 8008b3c:	d505      	bpl.n	8008b4a <_fwalk_sglue+0x22>
 8008b3e:	6824      	ldr	r4, [r4, #0]
 8008b40:	2c00      	cmp	r4, #0
 8008b42:	d1f7      	bne.n	8008b34 <_fwalk_sglue+0xc>
 8008b44:	4630      	mov	r0, r6
 8008b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b4a:	89ab      	ldrh	r3, [r5, #12]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d907      	bls.n	8008b60 <_fwalk_sglue+0x38>
 8008b50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b54:	3301      	adds	r3, #1
 8008b56:	d003      	beq.n	8008b60 <_fwalk_sglue+0x38>
 8008b58:	4629      	mov	r1, r5
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	47c0      	blx	r8
 8008b5e:	4306      	orrs	r6, r0
 8008b60:	3568      	adds	r5, #104	@ 0x68
 8008b62:	e7e9      	b.n	8008b38 <_fwalk_sglue+0x10>

08008b64 <iprintf>:
 8008b64:	b40f      	push	{r0, r1, r2, r3}
 8008b66:	b507      	push	{r0, r1, r2, lr}
 8008b68:	4906      	ldr	r1, [pc, #24]	@ (8008b84 <iprintf+0x20>)
 8008b6a:	ab04      	add	r3, sp, #16
 8008b6c:	6808      	ldr	r0, [r1, #0]
 8008b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b72:	6881      	ldr	r1, [r0, #8]
 8008b74:	9301      	str	r3, [sp, #4]
 8008b76:	f002 ff83 	bl	800ba80 <_vfiprintf_r>
 8008b7a:	b003      	add	sp, #12
 8008b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b80:	b004      	add	sp, #16
 8008b82:	4770      	bx	lr
 8008b84:	2000002c 	.word	0x2000002c

08008b88 <_puts_r>:
 8008b88:	6a03      	ldr	r3, [r0, #32]
 8008b8a:	b570      	push	{r4, r5, r6, lr}
 8008b8c:	6884      	ldr	r4, [r0, #8]
 8008b8e:	4605      	mov	r5, r0
 8008b90:	460e      	mov	r6, r1
 8008b92:	b90b      	cbnz	r3, 8008b98 <_puts_r+0x10>
 8008b94:	f7ff ffb0 	bl	8008af8 <__sinit>
 8008b98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b9a:	07db      	lsls	r3, r3, #31
 8008b9c:	d405      	bmi.n	8008baa <_puts_r+0x22>
 8008b9e:	89a3      	ldrh	r3, [r4, #12]
 8008ba0:	0598      	lsls	r0, r3, #22
 8008ba2:	d402      	bmi.n	8008baa <_puts_r+0x22>
 8008ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ba6:	f000 fa00 	bl	8008faa <__retarget_lock_acquire_recursive>
 8008baa:	89a3      	ldrh	r3, [r4, #12]
 8008bac:	0719      	lsls	r1, r3, #28
 8008bae:	d502      	bpl.n	8008bb6 <_puts_r+0x2e>
 8008bb0:	6923      	ldr	r3, [r4, #16]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d135      	bne.n	8008c22 <_puts_r+0x9a>
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	4628      	mov	r0, r5
 8008bba:	f000 f911 	bl	8008de0 <__swsetup_r>
 8008bbe:	b380      	cbz	r0, 8008c22 <_puts_r+0x9a>
 8008bc0:	f04f 35ff 	mov.w	r5, #4294967295
 8008bc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bc6:	07da      	lsls	r2, r3, #31
 8008bc8:	d405      	bmi.n	8008bd6 <_puts_r+0x4e>
 8008bca:	89a3      	ldrh	r3, [r4, #12]
 8008bcc:	059b      	lsls	r3, r3, #22
 8008bce:	d402      	bmi.n	8008bd6 <_puts_r+0x4e>
 8008bd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bd2:	f000 f9eb 	bl	8008fac <__retarget_lock_release_recursive>
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	bd70      	pop	{r4, r5, r6, pc}
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	da04      	bge.n	8008be8 <_puts_r+0x60>
 8008bde:	69a2      	ldr	r2, [r4, #24]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	dc17      	bgt.n	8008c14 <_puts_r+0x8c>
 8008be4:	290a      	cmp	r1, #10
 8008be6:	d015      	beq.n	8008c14 <_puts_r+0x8c>
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	6022      	str	r2, [r4, #0]
 8008bee:	7019      	strb	r1, [r3, #0]
 8008bf0:	68a3      	ldr	r3, [r4, #8]
 8008bf2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	60a3      	str	r3, [r4, #8]
 8008bfa:	2900      	cmp	r1, #0
 8008bfc:	d1ed      	bne.n	8008bda <_puts_r+0x52>
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	da11      	bge.n	8008c26 <_puts_r+0x9e>
 8008c02:	4622      	mov	r2, r4
 8008c04:	210a      	movs	r1, #10
 8008c06:	4628      	mov	r0, r5
 8008c08:	f000 f8ab 	bl	8008d62 <__swbuf_r>
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d0d7      	beq.n	8008bc0 <_puts_r+0x38>
 8008c10:	250a      	movs	r5, #10
 8008c12:	e7d7      	b.n	8008bc4 <_puts_r+0x3c>
 8008c14:	4622      	mov	r2, r4
 8008c16:	4628      	mov	r0, r5
 8008c18:	f000 f8a3 	bl	8008d62 <__swbuf_r>
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	d1e7      	bne.n	8008bf0 <_puts_r+0x68>
 8008c20:	e7ce      	b.n	8008bc0 <_puts_r+0x38>
 8008c22:	3e01      	subs	r6, #1
 8008c24:	e7e4      	b.n	8008bf0 <_puts_r+0x68>
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	6022      	str	r2, [r4, #0]
 8008c2c:	220a      	movs	r2, #10
 8008c2e:	701a      	strb	r2, [r3, #0]
 8008c30:	e7ee      	b.n	8008c10 <_puts_r+0x88>
	...

08008c34 <puts>:
 8008c34:	4b02      	ldr	r3, [pc, #8]	@ (8008c40 <puts+0xc>)
 8008c36:	4601      	mov	r1, r0
 8008c38:	6818      	ldr	r0, [r3, #0]
 8008c3a:	f7ff bfa5 	b.w	8008b88 <_puts_r>
 8008c3e:	bf00      	nop
 8008c40:	2000002c 	.word	0x2000002c

08008c44 <siprintf>:
 8008c44:	b40e      	push	{r1, r2, r3}
 8008c46:	b500      	push	{lr}
 8008c48:	b09c      	sub	sp, #112	@ 0x70
 8008c4a:	ab1d      	add	r3, sp, #116	@ 0x74
 8008c4c:	9002      	str	r0, [sp, #8]
 8008c4e:	9006      	str	r0, [sp, #24]
 8008c50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008c54:	4809      	ldr	r0, [pc, #36]	@ (8008c7c <siprintf+0x38>)
 8008c56:	9107      	str	r1, [sp, #28]
 8008c58:	9104      	str	r1, [sp, #16]
 8008c5a:	4909      	ldr	r1, [pc, #36]	@ (8008c80 <siprintf+0x3c>)
 8008c5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c60:	9105      	str	r1, [sp, #20]
 8008c62:	6800      	ldr	r0, [r0, #0]
 8008c64:	9301      	str	r3, [sp, #4]
 8008c66:	a902      	add	r1, sp, #8
 8008c68:	f002 fc18 	bl	800b49c <_svfiprintf_r>
 8008c6c:	9b02      	ldr	r3, [sp, #8]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	701a      	strb	r2, [r3, #0]
 8008c72:	b01c      	add	sp, #112	@ 0x70
 8008c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c78:	b003      	add	sp, #12
 8008c7a:	4770      	bx	lr
 8008c7c:	2000002c 	.word	0x2000002c
 8008c80:	ffff0208 	.word	0xffff0208

08008c84 <siscanf>:
 8008c84:	b40e      	push	{r1, r2, r3}
 8008c86:	b530      	push	{r4, r5, lr}
 8008c88:	b09c      	sub	sp, #112	@ 0x70
 8008c8a:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008c8c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008c90:	f854 5b04 	ldr.w	r5, [r4], #4
 8008c94:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008c98:	9002      	str	r0, [sp, #8]
 8008c9a:	9006      	str	r0, [sp, #24]
 8008c9c:	f7f7 fae8 	bl	8000270 <strlen>
 8008ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8008cd0 <siscanf+0x4c>)
 8008ca2:	9003      	str	r0, [sp, #12]
 8008ca4:	9007      	str	r0, [sp, #28]
 8008ca6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ca8:	480a      	ldr	r0, [pc, #40]	@ (8008cd4 <siscanf+0x50>)
 8008caa:	9401      	str	r4, [sp, #4]
 8008cac:	2300      	movs	r3, #0
 8008cae:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008cb0:	9314      	str	r3, [sp, #80]	@ 0x50
 8008cb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008cb6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008cba:	462a      	mov	r2, r5
 8008cbc:	4623      	mov	r3, r4
 8008cbe:	a902      	add	r1, sp, #8
 8008cc0:	6800      	ldr	r0, [r0, #0]
 8008cc2:	f002 fd3f 	bl	800b744 <__ssvfiscanf_r>
 8008cc6:	b01c      	add	sp, #112	@ 0x70
 8008cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ccc:	b003      	add	sp, #12
 8008cce:	4770      	bx	lr
 8008cd0:	08008cfb 	.word	0x08008cfb
 8008cd4:	2000002c 	.word	0x2000002c

08008cd8 <__sread>:
 8008cd8:	b510      	push	{r4, lr}
 8008cda:	460c      	mov	r4, r1
 8008cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ce0:	f000 f914 	bl	8008f0c <_read_r>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	bfab      	itete	ge
 8008ce8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008cea:	89a3      	ldrhlt	r3, [r4, #12]
 8008cec:	181b      	addge	r3, r3, r0
 8008cee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008cf2:	bfac      	ite	ge
 8008cf4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008cf6:	81a3      	strhlt	r3, [r4, #12]
 8008cf8:	bd10      	pop	{r4, pc}

08008cfa <__seofread>:
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	4770      	bx	lr

08008cfe <__swrite>:
 8008cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d02:	461f      	mov	r7, r3
 8008d04:	898b      	ldrh	r3, [r1, #12]
 8008d06:	05db      	lsls	r3, r3, #23
 8008d08:	4605      	mov	r5, r0
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	4616      	mov	r6, r2
 8008d0e:	d505      	bpl.n	8008d1c <__swrite+0x1e>
 8008d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d14:	2302      	movs	r3, #2
 8008d16:	2200      	movs	r2, #0
 8008d18:	f000 f8e6 	bl	8008ee8 <_lseek_r>
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d26:	81a3      	strh	r3, [r4, #12]
 8008d28:	4632      	mov	r2, r6
 8008d2a:	463b      	mov	r3, r7
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d32:	f000 b8fd 	b.w	8008f30 <_write_r>

08008d36 <__sseek>:
 8008d36:	b510      	push	{r4, lr}
 8008d38:	460c      	mov	r4, r1
 8008d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d3e:	f000 f8d3 	bl	8008ee8 <_lseek_r>
 8008d42:	1c43      	adds	r3, r0, #1
 8008d44:	89a3      	ldrh	r3, [r4, #12]
 8008d46:	bf15      	itete	ne
 8008d48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d52:	81a3      	strheq	r3, [r4, #12]
 8008d54:	bf18      	it	ne
 8008d56:	81a3      	strhne	r3, [r4, #12]
 8008d58:	bd10      	pop	{r4, pc}

08008d5a <__sclose>:
 8008d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d5e:	f000 b8b3 	b.w	8008ec8 <_close_r>

08008d62 <__swbuf_r>:
 8008d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d64:	460e      	mov	r6, r1
 8008d66:	4614      	mov	r4, r2
 8008d68:	4605      	mov	r5, r0
 8008d6a:	b118      	cbz	r0, 8008d74 <__swbuf_r+0x12>
 8008d6c:	6a03      	ldr	r3, [r0, #32]
 8008d6e:	b90b      	cbnz	r3, 8008d74 <__swbuf_r+0x12>
 8008d70:	f7ff fec2 	bl	8008af8 <__sinit>
 8008d74:	69a3      	ldr	r3, [r4, #24]
 8008d76:	60a3      	str	r3, [r4, #8]
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	071a      	lsls	r2, r3, #28
 8008d7c:	d501      	bpl.n	8008d82 <__swbuf_r+0x20>
 8008d7e:	6923      	ldr	r3, [r4, #16]
 8008d80:	b943      	cbnz	r3, 8008d94 <__swbuf_r+0x32>
 8008d82:	4621      	mov	r1, r4
 8008d84:	4628      	mov	r0, r5
 8008d86:	f000 f82b 	bl	8008de0 <__swsetup_r>
 8008d8a:	b118      	cbz	r0, 8008d94 <__swbuf_r+0x32>
 8008d8c:	f04f 37ff 	mov.w	r7, #4294967295
 8008d90:	4638      	mov	r0, r7
 8008d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	6922      	ldr	r2, [r4, #16]
 8008d98:	1a98      	subs	r0, r3, r2
 8008d9a:	6963      	ldr	r3, [r4, #20]
 8008d9c:	b2f6      	uxtb	r6, r6
 8008d9e:	4283      	cmp	r3, r0
 8008da0:	4637      	mov	r7, r6
 8008da2:	dc05      	bgt.n	8008db0 <__swbuf_r+0x4e>
 8008da4:	4621      	mov	r1, r4
 8008da6:	4628      	mov	r0, r5
 8008da8:	f7ff fdde 	bl	8008968 <_fflush_r>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d1ed      	bne.n	8008d8c <__swbuf_r+0x2a>
 8008db0:	68a3      	ldr	r3, [r4, #8]
 8008db2:	3b01      	subs	r3, #1
 8008db4:	60a3      	str	r3, [r4, #8]
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	1c5a      	adds	r2, r3, #1
 8008dba:	6022      	str	r2, [r4, #0]
 8008dbc:	701e      	strb	r6, [r3, #0]
 8008dbe:	6962      	ldr	r2, [r4, #20]
 8008dc0:	1c43      	adds	r3, r0, #1
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d004      	beq.n	8008dd0 <__swbuf_r+0x6e>
 8008dc6:	89a3      	ldrh	r3, [r4, #12]
 8008dc8:	07db      	lsls	r3, r3, #31
 8008dca:	d5e1      	bpl.n	8008d90 <__swbuf_r+0x2e>
 8008dcc:	2e0a      	cmp	r6, #10
 8008dce:	d1df      	bne.n	8008d90 <__swbuf_r+0x2e>
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f7ff fdc8 	bl	8008968 <_fflush_r>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d0d9      	beq.n	8008d90 <__swbuf_r+0x2e>
 8008ddc:	e7d6      	b.n	8008d8c <__swbuf_r+0x2a>
	...

08008de0 <__swsetup_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	4b29      	ldr	r3, [pc, #164]	@ (8008e88 <__swsetup_r+0xa8>)
 8008de4:	4605      	mov	r5, r0
 8008de6:	6818      	ldr	r0, [r3, #0]
 8008de8:	460c      	mov	r4, r1
 8008dea:	b118      	cbz	r0, 8008df4 <__swsetup_r+0x14>
 8008dec:	6a03      	ldr	r3, [r0, #32]
 8008dee:	b90b      	cbnz	r3, 8008df4 <__swsetup_r+0x14>
 8008df0:	f7ff fe82 	bl	8008af8 <__sinit>
 8008df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008df8:	0719      	lsls	r1, r3, #28
 8008dfa:	d422      	bmi.n	8008e42 <__swsetup_r+0x62>
 8008dfc:	06da      	lsls	r2, r3, #27
 8008dfe:	d407      	bmi.n	8008e10 <__swsetup_r+0x30>
 8008e00:	2209      	movs	r2, #9
 8008e02:	602a      	str	r2, [r5, #0]
 8008e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e08:	81a3      	strh	r3, [r4, #12]
 8008e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0e:	e033      	b.n	8008e78 <__swsetup_r+0x98>
 8008e10:	0758      	lsls	r0, r3, #29
 8008e12:	d512      	bpl.n	8008e3a <__swsetup_r+0x5a>
 8008e14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e16:	b141      	cbz	r1, 8008e2a <__swsetup_r+0x4a>
 8008e18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e1c:	4299      	cmp	r1, r3
 8008e1e:	d002      	beq.n	8008e26 <__swsetup_r+0x46>
 8008e20:	4628      	mov	r0, r5
 8008e22:	f000 ff25 	bl	8009c70 <_free_r>
 8008e26:	2300      	movs	r3, #0
 8008e28:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e2a:	89a3      	ldrh	r3, [r4, #12]
 8008e2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e30:	81a3      	strh	r3, [r4, #12]
 8008e32:	2300      	movs	r3, #0
 8008e34:	6063      	str	r3, [r4, #4]
 8008e36:	6923      	ldr	r3, [r4, #16]
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	f043 0308 	orr.w	r3, r3, #8
 8008e40:	81a3      	strh	r3, [r4, #12]
 8008e42:	6923      	ldr	r3, [r4, #16]
 8008e44:	b94b      	cbnz	r3, 8008e5a <__swsetup_r+0x7a>
 8008e46:	89a3      	ldrh	r3, [r4, #12]
 8008e48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e50:	d003      	beq.n	8008e5a <__swsetup_r+0x7a>
 8008e52:	4621      	mov	r1, r4
 8008e54:	4628      	mov	r0, r5
 8008e56:	f003 f89f 	bl	800bf98 <__smakebuf_r>
 8008e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e5e:	f013 0201 	ands.w	r2, r3, #1
 8008e62:	d00a      	beq.n	8008e7a <__swsetup_r+0x9a>
 8008e64:	2200      	movs	r2, #0
 8008e66:	60a2      	str	r2, [r4, #8]
 8008e68:	6962      	ldr	r2, [r4, #20]
 8008e6a:	4252      	negs	r2, r2
 8008e6c:	61a2      	str	r2, [r4, #24]
 8008e6e:	6922      	ldr	r2, [r4, #16]
 8008e70:	b942      	cbnz	r2, 8008e84 <__swsetup_r+0xa4>
 8008e72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e76:	d1c5      	bne.n	8008e04 <__swsetup_r+0x24>
 8008e78:	bd38      	pop	{r3, r4, r5, pc}
 8008e7a:	0799      	lsls	r1, r3, #30
 8008e7c:	bf58      	it	pl
 8008e7e:	6962      	ldrpl	r2, [r4, #20]
 8008e80:	60a2      	str	r2, [r4, #8]
 8008e82:	e7f4      	b.n	8008e6e <__swsetup_r+0x8e>
 8008e84:	2000      	movs	r0, #0
 8008e86:	e7f7      	b.n	8008e78 <__swsetup_r+0x98>
 8008e88:	2000002c 	.word	0x2000002c

08008e8c <memset>:
 8008e8c:	4402      	add	r2, r0
 8008e8e:	4603      	mov	r3, r0
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d100      	bne.n	8008e96 <memset+0xa>
 8008e94:	4770      	bx	lr
 8008e96:	f803 1b01 	strb.w	r1, [r3], #1
 8008e9a:	e7f9      	b.n	8008e90 <memset+0x4>

08008e9c <strncmp>:
 8008e9c:	b510      	push	{r4, lr}
 8008e9e:	b16a      	cbz	r2, 8008ebc <strncmp+0x20>
 8008ea0:	3901      	subs	r1, #1
 8008ea2:	1884      	adds	r4, r0, r2
 8008ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ea8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d103      	bne.n	8008eb8 <strncmp+0x1c>
 8008eb0:	42a0      	cmp	r0, r4
 8008eb2:	d001      	beq.n	8008eb8 <strncmp+0x1c>
 8008eb4:	2a00      	cmp	r2, #0
 8008eb6:	d1f5      	bne.n	8008ea4 <strncmp+0x8>
 8008eb8:	1ad0      	subs	r0, r2, r3
 8008eba:	bd10      	pop	{r4, pc}
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	e7fc      	b.n	8008eba <strncmp+0x1e>

08008ec0 <_localeconv_r>:
 8008ec0:	4800      	ldr	r0, [pc, #0]	@ (8008ec4 <_localeconv_r+0x4>)
 8008ec2:	4770      	bx	lr
 8008ec4:	2000016c 	.word	0x2000016c

08008ec8 <_close_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4d06      	ldr	r5, [pc, #24]	@ (8008ee4 <_close_r+0x1c>)
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4604      	mov	r4, r0
 8008ed0:	4608      	mov	r0, r1
 8008ed2:	602b      	str	r3, [r5, #0]
 8008ed4:	f7f9 fda7 	bl	8002a26 <_close>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d102      	bne.n	8008ee2 <_close_r+0x1a>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	b103      	cbz	r3, 8008ee2 <_close_r+0x1a>
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	bd38      	pop	{r3, r4, r5, pc}
 8008ee4:	200011d0 	.word	0x200011d0

08008ee8 <_lseek_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d07      	ldr	r5, [pc, #28]	@ (8008f08 <_lseek_r+0x20>)
 8008eec:	4604      	mov	r4, r0
 8008eee:	4608      	mov	r0, r1
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	602a      	str	r2, [r5, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	f7f9 fdbc 	bl	8002a74 <_lseek>
 8008efc:	1c43      	adds	r3, r0, #1
 8008efe:	d102      	bne.n	8008f06 <_lseek_r+0x1e>
 8008f00:	682b      	ldr	r3, [r5, #0]
 8008f02:	b103      	cbz	r3, 8008f06 <_lseek_r+0x1e>
 8008f04:	6023      	str	r3, [r4, #0]
 8008f06:	bd38      	pop	{r3, r4, r5, pc}
 8008f08:	200011d0 	.word	0x200011d0

08008f0c <_read_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	4d07      	ldr	r5, [pc, #28]	@ (8008f2c <_read_r+0x20>)
 8008f10:	4604      	mov	r4, r0
 8008f12:	4608      	mov	r0, r1
 8008f14:	4611      	mov	r1, r2
 8008f16:	2200      	movs	r2, #0
 8008f18:	602a      	str	r2, [r5, #0]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	f7f9 fd66 	bl	80029ec <_read>
 8008f20:	1c43      	adds	r3, r0, #1
 8008f22:	d102      	bne.n	8008f2a <_read_r+0x1e>
 8008f24:	682b      	ldr	r3, [r5, #0]
 8008f26:	b103      	cbz	r3, 8008f2a <_read_r+0x1e>
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	bd38      	pop	{r3, r4, r5, pc}
 8008f2c:	200011d0 	.word	0x200011d0

08008f30 <_write_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	4d07      	ldr	r5, [pc, #28]	@ (8008f50 <_write_r+0x20>)
 8008f34:	4604      	mov	r4, r0
 8008f36:	4608      	mov	r0, r1
 8008f38:	4611      	mov	r1, r2
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	602a      	str	r2, [r5, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	f7f9 fb14 	bl	800256c <_write>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d102      	bne.n	8008f4e <_write_r+0x1e>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	b103      	cbz	r3, 8008f4e <_write_r+0x1e>
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	200011d0 	.word	0x200011d0

08008f54 <__errno>:
 8008f54:	4b01      	ldr	r3, [pc, #4]	@ (8008f5c <__errno+0x8>)
 8008f56:	6818      	ldr	r0, [r3, #0]
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	2000002c 	.word	0x2000002c

08008f60 <__libc_init_array>:
 8008f60:	b570      	push	{r4, r5, r6, lr}
 8008f62:	4d0d      	ldr	r5, [pc, #52]	@ (8008f98 <__libc_init_array+0x38>)
 8008f64:	4c0d      	ldr	r4, [pc, #52]	@ (8008f9c <__libc_init_array+0x3c>)
 8008f66:	1b64      	subs	r4, r4, r5
 8008f68:	10a4      	asrs	r4, r4, #2
 8008f6a:	2600      	movs	r6, #0
 8008f6c:	42a6      	cmp	r6, r4
 8008f6e:	d109      	bne.n	8008f84 <__libc_init_array+0x24>
 8008f70:	4d0b      	ldr	r5, [pc, #44]	@ (8008fa0 <__libc_init_array+0x40>)
 8008f72:	4c0c      	ldr	r4, [pc, #48]	@ (8008fa4 <__libc_init_array+0x44>)
 8008f74:	f003 fe20 	bl	800cbb8 <_init>
 8008f78:	1b64      	subs	r4, r4, r5
 8008f7a:	10a4      	asrs	r4, r4, #2
 8008f7c:	2600      	movs	r6, #0
 8008f7e:	42a6      	cmp	r6, r4
 8008f80:	d105      	bne.n	8008f8e <__libc_init_array+0x2e>
 8008f82:	bd70      	pop	{r4, r5, r6, pc}
 8008f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f88:	4798      	blx	r3
 8008f8a:	3601      	adds	r6, #1
 8008f8c:	e7ee      	b.n	8008f6c <__libc_init_array+0xc>
 8008f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f92:	4798      	blx	r3
 8008f94:	3601      	adds	r6, #1
 8008f96:	e7f2      	b.n	8008f7e <__libc_init_array+0x1e>
 8008f98:	0800d2d8 	.word	0x0800d2d8
 8008f9c:	0800d2d8 	.word	0x0800d2d8
 8008fa0:	0800d2d8 	.word	0x0800d2d8
 8008fa4:	0800d2dc 	.word	0x0800d2dc

08008fa8 <__retarget_lock_init_recursive>:
 8008fa8:	4770      	bx	lr

08008faa <__retarget_lock_acquire_recursive>:
 8008faa:	4770      	bx	lr

08008fac <__retarget_lock_release_recursive>:
 8008fac:	4770      	bx	lr

08008fae <memcpy>:
 8008fae:	440a      	add	r2, r1
 8008fb0:	4291      	cmp	r1, r2
 8008fb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fb6:	d100      	bne.n	8008fba <memcpy+0xc>
 8008fb8:	4770      	bx	lr
 8008fba:	b510      	push	{r4, lr}
 8008fbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fc4:	4291      	cmp	r1, r2
 8008fc6:	d1f9      	bne.n	8008fbc <memcpy+0xe>
 8008fc8:	bd10      	pop	{r4, pc}
	...

08008fcc <nanf>:
 8008fcc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008fd4 <nanf+0x8>
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	7fc00000 	.word	0x7fc00000

08008fd8 <quorem>:
 8008fd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fdc:	6903      	ldr	r3, [r0, #16]
 8008fde:	690c      	ldr	r4, [r1, #16]
 8008fe0:	42a3      	cmp	r3, r4
 8008fe2:	4607      	mov	r7, r0
 8008fe4:	db7e      	blt.n	80090e4 <quorem+0x10c>
 8008fe6:	3c01      	subs	r4, #1
 8008fe8:	f101 0814 	add.w	r8, r1, #20
 8008fec:	00a3      	lsls	r3, r4, #2
 8008fee:	f100 0514 	add.w	r5, r0, #20
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ff8:	9301      	str	r3, [sp, #4]
 8008ffa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ffe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009002:	3301      	adds	r3, #1
 8009004:	429a      	cmp	r2, r3
 8009006:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800900a:	fbb2 f6f3 	udiv	r6, r2, r3
 800900e:	d32e      	bcc.n	800906e <quorem+0x96>
 8009010:	f04f 0a00 	mov.w	sl, #0
 8009014:	46c4      	mov	ip, r8
 8009016:	46ae      	mov	lr, r5
 8009018:	46d3      	mov	fp, sl
 800901a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800901e:	b298      	uxth	r0, r3
 8009020:	fb06 a000 	mla	r0, r6, r0, sl
 8009024:	0c02      	lsrs	r2, r0, #16
 8009026:	0c1b      	lsrs	r3, r3, #16
 8009028:	fb06 2303 	mla	r3, r6, r3, r2
 800902c:	f8de 2000 	ldr.w	r2, [lr]
 8009030:	b280      	uxth	r0, r0
 8009032:	b292      	uxth	r2, r2
 8009034:	1a12      	subs	r2, r2, r0
 8009036:	445a      	add	r2, fp
 8009038:	f8de 0000 	ldr.w	r0, [lr]
 800903c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009040:	b29b      	uxth	r3, r3
 8009042:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009046:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800904a:	b292      	uxth	r2, r2
 800904c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009050:	45e1      	cmp	r9, ip
 8009052:	f84e 2b04 	str.w	r2, [lr], #4
 8009056:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800905a:	d2de      	bcs.n	800901a <quorem+0x42>
 800905c:	9b00      	ldr	r3, [sp, #0]
 800905e:	58eb      	ldr	r3, [r5, r3]
 8009060:	b92b      	cbnz	r3, 800906e <quorem+0x96>
 8009062:	9b01      	ldr	r3, [sp, #4]
 8009064:	3b04      	subs	r3, #4
 8009066:	429d      	cmp	r5, r3
 8009068:	461a      	mov	r2, r3
 800906a:	d32f      	bcc.n	80090cc <quorem+0xf4>
 800906c:	613c      	str	r4, [r7, #16]
 800906e:	4638      	mov	r0, r7
 8009070:	f001 f9c2 	bl	800a3f8 <__mcmp>
 8009074:	2800      	cmp	r0, #0
 8009076:	db25      	blt.n	80090c4 <quorem+0xec>
 8009078:	4629      	mov	r1, r5
 800907a:	2000      	movs	r0, #0
 800907c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009080:	f8d1 c000 	ldr.w	ip, [r1]
 8009084:	fa1f fe82 	uxth.w	lr, r2
 8009088:	fa1f f38c 	uxth.w	r3, ip
 800908c:	eba3 030e 	sub.w	r3, r3, lr
 8009090:	4403      	add	r3, r0
 8009092:	0c12      	lsrs	r2, r2, #16
 8009094:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009098:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800909c:	b29b      	uxth	r3, r3
 800909e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090a2:	45c1      	cmp	r9, r8
 80090a4:	f841 3b04 	str.w	r3, [r1], #4
 80090a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80090ac:	d2e6      	bcs.n	800907c <quorem+0xa4>
 80090ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090b6:	b922      	cbnz	r2, 80090c2 <quorem+0xea>
 80090b8:	3b04      	subs	r3, #4
 80090ba:	429d      	cmp	r5, r3
 80090bc:	461a      	mov	r2, r3
 80090be:	d30b      	bcc.n	80090d8 <quorem+0x100>
 80090c0:	613c      	str	r4, [r7, #16]
 80090c2:	3601      	adds	r6, #1
 80090c4:	4630      	mov	r0, r6
 80090c6:	b003      	add	sp, #12
 80090c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090cc:	6812      	ldr	r2, [r2, #0]
 80090ce:	3b04      	subs	r3, #4
 80090d0:	2a00      	cmp	r2, #0
 80090d2:	d1cb      	bne.n	800906c <quorem+0x94>
 80090d4:	3c01      	subs	r4, #1
 80090d6:	e7c6      	b.n	8009066 <quorem+0x8e>
 80090d8:	6812      	ldr	r2, [r2, #0]
 80090da:	3b04      	subs	r3, #4
 80090dc:	2a00      	cmp	r2, #0
 80090de:	d1ef      	bne.n	80090c0 <quorem+0xe8>
 80090e0:	3c01      	subs	r4, #1
 80090e2:	e7ea      	b.n	80090ba <quorem+0xe2>
 80090e4:	2000      	movs	r0, #0
 80090e6:	e7ee      	b.n	80090c6 <quorem+0xee>

080090e8 <_dtoa_r>:
 80090e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ec:	69c7      	ldr	r7, [r0, #28]
 80090ee:	b099      	sub	sp, #100	@ 0x64
 80090f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80090f4:	ec55 4b10 	vmov	r4, r5, d0
 80090f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80090fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80090fc:	4683      	mov	fp, r0
 80090fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8009100:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009102:	b97f      	cbnz	r7, 8009124 <_dtoa_r+0x3c>
 8009104:	2010      	movs	r0, #16
 8009106:	f000 fdfd 	bl	8009d04 <malloc>
 800910a:	4602      	mov	r2, r0
 800910c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009110:	b920      	cbnz	r0, 800911c <_dtoa_r+0x34>
 8009112:	4ba7      	ldr	r3, [pc, #668]	@ (80093b0 <_dtoa_r+0x2c8>)
 8009114:	21ef      	movs	r1, #239	@ 0xef
 8009116:	48a7      	ldr	r0, [pc, #668]	@ (80093b4 <_dtoa_r+0x2cc>)
 8009118:	f003 f842 	bl	800c1a0 <__assert_func>
 800911c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009120:	6007      	str	r7, [r0, #0]
 8009122:	60c7      	str	r7, [r0, #12]
 8009124:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009128:	6819      	ldr	r1, [r3, #0]
 800912a:	b159      	cbz	r1, 8009144 <_dtoa_r+0x5c>
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	604a      	str	r2, [r1, #4]
 8009130:	2301      	movs	r3, #1
 8009132:	4093      	lsls	r3, r2
 8009134:	608b      	str	r3, [r1, #8]
 8009136:	4658      	mov	r0, fp
 8009138:	f000 feda 	bl	8009ef0 <_Bfree>
 800913c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009140:	2200      	movs	r2, #0
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	1e2b      	subs	r3, r5, #0
 8009146:	bfb9      	ittee	lt
 8009148:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800914c:	9303      	strlt	r3, [sp, #12]
 800914e:	2300      	movge	r3, #0
 8009150:	6033      	strge	r3, [r6, #0]
 8009152:	9f03      	ldr	r7, [sp, #12]
 8009154:	4b98      	ldr	r3, [pc, #608]	@ (80093b8 <_dtoa_r+0x2d0>)
 8009156:	bfbc      	itt	lt
 8009158:	2201      	movlt	r2, #1
 800915a:	6032      	strlt	r2, [r6, #0]
 800915c:	43bb      	bics	r3, r7
 800915e:	d112      	bne.n	8009186 <_dtoa_r+0x9e>
 8009160:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009162:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009166:	6013      	str	r3, [r2, #0]
 8009168:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800916c:	4323      	orrs	r3, r4
 800916e:	f000 854d 	beq.w	8009c0c <_dtoa_r+0xb24>
 8009172:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009174:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80093cc <_dtoa_r+0x2e4>
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 854f 	beq.w	8009c1c <_dtoa_r+0xb34>
 800917e:	f10a 0303 	add.w	r3, sl, #3
 8009182:	f000 bd49 	b.w	8009c18 <_dtoa_r+0xb30>
 8009186:	ed9d 7b02 	vldr	d7, [sp, #8]
 800918a:	2200      	movs	r2, #0
 800918c:	ec51 0b17 	vmov	r0, r1, d7
 8009190:	2300      	movs	r3, #0
 8009192:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009196:	f7f7 fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 800919a:	4680      	mov	r8, r0
 800919c:	b158      	cbz	r0, 80091b6 <_dtoa_r+0xce>
 800919e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80091a0:	2301      	movs	r3, #1
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091a6:	b113      	cbz	r3, 80091ae <_dtoa_r+0xc6>
 80091a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80091aa:	4b84      	ldr	r3, [pc, #528]	@ (80093bc <_dtoa_r+0x2d4>)
 80091ac:	6013      	str	r3, [r2, #0]
 80091ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80093d0 <_dtoa_r+0x2e8>
 80091b2:	f000 bd33 	b.w	8009c1c <_dtoa_r+0xb34>
 80091b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80091ba:	aa16      	add	r2, sp, #88	@ 0x58
 80091bc:	a917      	add	r1, sp, #92	@ 0x5c
 80091be:	4658      	mov	r0, fp
 80091c0:	f001 fa3a 	bl	800a638 <__d2b>
 80091c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80091c8:	4681      	mov	r9, r0
 80091ca:	2e00      	cmp	r6, #0
 80091cc:	d077      	beq.n	80092be <_dtoa_r+0x1d6>
 80091ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80091d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80091e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80091e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80091e8:	4619      	mov	r1, r3
 80091ea:	2200      	movs	r2, #0
 80091ec:	4b74      	ldr	r3, [pc, #464]	@ (80093c0 <_dtoa_r+0x2d8>)
 80091ee:	f7f7 f84b 	bl	8000288 <__aeabi_dsub>
 80091f2:	a369      	add	r3, pc, #420	@ (adr r3, 8009398 <_dtoa_r+0x2b0>)
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	f7f7 f9fe 	bl	80005f8 <__aeabi_dmul>
 80091fc:	a368      	add	r3, pc, #416	@ (adr r3, 80093a0 <_dtoa_r+0x2b8>)
 80091fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009202:	f7f7 f843 	bl	800028c <__adddf3>
 8009206:	4604      	mov	r4, r0
 8009208:	4630      	mov	r0, r6
 800920a:	460d      	mov	r5, r1
 800920c:	f7f7 f98a 	bl	8000524 <__aeabi_i2d>
 8009210:	a365      	add	r3, pc, #404	@ (adr r3, 80093a8 <_dtoa_r+0x2c0>)
 8009212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009216:	f7f7 f9ef 	bl	80005f8 <__aeabi_dmul>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4620      	mov	r0, r4
 8009220:	4629      	mov	r1, r5
 8009222:	f7f7 f833 	bl	800028c <__adddf3>
 8009226:	4604      	mov	r4, r0
 8009228:	460d      	mov	r5, r1
 800922a:	f7f7 fc95 	bl	8000b58 <__aeabi_d2iz>
 800922e:	2200      	movs	r2, #0
 8009230:	4607      	mov	r7, r0
 8009232:	2300      	movs	r3, #0
 8009234:	4620      	mov	r0, r4
 8009236:	4629      	mov	r1, r5
 8009238:	f7f7 fc50 	bl	8000adc <__aeabi_dcmplt>
 800923c:	b140      	cbz	r0, 8009250 <_dtoa_r+0x168>
 800923e:	4638      	mov	r0, r7
 8009240:	f7f7 f970 	bl	8000524 <__aeabi_i2d>
 8009244:	4622      	mov	r2, r4
 8009246:	462b      	mov	r3, r5
 8009248:	f7f7 fc3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800924c:	b900      	cbnz	r0, 8009250 <_dtoa_r+0x168>
 800924e:	3f01      	subs	r7, #1
 8009250:	2f16      	cmp	r7, #22
 8009252:	d851      	bhi.n	80092f8 <_dtoa_r+0x210>
 8009254:	4b5b      	ldr	r3, [pc, #364]	@ (80093c4 <_dtoa_r+0x2dc>)
 8009256:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800925a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009262:	f7f7 fc3b 	bl	8000adc <__aeabi_dcmplt>
 8009266:	2800      	cmp	r0, #0
 8009268:	d048      	beq.n	80092fc <_dtoa_r+0x214>
 800926a:	3f01      	subs	r7, #1
 800926c:	2300      	movs	r3, #0
 800926e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009270:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009272:	1b9b      	subs	r3, r3, r6
 8009274:	1e5a      	subs	r2, r3, #1
 8009276:	bf44      	itt	mi
 8009278:	f1c3 0801 	rsbmi	r8, r3, #1
 800927c:	2300      	movmi	r3, #0
 800927e:	9208      	str	r2, [sp, #32]
 8009280:	bf54      	ite	pl
 8009282:	f04f 0800 	movpl.w	r8, #0
 8009286:	9308      	strmi	r3, [sp, #32]
 8009288:	2f00      	cmp	r7, #0
 800928a:	db39      	blt.n	8009300 <_dtoa_r+0x218>
 800928c:	9b08      	ldr	r3, [sp, #32]
 800928e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009290:	443b      	add	r3, r7
 8009292:	9308      	str	r3, [sp, #32]
 8009294:	2300      	movs	r3, #0
 8009296:	930a      	str	r3, [sp, #40]	@ 0x28
 8009298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800929a:	2b09      	cmp	r3, #9
 800929c:	d864      	bhi.n	8009368 <_dtoa_r+0x280>
 800929e:	2b05      	cmp	r3, #5
 80092a0:	bfc4      	itt	gt
 80092a2:	3b04      	subgt	r3, #4
 80092a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80092a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092a8:	f1a3 0302 	sub.w	r3, r3, #2
 80092ac:	bfcc      	ite	gt
 80092ae:	2400      	movgt	r4, #0
 80092b0:	2401      	movle	r4, #1
 80092b2:	2b03      	cmp	r3, #3
 80092b4:	d863      	bhi.n	800937e <_dtoa_r+0x296>
 80092b6:	e8df f003 	tbb	[pc, r3]
 80092ba:	372a      	.short	0x372a
 80092bc:	5535      	.short	0x5535
 80092be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80092c2:	441e      	add	r6, r3
 80092c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80092c8:	2b20      	cmp	r3, #32
 80092ca:	bfc1      	itttt	gt
 80092cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80092d0:	409f      	lslgt	r7, r3
 80092d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80092d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80092da:	bfd6      	itet	le
 80092dc:	f1c3 0320 	rsble	r3, r3, #32
 80092e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80092e4:	fa04 f003 	lslle.w	r0, r4, r3
 80092e8:	f7f7 f90c 	bl	8000504 <__aeabi_ui2d>
 80092ec:	2201      	movs	r2, #1
 80092ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80092f2:	3e01      	subs	r6, #1
 80092f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80092f6:	e777      	b.n	80091e8 <_dtoa_r+0x100>
 80092f8:	2301      	movs	r3, #1
 80092fa:	e7b8      	b.n	800926e <_dtoa_r+0x186>
 80092fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80092fe:	e7b7      	b.n	8009270 <_dtoa_r+0x188>
 8009300:	427b      	negs	r3, r7
 8009302:	930a      	str	r3, [sp, #40]	@ 0x28
 8009304:	2300      	movs	r3, #0
 8009306:	eba8 0807 	sub.w	r8, r8, r7
 800930a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800930c:	e7c4      	b.n	8009298 <_dtoa_r+0x1b0>
 800930e:	2300      	movs	r3, #0
 8009310:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009314:	2b00      	cmp	r3, #0
 8009316:	dc35      	bgt.n	8009384 <_dtoa_r+0x29c>
 8009318:	2301      	movs	r3, #1
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	9307      	str	r3, [sp, #28]
 800931e:	461a      	mov	r2, r3
 8009320:	920e      	str	r2, [sp, #56]	@ 0x38
 8009322:	e00b      	b.n	800933c <_dtoa_r+0x254>
 8009324:	2301      	movs	r3, #1
 8009326:	e7f3      	b.n	8009310 <_dtoa_r+0x228>
 8009328:	2300      	movs	r3, #0
 800932a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800932c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800932e:	18fb      	adds	r3, r7, r3
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	3301      	adds	r3, #1
 8009334:	2b01      	cmp	r3, #1
 8009336:	9307      	str	r3, [sp, #28]
 8009338:	bfb8      	it	lt
 800933a:	2301      	movlt	r3, #1
 800933c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009340:	2100      	movs	r1, #0
 8009342:	2204      	movs	r2, #4
 8009344:	f102 0514 	add.w	r5, r2, #20
 8009348:	429d      	cmp	r5, r3
 800934a:	d91f      	bls.n	800938c <_dtoa_r+0x2a4>
 800934c:	6041      	str	r1, [r0, #4]
 800934e:	4658      	mov	r0, fp
 8009350:	f000 fd8e 	bl	8009e70 <_Balloc>
 8009354:	4682      	mov	sl, r0
 8009356:	2800      	cmp	r0, #0
 8009358:	d13c      	bne.n	80093d4 <_dtoa_r+0x2ec>
 800935a:	4b1b      	ldr	r3, [pc, #108]	@ (80093c8 <_dtoa_r+0x2e0>)
 800935c:	4602      	mov	r2, r0
 800935e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009362:	e6d8      	b.n	8009116 <_dtoa_r+0x2e>
 8009364:	2301      	movs	r3, #1
 8009366:	e7e0      	b.n	800932a <_dtoa_r+0x242>
 8009368:	2401      	movs	r4, #1
 800936a:	2300      	movs	r3, #0
 800936c:	9309      	str	r3, [sp, #36]	@ 0x24
 800936e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009370:	f04f 33ff 	mov.w	r3, #4294967295
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	9307      	str	r3, [sp, #28]
 8009378:	2200      	movs	r2, #0
 800937a:	2312      	movs	r3, #18
 800937c:	e7d0      	b.n	8009320 <_dtoa_r+0x238>
 800937e:	2301      	movs	r3, #1
 8009380:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009382:	e7f5      	b.n	8009370 <_dtoa_r+0x288>
 8009384:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	9307      	str	r3, [sp, #28]
 800938a:	e7d7      	b.n	800933c <_dtoa_r+0x254>
 800938c:	3101      	adds	r1, #1
 800938e:	0052      	lsls	r2, r2, #1
 8009390:	e7d8      	b.n	8009344 <_dtoa_r+0x25c>
 8009392:	bf00      	nop
 8009394:	f3af 8000 	nop.w
 8009398:	636f4361 	.word	0x636f4361
 800939c:	3fd287a7 	.word	0x3fd287a7
 80093a0:	8b60c8b3 	.word	0x8b60c8b3
 80093a4:	3fc68a28 	.word	0x3fc68a28
 80093a8:	509f79fb 	.word	0x509f79fb
 80093ac:	3fd34413 	.word	0x3fd34413
 80093b0:	0800cfd1 	.word	0x0800cfd1
 80093b4:	0800cfe8 	.word	0x0800cfe8
 80093b8:	7ff00000 	.word	0x7ff00000
 80093bc:	0800d228 	.word	0x0800d228
 80093c0:	3ff80000 	.word	0x3ff80000
 80093c4:	0800d0e0 	.word	0x0800d0e0
 80093c8:	0800d040 	.word	0x0800d040
 80093cc:	0800cfcd 	.word	0x0800cfcd
 80093d0:	0800d227 	.word	0x0800d227
 80093d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80093d8:	6018      	str	r0, [r3, #0]
 80093da:	9b07      	ldr	r3, [sp, #28]
 80093dc:	2b0e      	cmp	r3, #14
 80093de:	f200 80a4 	bhi.w	800952a <_dtoa_r+0x442>
 80093e2:	2c00      	cmp	r4, #0
 80093e4:	f000 80a1 	beq.w	800952a <_dtoa_r+0x442>
 80093e8:	2f00      	cmp	r7, #0
 80093ea:	dd33      	ble.n	8009454 <_dtoa_r+0x36c>
 80093ec:	4bad      	ldr	r3, [pc, #692]	@ (80096a4 <_dtoa_r+0x5bc>)
 80093ee:	f007 020f 	and.w	r2, r7, #15
 80093f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093f6:	ed93 7b00 	vldr	d7, [r3]
 80093fa:	05f8      	lsls	r0, r7, #23
 80093fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009400:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009404:	d516      	bpl.n	8009434 <_dtoa_r+0x34c>
 8009406:	4ba8      	ldr	r3, [pc, #672]	@ (80096a8 <_dtoa_r+0x5c0>)
 8009408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800940c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009410:	f7f7 fa1c 	bl	800084c <__aeabi_ddiv>
 8009414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009418:	f004 040f 	and.w	r4, r4, #15
 800941c:	2603      	movs	r6, #3
 800941e:	4da2      	ldr	r5, [pc, #648]	@ (80096a8 <_dtoa_r+0x5c0>)
 8009420:	b954      	cbnz	r4, 8009438 <_dtoa_r+0x350>
 8009422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800942a:	f7f7 fa0f 	bl	800084c <__aeabi_ddiv>
 800942e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009432:	e028      	b.n	8009486 <_dtoa_r+0x39e>
 8009434:	2602      	movs	r6, #2
 8009436:	e7f2      	b.n	800941e <_dtoa_r+0x336>
 8009438:	07e1      	lsls	r1, r4, #31
 800943a:	d508      	bpl.n	800944e <_dtoa_r+0x366>
 800943c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009440:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009444:	f7f7 f8d8 	bl	80005f8 <__aeabi_dmul>
 8009448:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800944c:	3601      	adds	r6, #1
 800944e:	1064      	asrs	r4, r4, #1
 8009450:	3508      	adds	r5, #8
 8009452:	e7e5      	b.n	8009420 <_dtoa_r+0x338>
 8009454:	f000 80d2 	beq.w	80095fc <_dtoa_r+0x514>
 8009458:	427c      	negs	r4, r7
 800945a:	4b92      	ldr	r3, [pc, #584]	@ (80096a4 <_dtoa_r+0x5bc>)
 800945c:	4d92      	ldr	r5, [pc, #584]	@ (80096a8 <_dtoa_r+0x5c0>)
 800945e:	f004 020f 	and.w	r2, r4, #15
 8009462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800946e:	f7f7 f8c3 	bl	80005f8 <__aeabi_dmul>
 8009472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009476:	1124      	asrs	r4, r4, #4
 8009478:	2300      	movs	r3, #0
 800947a:	2602      	movs	r6, #2
 800947c:	2c00      	cmp	r4, #0
 800947e:	f040 80b2 	bne.w	80095e6 <_dtoa_r+0x4fe>
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1d3      	bne.n	800942e <_dtoa_r+0x346>
 8009486:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009488:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800948c:	2b00      	cmp	r3, #0
 800948e:	f000 80b7 	beq.w	8009600 <_dtoa_r+0x518>
 8009492:	4b86      	ldr	r3, [pc, #536]	@ (80096ac <_dtoa_r+0x5c4>)
 8009494:	2200      	movs	r2, #0
 8009496:	4620      	mov	r0, r4
 8009498:	4629      	mov	r1, r5
 800949a:	f7f7 fb1f 	bl	8000adc <__aeabi_dcmplt>
 800949e:	2800      	cmp	r0, #0
 80094a0:	f000 80ae 	beq.w	8009600 <_dtoa_r+0x518>
 80094a4:	9b07      	ldr	r3, [sp, #28]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f000 80aa 	beq.w	8009600 <_dtoa_r+0x518>
 80094ac:	9b00      	ldr	r3, [sp, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	dd37      	ble.n	8009522 <_dtoa_r+0x43a>
 80094b2:	1e7b      	subs	r3, r7, #1
 80094b4:	9304      	str	r3, [sp, #16]
 80094b6:	4620      	mov	r0, r4
 80094b8:	4b7d      	ldr	r3, [pc, #500]	@ (80096b0 <_dtoa_r+0x5c8>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	4629      	mov	r1, r5
 80094be:	f7f7 f89b 	bl	80005f8 <__aeabi_dmul>
 80094c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094c6:	9c00      	ldr	r4, [sp, #0]
 80094c8:	3601      	adds	r6, #1
 80094ca:	4630      	mov	r0, r6
 80094cc:	f7f7 f82a 	bl	8000524 <__aeabi_i2d>
 80094d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094d4:	f7f7 f890 	bl	80005f8 <__aeabi_dmul>
 80094d8:	4b76      	ldr	r3, [pc, #472]	@ (80096b4 <_dtoa_r+0x5cc>)
 80094da:	2200      	movs	r2, #0
 80094dc:	f7f6 fed6 	bl	800028c <__adddf3>
 80094e0:	4605      	mov	r5, r0
 80094e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80094e6:	2c00      	cmp	r4, #0
 80094e8:	f040 808d 	bne.w	8009606 <_dtoa_r+0x51e>
 80094ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094f0:	4b71      	ldr	r3, [pc, #452]	@ (80096b8 <_dtoa_r+0x5d0>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	f7f6 fec8 	bl	8000288 <__aeabi_dsub>
 80094f8:	4602      	mov	r2, r0
 80094fa:	460b      	mov	r3, r1
 80094fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009500:	462a      	mov	r2, r5
 8009502:	4633      	mov	r3, r6
 8009504:	f7f7 fb08 	bl	8000b18 <__aeabi_dcmpgt>
 8009508:	2800      	cmp	r0, #0
 800950a:	f040 828b 	bne.w	8009a24 <_dtoa_r+0x93c>
 800950e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009512:	462a      	mov	r2, r5
 8009514:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009518:	f7f7 fae0 	bl	8000adc <__aeabi_dcmplt>
 800951c:	2800      	cmp	r0, #0
 800951e:	f040 8128 	bne.w	8009772 <_dtoa_r+0x68a>
 8009522:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009526:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800952a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800952c:	2b00      	cmp	r3, #0
 800952e:	f2c0 815a 	blt.w	80097e6 <_dtoa_r+0x6fe>
 8009532:	2f0e      	cmp	r7, #14
 8009534:	f300 8157 	bgt.w	80097e6 <_dtoa_r+0x6fe>
 8009538:	4b5a      	ldr	r3, [pc, #360]	@ (80096a4 <_dtoa_r+0x5bc>)
 800953a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800953e:	ed93 7b00 	vldr	d7, [r3]
 8009542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009544:	2b00      	cmp	r3, #0
 8009546:	ed8d 7b00 	vstr	d7, [sp]
 800954a:	da03      	bge.n	8009554 <_dtoa_r+0x46c>
 800954c:	9b07      	ldr	r3, [sp, #28]
 800954e:	2b00      	cmp	r3, #0
 8009550:	f340 8101 	ble.w	8009756 <_dtoa_r+0x66e>
 8009554:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009558:	4656      	mov	r6, sl
 800955a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800955e:	4620      	mov	r0, r4
 8009560:	4629      	mov	r1, r5
 8009562:	f7f7 f973 	bl	800084c <__aeabi_ddiv>
 8009566:	f7f7 faf7 	bl	8000b58 <__aeabi_d2iz>
 800956a:	4680      	mov	r8, r0
 800956c:	f7f6 ffda 	bl	8000524 <__aeabi_i2d>
 8009570:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009574:	f7f7 f840 	bl	80005f8 <__aeabi_dmul>
 8009578:	4602      	mov	r2, r0
 800957a:	460b      	mov	r3, r1
 800957c:	4620      	mov	r0, r4
 800957e:	4629      	mov	r1, r5
 8009580:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009584:	f7f6 fe80 	bl	8000288 <__aeabi_dsub>
 8009588:	f806 4b01 	strb.w	r4, [r6], #1
 800958c:	9d07      	ldr	r5, [sp, #28]
 800958e:	eba6 040a 	sub.w	r4, r6, sl
 8009592:	42a5      	cmp	r5, r4
 8009594:	4602      	mov	r2, r0
 8009596:	460b      	mov	r3, r1
 8009598:	f040 8117 	bne.w	80097ca <_dtoa_r+0x6e2>
 800959c:	f7f6 fe76 	bl	800028c <__adddf3>
 80095a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095a4:	4604      	mov	r4, r0
 80095a6:	460d      	mov	r5, r1
 80095a8:	f7f7 fab6 	bl	8000b18 <__aeabi_dcmpgt>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	f040 80f9 	bne.w	80097a4 <_dtoa_r+0x6bc>
 80095b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095b6:	4620      	mov	r0, r4
 80095b8:	4629      	mov	r1, r5
 80095ba:	f7f7 fa85 	bl	8000ac8 <__aeabi_dcmpeq>
 80095be:	b118      	cbz	r0, 80095c8 <_dtoa_r+0x4e0>
 80095c0:	f018 0f01 	tst.w	r8, #1
 80095c4:	f040 80ee 	bne.w	80097a4 <_dtoa_r+0x6bc>
 80095c8:	4649      	mov	r1, r9
 80095ca:	4658      	mov	r0, fp
 80095cc:	f000 fc90 	bl	8009ef0 <_Bfree>
 80095d0:	2300      	movs	r3, #0
 80095d2:	7033      	strb	r3, [r6, #0]
 80095d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80095d6:	3701      	adds	r7, #1
 80095d8:	601f      	str	r7, [r3, #0]
 80095da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f000 831d 	beq.w	8009c1c <_dtoa_r+0xb34>
 80095e2:	601e      	str	r6, [r3, #0]
 80095e4:	e31a      	b.n	8009c1c <_dtoa_r+0xb34>
 80095e6:	07e2      	lsls	r2, r4, #31
 80095e8:	d505      	bpl.n	80095f6 <_dtoa_r+0x50e>
 80095ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095ee:	f7f7 f803 	bl	80005f8 <__aeabi_dmul>
 80095f2:	3601      	adds	r6, #1
 80095f4:	2301      	movs	r3, #1
 80095f6:	1064      	asrs	r4, r4, #1
 80095f8:	3508      	adds	r5, #8
 80095fa:	e73f      	b.n	800947c <_dtoa_r+0x394>
 80095fc:	2602      	movs	r6, #2
 80095fe:	e742      	b.n	8009486 <_dtoa_r+0x39e>
 8009600:	9c07      	ldr	r4, [sp, #28]
 8009602:	9704      	str	r7, [sp, #16]
 8009604:	e761      	b.n	80094ca <_dtoa_r+0x3e2>
 8009606:	4b27      	ldr	r3, [pc, #156]	@ (80096a4 <_dtoa_r+0x5bc>)
 8009608:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800960a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800960e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009612:	4454      	add	r4, sl
 8009614:	2900      	cmp	r1, #0
 8009616:	d053      	beq.n	80096c0 <_dtoa_r+0x5d8>
 8009618:	4928      	ldr	r1, [pc, #160]	@ (80096bc <_dtoa_r+0x5d4>)
 800961a:	2000      	movs	r0, #0
 800961c:	f7f7 f916 	bl	800084c <__aeabi_ddiv>
 8009620:	4633      	mov	r3, r6
 8009622:	462a      	mov	r2, r5
 8009624:	f7f6 fe30 	bl	8000288 <__aeabi_dsub>
 8009628:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800962c:	4656      	mov	r6, sl
 800962e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009632:	f7f7 fa91 	bl	8000b58 <__aeabi_d2iz>
 8009636:	4605      	mov	r5, r0
 8009638:	f7f6 ff74 	bl	8000524 <__aeabi_i2d>
 800963c:	4602      	mov	r2, r0
 800963e:	460b      	mov	r3, r1
 8009640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009644:	f7f6 fe20 	bl	8000288 <__aeabi_dsub>
 8009648:	3530      	adds	r5, #48	@ 0x30
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009652:	f806 5b01 	strb.w	r5, [r6], #1
 8009656:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800965a:	f7f7 fa3f 	bl	8000adc <__aeabi_dcmplt>
 800965e:	2800      	cmp	r0, #0
 8009660:	d171      	bne.n	8009746 <_dtoa_r+0x65e>
 8009662:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009666:	4911      	ldr	r1, [pc, #68]	@ (80096ac <_dtoa_r+0x5c4>)
 8009668:	2000      	movs	r0, #0
 800966a:	f7f6 fe0d 	bl	8000288 <__aeabi_dsub>
 800966e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009672:	f7f7 fa33 	bl	8000adc <__aeabi_dcmplt>
 8009676:	2800      	cmp	r0, #0
 8009678:	f040 8095 	bne.w	80097a6 <_dtoa_r+0x6be>
 800967c:	42a6      	cmp	r6, r4
 800967e:	f43f af50 	beq.w	8009522 <_dtoa_r+0x43a>
 8009682:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009686:	4b0a      	ldr	r3, [pc, #40]	@ (80096b0 <_dtoa_r+0x5c8>)
 8009688:	2200      	movs	r2, #0
 800968a:	f7f6 ffb5 	bl	80005f8 <__aeabi_dmul>
 800968e:	4b08      	ldr	r3, [pc, #32]	@ (80096b0 <_dtoa_r+0x5c8>)
 8009690:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009694:	2200      	movs	r2, #0
 8009696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800969a:	f7f6 ffad 	bl	80005f8 <__aeabi_dmul>
 800969e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096a2:	e7c4      	b.n	800962e <_dtoa_r+0x546>
 80096a4:	0800d0e0 	.word	0x0800d0e0
 80096a8:	0800d0b8 	.word	0x0800d0b8
 80096ac:	3ff00000 	.word	0x3ff00000
 80096b0:	40240000 	.word	0x40240000
 80096b4:	401c0000 	.word	0x401c0000
 80096b8:	40140000 	.word	0x40140000
 80096bc:	3fe00000 	.word	0x3fe00000
 80096c0:	4631      	mov	r1, r6
 80096c2:	4628      	mov	r0, r5
 80096c4:	f7f6 ff98 	bl	80005f8 <__aeabi_dmul>
 80096c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80096cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80096ce:	4656      	mov	r6, sl
 80096d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096d4:	f7f7 fa40 	bl	8000b58 <__aeabi_d2iz>
 80096d8:	4605      	mov	r5, r0
 80096da:	f7f6 ff23 	bl	8000524 <__aeabi_i2d>
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096e6:	f7f6 fdcf 	bl	8000288 <__aeabi_dsub>
 80096ea:	3530      	adds	r5, #48	@ 0x30
 80096ec:	f806 5b01 	strb.w	r5, [r6], #1
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	42a6      	cmp	r6, r4
 80096f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096fa:	f04f 0200 	mov.w	r2, #0
 80096fe:	d124      	bne.n	800974a <_dtoa_r+0x662>
 8009700:	4bac      	ldr	r3, [pc, #688]	@ (80099b4 <_dtoa_r+0x8cc>)
 8009702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009706:	f7f6 fdc1 	bl	800028c <__adddf3>
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009712:	f7f7 fa01 	bl	8000b18 <__aeabi_dcmpgt>
 8009716:	2800      	cmp	r0, #0
 8009718:	d145      	bne.n	80097a6 <_dtoa_r+0x6be>
 800971a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800971e:	49a5      	ldr	r1, [pc, #660]	@ (80099b4 <_dtoa_r+0x8cc>)
 8009720:	2000      	movs	r0, #0
 8009722:	f7f6 fdb1 	bl	8000288 <__aeabi_dsub>
 8009726:	4602      	mov	r2, r0
 8009728:	460b      	mov	r3, r1
 800972a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800972e:	f7f7 f9d5 	bl	8000adc <__aeabi_dcmplt>
 8009732:	2800      	cmp	r0, #0
 8009734:	f43f aef5 	beq.w	8009522 <_dtoa_r+0x43a>
 8009738:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800973a:	1e73      	subs	r3, r6, #1
 800973c:	9315      	str	r3, [sp, #84]	@ 0x54
 800973e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009742:	2b30      	cmp	r3, #48	@ 0x30
 8009744:	d0f8      	beq.n	8009738 <_dtoa_r+0x650>
 8009746:	9f04      	ldr	r7, [sp, #16]
 8009748:	e73e      	b.n	80095c8 <_dtoa_r+0x4e0>
 800974a:	4b9b      	ldr	r3, [pc, #620]	@ (80099b8 <_dtoa_r+0x8d0>)
 800974c:	f7f6 ff54 	bl	80005f8 <__aeabi_dmul>
 8009750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009754:	e7bc      	b.n	80096d0 <_dtoa_r+0x5e8>
 8009756:	d10c      	bne.n	8009772 <_dtoa_r+0x68a>
 8009758:	4b98      	ldr	r3, [pc, #608]	@ (80099bc <_dtoa_r+0x8d4>)
 800975a:	2200      	movs	r2, #0
 800975c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009760:	f7f6 ff4a 	bl	80005f8 <__aeabi_dmul>
 8009764:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009768:	f7f7 f9cc 	bl	8000b04 <__aeabi_dcmpge>
 800976c:	2800      	cmp	r0, #0
 800976e:	f000 8157 	beq.w	8009a20 <_dtoa_r+0x938>
 8009772:	2400      	movs	r4, #0
 8009774:	4625      	mov	r5, r4
 8009776:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009778:	43db      	mvns	r3, r3
 800977a:	9304      	str	r3, [sp, #16]
 800977c:	4656      	mov	r6, sl
 800977e:	2700      	movs	r7, #0
 8009780:	4621      	mov	r1, r4
 8009782:	4658      	mov	r0, fp
 8009784:	f000 fbb4 	bl	8009ef0 <_Bfree>
 8009788:	2d00      	cmp	r5, #0
 800978a:	d0dc      	beq.n	8009746 <_dtoa_r+0x65e>
 800978c:	b12f      	cbz	r7, 800979a <_dtoa_r+0x6b2>
 800978e:	42af      	cmp	r7, r5
 8009790:	d003      	beq.n	800979a <_dtoa_r+0x6b2>
 8009792:	4639      	mov	r1, r7
 8009794:	4658      	mov	r0, fp
 8009796:	f000 fbab 	bl	8009ef0 <_Bfree>
 800979a:	4629      	mov	r1, r5
 800979c:	4658      	mov	r0, fp
 800979e:	f000 fba7 	bl	8009ef0 <_Bfree>
 80097a2:	e7d0      	b.n	8009746 <_dtoa_r+0x65e>
 80097a4:	9704      	str	r7, [sp, #16]
 80097a6:	4633      	mov	r3, r6
 80097a8:	461e      	mov	r6, r3
 80097aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097ae:	2a39      	cmp	r2, #57	@ 0x39
 80097b0:	d107      	bne.n	80097c2 <_dtoa_r+0x6da>
 80097b2:	459a      	cmp	sl, r3
 80097b4:	d1f8      	bne.n	80097a8 <_dtoa_r+0x6c0>
 80097b6:	9a04      	ldr	r2, [sp, #16]
 80097b8:	3201      	adds	r2, #1
 80097ba:	9204      	str	r2, [sp, #16]
 80097bc:	2230      	movs	r2, #48	@ 0x30
 80097be:	f88a 2000 	strb.w	r2, [sl]
 80097c2:	781a      	ldrb	r2, [r3, #0]
 80097c4:	3201      	adds	r2, #1
 80097c6:	701a      	strb	r2, [r3, #0]
 80097c8:	e7bd      	b.n	8009746 <_dtoa_r+0x65e>
 80097ca:	4b7b      	ldr	r3, [pc, #492]	@ (80099b8 <_dtoa_r+0x8d0>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	f7f6 ff13 	bl	80005f8 <__aeabi_dmul>
 80097d2:	2200      	movs	r2, #0
 80097d4:	2300      	movs	r3, #0
 80097d6:	4604      	mov	r4, r0
 80097d8:	460d      	mov	r5, r1
 80097da:	f7f7 f975 	bl	8000ac8 <__aeabi_dcmpeq>
 80097de:	2800      	cmp	r0, #0
 80097e0:	f43f aebb 	beq.w	800955a <_dtoa_r+0x472>
 80097e4:	e6f0      	b.n	80095c8 <_dtoa_r+0x4e0>
 80097e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80097e8:	2a00      	cmp	r2, #0
 80097ea:	f000 80db 	beq.w	80099a4 <_dtoa_r+0x8bc>
 80097ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097f0:	2a01      	cmp	r2, #1
 80097f2:	f300 80bf 	bgt.w	8009974 <_dtoa_r+0x88c>
 80097f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80097f8:	2a00      	cmp	r2, #0
 80097fa:	f000 80b7 	beq.w	800996c <_dtoa_r+0x884>
 80097fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009802:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009804:	4646      	mov	r6, r8
 8009806:	9a08      	ldr	r2, [sp, #32]
 8009808:	2101      	movs	r1, #1
 800980a:	441a      	add	r2, r3
 800980c:	4658      	mov	r0, fp
 800980e:	4498      	add	r8, r3
 8009810:	9208      	str	r2, [sp, #32]
 8009812:	f000 fc6b 	bl	800a0ec <__i2b>
 8009816:	4605      	mov	r5, r0
 8009818:	b15e      	cbz	r6, 8009832 <_dtoa_r+0x74a>
 800981a:	9b08      	ldr	r3, [sp, #32]
 800981c:	2b00      	cmp	r3, #0
 800981e:	dd08      	ble.n	8009832 <_dtoa_r+0x74a>
 8009820:	42b3      	cmp	r3, r6
 8009822:	9a08      	ldr	r2, [sp, #32]
 8009824:	bfa8      	it	ge
 8009826:	4633      	movge	r3, r6
 8009828:	eba8 0803 	sub.w	r8, r8, r3
 800982c:	1af6      	subs	r6, r6, r3
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	9308      	str	r3, [sp, #32]
 8009832:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009834:	b1f3      	cbz	r3, 8009874 <_dtoa_r+0x78c>
 8009836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 80b7 	beq.w	80099ac <_dtoa_r+0x8c4>
 800983e:	b18c      	cbz	r4, 8009864 <_dtoa_r+0x77c>
 8009840:	4629      	mov	r1, r5
 8009842:	4622      	mov	r2, r4
 8009844:	4658      	mov	r0, fp
 8009846:	f000 fd11 	bl	800a26c <__pow5mult>
 800984a:	464a      	mov	r2, r9
 800984c:	4601      	mov	r1, r0
 800984e:	4605      	mov	r5, r0
 8009850:	4658      	mov	r0, fp
 8009852:	f000 fc61 	bl	800a118 <__multiply>
 8009856:	4649      	mov	r1, r9
 8009858:	9004      	str	r0, [sp, #16]
 800985a:	4658      	mov	r0, fp
 800985c:	f000 fb48 	bl	8009ef0 <_Bfree>
 8009860:	9b04      	ldr	r3, [sp, #16]
 8009862:	4699      	mov	r9, r3
 8009864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009866:	1b1a      	subs	r2, r3, r4
 8009868:	d004      	beq.n	8009874 <_dtoa_r+0x78c>
 800986a:	4649      	mov	r1, r9
 800986c:	4658      	mov	r0, fp
 800986e:	f000 fcfd 	bl	800a26c <__pow5mult>
 8009872:	4681      	mov	r9, r0
 8009874:	2101      	movs	r1, #1
 8009876:	4658      	mov	r0, fp
 8009878:	f000 fc38 	bl	800a0ec <__i2b>
 800987c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800987e:	4604      	mov	r4, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	f000 81cf 	beq.w	8009c24 <_dtoa_r+0xb3c>
 8009886:	461a      	mov	r2, r3
 8009888:	4601      	mov	r1, r0
 800988a:	4658      	mov	r0, fp
 800988c:	f000 fcee 	bl	800a26c <__pow5mult>
 8009890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009892:	2b01      	cmp	r3, #1
 8009894:	4604      	mov	r4, r0
 8009896:	f300 8095 	bgt.w	80099c4 <_dtoa_r+0x8dc>
 800989a:	9b02      	ldr	r3, [sp, #8]
 800989c:	2b00      	cmp	r3, #0
 800989e:	f040 8087 	bne.w	80099b0 <_dtoa_r+0x8c8>
 80098a2:	9b03      	ldr	r3, [sp, #12]
 80098a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f040 8089 	bne.w	80099c0 <_dtoa_r+0x8d8>
 80098ae:	9b03      	ldr	r3, [sp, #12]
 80098b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80098b4:	0d1b      	lsrs	r3, r3, #20
 80098b6:	051b      	lsls	r3, r3, #20
 80098b8:	b12b      	cbz	r3, 80098c6 <_dtoa_r+0x7de>
 80098ba:	9b08      	ldr	r3, [sp, #32]
 80098bc:	3301      	adds	r3, #1
 80098be:	9308      	str	r3, [sp, #32]
 80098c0:	f108 0801 	add.w	r8, r8, #1
 80098c4:	2301      	movs	r3, #1
 80098c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80098c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f000 81b0 	beq.w	8009c30 <_dtoa_r+0xb48>
 80098d0:	6923      	ldr	r3, [r4, #16]
 80098d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098d6:	6918      	ldr	r0, [r3, #16]
 80098d8:	f000 fbbc 	bl	800a054 <__hi0bits>
 80098dc:	f1c0 0020 	rsb	r0, r0, #32
 80098e0:	9b08      	ldr	r3, [sp, #32]
 80098e2:	4418      	add	r0, r3
 80098e4:	f010 001f 	ands.w	r0, r0, #31
 80098e8:	d077      	beq.n	80099da <_dtoa_r+0x8f2>
 80098ea:	f1c0 0320 	rsb	r3, r0, #32
 80098ee:	2b04      	cmp	r3, #4
 80098f0:	dd6b      	ble.n	80099ca <_dtoa_r+0x8e2>
 80098f2:	9b08      	ldr	r3, [sp, #32]
 80098f4:	f1c0 001c 	rsb	r0, r0, #28
 80098f8:	4403      	add	r3, r0
 80098fa:	4480      	add	r8, r0
 80098fc:	4406      	add	r6, r0
 80098fe:	9308      	str	r3, [sp, #32]
 8009900:	f1b8 0f00 	cmp.w	r8, #0
 8009904:	dd05      	ble.n	8009912 <_dtoa_r+0x82a>
 8009906:	4649      	mov	r1, r9
 8009908:	4642      	mov	r2, r8
 800990a:	4658      	mov	r0, fp
 800990c:	f000 fd08 	bl	800a320 <__lshift>
 8009910:	4681      	mov	r9, r0
 8009912:	9b08      	ldr	r3, [sp, #32]
 8009914:	2b00      	cmp	r3, #0
 8009916:	dd05      	ble.n	8009924 <_dtoa_r+0x83c>
 8009918:	4621      	mov	r1, r4
 800991a:	461a      	mov	r2, r3
 800991c:	4658      	mov	r0, fp
 800991e:	f000 fcff 	bl	800a320 <__lshift>
 8009922:	4604      	mov	r4, r0
 8009924:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009926:	2b00      	cmp	r3, #0
 8009928:	d059      	beq.n	80099de <_dtoa_r+0x8f6>
 800992a:	4621      	mov	r1, r4
 800992c:	4648      	mov	r0, r9
 800992e:	f000 fd63 	bl	800a3f8 <__mcmp>
 8009932:	2800      	cmp	r0, #0
 8009934:	da53      	bge.n	80099de <_dtoa_r+0x8f6>
 8009936:	1e7b      	subs	r3, r7, #1
 8009938:	9304      	str	r3, [sp, #16]
 800993a:	4649      	mov	r1, r9
 800993c:	2300      	movs	r3, #0
 800993e:	220a      	movs	r2, #10
 8009940:	4658      	mov	r0, fp
 8009942:	f000 faf7 	bl	8009f34 <__multadd>
 8009946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009948:	4681      	mov	r9, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 8172 	beq.w	8009c34 <_dtoa_r+0xb4c>
 8009950:	2300      	movs	r3, #0
 8009952:	4629      	mov	r1, r5
 8009954:	220a      	movs	r2, #10
 8009956:	4658      	mov	r0, fp
 8009958:	f000 faec 	bl	8009f34 <__multadd>
 800995c:	9b00      	ldr	r3, [sp, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	4605      	mov	r5, r0
 8009962:	dc67      	bgt.n	8009a34 <_dtoa_r+0x94c>
 8009964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009966:	2b02      	cmp	r3, #2
 8009968:	dc41      	bgt.n	80099ee <_dtoa_r+0x906>
 800996a:	e063      	b.n	8009a34 <_dtoa_r+0x94c>
 800996c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800996e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009972:	e746      	b.n	8009802 <_dtoa_r+0x71a>
 8009974:	9b07      	ldr	r3, [sp, #28]
 8009976:	1e5c      	subs	r4, r3, #1
 8009978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800997a:	42a3      	cmp	r3, r4
 800997c:	bfbf      	itttt	lt
 800997e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009980:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009982:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009984:	1ae3      	sublt	r3, r4, r3
 8009986:	bfb4      	ite	lt
 8009988:	18d2      	addlt	r2, r2, r3
 800998a:	1b1c      	subge	r4, r3, r4
 800998c:	9b07      	ldr	r3, [sp, #28]
 800998e:	bfbc      	itt	lt
 8009990:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009992:	2400      	movlt	r4, #0
 8009994:	2b00      	cmp	r3, #0
 8009996:	bfb5      	itete	lt
 8009998:	eba8 0603 	sublt.w	r6, r8, r3
 800999c:	9b07      	ldrge	r3, [sp, #28]
 800999e:	2300      	movlt	r3, #0
 80099a0:	4646      	movge	r6, r8
 80099a2:	e730      	b.n	8009806 <_dtoa_r+0x71e>
 80099a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80099a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80099a8:	4646      	mov	r6, r8
 80099aa:	e735      	b.n	8009818 <_dtoa_r+0x730>
 80099ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099ae:	e75c      	b.n	800986a <_dtoa_r+0x782>
 80099b0:	2300      	movs	r3, #0
 80099b2:	e788      	b.n	80098c6 <_dtoa_r+0x7de>
 80099b4:	3fe00000 	.word	0x3fe00000
 80099b8:	40240000 	.word	0x40240000
 80099bc:	40140000 	.word	0x40140000
 80099c0:	9b02      	ldr	r3, [sp, #8]
 80099c2:	e780      	b.n	80098c6 <_dtoa_r+0x7de>
 80099c4:	2300      	movs	r3, #0
 80099c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80099c8:	e782      	b.n	80098d0 <_dtoa_r+0x7e8>
 80099ca:	d099      	beq.n	8009900 <_dtoa_r+0x818>
 80099cc:	9a08      	ldr	r2, [sp, #32]
 80099ce:	331c      	adds	r3, #28
 80099d0:	441a      	add	r2, r3
 80099d2:	4498      	add	r8, r3
 80099d4:	441e      	add	r6, r3
 80099d6:	9208      	str	r2, [sp, #32]
 80099d8:	e792      	b.n	8009900 <_dtoa_r+0x818>
 80099da:	4603      	mov	r3, r0
 80099dc:	e7f6      	b.n	80099cc <_dtoa_r+0x8e4>
 80099de:	9b07      	ldr	r3, [sp, #28]
 80099e0:	9704      	str	r7, [sp, #16]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	dc20      	bgt.n	8009a28 <_dtoa_r+0x940>
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	dd1e      	ble.n	8009a2c <_dtoa_r+0x944>
 80099ee:	9b00      	ldr	r3, [sp, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f47f aec0 	bne.w	8009776 <_dtoa_r+0x68e>
 80099f6:	4621      	mov	r1, r4
 80099f8:	2205      	movs	r2, #5
 80099fa:	4658      	mov	r0, fp
 80099fc:	f000 fa9a 	bl	8009f34 <__multadd>
 8009a00:	4601      	mov	r1, r0
 8009a02:	4604      	mov	r4, r0
 8009a04:	4648      	mov	r0, r9
 8009a06:	f000 fcf7 	bl	800a3f8 <__mcmp>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	f77f aeb3 	ble.w	8009776 <_dtoa_r+0x68e>
 8009a10:	4656      	mov	r6, sl
 8009a12:	2331      	movs	r3, #49	@ 0x31
 8009a14:	f806 3b01 	strb.w	r3, [r6], #1
 8009a18:	9b04      	ldr	r3, [sp, #16]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	9304      	str	r3, [sp, #16]
 8009a1e:	e6ae      	b.n	800977e <_dtoa_r+0x696>
 8009a20:	9c07      	ldr	r4, [sp, #28]
 8009a22:	9704      	str	r7, [sp, #16]
 8009a24:	4625      	mov	r5, r4
 8009a26:	e7f3      	b.n	8009a10 <_dtoa_r+0x928>
 8009a28:	9b07      	ldr	r3, [sp, #28]
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f000 8104 	beq.w	8009c3c <_dtoa_r+0xb54>
 8009a34:	2e00      	cmp	r6, #0
 8009a36:	dd05      	ble.n	8009a44 <_dtoa_r+0x95c>
 8009a38:	4629      	mov	r1, r5
 8009a3a:	4632      	mov	r2, r6
 8009a3c:	4658      	mov	r0, fp
 8009a3e:	f000 fc6f 	bl	800a320 <__lshift>
 8009a42:	4605      	mov	r5, r0
 8009a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d05a      	beq.n	8009b00 <_dtoa_r+0xa18>
 8009a4a:	6869      	ldr	r1, [r5, #4]
 8009a4c:	4658      	mov	r0, fp
 8009a4e:	f000 fa0f 	bl	8009e70 <_Balloc>
 8009a52:	4606      	mov	r6, r0
 8009a54:	b928      	cbnz	r0, 8009a62 <_dtoa_r+0x97a>
 8009a56:	4b84      	ldr	r3, [pc, #528]	@ (8009c68 <_dtoa_r+0xb80>)
 8009a58:	4602      	mov	r2, r0
 8009a5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009a5e:	f7ff bb5a 	b.w	8009116 <_dtoa_r+0x2e>
 8009a62:	692a      	ldr	r2, [r5, #16]
 8009a64:	3202      	adds	r2, #2
 8009a66:	0092      	lsls	r2, r2, #2
 8009a68:	f105 010c 	add.w	r1, r5, #12
 8009a6c:	300c      	adds	r0, #12
 8009a6e:	f7ff fa9e 	bl	8008fae <memcpy>
 8009a72:	2201      	movs	r2, #1
 8009a74:	4631      	mov	r1, r6
 8009a76:	4658      	mov	r0, fp
 8009a78:	f000 fc52 	bl	800a320 <__lshift>
 8009a7c:	f10a 0301 	add.w	r3, sl, #1
 8009a80:	9307      	str	r3, [sp, #28]
 8009a82:	9b00      	ldr	r3, [sp, #0]
 8009a84:	4453      	add	r3, sl
 8009a86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a88:	9b02      	ldr	r3, [sp, #8]
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	462f      	mov	r7, r5
 8009a90:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a92:	4605      	mov	r5, r0
 8009a94:	9b07      	ldr	r3, [sp, #28]
 8009a96:	4621      	mov	r1, r4
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	4648      	mov	r0, r9
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	f7ff fa9b 	bl	8008fd8 <quorem>
 8009aa2:	4639      	mov	r1, r7
 8009aa4:	9002      	str	r0, [sp, #8]
 8009aa6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009aaa:	4648      	mov	r0, r9
 8009aac:	f000 fca4 	bl	800a3f8 <__mcmp>
 8009ab0:	462a      	mov	r2, r5
 8009ab2:	9008      	str	r0, [sp, #32]
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	4658      	mov	r0, fp
 8009ab8:	f000 fcba 	bl	800a430 <__mdiff>
 8009abc:	68c2      	ldr	r2, [r0, #12]
 8009abe:	4606      	mov	r6, r0
 8009ac0:	bb02      	cbnz	r2, 8009b04 <_dtoa_r+0xa1c>
 8009ac2:	4601      	mov	r1, r0
 8009ac4:	4648      	mov	r0, r9
 8009ac6:	f000 fc97 	bl	800a3f8 <__mcmp>
 8009aca:	4602      	mov	r2, r0
 8009acc:	4631      	mov	r1, r6
 8009ace:	4658      	mov	r0, fp
 8009ad0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ad2:	f000 fa0d 	bl	8009ef0 <_Bfree>
 8009ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ad8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ada:	9e07      	ldr	r6, [sp, #28]
 8009adc:	ea43 0102 	orr.w	r1, r3, r2
 8009ae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ae2:	4319      	orrs	r1, r3
 8009ae4:	d110      	bne.n	8009b08 <_dtoa_r+0xa20>
 8009ae6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009aea:	d029      	beq.n	8009b40 <_dtoa_r+0xa58>
 8009aec:	9b08      	ldr	r3, [sp, #32]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	dd02      	ble.n	8009af8 <_dtoa_r+0xa10>
 8009af2:	9b02      	ldr	r3, [sp, #8]
 8009af4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009af8:	9b00      	ldr	r3, [sp, #0]
 8009afa:	f883 8000 	strb.w	r8, [r3]
 8009afe:	e63f      	b.n	8009780 <_dtoa_r+0x698>
 8009b00:	4628      	mov	r0, r5
 8009b02:	e7bb      	b.n	8009a7c <_dtoa_r+0x994>
 8009b04:	2201      	movs	r2, #1
 8009b06:	e7e1      	b.n	8009acc <_dtoa_r+0x9e4>
 8009b08:	9b08      	ldr	r3, [sp, #32]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	db04      	blt.n	8009b18 <_dtoa_r+0xa30>
 8009b0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b10:	430b      	orrs	r3, r1
 8009b12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b14:	430b      	orrs	r3, r1
 8009b16:	d120      	bne.n	8009b5a <_dtoa_r+0xa72>
 8009b18:	2a00      	cmp	r2, #0
 8009b1a:	dded      	ble.n	8009af8 <_dtoa_r+0xa10>
 8009b1c:	4649      	mov	r1, r9
 8009b1e:	2201      	movs	r2, #1
 8009b20:	4658      	mov	r0, fp
 8009b22:	f000 fbfd 	bl	800a320 <__lshift>
 8009b26:	4621      	mov	r1, r4
 8009b28:	4681      	mov	r9, r0
 8009b2a:	f000 fc65 	bl	800a3f8 <__mcmp>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	dc03      	bgt.n	8009b3a <_dtoa_r+0xa52>
 8009b32:	d1e1      	bne.n	8009af8 <_dtoa_r+0xa10>
 8009b34:	f018 0f01 	tst.w	r8, #1
 8009b38:	d0de      	beq.n	8009af8 <_dtoa_r+0xa10>
 8009b3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b3e:	d1d8      	bne.n	8009af2 <_dtoa_r+0xa0a>
 8009b40:	9a00      	ldr	r2, [sp, #0]
 8009b42:	2339      	movs	r3, #57	@ 0x39
 8009b44:	7013      	strb	r3, [r2, #0]
 8009b46:	4633      	mov	r3, r6
 8009b48:	461e      	mov	r6, r3
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009b50:	2a39      	cmp	r2, #57	@ 0x39
 8009b52:	d052      	beq.n	8009bfa <_dtoa_r+0xb12>
 8009b54:	3201      	adds	r2, #1
 8009b56:	701a      	strb	r2, [r3, #0]
 8009b58:	e612      	b.n	8009780 <_dtoa_r+0x698>
 8009b5a:	2a00      	cmp	r2, #0
 8009b5c:	dd07      	ble.n	8009b6e <_dtoa_r+0xa86>
 8009b5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b62:	d0ed      	beq.n	8009b40 <_dtoa_r+0xa58>
 8009b64:	9a00      	ldr	r2, [sp, #0]
 8009b66:	f108 0301 	add.w	r3, r8, #1
 8009b6a:	7013      	strb	r3, [r2, #0]
 8009b6c:	e608      	b.n	8009780 <_dtoa_r+0x698>
 8009b6e:	9b07      	ldr	r3, [sp, #28]
 8009b70:	9a07      	ldr	r2, [sp, #28]
 8009b72:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009b76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d028      	beq.n	8009bce <_dtoa_r+0xae6>
 8009b7c:	4649      	mov	r1, r9
 8009b7e:	2300      	movs	r3, #0
 8009b80:	220a      	movs	r2, #10
 8009b82:	4658      	mov	r0, fp
 8009b84:	f000 f9d6 	bl	8009f34 <__multadd>
 8009b88:	42af      	cmp	r7, r5
 8009b8a:	4681      	mov	r9, r0
 8009b8c:	f04f 0300 	mov.w	r3, #0
 8009b90:	f04f 020a 	mov.w	r2, #10
 8009b94:	4639      	mov	r1, r7
 8009b96:	4658      	mov	r0, fp
 8009b98:	d107      	bne.n	8009baa <_dtoa_r+0xac2>
 8009b9a:	f000 f9cb 	bl	8009f34 <__multadd>
 8009b9e:	4607      	mov	r7, r0
 8009ba0:	4605      	mov	r5, r0
 8009ba2:	9b07      	ldr	r3, [sp, #28]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	9307      	str	r3, [sp, #28]
 8009ba8:	e774      	b.n	8009a94 <_dtoa_r+0x9ac>
 8009baa:	f000 f9c3 	bl	8009f34 <__multadd>
 8009bae:	4629      	mov	r1, r5
 8009bb0:	4607      	mov	r7, r0
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	220a      	movs	r2, #10
 8009bb6:	4658      	mov	r0, fp
 8009bb8:	f000 f9bc 	bl	8009f34 <__multadd>
 8009bbc:	4605      	mov	r5, r0
 8009bbe:	e7f0      	b.n	8009ba2 <_dtoa_r+0xaba>
 8009bc0:	9b00      	ldr	r3, [sp, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	bfcc      	ite	gt
 8009bc6:	461e      	movgt	r6, r3
 8009bc8:	2601      	movle	r6, #1
 8009bca:	4456      	add	r6, sl
 8009bcc:	2700      	movs	r7, #0
 8009bce:	4649      	mov	r1, r9
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	4658      	mov	r0, fp
 8009bd4:	f000 fba4 	bl	800a320 <__lshift>
 8009bd8:	4621      	mov	r1, r4
 8009bda:	4681      	mov	r9, r0
 8009bdc:	f000 fc0c 	bl	800a3f8 <__mcmp>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	dcb0      	bgt.n	8009b46 <_dtoa_r+0xa5e>
 8009be4:	d102      	bne.n	8009bec <_dtoa_r+0xb04>
 8009be6:	f018 0f01 	tst.w	r8, #1
 8009bea:	d1ac      	bne.n	8009b46 <_dtoa_r+0xa5e>
 8009bec:	4633      	mov	r3, r6
 8009bee:	461e      	mov	r6, r3
 8009bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bf4:	2a30      	cmp	r2, #48	@ 0x30
 8009bf6:	d0fa      	beq.n	8009bee <_dtoa_r+0xb06>
 8009bf8:	e5c2      	b.n	8009780 <_dtoa_r+0x698>
 8009bfa:	459a      	cmp	sl, r3
 8009bfc:	d1a4      	bne.n	8009b48 <_dtoa_r+0xa60>
 8009bfe:	9b04      	ldr	r3, [sp, #16]
 8009c00:	3301      	adds	r3, #1
 8009c02:	9304      	str	r3, [sp, #16]
 8009c04:	2331      	movs	r3, #49	@ 0x31
 8009c06:	f88a 3000 	strb.w	r3, [sl]
 8009c0a:	e5b9      	b.n	8009780 <_dtoa_r+0x698>
 8009c0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009c6c <_dtoa_r+0xb84>
 8009c12:	b11b      	cbz	r3, 8009c1c <_dtoa_r+0xb34>
 8009c14:	f10a 0308 	add.w	r3, sl, #8
 8009c18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009c1a:	6013      	str	r3, [r2, #0]
 8009c1c:	4650      	mov	r0, sl
 8009c1e:	b019      	add	sp, #100	@ 0x64
 8009c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	f77f ae37 	ble.w	800989a <_dtoa_r+0x7b2>
 8009c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c30:	2001      	movs	r0, #1
 8009c32:	e655      	b.n	80098e0 <_dtoa_r+0x7f8>
 8009c34:	9b00      	ldr	r3, [sp, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f77f aed6 	ble.w	80099e8 <_dtoa_r+0x900>
 8009c3c:	4656      	mov	r6, sl
 8009c3e:	4621      	mov	r1, r4
 8009c40:	4648      	mov	r0, r9
 8009c42:	f7ff f9c9 	bl	8008fd8 <quorem>
 8009c46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009c4a:	f806 8b01 	strb.w	r8, [r6], #1
 8009c4e:	9b00      	ldr	r3, [sp, #0]
 8009c50:	eba6 020a 	sub.w	r2, r6, sl
 8009c54:	4293      	cmp	r3, r2
 8009c56:	ddb3      	ble.n	8009bc0 <_dtoa_r+0xad8>
 8009c58:	4649      	mov	r1, r9
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	220a      	movs	r2, #10
 8009c5e:	4658      	mov	r0, fp
 8009c60:	f000 f968 	bl	8009f34 <__multadd>
 8009c64:	4681      	mov	r9, r0
 8009c66:	e7ea      	b.n	8009c3e <_dtoa_r+0xb56>
 8009c68:	0800d040 	.word	0x0800d040
 8009c6c:	0800cfc4 	.word	0x0800cfc4

08009c70 <_free_r>:
 8009c70:	b538      	push	{r3, r4, r5, lr}
 8009c72:	4605      	mov	r5, r0
 8009c74:	2900      	cmp	r1, #0
 8009c76:	d041      	beq.n	8009cfc <_free_r+0x8c>
 8009c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c7c:	1f0c      	subs	r4, r1, #4
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	bfb8      	it	lt
 8009c82:	18e4      	addlt	r4, r4, r3
 8009c84:	f000 f8e8 	bl	8009e58 <__malloc_lock>
 8009c88:	4a1d      	ldr	r2, [pc, #116]	@ (8009d00 <_free_r+0x90>)
 8009c8a:	6813      	ldr	r3, [r2, #0]
 8009c8c:	b933      	cbnz	r3, 8009c9c <_free_r+0x2c>
 8009c8e:	6063      	str	r3, [r4, #4]
 8009c90:	6014      	str	r4, [r2, #0]
 8009c92:	4628      	mov	r0, r5
 8009c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c98:	f000 b8e4 	b.w	8009e64 <__malloc_unlock>
 8009c9c:	42a3      	cmp	r3, r4
 8009c9e:	d908      	bls.n	8009cb2 <_free_r+0x42>
 8009ca0:	6820      	ldr	r0, [r4, #0]
 8009ca2:	1821      	adds	r1, r4, r0
 8009ca4:	428b      	cmp	r3, r1
 8009ca6:	bf01      	itttt	eq
 8009ca8:	6819      	ldreq	r1, [r3, #0]
 8009caa:	685b      	ldreq	r3, [r3, #4]
 8009cac:	1809      	addeq	r1, r1, r0
 8009cae:	6021      	streq	r1, [r4, #0]
 8009cb0:	e7ed      	b.n	8009c8e <_free_r+0x1e>
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	b10b      	cbz	r3, 8009cbc <_free_r+0x4c>
 8009cb8:	42a3      	cmp	r3, r4
 8009cba:	d9fa      	bls.n	8009cb2 <_free_r+0x42>
 8009cbc:	6811      	ldr	r1, [r2, #0]
 8009cbe:	1850      	adds	r0, r2, r1
 8009cc0:	42a0      	cmp	r0, r4
 8009cc2:	d10b      	bne.n	8009cdc <_free_r+0x6c>
 8009cc4:	6820      	ldr	r0, [r4, #0]
 8009cc6:	4401      	add	r1, r0
 8009cc8:	1850      	adds	r0, r2, r1
 8009cca:	4283      	cmp	r3, r0
 8009ccc:	6011      	str	r1, [r2, #0]
 8009cce:	d1e0      	bne.n	8009c92 <_free_r+0x22>
 8009cd0:	6818      	ldr	r0, [r3, #0]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	6053      	str	r3, [r2, #4]
 8009cd6:	4408      	add	r0, r1
 8009cd8:	6010      	str	r0, [r2, #0]
 8009cda:	e7da      	b.n	8009c92 <_free_r+0x22>
 8009cdc:	d902      	bls.n	8009ce4 <_free_r+0x74>
 8009cde:	230c      	movs	r3, #12
 8009ce0:	602b      	str	r3, [r5, #0]
 8009ce2:	e7d6      	b.n	8009c92 <_free_r+0x22>
 8009ce4:	6820      	ldr	r0, [r4, #0]
 8009ce6:	1821      	adds	r1, r4, r0
 8009ce8:	428b      	cmp	r3, r1
 8009cea:	bf04      	itt	eq
 8009cec:	6819      	ldreq	r1, [r3, #0]
 8009cee:	685b      	ldreq	r3, [r3, #4]
 8009cf0:	6063      	str	r3, [r4, #4]
 8009cf2:	bf04      	itt	eq
 8009cf4:	1809      	addeq	r1, r1, r0
 8009cf6:	6021      	streq	r1, [r4, #0]
 8009cf8:	6054      	str	r4, [r2, #4]
 8009cfa:	e7ca      	b.n	8009c92 <_free_r+0x22>
 8009cfc:	bd38      	pop	{r3, r4, r5, pc}
 8009cfe:	bf00      	nop
 8009d00:	200011dc 	.word	0x200011dc

08009d04 <malloc>:
 8009d04:	4b02      	ldr	r3, [pc, #8]	@ (8009d10 <malloc+0xc>)
 8009d06:	4601      	mov	r1, r0
 8009d08:	6818      	ldr	r0, [r3, #0]
 8009d0a:	f000 b825 	b.w	8009d58 <_malloc_r>
 8009d0e:	bf00      	nop
 8009d10:	2000002c 	.word	0x2000002c

08009d14 <sbrk_aligned>:
 8009d14:	b570      	push	{r4, r5, r6, lr}
 8009d16:	4e0f      	ldr	r6, [pc, #60]	@ (8009d54 <sbrk_aligned+0x40>)
 8009d18:	460c      	mov	r4, r1
 8009d1a:	6831      	ldr	r1, [r6, #0]
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	b911      	cbnz	r1, 8009d26 <sbrk_aligned+0x12>
 8009d20:	f002 fa26 	bl	800c170 <_sbrk_r>
 8009d24:	6030      	str	r0, [r6, #0]
 8009d26:	4621      	mov	r1, r4
 8009d28:	4628      	mov	r0, r5
 8009d2a:	f002 fa21 	bl	800c170 <_sbrk_r>
 8009d2e:	1c43      	adds	r3, r0, #1
 8009d30:	d103      	bne.n	8009d3a <sbrk_aligned+0x26>
 8009d32:	f04f 34ff 	mov.w	r4, #4294967295
 8009d36:	4620      	mov	r0, r4
 8009d38:	bd70      	pop	{r4, r5, r6, pc}
 8009d3a:	1cc4      	adds	r4, r0, #3
 8009d3c:	f024 0403 	bic.w	r4, r4, #3
 8009d40:	42a0      	cmp	r0, r4
 8009d42:	d0f8      	beq.n	8009d36 <sbrk_aligned+0x22>
 8009d44:	1a21      	subs	r1, r4, r0
 8009d46:	4628      	mov	r0, r5
 8009d48:	f002 fa12 	bl	800c170 <_sbrk_r>
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	d1f2      	bne.n	8009d36 <sbrk_aligned+0x22>
 8009d50:	e7ef      	b.n	8009d32 <sbrk_aligned+0x1e>
 8009d52:	bf00      	nop
 8009d54:	200011d8 	.word	0x200011d8

08009d58 <_malloc_r>:
 8009d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d5c:	1ccd      	adds	r5, r1, #3
 8009d5e:	f025 0503 	bic.w	r5, r5, #3
 8009d62:	3508      	adds	r5, #8
 8009d64:	2d0c      	cmp	r5, #12
 8009d66:	bf38      	it	cc
 8009d68:	250c      	movcc	r5, #12
 8009d6a:	2d00      	cmp	r5, #0
 8009d6c:	4606      	mov	r6, r0
 8009d6e:	db01      	blt.n	8009d74 <_malloc_r+0x1c>
 8009d70:	42a9      	cmp	r1, r5
 8009d72:	d904      	bls.n	8009d7e <_malloc_r+0x26>
 8009d74:	230c      	movs	r3, #12
 8009d76:	6033      	str	r3, [r6, #0]
 8009d78:	2000      	movs	r0, #0
 8009d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e54 <_malloc_r+0xfc>
 8009d82:	f000 f869 	bl	8009e58 <__malloc_lock>
 8009d86:	f8d8 3000 	ldr.w	r3, [r8]
 8009d8a:	461c      	mov	r4, r3
 8009d8c:	bb44      	cbnz	r4, 8009de0 <_malloc_r+0x88>
 8009d8e:	4629      	mov	r1, r5
 8009d90:	4630      	mov	r0, r6
 8009d92:	f7ff ffbf 	bl	8009d14 <sbrk_aligned>
 8009d96:	1c43      	adds	r3, r0, #1
 8009d98:	4604      	mov	r4, r0
 8009d9a:	d158      	bne.n	8009e4e <_malloc_r+0xf6>
 8009d9c:	f8d8 4000 	ldr.w	r4, [r8]
 8009da0:	4627      	mov	r7, r4
 8009da2:	2f00      	cmp	r7, #0
 8009da4:	d143      	bne.n	8009e2e <_malloc_r+0xd6>
 8009da6:	2c00      	cmp	r4, #0
 8009da8:	d04b      	beq.n	8009e42 <_malloc_r+0xea>
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	4639      	mov	r1, r7
 8009dae:	4630      	mov	r0, r6
 8009db0:	eb04 0903 	add.w	r9, r4, r3
 8009db4:	f002 f9dc 	bl	800c170 <_sbrk_r>
 8009db8:	4581      	cmp	r9, r0
 8009dba:	d142      	bne.n	8009e42 <_malloc_r+0xea>
 8009dbc:	6821      	ldr	r1, [r4, #0]
 8009dbe:	1a6d      	subs	r5, r5, r1
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f7ff ffa6 	bl	8009d14 <sbrk_aligned>
 8009dc8:	3001      	adds	r0, #1
 8009dca:	d03a      	beq.n	8009e42 <_malloc_r+0xea>
 8009dcc:	6823      	ldr	r3, [r4, #0]
 8009dce:	442b      	add	r3, r5
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8009dd6:	685a      	ldr	r2, [r3, #4]
 8009dd8:	bb62      	cbnz	r2, 8009e34 <_malloc_r+0xdc>
 8009dda:	f8c8 7000 	str.w	r7, [r8]
 8009dde:	e00f      	b.n	8009e00 <_malloc_r+0xa8>
 8009de0:	6822      	ldr	r2, [r4, #0]
 8009de2:	1b52      	subs	r2, r2, r5
 8009de4:	d420      	bmi.n	8009e28 <_malloc_r+0xd0>
 8009de6:	2a0b      	cmp	r2, #11
 8009de8:	d917      	bls.n	8009e1a <_malloc_r+0xc2>
 8009dea:	1961      	adds	r1, r4, r5
 8009dec:	42a3      	cmp	r3, r4
 8009dee:	6025      	str	r5, [r4, #0]
 8009df0:	bf18      	it	ne
 8009df2:	6059      	strne	r1, [r3, #4]
 8009df4:	6863      	ldr	r3, [r4, #4]
 8009df6:	bf08      	it	eq
 8009df8:	f8c8 1000 	streq.w	r1, [r8]
 8009dfc:	5162      	str	r2, [r4, r5]
 8009dfe:	604b      	str	r3, [r1, #4]
 8009e00:	4630      	mov	r0, r6
 8009e02:	f000 f82f 	bl	8009e64 <__malloc_unlock>
 8009e06:	f104 000b 	add.w	r0, r4, #11
 8009e0a:	1d23      	adds	r3, r4, #4
 8009e0c:	f020 0007 	bic.w	r0, r0, #7
 8009e10:	1ac2      	subs	r2, r0, r3
 8009e12:	bf1c      	itt	ne
 8009e14:	1a1b      	subne	r3, r3, r0
 8009e16:	50a3      	strne	r3, [r4, r2]
 8009e18:	e7af      	b.n	8009d7a <_malloc_r+0x22>
 8009e1a:	6862      	ldr	r2, [r4, #4]
 8009e1c:	42a3      	cmp	r3, r4
 8009e1e:	bf0c      	ite	eq
 8009e20:	f8c8 2000 	streq.w	r2, [r8]
 8009e24:	605a      	strne	r2, [r3, #4]
 8009e26:	e7eb      	b.n	8009e00 <_malloc_r+0xa8>
 8009e28:	4623      	mov	r3, r4
 8009e2a:	6864      	ldr	r4, [r4, #4]
 8009e2c:	e7ae      	b.n	8009d8c <_malloc_r+0x34>
 8009e2e:	463c      	mov	r4, r7
 8009e30:	687f      	ldr	r7, [r7, #4]
 8009e32:	e7b6      	b.n	8009da2 <_malloc_r+0x4a>
 8009e34:	461a      	mov	r2, r3
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	42a3      	cmp	r3, r4
 8009e3a:	d1fb      	bne.n	8009e34 <_malloc_r+0xdc>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	6053      	str	r3, [r2, #4]
 8009e40:	e7de      	b.n	8009e00 <_malloc_r+0xa8>
 8009e42:	230c      	movs	r3, #12
 8009e44:	6033      	str	r3, [r6, #0]
 8009e46:	4630      	mov	r0, r6
 8009e48:	f000 f80c 	bl	8009e64 <__malloc_unlock>
 8009e4c:	e794      	b.n	8009d78 <_malloc_r+0x20>
 8009e4e:	6005      	str	r5, [r0, #0]
 8009e50:	e7d6      	b.n	8009e00 <_malloc_r+0xa8>
 8009e52:	bf00      	nop
 8009e54:	200011dc 	.word	0x200011dc

08009e58 <__malloc_lock>:
 8009e58:	4801      	ldr	r0, [pc, #4]	@ (8009e60 <__malloc_lock+0x8>)
 8009e5a:	f7ff b8a6 	b.w	8008faa <__retarget_lock_acquire_recursive>
 8009e5e:	bf00      	nop
 8009e60:	200011d4 	.word	0x200011d4

08009e64 <__malloc_unlock>:
 8009e64:	4801      	ldr	r0, [pc, #4]	@ (8009e6c <__malloc_unlock+0x8>)
 8009e66:	f7ff b8a1 	b.w	8008fac <__retarget_lock_release_recursive>
 8009e6a:	bf00      	nop
 8009e6c:	200011d4 	.word	0x200011d4

08009e70 <_Balloc>:
 8009e70:	b570      	push	{r4, r5, r6, lr}
 8009e72:	69c6      	ldr	r6, [r0, #28]
 8009e74:	4604      	mov	r4, r0
 8009e76:	460d      	mov	r5, r1
 8009e78:	b976      	cbnz	r6, 8009e98 <_Balloc+0x28>
 8009e7a:	2010      	movs	r0, #16
 8009e7c:	f7ff ff42 	bl	8009d04 <malloc>
 8009e80:	4602      	mov	r2, r0
 8009e82:	61e0      	str	r0, [r4, #28]
 8009e84:	b920      	cbnz	r0, 8009e90 <_Balloc+0x20>
 8009e86:	4b18      	ldr	r3, [pc, #96]	@ (8009ee8 <_Balloc+0x78>)
 8009e88:	4818      	ldr	r0, [pc, #96]	@ (8009eec <_Balloc+0x7c>)
 8009e8a:	216b      	movs	r1, #107	@ 0x6b
 8009e8c:	f002 f988 	bl	800c1a0 <__assert_func>
 8009e90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e94:	6006      	str	r6, [r0, #0]
 8009e96:	60c6      	str	r6, [r0, #12]
 8009e98:	69e6      	ldr	r6, [r4, #28]
 8009e9a:	68f3      	ldr	r3, [r6, #12]
 8009e9c:	b183      	cbz	r3, 8009ec0 <_Balloc+0x50>
 8009e9e:	69e3      	ldr	r3, [r4, #28]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ea6:	b9b8      	cbnz	r0, 8009ed8 <_Balloc+0x68>
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	fa01 f605 	lsl.w	r6, r1, r5
 8009eae:	1d72      	adds	r2, r6, #5
 8009eb0:	0092      	lsls	r2, r2, #2
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f002 f992 	bl	800c1dc <_calloc_r>
 8009eb8:	b160      	cbz	r0, 8009ed4 <_Balloc+0x64>
 8009eba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ebe:	e00e      	b.n	8009ede <_Balloc+0x6e>
 8009ec0:	2221      	movs	r2, #33	@ 0x21
 8009ec2:	2104      	movs	r1, #4
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f002 f989 	bl	800c1dc <_calloc_r>
 8009eca:	69e3      	ldr	r3, [r4, #28]
 8009ecc:	60f0      	str	r0, [r6, #12]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1e4      	bne.n	8009e9e <_Balloc+0x2e>
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	bd70      	pop	{r4, r5, r6, pc}
 8009ed8:	6802      	ldr	r2, [r0, #0]
 8009eda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ede:	2300      	movs	r3, #0
 8009ee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ee4:	e7f7      	b.n	8009ed6 <_Balloc+0x66>
 8009ee6:	bf00      	nop
 8009ee8:	0800cfd1 	.word	0x0800cfd1
 8009eec:	0800d051 	.word	0x0800d051

08009ef0 <_Bfree>:
 8009ef0:	b570      	push	{r4, r5, r6, lr}
 8009ef2:	69c6      	ldr	r6, [r0, #28]
 8009ef4:	4605      	mov	r5, r0
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	b976      	cbnz	r6, 8009f18 <_Bfree+0x28>
 8009efa:	2010      	movs	r0, #16
 8009efc:	f7ff ff02 	bl	8009d04 <malloc>
 8009f00:	4602      	mov	r2, r0
 8009f02:	61e8      	str	r0, [r5, #28]
 8009f04:	b920      	cbnz	r0, 8009f10 <_Bfree+0x20>
 8009f06:	4b09      	ldr	r3, [pc, #36]	@ (8009f2c <_Bfree+0x3c>)
 8009f08:	4809      	ldr	r0, [pc, #36]	@ (8009f30 <_Bfree+0x40>)
 8009f0a:	218f      	movs	r1, #143	@ 0x8f
 8009f0c:	f002 f948 	bl	800c1a0 <__assert_func>
 8009f10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f14:	6006      	str	r6, [r0, #0]
 8009f16:	60c6      	str	r6, [r0, #12]
 8009f18:	b13c      	cbz	r4, 8009f2a <_Bfree+0x3a>
 8009f1a:	69eb      	ldr	r3, [r5, #28]
 8009f1c:	6862      	ldr	r2, [r4, #4]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f24:	6021      	str	r1, [r4, #0]
 8009f26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f2a:	bd70      	pop	{r4, r5, r6, pc}
 8009f2c:	0800cfd1 	.word	0x0800cfd1
 8009f30:	0800d051 	.word	0x0800d051

08009f34 <__multadd>:
 8009f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f38:	690d      	ldr	r5, [r1, #16]
 8009f3a:	4607      	mov	r7, r0
 8009f3c:	460c      	mov	r4, r1
 8009f3e:	461e      	mov	r6, r3
 8009f40:	f101 0c14 	add.w	ip, r1, #20
 8009f44:	2000      	movs	r0, #0
 8009f46:	f8dc 3000 	ldr.w	r3, [ip]
 8009f4a:	b299      	uxth	r1, r3
 8009f4c:	fb02 6101 	mla	r1, r2, r1, r6
 8009f50:	0c1e      	lsrs	r6, r3, #16
 8009f52:	0c0b      	lsrs	r3, r1, #16
 8009f54:	fb02 3306 	mla	r3, r2, r6, r3
 8009f58:	b289      	uxth	r1, r1
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f60:	4285      	cmp	r5, r0
 8009f62:	f84c 1b04 	str.w	r1, [ip], #4
 8009f66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f6a:	dcec      	bgt.n	8009f46 <__multadd+0x12>
 8009f6c:	b30e      	cbz	r6, 8009fb2 <__multadd+0x7e>
 8009f6e:	68a3      	ldr	r3, [r4, #8]
 8009f70:	42ab      	cmp	r3, r5
 8009f72:	dc19      	bgt.n	8009fa8 <__multadd+0x74>
 8009f74:	6861      	ldr	r1, [r4, #4]
 8009f76:	4638      	mov	r0, r7
 8009f78:	3101      	adds	r1, #1
 8009f7a:	f7ff ff79 	bl	8009e70 <_Balloc>
 8009f7e:	4680      	mov	r8, r0
 8009f80:	b928      	cbnz	r0, 8009f8e <__multadd+0x5a>
 8009f82:	4602      	mov	r2, r0
 8009f84:	4b0c      	ldr	r3, [pc, #48]	@ (8009fb8 <__multadd+0x84>)
 8009f86:	480d      	ldr	r0, [pc, #52]	@ (8009fbc <__multadd+0x88>)
 8009f88:	21ba      	movs	r1, #186	@ 0xba
 8009f8a:	f002 f909 	bl	800c1a0 <__assert_func>
 8009f8e:	6922      	ldr	r2, [r4, #16]
 8009f90:	3202      	adds	r2, #2
 8009f92:	f104 010c 	add.w	r1, r4, #12
 8009f96:	0092      	lsls	r2, r2, #2
 8009f98:	300c      	adds	r0, #12
 8009f9a:	f7ff f808 	bl	8008fae <memcpy>
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	f7ff ffa5 	bl	8009ef0 <_Bfree>
 8009fa6:	4644      	mov	r4, r8
 8009fa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fac:	3501      	adds	r5, #1
 8009fae:	615e      	str	r6, [r3, #20]
 8009fb0:	6125      	str	r5, [r4, #16]
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb8:	0800d040 	.word	0x0800d040
 8009fbc:	0800d051 	.word	0x0800d051

08009fc0 <__s2b>:
 8009fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	4615      	mov	r5, r2
 8009fc8:	461f      	mov	r7, r3
 8009fca:	2209      	movs	r2, #9
 8009fcc:	3308      	adds	r3, #8
 8009fce:	4606      	mov	r6, r0
 8009fd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	db09      	blt.n	8009ff0 <__s2b+0x30>
 8009fdc:	4630      	mov	r0, r6
 8009fde:	f7ff ff47 	bl	8009e70 <_Balloc>
 8009fe2:	b940      	cbnz	r0, 8009ff6 <__s2b+0x36>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	4b19      	ldr	r3, [pc, #100]	@ (800a04c <__s2b+0x8c>)
 8009fe8:	4819      	ldr	r0, [pc, #100]	@ (800a050 <__s2b+0x90>)
 8009fea:	21d3      	movs	r1, #211	@ 0xd3
 8009fec:	f002 f8d8 	bl	800c1a0 <__assert_func>
 8009ff0:	0052      	lsls	r2, r2, #1
 8009ff2:	3101      	adds	r1, #1
 8009ff4:	e7f0      	b.n	8009fd8 <__s2b+0x18>
 8009ff6:	9b08      	ldr	r3, [sp, #32]
 8009ff8:	6143      	str	r3, [r0, #20]
 8009ffa:	2d09      	cmp	r5, #9
 8009ffc:	f04f 0301 	mov.w	r3, #1
 800a000:	6103      	str	r3, [r0, #16]
 800a002:	dd16      	ble.n	800a032 <__s2b+0x72>
 800a004:	f104 0909 	add.w	r9, r4, #9
 800a008:	46c8      	mov	r8, r9
 800a00a:	442c      	add	r4, r5
 800a00c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a010:	4601      	mov	r1, r0
 800a012:	3b30      	subs	r3, #48	@ 0x30
 800a014:	220a      	movs	r2, #10
 800a016:	4630      	mov	r0, r6
 800a018:	f7ff ff8c 	bl	8009f34 <__multadd>
 800a01c:	45a0      	cmp	r8, r4
 800a01e:	d1f5      	bne.n	800a00c <__s2b+0x4c>
 800a020:	f1a5 0408 	sub.w	r4, r5, #8
 800a024:	444c      	add	r4, r9
 800a026:	1b2d      	subs	r5, r5, r4
 800a028:	1963      	adds	r3, r4, r5
 800a02a:	42bb      	cmp	r3, r7
 800a02c:	db04      	blt.n	800a038 <__s2b+0x78>
 800a02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a032:	340a      	adds	r4, #10
 800a034:	2509      	movs	r5, #9
 800a036:	e7f6      	b.n	800a026 <__s2b+0x66>
 800a038:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a03c:	4601      	mov	r1, r0
 800a03e:	3b30      	subs	r3, #48	@ 0x30
 800a040:	220a      	movs	r2, #10
 800a042:	4630      	mov	r0, r6
 800a044:	f7ff ff76 	bl	8009f34 <__multadd>
 800a048:	e7ee      	b.n	800a028 <__s2b+0x68>
 800a04a:	bf00      	nop
 800a04c:	0800d040 	.word	0x0800d040
 800a050:	0800d051 	.word	0x0800d051

0800a054 <__hi0bits>:
 800a054:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a058:	4603      	mov	r3, r0
 800a05a:	bf36      	itet	cc
 800a05c:	0403      	lslcc	r3, r0, #16
 800a05e:	2000      	movcs	r0, #0
 800a060:	2010      	movcc	r0, #16
 800a062:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a066:	bf3c      	itt	cc
 800a068:	021b      	lslcc	r3, r3, #8
 800a06a:	3008      	addcc	r0, #8
 800a06c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a070:	bf3c      	itt	cc
 800a072:	011b      	lslcc	r3, r3, #4
 800a074:	3004      	addcc	r0, #4
 800a076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a07a:	bf3c      	itt	cc
 800a07c:	009b      	lslcc	r3, r3, #2
 800a07e:	3002      	addcc	r0, #2
 800a080:	2b00      	cmp	r3, #0
 800a082:	db05      	blt.n	800a090 <__hi0bits+0x3c>
 800a084:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a088:	f100 0001 	add.w	r0, r0, #1
 800a08c:	bf08      	it	eq
 800a08e:	2020      	moveq	r0, #32
 800a090:	4770      	bx	lr

0800a092 <__lo0bits>:
 800a092:	6803      	ldr	r3, [r0, #0]
 800a094:	4602      	mov	r2, r0
 800a096:	f013 0007 	ands.w	r0, r3, #7
 800a09a:	d00b      	beq.n	800a0b4 <__lo0bits+0x22>
 800a09c:	07d9      	lsls	r1, r3, #31
 800a09e:	d421      	bmi.n	800a0e4 <__lo0bits+0x52>
 800a0a0:	0798      	lsls	r0, r3, #30
 800a0a2:	bf49      	itett	mi
 800a0a4:	085b      	lsrmi	r3, r3, #1
 800a0a6:	089b      	lsrpl	r3, r3, #2
 800a0a8:	2001      	movmi	r0, #1
 800a0aa:	6013      	strmi	r3, [r2, #0]
 800a0ac:	bf5c      	itt	pl
 800a0ae:	6013      	strpl	r3, [r2, #0]
 800a0b0:	2002      	movpl	r0, #2
 800a0b2:	4770      	bx	lr
 800a0b4:	b299      	uxth	r1, r3
 800a0b6:	b909      	cbnz	r1, 800a0bc <__lo0bits+0x2a>
 800a0b8:	0c1b      	lsrs	r3, r3, #16
 800a0ba:	2010      	movs	r0, #16
 800a0bc:	b2d9      	uxtb	r1, r3
 800a0be:	b909      	cbnz	r1, 800a0c4 <__lo0bits+0x32>
 800a0c0:	3008      	adds	r0, #8
 800a0c2:	0a1b      	lsrs	r3, r3, #8
 800a0c4:	0719      	lsls	r1, r3, #28
 800a0c6:	bf04      	itt	eq
 800a0c8:	091b      	lsreq	r3, r3, #4
 800a0ca:	3004      	addeq	r0, #4
 800a0cc:	0799      	lsls	r1, r3, #30
 800a0ce:	bf04      	itt	eq
 800a0d0:	089b      	lsreq	r3, r3, #2
 800a0d2:	3002      	addeq	r0, #2
 800a0d4:	07d9      	lsls	r1, r3, #31
 800a0d6:	d403      	bmi.n	800a0e0 <__lo0bits+0x4e>
 800a0d8:	085b      	lsrs	r3, r3, #1
 800a0da:	f100 0001 	add.w	r0, r0, #1
 800a0de:	d003      	beq.n	800a0e8 <__lo0bits+0x56>
 800a0e0:	6013      	str	r3, [r2, #0]
 800a0e2:	4770      	bx	lr
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	4770      	bx	lr
 800a0e8:	2020      	movs	r0, #32
 800a0ea:	4770      	bx	lr

0800a0ec <__i2b>:
 800a0ec:	b510      	push	{r4, lr}
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	f7ff febd 	bl	8009e70 <_Balloc>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	b928      	cbnz	r0, 800a106 <__i2b+0x1a>
 800a0fa:	4b05      	ldr	r3, [pc, #20]	@ (800a110 <__i2b+0x24>)
 800a0fc:	4805      	ldr	r0, [pc, #20]	@ (800a114 <__i2b+0x28>)
 800a0fe:	f240 1145 	movw	r1, #325	@ 0x145
 800a102:	f002 f84d 	bl	800c1a0 <__assert_func>
 800a106:	2301      	movs	r3, #1
 800a108:	6144      	str	r4, [r0, #20]
 800a10a:	6103      	str	r3, [r0, #16]
 800a10c:	bd10      	pop	{r4, pc}
 800a10e:	bf00      	nop
 800a110:	0800d040 	.word	0x0800d040
 800a114:	0800d051 	.word	0x0800d051

0800a118 <__multiply>:
 800a118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11c:	4614      	mov	r4, r2
 800a11e:	690a      	ldr	r2, [r1, #16]
 800a120:	6923      	ldr	r3, [r4, #16]
 800a122:	429a      	cmp	r2, r3
 800a124:	bfa8      	it	ge
 800a126:	4623      	movge	r3, r4
 800a128:	460f      	mov	r7, r1
 800a12a:	bfa4      	itt	ge
 800a12c:	460c      	movge	r4, r1
 800a12e:	461f      	movge	r7, r3
 800a130:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a134:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a138:	68a3      	ldr	r3, [r4, #8]
 800a13a:	6861      	ldr	r1, [r4, #4]
 800a13c:	eb0a 0609 	add.w	r6, sl, r9
 800a140:	42b3      	cmp	r3, r6
 800a142:	b085      	sub	sp, #20
 800a144:	bfb8      	it	lt
 800a146:	3101      	addlt	r1, #1
 800a148:	f7ff fe92 	bl	8009e70 <_Balloc>
 800a14c:	b930      	cbnz	r0, 800a15c <__multiply+0x44>
 800a14e:	4602      	mov	r2, r0
 800a150:	4b44      	ldr	r3, [pc, #272]	@ (800a264 <__multiply+0x14c>)
 800a152:	4845      	ldr	r0, [pc, #276]	@ (800a268 <__multiply+0x150>)
 800a154:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a158:	f002 f822 	bl	800c1a0 <__assert_func>
 800a15c:	f100 0514 	add.w	r5, r0, #20
 800a160:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a164:	462b      	mov	r3, r5
 800a166:	2200      	movs	r2, #0
 800a168:	4543      	cmp	r3, r8
 800a16a:	d321      	bcc.n	800a1b0 <__multiply+0x98>
 800a16c:	f107 0114 	add.w	r1, r7, #20
 800a170:	f104 0214 	add.w	r2, r4, #20
 800a174:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a178:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a17c:	9302      	str	r3, [sp, #8]
 800a17e:	1b13      	subs	r3, r2, r4
 800a180:	3b15      	subs	r3, #21
 800a182:	f023 0303 	bic.w	r3, r3, #3
 800a186:	3304      	adds	r3, #4
 800a188:	f104 0715 	add.w	r7, r4, #21
 800a18c:	42ba      	cmp	r2, r7
 800a18e:	bf38      	it	cc
 800a190:	2304      	movcc	r3, #4
 800a192:	9301      	str	r3, [sp, #4]
 800a194:	9b02      	ldr	r3, [sp, #8]
 800a196:	9103      	str	r1, [sp, #12]
 800a198:	428b      	cmp	r3, r1
 800a19a:	d80c      	bhi.n	800a1b6 <__multiply+0x9e>
 800a19c:	2e00      	cmp	r6, #0
 800a19e:	dd03      	ble.n	800a1a8 <__multiply+0x90>
 800a1a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d05b      	beq.n	800a260 <__multiply+0x148>
 800a1a8:	6106      	str	r6, [r0, #16]
 800a1aa:	b005      	add	sp, #20
 800a1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b0:	f843 2b04 	str.w	r2, [r3], #4
 800a1b4:	e7d8      	b.n	800a168 <__multiply+0x50>
 800a1b6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a1ba:	f1ba 0f00 	cmp.w	sl, #0
 800a1be:	d024      	beq.n	800a20a <__multiply+0xf2>
 800a1c0:	f104 0e14 	add.w	lr, r4, #20
 800a1c4:	46a9      	mov	r9, r5
 800a1c6:	f04f 0c00 	mov.w	ip, #0
 800a1ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a1ce:	f8d9 3000 	ldr.w	r3, [r9]
 800a1d2:	fa1f fb87 	uxth.w	fp, r7
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800a1dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a1e0:	f8d9 7000 	ldr.w	r7, [r9]
 800a1e4:	4463      	add	r3, ip
 800a1e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a1ea:	fb0a c70b 	mla	r7, sl, fp, ip
 800a1ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a1f8:	4572      	cmp	r2, lr
 800a1fa:	f849 3b04 	str.w	r3, [r9], #4
 800a1fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a202:	d8e2      	bhi.n	800a1ca <__multiply+0xb2>
 800a204:	9b01      	ldr	r3, [sp, #4]
 800a206:	f845 c003 	str.w	ip, [r5, r3]
 800a20a:	9b03      	ldr	r3, [sp, #12]
 800a20c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a210:	3104      	adds	r1, #4
 800a212:	f1b9 0f00 	cmp.w	r9, #0
 800a216:	d021      	beq.n	800a25c <__multiply+0x144>
 800a218:	682b      	ldr	r3, [r5, #0]
 800a21a:	f104 0c14 	add.w	ip, r4, #20
 800a21e:	46ae      	mov	lr, r5
 800a220:	f04f 0a00 	mov.w	sl, #0
 800a224:	f8bc b000 	ldrh.w	fp, [ip]
 800a228:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a22c:	fb09 770b 	mla	r7, r9, fp, r7
 800a230:	4457      	add	r7, sl
 800a232:	b29b      	uxth	r3, r3
 800a234:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a238:	f84e 3b04 	str.w	r3, [lr], #4
 800a23c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a240:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a244:	f8be 3000 	ldrh.w	r3, [lr]
 800a248:	fb09 330a 	mla	r3, r9, sl, r3
 800a24c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a250:	4562      	cmp	r2, ip
 800a252:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a256:	d8e5      	bhi.n	800a224 <__multiply+0x10c>
 800a258:	9f01      	ldr	r7, [sp, #4]
 800a25a:	51eb      	str	r3, [r5, r7]
 800a25c:	3504      	adds	r5, #4
 800a25e:	e799      	b.n	800a194 <__multiply+0x7c>
 800a260:	3e01      	subs	r6, #1
 800a262:	e79b      	b.n	800a19c <__multiply+0x84>
 800a264:	0800d040 	.word	0x0800d040
 800a268:	0800d051 	.word	0x0800d051

0800a26c <__pow5mult>:
 800a26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a270:	4615      	mov	r5, r2
 800a272:	f012 0203 	ands.w	r2, r2, #3
 800a276:	4607      	mov	r7, r0
 800a278:	460e      	mov	r6, r1
 800a27a:	d007      	beq.n	800a28c <__pow5mult+0x20>
 800a27c:	4c25      	ldr	r4, [pc, #148]	@ (800a314 <__pow5mult+0xa8>)
 800a27e:	3a01      	subs	r2, #1
 800a280:	2300      	movs	r3, #0
 800a282:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a286:	f7ff fe55 	bl	8009f34 <__multadd>
 800a28a:	4606      	mov	r6, r0
 800a28c:	10ad      	asrs	r5, r5, #2
 800a28e:	d03d      	beq.n	800a30c <__pow5mult+0xa0>
 800a290:	69fc      	ldr	r4, [r7, #28]
 800a292:	b97c      	cbnz	r4, 800a2b4 <__pow5mult+0x48>
 800a294:	2010      	movs	r0, #16
 800a296:	f7ff fd35 	bl	8009d04 <malloc>
 800a29a:	4602      	mov	r2, r0
 800a29c:	61f8      	str	r0, [r7, #28]
 800a29e:	b928      	cbnz	r0, 800a2ac <__pow5mult+0x40>
 800a2a0:	4b1d      	ldr	r3, [pc, #116]	@ (800a318 <__pow5mult+0xac>)
 800a2a2:	481e      	ldr	r0, [pc, #120]	@ (800a31c <__pow5mult+0xb0>)
 800a2a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a2a8:	f001 ff7a 	bl	800c1a0 <__assert_func>
 800a2ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2b0:	6004      	str	r4, [r0, #0]
 800a2b2:	60c4      	str	r4, [r0, #12]
 800a2b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a2b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2bc:	b94c      	cbnz	r4, 800a2d2 <__pow5mult+0x66>
 800a2be:	f240 2171 	movw	r1, #625	@ 0x271
 800a2c2:	4638      	mov	r0, r7
 800a2c4:	f7ff ff12 	bl	800a0ec <__i2b>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	6003      	str	r3, [r0, #0]
 800a2d2:	f04f 0900 	mov.w	r9, #0
 800a2d6:	07eb      	lsls	r3, r5, #31
 800a2d8:	d50a      	bpl.n	800a2f0 <__pow5mult+0x84>
 800a2da:	4631      	mov	r1, r6
 800a2dc:	4622      	mov	r2, r4
 800a2de:	4638      	mov	r0, r7
 800a2e0:	f7ff ff1a 	bl	800a118 <__multiply>
 800a2e4:	4631      	mov	r1, r6
 800a2e6:	4680      	mov	r8, r0
 800a2e8:	4638      	mov	r0, r7
 800a2ea:	f7ff fe01 	bl	8009ef0 <_Bfree>
 800a2ee:	4646      	mov	r6, r8
 800a2f0:	106d      	asrs	r5, r5, #1
 800a2f2:	d00b      	beq.n	800a30c <__pow5mult+0xa0>
 800a2f4:	6820      	ldr	r0, [r4, #0]
 800a2f6:	b938      	cbnz	r0, 800a308 <__pow5mult+0x9c>
 800a2f8:	4622      	mov	r2, r4
 800a2fa:	4621      	mov	r1, r4
 800a2fc:	4638      	mov	r0, r7
 800a2fe:	f7ff ff0b 	bl	800a118 <__multiply>
 800a302:	6020      	str	r0, [r4, #0]
 800a304:	f8c0 9000 	str.w	r9, [r0]
 800a308:	4604      	mov	r4, r0
 800a30a:	e7e4      	b.n	800a2d6 <__pow5mult+0x6a>
 800a30c:	4630      	mov	r0, r6
 800a30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a312:	bf00      	nop
 800a314:	0800d0ac 	.word	0x0800d0ac
 800a318:	0800cfd1 	.word	0x0800cfd1
 800a31c:	0800d051 	.word	0x0800d051

0800a320 <__lshift>:
 800a320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a324:	460c      	mov	r4, r1
 800a326:	6849      	ldr	r1, [r1, #4]
 800a328:	6923      	ldr	r3, [r4, #16]
 800a32a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a32e:	68a3      	ldr	r3, [r4, #8]
 800a330:	4607      	mov	r7, r0
 800a332:	4691      	mov	r9, r2
 800a334:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a338:	f108 0601 	add.w	r6, r8, #1
 800a33c:	42b3      	cmp	r3, r6
 800a33e:	db0b      	blt.n	800a358 <__lshift+0x38>
 800a340:	4638      	mov	r0, r7
 800a342:	f7ff fd95 	bl	8009e70 <_Balloc>
 800a346:	4605      	mov	r5, r0
 800a348:	b948      	cbnz	r0, 800a35e <__lshift+0x3e>
 800a34a:	4602      	mov	r2, r0
 800a34c:	4b28      	ldr	r3, [pc, #160]	@ (800a3f0 <__lshift+0xd0>)
 800a34e:	4829      	ldr	r0, [pc, #164]	@ (800a3f4 <__lshift+0xd4>)
 800a350:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a354:	f001 ff24 	bl	800c1a0 <__assert_func>
 800a358:	3101      	adds	r1, #1
 800a35a:	005b      	lsls	r3, r3, #1
 800a35c:	e7ee      	b.n	800a33c <__lshift+0x1c>
 800a35e:	2300      	movs	r3, #0
 800a360:	f100 0114 	add.w	r1, r0, #20
 800a364:	f100 0210 	add.w	r2, r0, #16
 800a368:	4618      	mov	r0, r3
 800a36a:	4553      	cmp	r3, sl
 800a36c:	db33      	blt.n	800a3d6 <__lshift+0xb6>
 800a36e:	6920      	ldr	r0, [r4, #16]
 800a370:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a374:	f104 0314 	add.w	r3, r4, #20
 800a378:	f019 091f 	ands.w	r9, r9, #31
 800a37c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a380:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a384:	d02b      	beq.n	800a3de <__lshift+0xbe>
 800a386:	f1c9 0e20 	rsb	lr, r9, #32
 800a38a:	468a      	mov	sl, r1
 800a38c:	2200      	movs	r2, #0
 800a38e:	6818      	ldr	r0, [r3, #0]
 800a390:	fa00 f009 	lsl.w	r0, r0, r9
 800a394:	4310      	orrs	r0, r2
 800a396:	f84a 0b04 	str.w	r0, [sl], #4
 800a39a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a39e:	459c      	cmp	ip, r3
 800a3a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a3a4:	d8f3      	bhi.n	800a38e <__lshift+0x6e>
 800a3a6:	ebac 0304 	sub.w	r3, ip, r4
 800a3aa:	3b15      	subs	r3, #21
 800a3ac:	f023 0303 	bic.w	r3, r3, #3
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	f104 0015 	add.w	r0, r4, #21
 800a3b6:	4584      	cmp	ip, r0
 800a3b8:	bf38      	it	cc
 800a3ba:	2304      	movcc	r3, #4
 800a3bc:	50ca      	str	r2, [r1, r3]
 800a3be:	b10a      	cbz	r2, 800a3c4 <__lshift+0xa4>
 800a3c0:	f108 0602 	add.w	r6, r8, #2
 800a3c4:	3e01      	subs	r6, #1
 800a3c6:	4638      	mov	r0, r7
 800a3c8:	612e      	str	r6, [r5, #16]
 800a3ca:	4621      	mov	r1, r4
 800a3cc:	f7ff fd90 	bl	8009ef0 <_Bfree>
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3da:	3301      	adds	r3, #1
 800a3dc:	e7c5      	b.n	800a36a <__lshift+0x4a>
 800a3de:	3904      	subs	r1, #4
 800a3e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3e8:	459c      	cmp	ip, r3
 800a3ea:	d8f9      	bhi.n	800a3e0 <__lshift+0xc0>
 800a3ec:	e7ea      	b.n	800a3c4 <__lshift+0xa4>
 800a3ee:	bf00      	nop
 800a3f0:	0800d040 	.word	0x0800d040
 800a3f4:	0800d051 	.word	0x0800d051

0800a3f8 <__mcmp>:
 800a3f8:	690a      	ldr	r2, [r1, #16]
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	6900      	ldr	r0, [r0, #16]
 800a3fe:	1a80      	subs	r0, r0, r2
 800a400:	b530      	push	{r4, r5, lr}
 800a402:	d10e      	bne.n	800a422 <__mcmp+0x2a>
 800a404:	3314      	adds	r3, #20
 800a406:	3114      	adds	r1, #20
 800a408:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a40c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a410:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a414:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a418:	4295      	cmp	r5, r2
 800a41a:	d003      	beq.n	800a424 <__mcmp+0x2c>
 800a41c:	d205      	bcs.n	800a42a <__mcmp+0x32>
 800a41e:	f04f 30ff 	mov.w	r0, #4294967295
 800a422:	bd30      	pop	{r4, r5, pc}
 800a424:	42a3      	cmp	r3, r4
 800a426:	d3f3      	bcc.n	800a410 <__mcmp+0x18>
 800a428:	e7fb      	b.n	800a422 <__mcmp+0x2a>
 800a42a:	2001      	movs	r0, #1
 800a42c:	e7f9      	b.n	800a422 <__mcmp+0x2a>
	...

0800a430 <__mdiff>:
 800a430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a434:	4689      	mov	r9, r1
 800a436:	4606      	mov	r6, r0
 800a438:	4611      	mov	r1, r2
 800a43a:	4648      	mov	r0, r9
 800a43c:	4614      	mov	r4, r2
 800a43e:	f7ff ffdb 	bl	800a3f8 <__mcmp>
 800a442:	1e05      	subs	r5, r0, #0
 800a444:	d112      	bne.n	800a46c <__mdiff+0x3c>
 800a446:	4629      	mov	r1, r5
 800a448:	4630      	mov	r0, r6
 800a44a:	f7ff fd11 	bl	8009e70 <_Balloc>
 800a44e:	4602      	mov	r2, r0
 800a450:	b928      	cbnz	r0, 800a45e <__mdiff+0x2e>
 800a452:	4b3f      	ldr	r3, [pc, #252]	@ (800a550 <__mdiff+0x120>)
 800a454:	f240 2137 	movw	r1, #567	@ 0x237
 800a458:	483e      	ldr	r0, [pc, #248]	@ (800a554 <__mdiff+0x124>)
 800a45a:	f001 fea1 	bl	800c1a0 <__assert_func>
 800a45e:	2301      	movs	r3, #1
 800a460:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a464:	4610      	mov	r0, r2
 800a466:	b003      	add	sp, #12
 800a468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a46c:	bfbc      	itt	lt
 800a46e:	464b      	movlt	r3, r9
 800a470:	46a1      	movlt	r9, r4
 800a472:	4630      	mov	r0, r6
 800a474:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a478:	bfba      	itte	lt
 800a47a:	461c      	movlt	r4, r3
 800a47c:	2501      	movlt	r5, #1
 800a47e:	2500      	movge	r5, #0
 800a480:	f7ff fcf6 	bl	8009e70 <_Balloc>
 800a484:	4602      	mov	r2, r0
 800a486:	b918      	cbnz	r0, 800a490 <__mdiff+0x60>
 800a488:	4b31      	ldr	r3, [pc, #196]	@ (800a550 <__mdiff+0x120>)
 800a48a:	f240 2145 	movw	r1, #581	@ 0x245
 800a48e:	e7e3      	b.n	800a458 <__mdiff+0x28>
 800a490:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a494:	6926      	ldr	r6, [r4, #16]
 800a496:	60c5      	str	r5, [r0, #12]
 800a498:	f109 0310 	add.w	r3, r9, #16
 800a49c:	f109 0514 	add.w	r5, r9, #20
 800a4a0:	f104 0e14 	add.w	lr, r4, #20
 800a4a4:	f100 0b14 	add.w	fp, r0, #20
 800a4a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a4ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a4b0:	9301      	str	r3, [sp, #4]
 800a4b2:	46d9      	mov	r9, fp
 800a4b4:	f04f 0c00 	mov.w	ip, #0
 800a4b8:	9b01      	ldr	r3, [sp, #4]
 800a4ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a4be:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a4c2:	9301      	str	r3, [sp, #4]
 800a4c4:	fa1f f38a 	uxth.w	r3, sl
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	b283      	uxth	r3, r0
 800a4cc:	1acb      	subs	r3, r1, r3
 800a4ce:	0c00      	lsrs	r0, r0, #16
 800a4d0:	4463      	add	r3, ip
 800a4d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a4d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a4e0:	4576      	cmp	r6, lr
 800a4e2:	f849 3b04 	str.w	r3, [r9], #4
 800a4e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4ea:	d8e5      	bhi.n	800a4b8 <__mdiff+0x88>
 800a4ec:	1b33      	subs	r3, r6, r4
 800a4ee:	3b15      	subs	r3, #21
 800a4f0:	f023 0303 	bic.w	r3, r3, #3
 800a4f4:	3415      	adds	r4, #21
 800a4f6:	3304      	adds	r3, #4
 800a4f8:	42a6      	cmp	r6, r4
 800a4fa:	bf38      	it	cc
 800a4fc:	2304      	movcc	r3, #4
 800a4fe:	441d      	add	r5, r3
 800a500:	445b      	add	r3, fp
 800a502:	461e      	mov	r6, r3
 800a504:	462c      	mov	r4, r5
 800a506:	4544      	cmp	r4, r8
 800a508:	d30e      	bcc.n	800a528 <__mdiff+0xf8>
 800a50a:	f108 0103 	add.w	r1, r8, #3
 800a50e:	1b49      	subs	r1, r1, r5
 800a510:	f021 0103 	bic.w	r1, r1, #3
 800a514:	3d03      	subs	r5, #3
 800a516:	45a8      	cmp	r8, r5
 800a518:	bf38      	it	cc
 800a51a:	2100      	movcc	r1, #0
 800a51c:	440b      	add	r3, r1
 800a51e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a522:	b191      	cbz	r1, 800a54a <__mdiff+0x11a>
 800a524:	6117      	str	r7, [r2, #16]
 800a526:	e79d      	b.n	800a464 <__mdiff+0x34>
 800a528:	f854 1b04 	ldr.w	r1, [r4], #4
 800a52c:	46e6      	mov	lr, ip
 800a52e:	0c08      	lsrs	r0, r1, #16
 800a530:	fa1c fc81 	uxtah	ip, ip, r1
 800a534:	4471      	add	r1, lr
 800a536:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a53a:	b289      	uxth	r1, r1
 800a53c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a540:	f846 1b04 	str.w	r1, [r6], #4
 800a544:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a548:	e7dd      	b.n	800a506 <__mdiff+0xd6>
 800a54a:	3f01      	subs	r7, #1
 800a54c:	e7e7      	b.n	800a51e <__mdiff+0xee>
 800a54e:	bf00      	nop
 800a550:	0800d040 	.word	0x0800d040
 800a554:	0800d051 	.word	0x0800d051

0800a558 <__ulp>:
 800a558:	b082      	sub	sp, #8
 800a55a:	ed8d 0b00 	vstr	d0, [sp]
 800a55e:	9a01      	ldr	r2, [sp, #4]
 800a560:	4b0f      	ldr	r3, [pc, #60]	@ (800a5a0 <__ulp+0x48>)
 800a562:	4013      	ands	r3, r2
 800a564:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a568:	2b00      	cmp	r3, #0
 800a56a:	dc08      	bgt.n	800a57e <__ulp+0x26>
 800a56c:	425b      	negs	r3, r3
 800a56e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a572:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a576:	da04      	bge.n	800a582 <__ulp+0x2a>
 800a578:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a57c:	4113      	asrs	r3, r2
 800a57e:	2200      	movs	r2, #0
 800a580:	e008      	b.n	800a594 <__ulp+0x3c>
 800a582:	f1a2 0314 	sub.w	r3, r2, #20
 800a586:	2b1e      	cmp	r3, #30
 800a588:	bfda      	itte	le
 800a58a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a58e:	40da      	lsrle	r2, r3
 800a590:	2201      	movgt	r2, #1
 800a592:	2300      	movs	r3, #0
 800a594:	4619      	mov	r1, r3
 800a596:	4610      	mov	r0, r2
 800a598:	ec41 0b10 	vmov	d0, r0, r1
 800a59c:	b002      	add	sp, #8
 800a59e:	4770      	bx	lr
 800a5a0:	7ff00000 	.word	0x7ff00000

0800a5a4 <__b2d>:
 800a5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a8:	6906      	ldr	r6, [r0, #16]
 800a5aa:	f100 0814 	add.w	r8, r0, #20
 800a5ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a5b2:	1f37      	subs	r7, r6, #4
 800a5b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a5b8:	4610      	mov	r0, r2
 800a5ba:	f7ff fd4b 	bl	800a054 <__hi0bits>
 800a5be:	f1c0 0320 	rsb	r3, r0, #32
 800a5c2:	280a      	cmp	r0, #10
 800a5c4:	600b      	str	r3, [r1, #0]
 800a5c6:	491b      	ldr	r1, [pc, #108]	@ (800a634 <__b2d+0x90>)
 800a5c8:	dc15      	bgt.n	800a5f6 <__b2d+0x52>
 800a5ca:	f1c0 0c0b 	rsb	ip, r0, #11
 800a5ce:	fa22 f30c 	lsr.w	r3, r2, ip
 800a5d2:	45b8      	cmp	r8, r7
 800a5d4:	ea43 0501 	orr.w	r5, r3, r1
 800a5d8:	bf34      	ite	cc
 800a5da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a5de:	2300      	movcs	r3, #0
 800a5e0:	3015      	adds	r0, #21
 800a5e2:	fa02 f000 	lsl.w	r0, r2, r0
 800a5e6:	fa23 f30c 	lsr.w	r3, r3, ip
 800a5ea:	4303      	orrs	r3, r0
 800a5ec:	461c      	mov	r4, r3
 800a5ee:	ec45 4b10 	vmov	d0, r4, r5
 800a5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f6:	45b8      	cmp	r8, r7
 800a5f8:	bf3a      	itte	cc
 800a5fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a5fe:	f1a6 0708 	subcc.w	r7, r6, #8
 800a602:	2300      	movcs	r3, #0
 800a604:	380b      	subs	r0, #11
 800a606:	d012      	beq.n	800a62e <__b2d+0x8a>
 800a608:	f1c0 0120 	rsb	r1, r0, #32
 800a60c:	fa23 f401 	lsr.w	r4, r3, r1
 800a610:	4082      	lsls	r2, r0
 800a612:	4322      	orrs	r2, r4
 800a614:	4547      	cmp	r7, r8
 800a616:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a61a:	bf8c      	ite	hi
 800a61c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a620:	2200      	movls	r2, #0
 800a622:	4083      	lsls	r3, r0
 800a624:	40ca      	lsrs	r2, r1
 800a626:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a62a:	4313      	orrs	r3, r2
 800a62c:	e7de      	b.n	800a5ec <__b2d+0x48>
 800a62e:	ea42 0501 	orr.w	r5, r2, r1
 800a632:	e7db      	b.n	800a5ec <__b2d+0x48>
 800a634:	3ff00000 	.word	0x3ff00000

0800a638 <__d2b>:
 800a638:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a63c:	460f      	mov	r7, r1
 800a63e:	2101      	movs	r1, #1
 800a640:	ec59 8b10 	vmov	r8, r9, d0
 800a644:	4616      	mov	r6, r2
 800a646:	f7ff fc13 	bl	8009e70 <_Balloc>
 800a64a:	4604      	mov	r4, r0
 800a64c:	b930      	cbnz	r0, 800a65c <__d2b+0x24>
 800a64e:	4602      	mov	r2, r0
 800a650:	4b23      	ldr	r3, [pc, #140]	@ (800a6e0 <__d2b+0xa8>)
 800a652:	4824      	ldr	r0, [pc, #144]	@ (800a6e4 <__d2b+0xac>)
 800a654:	f240 310f 	movw	r1, #783	@ 0x30f
 800a658:	f001 fda2 	bl	800c1a0 <__assert_func>
 800a65c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a660:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a664:	b10d      	cbz	r5, 800a66a <__d2b+0x32>
 800a666:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a66a:	9301      	str	r3, [sp, #4]
 800a66c:	f1b8 0300 	subs.w	r3, r8, #0
 800a670:	d023      	beq.n	800a6ba <__d2b+0x82>
 800a672:	4668      	mov	r0, sp
 800a674:	9300      	str	r3, [sp, #0]
 800a676:	f7ff fd0c 	bl	800a092 <__lo0bits>
 800a67a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a67e:	b1d0      	cbz	r0, 800a6b6 <__d2b+0x7e>
 800a680:	f1c0 0320 	rsb	r3, r0, #32
 800a684:	fa02 f303 	lsl.w	r3, r2, r3
 800a688:	430b      	orrs	r3, r1
 800a68a:	40c2      	lsrs	r2, r0
 800a68c:	6163      	str	r3, [r4, #20]
 800a68e:	9201      	str	r2, [sp, #4]
 800a690:	9b01      	ldr	r3, [sp, #4]
 800a692:	61a3      	str	r3, [r4, #24]
 800a694:	2b00      	cmp	r3, #0
 800a696:	bf0c      	ite	eq
 800a698:	2201      	moveq	r2, #1
 800a69a:	2202      	movne	r2, #2
 800a69c:	6122      	str	r2, [r4, #16]
 800a69e:	b1a5      	cbz	r5, 800a6ca <__d2b+0x92>
 800a6a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a6a4:	4405      	add	r5, r0
 800a6a6:	603d      	str	r5, [r7, #0]
 800a6a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a6ac:	6030      	str	r0, [r6, #0]
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	b003      	add	sp, #12
 800a6b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6b6:	6161      	str	r1, [r4, #20]
 800a6b8:	e7ea      	b.n	800a690 <__d2b+0x58>
 800a6ba:	a801      	add	r0, sp, #4
 800a6bc:	f7ff fce9 	bl	800a092 <__lo0bits>
 800a6c0:	9b01      	ldr	r3, [sp, #4]
 800a6c2:	6163      	str	r3, [r4, #20]
 800a6c4:	3020      	adds	r0, #32
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	e7e8      	b.n	800a69c <__d2b+0x64>
 800a6ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a6d2:	6038      	str	r0, [r7, #0]
 800a6d4:	6918      	ldr	r0, [r3, #16]
 800a6d6:	f7ff fcbd 	bl	800a054 <__hi0bits>
 800a6da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6de:	e7e5      	b.n	800a6ac <__d2b+0x74>
 800a6e0:	0800d040 	.word	0x0800d040
 800a6e4:	0800d051 	.word	0x0800d051

0800a6e8 <__ratio>:
 800a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	b085      	sub	sp, #20
 800a6ee:	e9cd 1000 	strd	r1, r0, [sp]
 800a6f2:	a902      	add	r1, sp, #8
 800a6f4:	f7ff ff56 	bl	800a5a4 <__b2d>
 800a6f8:	9800      	ldr	r0, [sp, #0]
 800a6fa:	a903      	add	r1, sp, #12
 800a6fc:	ec55 4b10 	vmov	r4, r5, d0
 800a700:	f7ff ff50 	bl	800a5a4 <__b2d>
 800a704:	9b01      	ldr	r3, [sp, #4]
 800a706:	6919      	ldr	r1, [r3, #16]
 800a708:	9b00      	ldr	r3, [sp, #0]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	1ac9      	subs	r1, r1, r3
 800a70e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a712:	1a9b      	subs	r3, r3, r2
 800a714:	ec5b ab10 	vmov	sl, fp, d0
 800a718:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	bfce      	itee	gt
 800a720:	462a      	movgt	r2, r5
 800a722:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a726:	465a      	movle	r2, fp
 800a728:	462f      	mov	r7, r5
 800a72a:	46d9      	mov	r9, fp
 800a72c:	bfcc      	ite	gt
 800a72e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a732:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a736:	464b      	mov	r3, r9
 800a738:	4652      	mov	r2, sl
 800a73a:	4620      	mov	r0, r4
 800a73c:	4639      	mov	r1, r7
 800a73e:	f7f6 f885 	bl	800084c <__aeabi_ddiv>
 800a742:	ec41 0b10 	vmov	d0, r0, r1
 800a746:	b005      	add	sp, #20
 800a748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a74c <__copybits>:
 800a74c:	3901      	subs	r1, #1
 800a74e:	b570      	push	{r4, r5, r6, lr}
 800a750:	1149      	asrs	r1, r1, #5
 800a752:	6914      	ldr	r4, [r2, #16]
 800a754:	3101      	adds	r1, #1
 800a756:	f102 0314 	add.w	r3, r2, #20
 800a75a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a75e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a762:	1f05      	subs	r5, r0, #4
 800a764:	42a3      	cmp	r3, r4
 800a766:	d30c      	bcc.n	800a782 <__copybits+0x36>
 800a768:	1aa3      	subs	r3, r4, r2
 800a76a:	3b11      	subs	r3, #17
 800a76c:	f023 0303 	bic.w	r3, r3, #3
 800a770:	3211      	adds	r2, #17
 800a772:	42a2      	cmp	r2, r4
 800a774:	bf88      	it	hi
 800a776:	2300      	movhi	r3, #0
 800a778:	4418      	add	r0, r3
 800a77a:	2300      	movs	r3, #0
 800a77c:	4288      	cmp	r0, r1
 800a77e:	d305      	bcc.n	800a78c <__copybits+0x40>
 800a780:	bd70      	pop	{r4, r5, r6, pc}
 800a782:	f853 6b04 	ldr.w	r6, [r3], #4
 800a786:	f845 6f04 	str.w	r6, [r5, #4]!
 800a78a:	e7eb      	b.n	800a764 <__copybits+0x18>
 800a78c:	f840 3b04 	str.w	r3, [r0], #4
 800a790:	e7f4      	b.n	800a77c <__copybits+0x30>

0800a792 <__any_on>:
 800a792:	f100 0214 	add.w	r2, r0, #20
 800a796:	6900      	ldr	r0, [r0, #16]
 800a798:	114b      	asrs	r3, r1, #5
 800a79a:	4298      	cmp	r0, r3
 800a79c:	b510      	push	{r4, lr}
 800a79e:	db11      	blt.n	800a7c4 <__any_on+0x32>
 800a7a0:	dd0a      	ble.n	800a7b8 <__any_on+0x26>
 800a7a2:	f011 011f 	ands.w	r1, r1, #31
 800a7a6:	d007      	beq.n	800a7b8 <__any_on+0x26>
 800a7a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a7ac:	fa24 f001 	lsr.w	r0, r4, r1
 800a7b0:	fa00 f101 	lsl.w	r1, r0, r1
 800a7b4:	428c      	cmp	r4, r1
 800a7b6:	d10b      	bne.n	800a7d0 <__any_on+0x3e>
 800a7b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d803      	bhi.n	800a7c8 <__any_on+0x36>
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	bd10      	pop	{r4, pc}
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	e7f7      	b.n	800a7b8 <__any_on+0x26>
 800a7c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7cc:	2900      	cmp	r1, #0
 800a7ce:	d0f5      	beq.n	800a7bc <__any_on+0x2a>
 800a7d0:	2001      	movs	r0, #1
 800a7d2:	e7f6      	b.n	800a7c2 <__any_on+0x30>

0800a7d4 <sulp>:
 800a7d4:	b570      	push	{r4, r5, r6, lr}
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	460d      	mov	r5, r1
 800a7da:	ec45 4b10 	vmov	d0, r4, r5
 800a7de:	4616      	mov	r6, r2
 800a7e0:	f7ff feba 	bl	800a558 <__ulp>
 800a7e4:	ec51 0b10 	vmov	r0, r1, d0
 800a7e8:	b17e      	cbz	r6, 800a80a <sulp+0x36>
 800a7ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a7ee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	dd09      	ble.n	800a80a <sulp+0x36>
 800a7f6:	051b      	lsls	r3, r3, #20
 800a7f8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a7fc:	2400      	movs	r4, #0
 800a7fe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a802:	4622      	mov	r2, r4
 800a804:	462b      	mov	r3, r5
 800a806:	f7f5 fef7 	bl	80005f8 <__aeabi_dmul>
 800a80a:	ec41 0b10 	vmov	d0, r0, r1
 800a80e:	bd70      	pop	{r4, r5, r6, pc}

0800a810 <_strtod_l>:
 800a810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a814:	b09f      	sub	sp, #124	@ 0x7c
 800a816:	460c      	mov	r4, r1
 800a818:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a81a:	2200      	movs	r2, #0
 800a81c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a81e:	9005      	str	r0, [sp, #20]
 800a820:	f04f 0a00 	mov.w	sl, #0
 800a824:	f04f 0b00 	mov.w	fp, #0
 800a828:	460a      	mov	r2, r1
 800a82a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a82c:	7811      	ldrb	r1, [r2, #0]
 800a82e:	292b      	cmp	r1, #43	@ 0x2b
 800a830:	d04a      	beq.n	800a8c8 <_strtod_l+0xb8>
 800a832:	d838      	bhi.n	800a8a6 <_strtod_l+0x96>
 800a834:	290d      	cmp	r1, #13
 800a836:	d832      	bhi.n	800a89e <_strtod_l+0x8e>
 800a838:	2908      	cmp	r1, #8
 800a83a:	d832      	bhi.n	800a8a2 <_strtod_l+0x92>
 800a83c:	2900      	cmp	r1, #0
 800a83e:	d03b      	beq.n	800a8b8 <_strtod_l+0xa8>
 800a840:	2200      	movs	r2, #0
 800a842:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a844:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a846:	782a      	ldrb	r2, [r5, #0]
 800a848:	2a30      	cmp	r2, #48	@ 0x30
 800a84a:	f040 80b3 	bne.w	800a9b4 <_strtod_l+0x1a4>
 800a84e:	786a      	ldrb	r2, [r5, #1]
 800a850:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a854:	2a58      	cmp	r2, #88	@ 0x58
 800a856:	d16e      	bne.n	800a936 <_strtod_l+0x126>
 800a858:	9302      	str	r3, [sp, #8]
 800a85a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a85c:	9301      	str	r3, [sp, #4]
 800a85e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a860:	9300      	str	r3, [sp, #0]
 800a862:	4a8e      	ldr	r2, [pc, #568]	@ (800aa9c <_strtod_l+0x28c>)
 800a864:	9805      	ldr	r0, [sp, #20]
 800a866:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a868:	a919      	add	r1, sp, #100	@ 0x64
 800a86a:	f001 fd33 	bl	800c2d4 <__gethex>
 800a86e:	f010 060f 	ands.w	r6, r0, #15
 800a872:	4604      	mov	r4, r0
 800a874:	d005      	beq.n	800a882 <_strtod_l+0x72>
 800a876:	2e06      	cmp	r6, #6
 800a878:	d128      	bne.n	800a8cc <_strtod_l+0xbc>
 800a87a:	3501      	adds	r5, #1
 800a87c:	2300      	movs	r3, #0
 800a87e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a880:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a882:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a884:	2b00      	cmp	r3, #0
 800a886:	f040 858e 	bne.w	800b3a6 <_strtod_l+0xb96>
 800a88a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a88c:	b1cb      	cbz	r3, 800a8c2 <_strtod_l+0xb2>
 800a88e:	4652      	mov	r2, sl
 800a890:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a894:	ec43 2b10 	vmov	d0, r2, r3
 800a898:	b01f      	add	sp, #124	@ 0x7c
 800a89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89e:	2920      	cmp	r1, #32
 800a8a0:	d1ce      	bne.n	800a840 <_strtod_l+0x30>
 800a8a2:	3201      	adds	r2, #1
 800a8a4:	e7c1      	b.n	800a82a <_strtod_l+0x1a>
 800a8a6:	292d      	cmp	r1, #45	@ 0x2d
 800a8a8:	d1ca      	bne.n	800a840 <_strtod_l+0x30>
 800a8aa:	2101      	movs	r1, #1
 800a8ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a8ae:	1c51      	adds	r1, r2, #1
 800a8b0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a8b2:	7852      	ldrb	r2, [r2, #1]
 800a8b4:	2a00      	cmp	r2, #0
 800a8b6:	d1c5      	bne.n	800a844 <_strtod_l+0x34>
 800a8b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a8ba:	9419      	str	r4, [sp, #100]	@ 0x64
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f040 8570 	bne.w	800b3a2 <_strtod_l+0xb92>
 800a8c2:	4652      	mov	r2, sl
 800a8c4:	465b      	mov	r3, fp
 800a8c6:	e7e5      	b.n	800a894 <_strtod_l+0x84>
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	e7ef      	b.n	800a8ac <_strtod_l+0x9c>
 800a8cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a8ce:	b13a      	cbz	r2, 800a8e0 <_strtod_l+0xd0>
 800a8d0:	2135      	movs	r1, #53	@ 0x35
 800a8d2:	a81c      	add	r0, sp, #112	@ 0x70
 800a8d4:	f7ff ff3a 	bl	800a74c <__copybits>
 800a8d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8da:	9805      	ldr	r0, [sp, #20]
 800a8dc:	f7ff fb08 	bl	8009ef0 <_Bfree>
 800a8e0:	3e01      	subs	r6, #1
 800a8e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a8e4:	2e04      	cmp	r6, #4
 800a8e6:	d806      	bhi.n	800a8f6 <_strtod_l+0xe6>
 800a8e8:	e8df f006 	tbb	[pc, r6]
 800a8ec:	201d0314 	.word	0x201d0314
 800a8f0:	14          	.byte	0x14
 800a8f1:	00          	.byte	0x00
 800a8f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a8f6:	05e1      	lsls	r1, r4, #23
 800a8f8:	bf48      	it	mi
 800a8fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a8fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a902:	0d1b      	lsrs	r3, r3, #20
 800a904:	051b      	lsls	r3, r3, #20
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1bb      	bne.n	800a882 <_strtod_l+0x72>
 800a90a:	f7fe fb23 	bl	8008f54 <__errno>
 800a90e:	2322      	movs	r3, #34	@ 0x22
 800a910:	6003      	str	r3, [r0, #0]
 800a912:	e7b6      	b.n	800a882 <_strtod_l+0x72>
 800a914:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a918:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a91c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a920:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a924:	e7e7      	b.n	800a8f6 <_strtod_l+0xe6>
 800a926:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800aaa4 <_strtod_l+0x294>
 800a92a:	e7e4      	b.n	800a8f6 <_strtod_l+0xe6>
 800a92c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a930:	f04f 3aff 	mov.w	sl, #4294967295
 800a934:	e7df      	b.n	800a8f6 <_strtod_l+0xe6>
 800a936:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a938:	1c5a      	adds	r2, r3, #1
 800a93a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a93c:	785b      	ldrb	r3, [r3, #1]
 800a93e:	2b30      	cmp	r3, #48	@ 0x30
 800a940:	d0f9      	beq.n	800a936 <_strtod_l+0x126>
 800a942:	2b00      	cmp	r3, #0
 800a944:	d09d      	beq.n	800a882 <_strtod_l+0x72>
 800a946:	2301      	movs	r3, #1
 800a948:	9309      	str	r3, [sp, #36]	@ 0x24
 800a94a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a94c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a94e:	2300      	movs	r3, #0
 800a950:	9308      	str	r3, [sp, #32]
 800a952:	930a      	str	r3, [sp, #40]	@ 0x28
 800a954:	461f      	mov	r7, r3
 800a956:	220a      	movs	r2, #10
 800a958:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a95a:	7805      	ldrb	r5, [r0, #0]
 800a95c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a960:	b2d9      	uxtb	r1, r3
 800a962:	2909      	cmp	r1, #9
 800a964:	d928      	bls.n	800a9b8 <_strtod_l+0x1a8>
 800a966:	494e      	ldr	r1, [pc, #312]	@ (800aaa0 <_strtod_l+0x290>)
 800a968:	2201      	movs	r2, #1
 800a96a:	f7fe fa97 	bl	8008e9c <strncmp>
 800a96e:	2800      	cmp	r0, #0
 800a970:	d032      	beq.n	800a9d8 <_strtod_l+0x1c8>
 800a972:	2000      	movs	r0, #0
 800a974:	462a      	mov	r2, r5
 800a976:	4681      	mov	r9, r0
 800a978:	463d      	mov	r5, r7
 800a97a:	4603      	mov	r3, r0
 800a97c:	2a65      	cmp	r2, #101	@ 0x65
 800a97e:	d001      	beq.n	800a984 <_strtod_l+0x174>
 800a980:	2a45      	cmp	r2, #69	@ 0x45
 800a982:	d114      	bne.n	800a9ae <_strtod_l+0x19e>
 800a984:	b91d      	cbnz	r5, 800a98e <_strtod_l+0x17e>
 800a986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a988:	4302      	orrs	r2, r0
 800a98a:	d095      	beq.n	800a8b8 <_strtod_l+0xa8>
 800a98c:	2500      	movs	r5, #0
 800a98e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a990:	1c62      	adds	r2, r4, #1
 800a992:	9219      	str	r2, [sp, #100]	@ 0x64
 800a994:	7862      	ldrb	r2, [r4, #1]
 800a996:	2a2b      	cmp	r2, #43	@ 0x2b
 800a998:	d077      	beq.n	800aa8a <_strtod_l+0x27a>
 800a99a:	2a2d      	cmp	r2, #45	@ 0x2d
 800a99c:	d07b      	beq.n	800aa96 <_strtod_l+0x286>
 800a99e:	f04f 0c00 	mov.w	ip, #0
 800a9a2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a9a6:	2909      	cmp	r1, #9
 800a9a8:	f240 8082 	bls.w	800aab0 <_strtod_l+0x2a0>
 800a9ac:	9419      	str	r4, [sp, #100]	@ 0x64
 800a9ae:	f04f 0800 	mov.w	r8, #0
 800a9b2:	e0a2      	b.n	800aafa <_strtod_l+0x2ea>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	e7c7      	b.n	800a948 <_strtod_l+0x138>
 800a9b8:	2f08      	cmp	r7, #8
 800a9ba:	bfd5      	itete	le
 800a9bc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a9be:	9908      	ldrgt	r1, [sp, #32]
 800a9c0:	fb02 3301 	mlale	r3, r2, r1, r3
 800a9c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a9c8:	f100 0001 	add.w	r0, r0, #1
 800a9cc:	bfd4      	ite	le
 800a9ce:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a9d0:	9308      	strgt	r3, [sp, #32]
 800a9d2:	3701      	adds	r7, #1
 800a9d4:	9019      	str	r0, [sp, #100]	@ 0x64
 800a9d6:	e7bf      	b.n	800a958 <_strtod_l+0x148>
 800a9d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9da:	1c5a      	adds	r2, r3, #1
 800a9dc:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9de:	785a      	ldrb	r2, [r3, #1]
 800a9e0:	b37f      	cbz	r7, 800aa42 <_strtod_l+0x232>
 800a9e2:	4681      	mov	r9, r0
 800a9e4:	463d      	mov	r5, r7
 800a9e6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a9ea:	2b09      	cmp	r3, #9
 800a9ec:	d912      	bls.n	800aa14 <_strtod_l+0x204>
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e7c4      	b.n	800a97c <_strtod_l+0x16c>
 800a9f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9f4:	1c5a      	adds	r2, r3, #1
 800a9f6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9f8:	785a      	ldrb	r2, [r3, #1]
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	2a30      	cmp	r2, #48	@ 0x30
 800a9fe:	d0f8      	beq.n	800a9f2 <_strtod_l+0x1e2>
 800aa00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800aa04:	2b08      	cmp	r3, #8
 800aa06:	f200 84d3 	bhi.w	800b3b0 <_strtod_l+0xba0>
 800aa0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa0c:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa0e:	4681      	mov	r9, r0
 800aa10:	2000      	movs	r0, #0
 800aa12:	4605      	mov	r5, r0
 800aa14:	3a30      	subs	r2, #48	@ 0x30
 800aa16:	f100 0301 	add.w	r3, r0, #1
 800aa1a:	d02a      	beq.n	800aa72 <_strtod_l+0x262>
 800aa1c:	4499      	add	r9, r3
 800aa1e:	eb00 0c05 	add.w	ip, r0, r5
 800aa22:	462b      	mov	r3, r5
 800aa24:	210a      	movs	r1, #10
 800aa26:	4563      	cmp	r3, ip
 800aa28:	d10d      	bne.n	800aa46 <_strtod_l+0x236>
 800aa2a:	1c69      	adds	r1, r5, #1
 800aa2c:	4401      	add	r1, r0
 800aa2e:	4428      	add	r0, r5
 800aa30:	2808      	cmp	r0, #8
 800aa32:	dc16      	bgt.n	800aa62 <_strtod_l+0x252>
 800aa34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aa36:	230a      	movs	r3, #10
 800aa38:	fb03 2300 	mla	r3, r3, r0, r2
 800aa3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa3e:	2300      	movs	r3, #0
 800aa40:	e018      	b.n	800aa74 <_strtod_l+0x264>
 800aa42:	4638      	mov	r0, r7
 800aa44:	e7da      	b.n	800a9fc <_strtod_l+0x1ec>
 800aa46:	2b08      	cmp	r3, #8
 800aa48:	f103 0301 	add.w	r3, r3, #1
 800aa4c:	dc03      	bgt.n	800aa56 <_strtod_l+0x246>
 800aa4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800aa50:	434e      	muls	r6, r1
 800aa52:	960a      	str	r6, [sp, #40]	@ 0x28
 800aa54:	e7e7      	b.n	800aa26 <_strtod_l+0x216>
 800aa56:	2b10      	cmp	r3, #16
 800aa58:	bfde      	ittt	le
 800aa5a:	9e08      	ldrle	r6, [sp, #32]
 800aa5c:	434e      	mulle	r6, r1
 800aa5e:	9608      	strle	r6, [sp, #32]
 800aa60:	e7e1      	b.n	800aa26 <_strtod_l+0x216>
 800aa62:	280f      	cmp	r0, #15
 800aa64:	dceb      	bgt.n	800aa3e <_strtod_l+0x22e>
 800aa66:	9808      	ldr	r0, [sp, #32]
 800aa68:	230a      	movs	r3, #10
 800aa6a:	fb03 2300 	mla	r3, r3, r0, r2
 800aa6e:	9308      	str	r3, [sp, #32]
 800aa70:	e7e5      	b.n	800aa3e <_strtod_l+0x22e>
 800aa72:	4629      	mov	r1, r5
 800aa74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aa76:	1c50      	adds	r0, r2, #1
 800aa78:	9019      	str	r0, [sp, #100]	@ 0x64
 800aa7a:	7852      	ldrb	r2, [r2, #1]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	460d      	mov	r5, r1
 800aa80:	e7b1      	b.n	800a9e6 <_strtod_l+0x1d6>
 800aa82:	f04f 0900 	mov.w	r9, #0
 800aa86:	2301      	movs	r3, #1
 800aa88:	e77d      	b.n	800a986 <_strtod_l+0x176>
 800aa8a:	f04f 0c00 	mov.w	ip, #0
 800aa8e:	1ca2      	adds	r2, r4, #2
 800aa90:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa92:	78a2      	ldrb	r2, [r4, #2]
 800aa94:	e785      	b.n	800a9a2 <_strtod_l+0x192>
 800aa96:	f04f 0c01 	mov.w	ip, #1
 800aa9a:	e7f8      	b.n	800aa8e <_strtod_l+0x27e>
 800aa9c:	0800d1c0 	.word	0x0800d1c0
 800aaa0:	0800d1a8 	.word	0x0800d1a8
 800aaa4:	7ff00000 	.word	0x7ff00000
 800aaa8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aaaa:	1c51      	adds	r1, r2, #1
 800aaac:	9119      	str	r1, [sp, #100]	@ 0x64
 800aaae:	7852      	ldrb	r2, [r2, #1]
 800aab0:	2a30      	cmp	r2, #48	@ 0x30
 800aab2:	d0f9      	beq.n	800aaa8 <_strtod_l+0x298>
 800aab4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800aab8:	2908      	cmp	r1, #8
 800aaba:	f63f af78 	bhi.w	800a9ae <_strtod_l+0x19e>
 800aabe:	3a30      	subs	r2, #48	@ 0x30
 800aac0:	920e      	str	r2, [sp, #56]	@ 0x38
 800aac2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aac4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800aac6:	f04f 080a 	mov.w	r8, #10
 800aaca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aacc:	1c56      	adds	r6, r2, #1
 800aace:	9619      	str	r6, [sp, #100]	@ 0x64
 800aad0:	7852      	ldrb	r2, [r2, #1]
 800aad2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800aad6:	f1be 0f09 	cmp.w	lr, #9
 800aada:	d939      	bls.n	800ab50 <_strtod_l+0x340>
 800aadc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800aade:	1a76      	subs	r6, r6, r1
 800aae0:	2e08      	cmp	r6, #8
 800aae2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800aae6:	dc03      	bgt.n	800aaf0 <_strtod_l+0x2e0>
 800aae8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800aaea:	4588      	cmp	r8, r1
 800aaec:	bfa8      	it	ge
 800aaee:	4688      	movge	r8, r1
 800aaf0:	f1bc 0f00 	cmp.w	ip, #0
 800aaf4:	d001      	beq.n	800aafa <_strtod_l+0x2ea>
 800aaf6:	f1c8 0800 	rsb	r8, r8, #0
 800aafa:	2d00      	cmp	r5, #0
 800aafc:	d14e      	bne.n	800ab9c <_strtod_l+0x38c>
 800aafe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab00:	4308      	orrs	r0, r1
 800ab02:	f47f aebe 	bne.w	800a882 <_strtod_l+0x72>
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f47f aed6 	bne.w	800a8b8 <_strtod_l+0xa8>
 800ab0c:	2a69      	cmp	r2, #105	@ 0x69
 800ab0e:	d028      	beq.n	800ab62 <_strtod_l+0x352>
 800ab10:	dc25      	bgt.n	800ab5e <_strtod_l+0x34e>
 800ab12:	2a49      	cmp	r2, #73	@ 0x49
 800ab14:	d025      	beq.n	800ab62 <_strtod_l+0x352>
 800ab16:	2a4e      	cmp	r2, #78	@ 0x4e
 800ab18:	f47f aece 	bne.w	800a8b8 <_strtod_l+0xa8>
 800ab1c:	499b      	ldr	r1, [pc, #620]	@ (800ad8c <_strtod_l+0x57c>)
 800ab1e:	a819      	add	r0, sp, #100	@ 0x64
 800ab20:	f001 fdfa 	bl	800c718 <__match>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	f43f aec7 	beq.w	800a8b8 <_strtod_l+0xa8>
 800ab2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	2b28      	cmp	r3, #40	@ 0x28
 800ab30:	d12e      	bne.n	800ab90 <_strtod_l+0x380>
 800ab32:	4997      	ldr	r1, [pc, #604]	@ (800ad90 <_strtod_l+0x580>)
 800ab34:	aa1c      	add	r2, sp, #112	@ 0x70
 800ab36:	a819      	add	r0, sp, #100	@ 0x64
 800ab38:	f001 fe02 	bl	800c740 <__hexnan>
 800ab3c:	2805      	cmp	r0, #5
 800ab3e:	d127      	bne.n	800ab90 <_strtod_l+0x380>
 800ab40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ab42:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ab46:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ab4a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ab4e:	e698      	b.n	800a882 <_strtod_l+0x72>
 800ab50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ab52:	fb08 2101 	mla	r1, r8, r1, r2
 800ab56:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ab5a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab5c:	e7b5      	b.n	800aaca <_strtod_l+0x2ba>
 800ab5e:	2a6e      	cmp	r2, #110	@ 0x6e
 800ab60:	e7da      	b.n	800ab18 <_strtod_l+0x308>
 800ab62:	498c      	ldr	r1, [pc, #560]	@ (800ad94 <_strtod_l+0x584>)
 800ab64:	a819      	add	r0, sp, #100	@ 0x64
 800ab66:	f001 fdd7 	bl	800c718 <__match>
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	f43f aea4 	beq.w	800a8b8 <_strtod_l+0xa8>
 800ab70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab72:	4989      	ldr	r1, [pc, #548]	@ (800ad98 <_strtod_l+0x588>)
 800ab74:	3b01      	subs	r3, #1
 800ab76:	a819      	add	r0, sp, #100	@ 0x64
 800ab78:	9319      	str	r3, [sp, #100]	@ 0x64
 800ab7a:	f001 fdcd 	bl	800c718 <__match>
 800ab7e:	b910      	cbnz	r0, 800ab86 <_strtod_l+0x376>
 800ab80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab82:	3301      	adds	r3, #1
 800ab84:	9319      	str	r3, [sp, #100]	@ 0x64
 800ab86:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ada8 <_strtod_l+0x598>
 800ab8a:	f04f 0a00 	mov.w	sl, #0
 800ab8e:	e678      	b.n	800a882 <_strtod_l+0x72>
 800ab90:	4882      	ldr	r0, [pc, #520]	@ (800ad9c <_strtod_l+0x58c>)
 800ab92:	f001 fafd 	bl	800c190 <nan>
 800ab96:	ec5b ab10 	vmov	sl, fp, d0
 800ab9a:	e672      	b.n	800a882 <_strtod_l+0x72>
 800ab9c:	eba8 0309 	sub.w	r3, r8, r9
 800aba0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aba2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aba4:	2f00      	cmp	r7, #0
 800aba6:	bf08      	it	eq
 800aba8:	462f      	moveq	r7, r5
 800abaa:	2d10      	cmp	r5, #16
 800abac:	462c      	mov	r4, r5
 800abae:	bfa8      	it	ge
 800abb0:	2410      	movge	r4, #16
 800abb2:	f7f5 fca7 	bl	8000504 <__aeabi_ui2d>
 800abb6:	2d09      	cmp	r5, #9
 800abb8:	4682      	mov	sl, r0
 800abba:	468b      	mov	fp, r1
 800abbc:	dc13      	bgt.n	800abe6 <_strtod_l+0x3d6>
 800abbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f43f ae5e 	beq.w	800a882 <_strtod_l+0x72>
 800abc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abc8:	dd78      	ble.n	800acbc <_strtod_l+0x4ac>
 800abca:	2b16      	cmp	r3, #22
 800abcc:	dc5f      	bgt.n	800ac8e <_strtod_l+0x47e>
 800abce:	4974      	ldr	r1, [pc, #464]	@ (800ada0 <_strtod_l+0x590>)
 800abd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800abd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abd8:	4652      	mov	r2, sl
 800abda:	465b      	mov	r3, fp
 800abdc:	f7f5 fd0c 	bl	80005f8 <__aeabi_dmul>
 800abe0:	4682      	mov	sl, r0
 800abe2:	468b      	mov	fp, r1
 800abe4:	e64d      	b.n	800a882 <_strtod_l+0x72>
 800abe6:	4b6e      	ldr	r3, [pc, #440]	@ (800ada0 <_strtod_l+0x590>)
 800abe8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800abec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800abf0:	f7f5 fd02 	bl	80005f8 <__aeabi_dmul>
 800abf4:	4682      	mov	sl, r0
 800abf6:	9808      	ldr	r0, [sp, #32]
 800abf8:	468b      	mov	fp, r1
 800abfa:	f7f5 fc83 	bl	8000504 <__aeabi_ui2d>
 800abfe:	4602      	mov	r2, r0
 800ac00:	460b      	mov	r3, r1
 800ac02:	4650      	mov	r0, sl
 800ac04:	4659      	mov	r1, fp
 800ac06:	f7f5 fb41 	bl	800028c <__adddf3>
 800ac0a:	2d0f      	cmp	r5, #15
 800ac0c:	4682      	mov	sl, r0
 800ac0e:	468b      	mov	fp, r1
 800ac10:	ddd5      	ble.n	800abbe <_strtod_l+0x3ae>
 800ac12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac14:	1b2c      	subs	r4, r5, r4
 800ac16:	441c      	add	r4, r3
 800ac18:	2c00      	cmp	r4, #0
 800ac1a:	f340 8096 	ble.w	800ad4a <_strtod_l+0x53a>
 800ac1e:	f014 030f 	ands.w	r3, r4, #15
 800ac22:	d00a      	beq.n	800ac3a <_strtod_l+0x42a>
 800ac24:	495e      	ldr	r1, [pc, #376]	@ (800ada0 <_strtod_l+0x590>)
 800ac26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac2a:	4652      	mov	r2, sl
 800ac2c:	465b      	mov	r3, fp
 800ac2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac32:	f7f5 fce1 	bl	80005f8 <__aeabi_dmul>
 800ac36:	4682      	mov	sl, r0
 800ac38:	468b      	mov	fp, r1
 800ac3a:	f034 040f 	bics.w	r4, r4, #15
 800ac3e:	d073      	beq.n	800ad28 <_strtod_l+0x518>
 800ac40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ac44:	dd48      	ble.n	800acd8 <_strtod_l+0x4c8>
 800ac46:	2400      	movs	r4, #0
 800ac48:	46a0      	mov	r8, r4
 800ac4a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ac4c:	46a1      	mov	r9, r4
 800ac4e:	9a05      	ldr	r2, [sp, #20]
 800ac50:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ada8 <_strtod_l+0x598>
 800ac54:	2322      	movs	r3, #34	@ 0x22
 800ac56:	6013      	str	r3, [r2, #0]
 800ac58:	f04f 0a00 	mov.w	sl, #0
 800ac5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f43f ae0f 	beq.w	800a882 <_strtod_l+0x72>
 800ac64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac66:	9805      	ldr	r0, [sp, #20]
 800ac68:	f7ff f942 	bl	8009ef0 <_Bfree>
 800ac6c:	9805      	ldr	r0, [sp, #20]
 800ac6e:	4649      	mov	r1, r9
 800ac70:	f7ff f93e 	bl	8009ef0 <_Bfree>
 800ac74:	9805      	ldr	r0, [sp, #20]
 800ac76:	4641      	mov	r1, r8
 800ac78:	f7ff f93a 	bl	8009ef0 <_Bfree>
 800ac7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac7e:	9805      	ldr	r0, [sp, #20]
 800ac80:	f7ff f936 	bl	8009ef0 <_Bfree>
 800ac84:	9805      	ldr	r0, [sp, #20]
 800ac86:	4621      	mov	r1, r4
 800ac88:	f7ff f932 	bl	8009ef0 <_Bfree>
 800ac8c:	e5f9      	b.n	800a882 <_strtod_l+0x72>
 800ac8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ac94:	4293      	cmp	r3, r2
 800ac96:	dbbc      	blt.n	800ac12 <_strtod_l+0x402>
 800ac98:	4c41      	ldr	r4, [pc, #260]	@ (800ada0 <_strtod_l+0x590>)
 800ac9a:	f1c5 050f 	rsb	r5, r5, #15
 800ac9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aca2:	4652      	mov	r2, sl
 800aca4:	465b      	mov	r3, fp
 800aca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acaa:	f7f5 fca5 	bl	80005f8 <__aeabi_dmul>
 800acae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acb0:	1b5d      	subs	r5, r3, r5
 800acb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800acb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800acba:	e78f      	b.n	800abdc <_strtod_l+0x3cc>
 800acbc:	3316      	adds	r3, #22
 800acbe:	dba8      	blt.n	800ac12 <_strtod_l+0x402>
 800acc0:	4b37      	ldr	r3, [pc, #220]	@ (800ada0 <_strtod_l+0x590>)
 800acc2:	eba9 0808 	sub.w	r8, r9, r8
 800acc6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800acca:	e9d8 2300 	ldrd	r2, r3, [r8]
 800acce:	4650      	mov	r0, sl
 800acd0:	4659      	mov	r1, fp
 800acd2:	f7f5 fdbb 	bl	800084c <__aeabi_ddiv>
 800acd6:	e783      	b.n	800abe0 <_strtod_l+0x3d0>
 800acd8:	4b32      	ldr	r3, [pc, #200]	@ (800ada4 <_strtod_l+0x594>)
 800acda:	9308      	str	r3, [sp, #32]
 800acdc:	2300      	movs	r3, #0
 800acde:	1124      	asrs	r4, r4, #4
 800ace0:	4650      	mov	r0, sl
 800ace2:	4659      	mov	r1, fp
 800ace4:	461e      	mov	r6, r3
 800ace6:	2c01      	cmp	r4, #1
 800ace8:	dc21      	bgt.n	800ad2e <_strtod_l+0x51e>
 800acea:	b10b      	cbz	r3, 800acf0 <_strtod_l+0x4e0>
 800acec:	4682      	mov	sl, r0
 800acee:	468b      	mov	fp, r1
 800acf0:	492c      	ldr	r1, [pc, #176]	@ (800ada4 <_strtod_l+0x594>)
 800acf2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800acf6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800acfa:	4652      	mov	r2, sl
 800acfc:	465b      	mov	r3, fp
 800acfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad02:	f7f5 fc79 	bl	80005f8 <__aeabi_dmul>
 800ad06:	4b28      	ldr	r3, [pc, #160]	@ (800ada8 <_strtod_l+0x598>)
 800ad08:	460a      	mov	r2, r1
 800ad0a:	400b      	ands	r3, r1
 800ad0c:	4927      	ldr	r1, [pc, #156]	@ (800adac <_strtod_l+0x59c>)
 800ad0e:	428b      	cmp	r3, r1
 800ad10:	4682      	mov	sl, r0
 800ad12:	d898      	bhi.n	800ac46 <_strtod_l+0x436>
 800ad14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ad18:	428b      	cmp	r3, r1
 800ad1a:	bf86      	itte	hi
 800ad1c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800adb0 <_strtod_l+0x5a0>
 800ad20:	f04f 3aff 	movhi.w	sl, #4294967295
 800ad24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ad28:	2300      	movs	r3, #0
 800ad2a:	9308      	str	r3, [sp, #32]
 800ad2c:	e07a      	b.n	800ae24 <_strtod_l+0x614>
 800ad2e:	07e2      	lsls	r2, r4, #31
 800ad30:	d505      	bpl.n	800ad3e <_strtod_l+0x52e>
 800ad32:	9b08      	ldr	r3, [sp, #32]
 800ad34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad38:	f7f5 fc5e 	bl	80005f8 <__aeabi_dmul>
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	9a08      	ldr	r2, [sp, #32]
 800ad40:	3208      	adds	r2, #8
 800ad42:	3601      	adds	r6, #1
 800ad44:	1064      	asrs	r4, r4, #1
 800ad46:	9208      	str	r2, [sp, #32]
 800ad48:	e7cd      	b.n	800ace6 <_strtod_l+0x4d6>
 800ad4a:	d0ed      	beq.n	800ad28 <_strtod_l+0x518>
 800ad4c:	4264      	negs	r4, r4
 800ad4e:	f014 020f 	ands.w	r2, r4, #15
 800ad52:	d00a      	beq.n	800ad6a <_strtod_l+0x55a>
 800ad54:	4b12      	ldr	r3, [pc, #72]	@ (800ada0 <_strtod_l+0x590>)
 800ad56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad5a:	4650      	mov	r0, sl
 800ad5c:	4659      	mov	r1, fp
 800ad5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad62:	f7f5 fd73 	bl	800084c <__aeabi_ddiv>
 800ad66:	4682      	mov	sl, r0
 800ad68:	468b      	mov	fp, r1
 800ad6a:	1124      	asrs	r4, r4, #4
 800ad6c:	d0dc      	beq.n	800ad28 <_strtod_l+0x518>
 800ad6e:	2c1f      	cmp	r4, #31
 800ad70:	dd20      	ble.n	800adb4 <_strtod_l+0x5a4>
 800ad72:	2400      	movs	r4, #0
 800ad74:	46a0      	mov	r8, r4
 800ad76:	940a      	str	r4, [sp, #40]	@ 0x28
 800ad78:	46a1      	mov	r9, r4
 800ad7a:	9a05      	ldr	r2, [sp, #20]
 800ad7c:	2322      	movs	r3, #34	@ 0x22
 800ad7e:	f04f 0a00 	mov.w	sl, #0
 800ad82:	f04f 0b00 	mov.w	fp, #0
 800ad86:	6013      	str	r3, [r2, #0]
 800ad88:	e768      	b.n	800ac5c <_strtod_l+0x44c>
 800ad8a:	bf00      	nop
 800ad8c:	0800cf9a 	.word	0x0800cf9a
 800ad90:	0800d1ac 	.word	0x0800d1ac
 800ad94:	0800cf92 	.word	0x0800cf92
 800ad98:	0800cfc7 	.word	0x0800cfc7
 800ad9c:	0800d26f 	.word	0x0800d26f
 800ada0:	0800d0e0 	.word	0x0800d0e0
 800ada4:	0800d0b8 	.word	0x0800d0b8
 800ada8:	7ff00000 	.word	0x7ff00000
 800adac:	7ca00000 	.word	0x7ca00000
 800adb0:	7fefffff 	.word	0x7fefffff
 800adb4:	f014 0310 	ands.w	r3, r4, #16
 800adb8:	bf18      	it	ne
 800adba:	236a      	movne	r3, #106	@ 0x6a
 800adbc:	4ea9      	ldr	r6, [pc, #676]	@ (800b064 <_strtod_l+0x854>)
 800adbe:	9308      	str	r3, [sp, #32]
 800adc0:	4650      	mov	r0, sl
 800adc2:	4659      	mov	r1, fp
 800adc4:	2300      	movs	r3, #0
 800adc6:	07e2      	lsls	r2, r4, #31
 800adc8:	d504      	bpl.n	800add4 <_strtod_l+0x5c4>
 800adca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800adce:	f7f5 fc13 	bl	80005f8 <__aeabi_dmul>
 800add2:	2301      	movs	r3, #1
 800add4:	1064      	asrs	r4, r4, #1
 800add6:	f106 0608 	add.w	r6, r6, #8
 800adda:	d1f4      	bne.n	800adc6 <_strtod_l+0x5b6>
 800addc:	b10b      	cbz	r3, 800ade2 <_strtod_l+0x5d2>
 800adde:	4682      	mov	sl, r0
 800ade0:	468b      	mov	fp, r1
 800ade2:	9b08      	ldr	r3, [sp, #32]
 800ade4:	b1b3      	cbz	r3, 800ae14 <_strtod_l+0x604>
 800ade6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800adea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800adee:	2b00      	cmp	r3, #0
 800adf0:	4659      	mov	r1, fp
 800adf2:	dd0f      	ble.n	800ae14 <_strtod_l+0x604>
 800adf4:	2b1f      	cmp	r3, #31
 800adf6:	dd55      	ble.n	800aea4 <_strtod_l+0x694>
 800adf8:	2b34      	cmp	r3, #52	@ 0x34
 800adfa:	bfde      	ittt	le
 800adfc:	f04f 33ff 	movle.w	r3, #4294967295
 800ae00:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ae04:	4093      	lslle	r3, r2
 800ae06:	f04f 0a00 	mov.w	sl, #0
 800ae0a:	bfcc      	ite	gt
 800ae0c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ae10:	ea03 0b01 	andle.w	fp, r3, r1
 800ae14:	2200      	movs	r2, #0
 800ae16:	2300      	movs	r3, #0
 800ae18:	4650      	mov	r0, sl
 800ae1a:	4659      	mov	r1, fp
 800ae1c:	f7f5 fe54 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae20:	2800      	cmp	r0, #0
 800ae22:	d1a6      	bne.n	800ad72 <_strtod_l+0x562>
 800ae24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae26:	9300      	str	r3, [sp, #0]
 800ae28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ae2a:	9805      	ldr	r0, [sp, #20]
 800ae2c:	462b      	mov	r3, r5
 800ae2e:	463a      	mov	r2, r7
 800ae30:	f7ff f8c6 	bl	8009fc0 <__s2b>
 800ae34:	900a      	str	r0, [sp, #40]	@ 0x28
 800ae36:	2800      	cmp	r0, #0
 800ae38:	f43f af05 	beq.w	800ac46 <_strtod_l+0x436>
 800ae3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae3e:	2a00      	cmp	r2, #0
 800ae40:	eba9 0308 	sub.w	r3, r9, r8
 800ae44:	bfa8      	it	ge
 800ae46:	2300      	movge	r3, #0
 800ae48:	9312      	str	r3, [sp, #72]	@ 0x48
 800ae4a:	2400      	movs	r4, #0
 800ae4c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ae50:	9316      	str	r3, [sp, #88]	@ 0x58
 800ae52:	46a0      	mov	r8, r4
 800ae54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae56:	9805      	ldr	r0, [sp, #20]
 800ae58:	6859      	ldr	r1, [r3, #4]
 800ae5a:	f7ff f809 	bl	8009e70 <_Balloc>
 800ae5e:	4681      	mov	r9, r0
 800ae60:	2800      	cmp	r0, #0
 800ae62:	f43f aef4 	beq.w	800ac4e <_strtod_l+0x43e>
 800ae66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae68:	691a      	ldr	r2, [r3, #16]
 800ae6a:	3202      	adds	r2, #2
 800ae6c:	f103 010c 	add.w	r1, r3, #12
 800ae70:	0092      	lsls	r2, r2, #2
 800ae72:	300c      	adds	r0, #12
 800ae74:	f7fe f89b 	bl	8008fae <memcpy>
 800ae78:	ec4b ab10 	vmov	d0, sl, fp
 800ae7c:	9805      	ldr	r0, [sp, #20]
 800ae7e:	aa1c      	add	r2, sp, #112	@ 0x70
 800ae80:	a91b      	add	r1, sp, #108	@ 0x6c
 800ae82:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ae86:	f7ff fbd7 	bl	800a638 <__d2b>
 800ae8a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	f43f aede 	beq.w	800ac4e <_strtod_l+0x43e>
 800ae92:	9805      	ldr	r0, [sp, #20]
 800ae94:	2101      	movs	r1, #1
 800ae96:	f7ff f929 	bl	800a0ec <__i2b>
 800ae9a:	4680      	mov	r8, r0
 800ae9c:	b948      	cbnz	r0, 800aeb2 <_strtod_l+0x6a2>
 800ae9e:	f04f 0800 	mov.w	r8, #0
 800aea2:	e6d4      	b.n	800ac4e <_strtod_l+0x43e>
 800aea4:	f04f 32ff 	mov.w	r2, #4294967295
 800aea8:	fa02 f303 	lsl.w	r3, r2, r3
 800aeac:	ea03 0a0a 	and.w	sl, r3, sl
 800aeb0:	e7b0      	b.n	800ae14 <_strtod_l+0x604>
 800aeb2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800aeb4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800aeb6:	2d00      	cmp	r5, #0
 800aeb8:	bfab      	itete	ge
 800aeba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800aebc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800aebe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800aec0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800aec2:	bfac      	ite	ge
 800aec4:	18ef      	addge	r7, r5, r3
 800aec6:	1b5e      	sublt	r6, r3, r5
 800aec8:	9b08      	ldr	r3, [sp, #32]
 800aeca:	1aed      	subs	r5, r5, r3
 800aecc:	4415      	add	r5, r2
 800aece:	4b66      	ldr	r3, [pc, #408]	@ (800b068 <_strtod_l+0x858>)
 800aed0:	3d01      	subs	r5, #1
 800aed2:	429d      	cmp	r5, r3
 800aed4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800aed8:	da50      	bge.n	800af7c <_strtod_l+0x76c>
 800aeda:	1b5b      	subs	r3, r3, r5
 800aedc:	2b1f      	cmp	r3, #31
 800aede:	eba2 0203 	sub.w	r2, r2, r3
 800aee2:	f04f 0101 	mov.w	r1, #1
 800aee6:	dc3d      	bgt.n	800af64 <_strtod_l+0x754>
 800aee8:	fa01 f303 	lsl.w	r3, r1, r3
 800aeec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aeee:	2300      	movs	r3, #0
 800aef0:	9310      	str	r3, [sp, #64]	@ 0x40
 800aef2:	18bd      	adds	r5, r7, r2
 800aef4:	9b08      	ldr	r3, [sp, #32]
 800aef6:	42af      	cmp	r7, r5
 800aef8:	4416      	add	r6, r2
 800aefa:	441e      	add	r6, r3
 800aefc:	463b      	mov	r3, r7
 800aefe:	bfa8      	it	ge
 800af00:	462b      	movge	r3, r5
 800af02:	42b3      	cmp	r3, r6
 800af04:	bfa8      	it	ge
 800af06:	4633      	movge	r3, r6
 800af08:	2b00      	cmp	r3, #0
 800af0a:	bfc2      	ittt	gt
 800af0c:	1aed      	subgt	r5, r5, r3
 800af0e:	1af6      	subgt	r6, r6, r3
 800af10:	1aff      	subgt	r7, r7, r3
 800af12:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800af14:	2b00      	cmp	r3, #0
 800af16:	dd16      	ble.n	800af46 <_strtod_l+0x736>
 800af18:	4641      	mov	r1, r8
 800af1a:	9805      	ldr	r0, [sp, #20]
 800af1c:	461a      	mov	r2, r3
 800af1e:	f7ff f9a5 	bl	800a26c <__pow5mult>
 800af22:	4680      	mov	r8, r0
 800af24:	2800      	cmp	r0, #0
 800af26:	d0ba      	beq.n	800ae9e <_strtod_l+0x68e>
 800af28:	4601      	mov	r1, r0
 800af2a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800af2c:	9805      	ldr	r0, [sp, #20]
 800af2e:	f7ff f8f3 	bl	800a118 <__multiply>
 800af32:	900e      	str	r0, [sp, #56]	@ 0x38
 800af34:	2800      	cmp	r0, #0
 800af36:	f43f ae8a 	beq.w	800ac4e <_strtod_l+0x43e>
 800af3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af3c:	9805      	ldr	r0, [sp, #20]
 800af3e:	f7fe ffd7 	bl	8009ef0 <_Bfree>
 800af42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af44:	931a      	str	r3, [sp, #104]	@ 0x68
 800af46:	2d00      	cmp	r5, #0
 800af48:	dc1d      	bgt.n	800af86 <_strtod_l+0x776>
 800af4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	dd23      	ble.n	800af98 <_strtod_l+0x788>
 800af50:	4649      	mov	r1, r9
 800af52:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800af54:	9805      	ldr	r0, [sp, #20]
 800af56:	f7ff f989 	bl	800a26c <__pow5mult>
 800af5a:	4681      	mov	r9, r0
 800af5c:	b9e0      	cbnz	r0, 800af98 <_strtod_l+0x788>
 800af5e:	f04f 0900 	mov.w	r9, #0
 800af62:	e674      	b.n	800ac4e <_strtod_l+0x43e>
 800af64:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800af68:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800af6c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800af70:	35e2      	adds	r5, #226	@ 0xe2
 800af72:	fa01 f305 	lsl.w	r3, r1, r5
 800af76:	9310      	str	r3, [sp, #64]	@ 0x40
 800af78:	9113      	str	r1, [sp, #76]	@ 0x4c
 800af7a:	e7ba      	b.n	800aef2 <_strtod_l+0x6e2>
 800af7c:	2300      	movs	r3, #0
 800af7e:	9310      	str	r3, [sp, #64]	@ 0x40
 800af80:	2301      	movs	r3, #1
 800af82:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af84:	e7b5      	b.n	800aef2 <_strtod_l+0x6e2>
 800af86:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af88:	9805      	ldr	r0, [sp, #20]
 800af8a:	462a      	mov	r2, r5
 800af8c:	f7ff f9c8 	bl	800a320 <__lshift>
 800af90:	901a      	str	r0, [sp, #104]	@ 0x68
 800af92:	2800      	cmp	r0, #0
 800af94:	d1d9      	bne.n	800af4a <_strtod_l+0x73a>
 800af96:	e65a      	b.n	800ac4e <_strtod_l+0x43e>
 800af98:	2e00      	cmp	r6, #0
 800af9a:	dd07      	ble.n	800afac <_strtod_l+0x79c>
 800af9c:	4649      	mov	r1, r9
 800af9e:	9805      	ldr	r0, [sp, #20]
 800afa0:	4632      	mov	r2, r6
 800afa2:	f7ff f9bd 	bl	800a320 <__lshift>
 800afa6:	4681      	mov	r9, r0
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d0d8      	beq.n	800af5e <_strtod_l+0x74e>
 800afac:	2f00      	cmp	r7, #0
 800afae:	dd08      	ble.n	800afc2 <_strtod_l+0x7b2>
 800afb0:	4641      	mov	r1, r8
 800afb2:	9805      	ldr	r0, [sp, #20]
 800afb4:	463a      	mov	r2, r7
 800afb6:	f7ff f9b3 	bl	800a320 <__lshift>
 800afba:	4680      	mov	r8, r0
 800afbc:	2800      	cmp	r0, #0
 800afbe:	f43f ae46 	beq.w	800ac4e <_strtod_l+0x43e>
 800afc2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afc4:	9805      	ldr	r0, [sp, #20]
 800afc6:	464a      	mov	r2, r9
 800afc8:	f7ff fa32 	bl	800a430 <__mdiff>
 800afcc:	4604      	mov	r4, r0
 800afce:	2800      	cmp	r0, #0
 800afd0:	f43f ae3d 	beq.w	800ac4e <_strtod_l+0x43e>
 800afd4:	68c3      	ldr	r3, [r0, #12]
 800afd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800afd8:	2300      	movs	r3, #0
 800afda:	60c3      	str	r3, [r0, #12]
 800afdc:	4641      	mov	r1, r8
 800afde:	f7ff fa0b 	bl	800a3f8 <__mcmp>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	da46      	bge.n	800b074 <_strtod_l+0x864>
 800afe6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afe8:	ea53 030a 	orrs.w	r3, r3, sl
 800afec:	d16c      	bne.n	800b0c8 <_strtod_l+0x8b8>
 800afee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d168      	bne.n	800b0c8 <_strtod_l+0x8b8>
 800aff6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800affa:	0d1b      	lsrs	r3, r3, #20
 800affc:	051b      	lsls	r3, r3, #20
 800affe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b002:	d961      	bls.n	800b0c8 <_strtod_l+0x8b8>
 800b004:	6963      	ldr	r3, [r4, #20]
 800b006:	b913      	cbnz	r3, 800b00e <_strtod_l+0x7fe>
 800b008:	6923      	ldr	r3, [r4, #16]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	dd5c      	ble.n	800b0c8 <_strtod_l+0x8b8>
 800b00e:	4621      	mov	r1, r4
 800b010:	2201      	movs	r2, #1
 800b012:	9805      	ldr	r0, [sp, #20]
 800b014:	f7ff f984 	bl	800a320 <__lshift>
 800b018:	4641      	mov	r1, r8
 800b01a:	4604      	mov	r4, r0
 800b01c:	f7ff f9ec 	bl	800a3f8 <__mcmp>
 800b020:	2800      	cmp	r0, #0
 800b022:	dd51      	ble.n	800b0c8 <_strtod_l+0x8b8>
 800b024:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b028:	9a08      	ldr	r2, [sp, #32]
 800b02a:	0d1b      	lsrs	r3, r3, #20
 800b02c:	051b      	lsls	r3, r3, #20
 800b02e:	2a00      	cmp	r2, #0
 800b030:	d06b      	beq.n	800b10a <_strtod_l+0x8fa>
 800b032:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b036:	d868      	bhi.n	800b10a <_strtod_l+0x8fa>
 800b038:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b03c:	f67f ae9d 	bls.w	800ad7a <_strtod_l+0x56a>
 800b040:	4b0a      	ldr	r3, [pc, #40]	@ (800b06c <_strtod_l+0x85c>)
 800b042:	4650      	mov	r0, sl
 800b044:	4659      	mov	r1, fp
 800b046:	2200      	movs	r2, #0
 800b048:	f7f5 fad6 	bl	80005f8 <__aeabi_dmul>
 800b04c:	4b08      	ldr	r3, [pc, #32]	@ (800b070 <_strtod_l+0x860>)
 800b04e:	400b      	ands	r3, r1
 800b050:	4682      	mov	sl, r0
 800b052:	468b      	mov	fp, r1
 800b054:	2b00      	cmp	r3, #0
 800b056:	f47f ae05 	bne.w	800ac64 <_strtod_l+0x454>
 800b05a:	9a05      	ldr	r2, [sp, #20]
 800b05c:	2322      	movs	r3, #34	@ 0x22
 800b05e:	6013      	str	r3, [r2, #0]
 800b060:	e600      	b.n	800ac64 <_strtod_l+0x454>
 800b062:	bf00      	nop
 800b064:	0800d1d8 	.word	0x0800d1d8
 800b068:	fffffc02 	.word	0xfffffc02
 800b06c:	39500000 	.word	0x39500000
 800b070:	7ff00000 	.word	0x7ff00000
 800b074:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b078:	d165      	bne.n	800b146 <_strtod_l+0x936>
 800b07a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b07c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b080:	b35a      	cbz	r2, 800b0da <_strtod_l+0x8ca>
 800b082:	4a9f      	ldr	r2, [pc, #636]	@ (800b300 <_strtod_l+0xaf0>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d12b      	bne.n	800b0e0 <_strtod_l+0x8d0>
 800b088:	9b08      	ldr	r3, [sp, #32]
 800b08a:	4651      	mov	r1, sl
 800b08c:	b303      	cbz	r3, 800b0d0 <_strtod_l+0x8c0>
 800b08e:	4b9d      	ldr	r3, [pc, #628]	@ (800b304 <_strtod_l+0xaf4>)
 800b090:	465a      	mov	r2, fp
 800b092:	4013      	ands	r3, r2
 800b094:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b098:	f04f 32ff 	mov.w	r2, #4294967295
 800b09c:	d81b      	bhi.n	800b0d6 <_strtod_l+0x8c6>
 800b09e:	0d1b      	lsrs	r3, r3, #20
 800b0a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b0a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a8:	4299      	cmp	r1, r3
 800b0aa:	d119      	bne.n	800b0e0 <_strtod_l+0x8d0>
 800b0ac:	4b96      	ldr	r3, [pc, #600]	@ (800b308 <_strtod_l+0xaf8>)
 800b0ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d102      	bne.n	800b0ba <_strtod_l+0x8aa>
 800b0b4:	3101      	adds	r1, #1
 800b0b6:	f43f adca 	beq.w	800ac4e <_strtod_l+0x43e>
 800b0ba:	4b92      	ldr	r3, [pc, #584]	@ (800b304 <_strtod_l+0xaf4>)
 800b0bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0be:	401a      	ands	r2, r3
 800b0c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b0c4:	f04f 0a00 	mov.w	sl, #0
 800b0c8:	9b08      	ldr	r3, [sp, #32]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1b8      	bne.n	800b040 <_strtod_l+0x830>
 800b0ce:	e5c9      	b.n	800ac64 <_strtod_l+0x454>
 800b0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d4:	e7e8      	b.n	800b0a8 <_strtod_l+0x898>
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	e7e6      	b.n	800b0a8 <_strtod_l+0x898>
 800b0da:	ea53 030a 	orrs.w	r3, r3, sl
 800b0de:	d0a1      	beq.n	800b024 <_strtod_l+0x814>
 800b0e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b0e2:	b1db      	cbz	r3, 800b11c <_strtod_l+0x90c>
 800b0e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0e6:	4213      	tst	r3, r2
 800b0e8:	d0ee      	beq.n	800b0c8 <_strtod_l+0x8b8>
 800b0ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0ec:	9a08      	ldr	r2, [sp, #32]
 800b0ee:	4650      	mov	r0, sl
 800b0f0:	4659      	mov	r1, fp
 800b0f2:	b1bb      	cbz	r3, 800b124 <_strtod_l+0x914>
 800b0f4:	f7ff fb6e 	bl	800a7d4 <sulp>
 800b0f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0fc:	ec53 2b10 	vmov	r2, r3, d0
 800b100:	f7f5 f8c4 	bl	800028c <__adddf3>
 800b104:	4682      	mov	sl, r0
 800b106:	468b      	mov	fp, r1
 800b108:	e7de      	b.n	800b0c8 <_strtod_l+0x8b8>
 800b10a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b10e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b112:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b116:	f04f 3aff 	mov.w	sl, #4294967295
 800b11a:	e7d5      	b.n	800b0c8 <_strtod_l+0x8b8>
 800b11c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b11e:	ea13 0f0a 	tst.w	r3, sl
 800b122:	e7e1      	b.n	800b0e8 <_strtod_l+0x8d8>
 800b124:	f7ff fb56 	bl	800a7d4 <sulp>
 800b128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b12c:	ec53 2b10 	vmov	r2, r3, d0
 800b130:	f7f5 f8aa 	bl	8000288 <__aeabi_dsub>
 800b134:	2200      	movs	r2, #0
 800b136:	2300      	movs	r3, #0
 800b138:	4682      	mov	sl, r0
 800b13a:	468b      	mov	fp, r1
 800b13c:	f7f5 fcc4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b140:	2800      	cmp	r0, #0
 800b142:	d0c1      	beq.n	800b0c8 <_strtod_l+0x8b8>
 800b144:	e619      	b.n	800ad7a <_strtod_l+0x56a>
 800b146:	4641      	mov	r1, r8
 800b148:	4620      	mov	r0, r4
 800b14a:	f7ff facd 	bl	800a6e8 <__ratio>
 800b14e:	ec57 6b10 	vmov	r6, r7, d0
 800b152:	2200      	movs	r2, #0
 800b154:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b158:	4630      	mov	r0, r6
 800b15a:	4639      	mov	r1, r7
 800b15c:	f7f5 fcc8 	bl	8000af0 <__aeabi_dcmple>
 800b160:	2800      	cmp	r0, #0
 800b162:	d06f      	beq.n	800b244 <_strtod_l+0xa34>
 800b164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b166:	2b00      	cmp	r3, #0
 800b168:	d17a      	bne.n	800b260 <_strtod_l+0xa50>
 800b16a:	f1ba 0f00 	cmp.w	sl, #0
 800b16e:	d158      	bne.n	800b222 <_strtod_l+0xa12>
 800b170:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b172:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b176:	2b00      	cmp	r3, #0
 800b178:	d15a      	bne.n	800b230 <_strtod_l+0xa20>
 800b17a:	4b64      	ldr	r3, [pc, #400]	@ (800b30c <_strtod_l+0xafc>)
 800b17c:	2200      	movs	r2, #0
 800b17e:	4630      	mov	r0, r6
 800b180:	4639      	mov	r1, r7
 800b182:	f7f5 fcab 	bl	8000adc <__aeabi_dcmplt>
 800b186:	2800      	cmp	r0, #0
 800b188:	d159      	bne.n	800b23e <_strtod_l+0xa2e>
 800b18a:	4630      	mov	r0, r6
 800b18c:	4639      	mov	r1, r7
 800b18e:	4b60      	ldr	r3, [pc, #384]	@ (800b310 <_strtod_l+0xb00>)
 800b190:	2200      	movs	r2, #0
 800b192:	f7f5 fa31 	bl	80005f8 <__aeabi_dmul>
 800b196:	4606      	mov	r6, r0
 800b198:	460f      	mov	r7, r1
 800b19a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b19e:	9606      	str	r6, [sp, #24]
 800b1a0:	9307      	str	r3, [sp, #28]
 800b1a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1a6:	4d57      	ldr	r5, [pc, #348]	@ (800b304 <_strtod_l+0xaf4>)
 800b1a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b1ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1ae:	401d      	ands	r5, r3
 800b1b0:	4b58      	ldr	r3, [pc, #352]	@ (800b314 <_strtod_l+0xb04>)
 800b1b2:	429d      	cmp	r5, r3
 800b1b4:	f040 80b2 	bne.w	800b31c <_strtod_l+0xb0c>
 800b1b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b1be:	ec4b ab10 	vmov	d0, sl, fp
 800b1c2:	f7ff f9c9 	bl	800a558 <__ulp>
 800b1c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1ca:	ec51 0b10 	vmov	r0, r1, d0
 800b1ce:	f7f5 fa13 	bl	80005f8 <__aeabi_dmul>
 800b1d2:	4652      	mov	r2, sl
 800b1d4:	465b      	mov	r3, fp
 800b1d6:	f7f5 f859 	bl	800028c <__adddf3>
 800b1da:	460b      	mov	r3, r1
 800b1dc:	4949      	ldr	r1, [pc, #292]	@ (800b304 <_strtod_l+0xaf4>)
 800b1de:	4a4e      	ldr	r2, [pc, #312]	@ (800b318 <_strtod_l+0xb08>)
 800b1e0:	4019      	ands	r1, r3
 800b1e2:	4291      	cmp	r1, r2
 800b1e4:	4682      	mov	sl, r0
 800b1e6:	d942      	bls.n	800b26e <_strtod_l+0xa5e>
 800b1e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b1ea:	4b47      	ldr	r3, [pc, #284]	@ (800b308 <_strtod_l+0xaf8>)
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d103      	bne.n	800b1f8 <_strtod_l+0x9e8>
 800b1f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	f43f ad2b 	beq.w	800ac4e <_strtod_l+0x43e>
 800b1f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b308 <_strtod_l+0xaf8>
 800b1fc:	f04f 3aff 	mov.w	sl, #4294967295
 800b200:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b202:	9805      	ldr	r0, [sp, #20]
 800b204:	f7fe fe74 	bl	8009ef0 <_Bfree>
 800b208:	9805      	ldr	r0, [sp, #20]
 800b20a:	4649      	mov	r1, r9
 800b20c:	f7fe fe70 	bl	8009ef0 <_Bfree>
 800b210:	9805      	ldr	r0, [sp, #20]
 800b212:	4641      	mov	r1, r8
 800b214:	f7fe fe6c 	bl	8009ef0 <_Bfree>
 800b218:	9805      	ldr	r0, [sp, #20]
 800b21a:	4621      	mov	r1, r4
 800b21c:	f7fe fe68 	bl	8009ef0 <_Bfree>
 800b220:	e618      	b.n	800ae54 <_strtod_l+0x644>
 800b222:	f1ba 0f01 	cmp.w	sl, #1
 800b226:	d103      	bne.n	800b230 <_strtod_l+0xa20>
 800b228:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f43f ada5 	beq.w	800ad7a <_strtod_l+0x56a>
 800b230:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b2e0 <_strtod_l+0xad0>
 800b234:	4f35      	ldr	r7, [pc, #212]	@ (800b30c <_strtod_l+0xafc>)
 800b236:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b23a:	2600      	movs	r6, #0
 800b23c:	e7b1      	b.n	800b1a2 <_strtod_l+0x992>
 800b23e:	4f34      	ldr	r7, [pc, #208]	@ (800b310 <_strtod_l+0xb00>)
 800b240:	2600      	movs	r6, #0
 800b242:	e7aa      	b.n	800b19a <_strtod_l+0x98a>
 800b244:	4b32      	ldr	r3, [pc, #200]	@ (800b310 <_strtod_l+0xb00>)
 800b246:	4630      	mov	r0, r6
 800b248:	4639      	mov	r1, r7
 800b24a:	2200      	movs	r2, #0
 800b24c:	f7f5 f9d4 	bl	80005f8 <__aeabi_dmul>
 800b250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b252:	4606      	mov	r6, r0
 800b254:	460f      	mov	r7, r1
 800b256:	2b00      	cmp	r3, #0
 800b258:	d09f      	beq.n	800b19a <_strtod_l+0x98a>
 800b25a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b25e:	e7a0      	b.n	800b1a2 <_strtod_l+0x992>
 800b260:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b2e8 <_strtod_l+0xad8>
 800b264:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b268:	ec57 6b17 	vmov	r6, r7, d7
 800b26c:	e799      	b.n	800b1a2 <_strtod_l+0x992>
 800b26e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b272:	9b08      	ldr	r3, [sp, #32]
 800b274:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d1c1      	bne.n	800b200 <_strtod_l+0x9f0>
 800b27c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b280:	0d1b      	lsrs	r3, r3, #20
 800b282:	051b      	lsls	r3, r3, #20
 800b284:	429d      	cmp	r5, r3
 800b286:	d1bb      	bne.n	800b200 <_strtod_l+0x9f0>
 800b288:	4630      	mov	r0, r6
 800b28a:	4639      	mov	r1, r7
 800b28c:	f7f5 fcfc 	bl	8000c88 <__aeabi_d2lz>
 800b290:	f7f5 f984 	bl	800059c <__aeabi_l2d>
 800b294:	4602      	mov	r2, r0
 800b296:	460b      	mov	r3, r1
 800b298:	4630      	mov	r0, r6
 800b29a:	4639      	mov	r1, r7
 800b29c:	f7f4 fff4 	bl	8000288 <__aeabi_dsub>
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b2a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b2ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2ae:	ea46 060a 	orr.w	r6, r6, sl
 800b2b2:	431e      	orrs	r6, r3
 800b2b4:	d06f      	beq.n	800b396 <_strtod_l+0xb86>
 800b2b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b2f0 <_strtod_l+0xae0>)
 800b2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2bc:	f7f5 fc0e 	bl	8000adc <__aeabi_dcmplt>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	f47f accf 	bne.w	800ac64 <_strtod_l+0x454>
 800b2c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b2f8 <_strtod_l+0xae8>)
 800b2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2d0:	f7f5 fc22 	bl	8000b18 <__aeabi_dcmpgt>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	d093      	beq.n	800b200 <_strtod_l+0x9f0>
 800b2d8:	e4c4      	b.n	800ac64 <_strtod_l+0x454>
 800b2da:	bf00      	nop
 800b2dc:	f3af 8000 	nop.w
 800b2e0:	00000000 	.word	0x00000000
 800b2e4:	bff00000 	.word	0xbff00000
 800b2e8:	00000000 	.word	0x00000000
 800b2ec:	3ff00000 	.word	0x3ff00000
 800b2f0:	94a03595 	.word	0x94a03595
 800b2f4:	3fdfffff 	.word	0x3fdfffff
 800b2f8:	35afe535 	.word	0x35afe535
 800b2fc:	3fe00000 	.word	0x3fe00000
 800b300:	000fffff 	.word	0x000fffff
 800b304:	7ff00000 	.word	0x7ff00000
 800b308:	7fefffff 	.word	0x7fefffff
 800b30c:	3ff00000 	.word	0x3ff00000
 800b310:	3fe00000 	.word	0x3fe00000
 800b314:	7fe00000 	.word	0x7fe00000
 800b318:	7c9fffff 	.word	0x7c9fffff
 800b31c:	9b08      	ldr	r3, [sp, #32]
 800b31e:	b323      	cbz	r3, 800b36a <_strtod_l+0xb5a>
 800b320:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b324:	d821      	bhi.n	800b36a <_strtod_l+0xb5a>
 800b326:	a328      	add	r3, pc, #160	@ (adr r3, 800b3c8 <_strtod_l+0xbb8>)
 800b328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32c:	4630      	mov	r0, r6
 800b32e:	4639      	mov	r1, r7
 800b330:	f7f5 fbde 	bl	8000af0 <__aeabi_dcmple>
 800b334:	b1a0      	cbz	r0, 800b360 <_strtod_l+0xb50>
 800b336:	4639      	mov	r1, r7
 800b338:	4630      	mov	r0, r6
 800b33a:	f7f5 fc35 	bl	8000ba8 <__aeabi_d2uiz>
 800b33e:	2801      	cmp	r0, #1
 800b340:	bf38      	it	cc
 800b342:	2001      	movcc	r0, #1
 800b344:	f7f5 f8de 	bl	8000504 <__aeabi_ui2d>
 800b348:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b34a:	4606      	mov	r6, r0
 800b34c:	460f      	mov	r7, r1
 800b34e:	b9fb      	cbnz	r3, 800b390 <_strtod_l+0xb80>
 800b350:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b354:	9014      	str	r0, [sp, #80]	@ 0x50
 800b356:	9315      	str	r3, [sp, #84]	@ 0x54
 800b358:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b35c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b360:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b362:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b366:	1b5b      	subs	r3, r3, r5
 800b368:	9311      	str	r3, [sp, #68]	@ 0x44
 800b36a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b36e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b372:	f7ff f8f1 	bl	800a558 <__ulp>
 800b376:	4650      	mov	r0, sl
 800b378:	ec53 2b10 	vmov	r2, r3, d0
 800b37c:	4659      	mov	r1, fp
 800b37e:	f7f5 f93b 	bl	80005f8 <__aeabi_dmul>
 800b382:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b386:	f7f4 ff81 	bl	800028c <__adddf3>
 800b38a:	4682      	mov	sl, r0
 800b38c:	468b      	mov	fp, r1
 800b38e:	e770      	b.n	800b272 <_strtod_l+0xa62>
 800b390:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b394:	e7e0      	b.n	800b358 <_strtod_l+0xb48>
 800b396:	a30e      	add	r3, pc, #56	@ (adr r3, 800b3d0 <_strtod_l+0xbc0>)
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	f7f5 fb9e 	bl	8000adc <__aeabi_dcmplt>
 800b3a0:	e798      	b.n	800b2d4 <_strtod_l+0xac4>
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b3a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3aa:	6013      	str	r3, [r2, #0]
 800b3ac:	f7ff ba6d 	b.w	800a88a <_strtod_l+0x7a>
 800b3b0:	2a65      	cmp	r2, #101	@ 0x65
 800b3b2:	f43f ab66 	beq.w	800aa82 <_strtod_l+0x272>
 800b3b6:	2a45      	cmp	r2, #69	@ 0x45
 800b3b8:	f43f ab63 	beq.w	800aa82 <_strtod_l+0x272>
 800b3bc:	2301      	movs	r3, #1
 800b3be:	f7ff bb9e 	b.w	800aafe <_strtod_l+0x2ee>
 800b3c2:	bf00      	nop
 800b3c4:	f3af 8000 	nop.w
 800b3c8:	ffc00000 	.word	0xffc00000
 800b3cc:	41dfffff 	.word	0x41dfffff
 800b3d0:	94a03595 	.word	0x94a03595
 800b3d4:	3fcfffff 	.word	0x3fcfffff

0800b3d8 <_strtod_r>:
 800b3d8:	4b01      	ldr	r3, [pc, #4]	@ (800b3e0 <_strtod_r+0x8>)
 800b3da:	f7ff ba19 	b.w	800a810 <_strtod_l>
 800b3de:	bf00      	nop
 800b3e0:	2000007c 	.word	0x2000007c

0800b3e4 <__ssputs_r>:
 800b3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e8:	688e      	ldr	r6, [r1, #8]
 800b3ea:	461f      	mov	r7, r3
 800b3ec:	42be      	cmp	r6, r7
 800b3ee:	680b      	ldr	r3, [r1, #0]
 800b3f0:	4682      	mov	sl, r0
 800b3f2:	460c      	mov	r4, r1
 800b3f4:	4690      	mov	r8, r2
 800b3f6:	d82d      	bhi.n	800b454 <__ssputs_r+0x70>
 800b3f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b3fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b400:	d026      	beq.n	800b450 <__ssputs_r+0x6c>
 800b402:	6965      	ldr	r5, [r4, #20]
 800b404:	6909      	ldr	r1, [r1, #16]
 800b406:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b40a:	eba3 0901 	sub.w	r9, r3, r1
 800b40e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b412:	1c7b      	adds	r3, r7, #1
 800b414:	444b      	add	r3, r9
 800b416:	106d      	asrs	r5, r5, #1
 800b418:	429d      	cmp	r5, r3
 800b41a:	bf38      	it	cc
 800b41c:	461d      	movcc	r5, r3
 800b41e:	0553      	lsls	r3, r2, #21
 800b420:	d527      	bpl.n	800b472 <__ssputs_r+0x8e>
 800b422:	4629      	mov	r1, r5
 800b424:	f7fe fc98 	bl	8009d58 <_malloc_r>
 800b428:	4606      	mov	r6, r0
 800b42a:	b360      	cbz	r0, 800b486 <__ssputs_r+0xa2>
 800b42c:	6921      	ldr	r1, [r4, #16]
 800b42e:	464a      	mov	r2, r9
 800b430:	f7fd fdbd 	bl	8008fae <memcpy>
 800b434:	89a3      	ldrh	r3, [r4, #12]
 800b436:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b43a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b43e:	81a3      	strh	r3, [r4, #12]
 800b440:	6126      	str	r6, [r4, #16]
 800b442:	6165      	str	r5, [r4, #20]
 800b444:	444e      	add	r6, r9
 800b446:	eba5 0509 	sub.w	r5, r5, r9
 800b44a:	6026      	str	r6, [r4, #0]
 800b44c:	60a5      	str	r5, [r4, #8]
 800b44e:	463e      	mov	r6, r7
 800b450:	42be      	cmp	r6, r7
 800b452:	d900      	bls.n	800b456 <__ssputs_r+0x72>
 800b454:	463e      	mov	r6, r7
 800b456:	6820      	ldr	r0, [r4, #0]
 800b458:	4632      	mov	r2, r6
 800b45a:	4641      	mov	r1, r8
 800b45c:	f000 fe4b 	bl	800c0f6 <memmove>
 800b460:	68a3      	ldr	r3, [r4, #8]
 800b462:	1b9b      	subs	r3, r3, r6
 800b464:	60a3      	str	r3, [r4, #8]
 800b466:	6823      	ldr	r3, [r4, #0]
 800b468:	4433      	add	r3, r6
 800b46a:	6023      	str	r3, [r4, #0]
 800b46c:	2000      	movs	r0, #0
 800b46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b472:	462a      	mov	r2, r5
 800b474:	f001 fa11 	bl	800c89a <_realloc_r>
 800b478:	4606      	mov	r6, r0
 800b47a:	2800      	cmp	r0, #0
 800b47c:	d1e0      	bne.n	800b440 <__ssputs_r+0x5c>
 800b47e:	6921      	ldr	r1, [r4, #16]
 800b480:	4650      	mov	r0, sl
 800b482:	f7fe fbf5 	bl	8009c70 <_free_r>
 800b486:	230c      	movs	r3, #12
 800b488:	f8ca 3000 	str.w	r3, [sl]
 800b48c:	89a3      	ldrh	r3, [r4, #12]
 800b48e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b492:	81a3      	strh	r3, [r4, #12]
 800b494:	f04f 30ff 	mov.w	r0, #4294967295
 800b498:	e7e9      	b.n	800b46e <__ssputs_r+0x8a>
	...

0800b49c <_svfiprintf_r>:
 800b49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a0:	4698      	mov	r8, r3
 800b4a2:	898b      	ldrh	r3, [r1, #12]
 800b4a4:	061b      	lsls	r3, r3, #24
 800b4a6:	b09d      	sub	sp, #116	@ 0x74
 800b4a8:	4607      	mov	r7, r0
 800b4aa:	460d      	mov	r5, r1
 800b4ac:	4614      	mov	r4, r2
 800b4ae:	d510      	bpl.n	800b4d2 <_svfiprintf_r+0x36>
 800b4b0:	690b      	ldr	r3, [r1, #16]
 800b4b2:	b973      	cbnz	r3, 800b4d2 <_svfiprintf_r+0x36>
 800b4b4:	2140      	movs	r1, #64	@ 0x40
 800b4b6:	f7fe fc4f 	bl	8009d58 <_malloc_r>
 800b4ba:	6028      	str	r0, [r5, #0]
 800b4bc:	6128      	str	r0, [r5, #16]
 800b4be:	b930      	cbnz	r0, 800b4ce <_svfiprintf_r+0x32>
 800b4c0:	230c      	movs	r3, #12
 800b4c2:	603b      	str	r3, [r7, #0]
 800b4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c8:	b01d      	add	sp, #116	@ 0x74
 800b4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ce:	2340      	movs	r3, #64	@ 0x40
 800b4d0:	616b      	str	r3, [r5, #20]
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4d6:	2320      	movs	r3, #32
 800b4d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b4dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4e0:	2330      	movs	r3, #48	@ 0x30
 800b4e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b680 <_svfiprintf_r+0x1e4>
 800b4e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4ea:	f04f 0901 	mov.w	r9, #1
 800b4ee:	4623      	mov	r3, r4
 800b4f0:	469a      	mov	sl, r3
 800b4f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4f6:	b10a      	cbz	r2, 800b4fc <_svfiprintf_r+0x60>
 800b4f8:	2a25      	cmp	r2, #37	@ 0x25
 800b4fa:	d1f9      	bne.n	800b4f0 <_svfiprintf_r+0x54>
 800b4fc:	ebba 0b04 	subs.w	fp, sl, r4
 800b500:	d00b      	beq.n	800b51a <_svfiprintf_r+0x7e>
 800b502:	465b      	mov	r3, fp
 800b504:	4622      	mov	r2, r4
 800b506:	4629      	mov	r1, r5
 800b508:	4638      	mov	r0, r7
 800b50a:	f7ff ff6b 	bl	800b3e4 <__ssputs_r>
 800b50e:	3001      	adds	r0, #1
 800b510:	f000 80a7 	beq.w	800b662 <_svfiprintf_r+0x1c6>
 800b514:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b516:	445a      	add	r2, fp
 800b518:	9209      	str	r2, [sp, #36]	@ 0x24
 800b51a:	f89a 3000 	ldrb.w	r3, [sl]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	f000 809f 	beq.w	800b662 <_svfiprintf_r+0x1c6>
 800b524:	2300      	movs	r3, #0
 800b526:	f04f 32ff 	mov.w	r2, #4294967295
 800b52a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b52e:	f10a 0a01 	add.w	sl, sl, #1
 800b532:	9304      	str	r3, [sp, #16]
 800b534:	9307      	str	r3, [sp, #28]
 800b536:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b53a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b53c:	4654      	mov	r4, sl
 800b53e:	2205      	movs	r2, #5
 800b540:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b544:	484e      	ldr	r0, [pc, #312]	@ (800b680 <_svfiprintf_r+0x1e4>)
 800b546:	f7f4 fe43 	bl	80001d0 <memchr>
 800b54a:	9a04      	ldr	r2, [sp, #16]
 800b54c:	b9d8      	cbnz	r0, 800b586 <_svfiprintf_r+0xea>
 800b54e:	06d0      	lsls	r0, r2, #27
 800b550:	bf44      	itt	mi
 800b552:	2320      	movmi	r3, #32
 800b554:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b558:	0711      	lsls	r1, r2, #28
 800b55a:	bf44      	itt	mi
 800b55c:	232b      	movmi	r3, #43	@ 0x2b
 800b55e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b562:	f89a 3000 	ldrb.w	r3, [sl]
 800b566:	2b2a      	cmp	r3, #42	@ 0x2a
 800b568:	d015      	beq.n	800b596 <_svfiprintf_r+0xfa>
 800b56a:	9a07      	ldr	r2, [sp, #28]
 800b56c:	4654      	mov	r4, sl
 800b56e:	2000      	movs	r0, #0
 800b570:	f04f 0c0a 	mov.w	ip, #10
 800b574:	4621      	mov	r1, r4
 800b576:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b57a:	3b30      	subs	r3, #48	@ 0x30
 800b57c:	2b09      	cmp	r3, #9
 800b57e:	d94b      	bls.n	800b618 <_svfiprintf_r+0x17c>
 800b580:	b1b0      	cbz	r0, 800b5b0 <_svfiprintf_r+0x114>
 800b582:	9207      	str	r2, [sp, #28]
 800b584:	e014      	b.n	800b5b0 <_svfiprintf_r+0x114>
 800b586:	eba0 0308 	sub.w	r3, r0, r8
 800b58a:	fa09 f303 	lsl.w	r3, r9, r3
 800b58e:	4313      	orrs	r3, r2
 800b590:	9304      	str	r3, [sp, #16]
 800b592:	46a2      	mov	sl, r4
 800b594:	e7d2      	b.n	800b53c <_svfiprintf_r+0xa0>
 800b596:	9b03      	ldr	r3, [sp, #12]
 800b598:	1d19      	adds	r1, r3, #4
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	9103      	str	r1, [sp, #12]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	bfbb      	ittet	lt
 800b5a2:	425b      	neglt	r3, r3
 800b5a4:	f042 0202 	orrlt.w	r2, r2, #2
 800b5a8:	9307      	strge	r3, [sp, #28]
 800b5aa:	9307      	strlt	r3, [sp, #28]
 800b5ac:	bfb8      	it	lt
 800b5ae:	9204      	strlt	r2, [sp, #16]
 800b5b0:	7823      	ldrb	r3, [r4, #0]
 800b5b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5b4:	d10a      	bne.n	800b5cc <_svfiprintf_r+0x130>
 800b5b6:	7863      	ldrb	r3, [r4, #1]
 800b5b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5ba:	d132      	bne.n	800b622 <_svfiprintf_r+0x186>
 800b5bc:	9b03      	ldr	r3, [sp, #12]
 800b5be:	1d1a      	adds	r2, r3, #4
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	9203      	str	r2, [sp, #12]
 800b5c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b5c8:	3402      	adds	r4, #2
 800b5ca:	9305      	str	r3, [sp, #20]
 800b5cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b690 <_svfiprintf_r+0x1f4>
 800b5d0:	7821      	ldrb	r1, [r4, #0]
 800b5d2:	2203      	movs	r2, #3
 800b5d4:	4650      	mov	r0, sl
 800b5d6:	f7f4 fdfb 	bl	80001d0 <memchr>
 800b5da:	b138      	cbz	r0, 800b5ec <_svfiprintf_r+0x150>
 800b5dc:	9b04      	ldr	r3, [sp, #16]
 800b5de:	eba0 000a 	sub.w	r0, r0, sl
 800b5e2:	2240      	movs	r2, #64	@ 0x40
 800b5e4:	4082      	lsls	r2, r0
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	3401      	adds	r4, #1
 800b5ea:	9304      	str	r3, [sp, #16]
 800b5ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5f0:	4824      	ldr	r0, [pc, #144]	@ (800b684 <_svfiprintf_r+0x1e8>)
 800b5f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5f6:	2206      	movs	r2, #6
 800b5f8:	f7f4 fdea 	bl	80001d0 <memchr>
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	d036      	beq.n	800b66e <_svfiprintf_r+0x1d2>
 800b600:	4b21      	ldr	r3, [pc, #132]	@ (800b688 <_svfiprintf_r+0x1ec>)
 800b602:	bb1b      	cbnz	r3, 800b64c <_svfiprintf_r+0x1b0>
 800b604:	9b03      	ldr	r3, [sp, #12]
 800b606:	3307      	adds	r3, #7
 800b608:	f023 0307 	bic.w	r3, r3, #7
 800b60c:	3308      	adds	r3, #8
 800b60e:	9303      	str	r3, [sp, #12]
 800b610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b612:	4433      	add	r3, r6
 800b614:	9309      	str	r3, [sp, #36]	@ 0x24
 800b616:	e76a      	b.n	800b4ee <_svfiprintf_r+0x52>
 800b618:	fb0c 3202 	mla	r2, ip, r2, r3
 800b61c:	460c      	mov	r4, r1
 800b61e:	2001      	movs	r0, #1
 800b620:	e7a8      	b.n	800b574 <_svfiprintf_r+0xd8>
 800b622:	2300      	movs	r3, #0
 800b624:	3401      	adds	r4, #1
 800b626:	9305      	str	r3, [sp, #20]
 800b628:	4619      	mov	r1, r3
 800b62a:	f04f 0c0a 	mov.w	ip, #10
 800b62e:	4620      	mov	r0, r4
 800b630:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b634:	3a30      	subs	r2, #48	@ 0x30
 800b636:	2a09      	cmp	r2, #9
 800b638:	d903      	bls.n	800b642 <_svfiprintf_r+0x1a6>
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d0c6      	beq.n	800b5cc <_svfiprintf_r+0x130>
 800b63e:	9105      	str	r1, [sp, #20]
 800b640:	e7c4      	b.n	800b5cc <_svfiprintf_r+0x130>
 800b642:	fb0c 2101 	mla	r1, ip, r1, r2
 800b646:	4604      	mov	r4, r0
 800b648:	2301      	movs	r3, #1
 800b64a:	e7f0      	b.n	800b62e <_svfiprintf_r+0x192>
 800b64c:	ab03      	add	r3, sp, #12
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	462a      	mov	r2, r5
 800b652:	4b0e      	ldr	r3, [pc, #56]	@ (800b68c <_svfiprintf_r+0x1f0>)
 800b654:	a904      	add	r1, sp, #16
 800b656:	4638      	mov	r0, r7
 800b658:	f7fc fb36 	bl	8007cc8 <_printf_float>
 800b65c:	1c42      	adds	r2, r0, #1
 800b65e:	4606      	mov	r6, r0
 800b660:	d1d6      	bne.n	800b610 <_svfiprintf_r+0x174>
 800b662:	89ab      	ldrh	r3, [r5, #12]
 800b664:	065b      	lsls	r3, r3, #25
 800b666:	f53f af2d 	bmi.w	800b4c4 <_svfiprintf_r+0x28>
 800b66a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b66c:	e72c      	b.n	800b4c8 <_svfiprintf_r+0x2c>
 800b66e:	ab03      	add	r3, sp, #12
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	462a      	mov	r2, r5
 800b674:	4b05      	ldr	r3, [pc, #20]	@ (800b68c <_svfiprintf_r+0x1f0>)
 800b676:	a904      	add	r1, sp, #16
 800b678:	4638      	mov	r0, r7
 800b67a:	f7fc fdbd 	bl	80081f8 <_printf_i>
 800b67e:	e7ed      	b.n	800b65c <_svfiprintf_r+0x1c0>
 800b680:	0800d200 	.word	0x0800d200
 800b684:	0800d20a 	.word	0x0800d20a
 800b688:	08007cc9 	.word	0x08007cc9
 800b68c:	0800b3e5 	.word	0x0800b3e5
 800b690:	0800d206 	.word	0x0800d206

0800b694 <_sungetc_r>:
 800b694:	b538      	push	{r3, r4, r5, lr}
 800b696:	1c4b      	adds	r3, r1, #1
 800b698:	4614      	mov	r4, r2
 800b69a:	d103      	bne.n	800b6a4 <_sungetc_r+0x10>
 800b69c:	f04f 35ff 	mov.w	r5, #4294967295
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	bd38      	pop	{r3, r4, r5, pc}
 800b6a4:	8993      	ldrh	r3, [r2, #12]
 800b6a6:	f023 0320 	bic.w	r3, r3, #32
 800b6aa:	8193      	strh	r3, [r2, #12]
 800b6ac:	6853      	ldr	r3, [r2, #4]
 800b6ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b6b0:	b2cd      	uxtb	r5, r1
 800b6b2:	b18a      	cbz	r2, 800b6d8 <_sungetc_r+0x44>
 800b6b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	dd08      	ble.n	800b6cc <_sungetc_r+0x38>
 800b6ba:	6823      	ldr	r3, [r4, #0]
 800b6bc:	1e5a      	subs	r2, r3, #1
 800b6be:	6022      	str	r2, [r4, #0]
 800b6c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b6c4:	6863      	ldr	r3, [r4, #4]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	6063      	str	r3, [r4, #4]
 800b6ca:	e7e9      	b.n	800b6a0 <_sungetc_r+0xc>
 800b6cc:	4621      	mov	r1, r4
 800b6ce:	f000 fcd8 	bl	800c082 <__submore>
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	d0f1      	beq.n	800b6ba <_sungetc_r+0x26>
 800b6d6:	e7e1      	b.n	800b69c <_sungetc_r+0x8>
 800b6d8:	6921      	ldr	r1, [r4, #16]
 800b6da:	6822      	ldr	r2, [r4, #0]
 800b6dc:	b141      	cbz	r1, 800b6f0 <_sungetc_r+0x5c>
 800b6de:	4291      	cmp	r1, r2
 800b6e0:	d206      	bcs.n	800b6f0 <_sungetc_r+0x5c>
 800b6e2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800b6e6:	42a9      	cmp	r1, r5
 800b6e8:	d102      	bne.n	800b6f0 <_sungetc_r+0x5c>
 800b6ea:	3a01      	subs	r2, #1
 800b6ec:	6022      	str	r2, [r4, #0]
 800b6ee:	e7ea      	b.n	800b6c6 <_sungetc_r+0x32>
 800b6f0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800b6f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b6fe:	4623      	mov	r3, r4
 800b700:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b704:	6023      	str	r3, [r4, #0]
 800b706:	2301      	movs	r3, #1
 800b708:	e7de      	b.n	800b6c8 <_sungetc_r+0x34>

0800b70a <__ssrefill_r>:
 800b70a:	b510      	push	{r4, lr}
 800b70c:	460c      	mov	r4, r1
 800b70e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b710:	b169      	cbz	r1, 800b72e <__ssrefill_r+0x24>
 800b712:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b716:	4299      	cmp	r1, r3
 800b718:	d001      	beq.n	800b71e <__ssrefill_r+0x14>
 800b71a:	f7fe faa9 	bl	8009c70 <_free_r>
 800b71e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b720:	6063      	str	r3, [r4, #4]
 800b722:	2000      	movs	r0, #0
 800b724:	6360      	str	r0, [r4, #52]	@ 0x34
 800b726:	b113      	cbz	r3, 800b72e <__ssrefill_r+0x24>
 800b728:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b72a:	6023      	str	r3, [r4, #0]
 800b72c:	bd10      	pop	{r4, pc}
 800b72e:	6923      	ldr	r3, [r4, #16]
 800b730:	6023      	str	r3, [r4, #0]
 800b732:	2300      	movs	r3, #0
 800b734:	6063      	str	r3, [r4, #4]
 800b736:	89a3      	ldrh	r3, [r4, #12]
 800b738:	f043 0320 	orr.w	r3, r3, #32
 800b73c:	81a3      	strh	r3, [r4, #12]
 800b73e:	f04f 30ff 	mov.w	r0, #4294967295
 800b742:	e7f3      	b.n	800b72c <__ssrefill_r+0x22>

0800b744 <__ssvfiscanf_r>:
 800b744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b748:	460c      	mov	r4, r1
 800b74a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800b74e:	2100      	movs	r1, #0
 800b750:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800b754:	49a5      	ldr	r1, [pc, #660]	@ (800b9ec <__ssvfiscanf_r+0x2a8>)
 800b756:	91a0      	str	r1, [sp, #640]	@ 0x280
 800b758:	f10d 0804 	add.w	r8, sp, #4
 800b75c:	49a4      	ldr	r1, [pc, #656]	@ (800b9f0 <__ssvfiscanf_r+0x2ac>)
 800b75e:	4fa5      	ldr	r7, [pc, #660]	@ (800b9f4 <__ssvfiscanf_r+0x2b0>)
 800b760:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800b764:	4606      	mov	r6, r0
 800b766:	91a1      	str	r1, [sp, #644]	@ 0x284
 800b768:	9300      	str	r3, [sp, #0]
 800b76a:	7813      	ldrb	r3, [r2, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 8158 	beq.w	800ba22 <__ssvfiscanf_r+0x2de>
 800b772:	5cf9      	ldrb	r1, [r7, r3]
 800b774:	f011 0108 	ands.w	r1, r1, #8
 800b778:	f102 0501 	add.w	r5, r2, #1
 800b77c:	d019      	beq.n	800b7b2 <__ssvfiscanf_r+0x6e>
 800b77e:	6863      	ldr	r3, [r4, #4]
 800b780:	2b00      	cmp	r3, #0
 800b782:	dd0f      	ble.n	800b7a4 <__ssvfiscanf_r+0x60>
 800b784:	6823      	ldr	r3, [r4, #0]
 800b786:	781a      	ldrb	r2, [r3, #0]
 800b788:	5cba      	ldrb	r2, [r7, r2]
 800b78a:	0712      	lsls	r2, r2, #28
 800b78c:	d401      	bmi.n	800b792 <__ssvfiscanf_r+0x4e>
 800b78e:	462a      	mov	r2, r5
 800b790:	e7eb      	b.n	800b76a <__ssvfiscanf_r+0x26>
 800b792:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b794:	3201      	adds	r2, #1
 800b796:	9245      	str	r2, [sp, #276]	@ 0x114
 800b798:	6862      	ldr	r2, [r4, #4]
 800b79a:	3301      	adds	r3, #1
 800b79c:	3a01      	subs	r2, #1
 800b79e:	6062      	str	r2, [r4, #4]
 800b7a0:	6023      	str	r3, [r4, #0]
 800b7a2:	e7ec      	b.n	800b77e <__ssvfiscanf_r+0x3a>
 800b7a4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b7a6:	4621      	mov	r1, r4
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	4798      	blx	r3
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	d0e9      	beq.n	800b784 <__ssvfiscanf_r+0x40>
 800b7b0:	e7ed      	b.n	800b78e <__ssvfiscanf_r+0x4a>
 800b7b2:	2b25      	cmp	r3, #37	@ 0x25
 800b7b4:	d012      	beq.n	800b7dc <__ssvfiscanf_r+0x98>
 800b7b6:	4699      	mov	r9, r3
 800b7b8:	6863      	ldr	r3, [r4, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f340 8093 	ble.w	800b8e6 <__ssvfiscanf_r+0x1a2>
 800b7c0:	6822      	ldr	r2, [r4, #0]
 800b7c2:	7813      	ldrb	r3, [r2, #0]
 800b7c4:	454b      	cmp	r3, r9
 800b7c6:	f040 812c 	bne.w	800ba22 <__ssvfiscanf_r+0x2de>
 800b7ca:	6863      	ldr	r3, [r4, #4]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	6063      	str	r3, [r4, #4]
 800b7d0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800b7d2:	3201      	adds	r2, #1
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	6022      	str	r2, [r4, #0]
 800b7d8:	9345      	str	r3, [sp, #276]	@ 0x114
 800b7da:	e7d8      	b.n	800b78e <__ssvfiscanf_r+0x4a>
 800b7dc:	9141      	str	r1, [sp, #260]	@ 0x104
 800b7de:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b7e0:	7853      	ldrb	r3, [r2, #1]
 800b7e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7e4:	bf02      	ittt	eq
 800b7e6:	2310      	moveq	r3, #16
 800b7e8:	1c95      	addeq	r5, r2, #2
 800b7ea:	9341      	streq	r3, [sp, #260]	@ 0x104
 800b7ec:	220a      	movs	r2, #10
 800b7ee:	46a9      	mov	r9, r5
 800b7f0:	f819 1b01 	ldrb.w	r1, [r9], #1
 800b7f4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800b7f8:	2b09      	cmp	r3, #9
 800b7fa:	d91e      	bls.n	800b83a <__ssvfiscanf_r+0xf6>
 800b7fc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800b9f8 <__ssvfiscanf_r+0x2b4>
 800b800:	2203      	movs	r2, #3
 800b802:	4650      	mov	r0, sl
 800b804:	f7f4 fce4 	bl	80001d0 <memchr>
 800b808:	b138      	cbz	r0, 800b81a <__ssvfiscanf_r+0xd6>
 800b80a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b80c:	eba0 000a 	sub.w	r0, r0, sl
 800b810:	2301      	movs	r3, #1
 800b812:	4083      	lsls	r3, r0
 800b814:	4313      	orrs	r3, r2
 800b816:	9341      	str	r3, [sp, #260]	@ 0x104
 800b818:	464d      	mov	r5, r9
 800b81a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b81e:	2b78      	cmp	r3, #120	@ 0x78
 800b820:	d806      	bhi.n	800b830 <__ssvfiscanf_r+0xec>
 800b822:	2b57      	cmp	r3, #87	@ 0x57
 800b824:	d810      	bhi.n	800b848 <__ssvfiscanf_r+0x104>
 800b826:	2b25      	cmp	r3, #37	@ 0x25
 800b828:	d0c5      	beq.n	800b7b6 <__ssvfiscanf_r+0x72>
 800b82a:	d857      	bhi.n	800b8dc <__ssvfiscanf_r+0x198>
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d065      	beq.n	800b8fc <__ssvfiscanf_r+0x1b8>
 800b830:	2303      	movs	r3, #3
 800b832:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b834:	230a      	movs	r3, #10
 800b836:	9342      	str	r3, [sp, #264]	@ 0x108
 800b838:	e078      	b.n	800b92c <__ssvfiscanf_r+0x1e8>
 800b83a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800b83c:	fb02 1103 	mla	r1, r2, r3, r1
 800b840:	3930      	subs	r1, #48	@ 0x30
 800b842:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b844:	464d      	mov	r5, r9
 800b846:	e7d2      	b.n	800b7ee <__ssvfiscanf_r+0xaa>
 800b848:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800b84c:	2a20      	cmp	r2, #32
 800b84e:	d8ef      	bhi.n	800b830 <__ssvfiscanf_r+0xec>
 800b850:	a101      	add	r1, pc, #4	@ (adr r1, 800b858 <__ssvfiscanf_r+0x114>)
 800b852:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b856:	bf00      	nop
 800b858:	0800b90b 	.word	0x0800b90b
 800b85c:	0800b831 	.word	0x0800b831
 800b860:	0800b831 	.word	0x0800b831
 800b864:	0800b965 	.word	0x0800b965
 800b868:	0800b831 	.word	0x0800b831
 800b86c:	0800b831 	.word	0x0800b831
 800b870:	0800b831 	.word	0x0800b831
 800b874:	0800b831 	.word	0x0800b831
 800b878:	0800b831 	.word	0x0800b831
 800b87c:	0800b831 	.word	0x0800b831
 800b880:	0800b831 	.word	0x0800b831
 800b884:	0800b97b 	.word	0x0800b97b
 800b888:	0800b961 	.word	0x0800b961
 800b88c:	0800b8e3 	.word	0x0800b8e3
 800b890:	0800b8e3 	.word	0x0800b8e3
 800b894:	0800b8e3 	.word	0x0800b8e3
 800b898:	0800b831 	.word	0x0800b831
 800b89c:	0800b91d 	.word	0x0800b91d
 800b8a0:	0800b831 	.word	0x0800b831
 800b8a4:	0800b831 	.word	0x0800b831
 800b8a8:	0800b831 	.word	0x0800b831
 800b8ac:	0800b831 	.word	0x0800b831
 800b8b0:	0800b98b 	.word	0x0800b98b
 800b8b4:	0800b925 	.word	0x0800b925
 800b8b8:	0800b903 	.word	0x0800b903
 800b8bc:	0800b831 	.word	0x0800b831
 800b8c0:	0800b831 	.word	0x0800b831
 800b8c4:	0800b987 	.word	0x0800b987
 800b8c8:	0800b831 	.word	0x0800b831
 800b8cc:	0800b961 	.word	0x0800b961
 800b8d0:	0800b831 	.word	0x0800b831
 800b8d4:	0800b831 	.word	0x0800b831
 800b8d8:	0800b90b 	.word	0x0800b90b
 800b8dc:	3b45      	subs	r3, #69	@ 0x45
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d8a6      	bhi.n	800b830 <__ssvfiscanf_r+0xec>
 800b8e2:	2305      	movs	r3, #5
 800b8e4:	e021      	b.n	800b92a <__ssvfiscanf_r+0x1e6>
 800b8e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	4798      	blx	r3
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	f43f af66 	beq.w	800b7c0 <__ssvfiscanf_r+0x7c>
 800b8f4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	f040 808b 	bne.w	800ba12 <__ssvfiscanf_r+0x2ce>
 800b8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b900:	e08b      	b.n	800ba1a <__ssvfiscanf_r+0x2d6>
 800b902:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b904:	f042 0220 	orr.w	r2, r2, #32
 800b908:	9241      	str	r2, [sp, #260]	@ 0x104
 800b90a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b90c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b910:	9241      	str	r2, [sp, #260]	@ 0x104
 800b912:	2210      	movs	r2, #16
 800b914:	2b6e      	cmp	r3, #110	@ 0x6e
 800b916:	9242      	str	r2, [sp, #264]	@ 0x108
 800b918:	d902      	bls.n	800b920 <__ssvfiscanf_r+0x1dc>
 800b91a:	e005      	b.n	800b928 <__ssvfiscanf_r+0x1e4>
 800b91c:	2300      	movs	r3, #0
 800b91e:	9342      	str	r3, [sp, #264]	@ 0x108
 800b920:	2303      	movs	r3, #3
 800b922:	e002      	b.n	800b92a <__ssvfiscanf_r+0x1e6>
 800b924:	2308      	movs	r3, #8
 800b926:	9342      	str	r3, [sp, #264]	@ 0x108
 800b928:	2304      	movs	r3, #4
 800b92a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b92c:	6863      	ldr	r3, [r4, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	dd39      	ble.n	800b9a6 <__ssvfiscanf_r+0x262>
 800b932:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b934:	0659      	lsls	r1, r3, #25
 800b936:	d404      	bmi.n	800b942 <__ssvfiscanf_r+0x1fe>
 800b938:	6823      	ldr	r3, [r4, #0]
 800b93a:	781a      	ldrb	r2, [r3, #0]
 800b93c:	5cba      	ldrb	r2, [r7, r2]
 800b93e:	0712      	lsls	r2, r2, #28
 800b940:	d438      	bmi.n	800b9b4 <__ssvfiscanf_r+0x270>
 800b942:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800b944:	2b02      	cmp	r3, #2
 800b946:	dc47      	bgt.n	800b9d8 <__ssvfiscanf_r+0x294>
 800b948:	466b      	mov	r3, sp
 800b94a:	4622      	mov	r2, r4
 800b94c:	a941      	add	r1, sp, #260	@ 0x104
 800b94e:	4630      	mov	r0, r6
 800b950:	f000 f9ae 	bl	800bcb0 <_scanf_chars>
 800b954:	2801      	cmp	r0, #1
 800b956:	d064      	beq.n	800ba22 <__ssvfiscanf_r+0x2de>
 800b958:	2802      	cmp	r0, #2
 800b95a:	f47f af18 	bne.w	800b78e <__ssvfiscanf_r+0x4a>
 800b95e:	e7c9      	b.n	800b8f4 <__ssvfiscanf_r+0x1b0>
 800b960:	220a      	movs	r2, #10
 800b962:	e7d7      	b.n	800b914 <__ssvfiscanf_r+0x1d0>
 800b964:	4629      	mov	r1, r5
 800b966:	4640      	mov	r0, r8
 800b968:	f000 fb52 	bl	800c010 <__sccl>
 800b96c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b96e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b972:	9341      	str	r3, [sp, #260]	@ 0x104
 800b974:	4605      	mov	r5, r0
 800b976:	2301      	movs	r3, #1
 800b978:	e7d7      	b.n	800b92a <__ssvfiscanf_r+0x1e6>
 800b97a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b97c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b980:	9341      	str	r3, [sp, #260]	@ 0x104
 800b982:	2300      	movs	r3, #0
 800b984:	e7d1      	b.n	800b92a <__ssvfiscanf_r+0x1e6>
 800b986:	2302      	movs	r3, #2
 800b988:	e7cf      	b.n	800b92a <__ssvfiscanf_r+0x1e6>
 800b98a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800b98c:	06c3      	lsls	r3, r0, #27
 800b98e:	f53f aefe 	bmi.w	800b78e <__ssvfiscanf_r+0x4a>
 800b992:	9b00      	ldr	r3, [sp, #0]
 800b994:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b996:	1d19      	adds	r1, r3, #4
 800b998:	9100      	str	r1, [sp, #0]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	07c0      	lsls	r0, r0, #31
 800b99e:	bf4c      	ite	mi
 800b9a0:	801a      	strhmi	r2, [r3, #0]
 800b9a2:	601a      	strpl	r2, [r3, #0]
 800b9a4:	e6f3      	b.n	800b78e <__ssvfiscanf_r+0x4a>
 800b9a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b9a8:	4621      	mov	r1, r4
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	4798      	blx	r3
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d0bf      	beq.n	800b932 <__ssvfiscanf_r+0x1ee>
 800b9b2:	e79f      	b.n	800b8f4 <__ssvfiscanf_r+0x1b0>
 800b9b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b9b6:	3201      	adds	r2, #1
 800b9b8:	9245      	str	r2, [sp, #276]	@ 0x114
 800b9ba:	6862      	ldr	r2, [r4, #4]
 800b9bc:	3a01      	subs	r2, #1
 800b9be:	2a00      	cmp	r2, #0
 800b9c0:	6062      	str	r2, [r4, #4]
 800b9c2:	dd02      	ble.n	800b9ca <__ssvfiscanf_r+0x286>
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	6023      	str	r3, [r4, #0]
 800b9c8:	e7b6      	b.n	800b938 <__ssvfiscanf_r+0x1f4>
 800b9ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b9cc:	4621      	mov	r1, r4
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	4798      	blx	r3
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	d0b0      	beq.n	800b938 <__ssvfiscanf_r+0x1f4>
 800b9d6:	e78d      	b.n	800b8f4 <__ssvfiscanf_r+0x1b0>
 800b9d8:	2b04      	cmp	r3, #4
 800b9da:	dc0f      	bgt.n	800b9fc <__ssvfiscanf_r+0x2b8>
 800b9dc:	466b      	mov	r3, sp
 800b9de:	4622      	mov	r2, r4
 800b9e0:	a941      	add	r1, sp, #260	@ 0x104
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	f000 f9be 	bl	800bd64 <_scanf_i>
 800b9e8:	e7b4      	b.n	800b954 <__ssvfiscanf_r+0x210>
 800b9ea:	bf00      	nop
 800b9ec:	0800b695 	.word	0x0800b695
 800b9f0:	0800b70b 	.word	0x0800b70b
 800b9f4:	0800ce8d 	.word	0x0800ce8d
 800b9f8:	0800d206 	.word	0x0800d206
 800b9fc:	4b0a      	ldr	r3, [pc, #40]	@ (800ba28 <__ssvfiscanf_r+0x2e4>)
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	f43f aec5 	beq.w	800b78e <__ssvfiscanf_r+0x4a>
 800ba04:	466b      	mov	r3, sp
 800ba06:	4622      	mov	r2, r4
 800ba08:	a941      	add	r1, sp, #260	@ 0x104
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	f7fc fd14 	bl	8008438 <_scanf_float>
 800ba10:	e7a0      	b.n	800b954 <__ssvfiscanf_r+0x210>
 800ba12:	89a3      	ldrh	r3, [r4, #12]
 800ba14:	065b      	lsls	r3, r3, #25
 800ba16:	f53f af71 	bmi.w	800b8fc <__ssvfiscanf_r+0x1b8>
 800ba1a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ba1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba22:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ba24:	e7f9      	b.n	800ba1a <__ssvfiscanf_r+0x2d6>
 800ba26:	bf00      	nop
 800ba28:	08008439 	.word	0x08008439

0800ba2c <__sfputc_r>:
 800ba2c:	6893      	ldr	r3, [r2, #8]
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	b410      	push	{r4}
 800ba34:	6093      	str	r3, [r2, #8]
 800ba36:	da08      	bge.n	800ba4a <__sfputc_r+0x1e>
 800ba38:	6994      	ldr	r4, [r2, #24]
 800ba3a:	42a3      	cmp	r3, r4
 800ba3c:	db01      	blt.n	800ba42 <__sfputc_r+0x16>
 800ba3e:	290a      	cmp	r1, #10
 800ba40:	d103      	bne.n	800ba4a <__sfputc_r+0x1e>
 800ba42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba46:	f7fd b98c 	b.w	8008d62 <__swbuf_r>
 800ba4a:	6813      	ldr	r3, [r2, #0]
 800ba4c:	1c58      	adds	r0, r3, #1
 800ba4e:	6010      	str	r0, [r2, #0]
 800ba50:	7019      	strb	r1, [r3, #0]
 800ba52:	4608      	mov	r0, r1
 800ba54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <__sfputs_r>:
 800ba5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba5c:	4606      	mov	r6, r0
 800ba5e:	460f      	mov	r7, r1
 800ba60:	4614      	mov	r4, r2
 800ba62:	18d5      	adds	r5, r2, r3
 800ba64:	42ac      	cmp	r4, r5
 800ba66:	d101      	bne.n	800ba6c <__sfputs_r+0x12>
 800ba68:	2000      	movs	r0, #0
 800ba6a:	e007      	b.n	800ba7c <__sfputs_r+0x22>
 800ba6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba70:	463a      	mov	r2, r7
 800ba72:	4630      	mov	r0, r6
 800ba74:	f7ff ffda 	bl	800ba2c <__sfputc_r>
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	d1f3      	bne.n	800ba64 <__sfputs_r+0xa>
 800ba7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba80 <_vfiprintf_r>:
 800ba80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba84:	460d      	mov	r5, r1
 800ba86:	b09d      	sub	sp, #116	@ 0x74
 800ba88:	4614      	mov	r4, r2
 800ba8a:	4698      	mov	r8, r3
 800ba8c:	4606      	mov	r6, r0
 800ba8e:	b118      	cbz	r0, 800ba98 <_vfiprintf_r+0x18>
 800ba90:	6a03      	ldr	r3, [r0, #32]
 800ba92:	b90b      	cbnz	r3, 800ba98 <_vfiprintf_r+0x18>
 800ba94:	f7fd f830 	bl	8008af8 <__sinit>
 800ba98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba9a:	07d9      	lsls	r1, r3, #31
 800ba9c:	d405      	bmi.n	800baaa <_vfiprintf_r+0x2a>
 800ba9e:	89ab      	ldrh	r3, [r5, #12]
 800baa0:	059a      	lsls	r2, r3, #22
 800baa2:	d402      	bmi.n	800baaa <_vfiprintf_r+0x2a>
 800baa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800baa6:	f7fd fa80 	bl	8008faa <__retarget_lock_acquire_recursive>
 800baaa:	89ab      	ldrh	r3, [r5, #12]
 800baac:	071b      	lsls	r3, r3, #28
 800baae:	d501      	bpl.n	800bab4 <_vfiprintf_r+0x34>
 800bab0:	692b      	ldr	r3, [r5, #16]
 800bab2:	b99b      	cbnz	r3, 800badc <_vfiprintf_r+0x5c>
 800bab4:	4629      	mov	r1, r5
 800bab6:	4630      	mov	r0, r6
 800bab8:	f7fd f992 	bl	8008de0 <__swsetup_r>
 800babc:	b170      	cbz	r0, 800badc <_vfiprintf_r+0x5c>
 800babe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bac0:	07dc      	lsls	r4, r3, #31
 800bac2:	d504      	bpl.n	800bace <_vfiprintf_r+0x4e>
 800bac4:	f04f 30ff 	mov.w	r0, #4294967295
 800bac8:	b01d      	add	sp, #116	@ 0x74
 800baca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bace:	89ab      	ldrh	r3, [r5, #12]
 800bad0:	0598      	lsls	r0, r3, #22
 800bad2:	d4f7      	bmi.n	800bac4 <_vfiprintf_r+0x44>
 800bad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bad6:	f7fd fa69 	bl	8008fac <__retarget_lock_release_recursive>
 800bada:	e7f3      	b.n	800bac4 <_vfiprintf_r+0x44>
 800badc:	2300      	movs	r3, #0
 800bade:	9309      	str	r3, [sp, #36]	@ 0x24
 800bae0:	2320      	movs	r3, #32
 800bae2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bae6:	f8cd 800c 	str.w	r8, [sp, #12]
 800baea:	2330      	movs	r3, #48	@ 0x30
 800baec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc9c <_vfiprintf_r+0x21c>
 800baf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800baf4:	f04f 0901 	mov.w	r9, #1
 800baf8:	4623      	mov	r3, r4
 800bafa:	469a      	mov	sl, r3
 800bafc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb00:	b10a      	cbz	r2, 800bb06 <_vfiprintf_r+0x86>
 800bb02:	2a25      	cmp	r2, #37	@ 0x25
 800bb04:	d1f9      	bne.n	800bafa <_vfiprintf_r+0x7a>
 800bb06:	ebba 0b04 	subs.w	fp, sl, r4
 800bb0a:	d00b      	beq.n	800bb24 <_vfiprintf_r+0xa4>
 800bb0c:	465b      	mov	r3, fp
 800bb0e:	4622      	mov	r2, r4
 800bb10:	4629      	mov	r1, r5
 800bb12:	4630      	mov	r0, r6
 800bb14:	f7ff ffa1 	bl	800ba5a <__sfputs_r>
 800bb18:	3001      	adds	r0, #1
 800bb1a:	f000 80a7 	beq.w	800bc6c <_vfiprintf_r+0x1ec>
 800bb1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb20:	445a      	add	r2, fp
 800bb22:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb24:	f89a 3000 	ldrb.w	r3, [sl]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f000 809f 	beq.w	800bc6c <_vfiprintf_r+0x1ec>
 800bb2e:	2300      	movs	r3, #0
 800bb30:	f04f 32ff 	mov.w	r2, #4294967295
 800bb34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb38:	f10a 0a01 	add.w	sl, sl, #1
 800bb3c:	9304      	str	r3, [sp, #16]
 800bb3e:	9307      	str	r3, [sp, #28]
 800bb40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb44:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb46:	4654      	mov	r4, sl
 800bb48:	2205      	movs	r2, #5
 800bb4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb4e:	4853      	ldr	r0, [pc, #332]	@ (800bc9c <_vfiprintf_r+0x21c>)
 800bb50:	f7f4 fb3e 	bl	80001d0 <memchr>
 800bb54:	9a04      	ldr	r2, [sp, #16]
 800bb56:	b9d8      	cbnz	r0, 800bb90 <_vfiprintf_r+0x110>
 800bb58:	06d1      	lsls	r1, r2, #27
 800bb5a:	bf44      	itt	mi
 800bb5c:	2320      	movmi	r3, #32
 800bb5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb62:	0713      	lsls	r3, r2, #28
 800bb64:	bf44      	itt	mi
 800bb66:	232b      	movmi	r3, #43	@ 0x2b
 800bb68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb6c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb70:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb72:	d015      	beq.n	800bba0 <_vfiprintf_r+0x120>
 800bb74:	9a07      	ldr	r2, [sp, #28]
 800bb76:	4654      	mov	r4, sl
 800bb78:	2000      	movs	r0, #0
 800bb7a:	f04f 0c0a 	mov.w	ip, #10
 800bb7e:	4621      	mov	r1, r4
 800bb80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb84:	3b30      	subs	r3, #48	@ 0x30
 800bb86:	2b09      	cmp	r3, #9
 800bb88:	d94b      	bls.n	800bc22 <_vfiprintf_r+0x1a2>
 800bb8a:	b1b0      	cbz	r0, 800bbba <_vfiprintf_r+0x13a>
 800bb8c:	9207      	str	r2, [sp, #28]
 800bb8e:	e014      	b.n	800bbba <_vfiprintf_r+0x13a>
 800bb90:	eba0 0308 	sub.w	r3, r0, r8
 800bb94:	fa09 f303 	lsl.w	r3, r9, r3
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	9304      	str	r3, [sp, #16]
 800bb9c:	46a2      	mov	sl, r4
 800bb9e:	e7d2      	b.n	800bb46 <_vfiprintf_r+0xc6>
 800bba0:	9b03      	ldr	r3, [sp, #12]
 800bba2:	1d19      	adds	r1, r3, #4
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	9103      	str	r1, [sp, #12]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	bfbb      	ittet	lt
 800bbac:	425b      	neglt	r3, r3
 800bbae:	f042 0202 	orrlt.w	r2, r2, #2
 800bbb2:	9307      	strge	r3, [sp, #28]
 800bbb4:	9307      	strlt	r3, [sp, #28]
 800bbb6:	bfb8      	it	lt
 800bbb8:	9204      	strlt	r2, [sp, #16]
 800bbba:	7823      	ldrb	r3, [r4, #0]
 800bbbc:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbbe:	d10a      	bne.n	800bbd6 <_vfiprintf_r+0x156>
 800bbc0:	7863      	ldrb	r3, [r4, #1]
 800bbc2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbc4:	d132      	bne.n	800bc2c <_vfiprintf_r+0x1ac>
 800bbc6:	9b03      	ldr	r3, [sp, #12]
 800bbc8:	1d1a      	adds	r2, r3, #4
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	9203      	str	r2, [sp, #12]
 800bbce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbd2:	3402      	adds	r4, #2
 800bbd4:	9305      	str	r3, [sp, #20]
 800bbd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bcac <_vfiprintf_r+0x22c>
 800bbda:	7821      	ldrb	r1, [r4, #0]
 800bbdc:	2203      	movs	r2, #3
 800bbde:	4650      	mov	r0, sl
 800bbe0:	f7f4 faf6 	bl	80001d0 <memchr>
 800bbe4:	b138      	cbz	r0, 800bbf6 <_vfiprintf_r+0x176>
 800bbe6:	9b04      	ldr	r3, [sp, #16]
 800bbe8:	eba0 000a 	sub.w	r0, r0, sl
 800bbec:	2240      	movs	r2, #64	@ 0x40
 800bbee:	4082      	lsls	r2, r0
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	3401      	adds	r4, #1
 800bbf4:	9304      	str	r3, [sp, #16]
 800bbf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbfa:	4829      	ldr	r0, [pc, #164]	@ (800bca0 <_vfiprintf_r+0x220>)
 800bbfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc00:	2206      	movs	r2, #6
 800bc02:	f7f4 fae5 	bl	80001d0 <memchr>
 800bc06:	2800      	cmp	r0, #0
 800bc08:	d03f      	beq.n	800bc8a <_vfiprintf_r+0x20a>
 800bc0a:	4b26      	ldr	r3, [pc, #152]	@ (800bca4 <_vfiprintf_r+0x224>)
 800bc0c:	bb1b      	cbnz	r3, 800bc56 <_vfiprintf_r+0x1d6>
 800bc0e:	9b03      	ldr	r3, [sp, #12]
 800bc10:	3307      	adds	r3, #7
 800bc12:	f023 0307 	bic.w	r3, r3, #7
 800bc16:	3308      	adds	r3, #8
 800bc18:	9303      	str	r3, [sp, #12]
 800bc1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc1c:	443b      	add	r3, r7
 800bc1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc20:	e76a      	b.n	800baf8 <_vfiprintf_r+0x78>
 800bc22:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc26:	460c      	mov	r4, r1
 800bc28:	2001      	movs	r0, #1
 800bc2a:	e7a8      	b.n	800bb7e <_vfiprintf_r+0xfe>
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	3401      	adds	r4, #1
 800bc30:	9305      	str	r3, [sp, #20]
 800bc32:	4619      	mov	r1, r3
 800bc34:	f04f 0c0a 	mov.w	ip, #10
 800bc38:	4620      	mov	r0, r4
 800bc3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc3e:	3a30      	subs	r2, #48	@ 0x30
 800bc40:	2a09      	cmp	r2, #9
 800bc42:	d903      	bls.n	800bc4c <_vfiprintf_r+0x1cc>
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d0c6      	beq.n	800bbd6 <_vfiprintf_r+0x156>
 800bc48:	9105      	str	r1, [sp, #20]
 800bc4a:	e7c4      	b.n	800bbd6 <_vfiprintf_r+0x156>
 800bc4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc50:	4604      	mov	r4, r0
 800bc52:	2301      	movs	r3, #1
 800bc54:	e7f0      	b.n	800bc38 <_vfiprintf_r+0x1b8>
 800bc56:	ab03      	add	r3, sp, #12
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	462a      	mov	r2, r5
 800bc5c:	4b12      	ldr	r3, [pc, #72]	@ (800bca8 <_vfiprintf_r+0x228>)
 800bc5e:	a904      	add	r1, sp, #16
 800bc60:	4630      	mov	r0, r6
 800bc62:	f7fc f831 	bl	8007cc8 <_printf_float>
 800bc66:	4607      	mov	r7, r0
 800bc68:	1c78      	adds	r0, r7, #1
 800bc6a:	d1d6      	bne.n	800bc1a <_vfiprintf_r+0x19a>
 800bc6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc6e:	07d9      	lsls	r1, r3, #31
 800bc70:	d405      	bmi.n	800bc7e <_vfiprintf_r+0x1fe>
 800bc72:	89ab      	ldrh	r3, [r5, #12]
 800bc74:	059a      	lsls	r2, r3, #22
 800bc76:	d402      	bmi.n	800bc7e <_vfiprintf_r+0x1fe>
 800bc78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc7a:	f7fd f997 	bl	8008fac <__retarget_lock_release_recursive>
 800bc7e:	89ab      	ldrh	r3, [r5, #12]
 800bc80:	065b      	lsls	r3, r3, #25
 800bc82:	f53f af1f 	bmi.w	800bac4 <_vfiprintf_r+0x44>
 800bc86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc88:	e71e      	b.n	800bac8 <_vfiprintf_r+0x48>
 800bc8a:	ab03      	add	r3, sp, #12
 800bc8c:	9300      	str	r3, [sp, #0]
 800bc8e:	462a      	mov	r2, r5
 800bc90:	4b05      	ldr	r3, [pc, #20]	@ (800bca8 <_vfiprintf_r+0x228>)
 800bc92:	a904      	add	r1, sp, #16
 800bc94:	4630      	mov	r0, r6
 800bc96:	f7fc faaf 	bl	80081f8 <_printf_i>
 800bc9a:	e7e4      	b.n	800bc66 <_vfiprintf_r+0x1e6>
 800bc9c:	0800d200 	.word	0x0800d200
 800bca0:	0800d20a 	.word	0x0800d20a
 800bca4:	08007cc9 	.word	0x08007cc9
 800bca8:	0800ba5b 	.word	0x0800ba5b
 800bcac:	0800d206 	.word	0x0800d206

0800bcb0 <_scanf_chars>:
 800bcb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcb4:	4615      	mov	r5, r2
 800bcb6:	688a      	ldr	r2, [r1, #8]
 800bcb8:	4680      	mov	r8, r0
 800bcba:	460c      	mov	r4, r1
 800bcbc:	b932      	cbnz	r2, 800bccc <_scanf_chars+0x1c>
 800bcbe:	698a      	ldr	r2, [r1, #24]
 800bcc0:	2a00      	cmp	r2, #0
 800bcc2:	bf14      	ite	ne
 800bcc4:	f04f 32ff 	movne.w	r2, #4294967295
 800bcc8:	2201      	moveq	r2, #1
 800bcca:	608a      	str	r2, [r1, #8]
 800bccc:	6822      	ldr	r2, [r4, #0]
 800bcce:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800bd60 <_scanf_chars+0xb0>
 800bcd2:	06d1      	lsls	r1, r2, #27
 800bcd4:	bf5f      	itttt	pl
 800bcd6:	681a      	ldrpl	r2, [r3, #0]
 800bcd8:	1d11      	addpl	r1, r2, #4
 800bcda:	6019      	strpl	r1, [r3, #0]
 800bcdc:	6816      	ldrpl	r6, [r2, #0]
 800bcde:	2700      	movs	r7, #0
 800bce0:	69a0      	ldr	r0, [r4, #24]
 800bce2:	b188      	cbz	r0, 800bd08 <_scanf_chars+0x58>
 800bce4:	2801      	cmp	r0, #1
 800bce6:	d107      	bne.n	800bcf8 <_scanf_chars+0x48>
 800bce8:	682b      	ldr	r3, [r5, #0]
 800bcea:	781a      	ldrb	r2, [r3, #0]
 800bcec:	6963      	ldr	r3, [r4, #20]
 800bcee:	5c9b      	ldrb	r3, [r3, r2]
 800bcf0:	b953      	cbnz	r3, 800bd08 <_scanf_chars+0x58>
 800bcf2:	2f00      	cmp	r7, #0
 800bcf4:	d031      	beq.n	800bd5a <_scanf_chars+0xaa>
 800bcf6:	e022      	b.n	800bd3e <_scanf_chars+0x8e>
 800bcf8:	2802      	cmp	r0, #2
 800bcfa:	d120      	bne.n	800bd3e <_scanf_chars+0x8e>
 800bcfc:	682b      	ldr	r3, [r5, #0]
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	f819 3003 	ldrb.w	r3, [r9, r3]
 800bd04:	071b      	lsls	r3, r3, #28
 800bd06:	d41a      	bmi.n	800bd3e <_scanf_chars+0x8e>
 800bd08:	6823      	ldr	r3, [r4, #0]
 800bd0a:	06da      	lsls	r2, r3, #27
 800bd0c:	bf5e      	ittt	pl
 800bd0e:	682b      	ldrpl	r3, [r5, #0]
 800bd10:	781b      	ldrbpl	r3, [r3, #0]
 800bd12:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bd16:	682a      	ldr	r2, [r5, #0]
 800bd18:	686b      	ldr	r3, [r5, #4]
 800bd1a:	3201      	adds	r2, #1
 800bd1c:	602a      	str	r2, [r5, #0]
 800bd1e:	68a2      	ldr	r2, [r4, #8]
 800bd20:	3b01      	subs	r3, #1
 800bd22:	3a01      	subs	r2, #1
 800bd24:	606b      	str	r3, [r5, #4]
 800bd26:	3701      	adds	r7, #1
 800bd28:	60a2      	str	r2, [r4, #8]
 800bd2a:	b142      	cbz	r2, 800bd3e <_scanf_chars+0x8e>
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	dcd7      	bgt.n	800bce0 <_scanf_chars+0x30>
 800bd30:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bd34:	4629      	mov	r1, r5
 800bd36:	4640      	mov	r0, r8
 800bd38:	4798      	blx	r3
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	d0d0      	beq.n	800bce0 <_scanf_chars+0x30>
 800bd3e:	6823      	ldr	r3, [r4, #0]
 800bd40:	f013 0310 	ands.w	r3, r3, #16
 800bd44:	d105      	bne.n	800bd52 <_scanf_chars+0xa2>
 800bd46:	68e2      	ldr	r2, [r4, #12]
 800bd48:	3201      	adds	r2, #1
 800bd4a:	60e2      	str	r2, [r4, #12]
 800bd4c:	69a2      	ldr	r2, [r4, #24]
 800bd4e:	b102      	cbz	r2, 800bd52 <_scanf_chars+0xa2>
 800bd50:	7033      	strb	r3, [r6, #0]
 800bd52:	6923      	ldr	r3, [r4, #16]
 800bd54:	443b      	add	r3, r7
 800bd56:	6123      	str	r3, [r4, #16]
 800bd58:	2000      	movs	r0, #0
 800bd5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd5e:	bf00      	nop
 800bd60:	0800ce8d 	.word	0x0800ce8d

0800bd64 <_scanf_i>:
 800bd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd68:	4698      	mov	r8, r3
 800bd6a:	4b74      	ldr	r3, [pc, #464]	@ (800bf3c <_scanf_i+0x1d8>)
 800bd6c:	460c      	mov	r4, r1
 800bd6e:	4682      	mov	sl, r0
 800bd70:	4616      	mov	r6, r2
 800bd72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd76:	b087      	sub	sp, #28
 800bd78:	ab03      	add	r3, sp, #12
 800bd7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bd7e:	4b70      	ldr	r3, [pc, #448]	@ (800bf40 <_scanf_i+0x1dc>)
 800bd80:	69a1      	ldr	r1, [r4, #24]
 800bd82:	4a70      	ldr	r2, [pc, #448]	@ (800bf44 <_scanf_i+0x1e0>)
 800bd84:	2903      	cmp	r1, #3
 800bd86:	bf08      	it	eq
 800bd88:	461a      	moveq	r2, r3
 800bd8a:	68a3      	ldr	r3, [r4, #8]
 800bd8c:	9201      	str	r2, [sp, #4]
 800bd8e:	1e5a      	subs	r2, r3, #1
 800bd90:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bd94:	bf88      	it	hi
 800bd96:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bd9a:	4627      	mov	r7, r4
 800bd9c:	bf82      	ittt	hi
 800bd9e:	eb03 0905 	addhi.w	r9, r3, r5
 800bda2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bda6:	60a3      	strhi	r3, [r4, #8]
 800bda8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bdac:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800bdb0:	bf98      	it	ls
 800bdb2:	f04f 0900 	movls.w	r9, #0
 800bdb6:	6023      	str	r3, [r4, #0]
 800bdb8:	463d      	mov	r5, r7
 800bdba:	f04f 0b00 	mov.w	fp, #0
 800bdbe:	6831      	ldr	r1, [r6, #0]
 800bdc0:	ab03      	add	r3, sp, #12
 800bdc2:	7809      	ldrb	r1, [r1, #0]
 800bdc4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bdc8:	2202      	movs	r2, #2
 800bdca:	f7f4 fa01 	bl	80001d0 <memchr>
 800bdce:	b328      	cbz	r0, 800be1c <_scanf_i+0xb8>
 800bdd0:	f1bb 0f01 	cmp.w	fp, #1
 800bdd4:	d159      	bne.n	800be8a <_scanf_i+0x126>
 800bdd6:	6862      	ldr	r2, [r4, #4]
 800bdd8:	b92a      	cbnz	r2, 800bde6 <_scanf_i+0x82>
 800bdda:	6822      	ldr	r2, [r4, #0]
 800bddc:	2108      	movs	r1, #8
 800bdde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bde2:	6061      	str	r1, [r4, #4]
 800bde4:	6022      	str	r2, [r4, #0]
 800bde6:	6822      	ldr	r2, [r4, #0]
 800bde8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800bdec:	6022      	str	r2, [r4, #0]
 800bdee:	68a2      	ldr	r2, [r4, #8]
 800bdf0:	1e51      	subs	r1, r2, #1
 800bdf2:	60a1      	str	r1, [r4, #8]
 800bdf4:	b192      	cbz	r2, 800be1c <_scanf_i+0xb8>
 800bdf6:	6832      	ldr	r2, [r6, #0]
 800bdf8:	1c51      	adds	r1, r2, #1
 800bdfa:	6031      	str	r1, [r6, #0]
 800bdfc:	7812      	ldrb	r2, [r2, #0]
 800bdfe:	f805 2b01 	strb.w	r2, [r5], #1
 800be02:	6872      	ldr	r2, [r6, #4]
 800be04:	3a01      	subs	r2, #1
 800be06:	2a00      	cmp	r2, #0
 800be08:	6072      	str	r2, [r6, #4]
 800be0a:	dc07      	bgt.n	800be1c <_scanf_i+0xb8>
 800be0c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800be10:	4631      	mov	r1, r6
 800be12:	4650      	mov	r0, sl
 800be14:	4790      	blx	r2
 800be16:	2800      	cmp	r0, #0
 800be18:	f040 8085 	bne.w	800bf26 <_scanf_i+0x1c2>
 800be1c:	f10b 0b01 	add.w	fp, fp, #1
 800be20:	f1bb 0f03 	cmp.w	fp, #3
 800be24:	d1cb      	bne.n	800bdbe <_scanf_i+0x5a>
 800be26:	6863      	ldr	r3, [r4, #4]
 800be28:	b90b      	cbnz	r3, 800be2e <_scanf_i+0xca>
 800be2a:	230a      	movs	r3, #10
 800be2c:	6063      	str	r3, [r4, #4]
 800be2e:	6863      	ldr	r3, [r4, #4]
 800be30:	4945      	ldr	r1, [pc, #276]	@ (800bf48 <_scanf_i+0x1e4>)
 800be32:	6960      	ldr	r0, [r4, #20]
 800be34:	1ac9      	subs	r1, r1, r3
 800be36:	f000 f8eb 	bl	800c010 <__sccl>
 800be3a:	f04f 0b00 	mov.w	fp, #0
 800be3e:	68a3      	ldr	r3, [r4, #8]
 800be40:	6822      	ldr	r2, [r4, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d03d      	beq.n	800bec2 <_scanf_i+0x15e>
 800be46:	6831      	ldr	r1, [r6, #0]
 800be48:	6960      	ldr	r0, [r4, #20]
 800be4a:	f891 c000 	ldrb.w	ip, [r1]
 800be4e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800be52:	2800      	cmp	r0, #0
 800be54:	d035      	beq.n	800bec2 <_scanf_i+0x15e>
 800be56:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800be5a:	d124      	bne.n	800bea6 <_scanf_i+0x142>
 800be5c:	0510      	lsls	r0, r2, #20
 800be5e:	d522      	bpl.n	800bea6 <_scanf_i+0x142>
 800be60:	f10b 0b01 	add.w	fp, fp, #1
 800be64:	f1b9 0f00 	cmp.w	r9, #0
 800be68:	d003      	beq.n	800be72 <_scanf_i+0x10e>
 800be6a:	3301      	adds	r3, #1
 800be6c:	f109 39ff 	add.w	r9, r9, #4294967295
 800be70:	60a3      	str	r3, [r4, #8]
 800be72:	6873      	ldr	r3, [r6, #4]
 800be74:	3b01      	subs	r3, #1
 800be76:	2b00      	cmp	r3, #0
 800be78:	6073      	str	r3, [r6, #4]
 800be7a:	dd1b      	ble.n	800beb4 <_scanf_i+0x150>
 800be7c:	6833      	ldr	r3, [r6, #0]
 800be7e:	3301      	adds	r3, #1
 800be80:	6033      	str	r3, [r6, #0]
 800be82:	68a3      	ldr	r3, [r4, #8]
 800be84:	3b01      	subs	r3, #1
 800be86:	60a3      	str	r3, [r4, #8]
 800be88:	e7d9      	b.n	800be3e <_scanf_i+0xda>
 800be8a:	f1bb 0f02 	cmp.w	fp, #2
 800be8e:	d1ae      	bne.n	800bdee <_scanf_i+0x8a>
 800be90:	6822      	ldr	r2, [r4, #0]
 800be92:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800be96:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800be9a:	d1bf      	bne.n	800be1c <_scanf_i+0xb8>
 800be9c:	2110      	movs	r1, #16
 800be9e:	6061      	str	r1, [r4, #4]
 800bea0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bea4:	e7a2      	b.n	800bdec <_scanf_i+0x88>
 800bea6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800beaa:	6022      	str	r2, [r4, #0]
 800beac:	780b      	ldrb	r3, [r1, #0]
 800beae:	f805 3b01 	strb.w	r3, [r5], #1
 800beb2:	e7de      	b.n	800be72 <_scanf_i+0x10e>
 800beb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800beb8:	4631      	mov	r1, r6
 800beba:	4650      	mov	r0, sl
 800bebc:	4798      	blx	r3
 800bebe:	2800      	cmp	r0, #0
 800bec0:	d0df      	beq.n	800be82 <_scanf_i+0x11e>
 800bec2:	6823      	ldr	r3, [r4, #0]
 800bec4:	05d9      	lsls	r1, r3, #23
 800bec6:	d50d      	bpl.n	800bee4 <_scanf_i+0x180>
 800bec8:	42bd      	cmp	r5, r7
 800beca:	d909      	bls.n	800bee0 <_scanf_i+0x17c>
 800becc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bed0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bed4:	4632      	mov	r2, r6
 800bed6:	4650      	mov	r0, sl
 800bed8:	4798      	blx	r3
 800beda:	f105 39ff 	add.w	r9, r5, #4294967295
 800bede:	464d      	mov	r5, r9
 800bee0:	42bd      	cmp	r5, r7
 800bee2:	d028      	beq.n	800bf36 <_scanf_i+0x1d2>
 800bee4:	6822      	ldr	r2, [r4, #0]
 800bee6:	f012 0210 	ands.w	r2, r2, #16
 800beea:	d113      	bne.n	800bf14 <_scanf_i+0x1b0>
 800beec:	702a      	strb	r2, [r5, #0]
 800beee:	6863      	ldr	r3, [r4, #4]
 800bef0:	9e01      	ldr	r6, [sp, #4]
 800bef2:	4639      	mov	r1, r7
 800bef4:	4650      	mov	r0, sl
 800bef6:	47b0      	blx	r6
 800bef8:	f8d8 3000 	ldr.w	r3, [r8]
 800befc:	6821      	ldr	r1, [r4, #0]
 800befe:	1d1a      	adds	r2, r3, #4
 800bf00:	f8c8 2000 	str.w	r2, [r8]
 800bf04:	f011 0f20 	tst.w	r1, #32
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	d00f      	beq.n	800bf2c <_scanf_i+0x1c8>
 800bf0c:	6018      	str	r0, [r3, #0]
 800bf0e:	68e3      	ldr	r3, [r4, #12]
 800bf10:	3301      	adds	r3, #1
 800bf12:	60e3      	str	r3, [r4, #12]
 800bf14:	6923      	ldr	r3, [r4, #16]
 800bf16:	1bed      	subs	r5, r5, r7
 800bf18:	445d      	add	r5, fp
 800bf1a:	442b      	add	r3, r5
 800bf1c:	6123      	str	r3, [r4, #16]
 800bf1e:	2000      	movs	r0, #0
 800bf20:	b007      	add	sp, #28
 800bf22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf26:	f04f 0b00 	mov.w	fp, #0
 800bf2a:	e7ca      	b.n	800bec2 <_scanf_i+0x15e>
 800bf2c:	07ca      	lsls	r2, r1, #31
 800bf2e:	bf4c      	ite	mi
 800bf30:	8018      	strhmi	r0, [r3, #0]
 800bf32:	6018      	strpl	r0, [r3, #0]
 800bf34:	e7eb      	b.n	800bf0e <_scanf_i+0x1aa>
 800bf36:	2001      	movs	r0, #1
 800bf38:	e7f2      	b.n	800bf20 <_scanf_i+0x1bc>
 800bf3a:	bf00      	nop
 800bf3c:	0800ce48 	.word	0x0800ce48
 800bf40:	08007b71 	.word	0x08007b71
 800bf44:	0800c9d5 	.word	0x0800c9d5
 800bf48:	0800d221 	.word	0x0800d221

0800bf4c <__swhatbuf_r>:
 800bf4c:	b570      	push	{r4, r5, r6, lr}
 800bf4e:	460c      	mov	r4, r1
 800bf50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf54:	2900      	cmp	r1, #0
 800bf56:	b096      	sub	sp, #88	@ 0x58
 800bf58:	4615      	mov	r5, r2
 800bf5a:	461e      	mov	r6, r3
 800bf5c:	da0d      	bge.n	800bf7a <__swhatbuf_r+0x2e>
 800bf5e:	89a3      	ldrh	r3, [r4, #12]
 800bf60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bf64:	f04f 0100 	mov.w	r1, #0
 800bf68:	bf14      	ite	ne
 800bf6a:	2340      	movne	r3, #64	@ 0x40
 800bf6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bf70:	2000      	movs	r0, #0
 800bf72:	6031      	str	r1, [r6, #0]
 800bf74:	602b      	str	r3, [r5, #0]
 800bf76:	b016      	add	sp, #88	@ 0x58
 800bf78:	bd70      	pop	{r4, r5, r6, pc}
 800bf7a:	466a      	mov	r2, sp
 800bf7c:	f000 f8d6 	bl	800c12c <_fstat_r>
 800bf80:	2800      	cmp	r0, #0
 800bf82:	dbec      	blt.n	800bf5e <__swhatbuf_r+0x12>
 800bf84:	9901      	ldr	r1, [sp, #4]
 800bf86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf8e:	4259      	negs	r1, r3
 800bf90:	4159      	adcs	r1, r3
 800bf92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf96:	e7eb      	b.n	800bf70 <__swhatbuf_r+0x24>

0800bf98 <__smakebuf_r>:
 800bf98:	898b      	ldrh	r3, [r1, #12]
 800bf9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf9c:	079d      	lsls	r5, r3, #30
 800bf9e:	4606      	mov	r6, r0
 800bfa0:	460c      	mov	r4, r1
 800bfa2:	d507      	bpl.n	800bfb4 <__smakebuf_r+0x1c>
 800bfa4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bfa8:	6023      	str	r3, [r4, #0]
 800bfaa:	6123      	str	r3, [r4, #16]
 800bfac:	2301      	movs	r3, #1
 800bfae:	6163      	str	r3, [r4, #20]
 800bfb0:	b003      	add	sp, #12
 800bfb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfb4:	ab01      	add	r3, sp, #4
 800bfb6:	466a      	mov	r2, sp
 800bfb8:	f7ff ffc8 	bl	800bf4c <__swhatbuf_r>
 800bfbc:	9f00      	ldr	r7, [sp, #0]
 800bfbe:	4605      	mov	r5, r0
 800bfc0:	4639      	mov	r1, r7
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	f7fd fec8 	bl	8009d58 <_malloc_r>
 800bfc8:	b948      	cbnz	r0, 800bfde <__smakebuf_r+0x46>
 800bfca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfce:	059a      	lsls	r2, r3, #22
 800bfd0:	d4ee      	bmi.n	800bfb0 <__smakebuf_r+0x18>
 800bfd2:	f023 0303 	bic.w	r3, r3, #3
 800bfd6:	f043 0302 	orr.w	r3, r3, #2
 800bfda:	81a3      	strh	r3, [r4, #12]
 800bfdc:	e7e2      	b.n	800bfa4 <__smakebuf_r+0xc>
 800bfde:	89a3      	ldrh	r3, [r4, #12]
 800bfe0:	6020      	str	r0, [r4, #0]
 800bfe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfe6:	81a3      	strh	r3, [r4, #12]
 800bfe8:	9b01      	ldr	r3, [sp, #4]
 800bfea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bfee:	b15b      	cbz	r3, 800c008 <__smakebuf_r+0x70>
 800bff0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bff4:	4630      	mov	r0, r6
 800bff6:	f000 f8ab 	bl	800c150 <_isatty_r>
 800bffa:	b128      	cbz	r0, 800c008 <__smakebuf_r+0x70>
 800bffc:	89a3      	ldrh	r3, [r4, #12]
 800bffe:	f023 0303 	bic.w	r3, r3, #3
 800c002:	f043 0301 	orr.w	r3, r3, #1
 800c006:	81a3      	strh	r3, [r4, #12]
 800c008:	89a3      	ldrh	r3, [r4, #12]
 800c00a:	431d      	orrs	r5, r3
 800c00c:	81a5      	strh	r5, [r4, #12]
 800c00e:	e7cf      	b.n	800bfb0 <__smakebuf_r+0x18>

0800c010 <__sccl>:
 800c010:	b570      	push	{r4, r5, r6, lr}
 800c012:	780b      	ldrb	r3, [r1, #0]
 800c014:	4604      	mov	r4, r0
 800c016:	2b5e      	cmp	r3, #94	@ 0x5e
 800c018:	bf0b      	itete	eq
 800c01a:	784b      	ldrbeq	r3, [r1, #1]
 800c01c:	1c4a      	addne	r2, r1, #1
 800c01e:	1c8a      	addeq	r2, r1, #2
 800c020:	2100      	movne	r1, #0
 800c022:	bf08      	it	eq
 800c024:	2101      	moveq	r1, #1
 800c026:	3801      	subs	r0, #1
 800c028:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c02c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c030:	42a8      	cmp	r0, r5
 800c032:	d1fb      	bne.n	800c02c <__sccl+0x1c>
 800c034:	b90b      	cbnz	r3, 800c03a <__sccl+0x2a>
 800c036:	1e50      	subs	r0, r2, #1
 800c038:	bd70      	pop	{r4, r5, r6, pc}
 800c03a:	f081 0101 	eor.w	r1, r1, #1
 800c03e:	54e1      	strb	r1, [r4, r3]
 800c040:	4610      	mov	r0, r2
 800c042:	4602      	mov	r2, r0
 800c044:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c048:	2d2d      	cmp	r5, #45	@ 0x2d
 800c04a:	d005      	beq.n	800c058 <__sccl+0x48>
 800c04c:	2d5d      	cmp	r5, #93	@ 0x5d
 800c04e:	d016      	beq.n	800c07e <__sccl+0x6e>
 800c050:	2d00      	cmp	r5, #0
 800c052:	d0f1      	beq.n	800c038 <__sccl+0x28>
 800c054:	462b      	mov	r3, r5
 800c056:	e7f2      	b.n	800c03e <__sccl+0x2e>
 800c058:	7846      	ldrb	r6, [r0, #1]
 800c05a:	2e5d      	cmp	r6, #93	@ 0x5d
 800c05c:	d0fa      	beq.n	800c054 <__sccl+0x44>
 800c05e:	42b3      	cmp	r3, r6
 800c060:	dcf8      	bgt.n	800c054 <__sccl+0x44>
 800c062:	3002      	adds	r0, #2
 800c064:	461a      	mov	r2, r3
 800c066:	3201      	adds	r2, #1
 800c068:	4296      	cmp	r6, r2
 800c06a:	54a1      	strb	r1, [r4, r2]
 800c06c:	dcfb      	bgt.n	800c066 <__sccl+0x56>
 800c06e:	1af2      	subs	r2, r6, r3
 800c070:	3a01      	subs	r2, #1
 800c072:	1c5d      	adds	r5, r3, #1
 800c074:	42b3      	cmp	r3, r6
 800c076:	bfa8      	it	ge
 800c078:	2200      	movge	r2, #0
 800c07a:	18ab      	adds	r3, r5, r2
 800c07c:	e7e1      	b.n	800c042 <__sccl+0x32>
 800c07e:	4610      	mov	r0, r2
 800c080:	e7da      	b.n	800c038 <__sccl+0x28>

0800c082 <__submore>:
 800c082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c086:	460c      	mov	r4, r1
 800c088:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c08a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c08e:	4299      	cmp	r1, r3
 800c090:	d11d      	bne.n	800c0ce <__submore+0x4c>
 800c092:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c096:	f7fd fe5f 	bl	8009d58 <_malloc_r>
 800c09a:	b918      	cbnz	r0, 800c0a4 <__submore+0x22>
 800c09c:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c0a8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c0aa:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c0ae:	6360      	str	r0, [r4, #52]	@ 0x34
 800c0b0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c0b4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c0b8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800c0bc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c0c0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800c0c4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c0c8:	6020      	str	r0, [r4, #0]
 800c0ca:	2000      	movs	r0, #0
 800c0cc:	e7e8      	b.n	800c0a0 <__submore+0x1e>
 800c0ce:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c0d0:	0077      	lsls	r7, r6, #1
 800c0d2:	463a      	mov	r2, r7
 800c0d4:	f000 fbe1 	bl	800c89a <_realloc_r>
 800c0d8:	4605      	mov	r5, r0
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	d0de      	beq.n	800c09c <__submore+0x1a>
 800c0de:	eb00 0806 	add.w	r8, r0, r6
 800c0e2:	4601      	mov	r1, r0
 800c0e4:	4632      	mov	r2, r6
 800c0e6:	4640      	mov	r0, r8
 800c0e8:	f7fc ff61 	bl	8008fae <memcpy>
 800c0ec:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c0f0:	f8c4 8000 	str.w	r8, [r4]
 800c0f4:	e7e9      	b.n	800c0ca <__submore+0x48>

0800c0f6 <memmove>:
 800c0f6:	4288      	cmp	r0, r1
 800c0f8:	b510      	push	{r4, lr}
 800c0fa:	eb01 0402 	add.w	r4, r1, r2
 800c0fe:	d902      	bls.n	800c106 <memmove+0x10>
 800c100:	4284      	cmp	r4, r0
 800c102:	4623      	mov	r3, r4
 800c104:	d807      	bhi.n	800c116 <memmove+0x20>
 800c106:	1e43      	subs	r3, r0, #1
 800c108:	42a1      	cmp	r1, r4
 800c10a:	d008      	beq.n	800c11e <memmove+0x28>
 800c10c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c110:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c114:	e7f8      	b.n	800c108 <memmove+0x12>
 800c116:	4402      	add	r2, r0
 800c118:	4601      	mov	r1, r0
 800c11a:	428a      	cmp	r2, r1
 800c11c:	d100      	bne.n	800c120 <memmove+0x2a>
 800c11e:	bd10      	pop	{r4, pc}
 800c120:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c124:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c128:	e7f7      	b.n	800c11a <memmove+0x24>
	...

0800c12c <_fstat_r>:
 800c12c:	b538      	push	{r3, r4, r5, lr}
 800c12e:	4d07      	ldr	r5, [pc, #28]	@ (800c14c <_fstat_r+0x20>)
 800c130:	2300      	movs	r3, #0
 800c132:	4604      	mov	r4, r0
 800c134:	4608      	mov	r0, r1
 800c136:	4611      	mov	r1, r2
 800c138:	602b      	str	r3, [r5, #0]
 800c13a:	f7f6 fc80 	bl	8002a3e <_fstat>
 800c13e:	1c43      	adds	r3, r0, #1
 800c140:	d102      	bne.n	800c148 <_fstat_r+0x1c>
 800c142:	682b      	ldr	r3, [r5, #0]
 800c144:	b103      	cbz	r3, 800c148 <_fstat_r+0x1c>
 800c146:	6023      	str	r3, [r4, #0]
 800c148:	bd38      	pop	{r3, r4, r5, pc}
 800c14a:	bf00      	nop
 800c14c:	200011d0 	.word	0x200011d0

0800c150 <_isatty_r>:
 800c150:	b538      	push	{r3, r4, r5, lr}
 800c152:	4d06      	ldr	r5, [pc, #24]	@ (800c16c <_isatty_r+0x1c>)
 800c154:	2300      	movs	r3, #0
 800c156:	4604      	mov	r4, r0
 800c158:	4608      	mov	r0, r1
 800c15a:	602b      	str	r3, [r5, #0]
 800c15c:	f7f6 fc7f 	bl	8002a5e <_isatty>
 800c160:	1c43      	adds	r3, r0, #1
 800c162:	d102      	bne.n	800c16a <_isatty_r+0x1a>
 800c164:	682b      	ldr	r3, [r5, #0]
 800c166:	b103      	cbz	r3, 800c16a <_isatty_r+0x1a>
 800c168:	6023      	str	r3, [r4, #0]
 800c16a:	bd38      	pop	{r3, r4, r5, pc}
 800c16c:	200011d0 	.word	0x200011d0

0800c170 <_sbrk_r>:
 800c170:	b538      	push	{r3, r4, r5, lr}
 800c172:	4d06      	ldr	r5, [pc, #24]	@ (800c18c <_sbrk_r+0x1c>)
 800c174:	2300      	movs	r3, #0
 800c176:	4604      	mov	r4, r0
 800c178:	4608      	mov	r0, r1
 800c17a:	602b      	str	r3, [r5, #0]
 800c17c:	f7f6 fc88 	bl	8002a90 <_sbrk>
 800c180:	1c43      	adds	r3, r0, #1
 800c182:	d102      	bne.n	800c18a <_sbrk_r+0x1a>
 800c184:	682b      	ldr	r3, [r5, #0]
 800c186:	b103      	cbz	r3, 800c18a <_sbrk_r+0x1a>
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	bd38      	pop	{r3, r4, r5, pc}
 800c18c:	200011d0 	.word	0x200011d0

0800c190 <nan>:
 800c190:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c198 <nan+0x8>
 800c194:	4770      	bx	lr
 800c196:	bf00      	nop
 800c198:	00000000 	.word	0x00000000
 800c19c:	7ff80000 	.word	0x7ff80000

0800c1a0 <__assert_func>:
 800c1a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1a2:	4614      	mov	r4, r2
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	4b09      	ldr	r3, [pc, #36]	@ (800c1cc <__assert_func+0x2c>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4605      	mov	r5, r0
 800c1ac:	68d8      	ldr	r0, [r3, #12]
 800c1ae:	b954      	cbnz	r4, 800c1c6 <__assert_func+0x26>
 800c1b0:	4b07      	ldr	r3, [pc, #28]	@ (800c1d0 <__assert_func+0x30>)
 800c1b2:	461c      	mov	r4, r3
 800c1b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1b8:	9100      	str	r1, [sp, #0]
 800c1ba:	462b      	mov	r3, r5
 800c1bc:	4905      	ldr	r1, [pc, #20]	@ (800c1d4 <__assert_func+0x34>)
 800c1be:	f000 fc19 	bl	800c9f4 <fiprintf>
 800c1c2:	f000 fc29 	bl	800ca18 <abort>
 800c1c6:	4b04      	ldr	r3, [pc, #16]	@ (800c1d8 <__assert_func+0x38>)
 800c1c8:	e7f4      	b.n	800c1b4 <__assert_func+0x14>
 800c1ca:	bf00      	nop
 800c1cc:	2000002c 	.word	0x2000002c
 800c1d0:	0800d26f 	.word	0x0800d26f
 800c1d4:	0800d241 	.word	0x0800d241
 800c1d8:	0800d234 	.word	0x0800d234

0800c1dc <_calloc_r>:
 800c1dc:	b570      	push	{r4, r5, r6, lr}
 800c1de:	fba1 5402 	umull	r5, r4, r1, r2
 800c1e2:	b93c      	cbnz	r4, 800c1f4 <_calloc_r+0x18>
 800c1e4:	4629      	mov	r1, r5
 800c1e6:	f7fd fdb7 	bl	8009d58 <_malloc_r>
 800c1ea:	4606      	mov	r6, r0
 800c1ec:	b928      	cbnz	r0, 800c1fa <_calloc_r+0x1e>
 800c1ee:	2600      	movs	r6, #0
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	bd70      	pop	{r4, r5, r6, pc}
 800c1f4:	220c      	movs	r2, #12
 800c1f6:	6002      	str	r2, [r0, #0]
 800c1f8:	e7f9      	b.n	800c1ee <_calloc_r+0x12>
 800c1fa:	462a      	mov	r2, r5
 800c1fc:	4621      	mov	r1, r4
 800c1fe:	f7fc fe45 	bl	8008e8c <memset>
 800c202:	e7f5      	b.n	800c1f0 <_calloc_r+0x14>

0800c204 <rshift>:
 800c204:	6903      	ldr	r3, [r0, #16]
 800c206:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c20a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c20e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c212:	f100 0414 	add.w	r4, r0, #20
 800c216:	dd45      	ble.n	800c2a4 <rshift+0xa0>
 800c218:	f011 011f 	ands.w	r1, r1, #31
 800c21c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c220:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c224:	d10c      	bne.n	800c240 <rshift+0x3c>
 800c226:	f100 0710 	add.w	r7, r0, #16
 800c22a:	4629      	mov	r1, r5
 800c22c:	42b1      	cmp	r1, r6
 800c22e:	d334      	bcc.n	800c29a <rshift+0x96>
 800c230:	1a9b      	subs	r3, r3, r2
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	1eea      	subs	r2, r5, #3
 800c236:	4296      	cmp	r6, r2
 800c238:	bf38      	it	cc
 800c23a:	2300      	movcc	r3, #0
 800c23c:	4423      	add	r3, r4
 800c23e:	e015      	b.n	800c26c <rshift+0x68>
 800c240:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c244:	f1c1 0820 	rsb	r8, r1, #32
 800c248:	40cf      	lsrs	r7, r1
 800c24a:	f105 0e04 	add.w	lr, r5, #4
 800c24e:	46a1      	mov	r9, r4
 800c250:	4576      	cmp	r6, lr
 800c252:	46f4      	mov	ip, lr
 800c254:	d815      	bhi.n	800c282 <rshift+0x7e>
 800c256:	1a9a      	subs	r2, r3, r2
 800c258:	0092      	lsls	r2, r2, #2
 800c25a:	3a04      	subs	r2, #4
 800c25c:	3501      	adds	r5, #1
 800c25e:	42ae      	cmp	r6, r5
 800c260:	bf38      	it	cc
 800c262:	2200      	movcc	r2, #0
 800c264:	18a3      	adds	r3, r4, r2
 800c266:	50a7      	str	r7, [r4, r2]
 800c268:	b107      	cbz	r7, 800c26c <rshift+0x68>
 800c26a:	3304      	adds	r3, #4
 800c26c:	1b1a      	subs	r2, r3, r4
 800c26e:	42a3      	cmp	r3, r4
 800c270:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c274:	bf08      	it	eq
 800c276:	2300      	moveq	r3, #0
 800c278:	6102      	str	r2, [r0, #16]
 800c27a:	bf08      	it	eq
 800c27c:	6143      	streq	r3, [r0, #20]
 800c27e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c282:	f8dc c000 	ldr.w	ip, [ip]
 800c286:	fa0c fc08 	lsl.w	ip, ip, r8
 800c28a:	ea4c 0707 	orr.w	r7, ip, r7
 800c28e:	f849 7b04 	str.w	r7, [r9], #4
 800c292:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c296:	40cf      	lsrs	r7, r1
 800c298:	e7da      	b.n	800c250 <rshift+0x4c>
 800c29a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c29e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c2a2:	e7c3      	b.n	800c22c <rshift+0x28>
 800c2a4:	4623      	mov	r3, r4
 800c2a6:	e7e1      	b.n	800c26c <rshift+0x68>

0800c2a8 <__hexdig_fun>:
 800c2a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c2ac:	2b09      	cmp	r3, #9
 800c2ae:	d802      	bhi.n	800c2b6 <__hexdig_fun+0xe>
 800c2b0:	3820      	subs	r0, #32
 800c2b2:	b2c0      	uxtb	r0, r0
 800c2b4:	4770      	bx	lr
 800c2b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c2ba:	2b05      	cmp	r3, #5
 800c2bc:	d801      	bhi.n	800c2c2 <__hexdig_fun+0x1a>
 800c2be:	3847      	subs	r0, #71	@ 0x47
 800c2c0:	e7f7      	b.n	800c2b2 <__hexdig_fun+0xa>
 800c2c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c2c6:	2b05      	cmp	r3, #5
 800c2c8:	d801      	bhi.n	800c2ce <__hexdig_fun+0x26>
 800c2ca:	3827      	subs	r0, #39	@ 0x27
 800c2cc:	e7f1      	b.n	800c2b2 <__hexdig_fun+0xa>
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	4770      	bx	lr
	...

0800c2d4 <__gethex>:
 800c2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d8:	b085      	sub	sp, #20
 800c2da:	468a      	mov	sl, r1
 800c2dc:	9302      	str	r3, [sp, #8]
 800c2de:	680b      	ldr	r3, [r1, #0]
 800c2e0:	9001      	str	r0, [sp, #4]
 800c2e2:	4690      	mov	r8, r2
 800c2e4:	1c9c      	adds	r4, r3, #2
 800c2e6:	46a1      	mov	r9, r4
 800c2e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c2ec:	2830      	cmp	r0, #48	@ 0x30
 800c2ee:	d0fa      	beq.n	800c2e6 <__gethex+0x12>
 800c2f0:	eba9 0303 	sub.w	r3, r9, r3
 800c2f4:	f1a3 0b02 	sub.w	fp, r3, #2
 800c2f8:	f7ff ffd6 	bl	800c2a8 <__hexdig_fun>
 800c2fc:	4605      	mov	r5, r0
 800c2fe:	2800      	cmp	r0, #0
 800c300:	d168      	bne.n	800c3d4 <__gethex+0x100>
 800c302:	49a0      	ldr	r1, [pc, #640]	@ (800c584 <__gethex+0x2b0>)
 800c304:	2201      	movs	r2, #1
 800c306:	4648      	mov	r0, r9
 800c308:	f7fc fdc8 	bl	8008e9c <strncmp>
 800c30c:	4607      	mov	r7, r0
 800c30e:	2800      	cmp	r0, #0
 800c310:	d167      	bne.n	800c3e2 <__gethex+0x10e>
 800c312:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c316:	4626      	mov	r6, r4
 800c318:	f7ff ffc6 	bl	800c2a8 <__hexdig_fun>
 800c31c:	2800      	cmp	r0, #0
 800c31e:	d062      	beq.n	800c3e6 <__gethex+0x112>
 800c320:	4623      	mov	r3, r4
 800c322:	7818      	ldrb	r0, [r3, #0]
 800c324:	2830      	cmp	r0, #48	@ 0x30
 800c326:	4699      	mov	r9, r3
 800c328:	f103 0301 	add.w	r3, r3, #1
 800c32c:	d0f9      	beq.n	800c322 <__gethex+0x4e>
 800c32e:	f7ff ffbb 	bl	800c2a8 <__hexdig_fun>
 800c332:	fab0 f580 	clz	r5, r0
 800c336:	096d      	lsrs	r5, r5, #5
 800c338:	f04f 0b01 	mov.w	fp, #1
 800c33c:	464a      	mov	r2, r9
 800c33e:	4616      	mov	r6, r2
 800c340:	3201      	adds	r2, #1
 800c342:	7830      	ldrb	r0, [r6, #0]
 800c344:	f7ff ffb0 	bl	800c2a8 <__hexdig_fun>
 800c348:	2800      	cmp	r0, #0
 800c34a:	d1f8      	bne.n	800c33e <__gethex+0x6a>
 800c34c:	498d      	ldr	r1, [pc, #564]	@ (800c584 <__gethex+0x2b0>)
 800c34e:	2201      	movs	r2, #1
 800c350:	4630      	mov	r0, r6
 800c352:	f7fc fda3 	bl	8008e9c <strncmp>
 800c356:	2800      	cmp	r0, #0
 800c358:	d13f      	bne.n	800c3da <__gethex+0x106>
 800c35a:	b944      	cbnz	r4, 800c36e <__gethex+0x9a>
 800c35c:	1c74      	adds	r4, r6, #1
 800c35e:	4622      	mov	r2, r4
 800c360:	4616      	mov	r6, r2
 800c362:	3201      	adds	r2, #1
 800c364:	7830      	ldrb	r0, [r6, #0]
 800c366:	f7ff ff9f 	bl	800c2a8 <__hexdig_fun>
 800c36a:	2800      	cmp	r0, #0
 800c36c:	d1f8      	bne.n	800c360 <__gethex+0x8c>
 800c36e:	1ba4      	subs	r4, r4, r6
 800c370:	00a7      	lsls	r7, r4, #2
 800c372:	7833      	ldrb	r3, [r6, #0]
 800c374:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c378:	2b50      	cmp	r3, #80	@ 0x50
 800c37a:	d13e      	bne.n	800c3fa <__gethex+0x126>
 800c37c:	7873      	ldrb	r3, [r6, #1]
 800c37e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c380:	d033      	beq.n	800c3ea <__gethex+0x116>
 800c382:	2b2d      	cmp	r3, #45	@ 0x2d
 800c384:	d034      	beq.n	800c3f0 <__gethex+0x11c>
 800c386:	1c71      	adds	r1, r6, #1
 800c388:	2400      	movs	r4, #0
 800c38a:	7808      	ldrb	r0, [r1, #0]
 800c38c:	f7ff ff8c 	bl	800c2a8 <__hexdig_fun>
 800c390:	1e43      	subs	r3, r0, #1
 800c392:	b2db      	uxtb	r3, r3
 800c394:	2b18      	cmp	r3, #24
 800c396:	d830      	bhi.n	800c3fa <__gethex+0x126>
 800c398:	f1a0 0210 	sub.w	r2, r0, #16
 800c39c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c3a0:	f7ff ff82 	bl	800c2a8 <__hexdig_fun>
 800c3a4:	f100 3cff 	add.w	ip, r0, #4294967295
 800c3a8:	fa5f fc8c 	uxtb.w	ip, ip
 800c3ac:	f1bc 0f18 	cmp.w	ip, #24
 800c3b0:	f04f 030a 	mov.w	r3, #10
 800c3b4:	d91e      	bls.n	800c3f4 <__gethex+0x120>
 800c3b6:	b104      	cbz	r4, 800c3ba <__gethex+0xe6>
 800c3b8:	4252      	negs	r2, r2
 800c3ba:	4417      	add	r7, r2
 800c3bc:	f8ca 1000 	str.w	r1, [sl]
 800c3c0:	b1ed      	cbz	r5, 800c3fe <__gethex+0x12a>
 800c3c2:	f1bb 0f00 	cmp.w	fp, #0
 800c3c6:	bf0c      	ite	eq
 800c3c8:	2506      	moveq	r5, #6
 800c3ca:	2500      	movne	r5, #0
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	b005      	add	sp, #20
 800c3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d4:	2500      	movs	r5, #0
 800c3d6:	462c      	mov	r4, r5
 800c3d8:	e7b0      	b.n	800c33c <__gethex+0x68>
 800c3da:	2c00      	cmp	r4, #0
 800c3dc:	d1c7      	bne.n	800c36e <__gethex+0x9a>
 800c3de:	4627      	mov	r7, r4
 800c3e0:	e7c7      	b.n	800c372 <__gethex+0x9e>
 800c3e2:	464e      	mov	r6, r9
 800c3e4:	462f      	mov	r7, r5
 800c3e6:	2501      	movs	r5, #1
 800c3e8:	e7c3      	b.n	800c372 <__gethex+0x9e>
 800c3ea:	2400      	movs	r4, #0
 800c3ec:	1cb1      	adds	r1, r6, #2
 800c3ee:	e7cc      	b.n	800c38a <__gethex+0xb6>
 800c3f0:	2401      	movs	r4, #1
 800c3f2:	e7fb      	b.n	800c3ec <__gethex+0x118>
 800c3f4:	fb03 0002 	mla	r0, r3, r2, r0
 800c3f8:	e7ce      	b.n	800c398 <__gethex+0xc4>
 800c3fa:	4631      	mov	r1, r6
 800c3fc:	e7de      	b.n	800c3bc <__gethex+0xe8>
 800c3fe:	eba6 0309 	sub.w	r3, r6, r9
 800c402:	3b01      	subs	r3, #1
 800c404:	4629      	mov	r1, r5
 800c406:	2b07      	cmp	r3, #7
 800c408:	dc0a      	bgt.n	800c420 <__gethex+0x14c>
 800c40a:	9801      	ldr	r0, [sp, #4]
 800c40c:	f7fd fd30 	bl	8009e70 <_Balloc>
 800c410:	4604      	mov	r4, r0
 800c412:	b940      	cbnz	r0, 800c426 <__gethex+0x152>
 800c414:	4b5c      	ldr	r3, [pc, #368]	@ (800c588 <__gethex+0x2b4>)
 800c416:	4602      	mov	r2, r0
 800c418:	21e4      	movs	r1, #228	@ 0xe4
 800c41a:	485c      	ldr	r0, [pc, #368]	@ (800c58c <__gethex+0x2b8>)
 800c41c:	f7ff fec0 	bl	800c1a0 <__assert_func>
 800c420:	3101      	adds	r1, #1
 800c422:	105b      	asrs	r3, r3, #1
 800c424:	e7ef      	b.n	800c406 <__gethex+0x132>
 800c426:	f100 0a14 	add.w	sl, r0, #20
 800c42a:	2300      	movs	r3, #0
 800c42c:	4655      	mov	r5, sl
 800c42e:	469b      	mov	fp, r3
 800c430:	45b1      	cmp	r9, r6
 800c432:	d337      	bcc.n	800c4a4 <__gethex+0x1d0>
 800c434:	f845 bb04 	str.w	fp, [r5], #4
 800c438:	eba5 050a 	sub.w	r5, r5, sl
 800c43c:	10ad      	asrs	r5, r5, #2
 800c43e:	6125      	str	r5, [r4, #16]
 800c440:	4658      	mov	r0, fp
 800c442:	f7fd fe07 	bl	800a054 <__hi0bits>
 800c446:	016d      	lsls	r5, r5, #5
 800c448:	f8d8 6000 	ldr.w	r6, [r8]
 800c44c:	1a2d      	subs	r5, r5, r0
 800c44e:	42b5      	cmp	r5, r6
 800c450:	dd54      	ble.n	800c4fc <__gethex+0x228>
 800c452:	1bad      	subs	r5, r5, r6
 800c454:	4629      	mov	r1, r5
 800c456:	4620      	mov	r0, r4
 800c458:	f7fe f99b 	bl	800a792 <__any_on>
 800c45c:	4681      	mov	r9, r0
 800c45e:	b178      	cbz	r0, 800c480 <__gethex+0x1ac>
 800c460:	1e6b      	subs	r3, r5, #1
 800c462:	1159      	asrs	r1, r3, #5
 800c464:	f003 021f 	and.w	r2, r3, #31
 800c468:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c46c:	f04f 0901 	mov.w	r9, #1
 800c470:	fa09 f202 	lsl.w	r2, r9, r2
 800c474:	420a      	tst	r2, r1
 800c476:	d003      	beq.n	800c480 <__gethex+0x1ac>
 800c478:	454b      	cmp	r3, r9
 800c47a:	dc36      	bgt.n	800c4ea <__gethex+0x216>
 800c47c:	f04f 0902 	mov.w	r9, #2
 800c480:	4629      	mov	r1, r5
 800c482:	4620      	mov	r0, r4
 800c484:	f7ff febe 	bl	800c204 <rshift>
 800c488:	442f      	add	r7, r5
 800c48a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c48e:	42bb      	cmp	r3, r7
 800c490:	da42      	bge.n	800c518 <__gethex+0x244>
 800c492:	9801      	ldr	r0, [sp, #4]
 800c494:	4621      	mov	r1, r4
 800c496:	f7fd fd2b 	bl	8009ef0 <_Bfree>
 800c49a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c49c:	2300      	movs	r3, #0
 800c49e:	6013      	str	r3, [r2, #0]
 800c4a0:	25a3      	movs	r5, #163	@ 0xa3
 800c4a2:	e793      	b.n	800c3cc <__gethex+0xf8>
 800c4a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c4a8:	2a2e      	cmp	r2, #46	@ 0x2e
 800c4aa:	d012      	beq.n	800c4d2 <__gethex+0x1fe>
 800c4ac:	2b20      	cmp	r3, #32
 800c4ae:	d104      	bne.n	800c4ba <__gethex+0x1e6>
 800c4b0:	f845 bb04 	str.w	fp, [r5], #4
 800c4b4:	f04f 0b00 	mov.w	fp, #0
 800c4b8:	465b      	mov	r3, fp
 800c4ba:	7830      	ldrb	r0, [r6, #0]
 800c4bc:	9303      	str	r3, [sp, #12]
 800c4be:	f7ff fef3 	bl	800c2a8 <__hexdig_fun>
 800c4c2:	9b03      	ldr	r3, [sp, #12]
 800c4c4:	f000 000f 	and.w	r0, r0, #15
 800c4c8:	4098      	lsls	r0, r3
 800c4ca:	ea4b 0b00 	orr.w	fp, fp, r0
 800c4ce:	3304      	adds	r3, #4
 800c4d0:	e7ae      	b.n	800c430 <__gethex+0x15c>
 800c4d2:	45b1      	cmp	r9, r6
 800c4d4:	d8ea      	bhi.n	800c4ac <__gethex+0x1d8>
 800c4d6:	492b      	ldr	r1, [pc, #172]	@ (800c584 <__gethex+0x2b0>)
 800c4d8:	9303      	str	r3, [sp, #12]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	4630      	mov	r0, r6
 800c4de:	f7fc fcdd 	bl	8008e9c <strncmp>
 800c4e2:	9b03      	ldr	r3, [sp, #12]
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	d1e1      	bne.n	800c4ac <__gethex+0x1d8>
 800c4e8:	e7a2      	b.n	800c430 <__gethex+0x15c>
 800c4ea:	1ea9      	subs	r1, r5, #2
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	f7fe f950 	bl	800a792 <__any_on>
 800c4f2:	2800      	cmp	r0, #0
 800c4f4:	d0c2      	beq.n	800c47c <__gethex+0x1a8>
 800c4f6:	f04f 0903 	mov.w	r9, #3
 800c4fa:	e7c1      	b.n	800c480 <__gethex+0x1ac>
 800c4fc:	da09      	bge.n	800c512 <__gethex+0x23e>
 800c4fe:	1b75      	subs	r5, r6, r5
 800c500:	4621      	mov	r1, r4
 800c502:	9801      	ldr	r0, [sp, #4]
 800c504:	462a      	mov	r2, r5
 800c506:	f7fd ff0b 	bl	800a320 <__lshift>
 800c50a:	1b7f      	subs	r7, r7, r5
 800c50c:	4604      	mov	r4, r0
 800c50e:	f100 0a14 	add.w	sl, r0, #20
 800c512:	f04f 0900 	mov.w	r9, #0
 800c516:	e7b8      	b.n	800c48a <__gethex+0x1b6>
 800c518:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c51c:	42bd      	cmp	r5, r7
 800c51e:	dd6f      	ble.n	800c600 <__gethex+0x32c>
 800c520:	1bed      	subs	r5, r5, r7
 800c522:	42ae      	cmp	r6, r5
 800c524:	dc34      	bgt.n	800c590 <__gethex+0x2bc>
 800c526:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c52a:	2b02      	cmp	r3, #2
 800c52c:	d022      	beq.n	800c574 <__gethex+0x2a0>
 800c52e:	2b03      	cmp	r3, #3
 800c530:	d024      	beq.n	800c57c <__gethex+0x2a8>
 800c532:	2b01      	cmp	r3, #1
 800c534:	d115      	bne.n	800c562 <__gethex+0x28e>
 800c536:	42ae      	cmp	r6, r5
 800c538:	d113      	bne.n	800c562 <__gethex+0x28e>
 800c53a:	2e01      	cmp	r6, #1
 800c53c:	d10b      	bne.n	800c556 <__gethex+0x282>
 800c53e:	9a02      	ldr	r2, [sp, #8]
 800c540:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c544:	6013      	str	r3, [r2, #0]
 800c546:	2301      	movs	r3, #1
 800c548:	6123      	str	r3, [r4, #16]
 800c54a:	f8ca 3000 	str.w	r3, [sl]
 800c54e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c550:	2562      	movs	r5, #98	@ 0x62
 800c552:	601c      	str	r4, [r3, #0]
 800c554:	e73a      	b.n	800c3cc <__gethex+0xf8>
 800c556:	1e71      	subs	r1, r6, #1
 800c558:	4620      	mov	r0, r4
 800c55a:	f7fe f91a 	bl	800a792 <__any_on>
 800c55e:	2800      	cmp	r0, #0
 800c560:	d1ed      	bne.n	800c53e <__gethex+0x26a>
 800c562:	9801      	ldr	r0, [sp, #4]
 800c564:	4621      	mov	r1, r4
 800c566:	f7fd fcc3 	bl	8009ef0 <_Bfree>
 800c56a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c56c:	2300      	movs	r3, #0
 800c56e:	6013      	str	r3, [r2, #0]
 800c570:	2550      	movs	r5, #80	@ 0x50
 800c572:	e72b      	b.n	800c3cc <__gethex+0xf8>
 800c574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c576:	2b00      	cmp	r3, #0
 800c578:	d1f3      	bne.n	800c562 <__gethex+0x28e>
 800c57a:	e7e0      	b.n	800c53e <__gethex+0x26a>
 800c57c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d1dd      	bne.n	800c53e <__gethex+0x26a>
 800c582:	e7ee      	b.n	800c562 <__gethex+0x28e>
 800c584:	0800d1a8 	.word	0x0800d1a8
 800c588:	0800d040 	.word	0x0800d040
 800c58c:	0800d270 	.word	0x0800d270
 800c590:	1e6f      	subs	r7, r5, #1
 800c592:	f1b9 0f00 	cmp.w	r9, #0
 800c596:	d130      	bne.n	800c5fa <__gethex+0x326>
 800c598:	b127      	cbz	r7, 800c5a4 <__gethex+0x2d0>
 800c59a:	4639      	mov	r1, r7
 800c59c:	4620      	mov	r0, r4
 800c59e:	f7fe f8f8 	bl	800a792 <__any_on>
 800c5a2:	4681      	mov	r9, r0
 800c5a4:	117a      	asrs	r2, r7, #5
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c5ac:	f007 071f 	and.w	r7, r7, #31
 800c5b0:	40bb      	lsls	r3, r7
 800c5b2:	4213      	tst	r3, r2
 800c5b4:	4629      	mov	r1, r5
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	bf18      	it	ne
 800c5ba:	f049 0902 	orrne.w	r9, r9, #2
 800c5be:	f7ff fe21 	bl	800c204 <rshift>
 800c5c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c5c6:	1b76      	subs	r6, r6, r5
 800c5c8:	2502      	movs	r5, #2
 800c5ca:	f1b9 0f00 	cmp.w	r9, #0
 800c5ce:	d047      	beq.n	800c660 <__gethex+0x38c>
 800c5d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c5d4:	2b02      	cmp	r3, #2
 800c5d6:	d015      	beq.n	800c604 <__gethex+0x330>
 800c5d8:	2b03      	cmp	r3, #3
 800c5da:	d017      	beq.n	800c60c <__gethex+0x338>
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d109      	bne.n	800c5f4 <__gethex+0x320>
 800c5e0:	f019 0f02 	tst.w	r9, #2
 800c5e4:	d006      	beq.n	800c5f4 <__gethex+0x320>
 800c5e6:	f8da 3000 	ldr.w	r3, [sl]
 800c5ea:	ea49 0903 	orr.w	r9, r9, r3
 800c5ee:	f019 0f01 	tst.w	r9, #1
 800c5f2:	d10e      	bne.n	800c612 <__gethex+0x33e>
 800c5f4:	f045 0510 	orr.w	r5, r5, #16
 800c5f8:	e032      	b.n	800c660 <__gethex+0x38c>
 800c5fa:	f04f 0901 	mov.w	r9, #1
 800c5fe:	e7d1      	b.n	800c5a4 <__gethex+0x2d0>
 800c600:	2501      	movs	r5, #1
 800c602:	e7e2      	b.n	800c5ca <__gethex+0x2f6>
 800c604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c606:	f1c3 0301 	rsb	r3, r3, #1
 800c60a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c60c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d0f0      	beq.n	800c5f4 <__gethex+0x320>
 800c612:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c616:	f104 0314 	add.w	r3, r4, #20
 800c61a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c61e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c622:	f04f 0c00 	mov.w	ip, #0
 800c626:	4618      	mov	r0, r3
 800c628:	f853 2b04 	ldr.w	r2, [r3], #4
 800c62c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c630:	d01b      	beq.n	800c66a <__gethex+0x396>
 800c632:	3201      	adds	r2, #1
 800c634:	6002      	str	r2, [r0, #0]
 800c636:	2d02      	cmp	r5, #2
 800c638:	f104 0314 	add.w	r3, r4, #20
 800c63c:	d13c      	bne.n	800c6b8 <__gethex+0x3e4>
 800c63e:	f8d8 2000 	ldr.w	r2, [r8]
 800c642:	3a01      	subs	r2, #1
 800c644:	42b2      	cmp	r2, r6
 800c646:	d109      	bne.n	800c65c <__gethex+0x388>
 800c648:	1171      	asrs	r1, r6, #5
 800c64a:	2201      	movs	r2, #1
 800c64c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c650:	f006 061f 	and.w	r6, r6, #31
 800c654:	fa02 f606 	lsl.w	r6, r2, r6
 800c658:	421e      	tst	r6, r3
 800c65a:	d13a      	bne.n	800c6d2 <__gethex+0x3fe>
 800c65c:	f045 0520 	orr.w	r5, r5, #32
 800c660:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c662:	601c      	str	r4, [r3, #0]
 800c664:	9b02      	ldr	r3, [sp, #8]
 800c666:	601f      	str	r7, [r3, #0]
 800c668:	e6b0      	b.n	800c3cc <__gethex+0xf8>
 800c66a:	4299      	cmp	r1, r3
 800c66c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c670:	d8d9      	bhi.n	800c626 <__gethex+0x352>
 800c672:	68a3      	ldr	r3, [r4, #8]
 800c674:	459b      	cmp	fp, r3
 800c676:	db17      	blt.n	800c6a8 <__gethex+0x3d4>
 800c678:	6861      	ldr	r1, [r4, #4]
 800c67a:	9801      	ldr	r0, [sp, #4]
 800c67c:	3101      	adds	r1, #1
 800c67e:	f7fd fbf7 	bl	8009e70 <_Balloc>
 800c682:	4681      	mov	r9, r0
 800c684:	b918      	cbnz	r0, 800c68e <__gethex+0x3ba>
 800c686:	4b1a      	ldr	r3, [pc, #104]	@ (800c6f0 <__gethex+0x41c>)
 800c688:	4602      	mov	r2, r0
 800c68a:	2184      	movs	r1, #132	@ 0x84
 800c68c:	e6c5      	b.n	800c41a <__gethex+0x146>
 800c68e:	6922      	ldr	r2, [r4, #16]
 800c690:	3202      	adds	r2, #2
 800c692:	f104 010c 	add.w	r1, r4, #12
 800c696:	0092      	lsls	r2, r2, #2
 800c698:	300c      	adds	r0, #12
 800c69a:	f7fc fc88 	bl	8008fae <memcpy>
 800c69e:	4621      	mov	r1, r4
 800c6a0:	9801      	ldr	r0, [sp, #4]
 800c6a2:	f7fd fc25 	bl	8009ef0 <_Bfree>
 800c6a6:	464c      	mov	r4, r9
 800c6a8:	6923      	ldr	r3, [r4, #16]
 800c6aa:	1c5a      	adds	r2, r3, #1
 800c6ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c6b0:	6122      	str	r2, [r4, #16]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	615a      	str	r2, [r3, #20]
 800c6b6:	e7be      	b.n	800c636 <__gethex+0x362>
 800c6b8:	6922      	ldr	r2, [r4, #16]
 800c6ba:	455a      	cmp	r2, fp
 800c6bc:	dd0b      	ble.n	800c6d6 <__gethex+0x402>
 800c6be:	2101      	movs	r1, #1
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	f7ff fd9f 	bl	800c204 <rshift>
 800c6c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6ca:	3701      	adds	r7, #1
 800c6cc:	42bb      	cmp	r3, r7
 800c6ce:	f6ff aee0 	blt.w	800c492 <__gethex+0x1be>
 800c6d2:	2501      	movs	r5, #1
 800c6d4:	e7c2      	b.n	800c65c <__gethex+0x388>
 800c6d6:	f016 061f 	ands.w	r6, r6, #31
 800c6da:	d0fa      	beq.n	800c6d2 <__gethex+0x3fe>
 800c6dc:	4453      	add	r3, sl
 800c6de:	f1c6 0620 	rsb	r6, r6, #32
 800c6e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c6e6:	f7fd fcb5 	bl	800a054 <__hi0bits>
 800c6ea:	42b0      	cmp	r0, r6
 800c6ec:	dbe7      	blt.n	800c6be <__gethex+0x3ea>
 800c6ee:	e7f0      	b.n	800c6d2 <__gethex+0x3fe>
 800c6f0:	0800d040 	.word	0x0800d040

0800c6f4 <L_shift>:
 800c6f4:	f1c2 0208 	rsb	r2, r2, #8
 800c6f8:	0092      	lsls	r2, r2, #2
 800c6fa:	b570      	push	{r4, r5, r6, lr}
 800c6fc:	f1c2 0620 	rsb	r6, r2, #32
 800c700:	6843      	ldr	r3, [r0, #4]
 800c702:	6804      	ldr	r4, [r0, #0]
 800c704:	fa03 f506 	lsl.w	r5, r3, r6
 800c708:	432c      	orrs	r4, r5
 800c70a:	40d3      	lsrs	r3, r2
 800c70c:	6004      	str	r4, [r0, #0]
 800c70e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c712:	4288      	cmp	r0, r1
 800c714:	d3f4      	bcc.n	800c700 <L_shift+0xc>
 800c716:	bd70      	pop	{r4, r5, r6, pc}

0800c718 <__match>:
 800c718:	b530      	push	{r4, r5, lr}
 800c71a:	6803      	ldr	r3, [r0, #0]
 800c71c:	3301      	adds	r3, #1
 800c71e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c722:	b914      	cbnz	r4, 800c72a <__match+0x12>
 800c724:	6003      	str	r3, [r0, #0]
 800c726:	2001      	movs	r0, #1
 800c728:	bd30      	pop	{r4, r5, pc}
 800c72a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c72e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c732:	2d19      	cmp	r5, #25
 800c734:	bf98      	it	ls
 800c736:	3220      	addls	r2, #32
 800c738:	42a2      	cmp	r2, r4
 800c73a:	d0f0      	beq.n	800c71e <__match+0x6>
 800c73c:	2000      	movs	r0, #0
 800c73e:	e7f3      	b.n	800c728 <__match+0x10>

0800c740 <__hexnan>:
 800c740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c744:	680b      	ldr	r3, [r1, #0]
 800c746:	6801      	ldr	r1, [r0, #0]
 800c748:	115e      	asrs	r6, r3, #5
 800c74a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c74e:	f013 031f 	ands.w	r3, r3, #31
 800c752:	b087      	sub	sp, #28
 800c754:	bf18      	it	ne
 800c756:	3604      	addne	r6, #4
 800c758:	2500      	movs	r5, #0
 800c75a:	1f37      	subs	r7, r6, #4
 800c75c:	4682      	mov	sl, r0
 800c75e:	4690      	mov	r8, r2
 800c760:	9301      	str	r3, [sp, #4]
 800c762:	f846 5c04 	str.w	r5, [r6, #-4]
 800c766:	46b9      	mov	r9, r7
 800c768:	463c      	mov	r4, r7
 800c76a:	9502      	str	r5, [sp, #8]
 800c76c:	46ab      	mov	fp, r5
 800c76e:	784a      	ldrb	r2, [r1, #1]
 800c770:	1c4b      	adds	r3, r1, #1
 800c772:	9303      	str	r3, [sp, #12]
 800c774:	b342      	cbz	r2, 800c7c8 <__hexnan+0x88>
 800c776:	4610      	mov	r0, r2
 800c778:	9105      	str	r1, [sp, #20]
 800c77a:	9204      	str	r2, [sp, #16]
 800c77c:	f7ff fd94 	bl	800c2a8 <__hexdig_fun>
 800c780:	2800      	cmp	r0, #0
 800c782:	d151      	bne.n	800c828 <__hexnan+0xe8>
 800c784:	9a04      	ldr	r2, [sp, #16]
 800c786:	9905      	ldr	r1, [sp, #20]
 800c788:	2a20      	cmp	r2, #32
 800c78a:	d818      	bhi.n	800c7be <__hexnan+0x7e>
 800c78c:	9b02      	ldr	r3, [sp, #8]
 800c78e:	459b      	cmp	fp, r3
 800c790:	dd13      	ble.n	800c7ba <__hexnan+0x7a>
 800c792:	454c      	cmp	r4, r9
 800c794:	d206      	bcs.n	800c7a4 <__hexnan+0x64>
 800c796:	2d07      	cmp	r5, #7
 800c798:	dc04      	bgt.n	800c7a4 <__hexnan+0x64>
 800c79a:	462a      	mov	r2, r5
 800c79c:	4649      	mov	r1, r9
 800c79e:	4620      	mov	r0, r4
 800c7a0:	f7ff ffa8 	bl	800c6f4 <L_shift>
 800c7a4:	4544      	cmp	r4, r8
 800c7a6:	d952      	bls.n	800c84e <__hexnan+0x10e>
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	f1a4 0904 	sub.w	r9, r4, #4
 800c7ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800c7b2:	f8cd b008 	str.w	fp, [sp, #8]
 800c7b6:	464c      	mov	r4, r9
 800c7b8:	461d      	mov	r5, r3
 800c7ba:	9903      	ldr	r1, [sp, #12]
 800c7bc:	e7d7      	b.n	800c76e <__hexnan+0x2e>
 800c7be:	2a29      	cmp	r2, #41	@ 0x29
 800c7c0:	d157      	bne.n	800c872 <__hexnan+0x132>
 800c7c2:	3102      	adds	r1, #2
 800c7c4:	f8ca 1000 	str.w	r1, [sl]
 800c7c8:	f1bb 0f00 	cmp.w	fp, #0
 800c7cc:	d051      	beq.n	800c872 <__hexnan+0x132>
 800c7ce:	454c      	cmp	r4, r9
 800c7d0:	d206      	bcs.n	800c7e0 <__hexnan+0xa0>
 800c7d2:	2d07      	cmp	r5, #7
 800c7d4:	dc04      	bgt.n	800c7e0 <__hexnan+0xa0>
 800c7d6:	462a      	mov	r2, r5
 800c7d8:	4649      	mov	r1, r9
 800c7da:	4620      	mov	r0, r4
 800c7dc:	f7ff ff8a 	bl	800c6f4 <L_shift>
 800c7e0:	4544      	cmp	r4, r8
 800c7e2:	d936      	bls.n	800c852 <__hexnan+0x112>
 800c7e4:	f1a8 0204 	sub.w	r2, r8, #4
 800c7e8:	4623      	mov	r3, r4
 800c7ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800c7ee:	f842 1f04 	str.w	r1, [r2, #4]!
 800c7f2:	429f      	cmp	r7, r3
 800c7f4:	d2f9      	bcs.n	800c7ea <__hexnan+0xaa>
 800c7f6:	1b3b      	subs	r3, r7, r4
 800c7f8:	f023 0303 	bic.w	r3, r3, #3
 800c7fc:	3304      	adds	r3, #4
 800c7fe:	3401      	adds	r4, #1
 800c800:	3e03      	subs	r6, #3
 800c802:	42b4      	cmp	r4, r6
 800c804:	bf88      	it	hi
 800c806:	2304      	movhi	r3, #4
 800c808:	4443      	add	r3, r8
 800c80a:	2200      	movs	r2, #0
 800c80c:	f843 2b04 	str.w	r2, [r3], #4
 800c810:	429f      	cmp	r7, r3
 800c812:	d2fb      	bcs.n	800c80c <__hexnan+0xcc>
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	b91b      	cbnz	r3, 800c820 <__hexnan+0xe0>
 800c818:	4547      	cmp	r7, r8
 800c81a:	d128      	bne.n	800c86e <__hexnan+0x12e>
 800c81c:	2301      	movs	r3, #1
 800c81e:	603b      	str	r3, [r7, #0]
 800c820:	2005      	movs	r0, #5
 800c822:	b007      	add	sp, #28
 800c824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c828:	3501      	adds	r5, #1
 800c82a:	2d08      	cmp	r5, #8
 800c82c:	f10b 0b01 	add.w	fp, fp, #1
 800c830:	dd06      	ble.n	800c840 <__hexnan+0x100>
 800c832:	4544      	cmp	r4, r8
 800c834:	d9c1      	bls.n	800c7ba <__hexnan+0x7a>
 800c836:	2300      	movs	r3, #0
 800c838:	f844 3c04 	str.w	r3, [r4, #-4]
 800c83c:	2501      	movs	r5, #1
 800c83e:	3c04      	subs	r4, #4
 800c840:	6822      	ldr	r2, [r4, #0]
 800c842:	f000 000f 	and.w	r0, r0, #15
 800c846:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c84a:	6020      	str	r0, [r4, #0]
 800c84c:	e7b5      	b.n	800c7ba <__hexnan+0x7a>
 800c84e:	2508      	movs	r5, #8
 800c850:	e7b3      	b.n	800c7ba <__hexnan+0x7a>
 800c852:	9b01      	ldr	r3, [sp, #4]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d0dd      	beq.n	800c814 <__hexnan+0xd4>
 800c858:	f1c3 0320 	rsb	r3, r3, #32
 800c85c:	f04f 32ff 	mov.w	r2, #4294967295
 800c860:	40da      	lsrs	r2, r3
 800c862:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c866:	4013      	ands	r3, r2
 800c868:	f846 3c04 	str.w	r3, [r6, #-4]
 800c86c:	e7d2      	b.n	800c814 <__hexnan+0xd4>
 800c86e:	3f04      	subs	r7, #4
 800c870:	e7d0      	b.n	800c814 <__hexnan+0xd4>
 800c872:	2004      	movs	r0, #4
 800c874:	e7d5      	b.n	800c822 <__hexnan+0xe2>

0800c876 <__ascii_mbtowc>:
 800c876:	b082      	sub	sp, #8
 800c878:	b901      	cbnz	r1, 800c87c <__ascii_mbtowc+0x6>
 800c87a:	a901      	add	r1, sp, #4
 800c87c:	b142      	cbz	r2, 800c890 <__ascii_mbtowc+0x1a>
 800c87e:	b14b      	cbz	r3, 800c894 <__ascii_mbtowc+0x1e>
 800c880:	7813      	ldrb	r3, [r2, #0]
 800c882:	600b      	str	r3, [r1, #0]
 800c884:	7812      	ldrb	r2, [r2, #0]
 800c886:	1e10      	subs	r0, r2, #0
 800c888:	bf18      	it	ne
 800c88a:	2001      	movne	r0, #1
 800c88c:	b002      	add	sp, #8
 800c88e:	4770      	bx	lr
 800c890:	4610      	mov	r0, r2
 800c892:	e7fb      	b.n	800c88c <__ascii_mbtowc+0x16>
 800c894:	f06f 0001 	mvn.w	r0, #1
 800c898:	e7f8      	b.n	800c88c <__ascii_mbtowc+0x16>

0800c89a <_realloc_r>:
 800c89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c89e:	4680      	mov	r8, r0
 800c8a0:	4615      	mov	r5, r2
 800c8a2:	460c      	mov	r4, r1
 800c8a4:	b921      	cbnz	r1, 800c8b0 <_realloc_r+0x16>
 800c8a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8aa:	4611      	mov	r1, r2
 800c8ac:	f7fd ba54 	b.w	8009d58 <_malloc_r>
 800c8b0:	b92a      	cbnz	r2, 800c8be <_realloc_r+0x24>
 800c8b2:	f7fd f9dd 	bl	8009c70 <_free_r>
 800c8b6:	2400      	movs	r4, #0
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8be:	f000 f8b2 	bl	800ca26 <_malloc_usable_size_r>
 800c8c2:	4285      	cmp	r5, r0
 800c8c4:	4606      	mov	r6, r0
 800c8c6:	d802      	bhi.n	800c8ce <_realloc_r+0x34>
 800c8c8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c8cc:	d8f4      	bhi.n	800c8b8 <_realloc_r+0x1e>
 800c8ce:	4629      	mov	r1, r5
 800c8d0:	4640      	mov	r0, r8
 800c8d2:	f7fd fa41 	bl	8009d58 <_malloc_r>
 800c8d6:	4607      	mov	r7, r0
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	d0ec      	beq.n	800c8b6 <_realloc_r+0x1c>
 800c8dc:	42b5      	cmp	r5, r6
 800c8de:	462a      	mov	r2, r5
 800c8e0:	4621      	mov	r1, r4
 800c8e2:	bf28      	it	cs
 800c8e4:	4632      	movcs	r2, r6
 800c8e6:	f7fc fb62 	bl	8008fae <memcpy>
 800c8ea:	4621      	mov	r1, r4
 800c8ec:	4640      	mov	r0, r8
 800c8ee:	f7fd f9bf 	bl	8009c70 <_free_r>
 800c8f2:	463c      	mov	r4, r7
 800c8f4:	e7e0      	b.n	800c8b8 <_realloc_r+0x1e>
	...

0800c8f8 <_strtoul_l.constprop.0>:
 800c8f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8fc:	4e34      	ldr	r6, [pc, #208]	@ (800c9d0 <_strtoul_l.constprop.0+0xd8>)
 800c8fe:	4686      	mov	lr, r0
 800c900:	460d      	mov	r5, r1
 800c902:	4628      	mov	r0, r5
 800c904:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c908:	5d37      	ldrb	r7, [r6, r4]
 800c90a:	f017 0708 	ands.w	r7, r7, #8
 800c90e:	d1f8      	bne.n	800c902 <_strtoul_l.constprop.0+0xa>
 800c910:	2c2d      	cmp	r4, #45	@ 0x2d
 800c912:	d12f      	bne.n	800c974 <_strtoul_l.constprop.0+0x7c>
 800c914:	782c      	ldrb	r4, [r5, #0]
 800c916:	2701      	movs	r7, #1
 800c918:	1c85      	adds	r5, r0, #2
 800c91a:	f033 0010 	bics.w	r0, r3, #16
 800c91e:	d109      	bne.n	800c934 <_strtoul_l.constprop.0+0x3c>
 800c920:	2c30      	cmp	r4, #48	@ 0x30
 800c922:	d12c      	bne.n	800c97e <_strtoul_l.constprop.0+0x86>
 800c924:	7828      	ldrb	r0, [r5, #0]
 800c926:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800c92a:	2858      	cmp	r0, #88	@ 0x58
 800c92c:	d127      	bne.n	800c97e <_strtoul_l.constprop.0+0x86>
 800c92e:	786c      	ldrb	r4, [r5, #1]
 800c930:	2310      	movs	r3, #16
 800c932:	3502      	adds	r5, #2
 800c934:	f04f 38ff 	mov.w	r8, #4294967295
 800c938:	2600      	movs	r6, #0
 800c93a:	fbb8 f8f3 	udiv	r8, r8, r3
 800c93e:	fb03 f908 	mul.w	r9, r3, r8
 800c942:	ea6f 0909 	mvn.w	r9, r9
 800c946:	4630      	mov	r0, r6
 800c948:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800c94c:	f1bc 0f09 	cmp.w	ip, #9
 800c950:	d81c      	bhi.n	800c98c <_strtoul_l.constprop.0+0x94>
 800c952:	4664      	mov	r4, ip
 800c954:	42a3      	cmp	r3, r4
 800c956:	dd2a      	ble.n	800c9ae <_strtoul_l.constprop.0+0xb6>
 800c958:	f1b6 3fff 	cmp.w	r6, #4294967295
 800c95c:	d007      	beq.n	800c96e <_strtoul_l.constprop.0+0x76>
 800c95e:	4580      	cmp	r8, r0
 800c960:	d322      	bcc.n	800c9a8 <_strtoul_l.constprop.0+0xb0>
 800c962:	d101      	bne.n	800c968 <_strtoul_l.constprop.0+0x70>
 800c964:	45a1      	cmp	r9, r4
 800c966:	db1f      	blt.n	800c9a8 <_strtoul_l.constprop.0+0xb0>
 800c968:	fb00 4003 	mla	r0, r0, r3, r4
 800c96c:	2601      	movs	r6, #1
 800c96e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c972:	e7e9      	b.n	800c948 <_strtoul_l.constprop.0+0x50>
 800c974:	2c2b      	cmp	r4, #43	@ 0x2b
 800c976:	bf04      	itt	eq
 800c978:	782c      	ldrbeq	r4, [r5, #0]
 800c97a:	1c85      	addeq	r5, r0, #2
 800c97c:	e7cd      	b.n	800c91a <_strtoul_l.constprop.0+0x22>
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d1d8      	bne.n	800c934 <_strtoul_l.constprop.0+0x3c>
 800c982:	2c30      	cmp	r4, #48	@ 0x30
 800c984:	bf0c      	ite	eq
 800c986:	2308      	moveq	r3, #8
 800c988:	230a      	movne	r3, #10
 800c98a:	e7d3      	b.n	800c934 <_strtoul_l.constprop.0+0x3c>
 800c98c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800c990:	f1bc 0f19 	cmp.w	ip, #25
 800c994:	d801      	bhi.n	800c99a <_strtoul_l.constprop.0+0xa2>
 800c996:	3c37      	subs	r4, #55	@ 0x37
 800c998:	e7dc      	b.n	800c954 <_strtoul_l.constprop.0+0x5c>
 800c99a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800c99e:	f1bc 0f19 	cmp.w	ip, #25
 800c9a2:	d804      	bhi.n	800c9ae <_strtoul_l.constprop.0+0xb6>
 800c9a4:	3c57      	subs	r4, #87	@ 0x57
 800c9a6:	e7d5      	b.n	800c954 <_strtoul_l.constprop.0+0x5c>
 800c9a8:	f04f 36ff 	mov.w	r6, #4294967295
 800c9ac:	e7df      	b.n	800c96e <_strtoul_l.constprop.0+0x76>
 800c9ae:	1c73      	adds	r3, r6, #1
 800c9b0:	d106      	bne.n	800c9c0 <_strtoul_l.constprop.0+0xc8>
 800c9b2:	2322      	movs	r3, #34	@ 0x22
 800c9b4:	f8ce 3000 	str.w	r3, [lr]
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	b932      	cbnz	r2, 800c9ca <_strtoul_l.constprop.0+0xd2>
 800c9bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9c0:	b107      	cbz	r7, 800c9c4 <_strtoul_l.constprop.0+0xcc>
 800c9c2:	4240      	negs	r0, r0
 800c9c4:	2a00      	cmp	r2, #0
 800c9c6:	d0f9      	beq.n	800c9bc <_strtoul_l.constprop.0+0xc4>
 800c9c8:	b106      	cbz	r6, 800c9cc <_strtoul_l.constprop.0+0xd4>
 800c9ca:	1e69      	subs	r1, r5, #1
 800c9cc:	6011      	str	r1, [r2, #0]
 800c9ce:	e7f5      	b.n	800c9bc <_strtoul_l.constprop.0+0xc4>
 800c9d0:	0800ce8d 	.word	0x0800ce8d

0800c9d4 <_strtoul_r>:
 800c9d4:	f7ff bf90 	b.w	800c8f8 <_strtoul_l.constprop.0>

0800c9d8 <__ascii_wctomb>:
 800c9d8:	4603      	mov	r3, r0
 800c9da:	4608      	mov	r0, r1
 800c9dc:	b141      	cbz	r1, 800c9f0 <__ascii_wctomb+0x18>
 800c9de:	2aff      	cmp	r2, #255	@ 0xff
 800c9e0:	d904      	bls.n	800c9ec <__ascii_wctomb+0x14>
 800c9e2:	228a      	movs	r2, #138	@ 0x8a
 800c9e4:	601a      	str	r2, [r3, #0]
 800c9e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ea:	4770      	bx	lr
 800c9ec:	700a      	strb	r2, [r1, #0]
 800c9ee:	2001      	movs	r0, #1
 800c9f0:	4770      	bx	lr
	...

0800c9f4 <fiprintf>:
 800c9f4:	b40e      	push	{r1, r2, r3}
 800c9f6:	b503      	push	{r0, r1, lr}
 800c9f8:	4601      	mov	r1, r0
 800c9fa:	ab03      	add	r3, sp, #12
 800c9fc:	4805      	ldr	r0, [pc, #20]	@ (800ca14 <fiprintf+0x20>)
 800c9fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca02:	6800      	ldr	r0, [r0, #0]
 800ca04:	9301      	str	r3, [sp, #4]
 800ca06:	f7ff f83b 	bl	800ba80 <_vfiprintf_r>
 800ca0a:	b002      	add	sp, #8
 800ca0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca10:	b003      	add	sp, #12
 800ca12:	4770      	bx	lr
 800ca14:	2000002c 	.word	0x2000002c

0800ca18 <abort>:
 800ca18:	b508      	push	{r3, lr}
 800ca1a:	2006      	movs	r0, #6
 800ca1c:	f000 f834 	bl	800ca88 <raise>
 800ca20:	2001      	movs	r0, #1
 800ca22:	f7f5 ffd9 	bl	80029d8 <_exit>

0800ca26 <_malloc_usable_size_r>:
 800ca26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca2a:	1f18      	subs	r0, r3, #4
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	bfbc      	itt	lt
 800ca30:	580b      	ldrlt	r3, [r1, r0]
 800ca32:	18c0      	addlt	r0, r0, r3
 800ca34:	4770      	bx	lr

0800ca36 <_raise_r>:
 800ca36:	291f      	cmp	r1, #31
 800ca38:	b538      	push	{r3, r4, r5, lr}
 800ca3a:	4605      	mov	r5, r0
 800ca3c:	460c      	mov	r4, r1
 800ca3e:	d904      	bls.n	800ca4a <_raise_r+0x14>
 800ca40:	2316      	movs	r3, #22
 800ca42:	6003      	str	r3, [r0, #0]
 800ca44:	f04f 30ff 	mov.w	r0, #4294967295
 800ca48:	bd38      	pop	{r3, r4, r5, pc}
 800ca4a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ca4c:	b112      	cbz	r2, 800ca54 <_raise_r+0x1e>
 800ca4e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca52:	b94b      	cbnz	r3, 800ca68 <_raise_r+0x32>
 800ca54:	4628      	mov	r0, r5
 800ca56:	f000 f831 	bl	800cabc <_getpid_r>
 800ca5a:	4622      	mov	r2, r4
 800ca5c:	4601      	mov	r1, r0
 800ca5e:	4628      	mov	r0, r5
 800ca60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca64:	f000 b818 	b.w	800ca98 <_kill_r>
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d00a      	beq.n	800ca82 <_raise_r+0x4c>
 800ca6c:	1c59      	adds	r1, r3, #1
 800ca6e:	d103      	bne.n	800ca78 <_raise_r+0x42>
 800ca70:	2316      	movs	r3, #22
 800ca72:	6003      	str	r3, [r0, #0]
 800ca74:	2001      	movs	r0, #1
 800ca76:	e7e7      	b.n	800ca48 <_raise_r+0x12>
 800ca78:	2100      	movs	r1, #0
 800ca7a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ca7e:	4620      	mov	r0, r4
 800ca80:	4798      	blx	r3
 800ca82:	2000      	movs	r0, #0
 800ca84:	e7e0      	b.n	800ca48 <_raise_r+0x12>
	...

0800ca88 <raise>:
 800ca88:	4b02      	ldr	r3, [pc, #8]	@ (800ca94 <raise+0xc>)
 800ca8a:	4601      	mov	r1, r0
 800ca8c:	6818      	ldr	r0, [r3, #0]
 800ca8e:	f7ff bfd2 	b.w	800ca36 <_raise_r>
 800ca92:	bf00      	nop
 800ca94:	2000002c 	.word	0x2000002c

0800ca98 <_kill_r>:
 800ca98:	b538      	push	{r3, r4, r5, lr}
 800ca9a:	4d07      	ldr	r5, [pc, #28]	@ (800cab8 <_kill_r+0x20>)
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	4604      	mov	r4, r0
 800caa0:	4608      	mov	r0, r1
 800caa2:	4611      	mov	r1, r2
 800caa4:	602b      	str	r3, [r5, #0]
 800caa6:	f7f5 ff87 	bl	80029b8 <_kill>
 800caaa:	1c43      	adds	r3, r0, #1
 800caac:	d102      	bne.n	800cab4 <_kill_r+0x1c>
 800caae:	682b      	ldr	r3, [r5, #0]
 800cab0:	b103      	cbz	r3, 800cab4 <_kill_r+0x1c>
 800cab2:	6023      	str	r3, [r4, #0]
 800cab4:	bd38      	pop	{r3, r4, r5, pc}
 800cab6:	bf00      	nop
 800cab8:	200011d0 	.word	0x200011d0

0800cabc <_getpid_r>:
 800cabc:	f7f5 bf74 	b.w	80029a8 <_getpid>

0800cac0 <floor>:
 800cac0:	ec51 0b10 	vmov	r0, r1, d0
 800cac4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cacc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800cad0:	2e13      	cmp	r6, #19
 800cad2:	460c      	mov	r4, r1
 800cad4:	4605      	mov	r5, r0
 800cad6:	4680      	mov	r8, r0
 800cad8:	dc34      	bgt.n	800cb44 <floor+0x84>
 800cada:	2e00      	cmp	r6, #0
 800cadc:	da17      	bge.n	800cb0e <floor+0x4e>
 800cade:	a332      	add	r3, pc, #200	@ (adr r3, 800cba8 <floor+0xe8>)
 800cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae4:	f7f3 fbd2 	bl	800028c <__adddf3>
 800cae8:	2200      	movs	r2, #0
 800caea:	2300      	movs	r3, #0
 800caec:	f7f4 f814 	bl	8000b18 <__aeabi_dcmpgt>
 800caf0:	b150      	cbz	r0, 800cb08 <floor+0x48>
 800caf2:	2c00      	cmp	r4, #0
 800caf4:	da55      	bge.n	800cba2 <floor+0xe2>
 800caf6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800cafa:	432c      	orrs	r4, r5
 800cafc:	2500      	movs	r5, #0
 800cafe:	42ac      	cmp	r4, r5
 800cb00:	4c2b      	ldr	r4, [pc, #172]	@ (800cbb0 <floor+0xf0>)
 800cb02:	bf08      	it	eq
 800cb04:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800cb08:	4621      	mov	r1, r4
 800cb0a:	4628      	mov	r0, r5
 800cb0c:	e023      	b.n	800cb56 <floor+0x96>
 800cb0e:	4f29      	ldr	r7, [pc, #164]	@ (800cbb4 <floor+0xf4>)
 800cb10:	4137      	asrs	r7, r6
 800cb12:	ea01 0307 	and.w	r3, r1, r7
 800cb16:	4303      	orrs	r3, r0
 800cb18:	d01d      	beq.n	800cb56 <floor+0x96>
 800cb1a:	a323      	add	r3, pc, #140	@ (adr r3, 800cba8 <floor+0xe8>)
 800cb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb20:	f7f3 fbb4 	bl	800028c <__adddf3>
 800cb24:	2200      	movs	r2, #0
 800cb26:	2300      	movs	r3, #0
 800cb28:	f7f3 fff6 	bl	8000b18 <__aeabi_dcmpgt>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d0eb      	beq.n	800cb08 <floor+0x48>
 800cb30:	2c00      	cmp	r4, #0
 800cb32:	bfbe      	ittt	lt
 800cb34:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800cb38:	4133      	asrlt	r3, r6
 800cb3a:	18e4      	addlt	r4, r4, r3
 800cb3c:	ea24 0407 	bic.w	r4, r4, r7
 800cb40:	2500      	movs	r5, #0
 800cb42:	e7e1      	b.n	800cb08 <floor+0x48>
 800cb44:	2e33      	cmp	r6, #51	@ 0x33
 800cb46:	dd0a      	ble.n	800cb5e <floor+0x9e>
 800cb48:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800cb4c:	d103      	bne.n	800cb56 <floor+0x96>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	460b      	mov	r3, r1
 800cb52:	f7f3 fb9b 	bl	800028c <__adddf3>
 800cb56:	ec41 0b10 	vmov	d0, r0, r1
 800cb5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb5e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800cb62:	f04f 37ff 	mov.w	r7, #4294967295
 800cb66:	40df      	lsrs	r7, r3
 800cb68:	4207      	tst	r7, r0
 800cb6a:	d0f4      	beq.n	800cb56 <floor+0x96>
 800cb6c:	a30e      	add	r3, pc, #56	@ (adr r3, 800cba8 <floor+0xe8>)
 800cb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb72:	f7f3 fb8b 	bl	800028c <__adddf3>
 800cb76:	2200      	movs	r2, #0
 800cb78:	2300      	movs	r3, #0
 800cb7a:	f7f3 ffcd 	bl	8000b18 <__aeabi_dcmpgt>
 800cb7e:	2800      	cmp	r0, #0
 800cb80:	d0c2      	beq.n	800cb08 <floor+0x48>
 800cb82:	2c00      	cmp	r4, #0
 800cb84:	da0a      	bge.n	800cb9c <floor+0xdc>
 800cb86:	2e14      	cmp	r6, #20
 800cb88:	d101      	bne.n	800cb8e <floor+0xce>
 800cb8a:	3401      	adds	r4, #1
 800cb8c:	e006      	b.n	800cb9c <floor+0xdc>
 800cb8e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800cb92:	2301      	movs	r3, #1
 800cb94:	40b3      	lsls	r3, r6
 800cb96:	441d      	add	r5, r3
 800cb98:	4545      	cmp	r5, r8
 800cb9a:	d3f6      	bcc.n	800cb8a <floor+0xca>
 800cb9c:	ea25 0507 	bic.w	r5, r5, r7
 800cba0:	e7b2      	b.n	800cb08 <floor+0x48>
 800cba2:	2500      	movs	r5, #0
 800cba4:	462c      	mov	r4, r5
 800cba6:	e7af      	b.n	800cb08 <floor+0x48>
 800cba8:	8800759c 	.word	0x8800759c
 800cbac:	7e37e43c 	.word	0x7e37e43c
 800cbb0:	bff00000 	.word	0xbff00000
 800cbb4:	000fffff 	.word	0x000fffff

0800cbb8 <_init>:
 800cbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbba:	bf00      	nop
 800cbbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbbe:	bc08      	pop	{r3}
 800cbc0:	469e      	mov	lr, r3
 800cbc2:	4770      	bx	lr

0800cbc4 <_fini>:
 800cbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbc6:	bf00      	nop
 800cbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbca:	bc08      	pop	{r3}
 800cbcc:	469e      	mov	lr, r3
 800cbce:	4770      	bx	lr
