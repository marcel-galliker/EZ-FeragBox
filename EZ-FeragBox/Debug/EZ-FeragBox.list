
EZ-FeragBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013428  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  080135b8  080135b8  000145b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013ce8  08013ce8  00015354  2**0
                  CONTENTS
  4 .ARM          00000008  08013ce8  08013ce8  00014ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013cf0  08013cf0  00015354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013cf0  08013cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013cf4  08013cf4  00014cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08013cf8  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f0c  20000354  0801404c  00015354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002260  0801404c  00016260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e1f3  00000000  00000000  00015384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a9c  00000000  00000000  00033577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  00038018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001339  00000000  00000000  00039910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e53  00000000  00000000  0003ac49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000223cb  00000000  00000000  0005ba9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aed06  00000000  00000000  0007de67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cb6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f4c  00000000  00000000  0012cbb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00134afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000354 	.word	0x20000354
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080135a0 	.word	0x080135a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000358 	.word	0x20000358
 80001cc:	080135a0 	.word	0x080135a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <AD55936_init>:
#define _ADAC_ADC_READ        0b01000000
#define _ADAC_DAC_READ        0b01010000
#define _ADAC_GPIO_READ       0b01100000
#define _ADAC_REG_READ        0b01110000

HAL_StatusTypeDef AD55936_init(I2C_HandleTypeDef *hi2c, uint16_t DevAddress) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	uint8_t data[3];

	data[0] = _ADAC_GP_CONTROL;
 8000d00:	2303      	movs	r3, #3
 8000d02:	733b      	strb	r3, [r7, #12]
	data[1] = 0x01;
 8000d04:	2301      	movs	r3, #1
 8000d06:	737b      	strb	r3, [r7, #13]
	data[2] = 0x00;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, 3, HAL_MAX_DELAY);
 8000d0c:	f107 020c 	add.w	r2, r7, #12
 8000d10:	8879      	ldrh	r1, [r7, #2]
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2303      	movs	r3, #3
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f002 fc00 	bl	8003520 <HAL_I2C_Master_Transmit>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <AD55936_init+0x3a>
		return status;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	e029      	b.n	8000d82 <AD55936_init+0x8e>

	data[0] = _ADAC_POWER_REF_CTRL;
 8000d2e:	230b      	movs	r3, #11
 8000d30:	733b      	strb	r3, [r7, #12]
	data[1] = 0x02;
 8000d32:	2302      	movs	r3, #2
 8000d34:	737b      	strb	r3, [r7, #13]
	data[2] = 0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, 3, HAL_MAX_DELAY);
 8000d3a:	f107 020c 	add.w	r2, r7, #12
 8000d3e:	8879      	ldrh	r1, [r7, #2]
 8000d40:	f04f 33ff 	mov.w	r3, #4294967295
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2303      	movs	r3, #3
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f002 fbe9 	bl	8003520 <HAL_I2C_Master_Transmit>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <AD55936_init+0x68>
		return status;
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	e012      	b.n	8000d82 <AD55936_init+0x8e>

	data[0] = _ADAC_ADC_CONFIG;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	733b      	strb	r3, [r7, #12]
	data[1] = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	737b      	strb	r3, [r7, #13]
	data[2] = 0xFF;
 8000d64:	23ff      	movs	r3, #255	@ 0xff
 8000d66:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, 3, HAL_MAX_DELAY);
 8000d68:	f107 020c 	add.w	r2, r7, #12
 8000d6c:	8879      	ldrh	r1, [r7, #2]
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2303      	movs	r3, #3
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f002 fbd2 	bl	8003520 <HAL_I2C_Master_Transmit>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	73fb      	strb	r3, [r7, #15]

	return status;
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <AD5593R_ReadADC>:

HAL_StatusTypeDef AD5593R_ReadADC(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t channel, uint16_t *adcValue) {
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b08a      	sub	sp, #40	@ 0x28
 8000d8e:	af02      	add	r7, sp, #8
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	817b      	strh	r3, [r7, #10]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	727b      	strb	r3, [r7, #9]
    uint16_t channelBit = 1 << channel;
 8000d9c:	7a7b      	ldrb	r3, [r7, #9]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	83fb      	strh	r3, [r7, #30]

	if (channel > 8) {
 8000da6:	7a7b      	ldrb	r3, [r7, #9]
 8000da8:	2b08      	cmp	r3, #8
 8000daa:	d901      	bls.n	8000db0 <AD5593R_ReadADC+0x26>
        // Invalid channel, return error (0-7 = ADC Inputs, 8 = Internal Temperature Sensor)
        return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e04a      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    HAL_StatusTypeDef status;
    uint8_t command[3];
    uint8_t data[2];

    // Configure the ADC channel
    command[0] = _ADAC_ADC_SEQUENCE;
 8000db0:	2302      	movs	r3, #2
 8000db2:	763b      	strb	r3, [r7, #24]

    // Select Channel
    command[1] = (uint8_t)(channelBit >> 8);
 8000db4:	8bfb      	ldrh	r3, [r7, #30]
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	767b      	strb	r3, [r7, #25]
    command[2] = (uint8_t)(channelBit & 0xFF);
 8000dbe:	8bfb      	ldrh	r3, [r7, #30]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	76bb      	strb	r3, [r7, #26]

    status = HAL_I2C_Master_Transmit(hi2c, DevAddress, command, sizeof(command), HAL_MAX_DELAY);
 8000dc4:	f107 0218 	add.w	r2, r7, #24
 8000dc8:	8979      	ldrh	r1, [r7, #10]
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	68f8      	ldr	r0, [r7, #12]
 8000dd4:	f002 fba4 	bl	8003520 <HAL_I2C_Master_Transmit>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	777b      	strb	r3, [r7, #29]

    if (status != HAL_OK) {
 8000ddc:	7f7b      	ldrb	r3, [r7, #29]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <AD5593R_ReadADC+0x5c>
        // Handle error here
        return status;
 8000de2:	7f7b      	ldrb	r3, [r7, #29]
 8000de4:	e02f      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    }

	// Initiate an ADC read
	command[0] = _ADAC_ADC_READ;
 8000de6:	2340      	movs	r3, #64	@ 0x40
 8000de8:	763b      	strb	r3, [r7, #24]

    // Begin transmission to set the ADC read pointer
    status = HAL_I2C_Master_Transmit(hi2c, DevAddress, command, 1, HAL_MAX_DELAY);
 8000dea:	f107 0218 	add.w	r2, r7, #24
 8000dee:	8979      	ldrh	r1, [r7, #10]
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2301      	movs	r3, #1
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f002 fb91 	bl	8003520 <HAL_I2C_Master_Transmit>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	777b      	strb	r3, [r7, #29]

    if (status != HAL_OK) {
 8000e02:	7f7b      	ldrb	r3, [r7, #29]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <AD5593R_ReadADC+0x82>
        // Handle error here
        return status;
 8000e08:	7f7b      	ldrb	r3, [r7, #29]
 8000e0a:	e01c      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    }

    // Read the ADC value (2 bytes)
    status = HAL_I2C_Master_Receive(hi2c, DevAddress, data, 2, HAL_MAX_DELAY);
 8000e0c:	f107 0214 	add.w	r2, r7, #20
 8000e10:	8979      	ldrh	r1, [r7, #10]
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2302      	movs	r3, #2
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f002 fc74 	bl	8003708 <HAL_I2C_Master_Receive>
 8000e20:	4603      	mov	r3, r0
 8000e22:	777b      	strb	r3, [r7, #29]

    if (status != HAL_OK) {
 8000e24:	7f7b      	ldrb	r3, [r7, #29]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <AD5593R_ReadADC+0xa4>
        // Handle error here
        return status;
 8000e2a:	7f7b      	ldrb	r3, [r7, #29]
 8000e2c:	e00b      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    }

    // Convert the two received bytes into a single 16-bit value
    *adcValue = (uint16_t)((data[0] & 0x0F) << 8) + data[1];
 8000e2e:	7d3b      	ldrb	r3, [r7, #20]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	7d7a      	ldrb	r2, [r7, #21]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	801a      	strh	r2, [r3, #0]

    return status;
 8000e44:	7f7b      	ldrb	r3, [r7, #29]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <box_init>:
// static void _check_print_done(void);
static void _send_print_done(void);

//--- box_init -------------------------------
void box_init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	memset(&_Status, 0, sizeof(_Status));
 8000e54:	2250      	movs	r2, #80	@ 0x50
 8000e56:	2100      	movs	r1, #0
 8000e58:	480c      	ldr	r0, [pc, #48]	@ (8000e8c <box_init+0x3c>)
 8000e5a:	f00e fcf5 	bl	800f848 <memset>
	_FeragMsgIn  = 0;
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <box_init+0x40>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
	_FeragMsgOut = 0;
 8000e64:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <box_init+0x44>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
	_TrackInIdx  	 = 0;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e98 <box_init+0x48>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
	_TrackOutIdx 	 = 0;
 8000e70:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <box_init+0x4c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
	_PrintDoneDelay = 0;
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <box_init+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
	box_start();
 8000e7c:	f000 f828 	bl	8000ed0 <box_start>
	printf("LOG: box_init\n");
 8000e80:	4808      	ldr	r0, [pc, #32]	@ (8000ea4 <box_init+0x54>)
 8000e82:	f00e fbb5 	bl	800f5f0 <puts>
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000374 	.word	0x20000374
 8000e90:	200003d0 	.word	0x200003d0
 8000e94:	200003d4 	.word	0x200003d4
 8000e98:	20000408 	.word	0x20000408
 8000e9c:	2000040c 	.word	0x2000040c
 8000ea0:	2000041c 	.word	0x2000041c
 8000ea4:	080135b8 	.word	0x080135b8

08000ea8 <box_set_pgDelay>:

//--- box_set_pgDelay ------------------------------------
void box_set_pgDelay(int delay)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	_PrintGoDelay = delay;
 8000eb0:	4a05      	ldr	r2, [pc, #20]	@ (8000ec8 <box_set_pgDelay+0x20>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
	printf("set pgDelay=%d\n", delay);
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <box_set_pgDelay+0x24>)
 8000eba:	f00e fb31 	bl	800f520 <iprintf>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	080135c8 	.word	0x080135c8

08000ed0 <box_start>:

//--- box_start -------------------------
void box_start(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	printf("start\n");
 8000ed4:	481a      	ldr	r0, [pc, #104]	@ (8000f40 <box_start+0x70>)
 8000ed6:	f00e fb8b 	bl	800f5f0 <puts>
	_FeragMsgIn   = 0;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <box_start+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
	_FeragMsgOut  = 0;
 8000ee0:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <box_start+0x78>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
	_TrackInIdx  	  = 0;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <box_start+0x7c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
	_TrackOutIdx 	  = 0;
 8000eec:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <box_start+0x80>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
	_Status.dtCnt = 0;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <box_start+0x84>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	645a      	str	r2, [r3, #68]	@ 0x44
	_Status.pgCnt = 0;
 8000ef8:	4b16      	ldr	r3, [pc, #88]	@ (8000f54 <box_start+0x84>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	649a      	str	r2, [r3, #72]	@ 0x48
	_Status.pdCnt = 0;
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <box_start+0x84>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	64da      	str	r2, [r3, #76]	@ 0x4c
	_EncoderPos   = 0;
 8000f04:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <box_start+0x88>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
	_PrintDoneDelay = 0;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <box_start+0x8c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
	_PrintDoneIn  = -1;
 8000f10:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <box_start+0x90>)
 8000f12:	f04f 32ff 	mov.w	r2, #4294967295
 8000f16:	601a      	str	r2, [r3, #0]
	_PaceId		  = -1;
 8000f18:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <box_start+0x94>)
 8000f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1e:	601a      	str	r2, [r3, #0]
	box_send_status();
 8000f20:	f000 faec 	bl	80014fc <box_send_status>
	_Running = TRUE;
 8000f24:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <box_start+0x98>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f30:	480e      	ldr	r0, [pc, #56]	@ (8000f6c <box_start+0x9c>)
 8000f32:	f002 fa4d 	bl	80033d0 <HAL_GPIO_WritePin>
	enc_start();
 8000f36:	f000 fd27 	bl	8001988 <enc_start>
		enc_set_speed(100);
		//--- PaceId 10 ----
		box_handle_ferag_char(0x11);
		box_handle_ferag_char(0x8a);
	}
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	080135d8 	.word	0x080135d8
 8000f44:	200003d0 	.word	0x200003d0
 8000f48:	200003d4 	.word	0x200003d4
 8000f4c:	20000408 	.word	0x20000408
 8000f50:	2000040c 	.word	0x2000040c
 8000f54:	20000374 	.word	0x20000374
 8000f58:	20000414 	.word	0x20000414
 8000f5c:	2000041c 	.word	0x2000041c
 8000f60:	20000418 	.word	0x20000418
 8000f64:	20000410 	.word	0x20000410
 8000f68:	20000370 	.word	0x20000370
 8000f6c:	48001000 	.word	0x48001000

08000f70 <box_stop>:

//--- box_stop ----------------------------
void box_stop(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	_Running = FALSE;
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <box_stop+0x20>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
	enc_stop();
 8000f7a:	f000 fd2b 	bl	80019d4 <enc_stop>
	HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <box_stop+0x24>)
 8000f86:	f002 fa23 	bl	80033d0 <HAL_GPIO_WritePin>
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000370 	.word	0x20000370
 8000f94:	48001000 	.word	0x48001000

08000f98 <box_idle>:

//--- box_idle ----------------------------------------
void box_idle(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	_handle_feragMsg();
 8000f9c:	f000 f8e8 	bl	8001170 <_handle_feragMsg>
	_handle_encoder();
 8000fa0:	f000 f982 	bl	80012a8 <_handle_encoder>
//	if (!SIMULATION) _check_print_done();
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <box_tick_10ms>:

//--- box_tick_10ms ------------------
void box_tick_10ms(int ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	_Ticks = ticks;
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <box_tick_10ms+0x40>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
	{
		printf("FeragBox: AutoPrintGo\n");
		box_printGo();
	}
	*/
	if (_TicksPgOff && _Ticks>_TicksPgOff)
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <box_tick_10ms+0x44>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00e      	beq.n	8000fdc <box_tick_10ms+0x34>
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <box_tick_10ms+0x40>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <box_tick_10ms+0x44>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	dd08      	ble.n	8000fdc <box_tick_10ms+0x34>
	{
		HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fd0:	4807      	ldr	r0, [pc, #28]	@ (8000ff0 <box_tick_10ms+0x48>)
 8000fd2:	f002 f9fd 	bl	80033d0 <HAL_GPIO_WritePin>
	//	printf("PrintGo OFF %d\n",  _Ticks);
//		if (SIMULATION) _check_print_done();
		_TicksPgOff=0;
 8000fd6:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <box_tick_10ms+0x44>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
	}
	_check_system();
 8000fdc:	f000 f80a 	bl	8000ff4 <_check_system>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200003c4 	.word	0x200003c4
 8000fec:	200003c8 	.word	0x200003c8
 8000ff0:	48001000 	.word	0x48001000

08000ff4 <_check_system>:

//--- _check_system -----------------
static void _check_system(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	_Status.voltages.voltage24V 			= adc_get_value(0, 30.0);
 8000ff8:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f001 f8d3 	bl	80021a8 <adc_get_value>
 8001002:	eef0 7a40 	vmov.f32	s15, s0
 8001006:	4b3e      	ldr	r3, [pc, #248]	@ (8001100 <_check_system+0x10c>)
 8001008:	ee17 2a90 	vmov	r2, s15
 800100c:	f8c3 201b 	str.w	r2, [r3, #27]
	_Status.voltages.voltage12V 			= adc_get_value(1, 15.0);
 8001010:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001014:	2001      	movs	r0, #1
 8001016:	f001 f8c7 	bl	80021a8 <adc_get_value>
 800101a:	eef0 7a40 	vmov.f32	s15, s0
 800101e:	4b38      	ldr	r3, [pc, #224]	@ (8001100 <_check_system+0x10c>)
 8001020:	ee17 2a90 	vmov	r2, s15
 8001024:	f8c3 200f 	str.w	r2, [r3, #15]
	_Status.voltages.voltage12VNuc 			= adc_get_value(2, 15.0);
 8001028:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800102c:	2002      	movs	r0, #2
 800102e:	f001 f8bb 	bl	80021a8 <adc_get_value>
 8001032:	eef0 7a40 	vmov.f32	s15, s0
 8001036:	4b32      	ldr	r3, [pc, #200]	@ (8001100 <_check_system+0x10c>)
 8001038:	ee17 2a90 	vmov	r2, s15
 800103c:	f8c3 2013 	str.w	r2, [r3, #19]
	_Status.voltages.voltage12VDisplay 		= adc_get_value(3, 15.0);
 8001040:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001044:	2003      	movs	r0, #3
 8001046:	f001 f8af 	bl	80021a8 <adc_get_value>
 800104a:	eef0 7a40 	vmov.f32	s15, s0
 800104e:	4b2c      	ldr	r3, [pc, #176]	@ (8001100 <_check_system+0x10c>)
 8001050:	ee17 2a90 	vmov	r2, s15
 8001054:	f8c3 2017 	str.w	r2, [r3, #23]
	_Status.voltages.voltage5V 				= adc_get_value(4, 6.25);
 8001058:	eeb1 0a09 	vmov.f32	s0, #25	@ 0x40c80000  6.250
 800105c:	2004      	movs	r0, #4
 800105e:	f001 f8a3 	bl	80021a8 <adc_get_value>
 8001062:	eef0 7a40 	vmov.f32	s15, s0
 8001066:	4b26      	ldr	r3, [pc, #152]	@ (8001100 <_check_system+0x10c>)
 8001068:	ee17 2a90 	vmov	r2, s15
 800106c:	f8c3 200b 	str.w	r2, [r3, #11]
	_Status.voltages.voltage3V3 			= adc_get_value(5, 4.125);
 8001070:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8001104 <_check_system+0x110>
 8001074:	2005      	movs	r0, #5
 8001076:	f001 f897 	bl	80021a8 <adc_get_value>
 800107a:	eef0 7a40 	vmov.f32	s15, s0
 800107e:	4b20      	ldr	r3, [pc, #128]	@ (8001100 <_check_system+0x10c>)
 8001080:	ee17 2a90 	vmov	r2, s15
 8001084:	f8c3 2007 	str.w	r2, [r3, #7]
	_Status.voltages.voltagePcbRevision 	= adc_get_value(6, 4.125);
 8001088:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8001104 <_check_system+0x110>
 800108c:	2006      	movs	r0, #6
 800108e:	f001 f88b 	bl	80021a8 <adc_get_value>
 8001092:	eef0 7a40 	vmov.f32	s15, s0
 8001096:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <_check_system+0x10c>)
 8001098:	ee17 2a90 	vmov	r2, s15
 800109c:	f8c3 201f 	str.w	r2, [r3, #31]
	_Status.pcbRevision 					= adc_get_revision(_Status.voltages.voltagePcbRevision);
 80010a0:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <_check_system+0x10c>)
 80010a2:	f8d3 301f 	ldr.w	r3, [r3, #31]
 80010a6:	ee00 3a10 	vmov	s0, r3
 80010aa:	f001 f8cd 	bl	8002248 <adc_get_revision>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <_check_system+0x10c>)
 80010b4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	_Status.boardTemperature 				= adc_get_temp();
 80010b8:	f001 f89c 	bl	80021f4 <adc_get_temp>
 80010bc:	eef0 7a40 	vmov.f32	s15, s0
 80010c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <_check_system+0x10c>)
 80010c2:	ee17 2a90 	vmov	r2, s15
 80010c6:	f8c3 2003 	str.w	r2, [r3, #3]

	// Update DIP Switch inputs
	_Status.dipSwitch						= gpio_get_dipswitches();
 80010ca:	f001 f905 	bl	80022d8 <gpio_get_dipswitches>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <_check_system+0x10c>)
 80010d4:	709a      	strb	r2, [r3, #2]

	// Update encoder generator parameters
	enc_get_status(&_Status.enc);
 80010d6:	480c      	ldr	r0, [pc, #48]	@ (8001108 <_check_system+0x114>)
 80010d8:	f000 faf2 	bl	80016c0 <enc_get_status>

	// Update Power Status
	_Status.nucPower 		= HAL_GPIO_ReadPin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin);
 80010dc:	2140      	movs	r1, #64	@ 0x40
 80010de:	480b      	ldr	r0, [pc, #44]	@ (800110c <_check_system+0x118>)
 80010e0:	f002 f95e 	bl	80033a0 <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <_check_system+0x10c>)
 80010ea:	701a      	strb	r2, [r3, #0]
	_Status.displayPower 	= HAL_GPIO_ReadPin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin);
 80010ec:	2180      	movs	r1, #128	@ 0x80
 80010ee:	4807      	ldr	r0, [pc, #28]	@ (800110c <_check_system+0x118>)
 80010f0:	f002 f956 	bl	80033a0 <HAL_GPIO_ReadPin>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b01      	ldr	r3, [pc, #4]	@ (8001100 <_check_system+0x10c>)
 80010fa:	705a      	strb	r2, [r3, #1]
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000374 	.word	0x20000374
 8001104:	40840000 	.word	0x40840000
 8001108:	20000398 	.word	0x20000398
 800110c:	48001400 	.word	0x48001400

08001110 <box_handle_ferag_char>:

//--- box_handle_ferag_char -----------------------------
void box_handle_ferag_char(char data)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	if (data & 0x80)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	2b00      	cmp	r3, #0
 8001120:	da18      	bge.n	8001154 <box_handle_ferag_char+0x44>
	{
		_FeragMsg.data[1]=data;
 8001122:	4a10      	ldr	r2, [pc, #64]	@ (8001164 <box_handle_ferag_char+0x54>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	7053      	strb	r3, [r2, #1]
		_Status.paceId = _FeragMsg.paceId;
 8001128:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <box_handle_ferag_char+0x54>)
 800112a:	785b      	ldrb	r3, [r3, #1]
 800112c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001130:	b2db      	uxtb	r3, r3
 8001132:	461a      	mov	r2, r3
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <box_handle_ferag_char+0x58>)
 8001136:	641a      	str	r2, [r3, #64]	@ 0x40
	//	printf("FERAG in 0x%02x 0x%02x, type=%d, info=%d, paceId=0x%02x\n", _FeragMsg.data[0], _FeragMsg.data[1], _FeragMsg.type, _FeragMsg.info, _FeragMsg.paceId);

		_Status.feragMsgInCnt++;
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <box_handle_ferag_char+0x58>)
 800113a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800113c:	3301      	adds	r3, #1
 800113e:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <box_handle_ferag_char+0x58>)
 8001140:	6393      	str	r3, [r2, #56]	@ 0x38
		_FeragMsgIn++;
 8001142:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <box_handle_ferag_char+0x5c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	4a08      	ldr	r2, [pc, #32]	@ (800116c <box_handle_ferag_char+0x5c>)
 800114a:	6013      	str	r3, [r2, #0]
		ferag_send_char(0x80);
 800114c:	2080      	movs	r0, #128	@ 0x80
 800114e:	f001 f80b 	bl	8002168 <ferag_send_char>
	}
	else
	{
		_FeragMsg.data[0]=data;
	}
}
 8001152:	e002      	b.n	800115a <box_handle_ferag_char+0x4a>
		_FeragMsg.data[0]=data;
 8001154:	4a03      	ldr	r2, [pc, #12]	@ (8001164 <box_handle_ferag_char+0x54>)
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	7013      	strb	r3, [r2, #0]
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200003cc 	.word	0x200003cc
 8001168:	20000374 	.word	0x20000374
 800116c:	200003d0 	.word	0x200003d0

08001170 <_handle_feragMsg>:

//--- _handle_feragMsg ---------------------
static void _handle_feragMsg(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
	if (_FeragMsgOut!=_FeragMsgIn)
 8001176:	4b3f      	ldr	r3, [pc, #252]	@ (8001274 <_handle_feragMsg+0x104>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4b3f      	ldr	r3, [pc, #252]	@ (8001278 <_handle_feragMsg+0x108>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d073      	beq.n	800126a <_handle_feragMsg+0xfa>
	{
		int idx;
		switch (_FeragMsg.type)
 8001182:	4b3e      	ldr	r3, [pc, #248]	@ (800127c <_handle_feragMsg+0x10c>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b01      	cmp	r3, #1
 800118e:	d002      	beq.n	8001196 <_handle_feragMsg+0x26>
 8001190:	2b02      	cmp	r3, #2
 8001192:	d052      	beq.n	800123a <_handle_feragMsg+0xca>
 8001194:	e055      	b.n	8001242 <_handle_feragMsg+0xd2>
		{
		case 1:	idx=(_TrackInIdx+1)% TRACKING_CNT;
 8001196:	4b3a      	ldr	r3, [pc, #232]	@ (8001280 <_handle_feragMsg+0x110>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	425a      	negs	r2, r3
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	f002 0207 	and.w	r2, r2, #7
 80011a6:	bf58      	it	pl
 80011a8:	4253      	negpl	r3, r2
 80011aa:	607b      	str	r3, [r7, #4]
				if (idx==_TrackOutIdx)
 80011ac:	4b35      	ldr	r3, [pc, #212]	@ (8001284 <_handle_feragMsg+0x114>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d103      	bne.n	80011be <_handle_feragMsg+0x4e>
					printf("ERROR: Tracking overflow\n");
 80011b6:	4834      	ldr	r0, [pc, #208]	@ (8001288 <_handle_feragMsg+0x118>)
 80011b8:	f00e fa1a 	bl	800f5f0 <puts>
					_TrackInIdx=idx;
					if (_FeragMsg.info&1) printf("ProductDetect %d: PaceId=%d, \n", _Status.dtCnt, _FeragMsg.paceId);
					else printf("ProductDetect %d: PaceId=%d (EMPTY)\n", _Status.dtCnt, _FeragMsg.paceId);
					_Status.dtCnt++;
				}
				break;
 80011bc:	e04b      	b.n	8001256 <_handle_feragMsg+0xe6>
					memcpy(&_Tracking[idx].prod, &_FeragMsg,  sizeof(_Tracking[idx].prod));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4a30      	ldr	r2, [pc, #192]	@ (800128c <_handle_feragMsg+0x11c>)
 80011ca:	4413      	add	r3, r2
 80011cc:	3304      	adds	r3, #4
 80011ce:	4a2b      	ldr	r2, [pc, #172]	@ (800127c <_handle_feragMsg+0x10c>)
 80011d0:	8812      	ldrh	r2, [r2, #0]
 80011d2:	801a      	strh	r2, [r3, #0]
					_Tracking[idx].delay = _PrintGoDelay;
 80011d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001290 <_handle_feragMsg+0x120>)
 80011d6:	6819      	ldr	r1, [r3, #0]
 80011d8:	482c      	ldr	r0, [pc, #176]	@ (800128c <_handle_feragMsg+0x11c>)
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	4613      	mov	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4413      	add	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4403      	add	r3, r0
 80011e6:	6019      	str	r1, [r3, #0]
					_TrackInIdx=idx;
 80011e8:	4a25      	ldr	r2, [pc, #148]	@ (8001280 <_handle_feragMsg+0x110>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
					if (_FeragMsg.info&1) printf("ProductDetect %d: PaceId=%d, \n", _Status.dtCnt, _FeragMsg.paceId);
 80011ee:	4b23      	ldr	r3, [pc, #140]	@ (800127c <_handle_feragMsg+0x10c>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00b      	beq.n	8001218 <_handle_feragMsg+0xa8>
 8001200:	4b24      	ldr	r3, [pc, #144]	@ (8001294 <_handle_feragMsg+0x124>)
 8001202:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001204:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <_handle_feragMsg+0x10c>)
 8001206:	785b      	ldrb	r3, [r3, #1]
 8001208:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800120c:	b2db      	uxtb	r3, r3
 800120e:	461a      	mov	r2, r3
 8001210:	4821      	ldr	r0, [pc, #132]	@ (8001298 <_handle_feragMsg+0x128>)
 8001212:	f00e f985 	bl	800f520 <iprintf>
 8001216:	e00a      	b.n	800122e <_handle_feragMsg+0xbe>
					else printf("ProductDetect %d: PaceId=%d (EMPTY)\n", _Status.dtCnt, _FeragMsg.paceId);
 8001218:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <_handle_feragMsg+0x124>)
 800121a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800121c:	4b17      	ldr	r3, [pc, #92]	@ (800127c <_handle_feragMsg+0x10c>)
 800121e:	785b      	ldrb	r3, [r3, #1]
 8001220:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001224:	b2db      	uxtb	r3, r3
 8001226:	461a      	mov	r2, r3
 8001228:	481c      	ldr	r0, [pc, #112]	@ (800129c <_handle_feragMsg+0x12c>)
 800122a:	f00e f979 	bl	800f520 <iprintf>
					_Status.dtCnt++;
 800122e:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <_handle_feragMsg+0x124>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001232:	3301      	adds	r3, #1
 8001234:	4a17      	ldr	r2, [pc, #92]	@ (8001294 <_handle_feragMsg+0x124>)
 8001236:	6453      	str	r3, [r2, #68]	@ 0x44
				break;
 8001238:	e00d      	b.n	8001256 <_handle_feragMsg+0xe6>

		case 2:		printf("Alive\n"); break;
 800123a:	4819      	ldr	r0, [pc, #100]	@ (80012a0 <_handle_feragMsg+0x130>)
 800123c:	f00e f9d8 	bl	800f5f0 <puts>
 8001240:	e009      	b.n	8001256 <_handle_feragMsg+0xe6>
		default: 	printf("Unknown Message Type=%d\n", _FeragMsg.type); break;
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <_handle_feragMsg+0x10c>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800124a:	b2db      	uxtb	r3, r3
 800124c:	4619      	mov	r1, r3
 800124e:	4815      	ldr	r0, [pc, #84]	@ (80012a4 <_handle_feragMsg+0x134>)
 8001250:	f00e f966 	bl	800f520 <iprintf>
 8001254:	bf00      	nop
		}
		_Status.feragMsgOutCnt++;
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <_handle_feragMsg+0x124>)
 8001258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800125a:	3301      	adds	r3, #1
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <_handle_feragMsg+0x124>)
 800125e:	63d3      	str	r3, [r2, #60]	@ 0x3c
		_FeragMsgOut++;
 8001260:	4b04      	ldr	r3, [pc, #16]	@ (8001274 <_handle_feragMsg+0x104>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	4a03      	ldr	r2, [pc, #12]	@ (8001274 <_handle_feragMsg+0x104>)
 8001268:	6013      	str	r3, [r2, #0]
	}
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200003d4 	.word	0x200003d4
 8001278:	200003d0 	.word	0x200003d0
 800127c:	200003cc 	.word	0x200003cc
 8001280:	20000408 	.word	0x20000408
 8001284:	2000040c 	.word	0x2000040c
 8001288:	080135e0 	.word	0x080135e0
 800128c:	200003d8 	.word	0x200003d8
 8001290:	20000000 	.word	0x20000000
 8001294:	20000374 	.word	0x20000374
 8001298:	080135fc 	.word	0x080135fc
 800129c:	0801361c 	.word	0x0801361c
 80012a0:	08013644 	.word	0x08013644
 80012a4:	0801364c 	.word	0x0801364c

080012a8 <_handle_encoder>:

//--- _handle_encoder -------------------------------------
static void _handle_encoder(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
	if (_EncoderPos!=_Status.enc.encOutPos)
 80012ae:	4b36      	ldr	r3, [pc, #216]	@ (8001388 <_handle_encoder+0xe0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a36      	ldr	r2, [pc, #216]	@ (800138c <_handle_encoder+0xe4>)
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d062      	beq.n	8001380 <_handle_encoder+0xd8>
	{
		_EncoderPos++;
 80012ba:	4b34      	ldr	r3, [pc, #208]	@ (800138c <_handle_encoder+0xe4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	3301      	adds	r3, #1
 80012c0:	4a32      	ldr	r2, [pc, #200]	@ (800138c <_handle_encoder+0xe4>)
 80012c2:	6013      	str	r3, [r2, #0]
	//	if (_EncoderPos%1000==0)
	//		printf("Enc=%d: DELAY=%d, %d, %d ,%d, %d, %d, %d, %d\n", _EncoderPos, _Tracking[0].delay, _Tracking[1].delay, _Tracking[2].delay, _Tracking[3].delay, _Tracking[4].delay, _Tracking[5].delay, _Tracking[6].delay, _Tracking[7].delay);
		for (int i=0; i<TRACKING_CNT; i++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	e048      	b.n	800135c <_handle_encoder+0xb4>
		{
			if (_Tracking[i].delay>0 && (--_Tracking[i].delay)==0)
 80012ca:	4931      	ldr	r1, [pc, #196]	@ (8001390 <_handle_encoder+0xe8>)
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	440b      	add	r3, r1
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	dd3b      	ble.n	8001356 <_handle_encoder+0xae>
 80012de:	492c      	ldr	r1, [pc, #176]	@ (8001390 <_handle_encoder+0xe8>)
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	440b      	add	r3, r1
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	1e59      	subs	r1, r3, #1
 80012f0:	4827      	ldr	r0, [pc, #156]	@ (8001390 <_handle_encoder+0xe8>)
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4413      	add	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4403      	add	r3, r0
 80012fe:	6019      	str	r1, [r3, #0]
 8001300:	4923      	ldr	r1, [pc, #140]	@ (8001390 <_handle_encoder+0xe8>)
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	440b      	add	r3, r1
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d120      	bne.n	8001356 <_handle_encoder+0xae>
			{
				_TrackOutIdx=i;
 8001314:	4a1f      	ldr	r2, [pc, #124]	@ (8001394 <_handle_encoder+0xec>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
				printf("PrintGo PaceId=%d, ok=%d\n", _Tracking[i].prod.paceId, _Tracking[i].prod.info);
 800131a:	491d      	ldr	r1, [pc, #116]	@ (8001390 <_handle_encoder+0xe8>)
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	440b      	add	r3, r1
 8001328:	795b      	ldrb	r3, [r3, #5]
 800132a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800132e:	b2db      	uxtb	r3, r3
 8001330:	4618      	mov	r0, r3
 8001332:	4917      	ldr	r1, [pc, #92]	@ (8001390 <_handle_encoder+0xe8>)
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	440b      	add	r3, r1
 8001340:	791b      	ldrb	r3, [r3, #4]
 8001342:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001346:	b2db      	uxtb	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	4601      	mov	r1, r0
 800134c:	4812      	ldr	r0, [pc, #72]	@ (8001398 <_handle_encoder+0xf0>)
 800134e:	f00e f8e7 	bl	800f520 <iprintf>
				box_printGo();
 8001352:	f000 f851 	bl	80013f8 <box_printGo>
		for (int i=0; i<TRACKING_CNT; i++)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3301      	adds	r3, #1
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b07      	cmp	r3, #7
 8001360:	ddb3      	ble.n	80012ca <_handle_encoder+0x22>
			}
		}
		if (_PrintDoneDelay>0)
 8001362:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <_handle_encoder+0xf4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	dd0a      	ble.n	8001380 <_handle_encoder+0xd8>
		{
			if ((--_PrintDoneDelay)==0)
 800136a:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <_handle_encoder+0xf4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	3b01      	subs	r3, #1
 8001370:	4a0a      	ldr	r2, [pc, #40]	@ (800139c <_handle_encoder+0xf4>)
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b09      	ldr	r3, [pc, #36]	@ (800139c <_handle_encoder+0xf4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <_handle_encoder+0xd8>
				_send_print_done();
 800137c:	f000 f810 	bl	80013a0 <_send_print_done>
		}
	}
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000374 	.word	0x20000374
 800138c:	20000414 	.word	0x20000414
 8001390:	200003d8 	.word	0x200003d8
 8001394:	2000040c 	.word	0x2000040c
 8001398:	08013668 	.word	0x08013668
 800139c:	2000041c 	.word	0x2000041c

080013a0 <_send_print_done>:
}
*/

//--- _send_print_done ----------------------------------------
static void _send_print_done(void)
{
 80013a0:	b598      	push	{r3, r4, r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	printf("PrintDone %d: PaceId[%d]=%d, ok=1\n", _Status.pdCnt, _TrackOutIdx, _Tracking[_TrackOutIdx].prod.paceId);
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <_send_print_done+0x44>)
 80013a6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80013a8:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <_send_print_done+0x48>)
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <_send_print_done+0x48>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4c0e      	ldr	r4, [pc, #56]	@ (80013ec <_send_print_done+0x4c>)
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4423      	add	r3, r4
 80013bc:	795b      	ldrb	r3, [r3, #5]
 80013be:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4602      	mov	r2, r0
 80013c6:	480a      	ldr	r0, [pc, #40]	@ (80013f0 <_send_print_done+0x50>)
 80013c8:	f00e f8aa 	bl	800f520 <iprintf>
	_Status.pdCnt++;
 80013cc:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <_send_print_done+0x44>)
 80013ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d0:	3301      	adds	r3, #1
 80013d2:	4a04      	ldr	r2, [pc, #16]	@ (80013e4 <_send_print_done+0x44>)
 80013d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
	_PaceId = -1;
 80013d6:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <_send_print_done+0x54>)
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	601a      	str	r2, [r3, #0]
}
 80013de:	bf00      	nop
 80013e0:	bd98      	pop	{r3, r4, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000374 	.word	0x20000374
 80013e8:	2000040c 	.word	0x2000040c
 80013ec:	200003d8 	.word	0x200003d8
 80013f0:	08013684 	.word	0x08013684
 80013f4:	20000410 	.word	0x20000410

080013f8 <box_printGo>:

//--- box_printGo ----------------------
void box_printGo(void)
{
 80013f8:	b598      	push	{r3, r4, r7, lr}
 80013fa:	af00      	add	r7, sp, #0
//	printf("PrintGo ON %d\n",  _Ticks);
	_Status.paceId = _Tracking[_TrackOutIdx].prod.paceId;
 80013fc:	4b35      	ldr	r3, [pc, #212]	@ (80014d4 <box_printGo+0xdc>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4935      	ldr	r1, [pc, #212]	@ (80014d8 <box_printGo+0xe0>)
 8001402:	4613      	mov	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	440b      	add	r3, r1
 800140c:	795b      	ldrb	r3, [r3, #5]
 800140e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001412:	b2db      	uxtb	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	4b31      	ldr	r3, [pc, #196]	@ (80014dc <box_printGo+0xe4>)
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
	if (enc_fixSpeed() || _Tracking[_TrackOutIdx].prod.info)
 800141a:	f000 f9cd 	bl	80017b8 <enc_fixSpeed>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10d      	bne.n	8001440 <box_printGo+0x48>
 8001424:	4b2b      	ldr	r3, [pc, #172]	@ (80014d4 <box_printGo+0xdc>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	492b      	ldr	r1, [pc, #172]	@ (80014d8 <box_printGo+0xe0>)
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	440b      	add	r3, r1
 8001434:	791b      	ldrb	r3, [r3, #4]
 8001436:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d041      	beq.n	80014c4 <box_printGo+0xcc>
	{
		printf("PrintGo %d: PaceId[%d]=%d\n", _Status.pgCnt, _TrackOutIdx, _Tracking[_TrackOutIdx].prod.paceId);
 8001440:	4b26      	ldr	r3, [pc, #152]	@ (80014dc <box_printGo+0xe4>)
 8001442:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001444:	4b23      	ldr	r3, [pc, #140]	@ (80014d4 <box_printGo+0xdc>)
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <box_printGo+0xdc>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4c22      	ldr	r4, [pc, #136]	@ (80014d8 <box_printGo+0xe0>)
 800144e:	4613      	mov	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4423      	add	r3, r4
 8001458:	795b      	ldrb	r3, [r3, #5]
 800145a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800145e:	b2db      	uxtb	r3, r3
 8001460:	4602      	mov	r2, r0
 8001462:	481f      	ldr	r0, [pc, #124]	@ (80014e0 <box_printGo+0xe8>)
 8001464:	f00e f85c 	bl	800f520 <iprintf>
		_Status.pgCnt++;
 8001468:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <box_printGo+0xe4>)
 800146a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800146c:	3301      	adds	r3, #1
 800146e:	4a1b      	ldr	r2, [pc, #108]	@ (80014dc <box_printGo+0xe4>)
 8001470:	6493      	str	r3, [r2, #72]	@ 0x48
		_PaceId = _Tracking[_TrackOutIdx].prod.paceId;
 8001472:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <box_printGo+0xdc>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4918      	ldr	r1, [pc, #96]	@ (80014d8 <box_printGo+0xe0>)
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	440b      	add	r3, r1
 8001482:	795b      	ldrb	r3, [r3, #5]
 8001484:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001488:	b2db      	uxtb	r3, r3
 800148a:	461a      	mov	r2, r3
 800148c:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <box_printGo+0xec>)
 800148e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_SET);
 8001490:	2201      	movs	r2, #1
 8001492:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001496:	4814      	ldr	r0, [pc, #80]	@ (80014e8 <box_printGo+0xf0>)
 8001498:	f001 ff9a 	bl	80033d0 <HAL_GPIO_WritePin>
		_TicksPgOff = _Ticks+2;
 800149c:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <box_printGo+0xf4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3302      	adds	r3, #2
 80014a2:	4a13      	ldr	r2, [pc, #76]	@ (80014f0 <box_printGo+0xf8>)
 80014a4:	6013      	str	r3, [r2, #0]
		if (_PrintDoneDelay) printf("ERROR: PringGo while still printing _PrintDoneDelay=%d\n",_PrintDoneDelay);
 80014a6:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <box_printGo+0xfc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d005      	beq.n	80014ba <box_printGo+0xc2>
 80014ae:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <box_printGo+0xfc>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4619      	mov	r1, r3
 80014b4:	4810      	ldr	r0, [pc, #64]	@ (80014f8 <box_printGo+0x100>)
 80014b6:	f00e f833 	bl	800f520 <iprintf>
		_PrintDoneDelay = 2000;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <box_printGo+0xfc>)
 80014bc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e004      	b.n	80014ce <box_printGo+0xd6>
	}
	else _PaceId=-1;
 80014c4:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <box_printGo+0xec>)
 80014c6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ca:	601a      	str	r2, [r3, #0]
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	bd98      	pop	{r3, r4, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2000040c 	.word	0x2000040c
 80014d8:	200003d8 	.word	0x200003d8
 80014dc:	20000374 	.word	0x20000374
 80014e0:	080136a8 	.word	0x080136a8
 80014e4:	20000410 	.word	0x20000410
 80014e8:	48001000 	.word	0x48001000
 80014ec:	200003c4 	.word	0x200003c4
 80014f0:	200003c8 	.word	0x200003c8
 80014f4:	2000041c 	.word	0x2000041c
 80014f8:	080136c4 	.word	0x080136c4

080014fc <box_send_status>:

//--- box_send_status ----------------------------------------
void box_send_status(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001502:	af00      	add	r7, sp, #0
	printf("encOut Pos:     %d\n",    (int)_Status.enc.encOutPos);
	printf("PrintGo Cnt:    %d\n",    (int)_Status.pgCnt);
	printf("\n");
	 */
	char msg[512];
	_Status.test++;
 8001504:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <box_send_status+0x40>)
 8001506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001508:	3301      	adds	r3, #1
 800150a:	4a0c      	ldr	r2, [pc, #48]	@ (800153c <box_send_status+0x40>)
 800150c:	6353      	str	r3, [r2, #52]	@ 0x34
	printf("STATUS %s\n", bin2hex(msg, &_Status, sizeof(_Status)));
 800150e:	463b      	mov	r3, r7
 8001510:	2250      	movs	r2, #80	@ 0x50
 8001512:	490a      	ldr	r1, [pc, #40]	@ (800153c <box_send_status+0x40>)
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fa97 	bl	8001a48 <bin2hex>
 800151a:	4603      	mov	r3, r0
 800151c:	4619      	mov	r1, r3
 800151e:	4808      	ldr	r0, [pc, #32]	@ (8001540 <box_send_status+0x44>)
 8001520:	f00d fffe 	bl	800f520 <iprintf>
	fflush(stdout);
 8001524:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <box_send_status+0x48>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	4618      	mov	r0, r3
 800152c:	f00d ff22 	bl	800f374 <fflush>
}
 8001530:	bf00      	nop
 8001532:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000374 	.word	0x20000374
 8001540:	080136fc 	.word	0x080136fc
 8001544:	20000198 	.word	0x20000198

08001548 <enc_init>:

static void _init_pwm(int32_t speed);

//--- enc_init ----------------------------------
void enc_init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	_Timer_clock_frequency = HAL_RCC_GetPCLK1Freq(); // Adjust based on your clock tree settings
 800154c:	f005 fc06 	bl	8006d5c <HAL_RCC_GetPCLK1Freq>
 8001550:	4603      	mov	r3, r0
 8001552:	4a03      	ldr	r2, [pc, #12]	@ (8001560 <enc_init+0x18>)
 8001554:	6013      	str	r3, [r2, #0]
	_Prescaler=1;
 8001556:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <enc_init+0x1c>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000420 	.word	0x20000420
 8001564:	20000424 	.word	0x20000424

08001568 <enc_in_irq>:

//--- enc_irq ------------------------
void enc_in_irq(TIM_HandleTypeDef *htim)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	int time=HAL_GetTick();
 8001570:	f001 fc08 	bl	8002d84 <HAL_GetTick>
 8001574:	4603      	mov	r3, r0
 8001576:	617b      	str	r3, [r7, #20]
	int pos = _EncStatus.encInPos;
 8001578:	4b23      	ldr	r3, [pc, #140]	@ (8001608 <enc_in_irq+0xa0>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	613b      	str	r3, [r7, #16]
	_EncStatus.encInPos = enc_get_pos();
 800157e:	f000 fdb1 	bl	80020e4 <enc_get_pos>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	4b20      	ldr	r3, [pc, #128]	@ (8001608 <enc_in_irq+0xa0>)
 8001588:	605a      	str	r2, [r3, #4]
	int dist=_EncStatus.encInPos-pos;
 800158a:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <enc_in_irq+0xa0>)
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	60fb      	str	r3, [r7, #12]
	int t=time-_EncInTime;
 8001594:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <enc_in_irq+0xa4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	60bb      	str	r3, [r7, #8]
	if (t==0) _EncStatus.encInSpeed=0;
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d103      	bne.n	80015ac <enc_in_irq+0x44>
 80015a4:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <enc_in_irq+0xa0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	e009      	b.n	80015c0 <enc_in_irq+0x58>
	else _EncStatus.encInSpeed = (dist*1000)/t;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015b2:	fb03 f202 	mul.w	r2, r3, r2
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80015bc:	4a12      	ldr	r2, [pc, #72]	@ (8001608 <enc_in_irq+0xa0>)
 80015be:	6013      	str	r3, [r2, #0]

	_EncInTime=time;
 80015c0:	4a12      	ldr	r2, [pc, #72]	@ (800160c <enc_in_irq+0xa4>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	6013      	str	r3, [r2, #0]

	//--- set output speed ------
	enc_set_speed((int)(_EncStatus.encInSpeed*_EncOut_incPM/_EncIn_incPM));
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <enc_in_irq+0xa0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <enc_in_irq+0xa8>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80015dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <enc_in_irq+0xac>)
 80015de:	ed93 7a00 	vldr	s14, [r3]
 80015e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ea:	ee17 0a90 	vmov	r0, s15
 80015ee:	f000 f8b5 	bl	800175c <enc_set_speed>

	if (!_Running)
 80015f2:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <enc_in_irq+0xb0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <enc_in_irq+0x96>
		enc_start();
 80015fa:	f000 f9c5 	bl	8001988 <enc_start>

//	printf("TRACE: Encoder In: pos=%d, speed=%d, time=%d\n", (int)_EncStatus.encInPos, (int)_EncStatus.encInSpeed, t);
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000428 	.word	0x20000428
 800160c:	20000440 	.word	0x20000440
 8001610:	20000008 	.word	0x20000008
 8001614:	20000004 	.word	0x20000004
 8001618:	2000043c 	.word	0x2000043c

0800161c <enc_tick_10ms>:

//--- enc_tick_10ms ---------------------------
void enc_tick_10ms(int ticks)
{
 800161c:	b5b0      	push	{r4, r5, r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	if (ticks-_EncOutTime>1000)
 8001624:	4b22      	ldr	r3, [pc, #136]	@ (80016b0 <enc_tick_10ms+0x94>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001630:	dd39      	ble.n	80016a6 <enc_tick_10ms+0x8a>
	{
		float t=(float)(ticks-_EncOutTime);
 8001632:	4b1f      	ldr	r3, [pc, #124]	@ (80016b0 <enc_tick_10ms+0x94>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001642:	edc7 7a03 	vstr	s15, [r7, #12]
		_EncStatus.encOutSpeed = (int32_t) (1000.0*_EncOutSpeedCnt/t/2);
 8001646:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <enc_tick_10ms+0x98>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff6a 	bl	8000524 <__aeabi_i2d>
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <enc_tick_10ms+0x9c>)
 8001656:	f7fe ffcf 	bl	80005f8 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4614      	mov	r4, r2
 8001660:	461d      	mov	r5, r3
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7fe ff70 	bl	8000548 <__aeabi_f2d>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4620      	mov	r0, r4
 800166e:	4629      	mov	r1, r5
 8001670:	f7ff f8ec 	bl	800084c <__aeabi_ddiv>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001684:	f7ff f8e2 	bl	800084c <__aeabi_ddiv>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f7ff fa62 	bl	8000b58 <__aeabi_d2iz>
 8001694:	4603      	mov	r3, r0
 8001696:	4a09      	ldr	r2, [pc, #36]	@ (80016bc <enc_tick_10ms+0xa0>)
 8001698:	6093      	str	r3, [r2, #8]
		_EncOutTime=ticks;
 800169a:	4a05      	ldr	r2, [pc, #20]	@ (80016b0 <enc_tick_10ms+0x94>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6013      	str	r3, [r2, #0]
		_EncOutSpeedCnt=0;
 80016a0:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <enc_tick_10ms+0x98>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
	}
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bdb0      	pop	{r4, r5, r7, pc}
 80016ae:	bf00      	nop
 80016b0:	2000044c 	.word	0x2000044c
 80016b4:	20000450 	.word	0x20000450
 80016b8:	408f4000 	.word	0x408f4000
 80016bc:	20000428 	.word	0x20000428

080016c0 <enc_get_status>:

//--- enc_get_status -------------------------------
void enc_get_status(SEZFB_EncStatus *pstatus)
{
 80016c0:	b4b0      	push	{r4, r5, r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	memcpy(pstatus, &_EncStatus, sizeof(_EncStatus));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a06      	ldr	r2, [pc, #24]	@ (80016e4 <enc_get_status+0x24>)
 80016cc:	461c      	mov	r4, r3
 80016ce:	4615      	mov	r5, r2
 80016d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d2:	6020      	str	r0, [r4, #0]
 80016d4:	6061      	str	r1, [r4, #4]
 80016d6:	60a2      	str	r2, [r4, #8]
 80016d8:	60e3      	str	r3, [r4, #12]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bcb0      	pop	{r4, r5, r7}
 80016e2:	4770      	bx	lr
 80016e4:	20000428 	.word	0x20000428

080016e8 <enc_command>:

//--- enc_command ----------------------------------
void enc_command(const char *args)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
    int cnt=0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]

    // Parse the command arguments for action type
    if (strstr(args, "start")) 		enc_start();
 80016f4:	4914      	ldr	r1, [pc, #80]	@ (8001748 <enc_command+0x60>)
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f00e f8c0 	bl	800f87c <strstr>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <enc_command+0x20>
 8001702:	f000 f941 	bl	8001988 <enc_start>
    else if ((cnt=sscanf(args, "speed %d", &_FixedSpeed))) enc_set_speed(_FixedSpeed);
    else
    {
        printf("Unknown command. Use 'encoder start', 'encoder stop', or 'encoder speed ...'\n");
    }
}
 8001706:	e01b      	b.n	8001740 <enc_command+0x58>
    else if (strstr(args, "stop"))	enc_stop();
 8001708:	4910      	ldr	r1, [pc, #64]	@ (800174c <enc_command+0x64>)
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f00e f8b6 	bl	800f87c <strstr>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <enc_command+0x34>
 8001716:	f000 f95d 	bl	80019d4 <enc_stop>
}
 800171a:	e011      	b.n	8001740 <enc_command+0x58>
    else if ((cnt=sscanf(args, "speed %d", &_FixedSpeed))) enc_set_speed(_FixedSpeed);
 800171c:	4a0c      	ldr	r2, [pc, #48]	@ (8001750 <enc_command+0x68>)
 800171e:	490d      	ldr	r1, [pc, #52]	@ (8001754 <enc_command+0x6c>)
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f00d ff8d 	bl	800f640 <siscanf>
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d005      	beq.n	800173a <enc_command+0x52>
 800172e:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <enc_command+0x68>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f812 	bl	800175c <enc_set_speed>
}
 8001738:	e002      	b.n	8001740 <enc_command+0x58>
        printf("Unknown command. Use 'encoder start', 'encoder stop', or 'encoder speed ...'\n");
 800173a:	4807      	ldr	r0, [pc, #28]	@ (8001758 <enc_command+0x70>)
 800173c:	f00d ff58 	bl	800f5f0 <puts>
}
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	08013708 	.word	0x08013708
 800174c:	08013710 	.word	0x08013710
 8001750:	20000454 	.word	0x20000454
 8001754:	08013718 	.word	0x08013718
 8001758:	08013724 	.word	0x08013724

0800175c <enc_set_speed>:

//--- enc_set_speed ---------------------------
void enc_set_speed(int32_t speed)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	if (_FixedSpeed) speed=_FixedSpeed;
 8001764:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <enc_set_speed+0x48>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <enc_set_speed+0x16>
 800176c:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <enc_set_speed+0x48>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	607b      	str	r3, [r7, #4]
	if (!_Init) _init_pwm(speed);
 8001772:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <enc_set_speed+0x4c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d103      	bne.n	8001782 <enc_set_speed+0x26>
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f828 	bl	80017d0 <_init_pwm>
	else if (speed!=_SpeedOutSet)
	{
		_SpeedOutChange = speed;
		printf("Encoder Speedchange=%d\n", speed);
	}
}
 8001780:	e00b      	b.n	800179a <enc_set_speed+0x3e>
	else if (speed!=_SpeedOutSet)
 8001782:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <enc_set_speed+0x50>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	429a      	cmp	r2, r3
 800178a:	d006      	beq.n	800179a <enc_set_speed+0x3e>
		_SpeedOutChange = speed;
 800178c:	4a08      	ldr	r2, [pc, #32]	@ (80017b0 <enc_set_speed+0x54>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6013      	str	r3, [r2, #0]
		printf("Encoder Speedchange=%d\n", speed);
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	4807      	ldr	r0, [pc, #28]	@ (80017b4 <enc_set_speed+0x58>)
 8001796:	f00d fec3 	bl	800f520 <iprintf>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000454 	.word	0x20000454
 80017a8:	20000438 	.word	0x20000438
 80017ac:	20000444 	.word	0x20000444
 80017b0:	20000448 	.word	0x20000448
 80017b4:	08013774 	.word	0x08013774

080017b8 <enc_fixSpeed>:

//--- enc_fixSpeed ----------------------------
int  enc_fixSpeed(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
	return _FixedSpeed;
 80017bc:	4b03      	ldr	r3, [pc, #12]	@ (80017cc <enc_fixSpeed+0x14>)
 80017be:	681b      	ldr	r3, [r3, #0]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000454 	.word	0x20000454

080017d0 <_init_pwm>:

//--- _init_pwm ------------------------------
static void _init_pwm(int32_t speed)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08c      	sub	sp, #48	@ 0x30
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	if (_Prescaler * speed == 0) return;
 80017d8:	4b46      	ldr	r3, [pc, #280]	@ (80018f4 <_init_pwm+0x124>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 8081 	beq.w	80018ea <_init_pwm+0x11a>

	int reverse;
	if (speed>0)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	dd02      	ble.n	80017f4 <_init_pwm+0x24>
	{
		reverse=0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017f2:	e004      	b.n	80017fe <_init_pwm+0x2e>
	}
	else
	{
		reverse=1;
 80017f4:	2301      	movs	r3, #1
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		speed=-speed;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	425b      	negs	r3, r3
 80017fc:	607b      	str	r3, [r7, #4]
	}

	uint32_t period = (_Timer_clock_frequency / (_Prescaler * speed)) - 1;
 80017fe:	4b3e      	ldr	r3, [pc, #248]	@ (80018f8 <_init_pwm+0x128>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4b3c      	ldr	r3, [pc, #240]	@ (80018f4 <_init_pwm+0x124>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	fb01 f303 	mul.w	r3, r1, r3
 800180c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001810:	3b01      	subs	r3, #1
 8001812:	62bb      	str	r3, [r7, #40]	@ 0x28

	// Update Timer configuration
	htim2.Instance 				 = TIM2;
 8001814:	4b39      	ldr	r3, [pc, #228]	@ (80018fc <_init_pwm+0x12c>)
 8001816:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800181a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler 		 = _Prescaler - 1; // Prescaler is 0-based, for prescaler = 1, this will be 0
 800181c:	4b35      	ldr	r3, [pc, #212]	@ (80018f4 <_init_pwm+0x124>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	3b01      	subs	r3, #1
 8001822:	4a36      	ldr	r2, [pc, #216]	@ (80018fc <_init_pwm+0x12c>)
 8001824:	6053      	str	r3, [r2, #4]
	htim2.Init.CounterMode 		 = TIM_COUNTERMODE_UP;
 8001826:	4b35      	ldr	r3, [pc, #212]	@ (80018fc <_init_pwm+0x12c>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period 			 = period;
 800182c:	4a33      	ldr	r2, [pc, #204]	@ (80018fc <_init_pwm+0x12c>)
 800182e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001830:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision 	 = TIM_CLOCKDIVISION_DIV1;
 8001832:	4b32      	ldr	r3, [pc, #200]	@ (80018fc <_init_pwm+0x12c>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0;
 8001838:	4b30      	ldr	r3, [pc, #192]	@ (80018fc <_init_pwm+0x12c>)
 800183a:	2200      	movs	r2, #0
 800183c:	615a      	str	r2, [r3, #20]
	HAL_TIM_PWM_Init(&htim2);
 800183e:	482f      	ldr	r0, [pc, #188]	@ (80018fc <_init_pwm+0x12c>)
 8001840:	f005 fd5c 	bl	80072fc <HAL_TIM_PWM_Init>

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
 8001854:	615a      	str	r2, [r3, #20]
 8001856:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode 		= TIM_OCMODE_TOGGLE;
 8001858:	2330      	movs	r3, #48	@ 0x30
 800185a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCIdleState 	= TIM_OUTPUTSTATE_ENABLE;
 800185c:	2301      	movs	r3, #1
 800185e:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity 	= TIM_OCPOLARITY_HIGH;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]

	// Apply direction
	if (reverse)
 8001864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001866:	2b00      	cmp	r3, #0
 8001868:	d017      	beq.n	800189a <_init_pwm+0xca>
	{ // Reverse
		sConfigOC.Pulse = (period * 3) / 4; // CH1 at 25%
 800186a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	613b      	str	r3, [r7, #16]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	2200      	movs	r2, #0
 800187c:	4619      	mov	r1, r3
 800187e:	481f      	ldr	r0, [pc, #124]	@ (80018fc <_init_pwm+0x12c>)
 8001880:	f006 fa22 	bl	8007cc8 <HAL_TIM_PWM_ConfigChannel>
		sConfigOC.Pulse = (period * 1) / 4; // CH2 at 75%, ie half cycle later
 8001884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	613b      	str	r3, [r7, #16]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	2204      	movs	r2, #4
 8001890:	4619      	mov	r1, r3
 8001892:	481a      	ldr	r0, [pc, #104]	@ (80018fc <_init_pwm+0x12c>)
 8001894:	f006 fa18 	bl	8007cc8 <HAL_TIM_PWM_ConfigChannel>
 8001898:	e016      	b.n	80018c8 <_init_pwm+0xf8>
	}
	else
	{ // Forward
		sConfigOC.Pulse = (period * 1) / 4; // CH1 at 25%
 800189a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	613b      	str	r3, [r7, #16]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	2200      	movs	r2, #0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4814      	ldr	r0, [pc, #80]	@ (80018fc <_init_pwm+0x12c>)
 80018aa:	f006 fa0d 	bl	8007cc8 <HAL_TIM_PWM_ConfigChannel>
		sConfigOC.Pulse = (period * 3) / 4; // CH2 at 75%, ie half cycle later
 80018ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018b0:	4613      	mov	r3, r2
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	613b      	str	r3, [r7, #16]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	2204      	movs	r2, #4
 80018c0:	4619      	mov	r1, r3
 80018c2:	480e      	ldr	r0, [pc, #56]	@ (80018fc <_init_pwm+0x12c>)
 80018c4:	f006 fa00 	bl	8007cc8 <HAL_TIM_PWM_ConfigChannel>
	}

	if(HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1)!=HAL_OK)
 80018c8:	2100      	movs	r1, #0
 80018ca:	480c      	ldr	r0, [pc, #48]	@ (80018fc <_init_pwm+0x12c>)
 80018cc:	f005 fea8 	bl	8007620 <HAL_TIM_PWM_Start_IT>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <_init_pwm+0x10a>
	{
	   Error_Handler();
 80018d6:	f000 fe17 	bl	8002508 <Error_Handler>
	}
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80018da:	2104      	movs	r1, #4
 80018dc:	4807      	ldr	r0, [pc, #28]	@ (80018fc <_init_pwm+0x12c>)
 80018de:	f005 fd5d 	bl	800739c <HAL_TIM_PWM_Start>
	_Init = TRUE;
 80018e2:	4b07      	ldr	r3, [pc, #28]	@ (8001900 <_init_pwm+0x130>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	e000      	b.n	80018ec <_init_pwm+0x11c>
	if (_Prescaler * speed == 0) return;
 80018ea:	bf00      	nop
}
 80018ec:	3730      	adds	r7, #48	@ 0x30
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000424 	.word	0x20000424
 80018f8:	20000420 	.word	0x20000420
 80018fc:	200004ac 	.word	0x200004ac
 8001900:	20000438 	.word	0x20000438

08001904 <HAL_TIM_PWM_PulseFinishedCallback>:

//--- HAL_TIM_PWM_PulseFinishedCallback -------------------------------
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if(htim -> Instance == TIM2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001914:	d128      	bne.n	8001968 <HAL_TIM_PWM_PulseFinishedCallback+0x64>
  {
	  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	7f1b      	ldrb	r3, [r3, #28]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d124      	bne.n	8001968 <HAL_TIM_PWM_PulseFinishedCallback+0x64>
	  {
		  _EncStatus.encOutPos++;
 800191e:	4b14      	ldr	r3, [pc, #80]	@ (8001970 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	3301      	adds	r3, #1
 8001924:	4a12      	ldr	r2, [pc, #72]	@ (8001970 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8001926:	60d3      	str	r3, [r2, #12]
		  _EncOutSpeedCnt++;
 8001928:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	3301      	adds	r3, #1
 800192e:	4a11      	ldr	r2, [pc, #68]	@ (8001974 <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 8001930:	6013      	str	r3, [r2, #0]
		  if (_SpeedOutChange)// && !(_EncOutSpeedCnt&1)) // only the even counts to be sure we at at the end of a complete sequence
 8001932:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d016      	beq.n	8001968 <HAL_TIM_PWM_PulseFinishedCallback+0x64>
		  {
			  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800193a:	2100      	movs	r1, #0
 800193c:	480f      	ldr	r0, [pc, #60]	@ (800197c <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 800193e:	f005 fdf7 	bl	8007530 <HAL_TIM_PWM_Stop>
			  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001942:	2104      	movs	r1, #4
 8001944:	480d      	ldr	r0, [pc, #52]	@ (800197c <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8001946:	f005 fdf3 	bl	8007530 <HAL_TIM_PWM_Stop>
			  _Init=FALSE;
 800194a:	4b0d      	ldr	r3, [pc, #52]	@ (8001980 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
			  _init_pwm(_SpeedOutChange);
 8001950:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff3b 	bl	80017d0 <_init_pwm>
			  _SpeedOutSet = _SpeedOutChange;
 800195a:	4b07      	ldr	r3, [pc, #28]	@ (8001978 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a09      	ldr	r2, [pc, #36]	@ (8001984 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8001960:	6013      	str	r3, [r2, #0]
			  _SpeedOutChange = 0;
 8001962:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
		  }
	  }
  }
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000428 	.word	0x20000428
 8001974:	20000450 	.word	0x20000450
 8001978:	20000448 	.word	0x20000448
 800197c:	200004ac 	.word	0x200004ac
 8001980:	20000438 	.word	0x20000438
 8001984:	20000444 	.word	0x20000444

08001988 <enc_start>:

//--- enc_start ---------------------------
void enc_start(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	if (_FixedSpeed) printf("WARN: Encoder speed fixed to %d Hz\n", _FixedSpeed);
 800198c:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <enc_start+0x38>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <enc_start+0x18>
 8001994:	4b0a      	ldr	r3, [pc, #40]	@ (80019c0 <enc_start+0x38>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	480a      	ldr	r0, [pc, #40]	@ (80019c4 <enc_start+0x3c>)
 800199c:	f00d fdc0 	bl	800f520 <iprintf>

    // Apply the last configured settings and start PWM
	_EncStatus.encOutPos=0;
 80019a0:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <enc_start+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80019a6:	2100      	movs	r1, #0
 80019a8:	4808      	ldr	r0, [pc, #32]	@ (80019cc <enc_start+0x44>)
 80019aa:	f005 fcf7 	bl	800739c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80019ae:	2104      	movs	r1, #4
 80019b0:	4806      	ldr	r0, [pc, #24]	@ (80019cc <enc_start+0x44>)
 80019b2:	f005 fcf3 	bl	800739c <HAL_TIM_PWM_Start>
    _Running=TRUE;
 80019b6:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <enc_start+0x48>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000454 	.word	0x20000454
 80019c4:	0801378c 	.word	0x0801378c
 80019c8:	20000428 	.word	0x20000428
 80019cc:	200004ac 	.word	0x200004ac
 80019d0:	2000043c 	.word	0x2000043c

080019d4 <enc_stop>:

//--- enc_stop ---------------------------------
void enc_stop(void) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
    // Stop the PWM and ensure both outputs are low
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80019d8:	2100      	movs	r1, #0
 80019da:	4806      	ldr	r0, [pc, #24]	@ (80019f4 <enc_stop+0x20>)
 80019dc:	f005 fda8 	bl	8007530 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80019e0:	2104      	movs	r1, #4
 80019e2:	4804      	ldr	r0, [pc, #16]	@ (80019f4 <enc_stop+0x20>)
 80019e4:	f005 fda4 	bl	8007530 <HAL_TIM_PWM_Stop>
    _Running=FALSE;
 80019e8:	4b03      	ldr	r3, [pc, #12]	@ (80019f8 <enc_stop+0x24>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200004ac 	.word	0x200004ac
 80019f8:	2000043c 	.word	0x2000043c

080019fc <strstart>:
#include <stdlib.h>
#include "ge_common.h"

//--- strstart ---------------------------------------
char *strstart(const char *str, const char *start)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
	int len=strlen(start);
 8001a06:	6838      	ldr	r0, [r7, #0]
 8001a08:	f7fe fc32 	bl	8000270 <strlen>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60fb      	str	r3, [r7, #12]
	if (!strncmp(str, start, len))
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	461a      	mov	r2, r3
 8001a14:	6839      	ldr	r1, [r7, #0]
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f00d ff1e 	bl	800f858 <strncmp>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10d      	bne.n	8001a3e <strstart+0x42>
	{
		while (str[len]==' ') len++;
 8001a22:	e002      	b.n	8001a2a <strstart+0x2e>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3301      	adds	r3, #1
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b20      	cmp	r3, #32
 8001a34:	d0f6      	beq.n	8001a24 <strstart+0x28>
		return (char*)&str[len];
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	e000      	b.n	8001a40 <strstart+0x44>
	}
	return 0;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <bin2hex>:

//--- bin2hex ------------------------------
char *bin2hex(char *str, void *data, int len)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
	UINT8 *src=(UINT8*)data;
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	61fb      	str	r3, [r7, #28]
	char *dst = str;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	61bb      	str	r3, [r7, #24]
	dst+= sprintf(dst, "%03d ", len);
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4913      	ldr	r1, [pc, #76]	@ (8001aac <bin2hex+0x64>)
 8001a60:	69b8      	ldr	r0, [r7, #24]
 8001a62:	f00d fdcd 	bl	800f600 <siprintf>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461a      	mov	r2, r3
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
	for(int i=0; i<len; i++, src++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e011      	b.n	8001a9a <bin2hex+0x52>
	{
		dst+=sprintf(dst, "%02x ", *src);
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	@ (8001ab0 <bin2hex+0x68>)
 8001a7e:	69b8      	ldr	r0, [r7, #24]
 8001a80:	f00d fdbe 	bl	800f600 <siprintf>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
	for(int i=0; i<len; i++, src++)
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	3301      	adds	r3, #1
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	3301      	adds	r3, #1
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	dbe9      	blt.n	8001a76 <bin2hex+0x2e>
	}
	return str;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	080137b0 	.word	0x080137b0
 8001ab0:	080137b8 	.word	0x080137b8

08001ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aba:	f001 f909 	bl	8002cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001abe:	f000 f85f 	bl	8001b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ac2:	f000 fa75 	bl	8001fb0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001ac6:	f000 fa43 	bl	8001f50 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8001aca:	f00c f805 	bl	800dad8 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8001ace:	f000 f95f 	bl	8001d90 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001ad2:	f000 f8b9 	bl	8001c48 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001ad6:	f000 f8f7 	bl	8001cc8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001ada:	f000 f9b3 	bl	8001e44 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001ade:	f000 fa05 	bl	8001eec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001ae2:	213c      	movs	r1, #60	@ 0x3c
 8001ae4:	481f      	ldr	r0, [pc, #124]	@ (8001b64 <main+0xb0>)
 8001ae6:	f005 ff59 	bl	800799c <HAL_TIM_Encoder_Start>

  // Kick off asynchronous UART RCV
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&RxDataFERAG, 1);
 8001aea:	2201      	movs	r2, #1
 8001aec:	491e      	ldr	r1, [pc, #120]	@ (8001b68 <main+0xb4>)
 8001aee:	481f      	ldr	r0, [pc, #124]	@ (8001b6c <main+0xb8>)
 8001af0:	f006 ff02 	bl	80088f8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&RxDataNUC, 1);
 8001af4:	2201      	movs	r2, #1
 8001af6:	491e      	ldr	r1, [pc, #120]	@ (8001b70 <main+0xbc>)
 8001af8:	481e      	ldr	r0, [pc, #120]	@ (8001b74 <main+0xc0>)
 8001afa:	f006 fefd 	bl	80088f8 <HAL_UART_Receive_IT>

  term_init();
 8001afe:	f001 f819 	bl	8002b34 <term_init>
  enc_init();
 8001b02:	f7ff fd21 	bl	8001548 <enc_init>
  box_init();
 8001b06:	f7ff f9a3 	bl	8000e50 <box_init>

  power_nuc(TRUE);
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f000 fc38 	bl	8002380 <power_nuc>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	AD55936_init(&hi2c1, 0x10 << 1);
 8001b10:	2120      	movs	r1, #32
 8001b12:	4819      	ldr	r0, [pc, #100]	@ (8001b78 <main+0xc4>)
 8001b14:	f7ff f8ee 	bl	8000cf4 <AD55936_init>
	int _ticks=0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	607b      	str	r3, [r7, #4]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		int ticks= HAL_GetTick();
 8001b1c:	f001 f932 	bl	8002d84 <HAL_GetTick>
 8001b20:	4603      	mov	r3, r0
 8001b22:	603b      	str	r3, [r7, #0]

		while (ticks-_ticks>9)
 8001b24:	e013      	b.n	8001b4e <main+0x9a>
		{
			_tick_10ms(ticks);
 8001b26:	6838      	ldr	r0, [r7, #0]
 8001b28:	f000 fb30 	bl	800218c <_tick_10ms>
			_ticks=ticks;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	607b      	str	r3, [r7, #4]
			if (_powerDisplay && _ticks>_powerDisplay)
 8001b30:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <main+0xc8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00a      	beq.n	8001b4e <main+0x9a>
 8001b38:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <main+0xc8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	dd05      	ble.n	8001b4e <main+0x9a>
			{
				_powerDisplay=0;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <main+0xc8>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
				power_display(TRUE);
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f000 fc31 	bl	80023b0 <power_display>
		while (ticks-_ticks>9)
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b09      	cmp	r3, #9
 8001b56:	dce6      	bgt.n	8001b26 <main+0x72>
			}
		}
		box_idle();
 8001b58:	f7ff fa1e 	bl	8000f98 <box_idle>
		term_idle();
 8001b5c:	f001 f816 	bl	8002b8c <term_idle>
	{
 8001b60:	e7dc      	b.n	8001b1c <main+0x68>
 8001b62:	bf00      	nop
 8001b64:	20000544 	.word	0x20000544
 8001b68:	200006a1 	.word	0x200006a1
 8001b6c:	20000590 	.word	0x20000590
 8001b70:	200006a0 	.word	0x200006a0
 8001b74:	20000618 	.word	0x20000618
 8001b78:	20000458 	.word	0x20000458
 8001b7c:	2000000c 	.word	0x2000000c

08001b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b09a      	sub	sp, #104	@ 0x68
 8001b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b86:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b8a:	2228      	movs	r2, #40	@ 0x28
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f00d fe5a 	bl	800f848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	222c      	movs	r2, #44	@ 0x2c
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f00d fe4c 	bl	800f848 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bb8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bc2:	2310      	movs	r3, #16
 8001bc4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bce:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001bd0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001bd4:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 fe8c 	bl	80058f8 <HAL_RCC_OscConfig>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001be6:	f000 fc8f 	bl	8002508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bea:	230f      	movs	r3, #15
 8001bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c04:	2102      	movs	r1, #2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f004 feb4 	bl	8006974 <HAL_RCC_ClockConfig>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001c12:	f000 fc79 	bl	8002508 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8001c16:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <SystemClock_Config+0xc4>)
 8001c18:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f005 f8d9 	bl	8006de4 <HAL_RCCEx_PeriphCLKConfig>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001c38:	f000 fc66 	bl	8002508 <Error_Handler>
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3768      	adds	r7, #104	@ 0x68
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	00020025 	.word	0x00020025

08001c48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc0 <MX_I2C1_Init+0x78>)
 8001c50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c54:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc4 <MX_I2C1_Init+0x7c>)
 8001c56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c58:	4b18      	ldr	r3, [pc, #96]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c5e:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c64:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c6a:	4b14      	ldr	r3, [pc, #80]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c70:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c76:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c82:	480e      	ldr	r0, [pc, #56]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c84:	f001 fbbc 	bl	8003400 <HAL_I2C_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c8e:	f000 fc3b 	bl	8002508 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c92:	2100      	movs	r1, #0
 8001c94:	4809      	ldr	r0, [pc, #36]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c96:	f002 f8bf 	bl	8003e18 <HAL_I2CEx_ConfigAnalogFilter>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ca0:	f000 fc32 	bl	8002508 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4805      	ldr	r0, [pc, #20]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001ca8:	f002 f901 	bl	8003eae <HAL_I2CEx_ConfigDigitalFilter>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cb2:	f000 fc29 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000458 	.word	0x20000458
 8001cc0:	40005400 	.word	0x40005400
 8001cc4:	2000090e 	.word	0x2000090e

08001cc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	@ 0x28
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
//	PWM for encoder output
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cce:	f107 0320 	add.w	r3, r7, #32
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	611a      	str	r2, [r3, #16]
 8001ce6:	615a      	str	r2, [r3, #20]
 8001ce8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cea:	4b28      	ldr	r3, [pc, #160]	@ (8001d8c <MX_TIM2_Init+0xc4>)
 8001cec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cf0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001cf2:	4b26      	ldr	r3, [pc, #152]	@ (8001d8c <MX_TIM2_Init+0xc4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf8:	4b24      	ldr	r3, [pc, #144]	@ (8001d8c <MX_TIM2_Init+0xc4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001cfe:	4b23      	ldr	r3, [pc, #140]	@ (8001d8c <MX_TIM2_Init+0xc4>)
 8001d00:	f04f 32ff 	mov.w	r2, #4294967295
 8001d04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d06:	4b21      	ldr	r3, [pc, #132]	@ (8001d8c <MX_TIM2_Init+0xc4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d8c <MX_TIM2_Init+0xc4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d12:	481e      	ldr	r0, [pc, #120]	@ (8001d8c <MX_TIM2_Init+0xc4>)
 8001d14:	f005 faf2 	bl	80072fc <HAL_TIM_PWM_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d1e:	f000 fbf3 	bl	8002508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d2a:	f107 0320 	add.w	r3, r7, #32
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4816      	ldr	r0, [pc, #88]	@ (8001d8c <MX_TIM2_Init+0xc4>)
 8001d32:	f006 fc23 	bl	800857c <HAL_TIMEx_MasterConfigSynchronization>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001d3c:	f000 fbe4 	bl	8002508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d40:	2360      	movs	r3, #96	@ 0x60
 8001d42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2200      	movs	r2, #0
 8001d54:	4619      	mov	r1, r3
 8001d56:	480d      	ldr	r0, [pc, #52]	@ (8001d8c <MX_TIM2_Init+0xc4>)
 8001d58:	f005 ffb6 	bl	8007cc8 <HAL_TIM_PWM_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001d62:	f000 fbd1 	bl	8002508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	2204      	movs	r2, #4
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4807      	ldr	r0, [pc, #28]	@ (8001d8c <MX_TIM2_Init+0xc4>)
 8001d6e:	f005 ffab 	bl	8007cc8 <HAL_TIM_PWM_ConfigChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001d78:	f000 fbc6 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d7c:	4803      	ldr	r0, [pc, #12]	@ (8001d8c <MX_TIM2_Init+0xc4>)
 8001d7e:	f000 fccb 	bl	8002718 <HAL_TIM_MspPostInit>

}
 8001d82:	bf00      	nop
 8001d84:	3728      	adds	r7, #40	@ 0x28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200004ac 	.word	0x200004ac

08001d90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da4:	463b      	mov	r3, r7
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dac:	4b23      	ldr	r3, [pc, #140]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001dae:	4a24      	ldr	r2, [pc, #144]	@ (8001e40 <MX_TIM3_Init+0xb0>)
 8001db0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 8001db2:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001db4:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001db8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001dba:	4b20      	ldr	r3, [pc, #128]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001dbc:	2210      	movs	r2, #16
 8001dbe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001dc2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001dc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dce:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dd4:	4819      	ldr	r0, [pc, #100]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001dd6:	f005 f979 	bl	80070cc <HAL_TIM_Base_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001de0:	f000 fb92 	bl	8002508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001de8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dea:	f107 0308 	add.w	r3, r7, #8
 8001dee:	4619      	mov	r1, r3
 8001df0:	4812      	ldr	r0, [pc, #72]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001df2:	f006 f82b 	bl	8007e4c <HAL_TIM_ConfigClockSource>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001dfc:	f000 fb84 	bl	8002508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e00:	2300      	movs	r3, #0
 8001e02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e08:	463b      	mov	r3, r7
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	480b      	ldr	r0, [pc, #44]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001e0e:	f006 fbb5 	bl	800857c <HAL_TIMEx_MasterConfigSynchronization>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e18:	f000 fb76 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK) {
 8001e1c:	4807      	ldr	r0, [pc, #28]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001e1e:	f005 fa05 	bl	800722c <HAL_TIM_Base_Start_IT>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM3_Init+0x9c>
		Error_Handler();
 8001e28:	f000 fb6e 	bl	8002508 <Error_Handler>
	}
	HAL_TIM_Base_Start(&htim3);
 8001e2c:	4803      	ldr	r0, [pc, #12]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001e2e:	f005 f99d 	bl	800716c <HAL_TIM_Base_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200004f8 	.word	0x200004f8
 8001e40:	40000400 	.word	0x40000400

08001e44 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08c      	sub	sp, #48	@ 0x30
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	2224      	movs	r2, #36	@ 0x24
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f00d fcf8 	bl	800f848 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e60:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <MX_TIM5_Init+0xa0>)
 8001e62:	4a21      	ldr	r2, [pc, #132]	@ (8001ee8 <MX_TIM5_Init+0xa4>)
 8001e64:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee4 <MX_TIM5_Init+0xa0>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <MX_TIM5_Init+0xa0>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001e72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee4 <MX_TIM5_Init+0xa0>)
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <MX_TIM5_Init+0xa0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e80:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <MX_TIM5_Init+0xa0>)
 8001e82:	2280      	movs	r2, #128	@ 0x80
 8001e84:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e86:	2303      	movs	r3, #3
 8001e88:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001e96:	230a      	movs	r3, #10
 8001e98:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001ea6:	230a      	movs	r3, #10
 8001ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	4619      	mov	r1, r3
 8001eb0:	480c      	ldr	r0, [pc, #48]	@ (8001ee4 <MX_TIM5_Init+0xa0>)
 8001eb2:	f005 fccd 	bl	8007850 <HAL_TIM_Encoder_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001ebc:	f000 fb24 	bl	8002508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <MX_TIM5_Init+0xa0>)
 8001ece:	f006 fb55 	bl	800857c <HAL_TIMEx_MasterConfigSynchronization>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001ed8:	f000 fb16 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001edc:	bf00      	nop
 8001ede:	3730      	adds	r7, #48	@ 0x30
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000544 	.word	0x20000544
 8001ee8:	40000c00 	.word	0x40000c00

08001eec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ef0:	4b15      	ldr	r3, [pc, #84]	@ (8001f48 <MX_USART1_UART_Init+0x5c>)
 8001ef2:	4a16      	ldr	r2, [pc, #88]	@ (8001f4c <MX_USART1_UART_Init+0x60>)
 8001ef4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001ef6:	4b14      	ldr	r3, [pc, #80]	@ (8001f48 <MX_USART1_UART_Init+0x5c>)
 8001ef8:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001efc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001efe:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <MX_USART1_UART_Init+0x5c>)
 8001f00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f04:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f06:	4b10      	ldr	r3, [pc, #64]	@ (8001f48 <MX_USART1_UART_Init+0x5c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f48 <MX_USART1_UART_Init+0x5c>)
 8001f0e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001f12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <MX_USART1_UART_Init+0x5c>)
 8001f16:	220c      	movs	r2, #12
 8001f18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <MX_USART1_UART_Init+0x5c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f20:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <MX_USART1_UART_Init+0x5c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f26:	4b08      	ldr	r3, [pc, #32]	@ (8001f48 <MX_USART1_UART_Init+0x5c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <MX_USART1_UART_Init+0x5c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f32:	4805      	ldr	r0, [pc, #20]	@ (8001f48 <MX_USART1_UART_Init+0x5c>)
 8001f34:	f006 fbaa 	bl	800868c <HAL_UART_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001f3e:	f000 fae3 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000590 	.word	0x20000590
 8001f4c:	40013800 	.word	0x40013800

08001f50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f54:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f56:	4a15      	ldr	r2, [pc, #84]	@ (8001fac <MX_USART3_UART_Init+0x5c>)
 8001f58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f5a:	4b13      	ldr	r3, [pc, #76]	@ (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f62:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f68:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f74:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f76:	220c      	movs	r2, #12
 8001f78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f80:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f86:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f92:	4805      	ldr	r0, [pc, #20]	@ (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f94:	f006 fb7a 	bl	800868c <HAL_UART_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f9e:	f000 fab3 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000618 	.word	0x20000618
 8001fac:	40004800 	.word	0x40004800

08001fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	@ 0x28
 8001fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
 8001fc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80020b4 <MX_GPIO_Init+0x104>)
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	4a3a      	ldr	r2, [pc, #232]	@ (80020b4 <MX_GPIO_Init+0x104>)
 8001fcc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fd0:	6153      	str	r3, [r2, #20]
 8001fd2:	4b38      	ldr	r3, [pc, #224]	@ (80020b4 <MX_GPIO_Init+0x104>)
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	4b35      	ldr	r3, [pc, #212]	@ (80020b4 <MX_GPIO_Init+0x104>)
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	4a34      	ldr	r2, [pc, #208]	@ (80020b4 <MX_GPIO_Init+0x104>)
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe8:	6153      	str	r3, [r2, #20]
 8001fea:	4b32      	ldr	r3, [pc, #200]	@ (80020b4 <MX_GPIO_Init+0x104>)
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ff6:	4b2f      	ldr	r3, [pc, #188]	@ (80020b4 <MX_GPIO_Init+0x104>)
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	4a2e      	ldr	r2, [pc, #184]	@ (80020b4 <MX_GPIO_Init+0x104>)
 8001ffc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002000:	6153      	str	r3, [r2, #20]
 8002002:	4b2c      	ldr	r3, [pc, #176]	@ (80020b4 <MX_GPIO_Init+0x104>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200e:	4b29      	ldr	r3, [pc, #164]	@ (80020b4 <MX_GPIO_Init+0x104>)
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	4a28      	ldr	r2, [pc, #160]	@ (80020b4 <MX_GPIO_Init+0x104>)
 8002014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002018:	6153      	str	r3, [r2, #20]
 800201a:	4b26      	ldr	r3, [pc, #152]	@ (80020b4 <MX_GPIO_Init+0x104>)
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800202c:	4822      	ldr	r0, [pc, #136]	@ (80020b8 <MX_GPIO_Init+0x108>)
 800202e:	f001 f9cf 	bl	80033d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, NUC_PWR_EN_Pin|DISPLAY_PWR_EN_Pin, GPIO_PIN_RESET);
 8002032:	2200      	movs	r2, #0
 8002034:	21c0      	movs	r1, #192	@ 0xc0
 8002036:	4821      	ldr	r0, [pc, #132]	@ (80020bc <MX_GPIO_Init+0x10c>)
 8002038:	f001 f9ca 	bl	80033d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIP_5_Pin DIP_4_Pin DIP_3_Pin DIP_2_Pin
                           DIP_1_Pin DIP_0_Pin */
  GPIO_InitStruct.Pin = DIP_5_Pin|DIP_4_Pin|DIP_3_Pin|DIP_2_Pin
 800203c:	f44f 73be 	mov.w	r3, #380	@ 0x17c
 8002040:	617b      	str	r3, [r7, #20]
                          |DIP_1_Pin|DIP_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4619      	mov	r1, r3
 8002050:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002054:	f001 f82a 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PRINT_GO_Pin */
  GPIO_InitStruct.Pin = PRINT_GO_Pin;
 8002058:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800205c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205e:	2301      	movs	r3, #1
 8002060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	2300      	movs	r3, #0
 8002068:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PRINT_GO_GPIO_Port, &GPIO_InitStruct);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	4811      	ldr	r0, [pc, #68]	@ (80020b8 <MX_GPIO_Init+0x108>)
 8002072:	f001 f81b 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PRINT_DONE_Pin */
  GPIO_InitStruct.Pin = PRINT_DONE_Pin;
 8002076:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800207a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207c:	2300      	movs	r3, #0
 800207e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PRINT_DONE_GPIO_Port, &GPIO_InitStruct);
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4619      	mov	r1, r3
 800208a:	480b      	ldr	r0, [pc, #44]	@ (80020b8 <MX_GPIO_Init+0x108>)
 800208c:	f001 f80e 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pins : NUC_PWR_EN_Pin DISPLAY_PWR_EN_Pin */
  GPIO_InitStruct.Pin = NUC_PWR_EN_Pin|DISPLAY_PWR_EN_Pin;
 8002090:	23c0      	movs	r3, #192	@ 0xc0
 8002092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002094:	2301      	movs	r3, #1
 8002096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4619      	mov	r1, r3
 80020a6:	4805      	ldr	r0, [pc, #20]	@ (80020bc <MX_GPIO_Init+0x10c>)
 80020a8:	f001 f800 	bl	80030ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020ac:	bf00      	nop
 80020ae:	3728      	adds	r7, #40	@ 0x28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000
 80020b8:	48001000 	.word	0x48001000
 80020bc:	48001400 	.word	0x48001400

080020c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//--- HAL_TIM_PeriodElapsedCallback -------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	if (htim==&htim3) enc_in_irq(htim);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a05      	ldr	r2, [pc, #20]	@ (80020e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d102      	bne.n	80020d6 <HAL_TIM_PeriodElapsedCallback+0x16>
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff fa49 	bl	8001568 <enc_in_irq>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200004f8 	.word	0x200004f8

080020e4 <enc_get_pos>:

//--- enc_get_pos -------------------------------------
int32_t	enc_get_pos(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5);
 80020e8:	4b03      	ldr	r3, [pc, #12]	@ (80020f8 <enc_get_pos+0x14>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	20000544 	.word	0x20000544

080020fc <HAL_UART_RxCpltCallback>:

// UART RX Interrupt function override
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a11      	ldr	r2, [pc, #68]	@ (8002150 <HAL_UART_RxCpltCallback+0x54>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10b      	bne.n	8002126 <HAL_UART_RxCpltCallback+0x2a>
	{
		box_handle_ferag_char(RxDataFERAG);
 800210e:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <HAL_UART_RxCpltCallback+0x58>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fffb 	bl	8001110 <box_handle_ferag_char>
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&RxDataFERAG, 1);
 800211a:	2201      	movs	r2, #1
 800211c:	490d      	ldr	r1, [pc, #52]	@ (8002154 <HAL_UART_RxCpltCallback+0x58>)
 800211e:	480e      	ldr	r0, [pc, #56]	@ (8002158 <HAL_UART_RxCpltCallback+0x5c>)
 8002120:	f006 fbea 	bl	80088f8 <HAL_UART_Receive_IT>
	else if (huart->Instance == USART3)
	{
		term_handle_char(RxDataNUC);
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&RxDataNUC, 1);
	}
}
 8002124:	e00f      	b.n	8002146 <HAL_UART_RxCpltCallback+0x4a>
	else if (huart->Instance == USART3)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a0c      	ldr	r2, [pc, #48]	@ (800215c <HAL_UART_RxCpltCallback+0x60>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d10a      	bne.n	8002146 <HAL_UART_RxCpltCallback+0x4a>
		term_handle_char(RxDataNUC);
 8002130:	4b0b      	ldr	r3, [pc, #44]	@ (8002160 <HAL_UART_RxCpltCallback+0x64>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fd08 	bl	8002b4c <term_handle_char>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&RxDataNUC, 1);
 800213c:	2201      	movs	r2, #1
 800213e:	4908      	ldr	r1, [pc, #32]	@ (8002160 <HAL_UART_RxCpltCallback+0x64>)
 8002140:	4808      	ldr	r0, [pc, #32]	@ (8002164 <HAL_UART_RxCpltCallback+0x68>)
 8002142:	f006 fbd9 	bl	80088f8 <HAL_UART_Receive_IT>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40013800 	.word	0x40013800
 8002154:	200006a1 	.word	0x200006a1
 8002158:	20000590 	.word	0x20000590
 800215c:	40004800 	.word	0x40004800
 8002160:	200006a0 	.word	0x200006a0
 8002164:	20000618 	.word	0x20000618

08002168 <ferag_send_char>:

//--- ferag_send_char -----------------------
void ferag_send_char(char data)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 8002172:	1df9      	adds	r1, r7, #7
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
 8002178:	2201      	movs	r2, #1
 800217a:	4803      	ldr	r0, [pc, #12]	@ (8002188 <ferag_send_char+0x20>)
 800217c:	f006 fad4 	bl	8008728 <HAL_UART_Transmit>
}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000590 	.word	0x20000590

0800218c <_tick_10ms>:

//--- _tick_10ms ---------------------
static void _tick_10ms(int ticks)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	box_tick_10ms(ticks);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7fe ff07 	bl	8000fa8 <box_tick_10ms>
	enc_tick_10ms(ticks);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff fa3e 	bl	800161c <enc_tick_10ms>
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <adc_get_value>:

//--- adc_get_value --------------------------
float adc_get_value(int no, float factor)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	ed87 0a00 	vstr	s0, [r7]
	uint16_t val;
	AD5593R_ReadADC(&hi2c1, 0x10 << 1, no, &val);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	f107 030e 	add.w	r3, r7, #14
 80021bc:	2120      	movs	r1, #32
 80021be:	480b      	ldr	r0, [pc, #44]	@ (80021ec <adc_get_value+0x44>)
 80021c0:	f7fe fde3 	bl	8000d8a <AD5593R_ReadADC>
	return ((float)val * factor) / 4095.0;
 80021c4:	89fb      	ldrh	r3, [r7, #14]
 80021c6:	ee07 3a90 	vmov	s15, r3
 80021ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021ce:	edd7 7a00 	vldr	s15, [r7]
 80021d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80021f0 <adc_get_value+0x48>
 80021da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021de:	eef0 7a66 	vmov.f32	s15, s13
}
 80021e2:	eeb0 0a67 	vmov.f32	s0, s15
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000458 	.word	0x20000458
 80021f0:	457ff000 	.word	0x457ff000

080021f4 <adc_get_temp>:

//--- adc_get_temp --------------------------------------
float adc_get_temp(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
    const float ADC_25 = 819.0; // ADC value at 25 degrees Celsius
 80021fa:	4b10      	ldr	r3, [pc, #64]	@ (800223c <adc_get_temp+0x48>)
 80021fc:	60fb      	str	r3, [r7, #12]
    const float SLOPE = 2.654; // ADC counts per degree Celsius
 80021fe:	4b10      	ldr	r3, [pc, #64]	@ (8002240 <adc_get_temp+0x4c>)
 8002200:	60bb      	str	r3, [r7, #8]
	uint16_t val;
	AD5593R_ReadADC(&hi2c1, 0x10 << 1, 8, &val);
 8002202:	1dbb      	adds	r3, r7, #6
 8002204:	2208      	movs	r2, #8
 8002206:	2120      	movs	r1, #32
 8002208:	480e      	ldr	r0, [pc, #56]	@ (8002244 <adc_get_temp+0x50>)
 800220a:	f7fe fdbe 	bl	8000d8a <AD5593R_ReadADC>
    return 25.0 + ((float)val - ADC_25) / SLOPE;
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	ee07 3a90 	vmov	s15, r3
 8002214:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002218:	edd7 7a03 	vldr	s15, [r7, #12]
 800221c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002220:	ed97 7a02 	vldr	s14, [r7, #8]
 8002224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002228:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800222c:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8002230:	eeb0 0a67 	vmov.f32	s0, s15
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	444cc000 	.word	0x444cc000
 8002240:	4029db23 	.word	0x4029db23
 8002244:	20000458 	.word	0x20000458

08002248 <adc_get_revision>:

//--- adc_get_revision ------------------------------------
uint8_t adc_get_revision(float val)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	ed87 0a01 	vstr	s0, [r7, #4]
	const float baseVoltage = 0.075f; // Base voltage (0.1V - 0.025V)
 8002252:	4b1e      	ldr	r3, [pc, #120]	@ (80022cc <adc_get_revision+0x84>)
 8002254:	617b      	str	r3, [r7, #20]
    const float increment = 0.1f; // Voltage increment per revision
 8002256:	4b1e      	ldr	r3, [pc, #120]	@ (80022d0 <adc_get_revision+0x88>)
 8002258:	613b      	str	r3, [r7, #16]
    const float maxValidVoltage = 26.0f; // Example: max expected voltage, adjust based on your last revision
 800225a:	4b1e      	ldr	r3, [pc, #120]	@ (80022d4 <adc_get_revision+0x8c>)
 800225c:	60fb      	str	r3, [r7, #12]

    if (val < baseVoltage || val > maxValidVoltage) return 0; // Invalid voltage
 800225e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002262:	edd7 7a05 	vldr	s15, [r7, #20]
 8002266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800226a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226e:	d408      	bmi.n	8002282 <adc_get_revision+0x3a>
 8002270:	ed97 7a01 	vldr	s14, [r7, #4]
 8002274:	edd7 7a03 	vldr	s15, [r7, #12]
 8002278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800227c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002280:	dd01      	ble.n	8002286 <adc_get_revision+0x3e>
 8002282:	2300      	movs	r3, #0
 8002284:	e01d      	b.n	80022c2 <adc_get_revision+0x7a>

    return (uint8_t)floor((val - baseVoltage) / increment) + 1;
 8002286:	ed97 7a01 	vldr	s14, [r7, #4]
 800228a:	edd7 7a05 	vldr	s15, [r7, #20]
 800228e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002292:	edd7 7a04 	vldr	s15, [r7, #16]
 8002296:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800229a:	ee16 0a90 	vmov	r0, s13
 800229e:	f7fe f953 	bl	8000548 <__aeabi_f2d>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	ec43 2b10 	vmov	d0, r2, r3
 80022aa:	f011 f8fd 	bl	80134a8 <floor>
 80022ae:	ec53 2b10 	vmov	r2, r3, d0
 80022b2:	4610      	mov	r0, r2
 80022b4:	4619      	mov	r1, r3
 80022b6:	f7fe fc77 	bl	8000ba8 <__aeabi_d2uiz>
 80022ba:	4603      	mov	r3, r0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	3301      	adds	r3, #1
 80022c0:	b2db      	uxtb	r3, r3
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	3d99999a 	.word	0x3d99999a
 80022d0:	3dcccccd 	.word	0x3dcccccd
 80022d4:	41d00000 	.word	0x41d00000

080022d8 <gpio_get_dipswitches>:

//--- gpio_get_dipswitches -------------------------------
uint8_t gpio_get_dipswitches(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
    uint8_t dipswitches = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	71fb      	strb	r3, [r7, #7]

    if (HAL_GPIO_ReadPin(DIP_0_GPIO_Port, DIP_0_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 0;
 80022e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ea:	f001 f859 	bl	80033a0 <HAL_GPIO_ReadPin>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d103      	bne.n	80022fc <gpio_get_dipswitches+0x24>
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_1_GPIO_Port, DIP_1_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 1;
 80022fc:	2140      	movs	r1, #64	@ 0x40
 80022fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002302:	f001 f84d 	bl	80033a0 <HAL_GPIO_ReadPin>
 8002306:	4603      	mov	r3, r0
 8002308:	2b01      	cmp	r3, #1
 800230a:	d103      	bne.n	8002314 <gpio_get_dipswitches+0x3c>
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	f043 0302 	orr.w	r3, r3, #2
 8002312:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_2_GPIO_Port, DIP_2_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 2;
 8002314:	2120      	movs	r1, #32
 8002316:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800231a:	f001 f841 	bl	80033a0 <HAL_GPIO_ReadPin>
 800231e:	4603      	mov	r3, r0
 8002320:	2b01      	cmp	r3, #1
 8002322:	d103      	bne.n	800232c <gpio_get_dipswitches+0x54>
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	f043 0304 	orr.w	r3, r3, #4
 800232a:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_3_GPIO_Port, DIP_3_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 3;
 800232c:	2110      	movs	r1, #16
 800232e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002332:	f001 f835 	bl	80033a0 <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	2b01      	cmp	r3, #1
 800233a:	d103      	bne.n	8002344 <gpio_get_dipswitches+0x6c>
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	f043 0308 	orr.w	r3, r3, #8
 8002342:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_4_GPIO_Port, DIP_4_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 4;
 8002344:	2108      	movs	r1, #8
 8002346:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800234a:	f001 f829 	bl	80033a0 <HAL_GPIO_ReadPin>
 800234e:	4603      	mov	r3, r0
 8002350:	2b01      	cmp	r3, #1
 8002352:	d103      	bne.n	800235c <gpio_get_dipswitches+0x84>
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f043 0310 	orr.w	r3, r3, #16
 800235a:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_5_GPIO_Port, DIP_5_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 5;
 800235c:	2104      	movs	r1, #4
 800235e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002362:	f001 f81d 	bl	80033a0 <HAL_GPIO_ReadPin>
 8002366:	4603      	mov	r3, r0
 8002368:	2b01      	cmp	r3, #1
 800236a:	d103      	bne.n	8002374 <gpio_get_dipswitches+0x9c>
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	f043 0320 	orr.w	r3, r3, #32
 8002372:	71fb      	strb	r3, [r7, #7]

    return dipswitches;
 8002374:	79fb      	ldrb	r3, [r7, #7]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <power_nuc>:

//--- power_nuc -----------------------------
void    power_nuc(int on)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	if (on) HAL_GPIO_WritePin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin, GPIO_PIN_SET);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <power_nuc+0x1a>
 800238e:	2201      	movs	r2, #1
 8002390:	2140      	movs	r1, #64	@ 0x40
 8002392:	4806      	ldr	r0, [pc, #24]	@ (80023ac <power_nuc+0x2c>)
 8002394:	f001 f81c 	bl	80033d0 <HAL_GPIO_WritePin>
	else 	HAL_GPIO_WritePin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin, GPIO_PIN_RESET);
}
 8002398:	e004      	b.n	80023a4 <power_nuc+0x24>
	else 	HAL_GPIO_WritePin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin, GPIO_PIN_RESET);
 800239a:	2200      	movs	r2, #0
 800239c:	2140      	movs	r1, #64	@ 0x40
 800239e:	4803      	ldr	r0, [pc, #12]	@ (80023ac <power_nuc+0x2c>)
 80023a0:	f001 f816 	bl	80033d0 <HAL_GPIO_WritePin>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	48001400 	.word	0x48001400

080023b0 <power_display>:

//--- power_display -------------------------
void    power_display(int on)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	if (on) HAL_GPIO_WritePin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin, GPIO_PIN_SET);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <power_display+0x1a>
 80023be:	2201      	movs	r2, #1
 80023c0:	2180      	movs	r1, #128	@ 0x80
 80023c2:	4806      	ldr	r0, [pc, #24]	@ (80023dc <power_display+0x2c>)
 80023c4:	f001 f804 	bl	80033d0 <HAL_GPIO_WritePin>
	else 	HAL_GPIO_WritePin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin, GPIO_PIN_RESET);
}
 80023c8:	e004      	b.n	80023d4 <power_display+0x24>
	else 	HAL_GPIO_WritePin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin, GPIO_PIN_RESET);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	4803      	ldr	r0, [pc, #12]	@ (80023dc <power_display+0x2c>)
 80023d0:	f000 fffe 	bl	80033d0 <HAL_GPIO_WritePin>
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	48001400 	.word	0x48001400

080023e0 <_nuc_send_next>:

void _nuc_send_next()
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
	if (_NUC_InIdx!=_NUC_StartIdx && !_NUC_Busy)
 80023e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002460 <_nuc_send_next+0x80>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002464 <_nuc_send_next+0x84>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d031      	beq.n	8002456 <_nuc_send_next+0x76>
 80023f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <_nuc_send_next+0x88>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d12d      	bne.n	8002456 <_nuc_send_next+0x76>
	{
		int time=HAL_GetTick();
 80023fa:	f000 fcc3 	bl	8002d84 <HAL_GetTick>
 80023fe:	4603      	mov	r3, r0
 8002400:	607b      	str	r3, [r7, #4]
		_NUC_Busy = TRUE;
 8002402:	4b19      	ldr	r3, [pc, #100]	@ (8002468 <_nuc_send_next+0x88>)
 8002404:	2201      	movs	r2, #1
 8002406:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, TxDataNuc[_NUC_StartIdx], TxDataLenNuc[_NUC_StartIdx]); // NUC
 8002408:	4b16      	ldr	r3, [pc, #88]	@ (8002464 <_nuc_send_next+0x84>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	025b      	lsls	r3, r3, #9
 800240e:	4a17      	ldr	r2, [pc, #92]	@ (800246c <_nuc_send_next+0x8c>)
 8002410:	1899      	adds	r1, r3, r2
 8002412:	4b14      	ldr	r3, [pc, #80]	@ (8002464 <_nuc_send_next+0x84>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a16      	ldr	r2, [pc, #88]	@ (8002470 <_nuc_send_next+0x90>)
 8002418:	5cd3      	ldrb	r3, [r2, r3]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	4815      	ldr	r0, [pc, #84]	@ (8002474 <_nuc_send_next+0x94>)
 8002420:	f006 fa0c 	bl	800883c <HAL_UART_Transmit_IT>
		_NUC_StartIdx = (_NUC_StartIdx+1) % NUC_FIFO_CNT;
 8002424:	4b0f      	ldr	r3, [pc, #60]	@ (8002464 <_nuc_send_next+0x84>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	3301      	adds	r3, #1
 800242a:	425a      	negs	r2, r3
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	f002 0203 	and.w	r2, r2, #3
 8002434:	bf58      	it	pl
 8002436:	4253      	negpl	r3, r2
 8002438:	4a0a      	ldr	r2, [pc, #40]	@ (8002464 <_nuc_send_next+0x84>)
 800243a:	6013      	str	r3, [r2, #0]
	    time=HAL_GetTick()-time;
 800243c:	f000 fca2 	bl	8002d84 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	607b      	str	r3, [r7, #4]
	    if (time>1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b01      	cmp	r3, #1
 800244c:	dd03      	ble.n	8002456 <_nuc_send_next+0x76>
	    	printf("WARN: UART send time=%d\n", time);
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4809      	ldr	r0, [pc, #36]	@ (8002478 <_nuc_send_next+0x98>)
 8002452:	f00d f865 	bl	800f520 <iprintf>
	}
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000ea8 	.word	0x20000ea8
 8002464:	20000eac 	.word	0x20000eac
 8002468:	20000eb0 	.word	0x20000eb0
 800246c:	200006a4 	.word	0x200006a4
 8002470:	20000ea4 	.word	0x20000ea4
 8002474:	20000618 	.word	0x20000618
 8002478:	080137c8 	.word	0x080137c8

0800247c <HAL_UART_TxCpltCallback>:

//--- HAL_UART_TxCpltCallback ---------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	_NUC_Busy = FALSE;
 8002484:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <HAL_UART_TxCpltCallback+0x1c>)
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
	_nuc_send_next();
 800248a:	f7ff ffa9 	bl	80023e0 <_nuc_send_next>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000eb0 	.word	0x20000eb0

0800249c <_write>:

//--- WRITE_PROTOTYPE ----------------------------------------------------
// Retarget stdout to UART and CDC
WRITE_PROTOTYPE {
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
                }
            }
        }
    }
	*/
	int idx = (_NUC_InIdx+1) % NUC_FIFO_CNT;
 80024a8:	4b14      	ldr	r3, [pc, #80]	@ (80024fc <_write+0x60>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	3301      	adds	r3, #1
 80024ae:	425a      	negs	r2, r3
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	f002 0203 	and.w	r2, r2, #3
 80024b8:	bf58      	it	pl
 80024ba:	4253      	negpl	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024be:	b672      	cpsid	i
}
 80024c0:	bf00      	nop
	__disable_irq();
	TxDataLenNuc[_NUC_InIdx] = len;
 80024c2:	4b0e      	ldr	r3, [pc, #56]	@ (80024fc <_write+0x60>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	b2d1      	uxtb	r1, r2
 80024ca:	4a0d      	ldr	r2, [pc, #52]	@ (8002500 <_write+0x64>)
 80024cc:	54d1      	strb	r1, [r2, r3]
	memcpy(&TxDataNuc[_NUC_InIdx], ptr, len);
 80024ce:	4b0b      	ldr	r3, [pc, #44]	@ (80024fc <_write+0x60>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	025b      	lsls	r3, r3, #9
 80024d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002504 <_write+0x68>)
 80024d6:	4413      	add	r3, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	68b9      	ldr	r1, [r7, #8]
 80024dc:	4618      	mov	r0, r3
 80024de:	f00d fa5a 	bl	800f996 <memcpy>
	_NUC_InIdx = idx;
 80024e2:	4a06      	ldr	r2, [pc, #24]	@ (80024fc <_write+0x60>)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024e8:	b662      	cpsie	i
}
 80024ea:	bf00      	nop
	__enable_irq();

	_nuc_send_next();
 80024ec:	f7ff ff78 	bl	80023e0 <_nuc_send_next>
  //  HAL_UART_Transmit_IT(&huart1, ptr, len); // debugging
    time=HAL_GetTick()-time;
    if (time>0)
    	printf("WARN: UART send time=%d\n", time);
    	*/
    return len; // Return the number of characters written
 80024f0:	687b      	ldr	r3, [r7, #4]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000ea8 	.word	0x20000ea8
 8002500:	20000ea4 	.word	0x20000ea4
 8002504:	200006a4 	.word	0x200006a4

08002508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800250c:	b672      	cpsid	i
}
 800250e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002510:	e7fe      	b.n	8002510 <Error_Handler+0x8>
	...

08002514 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251a:	4b12      	ldr	r3, [pc, #72]	@ (8002564 <HAL_MspInit+0x50>)
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	4a11      	ldr	r2, [pc, #68]	@ (8002564 <HAL_MspInit+0x50>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6193      	str	r3, [r2, #24]
 8002526:	4b0f      	ldr	r3, [pc, #60]	@ (8002564 <HAL_MspInit+0x50>)
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	4b0c      	ldr	r3, [pc, #48]	@ (8002564 <HAL_MspInit+0x50>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	4a0b      	ldr	r2, [pc, #44]	@ (8002564 <HAL_MspInit+0x50>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800253c:	61d3      	str	r3, [r2, #28]
 800253e:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <HAL_MspInit+0x50>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	2100      	movs	r1, #0
 800254e:	2005      	movs	r0, #5
 8002550:	f000 fcff 	bl	8002f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002554:	2005      	movs	r0, #5
 8002556:	f000 fd18 	bl	8002f8a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000

08002568 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	@ 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a17      	ldr	r2, [pc, #92]	@ (80025e4 <HAL_I2C_MspInit+0x7c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d127      	bne.n	80025da <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800258a:	4b17      	ldr	r3, [pc, #92]	@ (80025e8 <HAL_I2C_MspInit+0x80>)
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	4a16      	ldr	r2, [pc, #88]	@ (80025e8 <HAL_I2C_MspInit+0x80>)
 8002590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002594:	6153      	str	r3, [r2, #20]
 8002596:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <HAL_I2C_MspInit+0x80>)
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80025a2:	23c0      	movs	r3, #192	@ 0xc0
 80025a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025a6:	2312      	movs	r3, #18
 80025a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ae:	2303      	movs	r3, #3
 80025b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025b2:	2304      	movs	r3, #4
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b6:	f107 0314 	add.w	r3, r7, #20
 80025ba:	4619      	mov	r1, r3
 80025bc:	480b      	ldr	r0, [pc, #44]	@ (80025ec <HAL_I2C_MspInit+0x84>)
 80025be:	f000 fd75 	bl	80030ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025c2:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <HAL_I2C_MspInit+0x80>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4a08      	ldr	r2, [pc, #32]	@ (80025e8 <HAL_I2C_MspInit+0x80>)
 80025c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025cc:	61d3      	str	r3, [r2, #28]
 80025ce:	4b06      	ldr	r3, [pc, #24]	@ (80025e8 <HAL_I2C_MspInit+0x80>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025da:	bf00      	nop
 80025dc:	3728      	adds	r7, #40	@ 0x28
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40005400 	.word	0x40005400
 80025e8:	40021000 	.word	0x40021000
 80025ec:	48000400 	.word	0x48000400

080025f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002600:	d113      	bne.n	800262a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002602:	4b0c      	ldr	r3, [pc, #48]	@ (8002634 <HAL_TIM_PWM_MspInit+0x44>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	4a0b      	ldr	r2, [pc, #44]	@ (8002634 <HAL_TIM_PWM_MspInit+0x44>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	61d3      	str	r3, [r2, #28]
 800260e:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <HAL_TIM_PWM_MspInit+0x44>)
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	201c      	movs	r0, #28
 8002620:	f000 fc97 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002624:	201c      	movs	r0, #28
 8002626:	f000 fcb0 	bl	8002f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000

08002638 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0d      	ldr	r2, [pc, #52]	@ (800267c <HAL_TIM_Base_MspInit+0x44>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d113      	bne.n	8002672 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800264a:	4b0d      	ldr	r3, [pc, #52]	@ (8002680 <HAL_TIM_Base_MspInit+0x48>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	4a0c      	ldr	r2, [pc, #48]	@ (8002680 <HAL_TIM_Base_MspInit+0x48>)
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	61d3      	str	r3, [r2, #28]
 8002656:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <HAL_TIM_Base_MspInit+0x48>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002662:	2200      	movs	r2, #0
 8002664:	2100      	movs	r1, #0
 8002666:	201d      	movs	r0, #29
 8002668:	f000 fc73 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800266c:	201d      	movs	r0, #29
 800266e:	f000 fc8c 	bl	8002f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40000400 	.word	0x40000400
 8002680:	40021000 	.word	0x40021000

08002684 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	@ 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002710 <HAL_TIM_Encoder_MspInit+0x8c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d130      	bne.n	8002708 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80026a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002714 <HAL_TIM_Encoder_MspInit+0x90>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002714 <HAL_TIM_Encoder_MspInit+0x90>)
 80026ac:	f043 0308 	orr.w	r3, r3, #8
 80026b0:	61d3      	str	r3, [r2, #28]
 80026b2:	4b18      	ldr	r3, [pc, #96]	@ (8002714 <HAL_TIM_Encoder_MspInit+0x90>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026be:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <HAL_TIM_Encoder_MspInit+0x90>)
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	4a14      	ldr	r2, [pc, #80]	@ (8002714 <HAL_TIM_Encoder_MspInit+0x90>)
 80026c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026c8:	6153      	str	r3, [r2, #20]
 80026ca:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <HAL_TIM_Encoder_MspInit+0x90>)
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026d6:	2303      	movs	r3, #3
 80026d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
 80026dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e2:	2300      	movs	r3, #0
 80026e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80026e6:	2302      	movs	r3, #2
 80026e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ea:	f107 0314 	add.w	r3, r7, #20
 80026ee:	4619      	mov	r1, r3
 80026f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026f4:	f000 fcda 	bl	80030ac <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80026f8:	2200      	movs	r2, #0
 80026fa:	2100      	movs	r1, #0
 80026fc:	2032      	movs	r0, #50	@ 0x32
 80026fe:	f000 fc28 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002702:	2032      	movs	r0, #50	@ 0x32
 8002704:	f000 fc41 	bl	8002f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002708:	bf00      	nop
 800270a:	3728      	adds	r7, #40	@ 0x28
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40000c00 	.word	0x40000c00
 8002714:	40021000 	.word	0x40021000

08002718 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08a      	sub	sp, #40	@ 0x28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 0314 	add.w	r3, r7, #20
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002738:	d139      	bne.n	80027ae <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273a:	4b1f      	ldr	r3, [pc, #124]	@ (80027b8 <HAL_TIM_MspPostInit+0xa0>)
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	4a1e      	ldr	r2, [pc, #120]	@ (80027b8 <HAL_TIM_MspPostInit+0xa0>)
 8002740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002744:	6153      	str	r3, [r2, #20]
 8002746:	4b1c      	ldr	r3, [pc, #112]	@ (80027b8 <HAL_TIM_MspPostInit+0xa0>)
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002752:	4b19      	ldr	r3, [pc, #100]	@ (80027b8 <HAL_TIM_MspPostInit+0xa0>)
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	4a18      	ldr	r2, [pc, #96]	@ (80027b8 <HAL_TIM_MspPostInit+0xa0>)
 8002758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800275c:	6153      	str	r3, [r2, #20]
 800275e:	4b16      	ldr	r3, [pc, #88]	@ (80027b8 <HAL_TIM_MspPostInit+0xa0>)
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_OUT_A_Pin;
 800276a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800276e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002770:	2302      	movs	r3, #2
 8002772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002778:	2300      	movs	r3, #0
 800277a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800277c:	2301      	movs	r3, #1
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ENC_OUT_A_GPIO_Port, &GPIO_InitStruct);
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	4619      	mov	r1, r3
 8002786:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800278a:	f000 fc8f 	bl	80030ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_OUT_B_Pin;
 800278e:	2308      	movs	r3, #8
 8002790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002792:	2302      	movs	r3, #2
 8002794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279a:	2300      	movs	r3, #0
 800279c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800279e:	2301      	movs	r3, #1
 80027a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ENC_OUT_B_GPIO_Port, &GPIO_InitStruct);
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	4619      	mov	r1, r3
 80027a8:	4804      	ldr	r0, [pc, #16]	@ (80027bc <HAL_TIM_MspPostInit+0xa4>)
 80027aa:	f000 fc7f 	bl	80030ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80027ae:	bf00      	nop
 80027b0:	3728      	adds	r7, #40	@ 0x28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000
 80027bc:	48000400 	.word	0x48000400

080027c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08c      	sub	sp, #48	@ 0x30
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 031c 	add.w	r3, r7, #28
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a37      	ldr	r2, [pc, #220]	@ (80028bc <HAL_UART_MspInit+0xfc>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d132      	bne.n	8002848 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027e2:	4b37      	ldr	r3, [pc, #220]	@ (80028c0 <HAL_UART_MspInit+0x100>)
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	4a36      	ldr	r2, [pc, #216]	@ (80028c0 <HAL_UART_MspInit+0x100>)
 80027e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027ec:	6193      	str	r3, [r2, #24]
 80027ee:	4b34      	ldr	r3, [pc, #208]	@ (80028c0 <HAL_UART_MspInit+0x100>)
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027f6:	61bb      	str	r3, [r7, #24]
 80027f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	4b31      	ldr	r3, [pc, #196]	@ (80028c0 <HAL_UART_MspInit+0x100>)
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	4a30      	ldr	r2, [pc, #192]	@ (80028c0 <HAL_UART_MspInit+0x100>)
 8002800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002804:	6153      	str	r3, [r2, #20]
 8002806:	4b2e      	ldr	r3, [pc, #184]	@ (80028c0 <HAL_UART_MspInit+0x100>)
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS422_COM_TX_Pin|RS422_COM_RX_Pin;
 8002812:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	2302      	movs	r3, #2
 800281a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002820:	2303      	movs	r3, #3
 8002822:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002824:	2307      	movs	r3, #7
 8002826:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002828:	f107 031c 	add.w	r3, r7, #28
 800282c:	4619      	mov	r1, r3
 800282e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002832:	f000 fc3b 	bl	80030ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	2100      	movs	r1, #0
 800283a:	2025      	movs	r0, #37	@ 0x25
 800283c:	f000 fb89 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002840:	2025      	movs	r0, #37	@ 0x25
 8002842:	f000 fba2 	bl	8002f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002846:	e035      	b.n	80028b4 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1d      	ldr	r2, [pc, #116]	@ (80028c4 <HAL_UART_MspInit+0x104>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d130      	bne.n	80028b4 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002852:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <HAL_UART_MspInit+0x100>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	4a1a      	ldr	r2, [pc, #104]	@ (80028c0 <HAL_UART_MspInit+0x100>)
 8002858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800285c:	61d3      	str	r3, [r2, #28]
 800285e:	4b18      	ldr	r3, [pc, #96]	@ (80028c0 <HAL_UART_MspInit+0x100>)
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286a:	4b15      	ldr	r3, [pc, #84]	@ (80028c0 <HAL_UART_MspInit+0x100>)
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	4a14      	ldr	r2, [pc, #80]	@ (80028c0 <HAL_UART_MspInit+0x100>)
 8002870:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002874:	6153      	str	r3, [r2, #20]
 8002876:	4b12      	ldr	r3, [pc, #72]	@ (80028c0 <HAL_UART_MspInit+0x100>)
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_NUC_TX_Pin|UART_NUC_RX_Pin;
 8002882:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002890:	2303      	movs	r3, #3
 8002892:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002894:	2307      	movs	r3, #7
 8002896:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002898:	f107 031c 	add.w	r3, r7, #28
 800289c:	4619      	mov	r1, r3
 800289e:	480a      	ldr	r0, [pc, #40]	@ (80028c8 <HAL_UART_MspInit+0x108>)
 80028a0:	f000 fc04 	bl	80030ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	2100      	movs	r1, #0
 80028a8:	2027      	movs	r0, #39	@ 0x27
 80028aa:	f000 fb52 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028ae:	2027      	movs	r0, #39	@ 0x27
 80028b0:	f000 fb6b 	bl	8002f8a <HAL_NVIC_EnableIRQ>
}
 80028b4:	bf00      	nop
 80028b6:	3730      	adds	r7, #48	@ 0x30
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40013800 	.word	0x40013800
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40004800 	.word	0x40004800
 80028c8:	48000400 	.word	0x48000400

080028cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80028d0:	e7fe      	b.n	80028d0 <NMI_Handler+0x4>

080028d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d6:	e7fe      	b.n	80028d6 <HardFault_Handler+0x4>

080028d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028dc:	e7fe      	b.n	80028dc <MemManage_Handler+0x4>

080028de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028e2:	e7fe      	b.n	80028e2 <BusFault_Handler+0x4>

080028e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <UsageFault_Handler+0x4>

080028ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002918:	f000 fa20 	bl	8002d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}

08002920 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002934:	4802      	ldr	r0, [pc, #8]	@ (8002940 <TIM2_IRQHandler+0x10>)
 8002936:	f005 f8bf 	bl	8007ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200004ac 	.word	0x200004ac

08002944 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002948:	4802      	ldr	r0, [pc, #8]	@ (8002954 <TIM3_IRQHandler+0x10>)
 800294a:	f005 f8b5 	bl	8007ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	200004f8 	.word	0x200004f8

08002958 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800295c:	4802      	ldr	r0, [pc, #8]	@ (8002968 <USART1_IRQHandler+0x10>)
 800295e:	f006 f80f 	bl	8008980 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000590 	.word	0x20000590

0800296c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002970:	4802      	ldr	r0, [pc, #8]	@ (800297c <USART3_IRQHandler+0x10>)
 8002972:	f006 f805 	bl	8008980 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000618 	.word	0x20000618

08002980 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002984:	4802      	ldr	r0, [pc, #8]	@ (8002990 <TIM5_IRQHandler+0x10>)
 8002986:	f005 f897 	bl	8007ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000544 	.word	0x20000544

08002994 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority global interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002998:	4802      	ldr	r0, [pc, #8]	@ (80029a4 <USB_HP_IRQHandler+0x10>)
 800299a:	f001 fbcc 	bl	8004136 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20001c08 	.word	0x20001c08

080029a8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority global interrupt.
  */
void USB_LP_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80029ac:	4802      	ldr	r0, [pc, #8]	@ (80029b8 <USB_LP_IRQHandler+0x10>)
 80029ae:	f001 fbc2 	bl	8004136 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20001c08 	.word	0x20001c08

080029bc <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
	return 1;
 80029c0:	2301      	movs	r3, #1
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <_kill>:

int _kill(int pid, int sig) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80029d6:	f00c ffb1 	bl	800f93c <__errno>
 80029da:	4603      	mov	r3, r0
 80029dc:	2216      	movs	r2, #22
 80029de:	601a      	str	r2, [r3, #0]
	return -1;
 80029e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <_exit>:

void _exit(int status) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029f4:	f04f 31ff 	mov.w	r1, #4294967295
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff ffe7 	bl	80029cc <_kill>
	while (1) {
 80029fe:	e7fe      	b.n	80029fe <_exit+0x12>

08002a00 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	e00a      	b.n	8002a28 <_read+0x28>
		*ptr++ = __io_getchar();
 8002a12:	f3af 8000 	nop.w
 8002a16:	4601      	mov	r1, r0
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	60ba      	str	r2, [r7, #8]
 8002a1e:	b2ca      	uxtb	r2, r1
 8002a20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3301      	adds	r3, #1
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	dbf0      	blt.n	8002a12 <_read+0x12>
	}

	return len;
 8002a30:	687b      	ldr	r3, [r7, #4]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a62:	605a      	str	r2, [r3, #4]
	return 0;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <_isatty>:

int _isatty(int file) {
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002a7a:	2301      	movs	r3, #1
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002aac:	4a14      	ldr	r2, [pc, #80]	@ (8002b00 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002aae:	4b15      	ldr	r3, [pc, #84]	@ (8002b04 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002ab8:	4b13      	ldr	r3, [pc, #76]	@ (8002b08 <_sbrk+0x64>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d102      	bne.n	8002ac6 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002ac0:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <_sbrk+0x64>)
 8002ac2:	4a12      	ldr	r2, [pc, #72]	@ (8002b0c <_sbrk+0x68>)
 8002ac4:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002ac6:	4b10      	ldr	r3, [pc, #64]	@ (8002b08 <_sbrk+0x64>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d207      	bcs.n	8002ae4 <_sbrk+0x40>
		errno = ENOMEM;
 8002ad4:	f00c ff32 	bl	800f93c <__errno>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	220c      	movs	r2, #12
 8002adc:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae2:	e009      	b.n	8002af8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002ae4:	4b08      	ldr	r3, [pc, #32]	@ (8002b08 <_sbrk+0x64>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002aea:	4b07      	ldr	r3, [pc, #28]	@ (8002b08 <_sbrk+0x64>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4413      	add	r3, r2
 8002af2:	4a05      	ldr	r2, [pc, #20]	@ (8002b08 <_sbrk+0x64>)
 8002af4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002af6:	68fb      	ldr	r3, [r7, #12]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20008000 	.word	0x20008000
 8002b04:	00000400 	.word	0x00000400
 8002b08:	20000eb4 	.word	0x20000eb4
 8002b0c:	20002260 	.word	0x20002260

08002b10 <SystemInit>:
/**
 * @brief  Setup the microcontroller system
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
	/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002b14:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <SystemInit+0x20>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1a:	4a05      	ldr	r2, [pc, #20]	@ (8002b30 <SystemInit+0x20>)
 8002b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <term_init>:
static char _Input[128];
static int	_InputLen=0;

//--- terminal_init --------------------------------
void term_init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
	memset(_Input, 0, sizeof(_Input));
 8002b38:	2280      	movs	r2, #128	@ 0x80
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4802      	ldr	r0, [pc, #8]	@ (8002b48 <term_init+0x14>)
 8002b3e:	f00c fe83 	bl	800f848 <memset>
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000eb8 	.word	0x20000eb8

08002b4c <term_handle_char>:
//--- term_handle_char -------------------------
void term_handle_char(char ch)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
	if (_InputLen<sizeof(_Input)) _Input[_InputLen++] = ch;
 8002b56:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <term_handle_char+0x38>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b5c:	d808      	bhi.n	8002b70 <term_handle_char+0x24>
 8002b5e:	4b09      	ldr	r3, [pc, #36]	@ (8002b84 <term_handle_char+0x38>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	4907      	ldr	r1, [pc, #28]	@ (8002b84 <term_handle_char+0x38>)
 8002b66:	600a      	str	r2, [r1, #0]
 8002b68:	4907      	ldr	r1, [pc, #28]	@ (8002b88 <term_handle_char+0x3c>)
 8002b6a:	79fa      	ldrb	r2, [r7, #7]
 8002b6c:	54ca      	strb	r2, [r1, r3]
	else _InputLen=0;
//	putchar(ch);
}
 8002b6e:	e002      	b.n	8002b76 <term_handle_char+0x2a>
	else _InputLen=0;
 8002b70:	4b04      	ldr	r3, [pc, #16]	@ (8002b84 <term_handle_char+0x38>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000f38 	.word	0x20000f38
 8002b88:	20000eb8 	.word	0x20000eb8

08002b8c <term_idle>:

//--- term_idle -------------------------------
void term_idle(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
    if (_InputLen>1 && (_Input[_InputLen-1]=='\r' || _Input[_InputLen-1]=='\n'))
 8002b92:	4b32      	ldr	r3, [pc, #200]	@ (8002c5c <term_idle+0xd0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	dd5b      	ble.n	8002c52 <term_idle+0xc6>
 8002b9a:	4b30      	ldr	r3, [pc, #192]	@ (8002c5c <term_idle+0xd0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8002c60 <term_idle+0xd4>)
 8002ba2:	5cd3      	ldrb	r3, [r2, r3]
 8002ba4:	2b0d      	cmp	r3, #13
 8002ba6:	d006      	beq.n	8002bb6 <term_idle+0x2a>
 8002ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8002c5c <term_idle+0xd0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3b01      	subs	r3, #1
 8002bae:	4a2c      	ldr	r2, [pc, #176]	@ (8002c60 <term_idle+0xd4>)
 8002bb0:	5cd3      	ldrb	r3, [r2, r3]
 8002bb2:	2b0a      	cmp	r3, #10
 8002bb4:	d14d      	bne.n	8002c52 <term_idle+0xc6>
    {
    	char *args;
    //	printf("TERM: >>%s<<\n", _Input);
    	if (strstart(_Input, "status")) 		  		box_send_status();
 8002bb6:	492b      	ldr	r1, [pc, #172]	@ (8002c64 <term_idle+0xd8>)
 8002bb8:	4829      	ldr	r0, [pc, #164]	@ (8002c60 <term_idle+0xd4>)
 8002bba:	f7fe ff1f 	bl	80019fc <strstart>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <term_idle+0x3e>
 8002bc4:	f7fe fc9a 	bl	80014fc <box_send_status>
 8002bc8:	e03b      	b.n	8002c42 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "encoder"))) 	enc_command(args);
 8002bca:	4927      	ldr	r1, [pc, #156]	@ (8002c68 <term_idle+0xdc>)
 8002bcc:	4824      	ldr	r0, [pc, #144]	@ (8002c60 <term_idle+0xd4>)
 8002bce:	f7fe ff15 	bl	80019fc <strstart>
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <term_idle+0x56>
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fe fd84 	bl	80016e8 <enc_command>
 8002be0:	e02f      	b.n	8002c42 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "start"))) 		box_start();
 8002be2:	4922      	ldr	r1, [pc, #136]	@ (8002c6c <term_idle+0xe0>)
 8002be4:	481e      	ldr	r0, [pc, #120]	@ (8002c60 <term_idle+0xd4>)
 8002be6:	f7fe ff09 	bl	80019fc <strstart>
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <term_idle+0x6c>
 8002bf2:	f7fe f96d 	bl	8000ed0 <box_start>
 8002bf6:	e024      	b.n	8002c42 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "stop"))) 		box_stop();
 8002bf8:	491d      	ldr	r1, [pc, #116]	@ (8002c70 <term_idle+0xe4>)
 8002bfa:	4819      	ldr	r0, [pc, #100]	@ (8002c60 <term_idle+0xd4>)
 8002bfc:	f7fe fefe 	bl	80019fc <strstart>
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <term_idle+0x82>
 8002c08:	f7fe f9b2 	bl	8000f70 <box_stop>
 8002c0c:	e019      	b.n	8002c42 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "pgDelay"))) 	box_set_pgDelay(atoi(args));
 8002c0e:	4919      	ldr	r1, [pc, #100]	@ (8002c74 <term_idle+0xe8>)
 8002c10:	4813      	ldr	r0, [pc, #76]	@ (8002c60 <term_idle+0xd4>)
 8002c12:	f7fe fef3 	bl	80019fc <strstart>
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d007      	beq.n	8002c2e <term_idle+0xa2>
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f00b fc06 	bl	800e430 <atoi>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe f93e 	bl	8000ea8 <box_set_pgDelay>
 8002c2c:	e009      	b.n	8002c42 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "pg"))) 		box_printGo();
 8002c2e:	4912      	ldr	r1, [pc, #72]	@ (8002c78 <term_idle+0xec>)
 8002c30:	480b      	ldr	r0, [pc, #44]	@ (8002c60 <term_idle+0xd4>)
 8002c32:	f7fe fee3 	bl	80019fc <strstart>
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <term_idle+0xb6>
 8002c3e:	f7fe fbdb 	bl	80013f8 <box_printGo>

    	memset(_Input, 0, sizeof(_Input));
 8002c42:	2280      	movs	r2, #128	@ 0x80
 8002c44:	2100      	movs	r1, #0
 8002c46:	4806      	ldr	r0, [pc, #24]	@ (8002c60 <term_idle+0xd4>)
 8002c48:	f00c fdfe 	bl	800f848 <memset>
    	_InputLen=0;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	@ (8002c5c <term_idle+0xd0>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
    }
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000f38 	.word	0x20000f38
 8002c60:	20000eb8 	.word	0x20000eb8
 8002c64:	080137e4 	.word	0x080137e4
 8002c68:	080137ec 	.word	0x080137ec
 8002c6c:	080137f4 	.word	0x080137f4
 8002c70:	080137fc 	.word	0x080137fc
 8002c74:	08013804 	.word	0x08013804
 8002c78:	0801380c 	.word	0x0801380c

08002c7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cb4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c80:	f7ff ff46 	bl	8002b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c84:	480c      	ldr	r0, [pc, #48]	@ (8002cb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c86:	490d      	ldr	r1, [pc, #52]	@ (8002cbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c88:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc0 <LoopForever+0xe>)
  movs r3, #0
 8002c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c8c:	e002      	b.n	8002c94 <LoopCopyDataInit>

08002c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c92:	3304      	adds	r3, #4

08002c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c98:	d3f9      	bcc.n	8002c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8002cc8 <LoopForever+0x16>)
  movs r3, #0
 8002c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca0:	e001      	b.n	8002ca6 <LoopFillZerobss>

08002ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca4:	3204      	adds	r2, #4

08002ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca8:	d3fb      	bcc.n	8002ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002caa:	f00c fe4d 	bl	800f948 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cae:	f7fe ff01 	bl	8001ab4 <main>

08002cb2 <LoopForever>:

LoopForever:
    b LoopForever
 8002cb2:	e7fe      	b.n	8002cb2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002cb4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cbc:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8002cc0:	08013cf8 	.word	0x08013cf8
  ldr r2, =_sbss
 8002cc4:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8002cc8:	20002260 	.word	0x20002260

08002ccc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ccc:	e7fe      	b.n	8002ccc <ADC1_IRQHandler>
	...

08002cd0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cd4:	4b08      	ldr	r3, [pc, #32]	@ (8002cf8 <HAL_Init+0x28>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a07      	ldr	r2, [pc, #28]	@ (8002cf8 <HAL_Init+0x28>)
 8002cda:	f043 0310 	orr.w	r3, r3, #16
 8002cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce0:	2003      	movs	r0, #3
 8002ce2:	f000 f92b 	bl	8002f3c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ce6:	200f      	movs	r0, #15
 8002ce8:	f000 f808 	bl	8002cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cec:	f7ff fc12 	bl	8002514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40022000 	.word	0x40022000

08002cfc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d04:	4b12      	ldr	r3, [pc, #72]	@ (8002d50 <HAL_InitTick+0x54>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b12      	ldr	r3, [pc, #72]	@ (8002d54 <HAL_InitTick+0x58>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f943 	bl	8002fa6 <HAL_SYSTICK_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00e      	b.n	8002d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b0f      	cmp	r3, #15
 8002d2e:	d80a      	bhi.n	8002d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d30:	2200      	movs	r2, #0
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295
 8002d38:	f000 f90b 	bl	8002f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d3c:	4a06      	ldr	r2, [pc, #24]	@ (8002d58 <HAL_InitTick+0x5c>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e000      	b.n	8002d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20000010 	.word	0x20000010
 8002d54:	20000018 	.word	0x20000018
 8002d58:	20000014 	.word	0x20000014

08002d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d60:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <HAL_IncTick+0x20>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <HAL_IncTick+0x24>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4a04      	ldr	r2, [pc, #16]	@ (8002d80 <HAL_IncTick+0x24>)
 8002d6e:	6013      	str	r3, [r2, #0]
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000018 	.word	0x20000018
 8002d80:	20000f3c 	.word	0x20000f3c

08002d84 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return uwTick;  
 8002d88:	4b03      	ldr	r3, [pc, #12]	@ (8002d98 <HAL_GetTick+0x14>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	20000f3c 	.word	0x20000f3c

08002d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dac:	4b0c      	ldr	r3, [pc, #48]	@ (8002de0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002db8:	4013      	ands	r3, r2
 8002dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dce:	4a04      	ldr	r2, [pc, #16]	@ (8002de0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	60d3      	str	r3, [r2, #12]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de8:	4b04      	ldr	r3, [pc, #16]	@ (8002dfc <__NVIC_GetPriorityGrouping+0x18>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	0a1b      	lsrs	r3, r3, #8
 8002dee:	f003 0307 	and.w	r3, r3, #7
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	db0b      	blt.n	8002e2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	f003 021f 	and.w	r2, r3, #31
 8002e18:	4907      	ldr	r1, [pc, #28]	@ (8002e38 <__NVIC_EnableIRQ+0x38>)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2001      	movs	r0, #1
 8002e22:	fa00 f202 	lsl.w	r2, r0, r2
 8002e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e000e100 	.word	0xe000e100

08002e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	6039      	str	r1, [r7, #0]
 8002e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	db0a      	blt.n	8002e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	490c      	ldr	r1, [pc, #48]	@ (8002e88 <__NVIC_SetPriority+0x4c>)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	0112      	lsls	r2, r2, #4
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	440b      	add	r3, r1
 8002e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e64:	e00a      	b.n	8002e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4908      	ldr	r1, [pc, #32]	@ (8002e8c <__NVIC_SetPriority+0x50>)
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	3b04      	subs	r3, #4
 8002e74:	0112      	lsls	r2, r2, #4
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	440b      	add	r3, r1
 8002e7a:	761a      	strb	r2, [r3, #24]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000e100 	.word	0xe000e100
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b089      	sub	sp, #36	@ 0x24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f1c3 0307 	rsb	r3, r3, #7
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	bf28      	it	cs
 8002eae:	2304      	movcs	r3, #4
 8002eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	2b06      	cmp	r3, #6
 8002eb8:	d902      	bls.n	8002ec0 <NVIC_EncodePriority+0x30>
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3b03      	subs	r3, #3
 8002ebe:	e000      	b.n	8002ec2 <NVIC_EncodePriority+0x32>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43d9      	mvns	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	4313      	orrs	r3, r2
         );
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3724      	adds	r7, #36	@ 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f08:	d301      	bcc.n	8002f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00f      	b.n	8002f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f38 <SysTick_Config+0x40>)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f16:	210f      	movs	r1, #15
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1c:	f7ff ff8e 	bl	8002e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f20:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <SysTick_Config+0x40>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f26:	4b04      	ldr	r3, [pc, #16]	@ (8002f38 <SysTick_Config+0x40>)
 8002f28:	2207      	movs	r2, #7
 8002f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	e000e010 	.word	0xe000e010

08002f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ff29 	bl	8002d9c <__NVIC_SetPriorityGrouping>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f64:	f7ff ff3e 	bl	8002de4 <__NVIC_GetPriorityGrouping>
 8002f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	6978      	ldr	r0, [r7, #20]
 8002f70:	f7ff ff8e 	bl	8002e90 <NVIC_EncodePriority>
 8002f74:	4602      	mov	r2, r0
 8002f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff5d 	bl	8002e3c <__NVIC_SetPriority>
}
 8002f82:	bf00      	nop
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	4603      	mov	r3, r0
 8002f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff31 	bl	8002e00 <__NVIC_EnableIRQ>
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff ffa2 	bl	8002ef8 <SysTick_Config>
 8002fb4:	4603      	mov	r3, r0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d008      	beq.n	8002fe2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e020      	b.n	8003024 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 020e 	bic.w	r2, r2, #14
 8002ff0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0201 	bic.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300a:	2101      	movs	r1, #1
 800300c:	fa01 f202 	lsl.w	r2, r1, r2
 8003010:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003042:	2b02      	cmp	r3, #2
 8003044:	d005      	beq.n	8003052 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2204      	movs	r2, #4
 800304a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
 8003050:	e027      	b.n	80030a2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 020e 	bic.w	r2, r2, #14
 8003060:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0201 	bic.w	r2, r2, #1
 8003070:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307a:	2101      	movs	r1, #1
 800307c:	fa01 f202 	lsl.w	r2, r1, r2
 8003080:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
    } 
  }
  return status;
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ba:	e154      	b.n	8003366 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	2101      	movs	r1, #1
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	4013      	ands	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8146 	beq.w	8003360 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d005      	beq.n	80030ec <HAL_GPIO_Init+0x40>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d130      	bne.n	800314e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2203      	movs	r2, #3
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003122:	2201      	movs	r2, #1
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4013      	ands	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	091b      	lsrs	r3, r3, #4
 8003138:	f003 0201 	and.w	r2, r3, #1
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b03      	cmp	r3, #3
 8003158:	d017      	beq.n	800318a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	2203      	movs	r2, #3
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4013      	ands	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d123      	bne.n	80031de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	08da      	lsrs	r2, r3, #3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3208      	adds	r2, #8
 800319e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	220f      	movs	r2, #15
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4013      	ands	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	08da      	lsrs	r2, r3, #3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3208      	adds	r2, #8
 80031d8:	6939      	ldr	r1, [r7, #16]
 80031da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	2203      	movs	r2, #3
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4013      	ands	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0203 	and.w	r2, r3, #3
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 80a0 	beq.w	8003360 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003220:	4b58      	ldr	r3, [pc, #352]	@ (8003384 <HAL_GPIO_Init+0x2d8>)
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	4a57      	ldr	r2, [pc, #348]	@ (8003384 <HAL_GPIO_Init+0x2d8>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6193      	str	r3, [r2, #24]
 800322c:	4b55      	ldr	r3, [pc, #340]	@ (8003384 <HAL_GPIO_Init+0x2d8>)
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003238:	4a53      	ldr	r2, [pc, #332]	@ (8003388 <HAL_GPIO_Init+0x2dc>)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	3302      	adds	r3, #2
 8003240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003244:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	220f      	movs	r2, #15
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4013      	ands	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003262:	d019      	beq.n	8003298 <HAL_GPIO_Init+0x1ec>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a49      	ldr	r2, [pc, #292]	@ (800338c <HAL_GPIO_Init+0x2e0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d013      	beq.n	8003294 <HAL_GPIO_Init+0x1e8>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a48      	ldr	r2, [pc, #288]	@ (8003390 <HAL_GPIO_Init+0x2e4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00d      	beq.n	8003290 <HAL_GPIO_Init+0x1e4>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a47      	ldr	r2, [pc, #284]	@ (8003394 <HAL_GPIO_Init+0x2e8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d007      	beq.n	800328c <HAL_GPIO_Init+0x1e0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a46      	ldr	r2, [pc, #280]	@ (8003398 <HAL_GPIO_Init+0x2ec>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d101      	bne.n	8003288 <HAL_GPIO_Init+0x1dc>
 8003284:	2304      	movs	r3, #4
 8003286:	e008      	b.n	800329a <HAL_GPIO_Init+0x1ee>
 8003288:	2305      	movs	r3, #5
 800328a:	e006      	b.n	800329a <HAL_GPIO_Init+0x1ee>
 800328c:	2303      	movs	r3, #3
 800328e:	e004      	b.n	800329a <HAL_GPIO_Init+0x1ee>
 8003290:	2302      	movs	r3, #2
 8003292:	e002      	b.n	800329a <HAL_GPIO_Init+0x1ee>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <HAL_GPIO_Init+0x1ee>
 8003298:	2300      	movs	r3, #0
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	f002 0203 	and.w	r2, r2, #3
 80032a0:	0092      	lsls	r2, r2, #2
 80032a2:	4093      	lsls	r3, r2
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032aa:	4937      	ldr	r1, [pc, #220]	@ (8003388 <HAL_GPIO_Init+0x2dc>)
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	089b      	lsrs	r3, r3, #2
 80032b0:	3302      	adds	r3, #2
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032b8:	4b38      	ldr	r3, [pc, #224]	@ (800339c <HAL_GPIO_Init+0x2f0>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4013      	ands	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032dc:	4a2f      	ldr	r2, [pc, #188]	@ (800339c <HAL_GPIO_Init+0x2f0>)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032e2:	4b2e      	ldr	r3, [pc, #184]	@ (800339c <HAL_GPIO_Init+0x2f0>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4013      	ands	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003306:	4a25      	ldr	r2, [pc, #148]	@ (800339c <HAL_GPIO_Init+0x2f0>)
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800330c:	4b23      	ldr	r3, [pc, #140]	@ (800339c <HAL_GPIO_Init+0x2f0>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	43db      	mvns	r3, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003330:	4a1a      	ldr	r2, [pc, #104]	@ (800339c <HAL_GPIO_Init+0x2f0>)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003336:	4b19      	ldr	r3, [pc, #100]	@ (800339c <HAL_GPIO_Init+0x2f0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	43db      	mvns	r3, r3
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4013      	ands	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800335a:	4a10      	ldr	r2, [pc, #64]	@ (800339c <HAL_GPIO_Init+0x2f0>)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	3301      	adds	r3, #1
 8003364:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	f47f aea3 	bne.w	80030bc <HAL_GPIO_Init+0x10>
  }
}
 8003376:	bf00      	nop
 8003378:	bf00      	nop
 800337a:	371c      	adds	r7, #28
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	40021000 	.word	0x40021000
 8003388:	40010000 	.word	0x40010000
 800338c:	48000400 	.word	0x48000400
 8003390:	48000800 	.word	0x48000800
 8003394:	48000c00 	.word	0x48000c00
 8003398:	48001000 	.word	0x48001000
 800339c:	40010400 	.word	0x40010400

080033a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	887b      	ldrh	r3, [r7, #2]
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
 80033bc:	e001      	b.n	80033c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033be:	2300      	movs	r3, #0
 80033c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	807b      	strh	r3, [r7, #2]
 80033dc:	4613      	mov	r3, r2
 80033de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033e0:	787b      	ldrb	r3, [r7, #1]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033e6:	887a      	ldrh	r2, [r7, #2]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033ec:	e002      	b.n	80033f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e081      	b.n	8003516 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff f89e 	bl	8002568 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2224      	movs	r2, #36	@ 0x24
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0201 	bic.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003450:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003460:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d107      	bne.n	800347a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	e006      	b.n	8003488 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003486:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d104      	bne.n	800349a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003498:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69d9      	ldr	r1, [r3, #28]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1a      	ldr	r2, [r3, #32]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	461a      	mov	r2, r3
 800352c:	460b      	mov	r3, r1
 800352e:	817b      	strh	r3, [r7, #10]
 8003530:	4613      	mov	r3, r2
 8003532:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b20      	cmp	r3, #32
 800353e:	f040 80da 	bne.w	80036f6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_I2C_Master_Transmit+0x30>
 800354c:	2302      	movs	r3, #2
 800354e:	e0d3      	b.n	80036f8 <HAL_I2C_Master_Transmit+0x1d8>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003558:	f7ff fc14 	bl	8002d84 <HAL_GetTick>
 800355c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	2319      	movs	r3, #25
 8003564:	2201      	movs	r2, #1
 8003566:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f9e6 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e0be      	b.n	80036f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2221      	movs	r2, #33	@ 0x21
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2210      	movs	r2, #16
 8003586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	893a      	ldrh	r2, [r7, #8]
 800359a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2bff      	cmp	r3, #255	@ 0xff
 80035aa:	d90e      	bls.n	80035ca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	22ff      	movs	r2, #255	@ 0xff
 80035b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	8979      	ldrh	r1, [r7, #10]
 80035ba:	4b51      	ldr	r3, [pc, #324]	@ (8003700 <HAL_I2C_Master_Transmit+0x1e0>)
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 fbf6 	bl	8003db4 <I2C_TransferConfig>
 80035c8:	e06c      	b.n	80036a4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	8979      	ldrh	r1, [r7, #10]
 80035dc:	4b48      	ldr	r3, [pc, #288]	@ (8003700 <HAL_I2C_Master_Transmit+0x1e0>)
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fbe5 	bl	8003db4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80035ea:	e05b      	b.n	80036a4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	6a39      	ldr	r1, [r7, #32]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f9f2 	bl	80039da <I2C_WaitOnTXISFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e07b      	b.n	80036f8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d034      	beq.n	80036a4 <HAL_I2C_Master_Transmit+0x184>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363e:	2b00      	cmp	r3, #0
 8003640:	d130      	bne.n	80036a4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	2200      	movs	r2, #0
 800364a:	2180      	movs	r1, #128	@ 0x80
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f975 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e04d      	b.n	80036f8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003660:	b29b      	uxth	r3, r3
 8003662:	2bff      	cmp	r3, #255	@ 0xff
 8003664:	d90e      	bls.n	8003684 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	22ff      	movs	r2, #255	@ 0xff
 800366a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003670:	b2da      	uxtb	r2, r3
 8003672:	8979      	ldrh	r1, [r7, #10]
 8003674:	2300      	movs	r3, #0
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 fb99 	bl	8003db4 <I2C_TransferConfig>
 8003682:	e00f      	b.n	80036a4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003692:	b2da      	uxtb	r2, r3
 8003694:	8979      	ldrh	r1, [r7, #10]
 8003696:	2300      	movs	r3, #0
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fb88 	bl	8003db4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d19e      	bne.n	80035ec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	6a39      	ldr	r1, [r7, #32]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f9d8 	bl	8003a68 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e01a      	b.n	80036f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2220      	movs	r2, #32
 80036c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6859      	ldr	r1, [r3, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003704 <HAL_I2C_Master_Transmit+0x1e4>)
 80036d6:	400b      	ands	r3, r1
 80036d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	e000      	b.n	80036f8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80036f6:	2302      	movs	r3, #2
  }
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	80002000 	.word	0x80002000
 8003704:	fe00e800 	.word	0xfe00e800

08003708 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af02      	add	r7, sp, #8
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	461a      	mov	r2, r3
 8003714:	460b      	mov	r3, r1
 8003716:	817b      	strh	r3, [r7, #10]
 8003718:	4613      	mov	r3, r2
 800371a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b20      	cmp	r3, #32
 8003726:	f040 80db 	bne.w	80038e0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <HAL_I2C_Master_Receive+0x30>
 8003734:	2302      	movs	r3, #2
 8003736:	e0d4      	b.n	80038e2 <HAL_I2C_Master_Receive+0x1da>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003740:	f7ff fb20 	bl	8002d84 <HAL_GetTick>
 8003744:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2319      	movs	r3, #25
 800374c:	2201      	movs	r2, #1
 800374e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f8f2 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e0bf      	b.n	80038e2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2222      	movs	r2, #34	@ 0x22
 8003766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2210      	movs	r2, #16
 800376e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	893a      	ldrh	r2, [r7, #8]
 8003782:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	2bff      	cmp	r3, #255	@ 0xff
 8003792:	d90e      	bls.n	80037b2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	22ff      	movs	r2, #255	@ 0xff
 8003798:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	8979      	ldrh	r1, [r7, #10]
 80037a2:	4b52      	ldr	r3, [pc, #328]	@ (80038ec <HAL_I2C_Master_Receive+0x1e4>)
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fb02 	bl	8003db4 <I2C_TransferConfig>
 80037b0:	e06d      	b.n	800388e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	8979      	ldrh	r1, [r7, #10]
 80037c4:	4b49      	ldr	r3, [pc, #292]	@ (80038ec <HAL_I2C_Master_Receive+0x1e4>)
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 faf1 	bl	8003db4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80037d2:	e05c      	b.n	800388e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	6a39      	ldr	r1, [r7, #32]
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f989 	bl	8003af0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e07c      	b.n	80038e2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381e:	b29b      	uxth	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d034      	beq.n	800388e <HAL_I2C_Master_Receive+0x186>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003828:	2b00      	cmp	r3, #0
 800382a:	d130      	bne.n	800388e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	2200      	movs	r2, #0
 8003834:	2180      	movs	r1, #128	@ 0x80
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f880 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e04d      	b.n	80038e2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384a:	b29b      	uxth	r3, r3
 800384c:	2bff      	cmp	r3, #255	@ 0xff
 800384e:	d90e      	bls.n	800386e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	22ff      	movs	r2, #255	@ 0xff
 8003854:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385a:	b2da      	uxtb	r2, r3
 800385c:	8979      	ldrh	r1, [r7, #10]
 800385e:	2300      	movs	r3, #0
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 faa4 	bl	8003db4 <I2C_TransferConfig>
 800386c:	e00f      	b.n	800388e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387c:	b2da      	uxtb	r2, r3
 800387e:	8979      	ldrh	r1, [r7, #10]
 8003880:	2300      	movs	r3, #0
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 fa93 	bl	8003db4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d19d      	bne.n	80037d4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	6a39      	ldr	r1, [r7, #32]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f8e3 	bl	8003a68 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e01a      	b.n	80038e2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2220      	movs	r2, #32
 80038b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6859      	ldr	r1, [r3, #4]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	4b0c      	ldr	r3, [pc, #48]	@ (80038f0 <HAL_I2C_Master_Receive+0x1e8>)
 80038c0:	400b      	ands	r3, r1
 80038c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	e000      	b.n	80038e2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
  }
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	80002400 	.word	0x80002400
 80038f0:	fe00e800 	.word	0xfe00e800

080038f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b02      	cmp	r3, #2
 8003908:	d103      	bne.n	8003912 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2200      	movs	r2, #0
 8003910:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b01      	cmp	r3, #1
 800391e:	d007      	beq.n	8003930 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	619a      	str	r2, [r3, #24]
  }
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800394c:	e031      	b.n	80039b2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d02d      	beq.n	80039b2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003956:	f7ff fa15 	bl	8002d84 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d302      	bcc.n	800396c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d122      	bne.n	80039b2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	4013      	ands	r3, r2
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	429a      	cmp	r2, r3
 800397a:	bf0c      	ite	eq
 800397c:	2301      	moveq	r3, #1
 800397e:	2300      	movne	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	461a      	mov	r2, r3
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	429a      	cmp	r2, r3
 8003988:	d113      	bne.n	80039b2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398e:	f043 0220 	orr.w	r2, r3, #32
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e00f      	b.n	80039d2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699a      	ldr	r2, [r3, #24]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4013      	ands	r3, r2
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	429a      	cmp	r2, r3
 80039c0:	bf0c      	ite	eq
 80039c2:	2301      	moveq	r3, #1
 80039c4:	2300      	movne	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d0be      	beq.n	800394e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039e6:	e033      	b.n	8003a50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 f901 	bl	8003bf4 <I2C_IsErrorOccurred>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e031      	b.n	8003a60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a02:	d025      	beq.n	8003a50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a04:	f7ff f9be 	bl	8002d84 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d302      	bcc.n	8003a1a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d11a      	bne.n	8003a50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d013      	beq.n	8003a50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2c:	f043 0220 	orr.w	r2, r3, #32
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e007      	b.n	8003a60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d1c4      	bne.n	80039e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a74:	e02f      	b.n	8003ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f8ba 	bl	8003bf4 <I2C_IsErrorOccurred>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e02d      	b.n	8003ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8a:	f7ff f97b 	bl	8002d84 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d302      	bcc.n	8003aa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d11a      	bne.n	8003ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d013      	beq.n	8003ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab2:	f043 0220 	orr.w	r2, r3, #32
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e007      	b.n	8003ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	f003 0320 	and.w	r3, r3, #32
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	d1c8      	bne.n	8003a76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003afc:	e06b      	b.n	8003bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f876 	bl	8003bf4 <I2C_IsErrorOccurred>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e069      	b.n	8003be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d138      	bne.n	8003b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d105      	bne.n	8003b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	e055      	b.n	8003be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d107      	bne.n	8003b58 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2210      	movs	r2, #16
 8003b4e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2204      	movs	r2, #4
 8003b54:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b56:	e002      	b.n	8003b5e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2220      	movs	r2, #32
 8003b64:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6859      	ldr	r1, [r3, #4]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b1f      	ldr	r3, [pc, #124]	@ (8003bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003b72:	400b      	ands	r3, r1
 8003b74:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e029      	b.n	8003be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b92:	f7ff f8f7 	bl	8002d84 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d302      	bcc.n	8003ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d116      	bne.n	8003bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d00f      	beq.n	8003bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bba:	f043 0220 	orr.w	r2, r3, #32
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e007      	b.n	8003be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d18c      	bne.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	fe00e800 	.word	0xfe00e800

08003bf4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08a      	sub	sp, #40	@ 0x28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d068      	beq.n	8003cf2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2210      	movs	r2, #16
 8003c26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c28:	e049      	b.n	8003cbe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d045      	beq.n	8003cbe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c32:	f7ff f8a7 	bl	8002d84 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d302      	bcc.n	8003c48 <I2C_IsErrorOccurred+0x54>
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d13a      	bne.n	8003cbe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c6a:	d121      	bne.n	8003cb0 <I2C_IsErrorOccurred+0xbc>
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c72:	d01d      	beq.n	8003cb0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c74:	7cfb      	ldrb	r3, [r7, #19]
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d01a      	beq.n	8003cb0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c8a:	f7ff f87b 	bl	8002d84 <HAL_GetTick>
 8003c8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c90:	e00e      	b.n	8003cb0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c92:	f7ff f877 	bl	8002d84 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b19      	cmp	r3, #25
 8003c9e:	d907      	bls.n	8003cb0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	f043 0320 	orr.w	r3, r3, #32
 8003ca6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003cae:	e006      	b.n	8003cbe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	d1e9      	bne.n	8003c92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d003      	beq.n	8003cd4 <I2C_IsErrorOccurred+0xe0>
 8003ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0aa      	beq.n	8003c2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d103      	bne.n	8003ce4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	f043 0304 	orr.w	r3, r3, #4
 8003cea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00b      	beq.n	8003d1c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00b      	beq.n	8003d3e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	f043 0308 	orr.w	r3, r3, #8
 8003d2c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00b      	beq.n	8003d60 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	f043 0302 	orr.w	r3, r3, #2
 8003d4e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003d60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01c      	beq.n	8003da2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff fdc3 	bl	80038f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6859      	ldr	r1, [r3, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	4b0d      	ldr	r3, [pc, #52]	@ (8003db0 <I2C_IsErrorOccurred+0x1bc>)
 8003d7a:	400b      	ands	r3, r1
 8003d7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	431a      	orrs	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003da2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3728      	adds	r7, #40	@ 0x28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	fe00e800 	.word	0xfe00e800

08003db4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	817b      	strh	r3, [r7, #10]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dc6:	897b      	ldrh	r3, [r7, #10]
 8003dc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dcc:	7a7b      	ldrb	r3, [r7, #9]
 8003dce:	041b      	lsls	r3, r3, #16
 8003dd0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dd4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003de2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	0d5b      	lsrs	r3, r3, #21
 8003dee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003df2:	4b08      	ldr	r3, [pc, #32]	@ (8003e14 <I2C_TransferConfig+0x60>)
 8003df4:	430b      	orrs	r3, r1
 8003df6:	43db      	mvns	r3, r3
 8003df8:	ea02 0103 	and.w	r1, r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e06:	bf00      	nop
 8003e08:	371c      	adds	r7, #28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	03ff63ff 	.word	0x03ff63ff

08003e18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d138      	bne.n	8003ea0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e032      	b.n	8003ea2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2224      	movs	r2, #36	@ 0x24
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0201 	bic.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6819      	ldr	r1, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e000      	b.n	8003ea2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ea0:	2302      	movs	r3, #2
  }
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d139      	bne.n	8003f38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e033      	b.n	8003f3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2224      	movs	r2, #36	@ 0x24
 8003ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0201 	bic.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e000      	b.n	8003f3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f38:	2302      	movs	r3, #2
  }
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f48:	b08b      	sub	sp, #44	@ 0x2c
 8003f4a:	af06      	add	r7, sp, #24
 8003f4c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0c4      	b.n	80040e2 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d106      	bne.n	8003f72 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f009 ff81 	bl	800de74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2203      	movs	r2, #3
 8003f76:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f005 ff02 	bl	8009d88 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f84:	2300      	movs	r3, #0
 8003f86:	73fb      	strb	r3, [r7, #15]
 8003f88:	e040      	b.n	800400c <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	4613      	mov	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	440b      	add	r3, r1
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	440b      	add	r3, r1
 8003fb0:	7bfa      	ldrb	r2, [r7, #15]
 8003fb2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	440b      	add	r3, r1
 8003fc4:	3303      	adds	r3, #3
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fca:	7bfa      	ldrb	r2, [r7, #15]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	440b      	add	r3, r1
 8003fd8:	3338      	adds	r3, #56	@ 0x38
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fde:	7bfa      	ldrb	r2, [r7, #15]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	440b      	add	r3, r1
 8003fec:	333c      	adds	r3, #60	@ 0x3c
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ff2:	7bfa      	ldrb	r2, [r7, #15]
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	440b      	add	r3, r1
 8004000:	3340      	adds	r3, #64	@ 0x40
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	3301      	adds	r3, #1
 800400a:	73fb      	strb	r3, [r7, #15]
 800400c:	7bfa      	ldrb	r2, [r7, #15]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	429a      	cmp	r2, r3
 8004014:	d3b9      	bcc.n	8003f8a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004016:	2300      	movs	r3, #0
 8004018:	73fb      	strb	r3, [r7, #15]
 800401a:	e044      	b.n	80040a6 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800401c:	7bfa      	ldrb	r2, [r7, #15]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	440b      	add	r3, r1
 800402a:	f203 1369 	addw	r3, r3, #361	@ 0x169
 800402e:	2200      	movs	r2, #0
 8004030:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004032:	7bfa      	ldrb	r2, [r7, #15]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	440b      	add	r3, r1
 8004040:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004044:	7bfa      	ldrb	r2, [r7, #15]
 8004046:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004048:	7bfa      	ldrb	r2, [r7, #15]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	440b      	add	r3, r1
 8004056:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 800405a:	2200      	movs	r2, #0
 800405c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800405e:	7bfa      	ldrb	r2, [r7, #15]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	440b      	add	r3, r1
 800406c:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004074:	7bfa      	ldrb	r2, [r7, #15]
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	440b      	add	r3, r1
 8004082:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800408a:	7bfa      	ldrb	r2, [r7, #15]
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	440b      	add	r3, r1
 8004098:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	3301      	adds	r3, #1
 80040a4:	73fb      	strb	r3, [r7, #15]
 80040a6:	7bfa      	ldrb	r2, [r7, #15]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d3b5      	bcc.n	800401c <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	603b      	str	r3, [r7, #0]
 80040b6:	687e      	ldr	r6, [r7, #4]
 80040b8:	466d      	mov	r5, sp
 80040ba:	f106 0410 	add.w	r4, r6, #16
 80040be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	602b      	str	r3, [r5, #0]
 80040c6:	1d33      	adds	r3, r6, #4
 80040c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040ca:	6838      	ldr	r0, [r7, #0]
 80040cc:	f005 fe77 	bl	8009dbe <USB_DevInit>

  hpcd->USB_Address = 0U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_PCD_Start+0x16>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e016      	b.n	800412e <HAL_PCD_Start+0x44>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f005 fe24 	bl	8009d5a <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004112:	2101      	movs	r1, #1
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f00a f953 	bl	800e3c0 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f008 f8e3 	bl	800c2ea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f008 f8dc 	bl	800c300 <USB_ReadInterrupts>
 8004148:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fab2 	bl	80046be <PCD_EP_ISR_Handler>

    return;
 800415a:	e0bd      	b.n	80042d8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004162:	2b00      	cmp	r3, #0
 8004164:	d013      	beq.n	800418e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800416e:	b29a      	uxth	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004178:	b292      	uxth	r2, r2
 800417a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f009 ff21 	bl	800dfc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004184:	2100      	movs	r1, #0
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f8a9 	bl	80042de <HAL_PCD_SetAddress>

    return;
 800418c:	e0a4      	b.n	80042d8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00c      	beq.n	80041b2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80041aa:	b292      	uxth	r2, r2
 80041ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80041b0:	e092      	b.n	80042d8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00c      	beq.n	80041d6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041ce:	b292      	uxth	r2, r2
 80041d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80041d4:	e080      	b.n	80042d8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d027      	beq.n	8004230 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0204 	bic.w	r2, r2, #4
 80041f2:	b292      	uxth	r2, r2
 80041f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004200:	b29a      	uxth	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0208 	bic.w	r2, r2, #8
 800420a:	b292      	uxth	r2, r2
 800420c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f009 ff11 	bl	800e038 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800421e:	b29a      	uxth	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004228:	b292      	uxth	r2, r2
 800422a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800422e:	e053      	b.n	80042d8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004236:	2b00      	cmp	r3, #0
 8004238:	d027      	beq.n	800428a <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004242:	b29a      	uxth	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0208 	orr.w	r2, r2, #8
 800424c:	b292      	uxth	r2, r2
 800424e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800425a:	b29a      	uxth	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004264:	b292      	uxth	r2, r2
 8004266:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004272:	b29a      	uxth	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0204 	orr.w	r2, r2, #4
 800427c:	b292      	uxth	r2, r2
 800427e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f009 febe 	bl	800e004 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004288:	e026      	b.n	80042d8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00f      	beq.n	80042b4 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800429c:	b29a      	uxth	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80042a6:	b292      	uxth	r2, r2
 80042a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f009 fe7c 	bl	800dfaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80042b2:	e011      	b.n	80042d8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00c      	beq.n	80042d8 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042d0:	b292      	uxth	r2, r2
 80042d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80042d6:	bf00      	nop
  }
}
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b082      	sub	sp, #8
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	460b      	mov	r3, r1
 80042e8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_PCD_SetAddress+0x1a>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e013      	b.n	8004320 <HAL_PCD_SetAddress+0x42>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	78fa      	ldrb	r2, [r7, #3]
 8004304:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f007 ffd6 	bl	800c2c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	4608      	mov	r0, r1
 8004332:	4611      	mov	r1, r2
 8004334:	461a      	mov	r2, r3
 8004336:	4603      	mov	r3, r0
 8004338:	70fb      	strb	r3, [r7, #3]
 800433a:	460b      	mov	r3, r1
 800433c:	803b      	strh	r3, [r7, #0]
 800433e:	4613      	mov	r3, r2
 8004340:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004346:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800434a:	2b00      	cmp	r3, #0
 800434c:	da0e      	bge.n	800436c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800434e:	78fb      	ldrb	r3, [r7, #3]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	4613      	mov	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	4413      	add	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2201      	movs	r2, #1
 8004368:	705a      	strb	r2, [r3, #1]
 800436a:	e00e      	b.n	800438a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	f003 0207 	and.w	r2, r3, #7
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4413      	add	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	b2da      	uxtb	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004396:	883a      	ldrh	r2, [r7, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	78ba      	ldrb	r2, [r7, #2]
 80043a0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043a2:	78bb      	ldrb	r3, [r7, #2]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d102      	bne.n	80043ae <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_PCD_EP_Open+0x94>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e00e      	b.n	80043da <HAL_PCD_EP_Open+0xb2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68f9      	ldr	r1, [r7, #12]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f005 fd18 	bl	8009e00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 80043d8:	7afb      	ldrb	r3, [r7, #11]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	460b      	mov	r3, r1
 80043ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	da0e      	bge.n	8004414 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	4413      	add	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2201      	movs	r2, #1
 8004410:	705a      	strb	r2, [r3, #1]
 8004412:	e00e      	b.n	8004432 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	f003 0207 	and.w	r2, r3, #7
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	4413      	add	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	b2da      	uxtb	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_PCD_EP_Close+0x6a>
 8004448:	2302      	movs	r3, #2
 800444a:	e00e      	b.n	800446a <HAL_PCD_EP_Close+0x88>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68f9      	ldr	r1, [r7, #12]
 800445a:	4618      	mov	r0, r3
 800445c:	f006 f894 	bl	800a588 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b086      	sub	sp, #24
 8004476:	af00      	add	r7, sp, #0
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
 800447e:	460b      	mov	r3, r1
 8004480:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004482:	7afb      	ldrb	r3, [r7, #11]
 8004484:	f003 0207 	and.w	r2, r3, #7
 8004488:	4613      	mov	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2200      	movs	r2, #0
 80044aa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2200      	movs	r2, #0
 80044b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044b2:	7afb      	ldrb	r3, [r7, #11]
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6979      	ldr	r1, [r7, #20]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f006 fa4c 	bl	800a962 <USB_EPStartXfer>

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	f003 0207 	and.w	r2, r3, #7
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	440b      	add	r3, r1
 80044f2:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80044f6:	681b      	ldr	r3, [r3, #0]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	607a      	str	r2, [r7, #4]
 800450e:	603b      	str	r3, [r7, #0]
 8004510:	460b      	mov	r3, r1
 8004512:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004514:	7afb      	ldrb	r3, [r7, #11]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4413      	add	r3, r2
 8004528:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2200      	movs	r2, #0
 8004548:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2201      	movs	r2, #1
 800454e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004550:	7afb      	ldrb	r3, [r7, #11]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	b2da      	uxtb	r2, r3
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6979      	ldr	r1, [r7, #20]
 8004562:	4618      	mov	r0, r3
 8004564:	f006 f9fd 	bl	800a962 <USB_EPStartXfer>

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b084      	sub	sp, #16
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	460b      	mov	r3, r1
 800457c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800457e:	78fb      	ldrb	r3, [r7, #3]
 8004580:	f003 0207 	and.w	r2, r3, #7
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	429a      	cmp	r2, r3
 800458a:	d901      	bls.n	8004590 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e03e      	b.n	800460e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004590:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004594:	2b00      	cmp	r3, #0
 8004596:	da0e      	bge.n	80045b6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	4413      	add	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	705a      	strb	r2, [r3, #1]
 80045b4:	e00c      	b.n	80045d0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045b6:	78fa      	ldrb	r2, [r7, #3]
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	4413      	add	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045d6:	78fb      	ldrb	r3, [r7, #3]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_PCD_EP_SetStall+0x7e>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e00e      	b.n	800460e <HAL_PCD_EP_SetStall+0x9c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68f9      	ldr	r1, [r7, #12]
 80045fe:	4618      	mov	r0, r3
 8004600:	f007 fd60 	bl	800c0c4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	460b      	mov	r3, r1
 8004620:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	f003 020f 	and.w	r2, r3, #15
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	429a      	cmp	r2, r3
 800462e:	d901      	bls.n	8004634 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e040      	b.n	80046b6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004638:	2b00      	cmp	r3, #0
 800463a:	da0e      	bge.n	800465a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	4413      	add	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	705a      	strb	r2, [r3, #1]
 8004658:	e00e      	b.n	8004678 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	f003 0207 	and.w	r2, r3, #7
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	4413      	add	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800467e:	78fb      	ldrb	r3, [r7, #3]
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	b2da      	uxtb	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_PCD_EP_ClrStall+0x82>
 8004694:	2302      	movs	r3, #2
 8004696:	e00e      	b.n	80046b6 <HAL_PCD_EP_ClrStall+0xa0>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68f9      	ldr	r1, [r7, #12]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f007 fd5d 	bl	800c166 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b096      	sub	sp, #88	@ 0x58
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80046c6:	e3be      	b.n	8004e46 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80046d0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80046d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80046e2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f040 8178 	bne.w	80049dc <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80046ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80046f0:	f003 0310 	and.w	r3, r3, #16
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d151      	bne.n	800479c <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004704:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004708:	81fb      	strh	r3, [r7, #14]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	89fb      	ldrh	r3, [r7, #14]
 8004710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004718:	b29b      	uxth	r3, r3
 800471a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3328      	adds	r3, #40	@ 0x28
 8004720:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800472a:	b29b      	uxth	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4413      	add	r3, r2
 8004736:	3302      	adds	r3, #2
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800474a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800474c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800474e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004750:	695a      	ldr	r2, [r3, #20]
 8004752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	441a      	add	r2, r3
 8004758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800475a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800475c:	2100      	movs	r1, #0
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f009 fc09 	bl	800df76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 836a 	beq.w	8004e46 <PCD_EP_ISR_Handler+0x788>
 8004772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	f040 8365 	bne.w	8004e46 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004782:	b2db      	uxtb	r3, r3
 8004784:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004788:	b2da      	uxtb	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800479a:	e354      	b.n	8004e46 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80047a2:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80047ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80047b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d034      	beq.n	8004824 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	4413      	add	r3, r2
 80047ce:	3306      	adds	r3, #6
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6812      	ldr	r2, [r2, #0]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047e4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80047f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047f2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80047f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047f6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	f007 fdd7 	bl	800c3ac <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	b29a      	uxth	r2, r3
 8004806:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800480a:	4013      	ands	r3, r2
 800480c:	823b      	strh	r3, [r7, #16]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	8a3a      	ldrh	r2, [r7, #16]
 8004814:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004818:	b292      	uxth	r2, r2
 800481a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f009 fb7d 	bl	800df1c <HAL_PCD_SetupStageCallback>
 8004822:	e310      	b.n	8004e46 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004824:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004828:	2b00      	cmp	r3, #0
 800482a:	f280 830c 	bge.w	8004e46 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	b29a      	uxth	r2, r3
 8004836:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800483a:	4013      	ands	r3, r2
 800483c:	83fb      	strh	r3, [r7, #30]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	8bfa      	ldrh	r2, [r7, #30]
 8004844:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004848:	b292      	uxth	r2, r2
 800484a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004854:	b29b      	uxth	r3, r3
 8004856:	461a      	mov	r2, r3
 8004858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	4413      	add	r3, r2
 8004860:	3306      	adds	r3, #6
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004876:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d019      	beq.n	80048b4 <PCD_EP_ISR_Handler+0x1f6>
 8004880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d015      	beq.n	80048b4 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800488e:	6959      	ldr	r1, [r3, #20]
 8004890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004892:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004896:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004898:	b29b      	uxth	r3, r3
 800489a:	f007 fd87 	bl	800c3ac <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800489e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a0:	695a      	ldr	r2, [r3, #20]
 80048a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	441a      	add	r2, r3
 80048a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048aa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80048ac:	2100      	movs	r1, #0
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f009 fb46 	bl	800df40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80048be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80048c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 82bd 	bne.w	8004e46 <PCD_EP_ISR_Handler+0x788>
 80048cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80048d0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80048d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048d8:	f000 82b5 	beq.w	8004e46 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	4413      	add	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	b29b      	uxth	r3, r3
 8004902:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004906:	b29a      	uxth	r2, r3
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	801a      	strh	r2, [r3, #0]
 800490c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	2b3e      	cmp	r3, #62	@ 0x3e
 8004912:	d91d      	bls.n	8004950 <PCD_EP_ISR_Handler+0x292>
 8004914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	647b      	str	r3, [r7, #68]	@ 0x44
 800491c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f003 031f 	and.w	r3, r3, #31
 8004924:	2b00      	cmp	r3, #0
 8004926:	d102      	bne.n	800492e <PCD_EP_ISR_Handler+0x270>
 8004928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800492a:	3b01      	subs	r3, #1
 800492c:	647b      	str	r3, [r7, #68]	@ 0x44
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	b29a      	uxth	r2, r3
 8004934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004936:	b29b      	uxth	r3, r3
 8004938:	029b      	lsls	r3, r3, #10
 800493a:	b29b      	uxth	r3, r3
 800493c:	4313      	orrs	r3, r2
 800493e:	b29b      	uxth	r3, r3
 8004940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004948:	b29a      	uxth	r2, r3
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	801a      	strh	r2, [r3, #0]
 800494e:	e026      	b.n	800499e <PCD_EP_ISR_Handler+0x2e0>
 8004950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10a      	bne.n	800496e <PCD_EP_ISR_Handler+0x2b0>
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	b29b      	uxth	r3, r3
 800495e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004966:	b29a      	uxth	r2, r3
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	801a      	strh	r2, [r3, #0]
 800496c:	e017      	b.n	800499e <PCD_EP_ISR_Handler+0x2e0>
 800496e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	085b      	lsrs	r3, r3, #1
 8004974:	647b      	str	r3, [r7, #68]	@ 0x44
 8004976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <PCD_EP_ISR_Handler+0x2ca>
 8004982:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004984:	3301      	adds	r3, #1
 8004986:	647b      	str	r3, [r7, #68]	@ 0x44
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	b29a      	uxth	r2, r3
 800498e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004990:	b29b      	uxth	r3, r3
 8004992:	029b      	lsls	r3, r3, #10
 8004994:	b29b      	uxth	r3, r3
 8004996:	4313      	orrs	r3, r2
 8004998:	b29a      	uxth	r2, r3
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ae:	827b      	strh	r3, [r7, #18]
 80049b0:	8a7b      	ldrh	r3, [r7, #18]
 80049b2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80049b6:	827b      	strh	r3, [r7, #18]
 80049b8:	8a7b      	ldrh	r3, [r7, #18]
 80049ba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80049be:	827b      	strh	r3, [r7, #18]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	8a7b      	ldrh	r3, [r7, #18]
 80049c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	8013      	strh	r3, [r2, #0]
 80049da:	e234      	b.n	8004e46 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80049f0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f280 80fc 	bge.w	8004bf2 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	461a      	mov	r2, r3
 8004a00:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004a10:	4013      	ands	r3, r2
 8004a12:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004a28:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a2c:	b292      	uxth	r2, r2
 8004a2e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004a30:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004a34:	4613      	mov	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	4413      	add	r3, r2
 8004a44:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a48:	7b1b      	ldrb	r3, [r3, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d125      	bne.n	8004a9a <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	4413      	add	r3, r2
 8004a62:	3306      	adds	r3, #6
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6812      	ldr	r2, [r2, #0]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a76:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004a7a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 8092 	beq.w	8004ba8 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a8a:	6959      	ldr	r1, [r3, #20]
 8004a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a8e:	88da      	ldrh	r2, [r3, #6]
 8004a90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004a94:	f007 fc8a 	bl	800c3ac <USB_ReadPMA>
 8004a98:	e086      	b.n	8004ba8 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a9c:	78db      	ldrb	r3, [r3, #3]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d10a      	bne.n	8004ab8 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004aa2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f9d9 	bl	8004e62 <HAL_PCD_EP_DB_Receive>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004ab6:	e077      	b.n	8004ba8 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	441a      	add	r2, r3
 8004ae4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004ae8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004af0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004af4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d024      	beq.n	8004b60 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4413      	add	r3, r2
 8004b2a:	3302      	adds	r3, #2
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6812      	ldr	r2, [r2, #0]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b3e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004b42:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d02e      	beq.n	8004ba8 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b50:	6959      	ldr	r1, [r3, #20]
 8004b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b54:	891a      	ldrh	r2, [r3, #8]
 8004b56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004b5a:	f007 fc27 	bl	800c3ac <USB_ReadPMA>
 8004b5e:	e023      	b.n	8004ba8 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	4413      	add	r3, r2
 8004b74:	3306      	adds	r3, #6
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b88:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004b8c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d009      	beq.n	8004ba8 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6818      	ldr	r0, [r3, #0]
 8004b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b9a:	6959      	ldr	r1, [r3, #20]
 8004b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b9e:	895a      	ldrh	r2, [r3, #10]
 8004ba0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ba4:	f007 fc02 	bl	800c3ac <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004bb0:	441a      	add	r2, r3
 8004bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004bb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb8:	695a      	ldr	r2, [r3, #20]
 8004bba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004bbe:	441a      	add	r2, r3
 8004bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <PCD_EP_ISR_Handler+0x51a>
 8004bcc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d206      	bcs.n	8004be6 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	4619      	mov	r1, r3
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f009 f9ae 	bl	800df40 <HAL_PCD_DataOutStageCallback>
 8004be4:	e005      	b.n	8004bf2 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bec:	4618      	mov	r0, r3
 8004bee:	f005 feb8 	bl	800a962 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004bf2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 8123 	beq.w	8004e46 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8004c00:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	4613      	mov	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	4413      	add	r3, r2
 8004c12:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c2e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	441a      	add	r2, r3
 8004c40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c52:	78db      	ldrb	r3, [r3, #3]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	f040 80a2 	bne.w	8004d9e <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8004c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c62:	7b1b      	ldrb	r3, [r3, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8093 	beq.w	8004d90 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004c6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d046      	beq.n	8004d04 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c78:	785b      	ldrb	r3, [r3, #1]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d126      	bne.n	8004ccc <PCD_EP_ISR_Handler+0x60e>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c92:	4413      	add	r3, r2
 8004c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	011a      	lsls	r2, r3, #4
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ca4:	623b      	str	r3, [r7, #32]
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	801a      	strh	r2, [r3, #0]
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	801a      	strh	r2, [r3, #0]
 8004cca:	e061      	b.n	8004d90 <PCD_EP_ISR_Handler+0x6d2>
 8004ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cce:	785b      	ldrb	r3, [r3, #1]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d15d      	bne.n	8004d90 <PCD_EP_ISR_Handler+0x6d2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce8:	4413      	add	r3, r2
 8004cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	011a      	lsls	r2, r3, #4
 8004cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfe:	2200      	movs	r2, #0
 8004d00:	801a      	strh	r2, [r3, #0]
 8004d02:	e045      	b.n	8004d90 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d0c:	785b      	ldrb	r3, [r3, #1]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d126      	bne.n	8004d60 <PCD_EP_ISR_Handler+0x6a2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d26:	4413      	add	r3, r2
 8004d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	011a      	lsls	r2, r3, #4
 8004d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d32:	4413      	add	r3, r2
 8004d34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d38:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d48:	801a      	strh	r2, [r3, #0]
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5c:	801a      	strh	r2, [r3, #0]
 8004d5e:	e017      	b.n	8004d90 <PCD_EP_ISR_Handler+0x6d2>
 8004d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d62:	785b      	ldrb	r3, [r3, #1]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d113      	bne.n	8004d90 <PCD_EP_ISR_Handler+0x6d2>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	461a      	mov	r2, r3
 8004d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d76:	4413      	add	r3, r2
 8004d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	011a      	lsls	r2, r3, #4
 8004d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d82:	4413      	add	r3, r2
 8004d84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	4619      	mov	r1, r3
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f009 f8ed 	bl	800df76 <HAL_PCD_DataInStageCallback>
 8004d9c:	e053      	b.n	8004e46 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004d9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d146      	bne.n	8004e38 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	3302      	adds	r3, #2
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dd2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d907      	bls.n	8004df2 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8004de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004dea:	1ad2      	subs	r2, r2, r3
 8004dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dee:	619a      	str	r2, [r3, #24]
 8004df0:	e002      	b.n	8004df8 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004df4:	2200      	movs	r2, #0
 8004df6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d106      	bne.n	8004e0e <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	4619      	mov	r1, r3
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f009 f8b5 	bl	800df76 <HAL_PCD_DataInStageCallback>
 8004e0c:	e01b      	b.n	8004e46 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e10:	695a      	ldr	r2, [r3, #20]
 8004e12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e16:	441a      	add	r2, r3
 8004e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e1a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e24:	441a      	add	r2, r3
 8004e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e28:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e30:	4618      	mov	r0, r3
 8004e32:	f005 fd96 	bl	800a962 <USB_EPStartXfer>
 8004e36:	e006      	b.n	8004e46 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004e38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f91b 	bl	800507c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	b21b      	sxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f6ff ac38 	blt.w	80046c8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3758      	adds	r7, #88	@ 0x58
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b088      	sub	sp, #32
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e70:	88fb      	ldrh	r3, [r7, #6]
 8004e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d07e      	beq.n	8004f78 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	461a      	mov	r2, r3
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3302      	adds	r3, #2
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	6812      	ldr	r2, [r2, #0]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ea2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	699a      	ldr	r2, [r3, #24]
 8004ea8:	8b7b      	ldrh	r3, [r7, #26]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d306      	bcc.n	8004ebc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	8b7b      	ldrh	r3, [r7, #26]
 8004eb4:	1ad2      	subs	r2, r2, r3
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	619a      	str	r2, [r3, #24]
 8004eba:	e002      	b.n	8004ec2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d123      	bne.n	8004f12 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ee4:	833b      	strh	r3, [r7, #24]
 8004ee6:	8b3b      	ldrh	r3, [r7, #24]
 8004ee8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004eec:	833b      	strh	r3, [r7, #24]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	441a      	add	r2, r3
 8004efc:	8b3b      	ldrh	r3, [r7, #24]
 8004efe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f12:	88fb      	ldrh	r3, [r7, #6]
 8004f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01f      	beq.n	8004f5c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	461a      	mov	r2, r3
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f36:	82fb      	strh	r3, [r7, #22]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	441a      	add	r2, r3
 8004f46:	8afb      	ldrh	r3, [r7, #22]
 8004f48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004f5c:	8b7b      	ldrh	r3, [r7, #26]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 8087 	beq.w	8005072 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6818      	ldr	r0, [r3, #0]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	6959      	ldr	r1, [r3, #20]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	891a      	ldrh	r2, [r3, #8]
 8004f70:	8b7b      	ldrh	r3, [r7, #26]
 8004f72:	f007 fa1b 	bl	800c3ac <USB_ReadPMA>
 8004f76:	e07c      	b.n	8005072 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3306      	adds	r3, #6
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	6812      	ldr	r2, [r2, #0]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fa0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	8b7b      	ldrh	r3, [r7, #26]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d306      	bcc.n	8004fba <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	699a      	ldr	r2, [r3, #24]
 8004fb0:	8b7b      	ldrh	r3, [r7, #26]
 8004fb2:	1ad2      	subs	r2, r2, r3
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	619a      	str	r2, [r3, #24]
 8004fb8:	e002      	b.n	8004fc0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d123      	bne.n	8005010 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe2:	83fb      	strh	r3, [r7, #30]
 8004fe4:	8bfb      	ldrh	r3, [r7, #30]
 8004fe6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004fea:	83fb      	strh	r3, [r7, #30]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	441a      	add	r2, r3
 8004ffa:	8bfb      	ldrh	r3, [r7, #30]
 8004ffc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005000:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005004:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800500c:	b29b      	uxth	r3, r3
 800500e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005010:	88fb      	ldrh	r3, [r7, #6]
 8005012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005016:	2b00      	cmp	r3, #0
 8005018:	d11f      	bne.n	800505a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	b29b      	uxth	r3, r3
 800502c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005030:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005034:	83bb      	strh	r3, [r7, #28]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	441a      	add	r2, r3
 8005044:	8bbb      	ldrh	r3, [r7, #28]
 8005046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800504a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800504e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005052:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005056:	b29b      	uxth	r3, r3
 8005058:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800505a:	8b7b      	ldrh	r3, [r7, #26]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d008      	beq.n	8005072 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	6959      	ldr	r1, [r3, #20]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	895a      	ldrh	r2, [r3, #10]
 800506c:	8b7b      	ldrh	r3, [r7, #26]
 800506e:	f007 f99d 	bl	800c3ac <USB_ReadPMA>
    }
  }

  return count;
 8005072:	8b7b      	ldrh	r3, [r7, #26]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3720      	adds	r7, #32
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b0a4      	sub	sp, #144	@ 0x90
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	4613      	mov	r3, r2
 8005088:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800508a:	88fb      	ldrh	r3, [r7, #6]
 800508c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 81dd 	beq.w	8005450 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800509e:	b29b      	uxth	r3, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	4413      	add	r3, r2
 80050aa:	3302      	adds	r3, #2
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050be:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d907      	bls.n	80050de <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	699a      	ldr	r2, [r3, #24]
 80050d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80050d6:	1ad2      	subs	r2, r2, r3
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	619a      	str	r2, [r3, #24]
 80050dc:	e002      	b.n	80050e4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2200      	movs	r2, #0
 80050e2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f040 80b9 	bne.w	8005260 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	785b      	ldrb	r3, [r3, #1]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d126      	bne.n	8005144 <HAL_PCD_EP_DB_Transmit+0xc8>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005104:	b29b      	uxth	r3, r3
 8005106:	461a      	mov	r2, r3
 8005108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510a:	4413      	add	r3, r2
 800510c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	011a      	lsls	r2, r3, #4
 8005114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005116:	4413      	add	r3, r2
 8005118:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800511c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800511e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	b29b      	uxth	r3, r3
 8005124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005128:	b29a      	uxth	r2, r3
 800512a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512c:	801a      	strh	r2, [r3, #0]
 800512e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	b29b      	uxth	r3, r3
 8005134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800513c:	b29a      	uxth	r2, r3
 800513e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005140:	801a      	strh	r2, [r3, #0]
 8005142:	e01a      	b.n	800517a <HAL_PCD_EP_DB_Transmit+0xfe>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	785b      	ldrb	r3, [r3, #1]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d116      	bne.n	800517a <HAL_PCD_EP_DB_Transmit+0xfe>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	637b      	str	r3, [r7, #52]	@ 0x34
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800515a:	b29b      	uxth	r3, r3
 800515c:	461a      	mov	r2, r3
 800515e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005160:	4413      	add	r3, r2
 8005162:	637b      	str	r3, [r7, #52]	@ 0x34
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	011a      	lsls	r2, r3, #4
 800516a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800516c:	4413      	add	r3, r2
 800516e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005172:	633b      	str	r3, [r7, #48]	@ 0x30
 8005174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005176:	2200      	movs	r2, #0
 8005178:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	785b      	ldrb	r3, [r3, #1]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d126      	bne.n	80051d6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005196:	b29b      	uxth	r3, r3
 8005198:	461a      	mov	r2, r3
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	4413      	add	r3, r2
 800519e:	61fb      	str	r3, [r7, #28]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	011a      	lsls	r2, r3, #4
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051ae:	61bb      	str	r3, [r7, #24]
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	801a      	strh	r2, [r3, #0]
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	801a      	strh	r2, [r3, #0]
 80051d4:	e017      	b.n	8005206 <HAL_PCD_EP_DB_Transmit+0x18a>
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	785b      	ldrb	r3, [r3, #1]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d113      	bne.n	8005206 <HAL_PCD_EP_DB_Transmit+0x18a>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ec:	4413      	add	r3, r2
 80051ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	011a      	lsls	r2, r3, #4
 80051f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f8:	4413      	add	r3, r2
 80051fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051fe:	623b      	str	r3, [r7, #32]
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	2200      	movs	r2, #0
 8005204:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	4619      	mov	r1, r3
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f008 feb2 	bl	800df76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005212:	88fb      	ldrh	r3, [r7, #6]
 8005214:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 82fc 	beq.w	8005816 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	461a      	mov	r2, r3
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	b29b      	uxth	r3, r3
 8005230:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005238:	82fb      	strh	r3, [r7, #22]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	441a      	add	r2, r3
 8005248:	8afb      	ldrh	r3, [r7, #22]
 800524a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800524e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005252:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800525a:	b29b      	uxth	r3, r3
 800525c:	8013      	strh	r3, [r2, #0]
 800525e:	e2da      	b.n	8005816 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005260:	88fb      	ldrh	r3, [r7, #6]
 8005262:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d021      	beq.n	80052ae <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005280:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005284:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	441a      	add	r2, r3
 8005296:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800529a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800529e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	f040 82ae 	bne.w	8005816 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	695a      	ldr	r2, [r3, #20]
 80052be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80052c2:	441a      	add	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	69da      	ldr	r2, [r3, #28]
 80052cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80052d0:	441a      	add	r2, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	6a1a      	ldr	r2, [r3, #32]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d30b      	bcc.n	80052fa <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	6a1a      	ldr	r2, [r3, #32]
 80052ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052f2:	1ad2      	subs	r2, r2, r3
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	621a      	str	r2, [r3, #32]
 80052f8:	e017      	b.n	800532a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d108      	bne.n	8005314 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8005302:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005306:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005312:	e00a      	b.n	800532a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2200      	movs	r2, #0
 8005328:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	785b      	ldrb	r3, [r3, #1]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d165      	bne.n	80053fe <HAL_PCD_EP_DB_Transmit+0x382>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005340:	b29b      	uxth	r3, r3
 8005342:	461a      	mov	r2, r3
 8005344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005346:	4413      	add	r3, r2
 8005348:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	011a      	lsls	r2, r3, #4
 8005350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005352:	4413      	add	r3, r2
 8005354:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005358:	63bb      	str	r3, [r7, #56]	@ 0x38
 800535a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005364:	b29a      	uxth	r2, r3
 8005366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005368:	801a      	strh	r2, [r3, #0]
 800536a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800536e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005370:	d91d      	bls.n	80053ae <HAL_PCD_EP_DB_Transmit+0x332>
 8005372:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	64bb      	str	r3, [r7, #72]	@ 0x48
 800537a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800537e:	f003 031f 	and.w	r3, r3, #31
 8005382:	2b00      	cmp	r3, #0
 8005384:	d102      	bne.n	800538c <HAL_PCD_EP_DB_Transmit+0x310>
 8005386:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005388:	3b01      	subs	r3, #1
 800538a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800538c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	b29a      	uxth	r2, r3
 8005392:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005394:	b29b      	uxth	r3, r3
 8005396:	029b      	lsls	r3, r3, #10
 8005398:	b29b      	uxth	r3, r3
 800539a:	4313      	orrs	r3, r2
 800539c:	b29b      	uxth	r3, r3
 800539e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053aa:	801a      	strh	r2, [r3, #0]
 80053ac:	e044      	b.n	8005438 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80053ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10a      	bne.n	80053cc <HAL_PCD_EP_DB_Transmit+0x350>
 80053b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c8:	801a      	strh	r2, [r3, #0]
 80053ca:	e035      	b.n	8005438 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80053cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053d0:	085b      	lsrs	r3, r3, #1
 80053d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <HAL_PCD_EP_DB_Transmit+0x36a>
 80053e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053e2:	3301      	adds	r3, #1
 80053e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	029b      	lsls	r3, r3, #10
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	4313      	orrs	r3, r2
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053fa:	801a      	strh	r2, [r3, #0]
 80053fc:	e01c      	b.n	8005438 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	785b      	ldrb	r3, [r3, #1]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d118      	bne.n	8005438 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	647b      	str	r3, [r7, #68]	@ 0x44
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005414:	b29b      	uxth	r3, r3
 8005416:	461a      	mov	r2, r3
 8005418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800541a:	4413      	add	r3, r2
 800541c:	647b      	str	r3, [r7, #68]	@ 0x44
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	011a      	lsls	r2, r3, #4
 8005424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005426:	4413      	add	r3, r2
 8005428:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800542c:	643b      	str	r3, [r7, #64]	@ 0x40
 800542e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005432:	b29a      	uxth	r2, r3
 8005434:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005436:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6818      	ldr	r0, [r3, #0]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	6959      	ldr	r1, [r3, #20]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	891a      	ldrh	r2, [r3, #8]
 8005444:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005448:	b29b      	uxth	r3, r3
 800544a:	f006 ff69 	bl	800c320 <USB_WritePMA>
 800544e:	e1e2      	b.n	8005816 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005458:	b29b      	uxth	r3, r3
 800545a:	461a      	mov	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	4413      	add	r3, r2
 8005464:	3306      	adds	r3, #6
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	6812      	ldr	r2, [r2, #0]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005478:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	699a      	ldr	r2, [r3, #24]
 8005480:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005484:	429a      	cmp	r2, r3
 8005486:	d307      	bcc.n	8005498 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	699a      	ldr	r2, [r3, #24]
 800548c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005490:	1ad2      	subs	r2, r2, r3
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	619a      	str	r2, [r3, #24]
 8005496:	e002      	b.n	800549e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2200      	movs	r2, #0
 800549c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f040 80c0 	bne.w	8005628 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	785b      	ldrb	r3, [r3, #1]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d126      	bne.n	80054fe <HAL_PCD_EP_DB_Transmit+0x482>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054be:	b29b      	uxth	r3, r3
 80054c0:	461a      	mov	r2, r3
 80054c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054c4:	4413      	add	r3, r2
 80054c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	011a      	lsls	r2, r3, #4
 80054ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054d0:	4413      	add	r3, r2
 80054d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054e6:	801a      	strh	r2, [r3, #0]
 80054e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054fa:	801a      	strh	r2, [r3, #0]
 80054fc:	e01a      	b.n	8005534 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	785b      	ldrb	r3, [r3, #1]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d116      	bne.n	8005534 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	667b      	str	r3, [r7, #100]	@ 0x64
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005514:	b29b      	uxth	r3, r3
 8005516:	461a      	mov	r2, r3
 8005518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800551a:	4413      	add	r3, r2
 800551c:	667b      	str	r3, [r7, #100]	@ 0x64
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	011a      	lsls	r2, r3, #4
 8005524:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005526:	4413      	add	r3, r2
 8005528:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800552c:	663b      	str	r3, [r7, #96]	@ 0x60
 800552e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005530:	2200      	movs	r2, #0
 8005532:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	677b      	str	r3, [r7, #116]	@ 0x74
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	785b      	ldrb	r3, [r3, #1]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d12b      	bne.n	800559a <HAL_PCD_EP_DB_Transmit+0x51e>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005550:	b29b      	uxth	r3, r3
 8005552:	461a      	mov	r2, r3
 8005554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005556:	4413      	add	r3, r2
 8005558:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	011a      	lsls	r2, r3, #4
 8005560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005562:	4413      	add	r3, r2
 8005564:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005568:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800556c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	b29b      	uxth	r3, r3
 8005574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005578:	b29a      	uxth	r2, r3
 800557a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800557e:	801a      	strh	r2, [r3, #0]
 8005580:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	b29b      	uxth	r3, r3
 8005588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800558c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005590:	b29a      	uxth	r2, r3
 8005592:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005596:	801a      	strh	r2, [r3, #0]
 8005598:	e017      	b.n	80055ca <HAL_PCD_EP_DB_Transmit+0x54e>
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d113      	bne.n	80055ca <HAL_PCD_EP_DB_Transmit+0x54e>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055b0:	4413      	add	r3, r2
 80055b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	011a      	lsls	r2, r3, #4
 80055ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055bc:	4413      	add	r3, r2
 80055be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80055c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055c6:	2200      	movs	r2, #0
 80055c8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	4619      	mov	r1, r3
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f008 fcd0 	bl	800df76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f040 811a 	bne.w	8005816 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055fc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	461a      	mov	r2, r3
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	441a      	add	r2, r3
 800560e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005612:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005616:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800561a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800561e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005622:	b29b      	uxth	r3, r3
 8005624:	8013      	strh	r3, [r2, #0]
 8005626:	e0f6      	b.n	8005816 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005628:	88fb      	ldrh	r3, [r7, #6]
 800562a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d121      	bne.n	8005676 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	461a      	mov	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	b29b      	uxth	r3, r3
 8005644:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800564c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	441a      	add	r2, r3
 800565e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005662:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005666:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800566a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800566e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005672:	b29b      	uxth	r3, r3
 8005674:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800567c:	2b01      	cmp	r3, #1
 800567e:	f040 80ca 	bne.w	8005816 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800568a:	441a      	add	r2, r3
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005698:	441a      	add	r2, r3
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	6a1a      	ldr	r2, [r3, #32]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d30b      	bcc.n	80056c2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	6a1a      	ldr	r2, [r3, #32]
 80056b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056ba:	1ad2      	subs	r2, r2, r3
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	621a      	str	r2, [r3, #32]
 80056c0:	e017      	b.n	80056f2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d108      	bne.n	80056dc <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80056ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80056ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80056da:	e00a      	b.n	80056f2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2200      	movs	r2, #0
 80056e8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d165      	bne.n	80057cc <HAL_PCD_EP_DB_Transmit+0x750>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800570e:	b29b      	uxth	r3, r3
 8005710:	461a      	mov	r2, r3
 8005712:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005714:	4413      	add	r3, r2
 8005716:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	011a      	lsls	r2, r3, #4
 800571e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005720:	4413      	add	r3, r2
 8005722:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005726:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005728:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005732:	b29a      	uxth	r2, r3
 8005734:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005736:	801a      	strh	r2, [r3, #0]
 8005738:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800573c:	2b3e      	cmp	r3, #62	@ 0x3e
 800573e:	d91d      	bls.n	800577c <HAL_PCD_EP_DB_Transmit+0x700>
 8005740:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005744:	095b      	lsrs	r3, r3, #5
 8005746:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005748:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	2b00      	cmp	r3, #0
 8005752:	d102      	bne.n	800575a <HAL_PCD_EP_DB_Transmit+0x6de>
 8005754:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005756:	3b01      	subs	r3, #1
 8005758:	66bb      	str	r3, [r7, #104]	@ 0x68
 800575a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	b29a      	uxth	r2, r3
 8005760:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005762:	b29b      	uxth	r3, r3
 8005764:	029b      	lsls	r3, r3, #10
 8005766:	b29b      	uxth	r3, r3
 8005768:	4313      	orrs	r3, r2
 800576a:	b29b      	uxth	r3, r3
 800576c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005774:	b29a      	uxth	r2, r3
 8005776:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005778:	801a      	strh	r2, [r3, #0]
 800577a:	e041      	b.n	8005800 <HAL_PCD_EP_DB_Transmit+0x784>
 800577c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <HAL_PCD_EP_DB_Transmit+0x71e>
 8005784:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	b29b      	uxth	r3, r3
 800578a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800578e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005792:	b29a      	uxth	r2, r3
 8005794:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005796:	801a      	strh	r2, [r3, #0]
 8005798:	e032      	b.n	8005800 <HAL_PCD_EP_DB_Transmit+0x784>
 800579a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800579e:	085b      	lsrs	r3, r3, #1
 80057a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <HAL_PCD_EP_DB_Transmit+0x738>
 80057ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057b0:	3301      	adds	r3, #1
 80057b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057bc:	b29b      	uxth	r3, r3
 80057be:	029b      	lsls	r3, r3, #10
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	4313      	orrs	r3, r2
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057c8:	801a      	strh	r2, [r3, #0]
 80057ca:	e019      	b.n	8005800 <HAL_PCD_EP_DB_Transmit+0x784>
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	785b      	ldrb	r3, [r3, #1]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d115      	bne.n	8005800 <HAL_PCD_EP_DB_Transmit+0x784>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057dc:	b29b      	uxth	r3, r3
 80057de:	461a      	mov	r2, r3
 80057e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e2:	4413      	add	r3, r2
 80057e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	011a      	lsls	r2, r3, #4
 80057ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ee:	4413      	add	r3, r2
 80057f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80057f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80057f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057fe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6818      	ldr	r0, [r3, #0]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	6959      	ldr	r1, [r3, #20]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	895a      	ldrh	r2, [r3, #10]
 800580c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005810:	b29b      	uxth	r3, r3
 8005812:	f006 fd85 	bl	800c320 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	b29b      	uxth	r3, r3
 8005828:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800582c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005830:	82bb      	strh	r3, [r7, #20]
 8005832:	8abb      	ldrh	r3, [r7, #20]
 8005834:	f083 0310 	eor.w	r3, r3, #16
 8005838:	82bb      	strh	r3, [r7, #20]
 800583a:	8abb      	ldrh	r3, [r7, #20]
 800583c:	f083 0320 	eor.w	r3, r3, #32
 8005840:	82bb      	strh	r3, [r7, #20]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	441a      	add	r2, r3
 8005850:	8abb      	ldrh	r3, [r7, #20]
 8005852:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005856:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800585a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800585e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005862:	b29b      	uxth	r3, r3
 8005864:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3790      	adds	r7, #144	@ 0x90
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	607b      	str	r3, [r7, #4]
 800587a:	460b      	mov	r3, r1
 800587c:	817b      	strh	r3, [r7, #10]
 800587e:	4613      	mov	r3, r2
 8005880:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005882:	897b      	ldrh	r3, [r7, #10]
 8005884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00b      	beq.n	80058a6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800588e:	897b      	ldrh	r3, [r7, #10]
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	4613      	mov	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	4413      	add	r3, r2
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	e009      	b.n	80058ba <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80058a6:	897a      	ldrh	r2, [r7, #10]
 80058a8:	4613      	mov	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80058ba:	893b      	ldrh	r3, [r7, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d107      	bne.n	80058d0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2200      	movs	r2, #0
 80058c4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	80da      	strh	r2, [r3, #6]
 80058ce:	e00b      	b.n	80058e8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2201      	movs	r2, #1
 80058d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	b29a      	uxth	r2, r3
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	0c1b      	lsrs	r3, r3, #16
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
	...

080058f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80058fe:	af00      	add	r7, sp, #0
 8005900:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005904:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005908:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800590a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800590e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d102      	bne.n	800591e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	f001 b823 	b.w	8006964 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800591e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005922:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 817d 	beq.w	8005c2e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005934:	4bbc      	ldr	r3, [pc, #752]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 030c 	and.w	r3, r3, #12
 800593c:	2b04      	cmp	r3, #4
 800593e:	d00c      	beq.n	800595a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005940:	4bb9      	ldr	r3, [pc, #740]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f003 030c 	and.w	r3, r3, #12
 8005948:	2b08      	cmp	r3, #8
 800594a:	d15c      	bne.n	8005a06 <HAL_RCC_OscConfig+0x10e>
 800594c:	4bb6      	ldr	r3, [pc, #728]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005958:	d155      	bne.n	8005a06 <HAL_RCC_OscConfig+0x10e>
 800595a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800595e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005962:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8005966:	fa93 f3a3 	rbit	r3, r3
 800596a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800596e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005972:	fab3 f383 	clz	r3, r3
 8005976:	b2db      	uxtb	r3, r3
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	b2db      	uxtb	r3, r3
 800597c:	f043 0301 	orr.w	r3, r3, #1
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b01      	cmp	r3, #1
 8005984:	d102      	bne.n	800598c <HAL_RCC_OscConfig+0x94>
 8005986:	4ba8      	ldr	r3, [pc, #672]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	e015      	b.n	80059b8 <HAL_RCC_OscConfig+0xc0>
 800598c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005990:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005994:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8005998:	fa93 f3a3 	rbit	r3, r3
 800599c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80059a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80059a4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80059a8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80059ac:	fa93 f3a3 	rbit	r3, r3
 80059b0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80059b4:	4b9c      	ldr	r3, [pc, #624]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 80059b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80059bc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80059c0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80059c4:	fa92 f2a2 	rbit	r2, r2
 80059c8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80059cc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80059d0:	fab2 f282 	clz	r2, r2
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	f042 0220 	orr.w	r2, r2, #32
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	f002 021f 	and.w	r2, r2, #31
 80059e0:	2101      	movs	r1, #1
 80059e2:	fa01 f202 	lsl.w	r2, r1, r2
 80059e6:	4013      	ands	r3, r2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 811f 	beq.w	8005c2c <HAL_RCC_OscConfig+0x334>
 80059ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f040 8116 	bne.w	8005c2c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f000 bfaf 	b.w	8006964 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a16:	d106      	bne.n	8005a26 <HAL_RCC_OscConfig+0x12e>
 8005a18:	4b83      	ldr	r3, [pc, #524]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a82      	ldr	r2, [pc, #520]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005a1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	e036      	b.n	8005a94 <HAL_RCC_OscConfig+0x19c>
 8005a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10c      	bne.n	8005a50 <HAL_RCC_OscConfig+0x158>
 8005a36:	4b7c      	ldr	r3, [pc, #496]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a7b      	ldr	r2, [pc, #492]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005a3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	4b79      	ldr	r3, [pc, #484]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a78      	ldr	r2, [pc, #480]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005a48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	e021      	b.n	8005a94 <HAL_RCC_OscConfig+0x19c>
 8005a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a60:	d10c      	bne.n	8005a7c <HAL_RCC_OscConfig+0x184>
 8005a62:	4b71      	ldr	r3, [pc, #452]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a70      	ldr	r2, [pc, #448]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	4b6e      	ldr	r3, [pc, #440]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a6d      	ldr	r2, [pc, #436]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	e00b      	b.n	8005a94 <HAL_RCC_OscConfig+0x19c>
 8005a7c:	4b6a      	ldr	r3, [pc, #424]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a69      	ldr	r2, [pc, #420]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	4b67      	ldr	r3, [pc, #412]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a66      	ldr	r2, [pc, #408]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005a8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a92:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a94:	4b64      	ldr	r3, [pc, #400]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a98:	f023 020f 	bic.w	r2, r3, #15
 8005a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005aa0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	495f      	ldr	r1, [pc, #380]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ab2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d059      	beq.n	8005b72 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005abe:	f7fd f961 	bl	8002d84 <HAL_GetTick>
 8005ac2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ac6:	e00a      	b.n	8005ade <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ac8:	f7fd f95c 	bl	8002d84 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b64      	cmp	r3, #100	@ 0x64
 8005ad6:	d902      	bls.n	8005ade <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	f000 bf43 	b.w	8006964 <HAL_RCC_OscConfig+0x106c>
 8005ade:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005ae2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8005aea:	fa93 f3a3 	rbit	r3, r3
 8005aee:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8005af2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005af6:	fab3 f383 	clz	r3, r3
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	095b      	lsrs	r3, r3, #5
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	f043 0301 	orr.w	r3, r3, #1
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d102      	bne.n	8005b10 <HAL_RCC_OscConfig+0x218>
 8005b0a:	4b47      	ldr	r3, [pc, #284]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	e015      	b.n	8005b3c <HAL_RCC_OscConfig+0x244>
 8005b10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b14:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b18:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005b1c:	fa93 f3a3 	rbit	r3, r3
 8005b20:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005b24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b28:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005b2c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005b30:	fa93 f3a3 	rbit	r3, r3
 8005b34:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005b38:	4b3b      	ldr	r3, [pc, #236]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005b40:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8005b44:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8005b48:	fa92 f2a2 	rbit	r2, r2
 8005b4c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8005b50:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8005b54:	fab2 f282 	clz	r2, r2
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	f042 0220 	orr.w	r2, r2, #32
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	f002 021f 	and.w	r2, r2, #31
 8005b64:	2101      	movs	r1, #1
 8005b66:	fa01 f202 	lsl.w	r2, r1, r2
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d0ab      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x1d0>
 8005b70:	e05d      	b.n	8005c2e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b72:	f7fd f907 	bl	8002d84 <HAL_GetTick>
 8005b76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b7a:	e00a      	b.n	8005b92 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b7c:	f7fd f902 	bl	8002d84 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b64      	cmp	r3, #100	@ 0x64
 8005b8a:	d902      	bls.n	8005b92 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	f000 bee9 	b.w	8006964 <HAL_RCC_OscConfig+0x106c>
 8005b92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b96:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b9a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005b9e:	fa93 f3a3 	rbit	r3, r3
 8005ba2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8005ba6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005baa:	fab3 f383 	clz	r3, r3
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	095b      	lsrs	r3, r3, #5
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	f043 0301 	orr.w	r3, r3, #1
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d102      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x2cc>
 8005bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	e015      	b.n	8005bf0 <HAL_RCC_OscConfig+0x2f8>
 8005bc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005bc8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bcc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005bd0:	fa93 f3a3 	rbit	r3, r3
 8005bd4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005bd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005bdc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8005be0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005be4:	fa93 f3a3 	rbit	r3, r3
 8005be8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8005bec:	4b0e      	ldr	r3, [pc, #56]	@ (8005c28 <HAL_RCC_OscConfig+0x330>)
 8005bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005bf4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8005bf8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8005bfc:	fa92 f2a2 	rbit	r2, r2
 8005c00:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8005c04:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8005c08:	fab2 f282 	clz	r2, r2
 8005c0c:	b2d2      	uxtb	r2, r2
 8005c0e:	f042 0220 	orr.w	r2, r2, #32
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	f002 021f 	and.w	r2, r2, #31
 8005c18:	2101      	movs	r1, #1
 8005c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1ab      	bne.n	8005b7c <HAL_RCC_OscConfig+0x284>
 8005c24:	e003      	b.n	8005c2e <HAL_RCC_OscConfig+0x336>
 8005c26:	bf00      	nop
 8005c28:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 817d 	beq.w	8005f3e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005c44:	4ba6      	ldr	r3, [pc, #664]	@ (8005ee0 <HAL_RCC_OscConfig+0x5e8>)
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f003 030c 	and.w	r3, r3, #12
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00b      	beq.n	8005c68 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005c50:	4ba3      	ldr	r3, [pc, #652]	@ (8005ee0 <HAL_RCC_OscConfig+0x5e8>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f003 030c 	and.w	r3, r3, #12
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d172      	bne.n	8005d42 <HAL_RCC_OscConfig+0x44a>
 8005c5c:	4ba0      	ldr	r3, [pc, #640]	@ (8005ee0 <HAL_RCC_OscConfig+0x5e8>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d16c      	bne.n	8005d42 <HAL_RCC_OscConfig+0x44a>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c6e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005c72:	fa93 f3a3 	rbit	r3, r3
 8005c76:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8005c7a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c7e:	fab3 f383 	clz	r3, r3
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	f043 0301 	orr.w	r3, r3, #1
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d102      	bne.n	8005c98 <HAL_RCC_OscConfig+0x3a0>
 8005c92:	4b93      	ldr	r3, [pc, #588]	@ (8005ee0 <HAL_RCC_OscConfig+0x5e8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	e013      	b.n	8005cc0 <HAL_RCC_OscConfig+0x3c8>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8005ca2:	fa93 f3a3 	rbit	r3, r3
 8005ca6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8005caa:	2302      	movs	r3, #2
 8005cac:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8005cb0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005cb4:	fa93 f3a3 	rbit	r3, r3
 8005cb8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8005cbc:	4b88      	ldr	r3, [pc, #544]	@ (8005ee0 <HAL_RCC_OscConfig+0x5e8>)
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8005cc6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8005cca:	fa92 f2a2 	rbit	r2, r2
 8005cce:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8005cd2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8005cd6:	fab2 f282 	clz	r2, r2
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	f042 0220 	orr.w	r2, r2, #32
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	f002 021f 	and.w	r2, r2, #31
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8005cec:	4013      	ands	r3, r2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <HAL_RCC_OscConfig+0x410>
 8005cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d002      	beq.n	8005d08 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	f000 be2e 	b.w	8006964 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d08:	4b75      	ldr	r3, [pc, #468]	@ (8005ee0 <HAL_RCC_OscConfig+0x5e8>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	21f8      	movs	r1, #248	@ 0xf8
 8005d1e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d22:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8005d26:	fa91 f1a1 	rbit	r1, r1
 8005d2a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8005d2e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8005d32:	fab1 f181 	clz	r1, r1
 8005d36:	b2c9      	uxtb	r1, r1
 8005d38:	408b      	lsls	r3, r1
 8005d3a:	4969      	ldr	r1, [pc, #420]	@ (8005ee0 <HAL_RCC_OscConfig+0x5e8>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d40:	e0fd      	b.n	8005f3e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 8088 	beq.w	8005e64 <HAL_RCC_OscConfig+0x56c>
 8005d54:	2301      	movs	r3, #1
 8005d56:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d5a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8005d5e:	fa93 f3a3 	rbit	r3, r3
 8005d62:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8005d66:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d6a:	fab3 f383 	clz	r3, r3
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005d74:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d80:	f7fd f800 	bl	8002d84 <HAL_GetTick>
 8005d84:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d88:	e00a      	b.n	8005da0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d8a:	f7fc fffb 	bl	8002d84 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d902      	bls.n	8005da0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	f000 bde2 	b.w	8006964 <HAL_RCC_OscConfig+0x106c>
 8005da0:	2302      	movs	r3, #2
 8005da2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8005daa:	fa93 f3a3 	rbit	r3, r3
 8005dae:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8005db2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db6:	fab3 f383 	clz	r3, r3
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	f043 0301 	orr.w	r3, r3, #1
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d102      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x4d8>
 8005dca:	4b45      	ldr	r3, [pc, #276]	@ (8005ee0 <HAL_RCC_OscConfig+0x5e8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	e013      	b.n	8005df8 <HAL_RCC_OscConfig+0x500>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8005dda:	fa93 f3a3 	rbit	r3, r3
 8005dde:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8005de2:	2302      	movs	r3, #2
 8005de4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8005de8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8005dec:	fa93 f3a3 	rbit	r3, r3
 8005df0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8005df4:	4b3a      	ldr	r3, [pc, #232]	@ (8005ee0 <HAL_RCC_OscConfig+0x5e8>)
 8005df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df8:	2202      	movs	r2, #2
 8005dfa:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8005dfe:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8005e02:	fa92 f2a2 	rbit	r2, r2
 8005e06:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8005e0a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8005e0e:	fab2 f282 	clz	r2, r2
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	f042 0220 	orr.w	r2, r2, #32
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	f002 021f 	and.w	r2, r2, #31
 8005e1e:	2101      	movs	r1, #1
 8005e20:	fa01 f202 	lsl.w	r2, r1, r2
 8005e24:	4013      	ands	r3, r2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0af      	beq.n	8005d8a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8005ee0 <HAL_RCC_OscConfig+0x5e8>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	21f8      	movs	r1, #248	@ 0xf8
 8005e40:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e44:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005e48:	fa91 f1a1 	rbit	r1, r1
 8005e4c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8005e50:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8005e54:	fab1 f181 	clz	r1, r1
 8005e58:	b2c9      	uxtb	r1, r1
 8005e5a:	408b      	lsls	r3, r1
 8005e5c:	4920      	ldr	r1, [pc, #128]	@ (8005ee0 <HAL_RCC_OscConfig+0x5e8>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	600b      	str	r3, [r1, #0]
 8005e62:	e06c      	b.n	8005f3e <HAL_RCC_OscConfig+0x646>
 8005e64:	2301      	movs	r3, #1
 8005e66:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e6a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005e6e:	fa93 f3a3 	rbit	r3, r3
 8005e72:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8005e76:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e7a:	fab3 f383 	clz	r3, r3
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005e84:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e90:	f7fc ff78 	bl	8002d84 <HAL_GetTick>
 8005e94:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e98:	e00a      	b.n	8005eb0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e9a:	f7fc ff73 	bl	8002d84 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d902      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	f000 bd5a 	b.w	8006964 <HAL_RCC_OscConfig+0x106c>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005eba:	fa93 f3a3 	rbit	r3, r3
 8005ebe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8005ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ec6:	fab3 f383 	clz	r3, r3
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	095b      	lsrs	r3, r3, #5
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	f043 0301 	orr.w	r3, r3, #1
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d104      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x5ec>
 8005eda:	4b01      	ldr	r3, [pc, #4]	@ (8005ee0 <HAL_RCC_OscConfig+0x5e8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	e015      	b.n	8005f0c <HAL_RCC_OscConfig+0x614>
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005eee:	fa93 f3a3 	rbit	r3, r3
 8005ef2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005efc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f00:	fa93 f3a3 	rbit	r3, r3
 8005f04:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005f08:	4bc8      	ldr	r3, [pc, #800]	@ (800622c <HAL_RCC_OscConfig+0x934>)
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8005f12:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005f16:	fa92 f2a2 	rbit	r2, r2
 8005f1a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8005f1e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005f22:	fab2 f282 	clz	r2, r2
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	f042 0220 	orr.w	r2, r2, #32
 8005f2c:	b2d2      	uxtb	r2, r2
 8005f2e:	f002 021f 	and.w	r2, r2, #31
 8005f32:	2101      	movs	r1, #1
 8005f34:	fa01 f202 	lsl.w	r2, r1, r2
 8005f38:	4013      	ands	r3, r2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1ad      	bne.n	8005e9a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 8110 	beq.w	8006174 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d079      	beq.n	8006058 <HAL_RCC_OscConfig+0x760>
 8005f64:	2301      	movs	r3, #1
 8005f66:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005f6e:	fa93 f3a3 	rbit	r3, r3
 8005f72:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8005f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f7a:	fab3 f383 	clz	r3, r3
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	4bab      	ldr	r3, [pc, #684]	@ (8006230 <HAL_RCC_OscConfig+0x938>)
 8005f84:	4413      	add	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	461a      	mov	r2, r3
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f8e:	f7fc fef9 	bl	8002d84 <HAL_GetTick>
 8005f92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f96:	e00a      	b.n	8005fae <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f98:	f7fc fef4 	bl	8002d84 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d902      	bls.n	8005fae <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	f000 bcdb 	b.w	8006964 <HAL_RCC_OscConfig+0x106c>
 8005fae:	2302      	movs	r3, #2
 8005fb0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005fb8:	fa93 f3a3 	rbit	r3, r3
 8005fbc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005fc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fc4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005fc8:	2202      	movs	r2, #2
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fd0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	fa93 f2a3 	rbit	r2, r3
 8005fda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fec:	2202      	movs	r2, #2
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	fa93 f2a3 	rbit	r2, r3
 8005ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006002:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006006:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006008:	4b88      	ldr	r3, [pc, #544]	@ (800622c <HAL_RCC_OscConfig+0x934>)
 800600a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800600c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006010:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006014:	2102      	movs	r1, #2
 8006016:	6019      	str	r1, [r3, #0]
 8006018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800601c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	fa93 f1a3 	rbit	r1, r3
 8006026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800602a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800602e:	6019      	str	r1, [r3, #0]
  return result;
 8006030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006034:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	fab3 f383 	clz	r3, r3
 800603e:	b2db      	uxtb	r3, r3
 8006040:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006044:	b2db      	uxtb	r3, r3
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	2101      	movs	r1, #1
 800604c:	fa01 f303 	lsl.w	r3, r1, r3
 8006050:	4013      	ands	r3, r2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0a0      	beq.n	8005f98 <HAL_RCC_OscConfig+0x6a0>
 8006056:	e08d      	b.n	8006174 <HAL_RCC_OscConfig+0x87c>
 8006058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800605c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006060:	2201      	movs	r2, #1
 8006062:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006068:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	fa93 f2a3 	rbit	r2, r3
 8006072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006076:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800607a:	601a      	str	r2, [r3, #0]
  return result;
 800607c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006080:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006084:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006086:	fab3 f383 	clz	r3, r3
 800608a:	b2db      	uxtb	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	4b68      	ldr	r3, [pc, #416]	@ (8006230 <HAL_RCC_OscConfig+0x938>)
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	461a      	mov	r2, r3
 8006096:	2300      	movs	r3, #0
 8006098:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800609a:	f7fc fe73 	bl	8002d84 <HAL_GetTick>
 800609e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060a2:	e00a      	b.n	80060ba <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060a4:	f7fc fe6e 	bl	8002d84 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d902      	bls.n	80060ba <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	f000 bc55 	b.w	8006964 <HAL_RCC_OscConfig+0x106c>
 80060ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80060c2:	2202      	movs	r2, #2
 80060c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060ca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	fa93 f2a3 	rbit	r2, r3
 80060d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80060e6:	2202      	movs	r2, #2
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	fa93 f2a3 	rbit	r2, r3
 80060f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006106:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800610a:	2202      	movs	r2, #2
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006112:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	fa93 f2a3 	rbit	r2, r3
 800611c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006120:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006124:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006126:	4b41      	ldr	r3, [pc, #260]	@ (800622c <HAL_RCC_OscConfig+0x934>)
 8006128:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800612a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800612e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006132:	2102      	movs	r1, #2
 8006134:	6019      	str	r1, [r3, #0]
 8006136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800613a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	fa93 f1a3 	rbit	r1, r3
 8006144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006148:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800614c:	6019      	str	r1, [r3, #0]
  return result;
 800614e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006152:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	fab3 f383 	clz	r3, r3
 800615c:	b2db      	uxtb	r3, r3
 800615e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006162:	b2db      	uxtb	r3, r3
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	2101      	movs	r1, #1
 800616a:	fa01 f303 	lsl.w	r3, r1, r3
 800616e:	4013      	ands	r3, r2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d197      	bne.n	80060a4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006178:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 81a1 	beq.w	80064cc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800618a:	2300      	movs	r3, #0
 800618c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006190:	4b26      	ldr	r3, [pc, #152]	@ (800622c <HAL_RCC_OscConfig+0x934>)
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d116      	bne.n	80061ca <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800619c:	4b23      	ldr	r3, [pc, #140]	@ (800622c <HAL_RCC_OscConfig+0x934>)
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	4a22      	ldr	r2, [pc, #136]	@ (800622c <HAL_RCC_OscConfig+0x934>)
 80061a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061a6:	61d3      	str	r3, [r2, #28]
 80061a8:	4b20      	ldr	r3, [pc, #128]	@ (800622c <HAL_RCC_OscConfig+0x934>)
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80061b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061b4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061be:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80061c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80061c4:	2301      	movs	r3, #1
 80061c6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ca:	4b1a      	ldr	r3, [pc, #104]	@ (8006234 <HAL_RCC_OscConfig+0x93c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d11a      	bne.n	800620c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061d6:	4b17      	ldr	r3, [pc, #92]	@ (8006234 <HAL_RCC_OscConfig+0x93c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a16      	ldr	r2, [pc, #88]	@ (8006234 <HAL_RCC_OscConfig+0x93c>)
 80061dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061e2:	f7fc fdcf 	bl	8002d84 <HAL_GetTick>
 80061e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ea:	e009      	b.n	8006200 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061ec:	f7fc fdca 	bl	8002d84 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b64      	cmp	r3, #100	@ 0x64
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e3b1      	b.n	8006964 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006200:	4b0c      	ldr	r3, [pc, #48]	@ (8006234 <HAL_RCC_OscConfig+0x93c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0ef      	beq.n	80061ec <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800620c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006210:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d10d      	bne.n	8006238 <HAL_RCC_OscConfig+0x940>
 800621c:	4b03      	ldr	r3, [pc, #12]	@ (800622c <HAL_RCC_OscConfig+0x934>)
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	4a02      	ldr	r2, [pc, #8]	@ (800622c <HAL_RCC_OscConfig+0x934>)
 8006222:	f043 0301 	orr.w	r3, r3, #1
 8006226:	6213      	str	r3, [r2, #32]
 8006228:	e03c      	b.n	80062a4 <HAL_RCC_OscConfig+0x9ac>
 800622a:	bf00      	nop
 800622c:	40021000 	.word	0x40021000
 8006230:	10908120 	.word	0x10908120
 8006234:	40007000 	.word	0x40007000
 8006238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800623c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10c      	bne.n	8006262 <HAL_RCC_OscConfig+0x96a>
 8006248:	4bc1      	ldr	r3, [pc, #772]	@ (8006550 <HAL_RCC_OscConfig+0xc58>)
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	4ac0      	ldr	r2, [pc, #768]	@ (8006550 <HAL_RCC_OscConfig+0xc58>)
 800624e:	f023 0301 	bic.w	r3, r3, #1
 8006252:	6213      	str	r3, [r2, #32]
 8006254:	4bbe      	ldr	r3, [pc, #760]	@ (8006550 <HAL_RCC_OscConfig+0xc58>)
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	4abd      	ldr	r2, [pc, #756]	@ (8006550 <HAL_RCC_OscConfig+0xc58>)
 800625a:	f023 0304 	bic.w	r3, r3, #4
 800625e:	6213      	str	r3, [r2, #32]
 8006260:	e020      	b.n	80062a4 <HAL_RCC_OscConfig+0x9ac>
 8006262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006266:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	2b05      	cmp	r3, #5
 8006270:	d10c      	bne.n	800628c <HAL_RCC_OscConfig+0x994>
 8006272:	4bb7      	ldr	r3, [pc, #732]	@ (8006550 <HAL_RCC_OscConfig+0xc58>)
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	4ab6      	ldr	r2, [pc, #728]	@ (8006550 <HAL_RCC_OscConfig+0xc58>)
 8006278:	f043 0304 	orr.w	r3, r3, #4
 800627c:	6213      	str	r3, [r2, #32]
 800627e:	4bb4      	ldr	r3, [pc, #720]	@ (8006550 <HAL_RCC_OscConfig+0xc58>)
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	4ab3      	ldr	r2, [pc, #716]	@ (8006550 <HAL_RCC_OscConfig+0xc58>)
 8006284:	f043 0301 	orr.w	r3, r3, #1
 8006288:	6213      	str	r3, [r2, #32]
 800628a:	e00b      	b.n	80062a4 <HAL_RCC_OscConfig+0x9ac>
 800628c:	4bb0      	ldr	r3, [pc, #704]	@ (8006550 <HAL_RCC_OscConfig+0xc58>)
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	4aaf      	ldr	r2, [pc, #700]	@ (8006550 <HAL_RCC_OscConfig+0xc58>)
 8006292:	f023 0301 	bic.w	r3, r3, #1
 8006296:	6213      	str	r3, [r2, #32]
 8006298:	4bad      	ldr	r3, [pc, #692]	@ (8006550 <HAL_RCC_OscConfig+0xc58>)
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	4aac      	ldr	r2, [pc, #688]	@ (8006550 <HAL_RCC_OscConfig+0xc58>)
 800629e:	f023 0304 	bic.w	r3, r3, #4
 80062a2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 8081 	beq.w	80063b8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062b6:	f7fc fd65 	bl	8002d84 <HAL_GetTick>
 80062ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062be:	e00b      	b.n	80062d8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062c0:	f7fc fd60 	bl	8002d84 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e345      	b.n	8006964 <HAL_RCC_OscConfig+0x106c>
 80062d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062dc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80062e0:	2202      	movs	r2, #2
 80062e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	fa93 f2a3 	rbit	r2, r3
 80062f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062f6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006300:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006304:	2202      	movs	r2, #2
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800630c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	fa93 f2a3 	rbit	r2, r3
 8006316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800631a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800631e:	601a      	str	r2, [r3, #0]
  return result;
 8006320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006324:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006328:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800632a:	fab3 f383 	clz	r3, r3
 800632e:	b2db      	uxtb	r3, r3
 8006330:	095b      	lsrs	r3, r3, #5
 8006332:	b2db      	uxtb	r3, r3
 8006334:	f043 0302 	orr.w	r3, r3, #2
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b02      	cmp	r3, #2
 800633c:	d102      	bne.n	8006344 <HAL_RCC_OscConfig+0xa4c>
 800633e:	4b84      	ldr	r3, [pc, #528]	@ (8006550 <HAL_RCC_OscConfig+0xc58>)
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	e013      	b.n	800636c <HAL_RCC_OscConfig+0xa74>
 8006344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006348:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800634c:	2202      	movs	r2, #2
 800634e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006354:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	fa93 f2a3 	rbit	r2, r3
 800635e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006362:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	4b79      	ldr	r3, [pc, #484]	@ (8006550 <HAL_RCC_OscConfig+0xc58>)
 800636a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006370:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006374:	2102      	movs	r1, #2
 8006376:	6011      	str	r1, [r2, #0]
 8006378:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800637c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006380:	6812      	ldr	r2, [r2, #0]
 8006382:	fa92 f1a2 	rbit	r1, r2
 8006386:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800638a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800638e:	6011      	str	r1, [r2, #0]
  return result;
 8006390:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006394:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8006398:	6812      	ldr	r2, [r2, #0]
 800639a:	fab2 f282 	clz	r2, r2
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063a4:	b2d2      	uxtb	r2, r2
 80063a6:	f002 021f 	and.w	r2, r2, #31
 80063aa:	2101      	movs	r1, #1
 80063ac:	fa01 f202 	lsl.w	r2, r1, r2
 80063b0:	4013      	ands	r3, r2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d084      	beq.n	80062c0 <HAL_RCC_OscConfig+0x9c8>
 80063b6:	e07f      	b.n	80064b8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063b8:	f7fc fce4 	bl	8002d84 <HAL_GetTick>
 80063bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063c0:	e00b      	b.n	80063da <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063c2:	f7fc fcdf 	bl	8002d84 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e2c4      	b.n	8006964 <HAL_RCC_OscConfig+0x106c>
 80063da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063de:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80063e2:	2202      	movs	r2, #2
 80063e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063ea:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	fa93 f2a3 	rbit	r2, r3
 80063f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063f8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006402:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006406:	2202      	movs	r2, #2
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800640e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	fa93 f2a3 	rbit	r2, r3
 8006418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800641c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006420:	601a      	str	r2, [r3, #0]
  return result;
 8006422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006426:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800642a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800642c:	fab3 f383 	clz	r3, r3
 8006430:	b2db      	uxtb	r3, r3
 8006432:	095b      	lsrs	r3, r3, #5
 8006434:	b2db      	uxtb	r3, r3
 8006436:	f043 0302 	orr.w	r3, r3, #2
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d102      	bne.n	8006446 <HAL_RCC_OscConfig+0xb4e>
 8006440:	4b43      	ldr	r3, [pc, #268]	@ (8006550 <HAL_RCC_OscConfig+0xc58>)
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	e013      	b.n	800646e <HAL_RCC_OscConfig+0xb76>
 8006446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800644a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800644e:	2202      	movs	r2, #2
 8006450:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006456:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	fa93 f2a3 	rbit	r2, r3
 8006460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006464:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	4b39      	ldr	r3, [pc, #228]	@ (8006550 <HAL_RCC_OscConfig+0xc58>)
 800646c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006472:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8006476:	2102      	movs	r1, #2
 8006478:	6011      	str	r1, [r2, #0]
 800647a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800647e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	fa92 f1a2 	rbit	r1, r2
 8006488:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800648c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8006490:	6011      	str	r1, [r2, #0]
  return result;
 8006492:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006496:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800649a:	6812      	ldr	r2, [r2, #0]
 800649c:	fab2 f282 	clz	r2, r2
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	f002 021f 	and.w	r2, r2, #31
 80064ac:	2101      	movs	r1, #1
 80064ae:	fa01 f202 	lsl.w	r2, r1, r2
 80064b2:	4013      	ands	r3, r2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d184      	bne.n	80063c2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80064b8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d105      	bne.n	80064cc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064c0:	4b23      	ldr	r3, [pc, #140]	@ (8006550 <HAL_RCC_OscConfig+0xc58>)
 80064c2:	69db      	ldr	r3, [r3, #28]
 80064c4:	4a22      	ldr	r2, [pc, #136]	@ (8006550 <HAL_RCC_OscConfig+0xc58>)
 80064c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064ca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 8242 	beq.w	8006962 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064de:	4b1c      	ldr	r3, [pc, #112]	@ (8006550 <HAL_RCC_OscConfig+0xc58>)
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f003 030c 	and.w	r3, r3, #12
 80064e6:	2b08      	cmp	r3, #8
 80064e8:	f000 8213 	beq.w	8006912 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	f040 8162 	bne.w	80067c2 <HAL_RCC_OscConfig+0xeca>
 80064fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006502:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006506:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800650a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800650c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006510:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	fa93 f2a3 	rbit	r2, r3
 800651a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800651e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006522:	601a      	str	r2, [r3, #0]
  return result;
 8006524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006528:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800652c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800652e:	fab3 f383 	clz	r3, r3
 8006532:	b2db      	uxtb	r3, r3
 8006534:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006538:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	461a      	mov	r2, r3
 8006540:	2300      	movs	r3, #0
 8006542:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006544:	f7fc fc1e 	bl	8002d84 <HAL_GetTick>
 8006548:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800654c:	e00c      	b.n	8006568 <HAL_RCC_OscConfig+0xc70>
 800654e:	bf00      	nop
 8006550:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006554:	f7fc fc16 	bl	8002d84 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d901      	bls.n	8006568 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e1fd      	b.n	8006964 <HAL_RCC_OscConfig+0x106c>
 8006568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800656c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006570:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006574:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006576:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800657a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	fa93 f2a3 	rbit	r2, r3
 8006584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006588:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800658c:	601a      	str	r2, [r3, #0]
  return result;
 800658e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006592:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006596:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006598:	fab3 f383 	clz	r3, r3
 800659c:	b2db      	uxtb	r3, r3
 800659e:	095b      	lsrs	r3, r3, #5
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	f043 0301 	orr.w	r3, r3, #1
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d102      	bne.n	80065b2 <HAL_RCC_OscConfig+0xcba>
 80065ac:	4bb0      	ldr	r3, [pc, #704]	@ (8006870 <HAL_RCC_OscConfig+0xf78>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	e027      	b.n	8006602 <HAL_RCC_OscConfig+0xd0a>
 80065b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065b6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80065ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065c4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	fa93 f2a3 	rbit	r2, r3
 80065ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065d2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065dc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80065e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065ea:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	fa93 f2a3 	rbit	r2, r3
 80065f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065f8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	4b9c      	ldr	r3, [pc, #624]	@ (8006870 <HAL_RCC_OscConfig+0xf78>)
 8006600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006602:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006606:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800660a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800660e:	6011      	str	r1, [r2, #0]
 8006610:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006614:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006618:	6812      	ldr	r2, [r2, #0]
 800661a:	fa92 f1a2 	rbit	r1, r2
 800661e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006622:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006626:	6011      	str	r1, [r2, #0]
  return result;
 8006628:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800662c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006630:	6812      	ldr	r2, [r2, #0]
 8006632:	fab2 f282 	clz	r2, r2
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	f042 0220 	orr.w	r2, r2, #32
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	f002 021f 	and.w	r2, r2, #31
 8006642:	2101      	movs	r1, #1
 8006644:	fa01 f202 	lsl.w	r2, r1, r2
 8006648:	4013      	ands	r3, r2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d182      	bne.n	8006554 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800664e:	4b88      	ldr	r3, [pc, #544]	@ (8006870 <HAL_RCC_OscConfig+0xf78>)
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800665a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006666:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	430b      	orrs	r3, r1
 8006670:	497f      	ldr	r1, [pc, #508]	@ (8006870 <HAL_RCC_OscConfig+0xf78>)
 8006672:	4313      	orrs	r3, r2
 8006674:	604b      	str	r3, [r1, #4]
 8006676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800667a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800667e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006682:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006688:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	fa93 f2a3 	rbit	r2, r3
 8006692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006696:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800669a:	601a      	str	r2, [r3, #0]
  return result;
 800669c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066a0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80066a4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066a6:	fab3 f383 	clz	r3, r3
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80066b0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	461a      	mov	r2, r3
 80066b8:	2301      	movs	r3, #1
 80066ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066bc:	f7fc fb62 	bl	8002d84 <HAL_GetTick>
 80066c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066c4:	e009      	b.n	80066da <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066c6:	f7fc fb5d 	bl	8002d84 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d901      	bls.n	80066da <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e144      	b.n	8006964 <HAL_RCC_OscConfig+0x106c>
 80066da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066de:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80066e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80066e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066ec:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	fa93 f2a3 	rbit	r2, r3
 80066f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066fa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80066fe:	601a      	str	r2, [r3, #0]
  return result;
 8006700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006704:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006708:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800670a:	fab3 f383 	clz	r3, r3
 800670e:	b2db      	uxtb	r3, r3
 8006710:	095b      	lsrs	r3, r3, #5
 8006712:	b2db      	uxtb	r3, r3
 8006714:	f043 0301 	orr.w	r3, r3, #1
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b01      	cmp	r3, #1
 800671c:	d102      	bne.n	8006724 <HAL_RCC_OscConfig+0xe2c>
 800671e:	4b54      	ldr	r3, [pc, #336]	@ (8006870 <HAL_RCC_OscConfig+0xf78>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	e027      	b.n	8006774 <HAL_RCC_OscConfig+0xe7c>
 8006724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006728:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800672c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006730:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006736:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	fa93 f2a3 	rbit	r2, r3
 8006740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006744:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800674e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006752:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800675c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	fa93 f2a3 	rbit	r2, r3
 8006766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800676a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	4b3f      	ldr	r3, [pc, #252]	@ (8006870 <HAL_RCC_OscConfig+0xf78>)
 8006772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006774:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006778:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800677c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006780:	6011      	str	r1, [r2, #0]
 8006782:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006786:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	fa92 f1a2 	rbit	r1, r2
 8006790:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006794:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006798:	6011      	str	r1, [r2, #0]
  return result;
 800679a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800679e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80067a2:	6812      	ldr	r2, [r2, #0]
 80067a4:	fab2 f282 	clz	r2, r2
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	f042 0220 	orr.w	r2, r2, #32
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	f002 021f 	and.w	r2, r2, #31
 80067b4:	2101      	movs	r1, #1
 80067b6:	fa01 f202 	lsl.w	r2, r1, r2
 80067ba:	4013      	ands	r3, r2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d082      	beq.n	80066c6 <HAL_RCC_OscConfig+0xdce>
 80067c0:	e0cf      	b.n	8006962 <HAL_RCC_OscConfig+0x106a>
 80067c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067c6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80067ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067d4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	fa93 f2a3 	rbit	r2, r3
 80067de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067e2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80067e6:	601a      	str	r2, [r3, #0]
  return result;
 80067e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067ec:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80067f0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f2:	fab3 f383 	clz	r3, r3
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80067fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	461a      	mov	r2, r3
 8006804:	2300      	movs	r3, #0
 8006806:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006808:	f7fc fabc 	bl	8002d84 <HAL_GetTick>
 800680c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006810:	e009      	b.n	8006826 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006812:	f7fc fab7 	bl	8002d84 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e09e      	b.n	8006964 <HAL_RCC_OscConfig+0x106c>
 8006826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800682a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800682e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006832:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006838:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	fa93 f2a3 	rbit	r2, r3
 8006842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006846:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800684a:	601a      	str	r2, [r3, #0]
  return result;
 800684c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006850:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006854:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006856:	fab3 f383 	clz	r3, r3
 800685a:	b2db      	uxtb	r3, r3
 800685c:	095b      	lsrs	r3, r3, #5
 800685e:	b2db      	uxtb	r3, r3
 8006860:	f043 0301 	orr.w	r3, r3, #1
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b01      	cmp	r3, #1
 8006868:	d104      	bne.n	8006874 <HAL_RCC_OscConfig+0xf7c>
 800686a:	4b01      	ldr	r3, [pc, #4]	@ (8006870 <HAL_RCC_OscConfig+0xf78>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	e029      	b.n	80068c4 <HAL_RCC_OscConfig+0xfcc>
 8006870:	40021000 	.word	0x40021000
 8006874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006878:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800687c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006886:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	fa93 f2a3 	rbit	r2, r3
 8006890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006894:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800689e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80068a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068ac:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	fa93 f2a3 	rbit	r2, r3
 80068b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068ba:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006970 <HAL_RCC_OscConfig+0x1078>)
 80068c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80068c8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80068cc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80068d0:	6011      	str	r1, [r2, #0]
 80068d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80068d6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80068da:	6812      	ldr	r2, [r2, #0]
 80068dc:	fa92 f1a2 	rbit	r1, r2
 80068e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80068e4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80068e8:	6011      	str	r1, [r2, #0]
  return result;
 80068ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80068ee:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80068f2:	6812      	ldr	r2, [r2, #0]
 80068f4:	fab2 f282 	clz	r2, r2
 80068f8:	b2d2      	uxtb	r2, r2
 80068fa:	f042 0220 	orr.w	r2, r2, #32
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	f002 021f 	and.w	r2, r2, #31
 8006904:	2101      	movs	r1, #1
 8006906:	fa01 f202 	lsl.w	r2, r1, r2
 800690a:	4013      	ands	r3, r2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d180      	bne.n	8006812 <HAL_RCC_OscConfig+0xf1a>
 8006910:	e027      	b.n	8006962 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006916:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d101      	bne.n	8006926 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e01e      	b.n	8006964 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006926:	4b12      	ldr	r3, [pc, #72]	@ (8006970 <HAL_RCC_OscConfig+0x1078>)
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800692e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006932:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800693a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	429a      	cmp	r2, r3
 8006944:	d10b      	bne.n	800695e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006946:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800694a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800694e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006952:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800695a:	429a      	cmp	r2, r3
 800695c:	d001      	beq.n	8006962 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e000      	b.n	8006964 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	40021000 	.word	0x40021000

08006974 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b09e      	sub	sp, #120	@ 0x78
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e162      	b.n	8006c52 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800698c:	4b90      	ldr	r3, [pc, #576]	@ (8006bd0 <HAL_RCC_ClockConfig+0x25c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0307 	and.w	r3, r3, #7
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d910      	bls.n	80069bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800699a:	4b8d      	ldr	r3, [pc, #564]	@ (8006bd0 <HAL_RCC_ClockConfig+0x25c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f023 0207 	bic.w	r2, r3, #7
 80069a2:	498b      	ldr	r1, [pc, #556]	@ (8006bd0 <HAL_RCC_ClockConfig+0x25c>)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069aa:	4b89      	ldr	r3, [pc, #548]	@ (8006bd0 <HAL_RCC_ClockConfig+0x25c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d001      	beq.n	80069bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e14a      	b.n	8006c52 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d008      	beq.n	80069da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069c8:	4b82      	ldr	r3, [pc, #520]	@ (8006bd4 <HAL_RCC_ClockConfig+0x260>)
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	497f      	ldr	r1, [pc, #508]	@ (8006bd4 <HAL_RCC_ClockConfig+0x260>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 80dc 	beq.w	8006ba0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d13c      	bne.n	8006a6a <HAL_RCC_ClockConfig+0xf6>
 80069f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80069f4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069f8:	fa93 f3a3 	rbit	r3, r3
 80069fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80069fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a00:	fab3 f383 	clz	r3, r3
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	f043 0301 	orr.w	r3, r3, #1
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d102      	bne.n	8006a1a <HAL_RCC_ClockConfig+0xa6>
 8006a14:	4b6f      	ldr	r3, [pc, #444]	@ (8006bd4 <HAL_RCC_ClockConfig+0x260>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	e00f      	b.n	8006a3a <HAL_RCC_ClockConfig+0xc6>
 8006a1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a1e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a22:	fa93 f3a3 	rbit	r3, r3
 8006a26:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a30:	fa93 f3a3 	rbit	r3, r3
 8006a34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a36:	4b67      	ldr	r3, [pc, #412]	@ (8006bd4 <HAL_RCC_ClockConfig+0x260>)
 8006a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006a3e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006a40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a42:	fa92 f2a2 	rbit	r2, r2
 8006a46:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006a48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a4a:	fab2 f282 	clz	r2, r2
 8006a4e:	b2d2      	uxtb	r2, r2
 8006a50:	f042 0220 	orr.w	r2, r2, #32
 8006a54:	b2d2      	uxtb	r2, r2
 8006a56:	f002 021f 	and.w	r2, r2, #31
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8006a60:	4013      	ands	r3, r2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d17b      	bne.n	8006b5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e0f3      	b.n	8006c52 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d13c      	bne.n	8006aec <HAL_RCC_ClockConfig+0x178>
 8006a72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a76:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a7a:	fa93 f3a3 	rbit	r3, r3
 8006a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a82:	fab3 f383 	clz	r3, r3
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	095b      	lsrs	r3, r3, #5
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	f043 0301 	orr.w	r3, r3, #1
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d102      	bne.n	8006a9c <HAL_RCC_ClockConfig+0x128>
 8006a96:	4b4f      	ldr	r3, [pc, #316]	@ (8006bd4 <HAL_RCC_ClockConfig+0x260>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	e00f      	b.n	8006abc <HAL_RCC_ClockConfig+0x148>
 8006a9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aa4:	fa93 f3a3 	rbit	r3, r3
 8006aa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006aaa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006aae:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ab2:	fa93 f3a3 	rbit	r3, r3
 8006ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ab8:	4b46      	ldr	r3, [pc, #280]	@ (8006bd4 <HAL_RCC_ClockConfig+0x260>)
 8006aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006abc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ac0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006ac2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ac4:	fa92 f2a2 	rbit	r2, r2
 8006ac8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8006aca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006acc:	fab2 f282 	clz	r2, r2
 8006ad0:	b2d2      	uxtb	r2, r2
 8006ad2:	f042 0220 	orr.w	r2, r2, #32
 8006ad6:	b2d2      	uxtb	r2, r2
 8006ad8:	f002 021f 	and.w	r2, r2, #31
 8006adc:	2101      	movs	r1, #1
 8006ade:	fa01 f202 	lsl.w	r2, r1, r2
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d13a      	bne.n	8006b5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e0b2      	b.n	8006c52 <HAL_RCC_ClockConfig+0x2de>
 8006aec:	2302      	movs	r3, #2
 8006aee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af2:	fa93 f3a3 	rbit	r3, r3
 8006af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006afa:	fab3 f383 	clz	r3, r3
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	095b      	lsrs	r3, r3, #5
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d102      	bne.n	8006b14 <HAL_RCC_ClockConfig+0x1a0>
 8006b0e:	4b31      	ldr	r3, [pc, #196]	@ (8006bd4 <HAL_RCC_ClockConfig+0x260>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	e00d      	b.n	8006b30 <HAL_RCC_ClockConfig+0x1bc>
 8006b14:	2302      	movs	r3, #2
 8006b16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1a:	fa93 f3a3 	rbit	r3, r3
 8006b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b20:	2302      	movs	r3, #2
 8006b22:	623b      	str	r3, [r7, #32]
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	fa93 f3a3 	rbit	r3, r3
 8006b2a:	61fb      	str	r3, [r7, #28]
 8006b2c:	4b29      	ldr	r3, [pc, #164]	@ (8006bd4 <HAL_RCC_ClockConfig+0x260>)
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b30:	2202      	movs	r2, #2
 8006b32:	61ba      	str	r2, [r7, #24]
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	fa92 f2a2 	rbit	r2, r2
 8006b3a:	617a      	str	r2, [r7, #20]
  return result;
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	fab2 f282 	clz	r2, r2
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	f042 0220 	orr.w	r2, r2, #32
 8006b48:	b2d2      	uxtb	r2, r2
 8006b4a:	f002 021f 	and.w	r2, r2, #31
 8006b4e:	2101      	movs	r1, #1
 8006b50:	fa01 f202 	lsl.w	r2, r1, r2
 8006b54:	4013      	ands	r3, r2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e079      	b.n	8006c52 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8006bd4 <HAL_RCC_ClockConfig+0x260>)
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f023 0203 	bic.w	r2, r3, #3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	491a      	ldr	r1, [pc, #104]	@ (8006bd4 <HAL_RCC_ClockConfig+0x260>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b70:	f7fc f908 	bl	8002d84 <HAL_GetTick>
 8006b74:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b76:	e00a      	b.n	8006b8e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b78:	f7fc f904 	bl	8002d84 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e061      	b.n	8006c52 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b8e:	4b11      	ldr	r3, [pc, #68]	@ (8006bd4 <HAL_RCC_ClockConfig+0x260>)
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f003 020c 	and.w	r2, r3, #12
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d1eb      	bne.n	8006b78 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd0 <HAL_RCC_ClockConfig+0x25c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d214      	bcs.n	8006bd8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bae:	4b08      	ldr	r3, [pc, #32]	@ (8006bd0 <HAL_RCC_ClockConfig+0x25c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f023 0207 	bic.w	r2, r3, #7
 8006bb6:	4906      	ldr	r1, [pc, #24]	@ (8006bd0 <HAL_RCC_ClockConfig+0x25c>)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bbe:	4b04      	ldr	r3, [pc, #16]	@ (8006bd0 <HAL_RCC_ClockConfig+0x25c>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d005      	beq.n	8006bd8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e040      	b.n	8006c52 <HAL_RCC_ClockConfig+0x2de>
 8006bd0:	40022000 	.word	0x40022000
 8006bd4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d008      	beq.n	8006bf6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006be4:	4b1d      	ldr	r3, [pc, #116]	@ (8006c5c <HAL_RCC_ClockConfig+0x2e8>)
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	491a      	ldr	r1, [pc, #104]	@ (8006c5c <HAL_RCC_ClockConfig+0x2e8>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0308 	and.w	r3, r3, #8
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d009      	beq.n	8006c16 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c02:	4b16      	ldr	r3, [pc, #88]	@ (8006c5c <HAL_RCC_ClockConfig+0x2e8>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	4912      	ldr	r1, [pc, #72]	@ (8006c5c <HAL_RCC_ClockConfig+0x2e8>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006c16:	f000 f829 	bl	8006c6c <HAL_RCC_GetSysClockFreq>
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c5c <HAL_RCC_ClockConfig+0x2e8>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c24:	22f0      	movs	r2, #240	@ 0xf0
 8006c26:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	fa92 f2a2 	rbit	r2, r2
 8006c2e:	60fa      	str	r2, [r7, #12]
  return result;
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	fab2 f282 	clz	r2, r2
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	40d3      	lsrs	r3, r2
 8006c3a:	4a09      	ldr	r2, [pc, #36]	@ (8006c60 <HAL_RCC_ClockConfig+0x2ec>)
 8006c3c:	5cd3      	ldrb	r3, [r2, r3]
 8006c3e:	fa21 f303 	lsr.w	r3, r1, r3
 8006c42:	4a08      	ldr	r2, [pc, #32]	@ (8006c64 <HAL_RCC_ClockConfig+0x2f0>)
 8006c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006c46:	4b08      	ldr	r3, [pc, #32]	@ (8006c68 <HAL_RCC_ClockConfig+0x2f4>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fc f856 	bl	8002cfc <HAL_InitTick>
  
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3778      	adds	r7, #120	@ 0x78
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	0801386c 	.word	0x0801386c
 8006c64:	20000010 	.word	0x20000010
 8006c68:	20000014 	.word	0x20000014

08006c6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b08b      	sub	sp, #44	@ 0x2c
 8006c70:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	2300      	movs	r3, #0
 8006c78:	61bb      	str	r3, [r7, #24]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c7e:	2300      	movs	r3, #0
 8006c80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006c86:	4b29      	ldr	r3, [pc, #164]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	f003 030c 	and.w	r3, r3, #12
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d002      	beq.n	8006c9c <HAL_RCC_GetSysClockFreq+0x30>
 8006c96:	2b08      	cmp	r3, #8
 8006c98:	d003      	beq.n	8006ca2 <HAL_RCC_GetSysClockFreq+0x36>
 8006c9a:	e03c      	b.n	8006d16 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006c9c:	4b24      	ldr	r3, [pc, #144]	@ (8006d30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006c9e:	623b      	str	r3, [r7, #32]
      break;
 8006ca0:	e03c      	b.n	8006d1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8006ca8:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8006cac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	fa92 f2a2 	rbit	r2, r2
 8006cb4:	607a      	str	r2, [r7, #4]
  return result;
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	fab2 f282 	clz	r2, r2
 8006cbc:	b2d2      	uxtb	r2, r2
 8006cbe:	40d3      	lsrs	r3, r2
 8006cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8006d34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006cc2:	5cd3      	ldrb	r3, [r2, r3]
 8006cc4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006cc6:	4b19      	ldr	r3, [pc, #100]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cca:	f003 030f 	and.w	r3, r3, #15
 8006cce:	220f      	movs	r2, #15
 8006cd0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	fa92 f2a2 	rbit	r2, r2
 8006cd8:	60fa      	str	r2, [r7, #12]
  return result;
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	fab2 f282 	clz	r2, r2
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	40d3      	lsrs	r3, r2
 8006ce4:	4a14      	ldr	r2, [pc, #80]	@ (8006d38 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006ce6:	5cd3      	ldrb	r3, [r2, r3]
 8006ce8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d008      	beq.n	8006d06 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006cf4:	4a0e      	ldr	r2, [pc, #56]	@ (8006d30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	fb02 f303 	mul.w	r3, r2, r3
 8006d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d04:	e004      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	4a0c      	ldr	r2, [pc, #48]	@ (8006d3c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006d0a:	fb02 f303 	mul.w	r3, r2, r3
 8006d0e:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d12:	623b      	str	r3, [r7, #32]
      break;
 8006d14:	e002      	b.n	8006d1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d16:	4b0a      	ldr	r3, [pc, #40]	@ (8006d40 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006d18:	623b      	str	r3, [r7, #32]
      break;
 8006d1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	372c      	adds	r7, #44	@ 0x2c
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40021000 	.word	0x40021000
 8006d30:	00b71b00 	.word	0x00b71b00
 8006d34:	08013884 	.word	0x08013884
 8006d38:	08013894 	.word	0x08013894
 8006d3c:	003d0900 	.word	0x003d0900
 8006d40:	007a1200 	.word	0x007a1200

08006d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d44:	b480      	push	{r7}
 8006d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d48:	4b03      	ldr	r3, [pc, #12]	@ (8006d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	20000010 	.word	0x20000010

08006d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006d62:	f7ff ffef 	bl	8006d44 <HAL_RCC_GetHCLKFreq>
 8006d66:	4601      	mov	r1, r0
 8006d68:	4b0b      	ldr	r3, [pc, #44]	@ (8006d98 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d70:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006d74:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	fa92 f2a2 	rbit	r2, r2
 8006d7c:	603a      	str	r2, [r7, #0]
  return result;
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	fab2 f282 	clz	r2, r2
 8006d84:	b2d2      	uxtb	r2, r2
 8006d86:	40d3      	lsrs	r3, r2
 8006d88:	4a04      	ldr	r2, [pc, #16]	@ (8006d9c <HAL_RCC_GetPCLK1Freq+0x40>)
 8006d8a:	5cd3      	ldrb	r3, [r2, r3]
 8006d8c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006d90:	4618      	mov	r0, r3
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	40021000 	.word	0x40021000
 8006d9c:	0801387c 	.word	0x0801387c

08006da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006da6:	f7ff ffcd 	bl	8006d44 <HAL_RCC_GetHCLKFreq>
 8006daa:	4601      	mov	r1, r0
 8006dac:	4b0b      	ldr	r3, [pc, #44]	@ (8006ddc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8006db4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8006db8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	fa92 f2a2 	rbit	r2, r2
 8006dc0:	603a      	str	r2, [r7, #0]
  return result;
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	fab2 f282 	clz	r2, r2
 8006dc8:	b2d2      	uxtb	r2, r2
 8006dca:	40d3      	lsrs	r3, r2
 8006dcc:	4a04      	ldr	r2, [pc, #16]	@ (8006de0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006dce:	5cd3      	ldrb	r3, [r2, r3]
 8006dd0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	40021000 	.word	0x40021000
 8006de0:	0801387c 	.word	0x0801387c

08006de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b092      	sub	sp, #72	@ 0x48
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006df4:	2300      	movs	r3, #0
 8006df6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 80d4 	beq.w	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e08:	4b4e      	ldr	r3, [pc, #312]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e0a:	69db      	ldr	r3, [r3, #28]
 8006e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10e      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e14:	4b4b      	ldr	r3, [pc, #300]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	4a4a      	ldr	r2, [pc, #296]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e1e:	61d3      	str	r3, [r2, #28]
 8006e20:	4b48      	ldr	r3, [pc, #288]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e28:	60bb      	str	r3, [r7, #8]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e32:	4b45      	ldr	r3, [pc, #276]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d118      	bne.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e3e:	4b42      	ldr	r3, [pc, #264]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a41      	ldr	r2, [pc, #260]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e4a:	f7fb ff9b 	bl	8002d84 <HAL_GetTick>
 8006e4e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e50:	e008      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e52:	f7fb ff97 	bl	8002d84 <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	2b64      	cmp	r3, #100	@ 0x64
 8006e5e:	d901      	bls.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e12d      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e64:	4b38      	ldr	r3, [pc, #224]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0f0      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e70:	4b34      	ldr	r3, [pc, #208]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 8084 	beq.w	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e8a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d07c      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e90:	4b2c      	ldr	r3, [pc, #176]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006e9e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea2:	fa93 f3a3 	rbit	r3, r3
 8006ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006eaa:	fab3 f383 	clz	r3, r3
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	4b26      	ldr	r3, [pc, #152]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006eb4:	4413      	add	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	461a      	mov	r2, r3
 8006eba:	2301      	movs	r3, #1
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec6:	fa93 f3a3 	rbit	r3, r3
 8006eca:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ece:	fab3 f383 	clz	r3, r3
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ed8:	4413      	add	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	461a      	mov	r2, r3
 8006ede:	2300      	movs	r3, #0
 8006ee0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006ee2:	4a18      	ldr	r2, [pc, #96]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ee6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d04b      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ef2:	f7fb ff47 	bl	8002d84 <HAL_GetTick>
 8006ef6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ef8:	e00a      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006efa:	f7fb ff43 	bl	8002d84 <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d901      	bls.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e0d7      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8006f10:	2302      	movs	r3, #2
 8006f12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f16:	fa93 f3a3 	rbit	r3, r3
 8006f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	623b      	str	r3, [r7, #32]
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	fa93 f3a3 	rbit	r3, r3
 8006f26:	61fb      	str	r3, [r7, #28]
  return result;
 8006f28:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f2a:	fab3 f383 	clz	r3, r3
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	095b      	lsrs	r3, r3, #5
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	f043 0302 	orr.w	r3, r3, #2
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d108      	bne.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006f3e:	4b01      	ldr	r3, [pc, #4]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	e00d      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006f44:	40021000 	.word	0x40021000
 8006f48:	40007000 	.word	0x40007000
 8006f4c:	10908100 	.word	0x10908100
 8006f50:	2302      	movs	r3, #2
 8006f52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	fa93 f3a3 	rbit	r3, r3
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	4b5a      	ldr	r3, [pc, #360]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f60:	2202      	movs	r2, #2
 8006f62:	613a      	str	r2, [r7, #16]
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	fa92 f2a2 	rbit	r2, r2
 8006f6a:	60fa      	str	r2, [r7, #12]
  return result;
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	fab2 f282 	clz	r2, r2
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f78:	b2d2      	uxtb	r2, r2
 8006f7a:	f002 021f 	and.w	r2, r2, #31
 8006f7e:	2101      	movs	r1, #1
 8006f80:	fa01 f202 	lsl.w	r2, r1, r2
 8006f84:	4013      	ands	r3, r2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0b7      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006f8a:	4b4f      	ldr	r3, [pc, #316]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	494c      	ldr	r1, [pc, #304]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006f9c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d105      	bne.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fa4:	4b48      	ldr	r3, [pc, #288]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006fa6:	69db      	ldr	r3, [r3, #28]
 8006fa8:	4a47      	ldr	r2, [pc, #284]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006faa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d008      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fbc:	4b42      	ldr	r3, [pc, #264]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc0:	f023 0203 	bic.w	r2, r3, #3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	493f      	ldr	r1, [pc, #252]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d008      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006fda:	4b3b      	ldr	r3, [pc, #236]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fde:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	4938      	ldr	r1, [pc, #224]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0304 	and.w	r3, r3, #4
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d008      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ff8:	4b33      	ldr	r3, [pc, #204]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ffc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	4930      	ldr	r1, [pc, #192]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007006:	4313      	orrs	r3, r2
 8007008:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0320 	and.w	r3, r3, #32
 8007012:	2b00      	cmp	r3, #0
 8007014:	d008      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007016:	4b2c      	ldr	r3, [pc, #176]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701a:	f023 0210 	bic.w	r2, r3, #16
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	4929      	ldr	r1, [pc, #164]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007024:	4313      	orrs	r3, r2
 8007026:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d008      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007034:	4b24      	ldr	r3, [pc, #144]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007040:	4921      	ldr	r1, [pc, #132]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007042:	4313      	orrs	r3, r2
 8007044:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800704e:	2b00      	cmp	r3, #0
 8007050:	d008      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007052:	4b1d      	ldr	r3, [pc, #116]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007056:	f023 0220 	bic.w	r2, r3, #32
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	491a      	ldr	r1, [pc, #104]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007060:	4313      	orrs	r3, r2
 8007062:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800706c:	2b00      	cmp	r3, #0
 800706e:	d008      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8007070:	4b15      	ldr	r3, [pc, #84]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	4912      	ldr	r1, [pc, #72]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800707e:	4313      	orrs	r3, r2
 8007080:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800708a:	2b00      	cmp	r3, #0
 800708c:	d008      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 800708e:	4b0e      	ldr	r3, [pc, #56]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	490b      	ldr	r1, [pc, #44]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800709c:	4313      	orrs	r3, r2
 800709e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d008      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80070ac:	4b06      	ldr	r3, [pc, #24]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80070ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b8:	4903      	ldr	r1, [pc, #12]	@ (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3748      	adds	r7, #72	@ 0x48
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	40021000 	.word	0x40021000

080070cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e041      	b.n	8007162 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d106      	bne.n	80070f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7fb faa0 	bl	8002638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2202      	movs	r2, #2
 80070fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	3304      	adds	r3, #4
 8007108:	4619      	mov	r1, r3
 800710a:	4610      	mov	r0, r2
 800710c:	f000 ff84 	bl	8008018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b01      	cmp	r3, #1
 800717e:	d001      	beq.n	8007184 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e041      	b.n	8007208 <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007194:	d01d      	beq.n	80071d2 <HAL_TIM_Base_Start+0x66>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a1e      	ldr	r2, [pc, #120]	@ (8007214 <HAL_TIM_Base_Start+0xa8>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d018      	beq.n	80071d2 <HAL_TIM_Base_Start+0x66>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007218 <HAL_TIM_Base_Start+0xac>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d013      	beq.n	80071d2 <HAL_TIM_Base_Start+0x66>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a1b      	ldr	r2, [pc, #108]	@ (800721c <HAL_TIM_Base_Start+0xb0>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d00e      	beq.n	80071d2 <HAL_TIM_Base_Start+0x66>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a19      	ldr	r2, [pc, #100]	@ (8007220 <HAL_TIM_Base_Start+0xb4>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d009      	beq.n	80071d2 <HAL_TIM_Base_Start+0x66>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a18      	ldr	r2, [pc, #96]	@ (8007224 <HAL_TIM_Base_Start+0xb8>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d004      	beq.n	80071d2 <HAL_TIM_Base_Start+0x66>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a16      	ldr	r2, [pc, #88]	@ (8007228 <HAL_TIM_Base_Start+0xbc>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d111      	bne.n	80071f6 <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f003 0307 	and.w	r3, r3, #7
 80071dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2b06      	cmp	r3, #6
 80071e2:	d010      	beq.n	8007206 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f042 0201 	orr.w	r2, r2, #1
 80071f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f4:	e007      	b.n	8007206 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f042 0201 	orr.w	r2, r2, #1
 8007204:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	40000400 	.word	0x40000400
 8007218:	40000800 	.word	0x40000800
 800721c:	40000c00 	.word	0x40000c00
 8007220:	40001800 	.word	0x40001800
 8007224:	40014000 	.word	0x40014000
 8007228:	40015c00 	.word	0x40015c00

0800722c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800723a:	b2db      	uxtb	r3, r3
 800723c:	2b01      	cmp	r3, #1
 800723e:	d001      	beq.n	8007244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e049      	b.n	80072d8 <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68da      	ldr	r2, [r3, #12]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f042 0201 	orr.w	r2, r2, #1
 800725a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007264:	d01d      	beq.n	80072a2 <HAL_TIM_Base_Start_IT+0x76>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a1e      	ldr	r2, [pc, #120]	@ (80072e4 <HAL_TIM_Base_Start_IT+0xb8>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d018      	beq.n	80072a2 <HAL_TIM_Base_Start_IT+0x76>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a1c      	ldr	r2, [pc, #112]	@ (80072e8 <HAL_TIM_Base_Start_IT+0xbc>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d013      	beq.n	80072a2 <HAL_TIM_Base_Start_IT+0x76>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a1b      	ldr	r2, [pc, #108]	@ (80072ec <HAL_TIM_Base_Start_IT+0xc0>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d00e      	beq.n	80072a2 <HAL_TIM_Base_Start_IT+0x76>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a19      	ldr	r2, [pc, #100]	@ (80072f0 <HAL_TIM_Base_Start_IT+0xc4>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d009      	beq.n	80072a2 <HAL_TIM_Base_Start_IT+0x76>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a18      	ldr	r2, [pc, #96]	@ (80072f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d004      	beq.n	80072a2 <HAL_TIM_Base_Start_IT+0x76>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a16      	ldr	r2, [pc, #88]	@ (80072f8 <HAL_TIM_Base_Start_IT+0xcc>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d111      	bne.n	80072c6 <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f003 0307 	and.w	r3, r3, #7
 80072ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b06      	cmp	r3, #6
 80072b2:	d010      	beq.n	80072d6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f042 0201 	orr.w	r2, r2, #1
 80072c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c4:	e007      	b.n	80072d6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f042 0201 	orr.w	r2, r2, #1
 80072d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	40000400 	.word	0x40000400
 80072e8:	40000800 	.word	0x40000800
 80072ec:	40000c00 	.word	0x40000c00
 80072f0:	40001800 	.word	0x40001800
 80072f4:	40014000 	.word	0x40014000
 80072f8:	40015c00 	.word	0x40015c00

080072fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e041      	b.n	8007392 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d106      	bne.n	8007328 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7fb f964 	bl	80025f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	3304      	adds	r3, #4
 8007338:	4619      	mov	r1, r3
 800733a:	4610      	mov	r0, r2
 800733c:	f000 fe6c 	bl	8008018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d109      	bne.n	80073c0 <HAL_TIM_PWM_Start+0x24>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	bf14      	ite	ne
 80073b8:	2301      	movne	r3, #1
 80073ba:	2300      	moveq	r3, #0
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	e022      	b.n	8007406 <HAL_TIM_PWM_Start+0x6a>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2b04      	cmp	r3, #4
 80073c4:	d109      	bne.n	80073da <HAL_TIM_PWM_Start+0x3e>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	bf14      	ite	ne
 80073d2:	2301      	movne	r3, #1
 80073d4:	2300      	moveq	r3, #0
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	e015      	b.n	8007406 <HAL_TIM_PWM_Start+0x6a>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d109      	bne.n	80073f4 <HAL_TIM_PWM_Start+0x58>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	bf14      	ite	ne
 80073ec:	2301      	movne	r3, #1
 80073ee:	2300      	moveq	r3, #0
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	e008      	b.n	8007406 <HAL_TIM_PWM_Start+0x6a>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	bf14      	ite	ne
 8007400:	2301      	movne	r3, #1
 8007402:	2300      	moveq	r3, #0
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e07c      	b.n	8007508 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d104      	bne.n	800741e <HAL_TIM_PWM_Start+0x82>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2202      	movs	r2, #2
 8007418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800741c:	e013      	b.n	8007446 <HAL_TIM_PWM_Start+0xaa>
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b04      	cmp	r3, #4
 8007422:	d104      	bne.n	800742e <HAL_TIM_PWM_Start+0x92>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2202      	movs	r2, #2
 8007428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800742c:	e00b      	b.n	8007446 <HAL_TIM_PWM_Start+0xaa>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b08      	cmp	r3, #8
 8007432:	d104      	bne.n	800743e <HAL_TIM_PWM_Start+0xa2>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800743c:	e003      	b.n	8007446 <HAL_TIM_PWM_Start+0xaa>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2202      	movs	r2, #2
 8007442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2201      	movs	r2, #1
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	4618      	mov	r0, r3
 8007450:	f001 f86f 	bl	8008532 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a2d      	ldr	r2, [pc, #180]	@ (8007510 <HAL_TIM_PWM_Start+0x174>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d009      	beq.n	8007472 <HAL_TIM_PWM_Start+0xd6>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a2c      	ldr	r2, [pc, #176]	@ (8007514 <HAL_TIM_PWM_Start+0x178>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d004      	beq.n	8007472 <HAL_TIM_PWM_Start+0xd6>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a2a      	ldr	r2, [pc, #168]	@ (8007518 <HAL_TIM_PWM_Start+0x17c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d101      	bne.n	8007476 <HAL_TIM_PWM_Start+0xda>
 8007472:	2301      	movs	r3, #1
 8007474:	e000      	b.n	8007478 <HAL_TIM_PWM_Start+0xdc>
 8007476:	2300      	movs	r3, #0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d007      	beq.n	800748c <HAL_TIM_PWM_Start+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800748a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007494:	d01d      	beq.n	80074d2 <HAL_TIM_PWM_Start+0x136>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a20      	ldr	r2, [pc, #128]	@ (800751c <HAL_TIM_PWM_Start+0x180>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d018      	beq.n	80074d2 <HAL_TIM_PWM_Start+0x136>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a1e      	ldr	r2, [pc, #120]	@ (8007520 <HAL_TIM_PWM_Start+0x184>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d013      	beq.n	80074d2 <HAL_TIM_PWM_Start+0x136>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a1d      	ldr	r2, [pc, #116]	@ (8007524 <HAL_TIM_PWM_Start+0x188>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d00e      	beq.n	80074d2 <HAL_TIM_PWM_Start+0x136>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a1b      	ldr	r2, [pc, #108]	@ (8007528 <HAL_TIM_PWM_Start+0x18c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d009      	beq.n	80074d2 <HAL_TIM_PWM_Start+0x136>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a13      	ldr	r2, [pc, #76]	@ (8007510 <HAL_TIM_PWM_Start+0x174>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d004      	beq.n	80074d2 <HAL_TIM_PWM_Start+0x136>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a17      	ldr	r2, [pc, #92]	@ (800752c <HAL_TIM_PWM_Start+0x190>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d111      	bne.n	80074f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f003 0307 	and.w	r3, r3, #7
 80074dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2b06      	cmp	r3, #6
 80074e2:	d010      	beq.n	8007506 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f042 0201 	orr.w	r2, r2, #1
 80074f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f4:	e007      	b.n	8007506 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f042 0201 	orr.w	r2, r2, #1
 8007504:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	40014000 	.word	0x40014000
 8007514:	40014400 	.word	0x40014400
 8007518:	40014800 	.word	0x40014800
 800751c:	40000400 	.word	0x40000400
 8007520:	40000800 	.word	0x40000800
 8007524:	40000c00 	.word	0x40000c00
 8007528:	40001800 	.word	0x40001800
 800752c:	40015c00 	.word	0x40015c00

08007530 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2200      	movs	r2, #0
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	4618      	mov	r0, r3
 8007544:	f000 fff5 	bl	8008532 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a31      	ldr	r2, [pc, #196]	@ (8007614 <HAL_TIM_PWM_Stop+0xe4>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d009      	beq.n	8007566 <HAL_TIM_PWM_Stop+0x36>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a30      	ldr	r2, [pc, #192]	@ (8007618 <HAL_TIM_PWM_Stop+0xe8>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d004      	beq.n	8007566 <HAL_TIM_PWM_Stop+0x36>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a2e      	ldr	r2, [pc, #184]	@ (800761c <HAL_TIM_PWM_Stop+0xec>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d101      	bne.n	800756a <HAL_TIM_PWM_Stop+0x3a>
 8007566:	2301      	movs	r3, #1
 8007568:	e000      	b.n	800756c <HAL_TIM_PWM_Stop+0x3c>
 800756a:	2300      	movs	r3, #0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d017      	beq.n	80075a0 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6a1a      	ldr	r2, [r3, #32]
 8007576:	f241 1311 	movw	r3, #4369	@ 0x1111
 800757a:	4013      	ands	r3, r2
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10f      	bne.n	80075a0 <HAL_TIM_PWM_Stop+0x70>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6a1a      	ldr	r2, [r3, #32]
 8007586:	f240 4344 	movw	r3, #1092	@ 0x444
 800758a:	4013      	ands	r3, r2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d107      	bne.n	80075a0 <HAL_TIM_PWM_Stop+0x70>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800759e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6a1a      	ldr	r2, [r3, #32]
 80075a6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80075aa:	4013      	ands	r3, r2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10f      	bne.n	80075d0 <HAL_TIM_PWM_Stop+0xa0>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6a1a      	ldr	r2, [r3, #32]
 80075b6:	f240 4344 	movw	r3, #1092	@ 0x444
 80075ba:	4013      	ands	r3, r2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d107      	bne.n	80075d0 <HAL_TIM_PWM_Stop+0xa0>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 0201 	bic.w	r2, r2, #1
 80075ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d104      	bne.n	80075e0 <HAL_TIM_PWM_Stop+0xb0>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075de:	e013      	b.n	8007608 <HAL_TIM_PWM_Stop+0xd8>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d104      	bne.n	80075f0 <HAL_TIM_PWM_Stop+0xc0>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075ee:	e00b      	b.n	8007608 <HAL_TIM_PWM_Stop+0xd8>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	2b08      	cmp	r3, #8
 80075f4:	d104      	bne.n	8007600 <HAL_TIM_PWM_Stop+0xd0>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075fe:	e003      	b.n	8007608 <HAL_TIM_PWM_Stop+0xd8>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	40014000 	.word	0x40014000
 8007618:	40014400 	.word	0x40014400
 800761c:	40014800 	.word	0x40014800

08007620 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d109      	bne.n	8007648 <HAL_TIM_PWM_Start_IT+0x28>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b01      	cmp	r3, #1
 800763e:	bf14      	ite	ne
 8007640:	2301      	movne	r3, #1
 8007642:	2300      	moveq	r3, #0
 8007644:	b2db      	uxtb	r3, r3
 8007646:	e022      	b.n	800768e <HAL_TIM_PWM_Start_IT+0x6e>
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2b04      	cmp	r3, #4
 800764c:	d109      	bne.n	8007662 <HAL_TIM_PWM_Start_IT+0x42>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b01      	cmp	r3, #1
 8007658:	bf14      	ite	ne
 800765a:	2301      	movne	r3, #1
 800765c:	2300      	moveq	r3, #0
 800765e:	b2db      	uxtb	r3, r3
 8007660:	e015      	b.n	800768e <HAL_TIM_PWM_Start_IT+0x6e>
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b08      	cmp	r3, #8
 8007666:	d109      	bne.n	800767c <HAL_TIM_PWM_Start_IT+0x5c>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b01      	cmp	r3, #1
 8007672:	bf14      	ite	ne
 8007674:	2301      	movne	r3, #1
 8007676:	2300      	moveq	r3, #0
 8007678:	b2db      	uxtb	r3, r3
 800767a:	e008      	b.n	800768e <HAL_TIM_PWM_Start_IT+0x6e>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b01      	cmp	r3, #1
 8007686:	bf14      	ite	ne
 8007688:	2301      	movne	r3, #1
 800768a:	2300      	moveq	r3, #0
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e0c7      	b.n	8007826 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d104      	bne.n	80076a6 <HAL_TIM_PWM_Start_IT+0x86>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2202      	movs	r2, #2
 80076a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076a4:	e013      	b.n	80076ce <HAL_TIM_PWM_Start_IT+0xae>
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	2b04      	cmp	r3, #4
 80076aa:	d104      	bne.n	80076b6 <HAL_TIM_PWM_Start_IT+0x96>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076b4:	e00b      	b.n	80076ce <HAL_TIM_PWM_Start_IT+0xae>
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	2b08      	cmp	r3, #8
 80076ba:	d104      	bne.n	80076c6 <HAL_TIM_PWM_Start_IT+0xa6>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2202      	movs	r2, #2
 80076c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076c4:	e003      	b.n	80076ce <HAL_TIM_PWM_Start_IT+0xae>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2202      	movs	r2, #2
 80076ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b0c      	cmp	r3, #12
 80076d2:	d841      	bhi.n	8007758 <HAL_TIM_PWM_Start_IT+0x138>
 80076d4:	a201      	add	r2, pc, #4	@ (adr r2, 80076dc <HAL_TIM_PWM_Start_IT+0xbc>)
 80076d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076da:	bf00      	nop
 80076dc:	08007711 	.word	0x08007711
 80076e0:	08007759 	.word	0x08007759
 80076e4:	08007759 	.word	0x08007759
 80076e8:	08007759 	.word	0x08007759
 80076ec:	08007723 	.word	0x08007723
 80076f0:	08007759 	.word	0x08007759
 80076f4:	08007759 	.word	0x08007759
 80076f8:	08007759 	.word	0x08007759
 80076fc:	08007735 	.word	0x08007735
 8007700:	08007759 	.word	0x08007759
 8007704:	08007759 	.word	0x08007759
 8007708:	08007759 	.word	0x08007759
 800770c:	08007747 	.word	0x08007747
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68da      	ldr	r2, [r3, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0202 	orr.w	r2, r2, #2
 800771e:	60da      	str	r2, [r3, #12]
      break;
 8007720:	e01d      	b.n	800775e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68da      	ldr	r2, [r3, #12]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f042 0204 	orr.w	r2, r2, #4
 8007730:	60da      	str	r2, [r3, #12]
      break;
 8007732:	e014      	b.n	800775e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0208 	orr.w	r2, r2, #8
 8007742:	60da      	str	r2, [r3, #12]
      break;
 8007744:	e00b      	b.n	800775e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68da      	ldr	r2, [r3, #12]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f042 0210 	orr.w	r2, r2, #16
 8007754:	60da      	str	r2, [r3, #12]
      break;
 8007756:	e002      	b.n	800775e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	73fb      	strb	r3, [r7, #15]
      break;
 800775c:	bf00      	nop
  }

  if (status == HAL_OK)
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d15f      	bne.n	8007824 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2201      	movs	r2, #1
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	4618      	mov	r0, r3
 800776e:	f000 fee0 	bl	8008532 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a2e      	ldr	r2, [pc, #184]	@ (8007830 <HAL_TIM_PWM_Start_IT+0x210>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d009      	beq.n	8007790 <HAL_TIM_PWM_Start_IT+0x170>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a2c      	ldr	r2, [pc, #176]	@ (8007834 <HAL_TIM_PWM_Start_IT+0x214>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d004      	beq.n	8007790 <HAL_TIM_PWM_Start_IT+0x170>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a2b      	ldr	r2, [pc, #172]	@ (8007838 <HAL_TIM_PWM_Start_IT+0x218>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d101      	bne.n	8007794 <HAL_TIM_PWM_Start_IT+0x174>
 8007790:	2301      	movs	r3, #1
 8007792:	e000      	b.n	8007796 <HAL_TIM_PWM_Start_IT+0x176>
 8007794:	2300      	movs	r3, #0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d007      	beq.n	80077aa <HAL_TIM_PWM_Start_IT+0x18a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077b2:	d01d      	beq.n	80077f0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a20      	ldr	r2, [pc, #128]	@ (800783c <HAL_TIM_PWM_Start_IT+0x21c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d018      	beq.n	80077f0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a1f      	ldr	r2, [pc, #124]	@ (8007840 <HAL_TIM_PWM_Start_IT+0x220>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d013      	beq.n	80077f0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a1d      	ldr	r2, [pc, #116]	@ (8007844 <HAL_TIM_PWM_Start_IT+0x224>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d00e      	beq.n	80077f0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a1c      	ldr	r2, [pc, #112]	@ (8007848 <HAL_TIM_PWM_Start_IT+0x228>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d009      	beq.n	80077f0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a13      	ldr	r2, [pc, #76]	@ (8007830 <HAL_TIM_PWM_Start_IT+0x210>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d004      	beq.n	80077f0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a18      	ldr	r2, [pc, #96]	@ (800784c <HAL_TIM_PWM_Start_IT+0x22c>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d111      	bne.n	8007814 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 0307 	and.w	r3, r3, #7
 80077fa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b06      	cmp	r3, #6
 8007800:	d010      	beq.n	8007824 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f042 0201 	orr.w	r2, r2, #1
 8007810:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007812:	e007      	b.n	8007824 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f042 0201 	orr.w	r2, r2, #1
 8007822:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007824:	7bfb      	ldrb	r3, [r7, #15]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	40014000 	.word	0x40014000
 8007834:	40014400 	.word	0x40014400
 8007838:	40014800 	.word	0x40014800
 800783c:	40000400 	.word	0x40000400
 8007840:	40000800 	.word	0x40000800
 8007844:	40000c00 	.word	0x40000c00
 8007848:	40001800 	.word	0x40001800
 800784c:	40015c00 	.word	0x40015c00

08007850 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e097      	b.n	8007994 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800786a:	b2db      	uxtb	r3, r3
 800786c:	2b00      	cmp	r3, #0
 800786e:	d106      	bne.n	800787e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7fa ff03 	bl	8002684 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2202      	movs	r2, #2
 8007882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	6812      	ldr	r2, [r2, #0]
 8007890:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007894:	f023 0307 	bic.w	r3, r3, #7
 8007898:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3304      	adds	r3, #4
 80078a2:	4619      	mov	r1, r3
 80078a4:	4610      	mov	r0, r2
 80078a6:	f000 fbb7 	bl	8008018 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078d2:	f023 0303 	bic.w	r3, r3, #3
 80078d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	021b      	lsls	r3, r3, #8
 80078e2:	4313      	orrs	r3, r2
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80078f0:	f023 030c 	bic.w	r3, r3, #12
 80078f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80078fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007900:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	68da      	ldr	r2, [r3, #12]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	021b      	lsls	r3, r3, #8
 800790c:	4313      	orrs	r3, r2
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	4313      	orrs	r3, r2
 8007912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	011a      	lsls	r2, r3, #4
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	031b      	lsls	r3, r3, #12
 8007920:	4313      	orrs	r3, r2
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	4313      	orrs	r3, r2
 8007926:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800792e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007936:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	695b      	ldr	r3, [r3, #20]
 8007940:	011b      	lsls	r3, r3, #4
 8007942:	4313      	orrs	r3, r2
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	4313      	orrs	r3, r2
 8007948:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3718      	adds	r7, #24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80079b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079c4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d110      	bne.n	80079ee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d102      	bne.n	80079d8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80079d2:	7b7b      	ldrb	r3, [r7, #13]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d001      	beq.n	80079dc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e069      	b.n	8007ab0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2202      	movs	r2, #2
 80079e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079ec:	e031      	b.n	8007a52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d110      	bne.n	8007a16 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d102      	bne.n	8007a00 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80079fa:	7b3b      	ldrb	r3, [r7, #12]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d001      	beq.n	8007a04 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e055      	b.n	8007ab0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a14:	e01d      	b.n	8007a52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d108      	bne.n	8007a2e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d105      	bne.n	8007a2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a22:	7b7b      	ldrb	r3, [r7, #13]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d102      	bne.n	8007a2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a28:	7b3b      	ldrb	r3, [r7, #12]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d001      	beq.n	8007a32 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e03e      	b.n	8007ab0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2202      	movs	r2, #2
 8007a36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2202      	movs	r2, #2
 8007a3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2202      	movs	r2, #2
 8007a46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <HAL_TIM_Encoder_Start+0xc4>
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2b04      	cmp	r3, #4
 8007a5c:	d008      	beq.n	8007a70 <HAL_TIM_Encoder_Start+0xd4>
 8007a5e:	e00f      	b.n	8007a80 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2201      	movs	r2, #1
 8007a66:	2100      	movs	r1, #0
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 fd62 	bl	8008532 <TIM_CCxChannelCmd>
      break;
 8007a6e:	e016      	b.n	8007a9e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2201      	movs	r2, #1
 8007a76:	2104      	movs	r1, #4
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 fd5a 	bl	8008532 <TIM_CCxChannelCmd>
      break;
 8007a7e:	e00e      	b.n	8007a9e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2201      	movs	r2, #1
 8007a86:	2100      	movs	r1, #0
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 fd52 	bl	8008532 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2201      	movs	r2, #1
 8007a94:	2104      	movs	r1, #4
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fd4b 	bl	8008532 <TIM_CCxChannelCmd>
      break;
 8007a9c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f042 0201 	orr.w	r2, r2, #1
 8007aac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d122      	bne.n	8007b14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d11b      	bne.n	8007b14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f06f 0202 	mvn.w	r2, #2
 8007ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	f003 0303 	and.w	r3, r3, #3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fa77 	bl	8007fee <HAL_TIM_IC_CaptureCallback>
 8007b00:	e005      	b.n	8007b0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fa69 	bl	8007fda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7f9 fefb 	bl	8001904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f003 0304 	and.w	r3, r3, #4
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	d122      	bne.n	8007b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f003 0304 	and.w	r3, r3, #4
 8007b2c:	2b04      	cmp	r3, #4
 8007b2e:	d11b      	bne.n	8007b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f06f 0204 	mvn.w	r2, #4
 8007b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fa4d 	bl	8007fee <HAL_TIM_IC_CaptureCallback>
 8007b54:	e005      	b.n	8007b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fa3f 	bl	8007fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f7f9 fed1 	bl	8001904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	f003 0308 	and.w	r3, r3, #8
 8007b72:	2b08      	cmp	r3, #8
 8007b74:	d122      	bne.n	8007bbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	f003 0308 	and.w	r3, r3, #8
 8007b80:	2b08      	cmp	r3, #8
 8007b82:	d11b      	bne.n	8007bbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f06f 0208 	mvn.w	r2, #8
 8007b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2204      	movs	r2, #4
 8007b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	f003 0303 	and.w	r3, r3, #3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fa23 	bl	8007fee <HAL_TIM_IC_CaptureCallback>
 8007ba8:	e005      	b.n	8007bb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fa15 	bl	8007fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7f9 fea7 	bl	8001904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f003 0310 	and.w	r3, r3, #16
 8007bc6:	2b10      	cmp	r3, #16
 8007bc8:	d122      	bne.n	8007c10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	f003 0310 	and.w	r3, r3, #16
 8007bd4:	2b10      	cmp	r3, #16
 8007bd6:	d11b      	bne.n	8007c10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f06f 0210 	mvn.w	r2, #16
 8007be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2208      	movs	r2, #8
 8007be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f9f9 	bl	8007fee <HAL_TIM_IC_CaptureCallback>
 8007bfc:	e005      	b.n	8007c0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f9eb 	bl	8007fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7f9 fe7d 	bl	8001904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d10e      	bne.n	8007c3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d107      	bne.n	8007c3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f06f 0201 	mvn.w	r2, #1
 8007c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7fa fa42 	bl	80020c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c46:	2b80      	cmp	r3, #128	@ 0x80
 8007c48:	d10e      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c54:	2b80      	cmp	r3, #128	@ 0x80
 8007c56:	d107      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fd08 	bl	8008678 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c72:	2b40      	cmp	r3, #64	@ 0x40
 8007c74:	d10e      	bne.n	8007c94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c80:	2b40      	cmp	r3, #64	@ 0x40
 8007c82:	d107      	bne.n	8007c94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f9b7 	bl	8008002 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	f003 0320 	and.w	r3, r3, #32
 8007c9e:	2b20      	cmp	r3, #32
 8007ca0:	d10e      	bne.n	8007cc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f003 0320 	and.w	r3, r3, #32
 8007cac:	2b20      	cmp	r3, #32
 8007cae:	d107      	bne.n	8007cc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f06f 0220 	mvn.w	r2, #32
 8007cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fcd2 	bl	8008664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cc0:	bf00      	nop
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d101      	bne.n	8007ce6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	e0ae      	b.n	8007e44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b0c      	cmp	r3, #12
 8007cf2:	f200 809f 	bhi.w	8007e34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfc:	08007d31 	.word	0x08007d31
 8007d00:	08007e35 	.word	0x08007e35
 8007d04:	08007e35 	.word	0x08007e35
 8007d08:	08007e35 	.word	0x08007e35
 8007d0c:	08007d71 	.word	0x08007d71
 8007d10:	08007e35 	.word	0x08007e35
 8007d14:	08007e35 	.word	0x08007e35
 8007d18:	08007e35 	.word	0x08007e35
 8007d1c:	08007db3 	.word	0x08007db3
 8007d20:	08007e35 	.word	0x08007e35
 8007d24:	08007e35 	.word	0x08007e35
 8007d28:	08007e35 	.word	0x08007e35
 8007d2c:	08007df3 	.word	0x08007df3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68b9      	ldr	r1, [r7, #8]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 fa08 	bl	800814c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	699a      	ldr	r2, [r3, #24]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f042 0208 	orr.w	r2, r2, #8
 8007d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	699a      	ldr	r2, [r3, #24]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f022 0204 	bic.w	r2, r2, #4
 8007d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6999      	ldr	r1, [r3, #24]
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	691a      	ldr	r2, [r3, #16]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	430a      	orrs	r2, r1
 8007d6c:	619a      	str	r2, [r3, #24]
      break;
 8007d6e:	e064      	b.n	8007e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68b9      	ldr	r1, [r7, #8]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 fa62 	bl	8008240 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699a      	ldr	r2, [r3, #24]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	699a      	ldr	r2, [r3, #24]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6999      	ldr	r1, [r3, #24]
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	021a      	lsls	r2, r3, #8
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	430a      	orrs	r2, r1
 8007dae:	619a      	str	r2, [r3, #24]
      break;
 8007db0:	e043      	b.n	8007e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68b9      	ldr	r1, [r7, #8]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f000 faa3 	bl	8008304 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	69da      	ldr	r2, [r3, #28]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f042 0208 	orr.w	r2, r2, #8
 8007dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	69da      	ldr	r2, [r3, #28]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 0204 	bic.w	r2, r2, #4
 8007ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	69d9      	ldr	r1, [r3, #28]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	691a      	ldr	r2, [r3, #16]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	430a      	orrs	r2, r1
 8007dee:	61da      	str	r2, [r3, #28]
      break;
 8007df0:	e023      	b.n	8007e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68b9      	ldr	r1, [r7, #8]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 fac1 	bl	8008380 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	69da      	ldr	r2, [r3, #28]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	69da      	ldr	r2, [r3, #28]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	69d9      	ldr	r1, [r3, #28]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	021a      	lsls	r2, r3, #8
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	61da      	str	r2, [r3, #28]
      break;
 8007e32:	e002      	b.n	8007e3a <HAL_TIM_PWM_ConfigChannel+0x172>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	75fb      	strb	r3, [r7, #23]
      break;
 8007e38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d101      	bne.n	8007e68 <HAL_TIM_ConfigClockSource+0x1c>
 8007e64:	2302      	movs	r3, #2
 8007e66:	e0b4      	b.n	8007fd2 <HAL_TIM_ConfigClockSource+0x186>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2202      	movs	r2, #2
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ea0:	d03e      	beq.n	8007f20 <HAL_TIM_ConfigClockSource+0xd4>
 8007ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ea6:	f200 8087 	bhi.w	8007fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eae:	f000 8086 	beq.w	8007fbe <HAL_TIM_ConfigClockSource+0x172>
 8007eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eb6:	d87f      	bhi.n	8007fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007eb8:	2b70      	cmp	r3, #112	@ 0x70
 8007eba:	d01a      	beq.n	8007ef2 <HAL_TIM_ConfigClockSource+0xa6>
 8007ebc:	2b70      	cmp	r3, #112	@ 0x70
 8007ebe:	d87b      	bhi.n	8007fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ec0:	2b60      	cmp	r3, #96	@ 0x60
 8007ec2:	d050      	beq.n	8007f66 <HAL_TIM_ConfigClockSource+0x11a>
 8007ec4:	2b60      	cmp	r3, #96	@ 0x60
 8007ec6:	d877      	bhi.n	8007fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ec8:	2b50      	cmp	r3, #80	@ 0x50
 8007eca:	d03c      	beq.n	8007f46 <HAL_TIM_ConfigClockSource+0xfa>
 8007ecc:	2b50      	cmp	r3, #80	@ 0x50
 8007ece:	d873      	bhi.n	8007fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ed0:	2b40      	cmp	r3, #64	@ 0x40
 8007ed2:	d058      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x13a>
 8007ed4:	2b40      	cmp	r3, #64	@ 0x40
 8007ed6:	d86f      	bhi.n	8007fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ed8:	2b30      	cmp	r3, #48	@ 0x30
 8007eda:	d064      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8007edc:	2b30      	cmp	r3, #48	@ 0x30
 8007ede:	d86b      	bhi.n	8007fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ee0:	2b20      	cmp	r3, #32
 8007ee2:	d060      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8007ee4:	2b20      	cmp	r3, #32
 8007ee6:	d867      	bhi.n	8007fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d05c      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8007eec:	2b10      	cmp	r3, #16
 8007eee:	d05a      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8007ef0:	e062      	b.n	8007fb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f02:	f000 faf6 	bl	80084f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	609a      	str	r2, [r3, #8]
      break;
 8007f1e:	e04f      	b.n	8007fc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f30:	f000 fadf 	bl	80084f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689a      	ldr	r2, [r3, #8]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f42:	609a      	str	r2, [r3, #8]
      break;
 8007f44:	e03c      	b.n	8007fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f52:	461a      	mov	r2, r3
 8007f54:	f000 fa53 	bl	80083fe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2150      	movs	r1, #80	@ 0x50
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 faac 	bl	80084bc <TIM_ITRx_SetConfig>
      break;
 8007f64:	e02c      	b.n	8007fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f72:	461a      	mov	r2, r3
 8007f74:	f000 fa72 	bl	800845c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2160      	movs	r1, #96	@ 0x60
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 fa9c 	bl	80084bc <TIM_ITRx_SetConfig>
      break;
 8007f84:	e01c      	b.n	8007fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f92:	461a      	mov	r2, r3
 8007f94:	f000 fa33 	bl	80083fe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2140      	movs	r1, #64	@ 0x40
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 fa8c 	bl	80084bc <TIM_ITRx_SetConfig>
      break;
 8007fa4:	e00c      	b.n	8007fc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	f000 fa83 	bl	80084bc <TIM_ITRx_SetConfig>
      break;
 8007fb6:	e003      	b.n	8007fc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	73fb      	strb	r3, [r7, #15]
      break;
 8007fbc:	e000      	b.n	8007fc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fe2:	bf00      	nop
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008002:	b480      	push	{r7}
 8008004:	b083      	sub	sp, #12
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800800a:	bf00      	nop
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
	...

08008018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800802e:	d00f      	beq.n	8008050 <TIM_Base_SetConfig+0x38>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a3c      	ldr	r2, [pc, #240]	@ (8008124 <TIM_Base_SetConfig+0x10c>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d00b      	beq.n	8008050 <TIM_Base_SetConfig+0x38>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a3b      	ldr	r2, [pc, #236]	@ (8008128 <TIM_Base_SetConfig+0x110>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d007      	beq.n	8008050 <TIM_Base_SetConfig+0x38>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a3a      	ldr	r2, [pc, #232]	@ (800812c <TIM_Base_SetConfig+0x114>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d003      	beq.n	8008050 <TIM_Base_SetConfig+0x38>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a39      	ldr	r2, [pc, #228]	@ (8008130 <TIM_Base_SetConfig+0x118>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d108      	bne.n	8008062 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	4313      	orrs	r3, r2
 8008060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008068:	d027      	beq.n	80080ba <TIM_Base_SetConfig+0xa2>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a2d      	ldr	r2, [pc, #180]	@ (8008124 <TIM_Base_SetConfig+0x10c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d023      	beq.n	80080ba <TIM_Base_SetConfig+0xa2>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a2c      	ldr	r2, [pc, #176]	@ (8008128 <TIM_Base_SetConfig+0x110>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d01f      	beq.n	80080ba <TIM_Base_SetConfig+0xa2>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a2b      	ldr	r2, [pc, #172]	@ (800812c <TIM_Base_SetConfig+0x114>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d01b      	beq.n	80080ba <TIM_Base_SetConfig+0xa2>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a2b      	ldr	r2, [pc, #172]	@ (8008134 <TIM_Base_SetConfig+0x11c>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d017      	beq.n	80080ba <TIM_Base_SetConfig+0xa2>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a2a      	ldr	r2, [pc, #168]	@ (8008138 <TIM_Base_SetConfig+0x120>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d013      	beq.n	80080ba <TIM_Base_SetConfig+0xa2>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a29      	ldr	r2, [pc, #164]	@ (800813c <TIM_Base_SetConfig+0x124>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d00f      	beq.n	80080ba <TIM_Base_SetConfig+0xa2>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a28      	ldr	r2, [pc, #160]	@ (8008140 <TIM_Base_SetConfig+0x128>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d00b      	beq.n	80080ba <TIM_Base_SetConfig+0xa2>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a27      	ldr	r2, [pc, #156]	@ (8008144 <TIM_Base_SetConfig+0x12c>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d007      	beq.n	80080ba <TIM_Base_SetConfig+0xa2>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a26      	ldr	r2, [pc, #152]	@ (8008148 <TIM_Base_SetConfig+0x130>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d003      	beq.n	80080ba <TIM_Base_SetConfig+0xa2>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a1e      	ldr	r2, [pc, #120]	@ (8008130 <TIM_Base_SetConfig+0x118>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d108      	bne.n	80080cc <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a13      	ldr	r2, [pc, #76]	@ (8008140 <TIM_Base_SetConfig+0x128>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d007      	beq.n	8008108 <TIM_Base_SetConfig+0xf0>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a12      	ldr	r2, [pc, #72]	@ (8008144 <TIM_Base_SetConfig+0x12c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d003      	beq.n	8008108 <TIM_Base_SetConfig+0xf0>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a11      	ldr	r2, [pc, #68]	@ (8008148 <TIM_Base_SetConfig+0x130>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d103      	bne.n	8008110 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	691a      	ldr	r2, [r3, #16]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	615a      	str	r2, [r3, #20]
}
 8008116:	bf00      	nop
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	40000400 	.word	0x40000400
 8008128:	40000800 	.word	0x40000800
 800812c:	40000c00 	.word	0x40000c00
 8008130:	40015c00 	.word	0x40015c00
 8008134:	40001800 	.word	0x40001800
 8008138:	40001c00 	.word	0x40001c00
 800813c:	40002000 	.word	0x40002000
 8008140:	40014000 	.word	0x40014000
 8008144:	40014400 	.word	0x40014400
 8008148:	40014800 	.word	0x40014800

0800814c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800814c:	b480      	push	{r7}
 800814e:	b087      	sub	sp, #28
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	f023 0201 	bic.w	r2, r3, #1
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800817a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f023 0303 	bic.w	r3, r3, #3
 8008182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	4313      	orrs	r3, r2
 800818c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f023 0302 	bic.w	r3, r3, #2
 8008194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	4313      	orrs	r3, r2
 800819e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a24      	ldr	r2, [pc, #144]	@ (8008234 <TIM_OC1_SetConfig+0xe8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d007      	beq.n	80081b8 <TIM_OC1_SetConfig+0x6c>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a23      	ldr	r2, [pc, #140]	@ (8008238 <TIM_OC1_SetConfig+0xec>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d003      	beq.n	80081b8 <TIM_OC1_SetConfig+0x6c>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a22      	ldr	r2, [pc, #136]	@ (800823c <TIM_OC1_SetConfig+0xf0>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d10c      	bne.n	80081d2 <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	f023 0308 	bic.w	r3, r3, #8
 80081be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	f023 0304 	bic.w	r3, r3, #4
 80081d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a17      	ldr	r2, [pc, #92]	@ (8008234 <TIM_OC1_SetConfig+0xe8>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d007      	beq.n	80081ea <TIM_OC1_SetConfig+0x9e>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a16      	ldr	r2, [pc, #88]	@ (8008238 <TIM_OC1_SetConfig+0xec>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d003      	beq.n	80081ea <TIM_OC1_SetConfig+0x9e>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a15      	ldr	r2, [pc, #84]	@ (800823c <TIM_OC1_SetConfig+0xf0>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d111      	bne.n	800820e <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80081f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	4313      	orrs	r3, r2
 8008202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	4313      	orrs	r3, r2
 800820c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	621a      	str	r2, [r3, #32]
}
 8008228:	bf00      	nop
 800822a:	371c      	adds	r7, #28
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	40014000 	.word	0x40014000
 8008238:	40014400 	.word	0x40014400
 800823c:	40014800 	.word	0x40014800

08008240 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008240:	b480      	push	{r7}
 8008242:	b087      	sub	sp, #28
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	f023 0210 	bic.w	r2, r3, #16
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800826e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	021b      	lsls	r3, r3, #8
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	4313      	orrs	r3, r2
 8008282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	f023 0320 	bic.w	r3, r3, #32
 800828a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	011b      	lsls	r3, r3, #4
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	4313      	orrs	r3, r2
 8008296:	613b      	str	r3, [r7, #16]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a17      	ldr	r2, [pc, #92]	@ (80082f8 <TIM_OC2_SetConfig+0xb8>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d007      	beq.n	80082b0 <TIM_OC2_SetConfig+0x70>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a16      	ldr	r2, [pc, #88]	@ (80082fc <TIM_OC2_SetConfig+0xbc>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d003      	beq.n	80082b0 <TIM_OC2_SetConfig+0x70>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a15      	ldr	r2, [pc, #84]	@ (8008300 <TIM_OC2_SetConfig+0xc0>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d10f      	bne.n	80082d0 <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80082b6:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	621a      	str	r2, [r3, #32]
}
 80082ea:	bf00      	nop
 80082ec:	371c      	adds	r7, #28
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	40014000 	.word	0x40014000
 80082fc:	40014400 	.word	0x40014400
 8008300:	40014800 	.word	0x40014800

08008304 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008304:	b480      	push	{r7}
 8008306:	b087      	sub	sp, #28
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	69db      	ldr	r3, [r3, #28]
 800832a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f023 0303 	bic.w	r3, r3, #3
 800833a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	4313      	orrs	r3, r2
 8008344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800834c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	021b      	lsls	r3, r3, #8
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	4313      	orrs	r3, r2
 8008358:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	621a      	str	r2, [r3, #32]
}
 8008374:	bf00      	nop
 8008376:	371c      	adds	r7, #28
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008380:	b480      	push	{r7}
 8008382:	b087      	sub	sp, #28
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	69db      	ldr	r3, [r3, #28]
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	021b      	lsls	r3, r3, #8
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	031b      	lsls	r3, r3, #12
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	685a      	ldr	r2, [r3, #4]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	621a      	str	r2, [r3, #32]
}
 80083f2:	bf00      	nop
 80083f4:	371c      	adds	r7, #28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083fe:	b480      	push	{r7}
 8008400:	b087      	sub	sp, #28
 8008402:	af00      	add	r7, sp, #0
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	60b9      	str	r1, [r7, #8]
 8008408:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	f023 0201 	bic.w	r2, r3, #1
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008428:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	011b      	lsls	r3, r3, #4
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	4313      	orrs	r3, r2
 8008432:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f023 030a 	bic.w	r3, r3, #10
 800843a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	4313      	orrs	r3, r2
 8008442:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	697a      	ldr	r2, [r7, #20]
 800844e:	621a      	str	r2, [r3, #32]
}
 8008450:	bf00      	nop
 8008452:	371c      	adds	r7, #28
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800845c:	b480      	push	{r7}
 800845e:	b087      	sub	sp, #28
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	f023 0210 	bic.w	r2, r3, #16
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008486:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	031b      	lsls	r3, r3, #12
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	4313      	orrs	r3, r2
 8008490:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008498:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	011b      	lsls	r3, r3, #4
 800849e:	693a      	ldr	r2, [r7, #16]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	621a      	str	r2, [r3, #32]
}
 80084b0:	bf00      	nop
 80084b2:	371c      	adds	r7, #28
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	4313      	orrs	r3, r2
 80084da:	f043 0307 	orr.w	r3, r3, #7
 80084de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	609a      	str	r2, [r3, #8]
}
 80084e6:	bf00      	nop
 80084e8:	3714      	adds	r7, #20
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084f2:	b480      	push	{r7}
 80084f4:	b087      	sub	sp, #28
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	60f8      	str	r0, [r7, #12]
 80084fa:	60b9      	str	r1, [r7, #8]
 80084fc:	607a      	str	r2, [r7, #4]
 80084fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800850c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	021a      	lsls	r2, r3, #8
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	431a      	orrs	r2, r3
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	4313      	orrs	r3, r2
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	4313      	orrs	r3, r2
 800851e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	609a      	str	r2, [r3, #8]
}
 8008526:	bf00      	nop
 8008528:	371c      	adds	r7, #28
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008532:	b480      	push	{r7}
 8008534:	b087      	sub	sp, #28
 8008536:	af00      	add	r7, sp, #0
 8008538:	60f8      	str	r0, [r7, #12]
 800853a:	60b9      	str	r1, [r7, #8]
 800853c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	f003 031f 	and.w	r3, r3, #31
 8008544:	2201      	movs	r2, #1
 8008546:	fa02 f303 	lsl.w	r3, r2, r3
 800854a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a1a      	ldr	r2, [r3, #32]
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	43db      	mvns	r3, r3
 8008554:	401a      	ands	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6a1a      	ldr	r2, [r3, #32]
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	f003 031f 	and.w	r3, r3, #31
 8008564:	6879      	ldr	r1, [r7, #4]
 8008566:	fa01 f303 	lsl.w	r3, r1, r3
 800856a:	431a      	orrs	r2, r3
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	621a      	str	r2, [r3, #32]
}
 8008570:	bf00      	nop
 8008572:	371c      	adds	r7, #28
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800858c:	2b01      	cmp	r3, #1
 800858e:	d101      	bne.n	8008594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008590:	2302      	movs	r3, #2
 8008592:	e055      	b.n	8008640 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085d6:	d01d      	beq.n	8008614 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a1b      	ldr	r2, [pc, #108]	@ (800864c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d018      	beq.n	8008614 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a1a      	ldr	r2, [pc, #104]	@ (8008650 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d013      	beq.n	8008614 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a18      	ldr	r2, [pc, #96]	@ (8008654 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d00e      	beq.n	8008614 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a17      	ldr	r2, [pc, #92]	@ (8008658 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d009      	beq.n	8008614 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a15      	ldr	r2, [pc, #84]	@ (800865c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d004      	beq.n	8008614 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a14      	ldr	r2, [pc, #80]	@ (8008660 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d10c      	bne.n	800862e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800861a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	4313      	orrs	r3, r2
 8008624:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	40000400 	.word	0x40000400
 8008650:	40000800 	.word	0x40000800
 8008654:	40000c00 	.word	0x40000c00
 8008658:	40001800 	.word	0x40001800
 800865c:	40014000 	.word	0x40014000
 8008660:	40015c00 	.word	0x40015c00

08008664 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e040      	b.n	8008720 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d106      	bne.n	80086b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7fa f886 	bl	80027c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2224      	movs	r2, #36	@ 0x24
 80086b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f022 0201 	bic.w	r2, r2, #1
 80086c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fc54 	bl	8008f78 <UART_SetConfig>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d101      	bne.n	80086da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e022      	b.n	8008720 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d002      	beq.n	80086e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fdc2 	bl	800926c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80086f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	689a      	ldr	r2, [r3, #8]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008706:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f042 0201 	orr.w	r2, r2, #1
 8008716:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fe49 	bl	80093b0 <UART_CheckIdleState>
 800871e:	4603      	mov	r3, r0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08a      	sub	sp, #40	@ 0x28
 800872c:	af02      	add	r7, sp, #8
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	603b      	str	r3, [r7, #0]
 8008734:	4613      	mov	r3, r2
 8008736:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800873c:	2b20      	cmp	r3, #32
 800873e:	d177      	bne.n	8008830 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <HAL_UART_Transmit+0x24>
 8008746:	88fb      	ldrh	r3, [r7, #6]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d101      	bne.n	8008750 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e070      	b.n	8008832 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2221      	movs	r2, #33	@ 0x21
 800875c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800875e:	f7fa fb11 	bl	8002d84 <HAL_GetTick>
 8008762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	88fa      	ldrh	r2, [r7, #6]
 8008768:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	88fa      	ldrh	r2, [r7, #6]
 8008770:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800877c:	d108      	bne.n	8008790 <HAL_UART_Transmit+0x68>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d104      	bne.n	8008790 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008786:	2300      	movs	r3, #0
 8008788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	61bb      	str	r3, [r7, #24]
 800878e:	e003      	b.n	8008798 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008794:	2300      	movs	r3, #0
 8008796:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008798:	e02f      	b.n	80087fa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	2200      	movs	r2, #0
 80087a2:	2180      	movs	r1, #128	@ 0x80
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 feab 	bl	8009500 <UART_WaitOnFlagUntilTimeout>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d004      	beq.n	80087ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2220      	movs	r2, #32
 80087b4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e03b      	b.n	8008832 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10b      	bne.n	80087d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	881a      	ldrh	r2, [r3, #0]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087cc:	b292      	uxth	r2, r2
 80087ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	3302      	adds	r3, #2
 80087d4:	61bb      	str	r3, [r7, #24]
 80087d6:	e007      	b.n	80087e8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	781a      	ldrb	r2, [r3, #0]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	3301      	adds	r3, #1
 80087e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	3b01      	subs	r3, #1
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008800:	b29b      	uxth	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1c9      	bne.n	800879a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	2200      	movs	r2, #0
 800880e:	2140      	movs	r1, #64	@ 0x40
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 fe75 	bl	8009500 <UART_WaitOnFlagUntilTimeout>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d004      	beq.n	8008826 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2220      	movs	r2, #32
 8008820:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e005      	b.n	8008832 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2220      	movs	r2, #32
 800882a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800882c:	2300      	movs	r3, #0
 800882e:	e000      	b.n	8008832 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008830:	2302      	movs	r3, #2
  }
}
 8008832:	4618      	mov	r0, r3
 8008834:	3720      	adds	r7, #32
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
	...

0800883c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800883c:	b480      	push	{r7}
 800883e:	b08b      	sub	sp, #44	@ 0x2c
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	4613      	mov	r3, r2
 8008848:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800884e:	2b20      	cmp	r3, #32
 8008850:	d147      	bne.n	80088e2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <HAL_UART_Transmit_IT+0x22>
 8008858:	88fb      	ldrh	r3, [r7, #6]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d101      	bne.n	8008862 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e040      	b.n	80088e4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	88fa      	ldrh	r2, [r7, #6]
 800886c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	88fa      	ldrh	r2, [r7, #6]
 8008874:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2221      	movs	r2, #33	@ 0x21
 800888a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008894:	d107      	bne.n	80088a6 <HAL_UART_Transmit_IT+0x6a>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d103      	bne.n	80088a6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	4a13      	ldr	r2, [pc, #76]	@ (80088f0 <HAL_UART_Transmit_IT+0xb4>)
 80088a2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80088a4:	e002      	b.n	80088ac <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	4a12      	ldr	r2, [pc, #72]	@ (80088f4 <HAL_UART_Transmit_IT+0xb8>)
 80088aa:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	e853 3f00 	ldrex	r3, [r3]
 80088b8:	613b      	str	r3, [r7, #16]
   return(result);
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ca:	623b      	str	r3, [r7, #32]
 80088cc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ce:	69f9      	ldr	r1, [r7, #28]
 80088d0:	6a3a      	ldr	r2, [r7, #32]
 80088d2:	e841 2300 	strex	r3, r2, [r1]
 80088d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1e6      	bne.n	80088ac <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	e000      	b.n	80088e4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80088e2:	2302      	movs	r3, #2
  }
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	372c      	adds	r7, #44	@ 0x2c
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	080098e3 	.word	0x080098e3
 80088f4:	0800982d 	.word	0x0800982d

080088f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08a      	sub	sp, #40	@ 0x28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	4613      	mov	r3, r2
 8008904:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800890c:	2b20      	cmp	r3, #32
 800890e:	d132      	bne.n	8008976 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <HAL_UART_Receive_IT+0x24>
 8008916:	88fb      	ldrh	r3, [r7, #6]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e02b      	b.n	8008978 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d018      	beq.n	8008966 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	e853 3f00 	ldrex	r3, [r3]
 8008940:	613b      	str	r3, [r7, #16]
   return(result);
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008948:	627b      	str	r3, [r7, #36]	@ 0x24
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	461a      	mov	r2, r3
 8008950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008952:	623b      	str	r3, [r7, #32]
 8008954:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008956:	69f9      	ldr	r1, [r7, #28]
 8008958:	6a3a      	ldr	r2, [r7, #32]
 800895a:	e841 2300 	strex	r3, r2, [r1]
 800895e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1e6      	bne.n	8008934 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008966:	88fb      	ldrh	r3, [r7, #6]
 8008968:	461a      	mov	r2, r3
 800896a:	68b9      	ldr	r1, [r7, #8]
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f000 fe2f 	bl	80095d0 <UART_Start_Receive_IT>
 8008972:	4603      	mov	r3, r0
 8008974:	e000      	b.n	8008978 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008976:	2302      	movs	r3, #2
  }
}
 8008978:	4618      	mov	r0, r3
 800897a:	3728      	adds	r7, #40	@ 0x28
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b0ba      	sub	sp, #232	@ 0xe8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	69db      	ldr	r3, [r3, #28]
 800898e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80089a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80089aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80089ae:	4013      	ands	r3, r2
 80089b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80089b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d115      	bne.n	80089e8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80089bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089c0:	f003 0320 	and.w	r3, r3, #32
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00f      	beq.n	80089e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80089c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089cc:	f003 0320 	and.w	r3, r3, #32
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d009      	beq.n	80089e8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 82ab 	beq.w	8008f34 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	4798      	blx	r3
      }
      return;
 80089e6:	e2a5      	b.n	8008f34 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80089e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 8117 	beq.w	8008c20 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80089f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d106      	bne.n	8008a0c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80089fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008a02:	4b85      	ldr	r3, [pc, #532]	@ (8008c18 <HAL_UART_IRQHandler+0x298>)
 8008a04:	4013      	ands	r3, r2
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f000 810a 	beq.w	8008c20 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d011      	beq.n	8008a3c <HAL_UART_IRQHandler+0xbc>
 8008a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00b      	beq.n	8008a3c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a32:	f043 0201 	orr.w	r2, r3, #1
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a40:	f003 0302 	and.w	r3, r3, #2
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d011      	beq.n	8008a6c <HAL_UART_IRQHandler+0xec>
 8008a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00b      	beq.n	8008a6c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2202      	movs	r2, #2
 8008a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a62:	f043 0204 	orr.w	r2, r3, #4
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a70:	f003 0304 	and.w	r3, r3, #4
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d011      	beq.n	8008a9c <HAL_UART_IRQHandler+0x11c>
 8008a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00b      	beq.n	8008a9c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2204      	movs	r2, #4
 8008a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a92:	f043 0202 	orr.w	r2, r3, #2
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aa0:	f003 0308 	and.w	r3, r3, #8
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d017      	beq.n	8008ad8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aac:	f003 0320 	and.w	r3, r3, #32
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d105      	bne.n	8008ac0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ab8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00b      	beq.n	8008ad8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2208      	movs	r2, #8
 8008ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ace:	f043 0208 	orr.w	r2, r3, #8
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008adc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d012      	beq.n	8008b0a <HAL_UART_IRQHandler+0x18a>
 8008ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ae8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00c      	beq.n	8008b0a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008af8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b00:	f043 0220 	orr.w	r2, r3, #32
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f000 8211 	beq.w	8008f38 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b1a:	f003 0320 	and.w	r3, r3, #32
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00d      	beq.n	8008b3e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b26:	f003 0320 	and.w	r3, r3, #32
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d007      	beq.n	8008b3e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d003      	beq.n	8008b3e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b44:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b52:	2b40      	cmp	r3, #64	@ 0x40
 8008b54:	d005      	beq.n	8008b62 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008b5a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d04f      	beq.n	8008c02 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fde8 	bl	8009738 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b72:	2b40      	cmp	r3, #64	@ 0x40
 8008b74:	d141      	bne.n	8008bfa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3308      	adds	r3, #8
 8008b7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008b84:	e853 3f00 	ldrex	r3, [r3]
 8008b88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008b8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3308      	adds	r3, #8
 8008b9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008ba2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008baa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008bae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008bb2:	e841 2300 	strex	r3, r2, [r1]
 8008bb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008bba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1d9      	bne.n	8008b76 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d013      	beq.n	8008bf2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bce:	4a13      	ldr	r2, [pc, #76]	@ (8008c1c <HAL_UART_IRQHandler+0x29c>)
 8008bd0:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fa fa2a 	bl	8003030 <HAL_DMA_Abort_IT>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d017      	beq.n	8008c12 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008bec:	4610      	mov	r0, r2
 8008bee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bf0:	e00f      	b.n	8008c12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f9aa 	bl	8008f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bf8:	e00b      	b.n	8008c12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f9a6 	bl	8008f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c00:	e007      	b.n	8008c12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f9a2 	bl	8008f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008c10:	e192      	b.n	8008f38 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c12:	bf00      	nop
    return;
 8008c14:	e190      	b.n	8008f38 <HAL_UART_IRQHandler+0x5b8>
 8008c16:	bf00      	nop
 8008c18:	04000120 	.word	0x04000120
 8008c1c:	08009801 	.word	0x08009801

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	f040 814b 	bne.w	8008ec0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c2e:	f003 0310 	and.w	r3, r3, #16
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f000 8144 	beq.w	8008ec0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c3c:	f003 0310 	and.w	r3, r3, #16
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f000 813d 	beq.w	8008ec0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2210      	movs	r2, #16
 8008c4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c58:	2b40      	cmp	r3, #64	@ 0x40
 8008c5a:	f040 80b5 	bne.w	8008dc8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c6a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f000 8164 	beq.w	8008f3c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008c7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	f080 815c 	bcs.w	8008f3c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c8a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	2b20      	cmp	r3, #32
 8008c96:	f000 8086 	beq.w	8008da6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ca6:	e853 3f00 	ldrex	r3, [r3]
 8008caa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008cae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008cb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008cc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008cc8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ccc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008cd0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008cd4:	e841 2300 	strex	r3, r2, [r1]
 8008cd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008cdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1da      	bne.n	8008c9a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	3308      	adds	r3, #8
 8008cea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008cee:	e853 3f00 	ldrex	r3, [r3]
 8008cf2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008cf4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008cf6:	f023 0301 	bic.w	r3, r3, #1
 8008cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3308      	adds	r3, #8
 8008d04:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d08:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d10:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d14:	e841 2300 	strex	r3, r2, [r1]
 8008d18:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1e1      	bne.n	8008ce4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3308      	adds	r3, #8
 8008d26:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d2a:	e853 3f00 	ldrex	r3, [r3]
 8008d2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3308      	adds	r3, #8
 8008d40:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008d44:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d46:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d48:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008d4a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008d4c:	e841 2300 	strex	r3, r2, [r1]
 8008d50:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008d52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1e3      	bne.n	8008d20 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2220      	movs	r2, #32
 8008d5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d6e:	e853 3f00 	ldrex	r3, [r3]
 8008d72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d76:	f023 0310 	bic.w	r3, r3, #16
 8008d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	461a      	mov	r2, r3
 8008d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d8a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008d8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d90:	e841 2300 	strex	r3, r2, [r1]
 8008d94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008d96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1e4      	bne.n	8008d66 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fa f90c 	bl	8002fbe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2202      	movs	r2, #2
 8008daa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f8cd 	bl	8008f60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008dc6:	e0b9      	b.n	8008f3c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 80ab 	beq.w	8008f40 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8008dea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f000 80a6 	beq.w	8008f40 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfc:	e853 3f00 	ldrex	r3, [r3]
 8008e00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	461a      	mov	r2, r3
 8008e12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e16:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e18:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e1e:	e841 2300 	strex	r3, r2, [r1]
 8008e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1e4      	bne.n	8008df4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3308      	adds	r3, #8
 8008e30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e34:	e853 3f00 	ldrex	r3, [r3]
 8008e38:	623b      	str	r3, [r7, #32]
   return(result);
 8008e3a:	6a3b      	ldr	r3, [r7, #32]
 8008e3c:	f023 0301 	bic.w	r3, r3, #1
 8008e40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	3308      	adds	r3, #8
 8008e4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008e4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e56:	e841 2300 	strex	r3, r2, [r1]
 8008e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1e3      	bne.n	8008e2a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2220      	movs	r2, #32
 8008e66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	e853 3f00 	ldrex	r3, [r3]
 8008e82:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f023 0310 	bic.w	r3, r3, #16
 8008e8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	461a      	mov	r2, r3
 8008e94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008e98:	61fb      	str	r3, [r7, #28]
 8008e9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9c:	69b9      	ldr	r1, [r7, #24]
 8008e9e:	69fa      	ldr	r2, [r7, #28]
 8008ea0:	e841 2300 	strex	r3, r2, [r1]
 8008ea4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1e4      	bne.n	8008e76 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2202      	movs	r2, #2
 8008eb0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008eb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f851 	bl	8008f60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ebe:	e03f      	b.n	8008f40 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ec4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00e      	beq.n	8008eea <HAL_UART_IRQHandler+0x56a>
 8008ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ed0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d008      	beq.n	8008eea <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008ee0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 ff2f 	bl	8009d46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ee8:	e02d      	b.n	8008f46 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00e      	beq.n	8008f14 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d008      	beq.n	8008f14 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d01c      	beq.n	8008f44 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	4798      	blx	r3
    }
    return;
 8008f12:	e017      	b.n	8008f44 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d012      	beq.n	8008f46 <HAL_UART_IRQHandler+0x5c6>
 8008f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00c      	beq.n	8008f46 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fd38 	bl	80099a2 <UART_EndTransmit_IT>
    return;
 8008f32:	e008      	b.n	8008f46 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008f34:	bf00      	nop
 8008f36:	e006      	b.n	8008f46 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008f38:	bf00      	nop
 8008f3a:	e004      	b.n	8008f46 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008f3c:	bf00      	nop
 8008f3e:	e002      	b.n	8008f46 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008f40:	bf00      	nop
 8008f42:	e000      	b.n	8008f46 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008f44:	bf00      	nop
  }

}
 8008f46:	37e8      	adds	r7, #232	@ 0xe8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008f54:	bf00      	nop
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f6c:	bf00      	nop
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b088      	sub	sp, #32
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	431a      	orrs	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	431a      	orrs	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	69db      	ldr	r3, [r3, #28]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8008fa6:	f023 030c 	bic.w	r3, r3, #12
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	6812      	ldr	r2, [r2, #0]
 8008fae:	6979      	ldr	r1, [r7, #20]
 8008fb0:	430b      	orrs	r3, r1
 8008fb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68da      	ldr	r2, [r3, #12]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a1b      	ldr	r3, [r3, #32]
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	430a      	orrs	r2, r1
 8008fec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a99      	ldr	r2, [pc, #612]	@ (8009258 <UART_SetConfig+0x2e0>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d120      	bne.n	800903a <UART_SetConfig+0xc2>
 8008ff8:	4b98      	ldr	r3, [pc, #608]	@ (800925c <UART_SetConfig+0x2e4>)
 8008ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ffc:	f003 0303 	and.w	r3, r3, #3
 8009000:	2b03      	cmp	r3, #3
 8009002:	d817      	bhi.n	8009034 <UART_SetConfig+0xbc>
 8009004:	a201      	add	r2, pc, #4	@ (adr r2, 800900c <UART_SetConfig+0x94>)
 8009006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900a:	bf00      	nop
 800900c:	0800901d 	.word	0x0800901d
 8009010:	08009029 	.word	0x08009029
 8009014:	0800902f 	.word	0x0800902f
 8009018:	08009023 	.word	0x08009023
 800901c:	2301      	movs	r3, #1
 800901e:	77fb      	strb	r3, [r7, #31]
 8009020:	e061      	b.n	80090e6 <UART_SetConfig+0x16e>
 8009022:	2302      	movs	r3, #2
 8009024:	77fb      	strb	r3, [r7, #31]
 8009026:	e05e      	b.n	80090e6 <UART_SetConfig+0x16e>
 8009028:	2304      	movs	r3, #4
 800902a:	77fb      	strb	r3, [r7, #31]
 800902c:	e05b      	b.n	80090e6 <UART_SetConfig+0x16e>
 800902e:	2308      	movs	r3, #8
 8009030:	77fb      	strb	r3, [r7, #31]
 8009032:	e058      	b.n	80090e6 <UART_SetConfig+0x16e>
 8009034:	2310      	movs	r3, #16
 8009036:	77fb      	strb	r3, [r7, #31]
 8009038:	e055      	b.n	80090e6 <UART_SetConfig+0x16e>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a88      	ldr	r2, [pc, #544]	@ (8009260 <UART_SetConfig+0x2e8>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d124      	bne.n	800908e <UART_SetConfig+0x116>
 8009044:	4b85      	ldr	r3, [pc, #532]	@ (800925c <UART_SetConfig+0x2e4>)
 8009046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009048:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800904c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009050:	d011      	beq.n	8009076 <UART_SetConfig+0xfe>
 8009052:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009056:	d817      	bhi.n	8009088 <UART_SetConfig+0x110>
 8009058:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800905c:	d011      	beq.n	8009082 <UART_SetConfig+0x10a>
 800905e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009062:	d811      	bhi.n	8009088 <UART_SetConfig+0x110>
 8009064:	2b00      	cmp	r3, #0
 8009066:	d003      	beq.n	8009070 <UART_SetConfig+0xf8>
 8009068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800906c:	d006      	beq.n	800907c <UART_SetConfig+0x104>
 800906e:	e00b      	b.n	8009088 <UART_SetConfig+0x110>
 8009070:	2300      	movs	r3, #0
 8009072:	77fb      	strb	r3, [r7, #31]
 8009074:	e037      	b.n	80090e6 <UART_SetConfig+0x16e>
 8009076:	2302      	movs	r3, #2
 8009078:	77fb      	strb	r3, [r7, #31]
 800907a:	e034      	b.n	80090e6 <UART_SetConfig+0x16e>
 800907c:	2304      	movs	r3, #4
 800907e:	77fb      	strb	r3, [r7, #31]
 8009080:	e031      	b.n	80090e6 <UART_SetConfig+0x16e>
 8009082:	2308      	movs	r3, #8
 8009084:	77fb      	strb	r3, [r7, #31]
 8009086:	e02e      	b.n	80090e6 <UART_SetConfig+0x16e>
 8009088:	2310      	movs	r3, #16
 800908a:	77fb      	strb	r3, [r7, #31]
 800908c:	e02b      	b.n	80090e6 <UART_SetConfig+0x16e>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a74      	ldr	r2, [pc, #464]	@ (8009264 <UART_SetConfig+0x2ec>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d124      	bne.n	80090e2 <UART_SetConfig+0x16a>
 8009098:	4b70      	ldr	r3, [pc, #448]	@ (800925c <UART_SetConfig+0x2e4>)
 800909a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800909c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80090a0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80090a4:	d011      	beq.n	80090ca <UART_SetConfig+0x152>
 80090a6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80090aa:	d817      	bhi.n	80090dc <UART_SetConfig+0x164>
 80090ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80090b0:	d011      	beq.n	80090d6 <UART_SetConfig+0x15e>
 80090b2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80090b6:	d811      	bhi.n	80090dc <UART_SetConfig+0x164>
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d003      	beq.n	80090c4 <UART_SetConfig+0x14c>
 80090bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80090c0:	d006      	beq.n	80090d0 <UART_SetConfig+0x158>
 80090c2:	e00b      	b.n	80090dc <UART_SetConfig+0x164>
 80090c4:	2300      	movs	r3, #0
 80090c6:	77fb      	strb	r3, [r7, #31]
 80090c8:	e00d      	b.n	80090e6 <UART_SetConfig+0x16e>
 80090ca:	2302      	movs	r3, #2
 80090cc:	77fb      	strb	r3, [r7, #31]
 80090ce:	e00a      	b.n	80090e6 <UART_SetConfig+0x16e>
 80090d0:	2304      	movs	r3, #4
 80090d2:	77fb      	strb	r3, [r7, #31]
 80090d4:	e007      	b.n	80090e6 <UART_SetConfig+0x16e>
 80090d6:	2308      	movs	r3, #8
 80090d8:	77fb      	strb	r3, [r7, #31]
 80090da:	e004      	b.n	80090e6 <UART_SetConfig+0x16e>
 80090dc:	2310      	movs	r3, #16
 80090de:	77fb      	strb	r3, [r7, #31]
 80090e0:	e001      	b.n	80090e6 <UART_SetConfig+0x16e>
 80090e2:	2310      	movs	r3, #16
 80090e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090ee:	d15a      	bne.n	80091a6 <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 80090f0:	7ffb      	ldrb	r3, [r7, #31]
 80090f2:	2b08      	cmp	r3, #8
 80090f4:	d827      	bhi.n	8009146 <UART_SetConfig+0x1ce>
 80090f6:	a201      	add	r2, pc, #4	@ (adr r2, 80090fc <UART_SetConfig+0x184>)
 80090f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fc:	08009121 	.word	0x08009121
 8009100:	08009129 	.word	0x08009129
 8009104:	08009131 	.word	0x08009131
 8009108:	08009147 	.word	0x08009147
 800910c:	08009137 	.word	0x08009137
 8009110:	08009147 	.word	0x08009147
 8009114:	08009147 	.word	0x08009147
 8009118:	08009147 	.word	0x08009147
 800911c:	0800913f 	.word	0x0800913f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009120:	f7fd fe1c 	bl	8006d5c <HAL_RCC_GetPCLK1Freq>
 8009124:	61b8      	str	r0, [r7, #24]
        break;
 8009126:	e013      	b.n	8009150 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009128:	f7fd fe3a 	bl	8006da0 <HAL_RCC_GetPCLK2Freq>
 800912c:	61b8      	str	r0, [r7, #24]
        break;
 800912e:	e00f      	b.n	8009150 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009130:	4b4d      	ldr	r3, [pc, #308]	@ (8009268 <UART_SetConfig+0x2f0>)
 8009132:	61bb      	str	r3, [r7, #24]
        break;
 8009134:	e00c      	b.n	8009150 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009136:	f7fd fd99 	bl	8006c6c <HAL_RCC_GetSysClockFreq>
 800913a:	61b8      	str	r0, [r7, #24]
        break;
 800913c:	e008      	b.n	8009150 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800913e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009142:	61bb      	str	r3, [r7, #24]
        break;
 8009144:	e004      	b.n	8009150 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8009146:	2300      	movs	r3, #0
 8009148:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	77bb      	strb	r3, [r7, #30]
        break;
 800914e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d074      	beq.n	8009240 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	005a      	lsls	r2, r3, #1
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	085b      	lsrs	r3, r3, #1
 8009160:	441a      	add	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	fbb2 f3f3 	udiv	r3, r2, r3
 800916a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	2b0f      	cmp	r3, #15
 8009170:	d916      	bls.n	80091a0 <UART_SetConfig+0x228>
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009178:	d212      	bcs.n	80091a0 <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	b29b      	uxth	r3, r3
 800917e:	f023 030f 	bic.w	r3, r3, #15
 8009182:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	085b      	lsrs	r3, r3, #1
 8009188:	b29b      	uxth	r3, r3
 800918a:	f003 0307 	and.w	r3, r3, #7
 800918e:	b29a      	uxth	r2, r3
 8009190:	89fb      	ldrh	r3, [r7, #14]
 8009192:	4313      	orrs	r3, r2
 8009194:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	89fa      	ldrh	r2, [r7, #14]
 800919c:	60da      	str	r2, [r3, #12]
 800919e:	e04f      	b.n	8009240 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	77bb      	strb	r3, [r7, #30]
 80091a4:	e04c      	b.n	8009240 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091a6:	7ffb      	ldrb	r3, [r7, #31]
 80091a8:	2b08      	cmp	r3, #8
 80091aa:	d828      	bhi.n	80091fe <UART_SetConfig+0x286>
 80091ac:	a201      	add	r2, pc, #4	@ (adr r2, 80091b4 <UART_SetConfig+0x23c>)
 80091ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b2:	bf00      	nop
 80091b4:	080091d9 	.word	0x080091d9
 80091b8:	080091e1 	.word	0x080091e1
 80091bc:	080091e9 	.word	0x080091e9
 80091c0:	080091ff 	.word	0x080091ff
 80091c4:	080091ef 	.word	0x080091ef
 80091c8:	080091ff 	.word	0x080091ff
 80091cc:	080091ff 	.word	0x080091ff
 80091d0:	080091ff 	.word	0x080091ff
 80091d4:	080091f7 	.word	0x080091f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091d8:	f7fd fdc0 	bl	8006d5c <HAL_RCC_GetPCLK1Freq>
 80091dc:	61b8      	str	r0, [r7, #24]
        break;
 80091de:	e013      	b.n	8009208 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091e0:	f7fd fdde 	bl	8006da0 <HAL_RCC_GetPCLK2Freq>
 80091e4:	61b8      	str	r0, [r7, #24]
        break;
 80091e6:	e00f      	b.n	8009208 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091e8:	4b1f      	ldr	r3, [pc, #124]	@ (8009268 <UART_SetConfig+0x2f0>)
 80091ea:	61bb      	str	r3, [r7, #24]
        break;
 80091ec:	e00c      	b.n	8009208 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091ee:	f7fd fd3d 	bl	8006c6c <HAL_RCC_GetSysClockFreq>
 80091f2:	61b8      	str	r0, [r7, #24]
        break;
 80091f4:	e008      	b.n	8009208 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091fa:	61bb      	str	r3, [r7, #24]
        break;
 80091fc:	e004      	b.n	8009208 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80091fe:	2300      	movs	r3, #0
 8009200:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	77bb      	strb	r3, [r7, #30]
        break;
 8009206:	bf00      	nop
    }

    if (pclk != 0U)
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d018      	beq.n	8009240 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	085a      	lsrs	r2, r3, #1
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	441a      	add	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009220:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	2b0f      	cmp	r3, #15
 8009226:	d909      	bls.n	800923c <UART_SetConfig+0x2c4>
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800922e:	d205      	bcs.n	800923c <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	b29a      	uxth	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	60da      	str	r2, [r3, #12]
 800923a:	e001      	b.n	8009240 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800924c:	7fbb      	ldrb	r3, [r7, #30]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3720      	adds	r7, #32
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	40013800 	.word	0x40013800
 800925c:	40021000 	.word	0x40021000
 8009260:	40004400 	.word	0x40004400
 8009264:	40004800 	.word	0x40004800
 8009268:	007a1200 	.word	0x007a1200

0800926c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009278:	f003 0301 	and.w	r3, r3, #1
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00a      	beq.n	8009296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800929a:	f003 0302 	and.w	r3, r3, #2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092bc:	f003 0304 	and.w	r3, r3, #4
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00a      	beq.n	80092da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092de:	f003 0308 	and.w	r3, r3, #8
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	430a      	orrs	r2, r1
 80092fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009300:	f003 0310 	and.w	r3, r3, #16
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00a      	beq.n	800931e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009322:	f003 0320 	and.w	r3, r3, #32
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009348:	2b00      	cmp	r3, #0
 800934a:	d01a      	beq.n	8009382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	430a      	orrs	r2, r1
 8009360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800936a:	d10a      	bne.n	8009382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	430a      	orrs	r2, r1
 8009380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00a      	beq.n	80093a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	430a      	orrs	r2, r1
 80093a2:	605a      	str	r2, [r3, #4]
  }
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b098      	sub	sp, #96	@ 0x60
 80093b4:	af02      	add	r7, sp, #8
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093c0:	f7f9 fce0 	bl	8002d84 <HAL_GetTick>
 80093c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0308 	and.w	r3, r3, #8
 80093d0:	2b08      	cmp	r3, #8
 80093d2:	d12e      	bne.n	8009432 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093dc:	2200      	movs	r2, #0
 80093de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f88c 	bl	8009500 <UART_WaitOnFlagUntilTimeout>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d021      	beq.n	8009432 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f6:	e853 3f00 	ldrex	r3, [r3]
 80093fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009402:	653b      	str	r3, [r7, #80]	@ 0x50
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	461a      	mov	r2, r3
 800940a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800940c:	647b      	str	r3, [r7, #68]	@ 0x44
 800940e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009410:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009414:	e841 2300 	strex	r3, r2, [r1]
 8009418:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800941a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1e6      	bne.n	80093ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2220      	movs	r2, #32
 8009424:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800942e:	2303      	movs	r3, #3
 8009430:	e062      	b.n	80094f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0304 	and.w	r3, r3, #4
 800943c:	2b04      	cmp	r3, #4
 800943e:	d149      	bne.n	80094d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009440:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009448:	2200      	movs	r2, #0
 800944a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f856 	bl	8009500 <UART_WaitOnFlagUntilTimeout>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d03c      	beq.n	80094d4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009462:	e853 3f00 	ldrex	r3, [r3]
 8009466:	623b      	str	r3, [r7, #32]
   return(result);
 8009468:	6a3b      	ldr	r3, [r7, #32]
 800946a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800946e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	461a      	mov	r2, r3
 8009476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009478:	633b      	str	r3, [r7, #48]	@ 0x30
 800947a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800947e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009480:	e841 2300 	strex	r3, r2, [r1]
 8009484:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e6      	bne.n	800945a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	3308      	adds	r3, #8
 8009492:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	e853 3f00 	ldrex	r3, [r3]
 800949a:	60fb      	str	r3, [r7, #12]
   return(result);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f023 0301 	bic.w	r3, r3, #1
 80094a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	3308      	adds	r3, #8
 80094aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094ac:	61fa      	str	r2, [r7, #28]
 80094ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b0:	69b9      	ldr	r1, [r7, #24]
 80094b2:	69fa      	ldr	r2, [r7, #28]
 80094b4:	e841 2300 	strex	r3, r2, [r1]
 80094b8:	617b      	str	r3, [r7, #20]
   return(result);
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1e5      	bne.n	800948c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2220      	movs	r2, #32
 80094c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e011      	b.n	80094f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2220      	movs	r2, #32
 80094d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2220      	movs	r2, #32
 80094de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3758      	adds	r7, #88	@ 0x58
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	603b      	str	r3, [r7, #0]
 800950c:	4613      	mov	r3, r2
 800950e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009510:	e049      	b.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009518:	d045      	beq.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800951a:	f7f9 fc33 	bl	8002d84 <HAL_GetTick>
 800951e:	4602      	mov	r2, r0
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	69ba      	ldr	r2, [r7, #24]
 8009526:	429a      	cmp	r2, r3
 8009528:	d302      	bcc.n	8009530 <UART_WaitOnFlagUntilTimeout+0x30>
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	e048      	b.n	80095c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 0304 	and.w	r3, r3, #4
 800953e:	2b00      	cmp	r3, #0
 8009540:	d031      	beq.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69db      	ldr	r3, [r3, #28]
 8009548:	f003 0308 	and.w	r3, r3, #8
 800954c:	2b08      	cmp	r3, #8
 800954e:	d110      	bne.n	8009572 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2208      	movs	r2, #8
 8009556:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f000 f8ed 	bl	8009738 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2208      	movs	r2, #8
 8009562:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e029      	b.n	80095c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	69db      	ldr	r3, [r3, #28]
 8009578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800957c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009580:	d111      	bne.n	80095a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800958a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 f8d3 	bl	8009738 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2220      	movs	r2, #32
 8009596:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e00f      	b.n	80095c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	69da      	ldr	r2, [r3, #28]
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	4013      	ands	r3, r2
 80095b0:	68ba      	ldr	r2, [r7, #8]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	bf0c      	ite	eq
 80095b6:	2301      	moveq	r3, #1
 80095b8:	2300      	movne	r3, #0
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	461a      	mov	r2, r3
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d0a6      	beq.n	8009512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
	...

080095d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b097      	sub	sp, #92	@ 0x5c
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	4613      	mov	r3, r2
 80095dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	88fa      	ldrh	r2, [r7, #6]
 80095e8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	88fa      	ldrh	r2, [r7, #6]
 80095f0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009602:	d10e      	bne.n	8009622 <UART_Start_Receive_IT+0x52>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d105      	bne.n	8009618 <UART_Start_Receive_IT+0x48>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009612:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009616:	e01a      	b.n	800964e <UART_Start_Receive_IT+0x7e>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	22ff      	movs	r2, #255	@ 0xff
 800961c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009620:	e015      	b.n	800964e <UART_Start_Receive_IT+0x7e>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10d      	bne.n	8009646 <UART_Start_Receive_IT+0x76>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d104      	bne.n	800963c <UART_Start_Receive_IT+0x6c>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	22ff      	movs	r2, #255	@ 0xff
 8009636:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800963a:	e008      	b.n	800964e <UART_Start_Receive_IT+0x7e>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	227f      	movs	r2, #127	@ 0x7f
 8009640:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009644:	e003      	b.n	800964e <UART_Start_Receive_IT+0x7e>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2222      	movs	r2, #34	@ 0x22
 800965a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	3308      	adds	r3, #8
 8009664:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009668:	e853 3f00 	ldrex	r3, [r3]
 800966c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800966e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009670:	f043 0301 	orr.w	r3, r3, #1
 8009674:	657b      	str	r3, [r7, #84]	@ 0x54
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3308      	adds	r3, #8
 800967c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800967e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009680:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009682:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009684:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009686:	e841 2300 	strex	r3, r2, [r1]
 800968a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800968c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1e5      	bne.n	800965e <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800969a:	d107      	bne.n	80096ac <UART_Start_Receive_IT+0xdc>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d103      	bne.n	80096ac <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4a22      	ldr	r2, [pc, #136]	@ (8009730 <UART_Start_Receive_IT+0x160>)
 80096a8:	669a      	str	r2, [r3, #104]	@ 0x68
 80096aa:	e002      	b.n	80096b2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4a21      	ldr	r2, [pc, #132]	@ (8009734 <UART_Start_Receive_IT+0x164>)
 80096b0:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d019      	beq.n	80096ee <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c2:	e853 3f00 	ldrex	r3, [r3]
 80096c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ca:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80096ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	461a      	mov	r2, r3
 80096d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80096da:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80096de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80096e0:	e841 2300 	strex	r3, r2, [r1]
 80096e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80096e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1e6      	bne.n	80096ba <UART_Start_Receive_IT+0xea>
 80096ec:	e018      	b.n	8009720 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	e853 3f00 	ldrex	r3, [r3]
 80096fa:	613b      	str	r3, [r7, #16]
   return(result);
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	f043 0320 	orr.w	r3, r3, #32
 8009702:	653b      	str	r3, [r7, #80]	@ 0x50
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	461a      	mov	r2, r3
 800970a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800970c:	623b      	str	r3, [r7, #32]
 800970e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009710:	69f9      	ldr	r1, [r7, #28]
 8009712:	6a3a      	ldr	r2, [r7, #32]
 8009714:	e841 2300 	strex	r3, r2, [r1]
 8009718:	61bb      	str	r3, [r7, #24]
   return(result);
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d1e6      	bne.n	80096ee <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	375c      	adds	r7, #92	@ 0x5c
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	08009b9f 	.word	0x08009b9f
 8009734:	080099f7 	.word	0x080099f7

08009738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009738:	b480      	push	{r7}
 800973a:	b095      	sub	sp, #84	@ 0x54
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009748:	e853 3f00 	ldrex	r3, [r3]
 800974c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800974e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009750:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009754:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	461a      	mov	r2, r3
 800975c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800975e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009760:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009762:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009764:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009766:	e841 2300 	strex	r3, r2, [r1]
 800976a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800976c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1e6      	bne.n	8009740 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3308      	adds	r3, #8
 8009778:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	e853 3f00 	ldrex	r3, [r3]
 8009780:	61fb      	str	r3, [r7, #28]
   return(result);
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	f023 0301 	bic.w	r3, r3, #1
 8009788:	64bb      	str	r3, [r7, #72]	@ 0x48
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3308      	adds	r3, #8
 8009790:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009792:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009794:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009796:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009798:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800979a:	e841 2300 	strex	r3, r2, [r1]
 800979e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1e5      	bne.n	8009772 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d118      	bne.n	80097e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	e853 3f00 	ldrex	r3, [r3]
 80097ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f023 0310 	bic.w	r3, r3, #16
 80097c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	461a      	mov	r2, r3
 80097ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097cc:	61bb      	str	r3, [r7, #24]
 80097ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d0:	6979      	ldr	r1, [r7, #20]
 80097d2:	69ba      	ldr	r2, [r7, #24]
 80097d4:	e841 2300 	strex	r3, r2, [r1]
 80097d8:	613b      	str	r3, [r7, #16]
   return(result);
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1e6      	bne.n	80097ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2220      	movs	r2, #32
 80097e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80097f4:	bf00      	nop
 80097f6:	3754      	adds	r7, #84	@ 0x54
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800980c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2200      	movs	r2, #0
 800981a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f7ff fb94 	bl	8008f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009824:	bf00      	nop
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800982c:	b480      	push	{r7}
 800982e:	b08f      	sub	sp, #60	@ 0x3c
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009838:	2b21      	cmp	r3, #33	@ 0x21
 800983a:	d14c      	bne.n	80098d6 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009842:	b29b      	uxth	r3, r3
 8009844:	2b00      	cmp	r3, #0
 8009846:	d132      	bne.n	80098ae <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984e:	6a3b      	ldr	r3, [r7, #32]
 8009850:	e853 3f00 	ldrex	r3, [r3]
 8009854:	61fb      	str	r3, [r7, #28]
   return(result);
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800985c:	637b      	str	r3, [r7, #52]	@ 0x34
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009866:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009868:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800986c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800986e:	e841 2300 	strex	r3, r2, [r1]
 8009872:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1e6      	bne.n	8009848 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	e853 3f00 	ldrex	r3, [r3]
 8009886:	60bb      	str	r3, [r7, #8]
   return(result);
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800988e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	461a      	mov	r2, r3
 8009896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009898:	61bb      	str	r3, [r7, #24]
 800989a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989c:	6979      	ldr	r1, [r7, #20]
 800989e:	69ba      	ldr	r2, [r7, #24]
 80098a0:	e841 2300 	strex	r3, r2, [r1]
 80098a4:	613b      	str	r3, [r7, #16]
   return(result);
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d1e6      	bne.n	800987a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80098ac:	e013      	b.n	80098d6 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098b2:	781a      	ldrb	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098be:	1c5a      	adds	r2, r3, #1
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	3b01      	subs	r3, #1
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80098d6:	bf00      	nop
 80098d8:	373c      	adds	r7, #60	@ 0x3c
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b091      	sub	sp, #68	@ 0x44
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098ee:	2b21      	cmp	r3, #33	@ 0x21
 80098f0:	d151      	bne.n	8009996 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d132      	bne.n	8009964 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009906:	e853 3f00 	ldrex	r3, [r3]
 800990a:	623b      	str	r3, [r7, #32]
   return(result);
 800990c:	6a3b      	ldr	r3, [r7, #32]
 800990e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009912:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	461a      	mov	r2, r3
 800991a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991c:	633b      	str	r3, [r7, #48]	@ 0x30
 800991e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009920:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009924:	e841 2300 	strex	r3, r2, [r1]
 8009928:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800992a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1e6      	bne.n	80098fe <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	e853 3f00 	ldrex	r3, [r3]
 800993c:	60fb      	str	r3, [r7, #12]
   return(result);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009944:	637b      	str	r3, [r7, #52]	@ 0x34
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	461a      	mov	r2, r3
 800994c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800994e:	61fb      	str	r3, [r7, #28]
 8009950:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009952:	69b9      	ldr	r1, [r7, #24]
 8009954:	69fa      	ldr	r2, [r7, #28]
 8009956:	e841 2300 	strex	r3, r2, [r1]
 800995a:	617b      	str	r3, [r7, #20]
   return(result);
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1e6      	bne.n	8009930 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009962:	e018      	b.n	8009996 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009968:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800996a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800996c:	881a      	ldrh	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009976:	b292      	uxth	r2, r2
 8009978:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800997e:	1c9a      	adds	r2, r3, #2
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800998a:	b29b      	uxth	r3, r3
 800998c:	3b01      	subs	r3, #1
 800998e:	b29a      	uxth	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8009996:	bf00      	nop
 8009998:	3744      	adds	r7, #68	@ 0x44
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b088      	sub	sp, #32
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	e853 3f00 	ldrex	r3, [r3]
 80099b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099be:	61fb      	str	r3, [r7, #28]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	461a      	mov	r2, r3
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	61bb      	str	r3, [r7, #24]
 80099ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099cc:	6979      	ldr	r1, [r7, #20]
 80099ce:	69ba      	ldr	r2, [r7, #24]
 80099d0:	e841 2300 	strex	r3, r2, [r1]
 80099d4:	613b      	str	r3, [r7, #16]
   return(result);
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e6      	bne.n	80099aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2220      	movs	r2, #32
 80099e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7f8 fd47 	bl	800247c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099ee:	bf00      	nop
 80099f0:	3720      	adds	r7, #32
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b09c      	sub	sp, #112	@ 0x70
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a04:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a0e:	2b22      	cmp	r3, #34	@ 0x22
 8009a10:	f040 80b9 	bne.w	8009b86 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009a1a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a1e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009a22:	b2d9      	uxtb	r1, r3
 8009a24:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009a28:	b2da      	uxtb	r2, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a2e:	400a      	ands	r2, r1
 8009a30:	b2d2      	uxtb	r2, r2
 8009a32:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a38:	1c5a      	adds	r2, r3, #1
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	3b01      	subs	r3, #1
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f040 809c 	bne.w	8009b96 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a66:	e853 3f00 	ldrex	r3, [r3]
 8009a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	461a      	mov	r2, r3
 8009a7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a7e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a84:	e841 2300 	strex	r3, r2, [r1]
 8009a88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1e6      	bne.n	8009a5e <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	3308      	adds	r3, #8
 8009a96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9a:	e853 3f00 	ldrex	r3, [r3]
 8009a9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aa2:	f023 0301 	bic.w	r3, r3, #1
 8009aa6:	667b      	str	r3, [r7, #100]	@ 0x64
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3308      	adds	r3, #8
 8009aae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009ab0:	647a      	str	r2, [r7, #68]	@ 0x44
 8009ab2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ab6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ab8:	e841 2300 	strex	r3, r2, [r1]
 8009abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1e5      	bne.n	8009a90 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2220      	movs	r2, #32
 8009ac8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d018      	beq.n	8009b18 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aee:	e853 3f00 	ldrex	r3, [r3]
 8009af2:	623b      	str	r3, [r7, #32]
   return(result);
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009afa:	663b      	str	r3, [r7, #96]	@ 0x60
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	461a      	mov	r2, r3
 8009b02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b04:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b0c:	e841 2300 	strex	r3, r2, [r1]
 8009b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1e6      	bne.n	8009ae6 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d12e      	bne.n	8009b7e <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	e853 3f00 	ldrex	r3, [r3]
 8009b32:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f023 0310 	bic.w	r3, r3, #16
 8009b3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	461a      	mov	r2, r3
 8009b42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b44:	61fb      	str	r3, [r7, #28]
 8009b46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b48:	69b9      	ldr	r1, [r7, #24]
 8009b4a:	69fa      	ldr	r2, [r7, #28]
 8009b4c:	e841 2300 	strex	r3, r2, [r1]
 8009b50:	617b      	str	r3, [r7, #20]
   return(result);
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e6      	bne.n	8009b26 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	69db      	ldr	r3, [r3, #28]
 8009b5e:	f003 0310 	and.w	r3, r3, #16
 8009b62:	2b10      	cmp	r3, #16
 8009b64:	d103      	bne.n	8009b6e <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2210      	movs	r2, #16
 8009b6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009b74:	4619      	mov	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7ff f9f2 	bl	8008f60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b7c:	e00b      	b.n	8009b96 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f7f8 fabc 	bl	80020fc <HAL_UART_RxCpltCallback>
}
 8009b84:	e007      	b.n	8009b96 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	699a      	ldr	r2, [r3, #24]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f042 0208 	orr.w	r2, r2, #8
 8009b94:	619a      	str	r2, [r3, #24]
}
 8009b96:	bf00      	nop
 8009b98:	3770      	adds	r7, #112	@ 0x70
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b09c      	sub	sp, #112	@ 0x70
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009bac:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bb6:	2b22      	cmp	r3, #34	@ 0x22
 8009bb8:	f040 80b9 	bne.w	8009d2e <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009bc2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bca:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009bcc:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009bd0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009bda:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009be0:	1c9a      	adds	r2, r3, #2
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f040 809c 	bne.w	8009d3e <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c0e:	e853 3f00 	ldrex	r3, [r3]
 8009c12:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009c14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	461a      	mov	r2, r3
 8009c22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c24:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c26:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c28:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009c2c:	e841 2300 	strex	r3, r2, [r1]
 8009c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009c32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1e6      	bne.n	8009c06 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3308      	adds	r3, #8
 8009c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c42:	e853 3f00 	ldrex	r3, [r3]
 8009c46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4a:	f023 0301 	bic.w	r3, r3, #1
 8009c4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3308      	adds	r3, #8
 8009c56:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009c58:	643a      	str	r2, [r7, #64]	@ 0x40
 8009c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c60:	e841 2300 	strex	r3, r2, [r1]
 8009c64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1e5      	bne.n	8009c38 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2220      	movs	r2, #32
 8009c70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d018      	beq.n	8009cc0 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c94:	6a3b      	ldr	r3, [r7, #32]
 8009c96:	e853 3f00 	ldrex	r3, [r3]
 8009c9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009ca2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cae:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cb4:	e841 2300 	strex	r3, r2, [r1]
 8009cb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1e6      	bne.n	8009c8e <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d12e      	bne.n	8009d26 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	e853 3f00 	ldrex	r3, [r3]
 8009cda:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	f023 0310 	bic.w	r3, r3, #16
 8009ce2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	461a      	mov	r2, r3
 8009cea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009cec:	61bb      	str	r3, [r7, #24]
 8009cee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf0:	6979      	ldr	r1, [r7, #20]
 8009cf2:	69ba      	ldr	r2, [r7, #24]
 8009cf4:	e841 2300 	strex	r3, r2, [r1]
 8009cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1e6      	bne.n	8009cce <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	69db      	ldr	r3, [r3, #28]
 8009d06:	f003 0310 	and.w	r3, r3, #16
 8009d0a:	2b10      	cmp	r3, #16
 8009d0c:	d103      	bne.n	8009d16 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2210      	movs	r2, #16
 8009d14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7ff f91e 	bl	8008f60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d24:	e00b      	b.n	8009d3e <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7f8 f9e8 	bl	80020fc <HAL_UART_RxCpltCallback>
}
 8009d2c:	e007      	b.n	8009d3e <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	699a      	ldr	r2, [r3, #24]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f042 0208 	orr.w	r2, r2, #8
 8009d3c:	619a      	str	r2, [r3, #24]
}
 8009d3e:	bf00      	nop
 8009d40:	3770      	adds	r7, #112	@ 0x70
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d46:	b480      	push	{r7}
 8009d48:	b083      	sub	sp, #12
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d4e:	bf00      	nop
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b085      	sub	sp, #20
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009d6a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8009d6e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009d90:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8009d94:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	43db      	mvns	r3, r3
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	4013      	ands	r3, r2
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3714      	adds	r7, #20
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	f107 0014 	add.w	r0, r7, #20
 8009dcc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	370c      	adds	r7, #12
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	b004      	add	sp, #16
 8009dfe:	4770      	bx	lr

08009e00 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b09d      	sub	sp, #116	@ 0x74
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	881b      	ldrh	r3, [r3, #0]
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8009e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e26:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	78db      	ldrb	r3, [r3, #3]
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d81f      	bhi.n	8009e72 <USB_ActivateEndpoint+0x72>
 8009e32:	a201      	add	r2, pc, #4	@ (adr r2, 8009e38 <USB_ActivateEndpoint+0x38>)
 8009e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e38:	08009e49 	.word	0x08009e49
 8009e3c:	08009e65 	.word	0x08009e65
 8009e40:	08009e7b 	.word	0x08009e7b
 8009e44:	08009e57 	.word	0x08009e57
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009e48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009e4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009e50:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009e54:	e012      	b.n	8009e7c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009e56:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009e5a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8009e5e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009e62:	e00b      	b.n	8009e7c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009e64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009e68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009e6c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009e70:	e004      	b.n	8009e7c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8009e78:	e000      	b.n	8009e7c <USB_ActivateEndpoint+0x7c>
      break;
 8009e7a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	441a      	add	r2, r3
 8009e86:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009e8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	4413      	add	r3, r2
 8009ea8:	881b      	ldrh	r3, [r3, #0]
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	b21b      	sxth	r3, r3
 8009eae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eb6:	b21a      	sxth	r2, r3
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	b21b      	sxth	r3, r3
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	b21b      	sxth	r3, r3
 8009ec2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	441a      	add	r2, r3
 8009ed0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009ed4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ed8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009edc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	7b1b      	ldrb	r3, [r3, #12]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f040 8178 	bne.w	800a1e2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	785b      	ldrb	r3, [r3, #1]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	f000 8084 	beq.w	800a004 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	61bb      	str	r3, [r7, #24]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	461a      	mov	r2, r3
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	61bb      	str	r3, [r7, #24]
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	011a      	lsls	r2, r3, #4
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	4413      	add	r3, r2
 8009f1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f1e:	617b      	str	r3, [r7, #20]
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	88db      	ldrh	r3, [r3, #6]
 8009f24:	085b      	lsrs	r3, r3, #1
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	005b      	lsls	r3, r3, #1
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4413      	add	r3, r2
 8009f3a:	881b      	ldrh	r3, [r3, #0]
 8009f3c:	827b      	strh	r3, [r7, #18]
 8009f3e:	8a7b      	ldrh	r3, [r7, #18]
 8009f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d01b      	beq.n	8009f80 <USB_ActivateEndpoint+0x180>
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4413      	add	r3, r2
 8009f52:	881b      	ldrh	r3, [r3, #0]
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f5e:	823b      	strh	r3, [r7, #16]
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	441a      	add	r2, r3
 8009f6a:	8a3b      	ldrh	r3, [r7, #16]
 8009f6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	78db      	ldrb	r3, [r3, #3]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d020      	beq.n	8009fca <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	881b      	ldrh	r3, [r3, #0]
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f9e:	81bb      	strh	r3, [r7, #12]
 8009fa0:	89bb      	ldrh	r3, [r7, #12]
 8009fa2:	f083 0320 	eor.w	r3, r3, #32
 8009fa6:	81bb      	strh	r3, [r7, #12]
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	441a      	add	r2, r3
 8009fb2:	89bb      	ldrh	r3, [r7, #12]
 8009fb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	8013      	strh	r3, [r2, #0]
 8009fc8:	e2d5      	b.n	800a576 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4413      	add	r3, r2
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fe0:	81fb      	strh	r3, [r7, #14]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	441a      	add	r2, r3
 8009fec:	89fb      	ldrh	r3, [r7, #14]
 8009fee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ff2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	8013      	strh	r3, [r2, #0]
 800a002:	e2b8      	b.n	800a576 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	633b      	str	r3, [r7, #48]	@ 0x30
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a00e:	b29b      	uxth	r3, r3
 800a010:	461a      	mov	r2, r3
 800a012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a014:	4413      	add	r3, r2
 800a016:	633b      	str	r3, [r7, #48]	@ 0x30
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	011a      	lsls	r2, r3, #4
 800a01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a020:	4413      	add	r3, r2
 800a022:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800a026:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	88db      	ldrh	r3, [r3, #6]
 800a02c:	085b      	lsrs	r3, r3, #1
 800a02e:	b29b      	uxth	r3, r3
 800a030:	005b      	lsls	r3, r3, #1
 800a032:	b29a      	uxth	r2, r3
 800a034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a036:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a042:	b29b      	uxth	r3, r3
 800a044:	461a      	mov	r2, r3
 800a046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a048:	4413      	add	r3, r2
 800a04a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	011a      	lsls	r2, r3, #4
 800a052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a054:	4413      	add	r3, r2
 800a056:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a05a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05e:	881b      	ldrh	r3, [r3, #0]
 800a060:	b29b      	uxth	r3, r3
 800a062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a066:	b29a      	uxth	r2, r3
 800a068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06a:	801a      	strh	r2, [r3, #0]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	2b3e      	cmp	r3, #62	@ 0x3e
 800a072:	d91d      	bls.n	800a0b0 <USB_ActivateEndpoint+0x2b0>
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	095b      	lsrs	r3, r3, #5
 800a07a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	f003 031f 	and.w	r3, r3, #31
 800a084:	2b00      	cmp	r3, #0
 800a086:	d102      	bne.n	800a08e <USB_ActivateEndpoint+0x28e>
 800a088:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a08a:	3b01      	subs	r3, #1
 800a08c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a090:	881b      	ldrh	r3, [r3, #0]
 800a092:	b29a      	uxth	r2, r3
 800a094:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a096:	b29b      	uxth	r3, r3
 800a098:	029b      	lsls	r3, r3, #10
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	4313      	orrs	r3, r2
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ac:	801a      	strh	r2, [r3, #0]
 800a0ae:	e026      	b.n	800a0fe <USB_ActivateEndpoint+0x2fe>
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	691b      	ldr	r3, [r3, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10a      	bne.n	800a0ce <USB_ActivateEndpoint+0x2ce>
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ba:	881b      	ldrh	r3, [r3, #0]
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ca:	801a      	strh	r2, [r3, #0]
 800a0cc:	e017      	b.n	800a0fe <USB_ActivateEndpoint+0x2fe>
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	085b      	lsrs	r3, r3, #1
 800a0d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d002      	beq.n	800a0e8 <USB_ActivateEndpoint+0x2e8>
 800a0e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ea:	881b      	ldrh	r3, [r3, #0]
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	029b      	lsls	r3, r3, #10
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	4413      	add	r3, r2
 800a108:	881b      	ldrh	r3, [r3, #0]
 800a10a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a10c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a10e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a112:	2b00      	cmp	r3, #0
 800a114:	d01b      	beq.n	800a14e <USB_ActivateEndpoint+0x34e>
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	4413      	add	r3, r2
 800a120:	881b      	ldrh	r3, [r3, #0]
 800a122:	b29b      	uxth	r3, r3
 800a124:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a12c:	843b      	strh	r3, [r7, #32]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	441a      	add	r2, r3
 800a138:	8c3b      	ldrh	r3, [r7, #32]
 800a13a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a13e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a142:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d124      	bne.n	800a1a0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4413      	add	r3, r2
 800a160:	881b      	ldrh	r3, [r3, #0]
 800a162:	b29b      	uxth	r3, r3
 800a164:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a16c:	83bb      	strh	r3, [r7, #28]
 800a16e:	8bbb      	ldrh	r3, [r7, #28]
 800a170:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a174:	83bb      	strh	r3, [r7, #28]
 800a176:	8bbb      	ldrh	r3, [r7, #28]
 800a178:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a17c:	83bb      	strh	r3, [r7, #28]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	441a      	add	r2, r3
 800a188:	8bbb      	ldrh	r3, [r7, #28]
 800a18a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a18e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	8013      	strh	r3, [r2, #0]
 800a19e:	e1ea      	b.n	800a576 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4413      	add	r3, r2
 800a1aa:	881b      	ldrh	r3, [r3, #0]
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a1b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1b6:	83fb      	strh	r3, [r7, #30]
 800a1b8:	8bfb      	ldrh	r3, [r7, #30]
 800a1ba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a1be:	83fb      	strh	r3, [r7, #30]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	441a      	add	r2, r3
 800a1ca:	8bfb      	ldrh	r3, [r7, #30]
 800a1cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	8013      	strh	r3, [r2, #0]
 800a1e0:	e1c9      	b.n	800a576 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	78db      	ldrb	r3, [r3, #3]
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d11e      	bne.n	800a228 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4413      	add	r3, r2
 800a1f4:	881b      	ldrh	r3, [r3, #0]
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a200:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	441a      	add	r2, r3
 800a20e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a212:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a216:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a21a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a21e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a222:	b29b      	uxth	r3, r3
 800a224:	8013      	strh	r3, [r2, #0]
 800a226:	e01d      	b.n	800a264 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	4413      	add	r3, r2
 800a232:	881b      	ldrh	r3, [r3, #0]
 800a234:	b29b      	uxth	r3, r3
 800a236:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a23a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a23e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	441a      	add	r2, r3
 800a24c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a25c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a260:	b29b      	uxth	r3, r3
 800a262:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a26e:	b29b      	uxth	r3, r3
 800a270:	461a      	mov	r2, r3
 800a272:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a274:	4413      	add	r3, r2
 800a276:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	011a      	lsls	r2, r3, #4
 800a27e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a280:	4413      	add	r3, r2
 800a282:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a286:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	891b      	ldrh	r3, [r3, #8]
 800a28c:	085b      	lsrs	r3, r3, #1
 800a28e:	b29b      	uxth	r3, r3
 800a290:	005b      	lsls	r3, r3, #1
 800a292:	b29a      	uxth	r2, r3
 800a294:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a296:	801a      	strh	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2a8:	4413      	add	r3, r2
 800a2aa:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	011a      	lsls	r2, r3, #4
 800a2b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2b4:	4413      	add	r3, r2
 800a2b6:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800a2ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	895b      	ldrh	r3, [r3, #10]
 800a2c0:	085b      	lsrs	r3, r3, #1
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	005b      	lsls	r3, r3, #1
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2ca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	785b      	ldrb	r3, [r3, #1]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f040 8093 	bne.w	800a3fc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	4413      	add	r3, r2
 800a2e0:	881b      	ldrh	r3, [r3, #0]
 800a2e2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800a2e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a2ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d01b      	beq.n	800a32a <USB_ActivateEndpoint+0x52a>
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	4413      	add	r3, r2
 800a2fc:	881b      	ldrh	r3, [r3, #0]
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a304:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a308:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	441a      	add	r2, r3
 800a314:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a316:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a31a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a31e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a326:	b29b      	uxth	r3, r3
 800a328:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4413      	add	r3, r2
 800a334:	881b      	ldrh	r3, [r3, #0]
 800a336:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a338:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a33a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d01b      	beq.n	800a37a <USB_ActivateEndpoint+0x57a>
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4413      	add	r3, r2
 800a34c:	881b      	ldrh	r3, [r3, #0]
 800a34e:	b29b      	uxth	r3, r3
 800a350:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a354:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a358:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	441a      	add	r2, r3
 800a364:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a366:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a36a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a36e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a372:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a376:	b29b      	uxth	r3, r3
 800a378:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4413      	add	r3, r2
 800a384:	881b      	ldrh	r3, [r3, #0]
 800a386:	b29b      	uxth	r3, r3
 800a388:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a38c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a390:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a392:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a394:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a398:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a39a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a39c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a3a0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	441a      	add	r2, r3
 800a3ac:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a3ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	4413      	add	r3, r2
 800a3cc:	881b      	ldrh	r3, [r3, #0]
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	441a      	add	r2, r3
 800a3e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a3e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	8013      	strh	r3, [r2, #0]
 800a3fa:	e0bc      	b.n	800a576 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	881b      	ldrh	r3, [r3, #0]
 800a408:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a40c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a410:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d01d      	beq.n	800a454 <USB_ActivateEndpoint+0x654>
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	4413      	add	r3, r2
 800a422:	881b      	ldrh	r3, [r3, #0]
 800a424:	b29b      	uxth	r3, r3
 800a426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a42a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a42e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	441a      	add	r2, r3
 800a43c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a440:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a444:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a448:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a44c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a450:	b29b      	uxth	r3, r3
 800a452:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	4413      	add	r3, r2
 800a45e:	881b      	ldrh	r3, [r3, #0]
 800a460:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800a464:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800a468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d01d      	beq.n	800a4ac <USB_ActivateEndpoint+0x6ac>
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4413      	add	r3, r2
 800a47a:	881b      	ldrh	r3, [r3, #0]
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a486:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	441a      	add	r2, r3
 800a494:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800a498:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a49c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	78db      	ldrb	r3, [r3, #3]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d024      	beq.n	800a4fe <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4413      	add	r3, r2
 800a4be:	881b      	ldrh	r3, [r3, #0]
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4ca:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a4ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a4d2:	f083 0320 	eor.w	r3, r3, #32
 800a4d6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	441a      	add	r2, r3
 800a4e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a4e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	8013      	strh	r3, [r2, #0]
 800a4fc:	e01d      	b.n	800a53a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4413      	add	r3, r2
 800a508:	881b      	ldrh	r3, [r3, #0]
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a510:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a514:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	441a      	add	r2, r3
 800a522:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a526:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a52a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a52e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a536:	b29b      	uxth	r3, r3
 800a538:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4413      	add	r3, r2
 800a544:	881b      	ldrh	r3, [r3, #0]
 800a546:	b29b      	uxth	r3, r3
 800a548:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a54c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a550:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	441a      	add	r2, r3
 800a55e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a562:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a566:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a56a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a56e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a572:	b29b      	uxth	r3, r3
 800a574:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a576:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3774      	adds	r7, #116	@ 0x74
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop

0800a588 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a588:	b480      	push	{r7}
 800a58a:	b08d      	sub	sp, #52	@ 0x34
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	7b1b      	ldrb	r3, [r3, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	f040 808e 	bne.w	800a6b8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	785b      	ldrb	r3, [r3, #1]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d044      	beq.n	800a62e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4413      	add	r3, r2
 800a5ae:	881b      	ldrh	r3, [r3, #0]
 800a5b0:	81bb      	strh	r3, [r7, #12]
 800a5b2:	89bb      	ldrh	r3, [r7, #12]
 800a5b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d01b      	beq.n	800a5f4 <USB_DeactivateEndpoint+0x6c>
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	4413      	add	r3, r2
 800a5c6:	881b      	ldrh	r3, [r3, #0]
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5d2:	817b      	strh	r3, [r7, #10]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	441a      	add	r2, r3
 800a5de:	897b      	ldrh	r3, [r7, #10]
 800a5e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4413      	add	r3, r2
 800a5fe:	881b      	ldrh	r3, [r3, #0]
 800a600:	b29b      	uxth	r3, r3
 800a602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a606:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a60a:	813b      	strh	r3, [r7, #8]
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	441a      	add	r2, r3
 800a616:	893b      	ldrh	r3, [r7, #8]
 800a618:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a61c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a628:	b29b      	uxth	r3, r3
 800a62a:	8013      	strh	r3, [r2, #0]
 800a62c:	e192      	b.n	800a954 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	4413      	add	r3, r2
 800a638:	881b      	ldrh	r3, [r3, #0]
 800a63a:	827b      	strh	r3, [r7, #18]
 800a63c:	8a7b      	ldrh	r3, [r7, #18]
 800a63e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a642:	2b00      	cmp	r3, #0
 800a644:	d01b      	beq.n	800a67e <USB_DeactivateEndpoint+0xf6>
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4413      	add	r3, r2
 800a650:	881b      	ldrh	r3, [r3, #0]
 800a652:	b29b      	uxth	r3, r3
 800a654:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a65c:	823b      	strh	r3, [r7, #16]
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	441a      	add	r2, r3
 800a668:	8a3b      	ldrh	r3, [r7, #16]
 800a66a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a66e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a672:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	881b      	ldrh	r3, [r3, #0]
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a690:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a694:	81fb      	strh	r3, [r7, #14]
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	441a      	add	r2, r3
 800a6a0:	89fb      	ldrh	r3, [r7, #14]
 800a6a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	8013      	strh	r3, [r2, #0]
 800a6b6:	e14d      	b.n	800a954 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	785b      	ldrb	r3, [r3, #1]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	f040 80a5 	bne.w	800a80c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4413      	add	r3, r2
 800a6cc:	881b      	ldrh	r3, [r3, #0]
 800a6ce:	843b      	strh	r3, [r7, #32]
 800a6d0:	8c3b      	ldrh	r3, [r7, #32]
 800a6d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d01b      	beq.n	800a712 <USB_DeactivateEndpoint+0x18a>
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	4413      	add	r3, r2
 800a6e4:	881b      	ldrh	r3, [r3, #0]
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6f0:	83fb      	strh	r3, [r7, #30]
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	441a      	add	r2, r3
 800a6fc:	8bfb      	ldrh	r3, [r7, #30]
 800a6fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a706:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a70a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a70e:	b29b      	uxth	r3, r3
 800a710:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	4413      	add	r3, r2
 800a71c:	881b      	ldrh	r3, [r3, #0]
 800a71e:	83bb      	strh	r3, [r7, #28]
 800a720:	8bbb      	ldrh	r3, [r7, #28]
 800a722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a726:	2b00      	cmp	r3, #0
 800a728:	d01b      	beq.n	800a762 <USB_DeactivateEndpoint+0x1da>
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	4413      	add	r3, r2
 800a734:	881b      	ldrh	r3, [r3, #0]
 800a736:	b29b      	uxth	r3, r3
 800a738:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a73c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a740:	837b      	strh	r3, [r7, #26]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	441a      	add	r2, r3
 800a74c:	8b7b      	ldrh	r3, [r7, #26]
 800a74e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a752:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a756:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a75a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a75e:	b29b      	uxth	r3, r3
 800a760:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	4413      	add	r3, r2
 800a76c:	881b      	ldrh	r3, [r3, #0]
 800a76e:	b29b      	uxth	r3, r3
 800a770:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a778:	833b      	strh	r3, [r7, #24]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	441a      	add	r2, r3
 800a784:	8b3b      	ldrh	r3, [r7, #24]
 800a786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a78a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a78e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a792:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a796:	b29b      	uxth	r3, r3
 800a798:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	4413      	add	r3, r2
 800a7a4:	881b      	ldrh	r3, [r3, #0]
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a7ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7b0:	82fb      	strh	r3, [r7, #22]
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	441a      	add	r2, r3
 800a7bc:	8afb      	ldrh	r3, [r7, #22]
 800a7be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	4413      	add	r3, r2
 800a7dc:	881b      	ldrh	r3, [r3, #0]
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7e8:	82bb      	strh	r3, [r7, #20]
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	441a      	add	r2, r3
 800a7f4:	8abb      	ldrh	r3, [r7, #20]
 800a7f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a806:	b29b      	uxth	r3, r3
 800a808:	8013      	strh	r3, [r2, #0]
 800a80a:	e0a3      	b.n	800a954 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	4413      	add	r3, r2
 800a816:	881b      	ldrh	r3, [r3, #0]
 800a818:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a81a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a81c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a820:	2b00      	cmp	r3, #0
 800a822:	d01b      	beq.n	800a85c <USB_DeactivateEndpoint+0x2d4>
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	4413      	add	r3, r2
 800a82e:	881b      	ldrh	r3, [r3, #0]
 800a830:	b29b      	uxth	r3, r3
 800a832:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a83a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	441a      	add	r2, r3
 800a846:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a848:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a84c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a850:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a858:	b29b      	uxth	r3, r3
 800a85a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	4413      	add	r3, r2
 800a866:	881b      	ldrh	r3, [r3, #0]
 800a868:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800a86a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a86c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a870:	2b00      	cmp	r3, #0
 800a872:	d01b      	beq.n	800a8ac <USB_DeactivateEndpoint+0x324>
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	4413      	add	r3, r2
 800a87e:	881b      	ldrh	r3, [r3, #0]
 800a880:	b29b      	uxth	r3, r3
 800a882:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a88a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	441a      	add	r2, r3
 800a896:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a898:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a89c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	4413      	add	r3, r2
 800a8b6:	881b      	ldrh	r3, [r3, #0]
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	441a      	add	r2, r3
 800a8ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a8d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a8dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	881b      	ldrh	r3, [r3, #0]
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	441a      	add	r2, r3
 800a906:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a908:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a90c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a910:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a918:	b29b      	uxth	r3, r3
 800a91a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	4413      	add	r3, r2
 800a926:	881b      	ldrh	r3, [r3, #0]
 800a928:	b29b      	uxth	r3, r3
 800a92a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a92e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a932:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	441a      	add	r2, r3
 800a93e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a940:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a944:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a948:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a94c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a950:	b29b      	uxth	r3, r3
 800a952:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3734      	adds	r7, #52	@ 0x34
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b0c2      	sub	sp, #264	@ 0x108
 800a966:	af00      	add	r7, sp, #0
 800a968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a96c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a970:	6018      	str	r0, [r3, #0]
 800a972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a97a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a97c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	785b      	ldrb	r3, [r3, #1]
 800a988:	2b01      	cmp	r3, #1
 800a98a:	f040 86b7 	bne.w	800b6fc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a98e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	699a      	ldr	r2, [r3, #24]
 800a99a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a99e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d908      	bls.n	800a9bc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a9aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a9ba:	e007      	b.n	800a9cc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a9bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	699b      	ldr	r3, [r3, #24]
 800a9c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a9cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	7b1b      	ldrb	r3, [r3, #12]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d13a      	bne.n	800aa52 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a9dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	6959      	ldr	r1, [r3, #20]
 800a9e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	88da      	ldrh	r2, [r3, #6]
 800a9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a9fe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800aa02:	6800      	ldr	r0, [r0, #0]
 800aa04:	f001 fc8c 	bl	800c320 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aa08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	613b      	str	r3, [r7, #16]
 800aa14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	461a      	mov	r2, r3
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	4413      	add	r3, r2
 800aa2a:	613b      	str	r3, [r7, #16]
 800aa2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	011a      	lsls	r2, r3, #4
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800aa42:	60fb      	str	r3, [r7, #12]
 800aa44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	801a      	strh	r2, [r3, #0]
 800aa4e:	f000 be1f 	b.w	800b690 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800aa52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	78db      	ldrb	r3, [r3, #3]
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	f040 8462 	bne.w	800b328 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800aa64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	6a1a      	ldr	r2, [r3, #32]
 800aa70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	f240 83df 	bls.w	800b240 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800aa82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	4413      	add	r3, r2
 800aa9c:	881b      	ldrh	r3, [r3, #0]
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aaa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaa8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800aaac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aab0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	441a      	add	r2, r3
 800aac6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aaca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aace:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aad2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800aad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aada:	b29b      	uxth	r3, r3
 800aadc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800aade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	6a1a      	ldr	r2, [r3, #32]
 800aaea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaee:	1ad2      	subs	r2, r2, r3
 800aaf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aafc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	4413      	add	r3, r2
 800ab16:	881b      	ldrh	r3, [r3, #0]
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f000 81c7 	beq.w	800aeb2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	785b      	ldrb	r3, [r3, #1]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d177      	bne.n	800ac30 <USB_EPStartXfer+0x2ce>
 800ab40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab60:	4413      	add	r3, r2
 800ab62:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	011a      	lsls	r2, r3, #4
 800ab72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab74:	4413      	add	r3, r2
 800ab76:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ab7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7e:	881b      	ldrh	r3, [r3, #0]
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab86:	b29a      	uxth	r2, r3
 800ab88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8a:	801a      	strh	r2, [r3, #0]
 800ab8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab90:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab92:	d921      	bls.n	800abd8 <USB_EPStartXfer+0x276>
 800ab94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab98:	095b      	lsrs	r3, r3, #5
 800ab9a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ab9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aba2:	f003 031f 	and.w	r3, r3, #31
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d104      	bne.n	800abb4 <USB_EPStartXfer+0x252>
 800abaa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800abae:	3b01      	subs	r3, #1
 800abb0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800abb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb6:	881b      	ldrh	r3, [r3, #0]
 800abb8:	b29a      	uxth	r2, r3
 800abba:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	029b      	lsls	r3, r3, #10
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	4313      	orrs	r3, r2
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd4:	801a      	strh	r2, [r3, #0]
 800abd6:	e050      	b.n	800ac7a <USB_EPStartXfer+0x318>
 800abd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d10a      	bne.n	800abf6 <USB_EPStartXfer+0x294>
 800abe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe2:	881b      	ldrh	r3, [r3, #0]
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abee:	b29a      	uxth	r2, r3
 800abf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf2:	801a      	strh	r2, [r3, #0]
 800abf4:	e041      	b.n	800ac7a <USB_EPStartXfer+0x318>
 800abf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abfa:	085b      	lsrs	r3, r3, #1
 800abfc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ac00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac04:	f003 0301 	and.w	r3, r3, #1
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d004      	beq.n	800ac16 <USB_EPStartXfer+0x2b4>
 800ac0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ac10:	3301      	adds	r3, #1
 800ac12:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ac16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac18:	881b      	ldrh	r3, [r3, #0]
 800ac1a:	b29a      	uxth	r2, r3
 800ac1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	029b      	lsls	r3, r3, #10
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	4313      	orrs	r3, r2
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2c:	801a      	strh	r2, [r3, #0]
 800ac2e:	e024      	b.n	800ac7a <USB_EPStartXfer+0x318>
 800ac30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	785b      	ldrb	r3, [r3, #1]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d11c      	bne.n	800ac7a <USB_EPStartXfer+0x318>
 800ac40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	461a      	mov	r2, r3
 800ac52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac54:	4413      	add	r3, r2
 800ac56:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	011a      	lsls	r2, r3, #4
 800ac66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac68:	4413      	add	r3, r2
 800ac6a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ac6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac74:	b29a      	uxth	r2, r3
 800ac76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ac7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	895b      	ldrh	r3, [r3, #10]
 800ac86:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	6959      	ldr	r1, [r3, #20]
 800ac96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800aca0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800aca4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800aca8:	6800      	ldr	r0, [r0, #0]
 800acaa:	f001 fb39 	bl	800c320 <USB_WritePMA>
            ep->xfer_buff += len;
 800acae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	695a      	ldr	r2, [r3, #20]
 800acba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acbe:	441a      	add	r2, r3
 800acc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800accc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	6a1a      	ldr	r2, [r3, #32]
 800acd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	691b      	ldr	r3, [r3, #16]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d90f      	bls.n	800ad08 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800ace8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	6a1a      	ldr	r2, [r3, #32]
 800acf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acf8:	1ad2      	subs	r2, r2, r3
 800acfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	621a      	str	r2, [r3, #32]
 800ad06:	e00e      	b.n	800ad26 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800ad08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	6a1b      	ldr	r3, [r3, #32]
 800ad14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800ad18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2200      	movs	r2, #0
 800ad24:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	785b      	ldrb	r3, [r3, #1]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d177      	bne.n	800ae26 <USB_EPStartXfer+0x4c4>
 800ad36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	61bb      	str	r3, [r7, #24]
 800ad42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	461a      	mov	r2, r3
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	4413      	add	r3, r2
 800ad58:	61bb      	str	r3, [r7, #24]
 800ad5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	011a      	lsls	r2, r3, #4
 800ad68:	69bb      	ldr	r3, [r7, #24]
 800ad6a:	4413      	add	r3, r2
 800ad6c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ad70:	617b      	str	r3, [r7, #20]
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	881b      	ldrh	r3, [r3, #0]
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad7c:	b29a      	uxth	r2, r3
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	801a      	strh	r2, [r3, #0]
 800ad82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad86:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad88:	d921      	bls.n	800adce <USB_EPStartXfer+0x46c>
 800ad8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad8e:	095b      	lsrs	r3, r3, #5
 800ad90:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ad94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad98:	f003 031f 	and.w	r3, r3, #31
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d104      	bne.n	800adaa <USB_EPStartXfer+0x448>
 800ada0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ada4:	3b01      	subs	r3, #1
 800ada6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	881b      	ldrh	r3, [r3, #0]
 800adae:	b29a      	uxth	r2, r3
 800adb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	029b      	lsls	r3, r3, #10
 800adb8:	b29b      	uxth	r3, r3
 800adba:	4313      	orrs	r3, r2
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adc6:	b29a      	uxth	r2, r3
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	801a      	strh	r2, [r3, #0]
 800adcc:	e056      	b.n	800ae7c <USB_EPStartXfer+0x51a>
 800adce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800add2:	2b00      	cmp	r3, #0
 800add4:	d10a      	bne.n	800adec <USB_EPStartXfer+0x48a>
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	881b      	ldrh	r3, [r3, #0]
 800adda:	b29b      	uxth	r3, r3
 800addc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ade0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ade4:	b29a      	uxth	r2, r3
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	801a      	strh	r2, [r3, #0]
 800adea:	e047      	b.n	800ae7c <USB_EPStartXfer+0x51a>
 800adec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adf0:	085b      	lsrs	r3, r3, #1
 800adf2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800adf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adfa:	f003 0301 	and.w	r3, r3, #1
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d004      	beq.n	800ae0c <USB_EPStartXfer+0x4aa>
 800ae02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae06:	3301      	adds	r3, #1
 800ae08:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	881b      	ldrh	r3, [r3, #0]
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	029b      	lsls	r3, r3, #10
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	b29a      	uxth	r2, r3
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	801a      	strh	r2, [r3, #0]
 800ae24:	e02a      	b.n	800ae7c <USB_EPStartXfer+0x51a>
 800ae26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	785b      	ldrb	r3, [r3, #1]
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d122      	bne.n	800ae7c <USB_EPStartXfer+0x51a>
 800ae36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	623b      	str	r3, [r7, #32]
 800ae42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	461a      	mov	r2, r3
 800ae54:	6a3b      	ldr	r3, [r7, #32]
 800ae56:	4413      	add	r3, r2
 800ae58:	623b      	str	r3, [r7, #32]
 800ae5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	011a      	lsls	r2, r3, #4
 800ae68:	6a3b      	ldr	r3, [r7, #32]
 800ae6a:	4413      	add	r3, r2
 800ae6c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ae70:	61fb      	str	r3, [r7, #28]
 800ae72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae76:	b29a      	uxth	r2, r3
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ae7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	891b      	ldrh	r3, [r3, #8]
 800ae88:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	6959      	ldr	r1, [r3, #20]
 800ae98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800aea2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800aea6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800aeaa:	6800      	ldr	r0, [r0, #0]
 800aeac:	f001 fa38 	bl	800c320 <USB_WritePMA>
 800aeb0:	e3ee      	b.n	800b690 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aeb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	785b      	ldrb	r3, [r3, #1]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d177      	bne.n	800afb2 <USB_EPStartXfer+0x650>
 800aec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aec6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aedc:	b29b      	uxth	r3, r3
 800aede:	461a      	mov	r2, r3
 800aee0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aee2:	4413      	add	r3, r2
 800aee4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	011a      	lsls	r2, r3, #4
 800aef4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aef6:	4413      	add	r3, r2
 800aef8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800aefc:	647b      	str	r3, [r7, #68]	@ 0x44
 800aefe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af00:	881b      	ldrh	r3, [r3, #0]
 800af02:	b29b      	uxth	r3, r3
 800af04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af08:	b29a      	uxth	r2, r3
 800af0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af0c:	801a      	strh	r2, [r3, #0]
 800af0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af12:	2b3e      	cmp	r3, #62	@ 0x3e
 800af14:	d921      	bls.n	800af5a <USB_EPStartXfer+0x5f8>
 800af16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af1a:	095b      	lsrs	r3, r3, #5
 800af1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800af20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af24:	f003 031f 	and.w	r3, r3, #31
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d104      	bne.n	800af36 <USB_EPStartXfer+0x5d4>
 800af2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800af30:	3b01      	subs	r3, #1
 800af32:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800af36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af38:	881b      	ldrh	r3, [r3, #0]
 800af3a:	b29a      	uxth	r2, r3
 800af3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800af40:	b29b      	uxth	r3, r3
 800af42:	029b      	lsls	r3, r3, #10
 800af44:	b29b      	uxth	r3, r3
 800af46:	4313      	orrs	r3, r2
 800af48:	b29b      	uxth	r3, r3
 800af4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af52:	b29a      	uxth	r2, r3
 800af54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af56:	801a      	strh	r2, [r3, #0]
 800af58:	e056      	b.n	800b008 <USB_EPStartXfer+0x6a6>
 800af5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d10a      	bne.n	800af78 <USB_EPStartXfer+0x616>
 800af62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af64:	881b      	ldrh	r3, [r3, #0]
 800af66:	b29b      	uxth	r3, r3
 800af68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af70:	b29a      	uxth	r2, r3
 800af72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af74:	801a      	strh	r2, [r3, #0]
 800af76:	e047      	b.n	800b008 <USB_EPStartXfer+0x6a6>
 800af78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af7c:	085b      	lsrs	r3, r3, #1
 800af7e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800af82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af86:	f003 0301 	and.w	r3, r3, #1
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d004      	beq.n	800af98 <USB_EPStartXfer+0x636>
 800af8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800af92:	3301      	adds	r3, #1
 800af94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800af98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af9a:	881b      	ldrh	r3, [r3, #0]
 800af9c:	b29a      	uxth	r2, r3
 800af9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	029b      	lsls	r3, r3, #10
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	4313      	orrs	r3, r2
 800afaa:	b29a      	uxth	r2, r3
 800afac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afae:	801a      	strh	r2, [r3, #0]
 800afb0:	e02a      	b.n	800b008 <USB_EPStartXfer+0x6a6>
 800afb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	785b      	ldrb	r3, [r3, #1]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d122      	bne.n	800b008 <USB_EPStartXfer+0x6a6>
 800afc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	653b      	str	r3, [r7, #80]	@ 0x50
 800afce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800afdc:	b29b      	uxth	r3, r3
 800afde:	461a      	mov	r2, r3
 800afe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afe2:	4413      	add	r3, r2
 800afe4:	653b      	str	r3, [r7, #80]	@ 0x50
 800afe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	011a      	lsls	r2, r3, #4
 800aff4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aff6:	4413      	add	r3, r2
 800aff8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800affc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800affe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b002:	b29a      	uxth	r2, r3
 800b004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b006:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b00c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	891b      	ldrh	r3, [r3, #8]
 800b014:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b01c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	6959      	ldr	r1, [r3, #20]
 800b024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b028:	b29b      	uxth	r3, r3
 800b02a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b02e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b032:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b036:	6800      	ldr	r0, [r0, #0]
 800b038:	f001 f972 	bl	800c320 <USB_WritePMA>
            ep->xfer_buff += len;
 800b03c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	695a      	ldr	r2, [r3, #20]
 800b048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b04c:	441a      	add	r2, r3
 800b04e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b05a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b05e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	6a1a      	ldr	r2, [r3, #32]
 800b066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b06a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	691b      	ldr	r3, [r3, #16]
 800b072:	429a      	cmp	r2, r3
 800b074:	d90f      	bls.n	800b096 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800b076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b07a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	6a1a      	ldr	r2, [r3, #32]
 800b082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b086:	1ad2      	subs	r2, r2, r3
 800b088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b08c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	621a      	str	r2, [r3, #32]
 800b094:	e00e      	b.n	800b0b4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800b096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b09a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b0a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b0b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	785b      	ldrb	r3, [r3, #1]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d177      	bne.n	800b1c0 <USB_EPStartXfer+0x85e>
 800b0d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b0dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f0:	4413      	add	r3, r2
 800b0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b0f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	011a      	lsls	r2, r3, #4
 800b102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b104:	4413      	add	r3, r2
 800b106:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b10a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b10c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b10e:	881b      	ldrh	r3, [r3, #0]
 800b110:	b29b      	uxth	r3, r3
 800b112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b116:	b29a      	uxth	r2, r3
 800b118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b11a:	801a      	strh	r2, [r3, #0]
 800b11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b120:	2b3e      	cmp	r3, #62	@ 0x3e
 800b122:	d921      	bls.n	800b168 <USB_EPStartXfer+0x806>
 800b124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b128:	095b      	lsrs	r3, r3, #5
 800b12a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b12e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b132:	f003 031f 	and.w	r3, r3, #31
 800b136:	2b00      	cmp	r3, #0
 800b138:	d104      	bne.n	800b144 <USB_EPStartXfer+0x7e2>
 800b13a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b13e:	3b01      	subs	r3, #1
 800b140:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b146:	881b      	ldrh	r3, [r3, #0]
 800b148:	b29a      	uxth	r2, r3
 800b14a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b14e:	b29b      	uxth	r3, r3
 800b150:	029b      	lsls	r3, r3, #10
 800b152:	b29b      	uxth	r3, r3
 800b154:	4313      	orrs	r3, r2
 800b156:	b29b      	uxth	r3, r3
 800b158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b15c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b160:	b29a      	uxth	r2, r3
 800b162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b164:	801a      	strh	r2, [r3, #0]
 800b166:	e050      	b.n	800b20a <USB_EPStartXfer+0x8a8>
 800b168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d10a      	bne.n	800b186 <USB_EPStartXfer+0x824>
 800b170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b172:	881b      	ldrh	r3, [r3, #0]
 800b174:	b29b      	uxth	r3, r3
 800b176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b17a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b17e:	b29a      	uxth	r2, r3
 800b180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b182:	801a      	strh	r2, [r3, #0]
 800b184:	e041      	b.n	800b20a <USB_EPStartXfer+0x8a8>
 800b186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b18a:	085b      	lsrs	r3, r3, #1
 800b18c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b194:	f003 0301 	and.w	r3, r3, #1
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d004      	beq.n	800b1a6 <USB_EPStartXfer+0x844>
 800b19c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b1a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1a8:	881b      	ldrh	r3, [r3, #0]
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	029b      	lsls	r3, r3, #10
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	b29a      	uxth	r2, r3
 800b1ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1bc:	801a      	strh	r2, [r3, #0]
 800b1be:	e024      	b.n	800b20a <USB_EPStartXfer+0x8a8>
 800b1c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	785b      	ldrb	r3, [r3, #1]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d11c      	bne.n	800b20a <USB_EPStartXfer+0x8a8>
 800b1d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1e4:	4413      	add	r3, r2
 800b1e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	011a      	lsls	r2, r3, #4
 800b1f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1f8:	4413      	add	r3, r2
 800b1fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b204:	b29a      	uxth	r2, r3
 800b206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b208:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b20a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b20e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	895b      	ldrh	r3, [r3, #10]
 800b216:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b21a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b21e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	6959      	ldr	r1, [r3, #20]
 800b226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b230:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b234:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b238:	6800      	ldr	r0, [r0, #0]
 800b23a:	f001 f871 	bl	800c320 <USB_WritePMA>
 800b23e:	e227      	b.n	800b690 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	6a1b      	ldr	r3, [r3, #32]
 800b24c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b254:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b25e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	4413      	add	r3, r2
 800b26a:	881b      	ldrh	r3, [r3, #0]
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b276:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b27a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b27e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	441a      	add	r2, r3
 800b294:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b298:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b29c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b2ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b2b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2cc:	4413      	add	r3, r2
 800b2ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b2d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	011a      	lsls	r2, r3, #4
 800b2de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2e0:	4413      	add	r3, r2
 800b2e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b2e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b2f0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b2f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	891b      	ldrh	r3, [r3, #8]
 800b2fe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	6959      	ldr	r1, [r3, #20]
 800b30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b312:	b29b      	uxth	r3, r3
 800b314:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b318:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b31c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b320:	6800      	ldr	r0, [r0, #0]
 800b322:	f000 fffd 	bl	800c320 <USB_WritePMA>
 800b326:	e1b3      	b.n	800b690 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b32c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	6a1a      	ldr	r2, [r3, #32]
 800b334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b338:	1ad2      	subs	r2, r2, r3
 800b33a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b33e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b34a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	4413      	add	r3, r2
 800b360:	881b      	ldrh	r3, [r3, #0]
 800b362:	b29b      	uxth	r3, r3
 800b364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b368:	2b00      	cmp	r3, #0
 800b36a:	f000 80c6 	beq.w	800b4fa <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b36e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	673b      	str	r3, [r7, #112]	@ 0x70
 800b37a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b37e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	785b      	ldrb	r3, [r3, #1]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d177      	bne.n	800b47a <USB_EPStartXfer+0xb18>
 800b38a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b38e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b39a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b3aa:	4413      	add	r3, r2
 800b3ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b3ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	011a      	lsls	r2, r3, #4
 800b3bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b3be:	4413      	add	r3, r2
 800b3c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b3c4:	667b      	str	r3, [r7, #100]	@ 0x64
 800b3c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b3c8:	881b      	ldrh	r3, [r3, #0]
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3d0:	b29a      	uxth	r2, r3
 800b3d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b3d4:	801a      	strh	r2, [r3, #0]
 800b3d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3da:	2b3e      	cmp	r3, #62	@ 0x3e
 800b3dc:	d921      	bls.n	800b422 <USB_EPStartXfer+0xac0>
 800b3de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3e2:	095b      	lsrs	r3, r3, #5
 800b3e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b3e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3ec:	f003 031f 	and.w	r3, r3, #31
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d104      	bne.n	800b3fe <USB_EPStartXfer+0xa9c>
 800b3f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b3f8:	3b01      	subs	r3, #1
 800b3fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b3fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b400:	881b      	ldrh	r3, [r3, #0]
 800b402:	b29a      	uxth	r2, r3
 800b404:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b408:	b29b      	uxth	r3, r3
 800b40a:	029b      	lsls	r3, r3, #10
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	4313      	orrs	r3, r2
 800b410:	b29b      	uxth	r3, r3
 800b412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b41a:	b29a      	uxth	r2, r3
 800b41c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b41e:	801a      	strh	r2, [r3, #0]
 800b420:	e050      	b.n	800b4c4 <USB_EPStartXfer+0xb62>
 800b422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b426:	2b00      	cmp	r3, #0
 800b428:	d10a      	bne.n	800b440 <USB_EPStartXfer+0xade>
 800b42a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b42c:	881b      	ldrh	r3, [r3, #0]
 800b42e:	b29b      	uxth	r3, r3
 800b430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b438:	b29a      	uxth	r2, r3
 800b43a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b43c:	801a      	strh	r2, [r3, #0]
 800b43e:	e041      	b.n	800b4c4 <USB_EPStartXfer+0xb62>
 800b440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b444:	085b      	lsrs	r3, r3, #1
 800b446:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b44a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b44e:	f003 0301 	and.w	r3, r3, #1
 800b452:	2b00      	cmp	r3, #0
 800b454:	d004      	beq.n	800b460 <USB_EPStartXfer+0xafe>
 800b456:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b45a:	3301      	adds	r3, #1
 800b45c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b460:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b462:	881b      	ldrh	r3, [r3, #0]
 800b464:	b29a      	uxth	r2, r3
 800b466:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	029b      	lsls	r3, r3, #10
 800b46e:	b29b      	uxth	r3, r3
 800b470:	4313      	orrs	r3, r2
 800b472:	b29a      	uxth	r2, r3
 800b474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b476:	801a      	strh	r2, [r3, #0]
 800b478:	e024      	b.n	800b4c4 <USB_EPStartXfer+0xb62>
 800b47a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b47e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	785b      	ldrb	r3, [r3, #1]
 800b486:	2b01      	cmp	r3, #1
 800b488:	d11c      	bne.n	800b4c4 <USB_EPStartXfer+0xb62>
 800b48a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b48e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b498:	b29b      	uxth	r3, r3
 800b49a:	461a      	mov	r2, r3
 800b49c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b49e:	4413      	add	r3, r2
 800b4a0:	673b      	str	r3, [r7, #112]	@ 0x70
 800b4a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	011a      	lsls	r2, r3, #4
 800b4b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b4b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b4c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	895b      	ldrh	r3, [r3, #10]
 800b4d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b4d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	6959      	ldr	r1, [r3, #20]
 800b4e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b4ea:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b4ee:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b4f2:	6800      	ldr	r0, [r0, #0]
 800b4f4:	f000 ff14 	bl	800c320 <USB_WritePMA>
 800b4f8:	e0ca      	b.n	800b690 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b4fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	785b      	ldrb	r3, [r3, #1]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d177      	bne.n	800b5fa <USB_EPStartXfer+0xc98>
 800b50a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b50e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b51a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b524:	b29b      	uxth	r3, r3
 800b526:	461a      	mov	r2, r3
 800b528:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b52a:	4413      	add	r3, r2
 800b52c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b52e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	011a      	lsls	r2, r3, #4
 800b53c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b53e:	4413      	add	r3, r2
 800b540:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b544:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b546:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b548:	881b      	ldrh	r3, [r3, #0]
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b550:	b29a      	uxth	r2, r3
 800b552:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b554:	801a      	strh	r2, [r3, #0]
 800b556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b55a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b55c:	d921      	bls.n	800b5a2 <USB_EPStartXfer+0xc40>
 800b55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b562:	095b      	lsrs	r3, r3, #5
 800b564:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b56c:	f003 031f 	and.w	r3, r3, #31
 800b570:	2b00      	cmp	r3, #0
 800b572:	d104      	bne.n	800b57e <USB_EPStartXfer+0xc1c>
 800b574:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b578:	3b01      	subs	r3, #1
 800b57a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b57e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b580:	881b      	ldrh	r3, [r3, #0]
 800b582:	b29a      	uxth	r2, r3
 800b584:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b588:	b29b      	uxth	r3, r3
 800b58a:	029b      	lsls	r3, r3, #10
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	4313      	orrs	r3, r2
 800b590:	b29b      	uxth	r3, r3
 800b592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b59a:	b29a      	uxth	r2, r3
 800b59c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b59e:	801a      	strh	r2, [r3, #0]
 800b5a0:	e05c      	b.n	800b65c <USB_EPStartXfer+0xcfa>
 800b5a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d10a      	bne.n	800b5c0 <USB_EPStartXfer+0xc5e>
 800b5aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5ac:	881b      	ldrh	r3, [r3, #0]
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5bc:	801a      	strh	r2, [r3, #0]
 800b5be:	e04d      	b.n	800b65c <USB_EPStartXfer+0xcfa>
 800b5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5c4:	085b      	lsrs	r3, r3, #1
 800b5c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b5ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5ce:	f003 0301 	and.w	r3, r3, #1
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d004      	beq.n	800b5e0 <USB_EPStartXfer+0xc7e>
 800b5d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b5da:	3301      	adds	r3, #1
 800b5dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b5e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5e2:	881b      	ldrh	r3, [r3, #0]
 800b5e4:	b29a      	uxth	r2, r3
 800b5e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	029b      	lsls	r3, r3, #10
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	b29a      	uxth	r2, r3
 800b5f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5f6:	801a      	strh	r2, [r3, #0]
 800b5f8:	e030      	b.n	800b65c <USB_EPStartXfer+0xcfa>
 800b5fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	785b      	ldrb	r3, [r3, #1]
 800b606:	2b01      	cmp	r3, #1
 800b608:	d128      	bne.n	800b65c <USB_EPStartXfer+0xcfa>
 800b60a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b60e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b61c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b626:	b29b      	uxth	r3, r3
 800b628:	461a      	mov	r2, r3
 800b62a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b62e:	4413      	add	r3, r2
 800b630:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	011a      	lsls	r2, r3, #4
 800b642:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b646:	4413      	add	r3, r2
 800b648:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b64c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b654:	b29a      	uxth	r2, r3
 800b656:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b65a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b65c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	891b      	ldrh	r3, [r3, #8]
 800b668:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b66c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	6959      	ldr	r1, [r3, #20]
 800b678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b682:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b686:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b68a:	6800      	ldr	r0, [r0, #0]
 800b68c:	f000 fe48 	bl	800c320 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b694:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b69e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	4413      	add	r3, r2
 800b6aa:	881b      	ldrh	r3, [r3, #0]
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6b6:	817b      	strh	r3, [r7, #10]
 800b6b8:	897b      	ldrh	r3, [r7, #10]
 800b6ba:	f083 0310 	eor.w	r3, r3, #16
 800b6be:	817b      	strh	r3, [r7, #10]
 800b6c0:	897b      	ldrh	r3, [r7, #10]
 800b6c2:	f083 0320 	eor.w	r3, r3, #32
 800b6c6:	817b      	strh	r3, [r7, #10]
 800b6c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	441a      	add	r2, r3
 800b6e2:	897b      	ldrh	r3, [r7, #10]
 800b6e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	8013      	strh	r3, [r2, #0]
 800b6f8:	f000 bcde 	b.w	800c0b8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b6fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	7b1b      	ldrb	r3, [r3, #12]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f040 80bb 	bne.w	800b884 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b70e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	699a      	ldr	r2, [r3, #24]
 800b71a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b71e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	691b      	ldr	r3, [r3, #16]
 800b726:	429a      	cmp	r2, r3
 800b728:	d917      	bls.n	800b75a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b72a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b72e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	691b      	ldr	r3, [r3, #16]
 800b736:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800b73a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b73e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	699a      	ldr	r2, [r3, #24]
 800b746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b74a:	1ad2      	subs	r2, r2, r3
 800b74c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	619a      	str	r2, [r3, #24]
 800b758:	e00e      	b.n	800b778 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b75a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b75e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	699b      	ldr	r3, [r3, #24]
 800b766:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800b76a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b76e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2200      	movs	r2, #0
 800b776:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b77c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b78a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b794:	b29b      	uxth	r3, r3
 800b796:	461a      	mov	r2, r3
 800b798:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b79c:	4413      	add	r3, r2
 800b79e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b7a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	011a      	lsls	r2, r3, #4
 800b7b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b7b4:	4413      	add	r3, r2
 800b7b6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b7ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b7be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b7c2:	881b      	ldrh	r3, [r3, #0]
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b7d0:	801a      	strh	r2, [r3, #0]
 800b7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7d6:	2b3e      	cmp	r3, #62	@ 0x3e
 800b7d8:	d924      	bls.n	800b824 <USB_EPStartXfer+0xec2>
 800b7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7de:	095b      	lsrs	r3, r3, #5
 800b7e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b7e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7e8:	f003 031f 	and.w	r3, r3, #31
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d104      	bne.n	800b7fa <USB_EPStartXfer+0xe98>
 800b7f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b7fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b7fe:	881b      	ldrh	r3, [r3, #0]
 800b800:	b29a      	uxth	r2, r3
 800b802:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b806:	b29b      	uxth	r3, r3
 800b808:	029b      	lsls	r3, r3, #10
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	4313      	orrs	r3, r2
 800b80e:	b29b      	uxth	r3, r3
 800b810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b818:	b29a      	uxth	r2, r3
 800b81a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b81e:	801a      	strh	r2, [r3, #0]
 800b820:	f000 bc10 	b.w	800c044 <USB_EPStartXfer+0x16e2>
 800b824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10c      	bne.n	800b846 <USB_EPStartXfer+0xee4>
 800b82c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b830:	881b      	ldrh	r3, [r3, #0]
 800b832:	b29b      	uxth	r3, r3
 800b834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b842:	801a      	strh	r2, [r3, #0]
 800b844:	e3fe      	b.n	800c044 <USB_EPStartXfer+0x16e2>
 800b846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b84a:	085b      	lsrs	r3, r3, #1
 800b84c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b854:	f003 0301 	and.w	r3, r3, #1
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d004      	beq.n	800b866 <USB_EPStartXfer+0xf04>
 800b85c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b860:	3301      	adds	r3, #1
 800b862:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b866:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b86a:	881b      	ldrh	r3, [r3, #0]
 800b86c:	b29a      	uxth	r2, r3
 800b86e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b872:	b29b      	uxth	r3, r3
 800b874:	029b      	lsls	r3, r3, #10
 800b876:	b29b      	uxth	r3, r3
 800b878:	4313      	orrs	r3, r2
 800b87a:	b29a      	uxth	r2, r3
 800b87c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b880:	801a      	strh	r2, [r3, #0]
 800b882:	e3df      	b.n	800c044 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	78db      	ldrb	r3, [r3, #3]
 800b890:	2b02      	cmp	r3, #2
 800b892:	f040 8218 	bne.w	800bcc6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b89a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	785b      	ldrb	r3, [r3, #1]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	f040 809d 	bne.w	800b9e2 <USB_EPStartXfer+0x1080>
 800b8a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b8b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b8cc:	4413      	add	r3, r2
 800b8ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b8d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	011a      	lsls	r2, r3, #4
 800b8e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b8e4:	4413      	add	r3, r2
 800b8e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b8ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b8ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b8f2:	881b      	ldrh	r3, [r3, #0]
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8fa:	b29a      	uxth	r2, r3
 800b8fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b900:	801a      	strh	r2, [r3, #0]
 800b902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	691b      	ldr	r3, [r3, #16]
 800b90e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b910:	d92b      	bls.n	800b96a <USB_EPStartXfer+0x1008>
 800b912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b916:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	691b      	ldr	r3, [r3, #16]
 800b91e:	095b      	lsrs	r3, r3, #5
 800b920:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	691b      	ldr	r3, [r3, #16]
 800b930:	f003 031f 	and.w	r3, r3, #31
 800b934:	2b00      	cmp	r3, #0
 800b936:	d104      	bne.n	800b942 <USB_EPStartXfer+0xfe0>
 800b938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b93c:	3b01      	subs	r3, #1
 800b93e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b942:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b946:	881b      	ldrh	r3, [r3, #0]
 800b948:	b29a      	uxth	r2, r3
 800b94a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b94e:	b29b      	uxth	r3, r3
 800b950:	029b      	lsls	r3, r3, #10
 800b952:	b29b      	uxth	r3, r3
 800b954:	4313      	orrs	r3, r2
 800b956:	b29b      	uxth	r3, r3
 800b958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b95c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b960:	b29a      	uxth	r2, r3
 800b962:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b966:	801a      	strh	r2, [r3, #0]
 800b968:	e070      	b.n	800ba4c <USB_EPStartXfer+0x10ea>
 800b96a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b96e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d10c      	bne.n	800b994 <USB_EPStartXfer+0x1032>
 800b97a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b97e:	881b      	ldrh	r3, [r3, #0]
 800b980:	b29b      	uxth	r3, r3
 800b982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b990:	801a      	strh	r2, [r3, #0]
 800b992:	e05b      	b.n	800ba4c <USB_EPStartXfer+0x10ea>
 800b994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	691b      	ldr	r3, [r3, #16]
 800b9a0:	085b      	lsrs	r3, r3, #1
 800b9a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b9a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	691b      	ldr	r3, [r3, #16]
 800b9b2:	f003 0301 	and.w	r3, r3, #1
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d004      	beq.n	800b9c4 <USB_EPStartXfer+0x1062>
 800b9ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9be:	3301      	adds	r3, #1
 800b9c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b9c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9c8:	881b      	ldrh	r3, [r3, #0]
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	029b      	lsls	r3, r3, #10
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	b29a      	uxth	r2, r3
 800b9da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9de:	801a      	strh	r2, [r3, #0]
 800b9e0:	e034      	b.n	800ba4c <USB_EPStartXfer+0x10ea>
 800b9e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	785b      	ldrb	r3, [r3, #1]
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d12c      	bne.n	800ba4c <USB_EPStartXfer+0x10ea>
 800b9f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	461a      	mov	r2, r3
 800ba12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ba16:	4413      	add	r3, r2
 800ba18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	011a      	lsls	r2, r3, #4
 800ba2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ba2e:	4413      	add	r3, r2
 800ba30:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ba34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ba38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	691b      	ldr	r3, [r3, #16]
 800ba44:	b29a      	uxth	r2, r3
 800ba46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ba4a:	801a      	strh	r2, [r3, #0]
 800ba4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ba5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	785b      	ldrb	r3, [r3, #1]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	f040 809d 	bne.w	800bba6 <USB_EPStartXfer+0x1244>
 800ba6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ba7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ba90:	4413      	add	r3, r2
 800ba92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ba96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	011a      	lsls	r2, r3, #4
 800baa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800baa8:	4413      	add	r3, r2
 800baaa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800baae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bab2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bab6:	881b      	ldrh	r3, [r3, #0]
 800bab8:	b29b      	uxth	r3, r3
 800baba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800babe:	b29a      	uxth	r2, r3
 800bac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bac4:	801a      	strh	r2, [r3, #0]
 800bac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	2b3e      	cmp	r3, #62	@ 0x3e
 800bad4:	d92b      	bls.n	800bb2e <USB_EPStartXfer+0x11cc>
 800bad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	691b      	ldr	r3, [r3, #16]
 800bae2:	095b      	lsrs	r3, r3, #5
 800bae4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	691b      	ldr	r3, [r3, #16]
 800baf4:	f003 031f 	and.w	r3, r3, #31
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d104      	bne.n	800bb06 <USB_EPStartXfer+0x11a4>
 800bafc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb00:	3b01      	subs	r3, #1
 800bb02:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bb06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb0a:	881b      	ldrh	r3, [r3, #0]
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	029b      	lsls	r3, r3, #10
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb24:	b29a      	uxth	r2, r3
 800bb26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb2a:	801a      	strh	r2, [r3, #0]
 800bb2c:	e069      	b.n	800bc02 <USB_EPStartXfer+0x12a0>
 800bb2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d10c      	bne.n	800bb58 <USB_EPStartXfer+0x11f6>
 800bb3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb42:	881b      	ldrh	r3, [r3, #0]
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb54:	801a      	strh	r2, [r3, #0]
 800bb56:	e054      	b.n	800bc02 <USB_EPStartXfer+0x12a0>
 800bb58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	085b      	lsrs	r3, r3, #1
 800bb66:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bb6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	f003 0301 	and.w	r3, r3, #1
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d004      	beq.n	800bb88 <USB_EPStartXfer+0x1226>
 800bb7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb82:	3301      	adds	r3, #1
 800bb84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bb88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb8c:	881b      	ldrh	r3, [r3, #0]
 800bb8e:	b29a      	uxth	r2, r3
 800bb90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	029b      	lsls	r3, r3, #10
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	b29a      	uxth	r2, r3
 800bb9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bba2:	801a      	strh	r2, [r3, #0]
 800bba4:	e02d      	b.n	800bc02 <USB_EPStartXfer+0x12a0>
 800bba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	785b      	ldrb	r3, [r3, #1]
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d125      	bne.n	800bc02 <USB_EPStartXfer+0x12a0>
 800bbb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bbcc:	4413      	add	r3, r2
 800bbce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bbd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	011a      	lsls	r2, r3, #4
 800bbe0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bbe4:	4413      	add	r3, r2
 800bbe6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bbea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bbee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	b29a      	uxth	r2, r3
 800bbfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc00:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bc02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	69db      	ldr	r3, [r3, #28]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	f000 8218 	beq.w	800c044 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bc14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	4413      	add	r3, r2
 800bc2e:	881b      	ldrh	r3, [r3, #0]
 800bc30:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bc34:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bc38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d005      	beq.n	800bc4c <USB_EPStartXfer+0x12ea>
 800bc40:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bc44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10d      	bne.n	800bc68 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bc4c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bc50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f040 81f5 	bne.w	800c044 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bc5a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bc5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	f040 81ee 	bne.w	800c044 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800bc68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	4413      	add	r3, r2
 800bc82:	881b      	ldrh	r3, [r3, #0]
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc8e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800bc92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	441a      	add	r2, r3
 800bcac:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bcb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bcb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bcb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcbc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	8013      	strh	r3, [r2, #0]
 800bcc4:	e1be      	b.n	800c044 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bcc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	78db      	ldrb	r3, [r3, #3]
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	f040 81b4 	bne.w	800c040 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bcd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	699a      	ldr	r2, [r3, #24]
 800bce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	691b      	ldr	r3, [r3, #16]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d917      	bls.n	800bd24 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800bcf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	691b      	ldr	r3, [r3, #16]
 800bd00:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800bd04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	699a      	ldr	r2, [r3, #24]
 800bd10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd14:	1ad2      	subs	r2, r2, r3
 800bd16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	619a      	str	r2, [r3, #24]
 800bd22:	e00e      	b.n	800bd42 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800bd24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	699b      	ldr	r3, [r3, #24]
 800bd30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800bd34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bd42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	785b      	ldrb	r3, [r3, #1]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f040 8085 	bne.w	800be5e <USB_EPStartXfer+0x14fc>
 800bd54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bd62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	461a      	mov	r2, r3
 800bd74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bd78:	4413      	add	r3, r2
 800bd7a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bd7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	011a      	lsls	r2, r3, #4
 800bd8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bd90:	4413      	add	r3, r2
 800bd92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bd96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bd9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bd9e:	881b      	ldrh	r3, [r3, #0]
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bda6:	b29a      	uxth	r2, r3
 800bda8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bdac:	801a      	strh	r2, [r3, #0]
 800bdae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdb2:	2b3e      	cmp	r3, #62	@ 0x3e
 800bdb4:	d923      	bls.n	800bdfe <USB_EPStartXfer+0x149c>
 800bdb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdba:	095b      	lsrs	r3, r3, #5
 800bdbc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bdc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdc4:	f003 031f 	and.w	r3, r3, #31
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d104      	bne.n	800bdd6 <USB_EPStartXfer+0x1474>
 800bdcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bdd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bdda:	881b      	ldrh	r3, [r3, #0]
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	029b      	lsls	r3, r3, #10
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	4313      	orrs	r3, r2
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bdf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bdfa:	801a      	strh	r2, [r3, #0]
 800bdfc:	e060      	b.n	800bec0 <USB_EPStartXfer+0x155e>
 800bdfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be02:	2b00      	cmp	r3, #0
 800be04:	d10c      	bne.n	800be20 <USB_EPStartXfer+0x14be>
 800be06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be0a:	881b      	ldrh	r3, [r3, #0]
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be16:	b29a      	uxth	r2, r3
 800be18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be1c:	801a      	strh	r2, [r3, #0]
 800be1e:	e04f      	b.n	800bec0 <USB_EPStartXfer+0x155e>
 800be20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be24:	085b      	lsrs	r3, r3, #1
 800be26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800be2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be2e:	f003 0301 	and.w	r3, r3, #1
 800be32:	2b00      	cmp	r3, #0
 800be34:	d004      	beq.n	800be40 <USB_EPStartXfer+0x14de>
 800be36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be3a:	3301      	adds	r3, #1
 800be3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800be40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be44:	881b      	ldrh	r3, [r3, #0]
 800be46:	b29a      	uxth	r2, r3
 800be48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	029b      	lsls	r3, r3, #10
 800be50:	b29b      	uxth	r3, r3
 800be52:	4313      	orrs	r3, r2
 800be54:	b29a      	uxth	r2, r3
 800be56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be5a:	801a      	strh	r2, [r3, #0]
 800be5c:	e030      	b.n	800bec0 <USB_EPStartXfer+0x155e>
 800be5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	785b      	ldrb	r3, [r3, #1]
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d128      	bne.n	800bec0 <USB_EPStartXfer+0x155e>
 800be6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800be7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	461a      	mov	r2, r3
 800be8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800be92:	4413      	add	r3, r2
 800be94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800be98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	011a      	lsls	r2, r3, #4
 800bea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800beaa:	4413      	add	r3, r2
 800beac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800beb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800beb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beb8:	b29a      	uxth	r2, r3
 800beba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bebe:	801a      	strh	r2, [r3, #0]
 800bec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bec4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	785b      	ldrb	r3, [r3, #1]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f040 8085 	bne.w	800bfea <USB_EPStartXfer+0x1688>
 800bee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bee4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800beee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bef2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800befc:	b29b      	uxth	r3, r3
 800befe:	461a      	mov	r2, r3
 800bf00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bf04:	4413      	add	r3, r2
 800bf06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bf0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	011a      	lsls	r2, r3, #4
 800bf18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bf1c:	4413      	add	r3, r2
 800bf1e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bf22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bf26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bf2a:	881b      	ldrh	r3, [r3, #0]
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf32:	b29a      	uxth	r2, r3
 800bf34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bf38:	801a      	strh	r2, [r3, #0]
 800bf3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf3e:	2b3e      	cmp	r3, #62	@ 0x3e
 800bf40:	d923      	bls.n	800bf8a <USB_EPStartXfer+0x1628>
 800bf42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf46:	095b      	lsrs	r3, r3, #5
 800bf48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bf4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf50:	f003 031f 	and.w	r3, r3, #31
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d104      	bne.n	800bf62 <USB_EPStartXfer+0x1600>
 800bf58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bf62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bf66:	881b      	ldrh	r3, [r3, #0]
 800bf68:	b29a      	uxth	r2, r3
 800bf6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	029b      	lsls	r3, r3, #10
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	4313      	orrs	r3, r2
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf80:	b29a      	uxth	r2, r3
 800bf82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bf86:	801a      	strh	r2, [r3, #0]
 800bf88:	e05c      	b.n	800c044 <USB_EPStartXfer+0x16e2>
 800bf8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d10c      	bne.n	800bfac <USB_EPStartXfer+0x164a>
 800bf92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bf96:	881b      	ldrh	r3, [r3, #0]
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfa2:	b29a      	uxth	r2, r3
 800bfa4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bfa8:	801a      	strh	r2, [r3, #0]
 800bfaa:	e04b      	b.n	800c044 <USB_EPStartXfer+0x16e2>
 800bfac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfb0:	085b      	lsrs	r3, r3, #1
 800bfb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bfb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfba:	f003 0301 	and.w	r3, r3, #1
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d004      	beq.n	800bfcc <USB_EPStartXfer+0x166a>
 800bfc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bfcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bfd0:	881b      	ldrh	r3, [r3, #0]
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	029b      	lsls	r3, r3, #10
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bfe6:	801a      	strh	r2, [r3, #0]
 800bfe8:	e02c      	b.n	800c044 <USB_EPStartXfer+0x16e2>
 800bfea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	785b      	ldrb	r3, [r3, #1]
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d124      	bne.n	800c044 <USB_EPStartXfer+0x16e2>
 800bffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bffe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c008:	b29b      	uxth	r3, r3
 800c00a:	461a      	mov	r2, r3
 800c00c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c010:	4413      	add	r3, r2
 800c012:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c01a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	011a      	lsls	r2, r3, #4
 800c024:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c028:	4413      	add	r3, r2
 800c02a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800c02e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c036:	b29a      	uxth	r2, r3
 800c038:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c03c:	801a      	strh	r2, [r3, #0]
 800c03e:	e001      	b.n	800c044 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800c040:	2301      	movs	r3, #1
 800c042:	e03a      	b.n	800c0ba <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c048:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4413      	add	r3, r2
 800c05e:	881b      	ldrh	r3, [r3, #0]
 800c060:	b29b      	uxth	r3, r3
 800c062:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c06a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c06e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c072:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c076:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c07a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c07e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c082:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c08a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c094:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	441a      	add	r2, r3
 800c0a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c0a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c0b8:	2300      	movs	r3, #0
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	785b      	ldrb	r3, [r3, #1]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d020      	beq.n	800c118 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	4413      	add	r3, r2
 800c0e0:	881b      	ldrh	r3, [r3, #0]
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0ec:	81bb      	strh	r3, [r7, #12]
 800c0ee:	89bb      	ldrh	r3, [r7, #12]
 800c0f0:	f083 0310 	eor.w	r3, r3, #16
 800c0f4:	81bb      	strh	r3, [r7, #12]
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	441a      	add	r2, r3
 800c100:	89bb      	ldrh	r3, [r7, #12]
 800c102:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c106:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c10a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c10e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c112:	b29b      	uxth	r3, r3
 800c114:	8013      	strh	r3, [r2, #0]
 800c116:	e01f      	b.n	800c158 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	4413      	add	r3, r2
 800c122:	881b      	ldrh	r3, [r3, #0]
 800c124:	b29b      	uxth	r3, r3
 800c126:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c12a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c12e:	81fb      	strh	r3, [r7, #14]
 800c130:	89fb      	ldrh	r3, [r7, #14]
 800c132:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c136:	81fb      	strh	r3, [r7, #14]
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	441a      	add	r2, r3
 800c142:	89fb      	ldrh	r3, [r7, #14]
 800c144:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c148:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c14c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c154:	b29b      	uxth	r3, r3
 800c156:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c158:	2300      	movs	r3, #0
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3714      	adds	r7, #20
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr

0800c166 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c166:	b480      	push	{r7}
 800c168:	b087      	sub	sp, #28
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
 800c16e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	7b1b      	ldrb	r3, [r3, #12]
 800c174:	2b00      	cmp	r3, #0
 800c176:	f040 809d 	bne.w	800c2b4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	785b      	ldrb	r3, [r3, #1]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d04c      	beq.n	800c21c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	4413      	add	r3, r2
 800c18c:	881b      	ldrh	r3, [r3, #0]
 800c18e:	823b      	strh	r3, [r7, #16]
 800c190:	8a3b      	ldrh	r3, [r7, #16]
 800c192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c196:	2b00      	cmp	r3, #0
 800c198:	d01b      	beq.n	800c1d2 <USB_EPClearStall+0x6c>
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	4413      	add	r3, r2
 800c1a4:	881b      	ldrh	r3, [r3, #0]
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1b0:	81fb      	strh	r3, [r7, #14]
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	441a      	add	r2, r3
 800c1bc:	89fb      	ldrh	r3, [r7, #14]
 800c1be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	78db      	ldrb	r3, [r3, #3]
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d06c      	beq.n	800c2b4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	4413      	add	r3, r2
 800c1e4:	881b      	ldrh	r3, [r3, #0]
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c1f0:	81bb      	strh	r3, [r7, #12]
 800c1f2:	89bb      	ldrh	r3, [r7, #12]
 800c1f4:	f083 0320 	eor.w	r3, r3, #32
 800c1f8:	81bb      	strh	r3, [r7, #12]
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	441a      	add	r2, r3
 800c204:	89bb      	ldrh	r3, [r7, #12]
 800c206:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c20a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c20e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c216:	b29b      	uxth	r3, r3
 800c218:	8013      	strh	r3, [r2, #0]
 800c21a:	e04b      	b.n	800c2b4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	4413      	add	r3, r2
 800c226:	881b      	ldrh	r3, [r3, #0]
 800c228:	82fb      	strh	r3, [r7, #22]
 800c22a:	8afb      	ldrh	r3, [r7, #22]
 800c22c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c230:	2b00      	cmp	r3, #0
 800c232:	d01b      	beq.n	800c26c <USB_EPClearStall+0x106>
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	4413      	add	r3, r2
 800c23e:	881b      	ldrh	r3, [r3, #0]
 800c240:	b29b      	uxth	r3, r3
 800c242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c24a:	82bb      	strh	r3, [r7, #20]
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	441a      	add	r2, r3
 800c256:	8abb      	ldrh	r3, [r7, #20]
 800c258:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c25c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c260:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c268:	b29b      	uxth	r3, r3
 800c26a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	4413      	add	r3, r2
 800c276:	881b      	ldrh	r3, [r3, #0]
 800c278:	b29b      	uxth	r3, r3
 800c27a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c27e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c282:	827b      	strh	r3, [r7, #18]
 800c284:	8a7b      	ldrh	r3, [r7, #18]
 800c286:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c28a:	827b      	strh	r3, [r7, #18]
 800c28c:	8a7b      	ldrh	r3, [r7, #18]
 800c28e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c292:	827b      	strh	r3, [r7, #18]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	441a      	add	r2, r3
 800c29e:	8a7b      	ldrh	r3, [r7, #18]
 800c2a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c2b4:	2300      	movs	r3, #0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	371c      	adds	r7, #28
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr

0800c2c2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c2c2:	b480      	push	{r7}
 800c2c4:	b083      	sub	sp, #12
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c2ce:	78fb      	ldrb	r3, [r7, #3]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d103      	bne.n	800c2dc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2280      	movs	r2, #128	@ 0x80
 800c2d8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	370c      	adds	r7, #12
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr

0800c2ea <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c2ea:	b480      	push	{r7}
 800c2ec:	b083      	sub	sp, #12
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c2f2:	2300      	movs	r3, #0
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	370c      	adds	r7, #12
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c30e:	b29b      	uxth	r3, r3
 800c310:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c312:	68fb      	ldr	r3, [r7, #12]
}
 800c314:	4618      	mov	r0, r3
 800c316:	3714      	adds	r7, #20
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c320:	b480      	push	{r7}
 800c322:	b08b      	sub	sp, #44	@ 0x2c
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	4611      	mov	r1, r2
 800c32c:	461a      	mov	r2, r3
 800c32e:	460b      	mov	r3, r1
 800c330:	80fb      	strh	r3, [r7, #6]
 800c332:	4613      	mov	r3, r2
 800c334:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c336:	88bb      	ldrh	r3, [r7, #4]
 800c338:	3301      	adds	r3, #1
 800c33a:	085b      	lsrs	r3, r3, #1
 800c33c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c346:	88fb      	ldrh	r3, [r7, #6]
 800c348:	005a      	lsls	r2, r3, #1
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	4413      	add	r3, r2
 800c34e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c352:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c354:	69bb      	ldr	r3, [r7, #24]
 800c356:	627b      	str	r3, [r7, #36]	@ 0x24
 800c358:	e01e      	b.n	800c398 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c360:	69fb      	ldr	r3, [r7, #28]
 800c362:	3301      	adds	r3, #1
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	021b      	lsls	r3, r3, #8
 800c368:	b21a      	sxth	r2, r3
 800c36a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c36e:	4313      	orrs	r3, r2
 800c370:	b21b      	sxth	r3, r3
 800c372:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c374:	6a3b      	ldr	r3, [r7, #32]
 800c376:	8a7a      	ldrh	r2, [r7, #18]
 800c378:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c37a:	6a3b      	ldr	r3, [r7, #32]
 800c37c:	3302      	adds	r3, #2
 800c37e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c380:	6a3b      	ldr	r3, [r7, #32]
 800c382:	3302      	adds	r3, #2
 800c384:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800c386:	69fb      	ldr	r3, [r7, #28]
 800c388:	3301      	adds	r3, #1
 800c38a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	3301      	adds	r3, #1
 800c390:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c394:	3b01      	subs	r3, #1
 800c396:	627b      	str	r3, [r7, #36]	@ 0x24
 800c398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d1dd      	bne.n	800c35a <USB_WritePMA+0x3a>
  }
}
 800c39e:	bf00      	nop
 800c3a0:	bf00      	nop
 800c3a2:	372c      	adds	r7, #44	@ 0x2c
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b08b      	sub	sp, #44	@ 0x2c
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	4611      	mov	r1, r2
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	80fb      	strh	r3, [r7, #6]
 800c3be:	4613      	mov	r3, r2
 800c3c0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c3c2:	88bb      	ldrh	r3, [r7, #4]
 800c3c4:	085b      	lsrs	r3, r3, #1
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c3d2:	88fb      	ldrh	r3, [r7, #6]
 800c3d4:	005a      	lsls	r2, r3, #1
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	4413      	add	r3, r2
 800c3da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c3de:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c3e0:	69bb      	ldr	r3, [r7, #24]
 800c3e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3e4:	e01b      	b.n	800c41e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c3e6:	6a3b      	ldr	r3, [r7, #32]
 800c3e8:	881b      	ldrh	r3, [r3, #0]
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c3ee:	6a3b      	ldr	r3, [r7, #32]
 800c3f0:	3302      	adds	r3, #2
 800c3f2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	b2da      	uxtb	r2, r3
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	3301      	adds	r3, #1
 800c400:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	0a1b      	lsrs	r3, r3, #8
 800c406:	b2da      	uxtb	r2, r3
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	3301      	adds	r3, #1
 800c410:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c412:	6a3b      	ldr	r3, [r7, #32]
 800c414:	3302      	adds	r3, #2
 800c416:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800c418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c41a:	3b01      	subs	r3, #1
 800c41c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c420:	2b00      	cmp	r3, #0
 800c422:	d1e0      	bne.n	800c3e6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c424:	88bb      	ldrh	r3, [r7, #4]
 800c426:	f003 0301 	and.w	r3, r3, #1
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d007      	beq.n	800c440 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800c430:	6a3b      	ldr	r3, [r7, #32]
 800c432:	881b      	ldrh	r3, [r3, #0]
 800c434:	b29b      	uxth	r3, r3
 800c436:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	b2da      	uxtb	r2, r3
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	701a      	strb	r2, [r3, #0]
  }
}
 800c440:	bf00      	nop
 800c442:	372c      	adds	r7, #44	@ 0x2c
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr

0800c44c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	460b      	mov	r3, r1
 800c456:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c458:	2300      	movs	r3, #0
 800c45a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	7c1b      	ldrb	r3, [r3, #16]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d115      	bne.n	800c490 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c464:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c468:	2202      	movs	r2, #2
 800c46a:	2181      	movs	r1, #129	@ 0x81
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f001 fe66 	bl	800e13e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2201      	movs	r2, #1
 800c476:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c478:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c47c:	2202      	movs	r2, #2
 800c47e:	2101      	movs	r1, #1
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f001 fe5c 	bl	800e13e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2201      	movs	r2, #1
 800c48a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800c48e:	e012      	b.n	800c4b6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c490:	2340      	movs	r3, #64	@ 0x40
 800c492:	2202      	movs	r2, #2
 800c494:	2181      	movs	r1, #129	@ 0x81
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f001 fe51 	bl	800e13e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c4a2:	2340      	movs	r3, #64	@ 0x40
 800c4a4:	2202      	movs	r2, #2
 800c4a6:	2101      	movs	r1, #1
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f001 fe48 	bl	800e13e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c4b6:	2308      	movs	r3, #8
 800c4b8:	2203      	movs	r2, #3
 800c4ba:	2182      	movs	r1, #130	@ 0x82
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f001 fe3e 	bl	800e13e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c4c8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c4cc:	f001 ff60 	bl	800e390 <USBD_static_malloc>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d102      	bne.n	800c4e8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	73fb      	strb	r3, [r7, #15]
 800c4e6:	e026      	b.n	800c536 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4ee:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	2200      	movs	r2, #0
 800c506:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	7c1b      	ldrb	r3, [r3, #16]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d109      	bne.n	800c526 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c518:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c51c:	2101      	movs	r1, #1
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f001 feff 	bl	800e322 <USBD_LL_PrepareReceive>
 800c524:	e007      	b.n	800c536 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c52c:	2340      	movs	r3, #64	@ 0x40
 800c52e:	2101      	movs	r1, #1
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f001 fef6 	bl	800e322 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800c536:	7bfb      	ldrb	r3, [r7, #15]
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3710      	adds	r7, #16
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	460b      	mov	r3, r1
 800c54a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c54c:	2300      	movs	r3, #0
 800c54e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c550:	2181      	movs	r1, #129	@ 0x81
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f001 fe19 	bl	800e18a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c55e:	2101      	movs	r1, #1
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f001 fe12 	bl	800e18a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c56e:	2182      	movs	r1, #130	@ 0x82
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f001 fe0a 	bl	800e18a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00e      	beq.n	800c5a4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c596:	4618      	mov	r0, r3
 800c598:	f001 ff08 	bl	800e3ac <USBD_static_free>
    pdev->pClassData = NULL;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800c5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3710      	adds	r7, #16
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b086      	sub	sp, #24
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
 800c5b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5be:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d039      	beq.n	800c64c <USBD_CDC_Setup+0x9e>
 800c5d8:	2b20      	cmp	r3, #32
 800c5da:	d17f      	bne.n	800c6dc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	88db      	ldrh	r3, [r3, #6]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d029      	beq.n	800c638 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	b25b      	sxtb	r3, r3
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	da11      	bge.n	800c612 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	683a      	ldr	r2, [r7, #0]
 800c5f8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800c5fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c5fc:	683a      	ldr	r2, [r7, #0]
 800c5fe:	88d2      	ldrh	r2, [r2, #6]
 800c600:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c602:	6939      	ldr	r1, [r7, #16]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	88db      	ldrh	r3, [r3, #6]
 800c608:	461a      	mov	r2, r3
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f001 f9e0 	bl	800d9d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800c610:	e06b      	b.n	800c6ea <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	785a      	ldrb	r2, [r3, #1]
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	88db      	ldrh	r3, [r3, #6]
 800c620:	b2da      	uxtb	r2, r3
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c628:	6939      	ldr	r1, [r7, #16]
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	88db      	ldrh	r3, [r3, #6]
 800c62e:	461a      	mov	r2, r3
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f001 f9fb 	bl	800da2c <USBD_CtlPrepareRx>
      break;
 800c636:	e058      	b.n	800c6ea <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	683a      	ldr	r2, [r7, #0]
 800c642:	7850      	ldrb	r0, [r2, #1]
 800c644:	2200      	movs	r2, #0
 800c646:	6839      	ldr	r1, [r7, #0]
 800c648:	4798      	blx	r3
      break;
 800c64a:	e04e      	b.n	800c6ea <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	785b      	ldrb	r3, [r3, #1]
 800c650:	2b0b      	cmp	r3, #11
 800c652:	d02e      	beq.n	800c6b2 <USBD_CDC_Setup+0x104>
 800c654:	2b0b      	cmp	r3, #11
 800c656:	dc38      	bgt.n	800c6ca <USBD_CDC_Setup+0x11c>
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d002      	beq.n	800c662 <USBD_CDC_Setup+0xb4>
 800c65c:	2b0a      	cmp	r3, #10
 800c65e:	d014      	beq.n	800c68a <USBD_CDC_Setup+0xdc>
 800c660:	e033      	b.n	800c6ca <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c668:	2b03      	cmp	r3, #3
 800c66a:	d107      	bne.n	800c67c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800c66c:	f107 030c 	add.w	r3, r7, #12
 800c670:	2202      	movs	r2, #2
 800c672:	4619      	mov	r1, r3
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f001 f9ab 	bl	800d9d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c67a:	e02e      	b.n	800c6da <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c67c:	6839      	ldr	r1, [r7, #0]
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f001 f93b 	bl	800d8fa <USBD_CtlError>
            ret = USBD_FAIL;
 800c684:	2302      	movs	r3, #2
 800c686:	75fb      	strb	r3, [r7, #23]
          break;
 800c688:	e027      	b.n	800c6da <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c690:	2b03      	cmp	r3, #3
 800c692:	d107      	bne.n	800c6a4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800c694:	f107 030f 	add.w	r3, r7, #15
 800c698:	2201      	movs	r2, #1
 800c69a:	4619      	mov	r1, r3
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f001 f997 	bl	800d9d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c6a2:	e01a      	b.n	800c6da <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c6a4:	6839      	ldr	r1, [r7, #0]
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f001 f927 	bl	800d8fa <USBD_CtlError>
            ret = USBD_FAIL;
 800c6ac:	2302      	movs	r3, #2
 800c6ae:	75fb      	strb	r3, [r7, #23]
          break;
 800c6b0:	e013      	b.n	800c6da <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6b8:	2b03      	cmp	r3, #3
 800c6ba:	d00d      	beq.n	800c6d8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800c6bc:	6839      	ldr	r1, [r7, #0]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f001 f91b 	bl	800d8fa <USBD_CtlError>
            ret = USBD_FAIL;
 800c6c4:	2302      	movs	r3, #2
 800c6c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c6c8:	e006      	b.n	800c6d8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800c6ca:	6839      	ldr	r1, [r7, #0]
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f001 f914 	bl	800d8fa <USBD_CtlError>
          ret = USBD_FAIL;
 800c6d2:	2302      	movs	r3, #2
 800c6d4:	75fb      	strb	r3, [r7, #23]
          break;
 800c6d6:	e000      	b.n	800c6da <USBD_CDC_Setup+0x12c>
          break;
 800c6d8:	bf00      	nop
      }
      break;
 800c6da:	e006      	b.n	800c6ea <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c6dc:	6839      	ldr	r1, [r7, #0]
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f001 f90b 	bl	800d8fa <USBD_CtlError>
      ret = USBD_FAIL;
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	75fb      	strb	r3, [r7, #23]
      break;
 800c6e8:	bf00      	nop
  }

  return ret;
 800c6ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3718      	adds	r7, #24
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c706:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c70e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c716:	2b00      	cmp	r3, #0
 800c718:	d03a      	beq.n	800c790 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c71a:	78fa      	ldrb	r2, [r7, #3]
 800c71c:	6879      	ldr	r1, [r7, #4]
 800c71e:	4613      	mov	r3, r2
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	4413      	add	r3, r2
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	440b      	add	r3, r1
 800c728:	331c      	adds	r3, #28
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d029      	beq.n	800c784 <USBD_CDC_DataIn+0x90>
 800c730:	78fa      	ldrb	r2, [r7, #3]
 800c732:	6879      	ldr	r1, [r7, #4]
 800c734:	4613      	mov	r3, r2
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	4413      	add	r3, r2
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	440b      	add	r3, r1
 800c73e:	331c      	adds	r3, #28
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	78f9      	ldrb	r1, [r7, #3]
 800c744:	68b8      	ldr	r0, [r7, #8]
 800c746:	460b      	mov	r3, r1
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	440b      	add	r3, r1
 800c74c:	00db      	lsls	r3, r3, #3
 800c74e:	4403      	add	r3, r0
 800c750:	3338      	adds	r3, #56	@ 0x38
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	fbb2 f1f3 	udiv	r1, r2, r3
 800c758:	fb01 f303 	mul.w	r3, r1, r3
 800c75c:	1ad3      	subs	r3, r2, r3
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d110      	bne.n	800c784 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c762:	78fa      	ldrb	r2, [r7, #3]
 800c764:	6879      	ldr	r1, [r7, #4]
 800c766:	4613      	mov	r3, r2
 800c768:	009b      	lsls	r3, r3, #2
 800c76a:	4413      	add	r3, r2
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	440b      	add	r3, r1
 800c770:	331c      	adds	r3, #28
 800c772:	2200      	movs	r2, #0
 800c774:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c776:	78f9      	ldrb	r1, [r7, #3]
 800c778:	2300      	movs	r3, #0
 800c77a:	2200      	movs	r2, #0
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f001 fdad 	bl	800e2dc <USBD_LL_Transmit>
 800c782:	e003      	b.n	800c78c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2200      	movs	r2, #0
 800c788:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800c78c:	2300      	movs	r3, #0
 800c78e:	e000      	b.n	800c792 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c790:	2302      	movs	r3, #2
  }
}
 800c792:	4618      	mov	r0, r3
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b084      	sub	sp, #16
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7ac:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c7ae:	78fb      	ldrb	r3, [r7, #3]
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f001 fdd8 	bl	800e368 <USBD_LL_GetRxDataSize>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00d      	beq.n	800c7e6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	68fa      	ldr	r2, [r7, #12]
 800c7d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c7de:	4611      	mov	r1, r2
 800c7e0:	4798      	blx	r3

    return USBD_OK;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	e000      	b.n	800c7e8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c7e6:	2302      	movs	r3, #2
  }
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7fe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c806:	2b00      	cmp	r3, #0
 800c808:	d014      	beq.n	800c834 <USBD_CDC_EP0_RxReady+0x44>
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c810:	2bff      	cmp	r3, #255	@ 0xff
 800c812:	d00f      	beq.n	800c834 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800c822:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c824:	68fa      	ldr	r2, [r7, #12]
 800c826:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c82a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	22ff      	movs	r2, #255	@ 0xff
 800c830:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
	...

0800c840 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c840:	b480      	push	{r7}
 800c842:	b083      	sub	sp, #12
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2243      	movs	r2, #67	@ 0x43
 800c84c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c84e:	4b03      	ldr	r3, [pc, #12]	@ (800c85c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c850:	4618      	mov	r0, r3
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr
 800c85c:	200000a4 	.word	0x200000a4

0800c860 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c860:	b480      	push	{r7}
 800c862:	b083      	sub	sp, #12
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2243      	movs	r2, #67	@ 0x43
 800c86c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c86e:	4b03      	ldr	r3, [pc, #12]	@ (800c87c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c870:	4618      	mov	r0, r3
 800c872:	370c      	adds	r7, #12
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr
 800c87c:	20000060 	.word	0x20000060

0800c880 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c880:	b480      	push	{r7}
 800c882:	b083      	sub	sp, #12
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2243      	movs	r2, #67	@ 0x43
 800c88c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c88e:	4b03      	ldr	r3, [pc, #12]	@ (800c89c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c890:	4618      	mov	r0, r3
 800c892:	370c      	adds	r7, #12
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr
 800c89c:	200000e8 	.word	0x200000e8

0800c8a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	220a      	movs	r2, #10
 800c8ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c8ae:	4b03      	ldr	r3, [pc, #12]	@ (800c8bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	370c      	adds	r7, #12
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr
 800c8bc:	2000001c 	.word	0x2000001c

0800c8c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b085      	sub	sp, #20
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c8ca:	2302      	movs	r3, #2
 800c8cc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d005      	beq.n	800c8e0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	683a      	ldr	r2, [r7, #0]
 800c8d8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3714      	adds	r7, #20
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr

0800c8ee <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800c8ee:	b480      	push	{r7}
 800c8f0:	b087      	sub	sp, #28
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	60f8      	str	r0, [r7, #12]
 800c8f6:	60b9      	str	r1, [r7, #8]
 800c8f8:	4613      	mov	r3, r2
 800c8fa:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c902:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	68ba      	ldr	r2, [r7, #8]
 800c908:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c90c:	88fa      	ldrh	r2, [r7, #6]
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800c914:	2300      	movs	r3, #0
}
 800c916:	4618      	mov	r0, r3
 800c918:	371c      	adds	r7, #28
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr

0800c922 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800c922:	b480      	push	{r7}
 800c924:	b085      	sub	sp, #20
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
 800c92a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c932:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	683a      	ldr	r2, [r7, #0]
 800c938:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3714      	adds	r7, #20
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr

0800c94a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b084      	sub	sp, #16
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c958:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c960:	2b00      	cmp	r3, #0
 800c962:	d017      	beq.n	800c994 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	7c1b      	ldrb	r3, [r3, #16]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d109      	bne.n	800c980 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c972:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c976:	2101      	movs	r1, #1
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f001 fcd2 	bl	800e322 <USBD_LL_PrepareReceive>
 800c97e:	e007      	b.n	800c990 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c986:	2340      	movs	r3, #64	@ 0x40
 800c988:	2101      	movs	r1, #1
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f001 fcc9 	bl	800e322 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c990:	2300      	movs	r3, #0
 800c992:	e000      	b.n	800c996 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c994:	2302      	movs	r3, #2
  }
}
 800c996:	4618      	mov	r0, r3
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b084      	sub	sp, #16
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	60f8      	str	r0, [r7, #12]
 800c9a6:	60b9      	str	r1, [r7, #8]
 800c9a8:	4613      	mov	r3, r2
 800c9aa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d101      	bne.n	800c9b6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c9b2:	2302      	movs	r3, #2
 800c9b4:	e01a      	b.n	800c9ec <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d003      	beq.n	800c9c8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d003      	beq.n	800c9d6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	68ba      	ldr	r2, [r7, #8]
 800c9d2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2201      	movs	r2, #1
 800c9da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	79fa      	ldrb	r2, [r7, #7]
 800c9e2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c9e4:	68f8      	ldr	r0, [r7, #12]
 800c9e6:	f001 fb35 	bl	800e054 <USBD_LL_Init>

  return USBD_OK;
 800c9ea:	2300      	movs	r3, #0
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3710      	adds	r7, #16
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b085      	sub	sp, #20
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d006      	beq.n	800ca16 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	683a      	ldr	r2, [r7, #0]
 800ca0c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800ca10:	2300      	movs	r3, #0
 800ca12:	73fb      	strb	r3, [r7, #15]
 800ca14:	e001      	b.n	800ca1a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ca16:	2302      	movs	r3, #2
 800ca18:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ca1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3714      	adds	r7, #20
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f001 fb69 	bl	800e108 <USBD_LL_Start>

  return USBD_OK;
 800ca36:	2300      	movs	r3, #0
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3708      	adds	r7, #8
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b083      	sub	sp, #12
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca48:	2300      	movs	r3, #0
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	370c      	adds	r7, #12
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr

0800ca56 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b084      	sub	sp, #16
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
 800ca5e:	460b      	mov	r3, r1
 800ca60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ca62:	2302      	movs	r3, #2
 800ca64:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d00c      	beq.n	800ca8a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	78fa      	ldrb	r2, [r7, #3]
 800ca7a:	4611      	mov	r1, r2
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	4798      	blx	r3
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d101      	bne.n	800ca8a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ca86:	2300      	movs	r3, #0
 800ca88:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ca8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3710      	adds	r7, #16
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	78fa      	ldrb	r2, [r7, #3]
 800caaa:	4611      	mov	r1, r2
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	4798      	blx	r3

  return USBD_OK;
 800cab0:	2300      	movs	r3, #0
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b082      	sub	sp, #8
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
 800cac2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800caca:	6839      	ldr	r1, [r7, #0]
 800cacc:	4618      	mov	r0, r3
 800cace:	f000 feda 	bl	800d886 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2201      	movs	r2, #1
 800cad6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cae0:	461a      	mov	r2, r3
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800caee:	f003 031f 	and.w	r3, r3, #31
 800caf2:	2b02      	cmp	r3, #2
 800caf4:	d016      	beq.n	800cb24 <USBD_LL_SetupStage+0x6a>
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	d81c      	bhi.n	800cb34 <USBD_LL_SetupStage+0x7a>
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d002      	beq.n	800cb04 <USBD_LL_SetupStage+0x4a>
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d008      	beq.n	800cb14 <USBD_LL_SetupStage+0x5a>
 800cb02:	e017      	b.n	800cb34 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 f9cd 	bl	800ceac <USBD_StdDevReq>
      break;
 800cb12:	e01a      	b.n	800cb4a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f000 fa2f 	bl	800cf80 <USBD_StdItfReq>
      break;
 800cb22:	e012      	b.n	800cb4a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 fa6f 	bl	800d010 <USBD_StdEPReq>
      break;
 800cb32:	e00a      	b.n	800cb4a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800cb3a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	4619      	mov	r1, r3
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f001 fb40 	bl	800e1c8 <USBD_LL_StallEP>
      break;
 800cb48:	bf00      	nop
  }

  return USBD_OK;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3708      	adds	r7, #8
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b086      	sub	sp, #24
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	460b      	mov	r3, r1
 800cb5e:	607a      	str	r2, [r7, #4]
 800cb60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800cb62:	7afb      	ldrb	r3, [r7, #11]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d14b      	bne.n	800cc00 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800cb6e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cb76:	2b03      	cmp	r3, #3
 800cb78:	d134      	bne.n	800cbe4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	68da      	ldr	r2, [r3, #12]
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	691b      	ldr	r3, [r3, #16]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d919      	bls.n	800cbba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	68da      	ldr	r2, [r3, #12]
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	691b      	ldr	r3, [r3, #16]
 800cb8e:	1ad2      	subs	r2, r2, r3
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	68da      	ldr	r2, [r3, #12]
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d203      	bcs.n	800cba8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	e002      	b.n	800cbae <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	461a      	mov	r2, r3
 800cbb0:	6879      	ldr	r1, [r7, #4]
 800cbb2:	68f8      	ldr	r0, [r7, #12]
 800cbb4:	f000 ff58 	bl	800da68 <USBD_CtlContinueRx>
 800cbb8:	e038      	b.n	800cc2c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbc0:	691b      	ldr	r3, [r3, #16]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d00a      	beq.n	800cbdc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cbcc:	2b03      	cmp	r3, #3
 800cbce:	d105      	bne.n	800cbdc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbd6:	691b      	ldr	r3, [r3, #16]
 800cbd8:	68f8      	ldr	r0, [r7, #12]
 800cbda:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f000 ff55 	bl	800da8c <USBD_CtlSendStatus>
 800cbe2:	e023      	b.n	800cc2c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cbea:	2b05      	cmp	r3, #5
 800cbec:	d11e      	bne.n	800cc2c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800cbf6:	2100      	movs	r1, #0
 800cbf8:	68f8      	ldr	r0, [r7, #12]
 800cbfa:	f001 fae5 	bl	800e1c8 <USBD_LL_StallEP>
 800cbfe:	e015      	b.n	800cc2c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc06:	699b      	ldr	r3, [r3, #24]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d00d      	beq.n	800cc28 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800cc12:	2b03      	cmp	r3, #3
 800cc14:	d108      	bne.n	800cc28 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc1c:	699b      	ldr	r3, [r3, #24]
 800cc1e:	7afa      	ldrb	r2, [r7, #11]
 800cc20:	4611      	mov	r1, r2
 800cc22:	68f8      	ldr	r0, [r7, #12]
 800cc24:	4798      	blx	r3
 800cc26:	e001      	b.n	800cc2c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cc28:	2302      	movs	r3, #2
 800cc2a:	e000      	b.n	800cc2e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800cc2c:	2300      	movs	r3, #0
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3718      	adds	r7, #24
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cc36:	b580      	push	{r7, lr}
 800cc38:	b086      	sub	sp, #24
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	60f8      	str	r0, [r7, #12]
 800cc3e:	460b      	mov	r3, r1
 800cc40:	607a      	str	r2, [r7, #4]
 800cc42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800cc44:	7afb      	ldrb	r3, [r7, #11]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d17f      	bne.n	800cd4a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	3314      	adds	r3, #20
 800cc4e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cc56:	2b02      	cmp	r3, #2
 800cc58:	d15c      	bne.n	800cd14 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	68da      	ldr	r2, [r3, #12]
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	691b      	ldr	r3, [r3, #16]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d915      	bls.n	800cc92 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	68da      	ldr	r2, [r3, #12]
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	1ad2      	subs	r2, r2, r3
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	68db      	ldr	r3, [r3, #12]
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	6879      	ldr	r1, [r7, #4]
 800cc7e:	68f8      	ldr	r0, [r7, #12]
 800cc80:	f000 fec2 	bl	800da08 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc84:	2300      	movs	r3, #0
 800cc86:	2200      	movs	r2, #0
 800cc88:	2100      	movs	r1, #0
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f001 fb49 	bl	800e322 <USBD_LL_PrepareReceive>
 800cc90:	e04e      	b.n	800cd30 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	689b      	ldr	r3, [r3, #8]
 800cc96:	697a      	ldr	r2, [r7, #20]
 800cc98:	6912      	ldr	r2, [r2, #16]
 800cc9a:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc9e:	fb01 f202 	mul.w	r2, r1, r2
 800cca2:	1a9b      	subs	r3, r3, r2
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d11c      	bne.n	800cce2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	689a      	ldr	r2, [r3, #8]
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d316      	bcc.n	800cce2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	689a      	ldr	r2, [r3, #8]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d20f      	bcs.n	800cce2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	2100      	movs	r1, #0
 800ccc6:	68f8      	ldr	r0, [r7, #12]
 800ccc8:	f000 fe9e 	bl	800da08 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	2100      	movs	r1, #0
 800ccda:	68f8      	ldr	r0, [r7, #12]
 800ccdc:	f001 fb21 	bl	800e322 <USBD_LL_PrepareReceive>
 800cce0:	e026      	b.n	800cd30 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d00a      	beq.n	800cd04 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ccf4:	2b03      	cmp	r3, #3
 800ccf6:	d105      	bne.n	800cd04 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	68f8      	ldr	r0, [r7, #12]
 800cd02:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800cd04:	2180      	movs	r1, #128	@ 0x80
 800cd06:	68f8      	ldr	r0, [r7, #12]
 800cd08:	f001 fa5e 	bl	800e1c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800cd0c:	68f8      	ldr	r0, [r7, #12]
 800cd0e:	f000 fed0 	bl	800dab2 <USBD_CtlReceiveStatus>
 800cd12:	e00d      	b.n	800cd30 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cd1a:	2b04      	cmp	r3, #4
 800cd1c:	d004      	beq.n	800cd28 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d103      	bne.n	800cd30 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800cd28:	2180      	movs	r1, #128	@ 0x80
 800cd2a:	68f8      	ldr	r0, [r7, #12]
 800cd2c:	f001 fa4c 	bl	800e1c8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d11d      	bne.n	800cd76 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	f7ff fe80 	bl	800ca40 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2200      	movs	r2, #0
 800cd44:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800cd48:	e015      	b.n	800cd76 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd50:	695b      	ldr	r3, [r3, #20]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d00d      	beq.n	800cd72 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800cd5c:	2b03      	cmp	r3, #3
 800cd5e:	d108      	bne.n	800cd72 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd66:	695b      	ldr	r3, [r3, #20]
 800cd68:	7afa      	ldrb	r2, [r7, #11]
 800cd6a:	4611      	mov	r1, r2
 800cd6c:	68f8      	ldr	r0, [r7, #12]
 800cd6e:	4798      	blx	r3
 800cd70:	e001      	b.n	800cd76 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cd72:	2302      	movs	r3, #2
 800cd74:	e000      	b.n	800cd78 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800cd76:	2300      	movs	r3, #0
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3718      	adds	r7, #24
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cd88:	2340      	movs	r3, #64	@ 0x40
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	2100      	movs	r1, #0
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f001 f9d5 	bl	800e13e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2201      	movs	r2, #1
 800cd98:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2240      	movs	r2, #64	@ 0x40
 800cda0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cda4:	2340      	movs	r3, #64	@ 0x40
 800cda6:	2200      	movs	r2, #0
 800cda8:	2180      	movs	r1, #128	@ 0x80
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f001 f9c7 	bl	800e13e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2240      	movs	r2, #64	@ 0x40
 800cdba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d009      	beq.n	800cdf8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	6852      	ldr	r2, [r2, #4]
 800cdf0:	b2d2      	uxtb	r2, r2
 800cdf2:	4611      	mov	r1, r2
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	4798      	blx	r3
  }

  return USBD_OK;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3708      	adds	r7, #8
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ce02:	b480      	push	{r7}
 800ce04:	b083      	sub	sp, #12
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	78fa      	ldrb	r2, [r7, #3]
 800ce12:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ce14:	2300      	movs	r3, #0
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	370c      	adds	r7, #12
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr

0800ce22 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ce22:	b480      	push	{r7}
 800ce24:	b083      	sub	sp, #12
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2204      	movs	r2, #4
 800ce3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ce3e:	2300      	movs	r3, #0
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	370c      	adds	r7, #12
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr

0800ce4c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b083      	sub	sp, #12
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce5a:	2b04      	cmp	r3, #4
 800ce5c:	d105      	bne.n	800ce6a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	370c      	adds	r7, #12
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce86:	2b03      	cmp	r3, #3
 800ce88:	d10b      	bne.n	800cea2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce90:	69db      	ldr	r3, [r3, #28]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d005      	beq.n	800cea2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce9c:	69db      	ldr	r3, [r3, #28]
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cea2:	2300      	movs	r3, #0
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cec2:	2b40      	cmp	r3, #64	@ 0x40
 800cec4:	d005      	beq.n	800ced2 <USBD_StdDevReq+0x26>
 800cec6:	2b40      	cmp	r3, #64	@ 0x40
 800cec8:	d84f      	bhi.n	800cf6a <USBD_StdDevReq+0xbe>
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d009      	beq.n	800cee2 <USBD_StdDevReq+0x36>
 800cece:	2b20      	cmp	r3, #32
 800ced0:	d14b      	bne.n	800cf6a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	6839      	ldr	r1, [r7, #0]
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	4798      	blx	r3
      break;
 800cee0:	e048      	b.n	800cf74 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	785b      	ldrb	r3, [r3, #1]
 800cee6:	2b09      	cmp	r3, #9
 800cee8:	d839      	bhi.n	800cf5e <USBD_StdDevReq+0xb2>
 800ceea:	a201      	add	r2, pc, #4	@ (adr r2, 800cef0 <USBD_StdDevReq+0x44>)
 800ceec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cef0:	0800cf41 	.word	0x0800cf41
 800cef4:	0800cf55 	.word	0x0800cf55
 800cef8:	0800cf5f 	.word	0x0800cf5f
 800cefc:	0800cf4b 	.word	0x0800cf4b
 800cf00:	0800cf5f 	.word	0x0800cf5f
 800cf04:	0800cf23 	.word	0x0800cf23
 800cf08:	0800cf19 	.word	0x0800cf19
 800cf0c:	0800cf5f 	.word	0x0800cf5f
 800cf10:	0800cf37 	.word	0x0800cf37
 800cf14:	0800cf2d 	.word	0x0800cf2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cf18:	6839      	ldr	r1, [r7, #0]
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 f9dc 	bl	800d2d8 <USBD_GetDescriptor>
          break;
 800cf20:	e022      	b.n	800cf68 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cf22:	6839      	ldr	r1, [r7, #0]
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f000 fb3f 	bl	800d5a8 <USBD_SetAddress>
          break;
 800cf2a:	e01d      	b.n	800cf68 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800cf2c:	6839      	ldr	r1, [r7, #0]
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 fb7e 	bl	800d630 <USBD_SetConfig>
          break;
 800cf34:	e018      	b.n	800cf68 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cf36:	6839      	ldr	r1, [r7, #0]
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 fc07 	bl	800d74c <USBD_GetConfig>
          break;
 800cf3e:	e013      	b.n	800cf68 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cf40:	6839      	ldr	r1, [r7, #0]
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 fc37 	bl	800d7b6 <USBD_GetStatus>
          break;
 800cf48:	e00e      	b.n	800cf68 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cf4a:	6839      	ldr	r1, [r7, #0]
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f000 fc65 	bl	800d81c <USBD_SetFeature>
          break;
 800cf52:	e009      	b.n	800cf68 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cf54:	6839      	ldr	r1, [r7, #0]
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 fc74 	bl	800d844 <USBD_ClrFeature>
          break;
 800cf5c:	e004      	b.n	800cf68 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800cf5e:	6839      	ldr	r1, [r7, #0]
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f000 fcca 	bl	800d8fa <USBD_CtlError>
          break;
 800cf66:	bf00      	nop
      }
      break;
 800cf68:	e004      	b.n	800cf74 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800cf6a:	6839      	ldr	r1, [r7, #0]
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 fcc4 	bl	800d8fa <USBD_CtlError>
      break;
 800cf72:	bf00      	nop
  }

  return ret;
 800cf74:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3710      	adds	r7, #16
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop

0800cf80 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cf96:	2b40      	cmp	r3, #64	@ 0x40
 800cf98:	d005      	beq.n	800cfa6 <USBD_StdItfReq+0x26>
 800cf9a:	2b40      	cmp	r3, #64	@ 0x40
 800cf9c:	d82e      	bhi.n	800cffc <USBD_StdItfReq+0x7c>
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d001      	beq.n	800cfa6 <USBD_StdItfReq+0x26>
 800cfa2:	2b20      	cmp	r3, #32
 800cfa4:	d12a      	bne.n	800cffc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfac:	3b01      	subs	r3, #1
 800cfae:	2b02      	cmp	r3, #2
 800cfb0:	d81d      	bhi.n	800cfee <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	889b      	ldrh	r3, [r3, #4]
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d813      	bhi.n	800cfe4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	6839      	ldr	r1, [r7, #0]
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	4798      	blx	r3
 800cfca:	4603      	mov	r3, r0
 800cfcc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	88db      	ldrh	r3, [r3, #6]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d110      	bne.n	800cff8 <USBD_StdItfReq+0x78>
 800cfd6:	7bfb      	ldrb	r3, [r7, #15]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d10d      	bne.n	800cff8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 fd55 	bl	800da8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cfe2:	e009      	b.n	800cff8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800cfe4:	6839      	ldr	r1, [r7, #0]
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 fc87 	bl	800d8fa <USBD_CtlError>
          break;
 800cfec:	e004      	b.n	800cff8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800cfee:	6839      	ldr	r1, [r7, #0]
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 fc82 	bl	800d8fa <USBD_CtlError>
          break;
 800cff6:	e000      	b.n	800cffa <USBD_StdItfReq+0x7a>
          break;
 800cff8:	bf00      	nop
      }
      break;
 800cffa:	e004      	b.n	800d006 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800cffc:	6839      	ldr	r1, [r7, #0]
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 fc7b 	bl	800d8fa <USBD_CtlError>
      break;
 800d004:	bf00      	nop
  }

  return USBD_OK;
 800d006:	2300      	movs	r3, #0
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3710      	adds	r7, #16
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d01a:	2300      	movs	r3, #0
 800d01c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	889b      	ldrh	r3, [r3, #4]
 800d022:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d02c:	2b40      	cmp	r3, #64	@ 0x40
 800d02e:	d007      	beq.n	800d040 <USBD_StdEPReq+0x30>
 800d030:	2b40      	cmp	r3, #64	@ 0x40
 800d032:	f200 8146 	bhi.w	800d2c2 <USBD_StdEPReq+0x2b2>
 800d036:	2b00      	cmp	r3, #0
 800d038:	d00a      	beq.n	800d050 <USBD_StdEPReq+0x40>
 800d03a:	2b20      	cmp	r3, #32
 800d03c:	f040 8141 	bne.w	800d2c2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d046:	689b      	ldr	r3, [r3, #8]
 800d048:	6839      	ldr	r1, [r7, #0]
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	4798      	blx	r3
      break;
 800d04e:	e13d      	b.n	800d2cc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d058:	2b20      	cmp	r3, #32
 800d05a:	d10a      	bne.n	800d072 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	6839      	ldr	r1, [r7, #0]
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	4798      	blx	r3
 800d06a:	4603      	mov	r3, r0
 800d06c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800d06e:	7bfb      	ldrb	r3, [r7, #15]
 800d070:	e12d      	b.n	800d2ce <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	785b      	ldrb	r3, [r3, #1]
 800d076:	2b03      	cmp	r3, #3
 800d078:	d007      	beq.n	800d08a <USBD_StdEPReq+0x7a>
 800d07a:	2b03      	cmp	r3, #3
 800d07c:	f300 811b 	bgt.w	800d2b6 <USBD_StdEPReq+0x2a6>
 800d080:	2b00      	cmp	r3, #0
 800d082:	d072      	beq.n	800d16a <USBD_StdEPReq+0x15a>
 800d084:	2b01      	cmp	r3, #1
 800d086:	d03a      	beq.n	800d0fe <USBD_StdEPReq+0xee>
 800d088:	e115      	b.n	800d2b6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d090:	2b02      	cmp	r3, #2
 800d092:	d002      	beq.n	800d09a <USBD_StdEPReq+0x8a>
 800d094:	2b03      	cmp	r3, #3
 800d096:	d015      	beq.n	800d0c4 <USBD_StdEPReq+0xb4>
 800d098:	e02b      	b.n	800d0f2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d09a:	7bbb      	ldrb	r3, [r7, #14]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00c      	beq.n	800d0ba <USBD_StdEPReq+0xaa>
 800d0a0:	7bbb      	ldrb	r3, [r7, #14]
 800d0a2:	2b80      	cmp	r3, #128	@ 0x80
 800d0a4:	d009      	beq.n	800d0ba <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d0a6:	7bbb      	ldrb	r3, [r7, #14]
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f001 f88c 	bl	800e1c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d0b0:	2180      	movs	r1, #128	@ 0x80
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f001 f888 	bl	800e1c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d0b8:	e020      	b.n	800d0fc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800d0ba:	6839      	ldr	r1, [r7, #0]
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 fc1c 	bl	800d8fa <USBD_CtlError>
              break;
 800d0c2:	e01b      	b.n	800d0fc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	885b      	ldrh	r3, [r3, #2]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d10e      	bne.n	800d0ea <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800d0cc:	7bbb      	ldrb	r3, [r7, #14]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d00b      	beq.n	800d0ea <USBD_StdEPReq+0xda>
 800d0d2:	7bbb      	ldrb	r3, [r7, #14]
 800d0d4:	2b80      	cmp	r3, #128	@ 0x80
 800d0d6:	d008      	beq.n	800d0ea <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	88db      	ldrh	r3, [r3, #6]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d104      	bne.n	800d0ea <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800d0e0:	7bbb      	ldrb	r3, [r7, #14]
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f001 f86f 	bl	800e1c8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f000 fcce 	bl	800da8c <USBD_CtlSendStatus>

              break;
 800d0f0:	e004      	b.n	800d0fc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800d0f2:	6839      	ldr	r1, [r7, #0]
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f000 fc00 	bl	800d8fa <USBD_CtlError>
              break;
 800d0fa:	bf00      	nop
          }
          break;
 800d0fc:	e0e0      	b.n	800d2c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d104:	2b02      	cmp	r3, #2
 800d106:	d002      	beq.n	800d10e <USBD_StdEPReq+0xfe>
 800d108:	2b03      	cmp	r3, #3
 800d10a:	d015      	beq.n	800d138 <USBD_StdEPReq+0x128>
 800d10c:	e026      	b.n	800d15c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d10e:	7bbb      	ldrb	r3, [r7, #14]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d00c      	beq.n	800d12e <USBD_StdEPReq+0x11e>
 800d114:	7bbb      	ldrb	r3, [r7, #14]
 800d116:	2b80      	cmp	r3, #128	@ 0x80
 800d118:	d009      	beq.n	800d12e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d11a:	7bbb      	ldrb	r3, [r7, #14]
 800d11c:	4619      	mov	r1, r3
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f001 f852 	bl	800e1c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d124:	2180      	movs	r1, #128	@ 0x80
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f001 f84e 	bl	800e1c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d12c:	e01c      	b.n	800d168 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800d12e:	6839      	ldr	r1, [r7, #0]
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f000 fbe2 	bl	800d8fa <USBD_CtlError>
              break;
 800d136:	e017      	b.n	800d168 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	885b      	ldrh	r3, [r3, #2]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d112      	bne.n	800d166 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d140:	7bbb      	ldrb	r3, [r7, #14]
 800d142:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d146:	2b00      	cmp	r3, #0
 800d148:	d004      	beq.n	800d154 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800d14a:	7bbb      	ldrb	r3, [r7, #14]
 800d14c:	4619      	mov	r1, r3
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f001 f859 	bl	800e206 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 fc99 	bl	800da8c <USBD_CtlSendStatus>
              }
              break;
 800d15a:	e004      	b.n	800d166 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800d15c:	6839      	ldr	r1, [r7, #0]
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 fbcb 	bl	800d8fa <USBD_CtlError>
              break;
 800d164:	e000      	b.n	800d168 <USBD_StdEPReq+0x158>
              break;
 800d166:	bf00      	nop
          }
          break;
 800d168:	e0aa      	b.n	800d2c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d170:	2b02      	cmp	r3, #2
 800d172:	d002      	beq.n	800d17a <USBD_StdEPReq+0x16a>
 800d174:	2b03      	cmp	r3, #3
 800d176:	d032      	beq.n	800d1de <USBD_StdEPReq+0x1ce>
 800d178:	e097      	b.n	800d2aa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d17a:	7bbb      	ldrb	r3, [r7, #14]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d007      	beq.n	800d190 <USBD_StdEPReq+0x180>
 800d180:	7bbb      	ldrb	r3, [r7, #14]
 800d182:	2b80      	cmp	r3, #128	@ 0x80
 800d184:	d004      	beq.n	800d190 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800d186:	6839      	ldr	r1, [r7, #0]
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 fbb6 	bl	800d8fa <USBD_CtlError>
                break;
 800d18e:	e091      	b.n	800d2b4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d194:	2b00      	cmp	r3, #0
 800d196:	da0b      	bge.n	800d1b0 <USBD_StdEPReq+0x1a0>
 800d198:	7bbb      	ldrb	r3, [r7, #14]
 800d19a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d19e:	4613      	mov	r3, r2
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	4413      	add	r3, r2
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	3310      	adds	r3, #16
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	3304      	adds	r3, #4
 800d1ae:	e00b      	b.n	800d1c8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d1b0:	7bbb      	ldrb	r3, [r7, #14]
 800d1b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	4413      	add	r3, r2
 800d1bc:	009b      	lsls	r3, r3, #2
 800d1be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	3304      	adds	r3, #4
 800d1c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	2202      	movs	r2, #2
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 fbfa 	bl	800d9d0 <USBD_CtlSendData>
              break;
 800d1dc:	e06a      	b.n	800d2b4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d1de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	da11      	bge.n	800d20a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d1e6:	7bbb      	ldrb	r3, [r7, #14]
 800d1e8:	f003 020f 	and.w	r2, r3, #15
 800d1ec:	6879      	ldr	r1, [r7, #4]
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	4413      	add	r3, r2
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	440b      	add	r3, r1
 800d1f8:	3318      	adds	r3, #24
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d117      	bne.n	800d230 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d200:	6839      	ldr	r1, [r7, #0]
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 fb79 	bl	800d8fa <USBD_CtlError>
                  break;
 800d208:	e054      	b.n	800d2b4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d20a:	7bbb      	ldrb	r3, [r7, #14]
 800d20c:	f003 020f 	and.w	r2, r3, #15
 800d210:	6879      	ldr	r1, [r7, #4]
 800d212:	4613      	mov	r3, r2
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	4413      	add	r3, r2
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	440b      	add	r3, r1
 800d21c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d104      	bne.n	800d230 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d226:	6839      	ldr	r1, [r7, #0]
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 fb66 	bl	800d8fa <USBD_CtlError>
                  break;
 800d22e:	e041      	b.n	800d2b4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d230:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d234:	2b00      	cmp	r3, #0
 800d236:	da0b      	bge.n	800d250 <USBD_StdEPReq+0x240>
 800d238:	7bbb      	ldrb	r3, [r7, #14]
 800d23a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d23e:	4613      	mov	r3, r2
 800d240:	009b      	lsls	r3, r3, #2
 800d242:	4413      	add	r3, r2
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	3310      	adds	r3, #16
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	4413      	add	r3, r2
 800d24c:	3304      	adds	r3, #4
 800d24e:	e00b      	b.n	800d268 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d250:	7bbb      	ldrb	r3, [r7, #14]
 800d252:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d256:	4613      	mov	r3, r2
 800d258:	009b      	lsls	r3, r3, #2
 800d25a:	4413      	add	r3, r2
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	4413      	add	r3, r2
 800d266:	3304      	adds	r3, #4
 800d268:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d26a:	7bbb      	ldrb	r3, [r7, #14]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d002      	beq.n	800d276 <USBD_StdEPReq+0x266>
 800d270:	7bbb      	ldrb	r3, [r7, #14]
 800d272:	2b80      	cmp	r3, #128	@ 0x80
 800d274:	d103      	bne.n	800d27e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	2200      	movs	r2, #0
 800d27a:	601a      	str	r2, [r3, #0]
 800d27c:	e00e      	b.n	800d29c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800d27e:	7bbb      	ldrb	r3, [r7, #14]
 800d280:	4619      	mov	r1, r3
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 ffde 	bl	800e244 <USBD_LL_IsStallEP>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d003      	beq.n	800d296 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	2201      	movs	r2, #1
 800d292:	601a      	str	r2, [r3, #0]
 800d294:	e002      	b.n	800d29c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	2200      	movs	r2, #0
 800d29a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	2202      	movs	r2, #2
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 fb94 	bl	800d9d0 <USBD_CtlSendData>
              break;
 800d2a8:	e004      	b.n	800d2b4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800d2aa:	6839      	ldr	r1, [r7, #0]
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f000 fb24 	bl	800d8fa <USBD_CtlError>
              break;
 800d2b2:	bf00      	nop
          }
          break;
 800d2b4:	e004      	b.n	800d2c0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800d2b6:	6839      	ldr	r1, [r7, #0]
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f000 fb1e 	bl	800d8fa <USBD_CtlError>
          break;
 800d2be:	bf00      	nop
      }
      break;
 800d2c0:	e004      	b.n	800d2cc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800d2c2:	6839      	ldr	r1, [r7, #0]
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 fb18 	bl	800d8fa <USBD_CtlError>
      break;
 800d2ca:	bf00      	nop
  }

  return ret;
 800d2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3710      	adds	r7, #16
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
	...

0800d2d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	885b      	ldrh	r3, [r3, #2]
 800d2f2:	0a1b      	lsrs	r3, r3, #8
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	3b01      	subs	r3, #1
 800d2f8:	2b06      	cmp	r3, #6
 800d2fa:	f200 8128 	bhi.w	800d54e <USBD_GetDescriptor+0x276>
 800d2fe:	a201      	add	r2, pc, #4	@ (adr r2, 800d304 <USBD_GetDescriptor+0x2c>)
 800d300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d304:	0800d321 	.word	0x0800d321
 800d308:	0800d339 	.word	0x0800d339
 800d30c:	0800d379 	.word	0x0800d379
 800d310:	0800d54f 	.word	0x0800d54f
 800d314:	0800d54f 	.word	0x0800d54f
 800d318:	0800d4ef 	.word	0x0800d4ef
 800d31c:	0800d51b 	.word	0x0800d51b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	7c12      	ldrb	r2, [r2, #16]
 800d32c:	f107 0108 	add.w	r1, r7, #8
 800d330:	4610      	mov	r0, r2
 800d332:	4798      	blx	r3
 800d334:	60f8      	str	r0, [r7, #12]
      break;
 800d336:	e112      	b.n	800d55e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	7c1b      	ldrb	r3, [r3, #16]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d10d      	bne.n	800d35c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d348:	f107 0208 	add.w	r2, r7, #8
 800d34c:	4610      	mov	r0, r2
 800d34e:	4798      	blx	r3
 800d350:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	3301      	adds	r3, #1
 800d356:	2202      	movs	r2, #2
 800d358:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d35a:	e100      	b.n	800d55e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d364:	f107 0208 	add.w	r2, r7, #8
 800d368:	4610      	mov	r0, r2
 800d36a:	4798      	blx	r3
 800d36c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	3301      	adds	r3, #1
 800d372:	2202      	movs	r2, #2
 800d374:	701a      	strb	r2, [r3, #0]
      break;
 800d376:	e0f2      	b.n	800d55e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	885b      	ldrh	r3, [r3, #2]
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	2b05      	cmp	r3, #5
 800d380:	f200 80ac 	bhi.w	800d4dc <USBD_GetDescriptor+0x204>
 800d384:	a201      	add	r2, pc, #4	@ (adr r2, 800d38c <USBD_GetDescriptor+0xb4>)
 800d386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d38a:	bf00      	nop
 800d38c:	0800d3a5 	.word	0x0800d3a5
 800d390:	0800d3d9 	.word	0x0800d3d9
 800d394:	0800d40d 	.word	0x0800d40d
 800d398:	0800d441 	.word	0x0800d441
 800d39c:	0800d475 	.word	0x0800d475
 800d3a0:	0800d4a9 	.word	0x0800d4a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d00b      	beq.n	800d3c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	687a      	ldr	r2, [r7, #4]
 800d3ba:	7c12      	ldrb	r2, [r2, #16]
 800d3bc:	f107 0108 	add.w	r1, r7, #8
 800d3c0:	4610      	mov	r0, r2
 800d3c2:	4798      	blx	r3
 800d3c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3c6:	e091      	b.n	800d4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d3c8:	6839      	ldr	r1, [r7, #0]
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 fa95 	bl	800d8fa <USBD_CtlError>
            err++;
 800d3d0:	7afb      	ldrb	r3, [r7, #11]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	72fb      	strb	r3, [r7, #11]
          break;
 800d3d6:	e089      	b.n	800d4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d3de:	689b      	ldr	r3, [r3, #8]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00b      	beq.n	800d3fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d3ea:	689b      	ldr	r3, [r3, #8]
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	7c12      	ldrb	r2, [r2, #16]
 800d3f0:	f107 0108 	add.w	r1, r7, #8
 800d3f4:	4610      	mov	r0, r2
 800d3f6:	4798      	blx	r3
 800d3f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3fa:	e077      	b.n	800d4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d3fc:	6839      	ldr	r1, [r7, #0]
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 fa7b 	bl	800d8fa <USBD_CtlError>
            err++;
 800d404:	7afb      	ldrb	r3, [r7, #11]
 800d406:	3301      	adds	r3, #1
 800d408:	72fb      	strb	r3, [r7, #11]
          break;
 800d40a:	e06f      	b.n	800d4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d00b      	beq.n	800d430 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d41e:	68db      	ldr	r3, [r3, #12]
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	7c12      	ldrb	r2, [r2, #16]
 800d424:	f107 0108 	add.w	r1, r7, #8
 800d428:	4610      	mov	r0, r2
 800d42a:	4798      	blx	r3
 800d42c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d42e:	e05d      	b.n	800d4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d430:	6839      	ldr	r1, [r7, #0]
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 fa61 	bl	800d8fa <USBD_CtlError>
            err++;
 800d438:	7afb      	ldrb	r3, [r7, #11]
 800d43a:	3301      	adds	r3, #1
 800d43c:	72fb      	strb	r3, [r7, #11]
          break;
 800d43e:	e055      	b.n	800d4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d446:	691b      	ldr	r3, [r3, #16]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d00b      	beq.n	800d464 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d452:	691b      	ldr	r3, [r3, #16]
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	7c12      	ldrb	r2, [r2, #16]
 800d458:	f107 0108 	add.w	r1, r7, #8
 800d45c:	4610      	mov	r0, r2
 800d45e:	4798      	blx	r3
 800d460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d462:	e043      	b.n	800d4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d464:	6839      	ldr	r1, [r7, #0]
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f000 fa47 	bl	800d8fa <USBD_CtlError>
            err++;
 800d46c:	7afb      	ldrb	r3, [r7, #11]
 800d46e:	3301      	adds	r3, #1
 800d470:	72fb      	strb	r3, [r7, #11]
          break;
 800d472:	e03b      	b.n	800d4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d47a:	695b      	ldr	r3, [r3, #20]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d00b      	beq.n	800d498 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d486:	695b      	ldr	r3, [r3, #20]
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	7c12      	ldrb	r2, [r2, #16]
 800d48c:	f107 0108 	add.w	r1, r7, #8
 800d490:	4610      	mov	r0, r2
 800d492:	4798      	blx	r3
 800d494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d496:	e029      	b.n	800d4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d498:	6839      	ldr	r1, [r7, #0]
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 fa2d 	bl	800d8fa <USBD_CtlError>
            err++;
 800d4a0:	7afb      	ldrb	r3, [r7, #11]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	72fb      	strb	r3, [r7, #11]
          break;
 800d4a6:	e021      	b.n	800d4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d4ae:	699b      	ldr	r3, [r3, #24]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d00b      	beq.n	800d4cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d4ba:	699b      	ldr	r3, [r3, #24]
 800d4bc:	687a      	ldr	r2, [r7, #4]
 800d4be:	7c12      	ldrb	r2, [r2, #16]
 800d4c0:	f107 0108 	add.w	r1, r7, #8
 800d4c4:	4610      	mov	r0, r2
 800d4c6:	4798      	blx	r3
 800d4c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4ca:	e00f      	b.n	800d4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4cc:	6839      	ldr	r1, [r7, #0]
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 fa13 	bl	800d8fa <USBD_CtlError>
            err++;
 800d4d4:	7afb      	ldrb	r3, [r7, #11]
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	72fb      	strb	r3, [r7, #11]
          break;
 800d4da:	e007      	b.n	800d4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800d4dc:	6839      	ldr	r1, [r7, #0]
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 fa0b 	bl	800d8fa <USBD_CtlError>
          err++;
 800d4e4:	7afb      	ldrb	r3, [r7, #11]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800d4ea:	e038      	b.n	800d55e <USBD_GetDescriptor+0x286>
 800d4ec:	e037      	b.n	800d55e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	7c1b      	ldrb	r3, [r3, #16]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d109      	bne.n	800d50a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4fe:	f107 0208 	add.w	r2, r7, #8
 800d502:	4610      	mov	r0, r2
 800d504:	4798      	blx	r3
 800d506:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d508:	e029      	b.n	800d55e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d50a:	6839      	ldr	r1, [r7, #0]
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 f9f4 	bl	800d8fa <USBD_CtlError>
        err++;
 800d512:	7afb      	ldrb	r3, [r7, #11]
 800d514:	3301      	adds	r3, #1
 800d516:	72fb      	strb	r3, [r7, #11]
      break;
 800d518:	e021      	b.n	800d55e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	7c1b      	ldrb	r3, [r3, #16]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d10d      	bne.n	800d53e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d52a:	f107 0208 	add.w	r2, r7, #8
 800d52e:	4610      	mov	r0, r2
 800d530:	4798      	blx	r3
 800d532:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	3301      	adds	r3, #1
 800d538:	2207      	movs	r2, #7
 800d53a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d53c:	e00f      	b.n	800d55e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d53e:	6839      	ldr	r1, [r7, #0]
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f000 f9da 	bl	800d8fa <USBD_CtlError>
        err++;
 800d546:	7afb      	ldrb	r3, [r7, #11]
 800d548:	3301      	adds	r3, #1
 800d54a:	72fb      	strb	r3, [r7, #11]
      break;
 800d54c:	e007      	b.n	800d55e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d54e:	6839      	ldr	r1, [r7, #0]
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 f9d2 	bl	800d8fa <USBD_CtlError>
      err++;
 800d556:	7afb      	ldrb	r3, [r7, #11]
 800d558:	3301      	adds	r3, #1
 800d55a:	72fb      	strb	r3, [r7, #11]
      break;
 800d55c:	bf00      	nop
  }

  if (err != 0U)
 800d55e:	7afb      	ldrb	r3, [r7, #11]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d11c      	bne.n	800d59e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800d564:	893b      	ldrh	r3, [r7, #8]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d011      	beq.n	800d58e <USBD_GetDescriptor+0x2b6>
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	88db      	ldrh	r3, [r3, #6]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d00d      	beq.n	800d58e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	88da      	ldrh	r2, [r3, #6]
 800d576:	893b      	ldrh	r3, [r7, #8]
 800d578:	4293      	cmp	r3, r2
 800d57a:	bf28      	it	cs
 800d57c:	4613      	movcs	r3, r2
 800d57e:	b29b      	uxth	r3, r3
 800d580:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d582:	893b      	ldrh	r3, [r7, #8]
 800d584:	461a      	mov	r2, r3
 800d586:	68f9      	ldr	r1, [r7, #12]
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 fa21 	bl	800d9d0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	88db      	ldrh	r3, [r3, #6]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d104      	bne.n	800d5a0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 fa78 	bl	800da8c <USBD_CtlSendStatus>
 800d59c:	e000      	b.n	800d5a0 <USBD_GetDescriptor+0x2c8>
    return;
 800d59e:	bf00      	nop
    }
  }
}
 800d5a0:	3710      	adds	r7, #16
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop

0800d5a8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	889b      	ldrh	r3, [r3, #4]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d130      	bne.n	800d61c <USBD_SetAddress+0x74>
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	88db      	ldrh	r3, [r3, #6]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d12c      	bne.n	800d61c <USBD_SetAddress+0x74>
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	885b      	ldrh	r3, [r3, #2]
 800d5c6:	2b7f      	cmp	r3, #127	@ 0x7f
 800d5c8:	d828      	bhi.n	800d61c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	885b      	ldrh	r3, [r3, #2]
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5dc:	2b03      	cmp	r3, #3
 800d5de:	d104      	bne.n	800d5ea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800d5e0:	6839      	ldr	r1, [r7, #0]
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 f989 	bl	800d8fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5e8:	e01d      	b.n	800d626 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	7bfa      	ldrb	r2, [r7, #15]
 800d5ee:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d5f2:	7bfb      	ldrb	r3, [r7, #15]
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 fe51 	bl	800e29e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f000 fa45 	bl	800da8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d602:	7bfb      	ldrb	r3, [r7, #15]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d004      	beq.n	800d612 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2202      	movs	r2, #2
 800d60c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d610:	e009      	b.n	800d626 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2201      	movs	r2, #1
 800d616:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d61a:	e004      	b.n	800d626 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d61c:	6839      	ldr	r1, [r7, #0]
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 f96b 	bl	800d8fa <USBD_CtlError>
  }
}
 800d624:	bf00      	nop
 800d626:	bf00      	nop
 800d628:	3710      	adds	r7, #16
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
	...

0800d630 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	885b      	ldrh	r3, [r3, #2]
 800d63e:	b2da      	uxtb	r2, r3
 800d640:	4b41      	ldr	r3, [pc, #260]	@ (800d748 <USBD_SetConfig+0x118>)
 800d642:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d644:	4b40      	ldr	r3, [pc, #256]	@ (800d748 <USBD_SetConfig+0x118>)
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	2b01      	cmp	r3, #1
 800d64a:	d904      	bls.n	800d656 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d64c:	6839      	ldr	r1, [r7, #0]
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 f953 	bl	800d8fa <USBD_CtlError>
 800d654:	e075      	b.n	800d742 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d65c:	2b02      	cmp	r3, #2
 800d65e:	d002      	beq.n	800d666 <USBD_SetConfig+0x36>
 800d660:	2b03      	cmp	r3, #3
 800d662:	d023      	beq.n	800d6ac <USBD_SetConfig+0x7c>
 800d664:	e062      	b.n	800d72c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800d666:	4b38      	ldr	r3, [pc, #224]	@ (800d748 <USBD_SetConfig+0x118>)
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d01a      	beq.n	800d6a4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800d66e:	4b36      	ldr	r3, [pc, #216]	@ (800d748 <USBD_SetConfig+0x118>)
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	461a      	mov	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2203      	movs	r2, #3
 800d67c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d680:	4b31      	ldr	r3, [pc, #196]	@ (800d748 <USBD_SetConfig+0x118>)
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	4619      	mov	r1, r3
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f7ff f9e5 	bl	800ca56 <USBD_SetClassConfig>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b02      	cmp	r3, #2
 800d690:	d104      	bne.n	800d69c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800d692:	6839      	ldr	r1, [r7, #0]
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 f930 	bl	800d8fa <USBD_CtlError>
            return;
 800d69a:	e052      	b.n	800d742 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f000 f9f5 	bl	800da8c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d6a2:	e04e      	b.n	800d742 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f000 f9f1 	bl	800da8c <USBD_CtlSendStatus>
        break;
 800d6aa:	e04a      	b.n	800d742 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800d6ac:	4b26      	ldr	r3, [pc, #152]	@ (800d748 <USBD_SetConfig+0x118>)
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d112      	bne.n	800d6da <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2202      	movs	r2, #2
 800d6b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800d6bc:	4b22      	ldr	r3, [pc, #136]	@ (800d748 <USBD_SetConfig+0x118>)
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800d6c6:	4b20      	ldr	r3, [pc, #128]	@ (800d748 <USBD_SetConfig+0x118>)
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f7ff f9e1 	bl	800ca94 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 f9da 	bl	800da8c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d6d8:	e033      	b.n	800d742 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800d6da:	4b1b      	ldr	r3, [pc, #108]	@ (800d748 <USBD_SetConfig+0x118>)
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	461a      	mov	r2, r3
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d01d      	beq.n	800d724 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f7ff f9cf 	bl	800ca94 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800d6f6:	4b14      	ldr	r3, [pc, #80]	@ (800d748 <USBD_SetConfig+0x118>)
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d700:	4b11      	ldr	r3, [pc, #68]	@ (800d748 <USBD_SetConfig+0x118>)
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	4619      	mov	r1, r3
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f7ff f9a5 	bl	800ca56 <USBD_SetClassConfig>
 800d70c:	4603      	mov	r3, r0
 800d70e:	2b02      	cmp	r3, #2
 800d710:	d104      	bne.n	800d71c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800d712:	6839      	ldr	r1, [r7, #0]
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f000 f8f0 	bl	800d8fa <USBD_CtlError>
            return;
 800d71a:	e012      	b.n	800d742 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f000 f9b5 	bl	800da8c <USBD_CtlSendStatus>
        break;
 800d722:	e00e      	b.n	800d742 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f000 f9b1 	bl	800da8c <USBD_CtlSendStatus>
        break;
 800d72a:	e00a      	b.n	800d742 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800d72c:	6839      	ldr	r1, [r7, #0]
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 f8e3 	bl	800d8fa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800d734:	4b04      	ldr	r3, [pc, #16]	@ (800d748 <USBD_SetConfig+0x118>)
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	4619      	mov	r1, r3
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f7ff f9aa 	bl	800ca94 <USBD_ClrClassConfig>
        break;
 800d740:	bf00      	nop
    }
  }
}
 800d742:	3708      	adds	r7, #8
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	20000f40 	.word	0x20000f40

0800d74c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	88db      	ldrh	r3, [r3, #6]
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d004      	beq.n	800d768 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d75e:	6839      	ldr	r1, [r7, #0]
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 f8ca 	bl	800d8fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d766:	e022      	b.n	800d7ae <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d76e:	2b02      	cmp	r3, #2
 800d770:	dc02      	bgt.n	800d778 <USBD_GetConfig+0x2c>
 800d772:	2b00      	cmp	r3, #0
 800d774:	dc03      	bgt.n	800d77e <USBD_GetConfig+0x32>
 800d776:	e015      	b.n	800d7a4 <USBD_GetConfig+0x58>
 800d778:	2b03      	cmp	r3, #3
 800d77a:	d00b      	beq.n	800d794 <USBD_GetConfig+0x48>
 800d77c:	e012      	b.n	800d7a4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2200      	movs	r2, #0
 800d782:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	3308      	adds	r3, #8
 800d788:	2201      	movs	r2, #1
 800d78a:	4619      	mov	r1, r3
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f000 f91f 	bl	800d9d0 <USBD_CtlSendData>
        break;
 800d792:	e00c      	b.n	800d7ae <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	3304      	adds	r3, #4
 800d798:	2201      	movs	r2, #1
 800d79a:	4619      	mov	r1, r3
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f000 f917 	bl	800d9d0 <USBD_CtlSendData>
        break;
 800d7a2:	e004      	b.n	800d7ae <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800d7a4:	6839      	ldr	r1, [r7, #0]
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 f8a7 	bl	800d8fa <USBD_CtlError>
        break;
 800d7ac:	bf00      	nop
}
 800d7ae:	bf00      	nop
 800d7b0:	3708      	adds	r7, #8
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}

0800d7b6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	b082      	sub	sp, #8
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
 800d7be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7c6:	3b01      	subs	r3, #1
 800d7c8:	2b02      	cmp	r3, #2
 800d7ca:	d81e      	bhi.n	800d80a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	88db      	ldrh	r3, [r3, #6]
 800d7d0:	2b02      	cmp	r3, #2
 800d7d2:	d004      	beq.n	800d7de <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800d7d4:	6839      	ldr	r1, [r7, #0]
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f000 f88f 	bl	800d8fa <USBD_CtlError>
        break;
 800d7dc:	e01a      	b.n	800d814 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d005      	beq.n	800d7fa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	68db      	ldr	r3, [r3, #12]
 800d7f2:	f043 0202 	orr.w	r2, r3, #2
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	330c      	adds	r3, #12
 800d7fe:	2202      	movs	r2, #2
 800d800:	4619      	mov	r1, r3
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 f8e4 	bl	800d9d0 <USBD_CtlSendData>
      break;
 800d808:	e004      	b.n	800d814 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800d80a:	6839      	ldr	r1, [r7, #0]
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 f874 	bl	800d8fa <USBD_CtlError>
      break;
 800d812:	bf00      	nop
  }
}
 800d814:	bf00      	nop
 800d816:	3708      	adds	r7, #8
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	885b      	ldrh	r3, [r3, #2]
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d106      	bne.n	800d83c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2201      	movs	r2, #1
 800d832:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 f928 	bl	800da8c <USBD_CtlSendStatus>
  }
}
 800d83c:	bf00      	nop
 800d83e:	3708      	adds	r7, #8
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d854:	3b01      	subs	r3, #1
 800d856:	2b02      	cmp	r3, #2
 800d858:	d80b      	bhi.n	800d872 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	885b      	ldrh	r3, [r3, #2]
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d10c      	bne.n	800d87c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2200      	movs	r2, #0
 800d866:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f000 f90e 	bl	800da8c <USBD_CtlSendStatus>
      }
      break;
 800d870:	e004      	b.n	800d87c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d872:	6839      	ldr	r1, [r7, #0]
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 f840 	bl	800d8fa <USBD_CtlError>
      break;
 800d87a:	e000      	b.n	800d87e <USBD_ClrFeature+0x3a>
      break;
 800d87c:	bf00      	nop
  }
}
 800d87e:	bf00      	nop
 800d880:	3708      	adds	r7, #8
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}

0800d886 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d886:	b480      	push	{r7}
 800d888:	b083      	sub	sp, #12
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
 800d88e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	781a      	ldrb	r2, [r3, #0]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	785a      	ldrb	r2, [r3, #1]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	3302      	adds	r3, #2
 800d8a4:	781b      	ldrb	r3, [r3, #0]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	3303      	adds	r3, #3
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	021b      	lsls	r3, r3, #8
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	4413      	add	r3, r2
 800d8b4:	b29a      	uxth	r2, r3
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	3304      	adds	r3, #4
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	3305      	adds	r3, #5
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	021b      	lsls	r3, r3, #8
 800d8ca:	b29b      	uxth	r3, r3
 800d8cc:	4413      	add	r3, r2
 800d8ce:	b29a      	uxth	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	3306      	adds	r3, #6
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	461a      	mov	r2, r3
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	3307      	adds	r3, #7
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	021b      	lsls	r3, r3, #8
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	4413      	add	r3, r2
 800d8e8:	b29a      	uxth	r2, r3
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	80da      	strh	r2, [r3, #6]

}
 800d8ee:	bf00      	nop
 800d8f0:	370c      	adds	r7, #12
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr

0800d8fa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800d8fa:	b580      	push	{r7, lr}
 800d8fc:	b082      	sub	sp, #8
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	6078      	str	r0, [r7, #4]
 800d902:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d904:	2180      	movs	r1, #128	@ 0x80
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 fc5e 	bl	800e1c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d90c:	2100      	movs	r1, #0
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f000 fc5a 	bl	800e1c8 <USBD_LL_StallEP>
}
 800d914:	bf00      	nop
 800d916:	3708      	adds	r7, #8
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b086      	sub	sp, #24
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d928:	2300      	movs	r3, #0
 800d92a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d032      	beq.n	800d998 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d932:	68f8      	ldr	r0, [r7, #12]
 800d934:	f000 f834 	bl	800d9a0 <USBD_GetLen>
 800d938:	4603      	mov	r3, r0
 800d93a:	3301      	adds	r3, #1
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	005b      	lsls	r3, r3, #1
 800d940:	b29a      	uxth	r2, r3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d946:	7dfb      	ldrb	r3, [r7, #23]
 800d948:	1c5a      	adds	r2, r3, #1
 800d94a:	75fa      	strb	r2, [r7, #23]
 800d94c:	461a      	mov	r2, r3
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	4413      	add	r3, r2
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	7812      	ldrb	r2, [r2, #0]
 800d956:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d958:	7dfb      	ldrb	r3, [r7, #23]
 800d95a:	1c5a      	adds	r2, r3, #1
 800d95c:	75fa      	strb	r2, [r7, #23]
 800d95e:	461a      	mov	r2, r3
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	4413      	add	r3, r2
 800d964:	2203      	movs	r2, #3
 800d966:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d968:	e012      	b.n	800d990 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	1c5a      	adds	r2, r3, #1
 800d96e:	60fa      	str	r2, [r7, #12]
 800d970:	7dfa      	ldrb	r2, [r7, #23]
 800d972:	1c51      	adds	r1, r2, #1
 800d974:	75f9      	strb	r1, [r7, #23]
 800d976:	4611      	mov	r1, r2
 800d978:	68ba      	ldr	r2, [r7, #8]
 800d97a:	440a      	add	r2, r1
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d980:	7dfb      	ldrb	r3, [r7, #23]
 800d982:	1c5a      	adds	r2, r3, #1
 800d984:	75fa      	strb	r2, [r7, #23]
 800d986:	461a      	mov	r2, r3
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	4413      	add	r3, r2
 800d98c:	2200      	movs	r2, #0
 800d98e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	781b      	ldrb	r3, [r3, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d1e8      	bne.n	800d96a <USBD_GetString+0x4e>
    }
  }
}
 800d998:	bf00      	nop
 800d99a:	3718      	adds	r7, #24
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b085      	sub	sp, #20
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800d9ac:	e005      	b.n	800d9ba <USBD_GetLen+0x1a>
  {
    len++;
 800d9ae:	7bfb      	ldrb	r3, [r7, #15]
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d1f5      	bne.n	800d9ae <USBD_GetLen+0xe>
  }

  return len;
 800d9c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3714      	adds	r7, #20
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	60f8      	str	r0, [r7, #12]
 800d9d8:	60b9      	str	r1, [r7, #8]
 800d9da:	4613      	mov	r3, r2
 800d9dc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2202      	movs	r2, #2
 800d9e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d9e6:	88fa      	ldrh	r2, [r7, #6]
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d9ec:	88fa      	ldrh	r2, [r7, #6]
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d9f2:	88fb      	ldrh	r3, [r7, #6]
 800d9f4:	68ba      	ldr	r2, [r7, #8]
 800d9f6:	2100      	movs	r1, #0
 800d9f8:	68f8      	ldr	r0, [r7, #12]
 800d9fa:	f000 fc6f 	bl	800e2dc <USBD_LL_Transmit>

  return USBD_OK;
 800d9fe:	2300      	movs	r3, #0
}
 800da00:	4618      	mov	r0, r3
 800da02:	3710      	adds	r7, #16
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	60f8      	str	r0, [r7, #12]
 800da10:	60b9      	str	r1, [r7, #8]
 800da12:	4613      	mov	r3, r2
 800da14:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da16:	88fb      	ldrh	r3, [r7, #6]
 800da18:	68ba      	ldr	r2, [r7, #8]
 800da1a:	2100      	movs	r1, #0
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f000 fc5d 	bl	800e2dc <USBD_LL_Transmit>

  return USBD_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	4613      	mov	r3, r2
 800da38:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2203      	movs	r2, #3
 800da3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800da42:	88fa      	ldrh	r2, [r7, #6]
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800da4a:	88fa      	ldrh	r2, [r7, #6]
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da52:	88fb      	ldrh	r3, [r7, #6]
 800da54:	68ba      	ldr	r2, [r7, #8]
 800da56:	2100      	movs	r1, #0
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f000 fc62 	bl	800e322 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da5e:	2300      	movs	r3, #0
}
 800da60:	4618      	mov	r0, r3
 800da62:	3710      	adds	r7, #16
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	4613      	mov	r3, r2
 800da74:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da76:	88fb      	ldrh	r3, [r7, #6]
 800da78:	68ba      	ldr	r2, [r7, #8]
 800da7a:	2100      	movs	r1, #0
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f000 fc50 	bl	800e322 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da82:	2300      	movs	r3, #0
}
 800da84:	4618      	mov	r0, r3
 800da86:	3710      	adds	r7, #16
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2204      	movs	r2, #4
 800da98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800da9c:	2300      	movs	r3, #0
 800da9e:	2200      	movs	r2, #0
 800daa0:	2100      	movs	r1, #0
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f000 fc1a 	bl	800e2dc <USBD_LL_Transmit>

  return USBD_OK;
 800daa8:	2300      	movs	r3, #0
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3708      	adds	r7, #8
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b082      	sub	sp, #8
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2205      	movs	r2, #5
 800dabe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dac2:	2300      	movs	r3, #0
 800dac4:	2200      	movs	r2, #0
 800dac6:	2100      	movs	r1, #0
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f000 fc2a 	bl	800e322 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dace:	2300      	movs	r3, #0
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3708      	adds	r7, #8
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dadc:	2200      	movs	r2, #0
 800dade:	4912      	ldr	r1, [pc, #72]	@ (800db28 <MX_USB_DEVICE_Init+0x50>)
 800dae0:	4812      	ldr	r0, [pc, #72]	@ (800db2c <MX_USB_DEVICE_Init+0x54>)
 800dae2:	f7fe ff5c 	bl	800c99e <USBD_Init>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d001      	beq.n	800daf0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800daec:	f7f4 fd0c 	bl	8002508 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800daf0:	490f      	ldr	r1, [pc, #60]	@ (800db30 <MX_USB_DEVICE_Init+0x58>)
 800daf2:	480e      	ldr	r0, [pc, #56]	@ (800db2c <MX_USB_DEVICE_Init+0x54>)
 800daf4:	f7fe ff7e 	bl	800c9f4 <USBD_RegisterClass>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d001      	beq.n	800db02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dafe:	f7f4 fd03 	bl	8002508 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800db02:	490c      	ldr	r1, [pc, #48]	@ (800db34 <MX_USB_DEVICE_Init+0x5c>)
 800db04:	4809      	ldr	r0, [pc, #36]	@ (800db2c <MX_USB_DEVICE_Init+0x54>)
 800db06:	f7fe fedb 	bl	800c8c0 <USBD_CDC_RegisterInterface>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d001      	beq.n	800db14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800db10:	f7f4 fcfa 	bl	8002508 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800db14:	4805      	ldr	r0, [pc, #20]	@ (800db2c <MX_USB_DEVICE_Init+0x54>)
 800db16:	f7fe ff87 	bl	800ca28 <USBD_Start>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d001      	beq.n	800db24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800db20:	f7f4 fcf2 	bl	8002508 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800db24:	bf00      	nop
 800db26:	bd80      	pop	{r7, pc}
 800db28:	2000013c 	.word	0x2000013c
 800db2c:	20000f44 	.word	0x20000f44
 800db30:	20000028 	.word	0x20000028
 800db34:	2000012c 	.word	0x2000012c

0800db38 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800db3c:	2200      	movs	r2, #0
 800db3e:	4905      	ldr	r1, [pc, #20]	@ (800db54 <CDC_Init_FS+0x1c>)
 800db40:	4805      	ldr	r0, [pc, #20]	@ (800db58 <CDC_Init_FS+0x20>)
 800db42:	f7fe fed4 	bl	800c8ee <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800db46:	4905      	ldr	r1, [pc, #20]	@ (800db5c <CDC_Init_FS+0x24>)
 800db48:	4803      	ldr	r0, [pc, #12]	@ (800db58 <CDC_Init_FS+0x20>)
 800db4a:	f7fe feea 	bl	800c922 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800db4e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800db50:	4618      	mov	r0, r3
 800db52:	bd80      	pop	{r7, pc}
 800db54:	20001608 	.word	0x20001608
 800db58:	20000f44 	.word	0x20000f44
 800db5c:	20001208 	.word	0x20001208

0800db60 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800db60:	b480      	push	{r7}
 800db62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800db64:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800db66:	4618      	mov	r0, r3
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800db70:	b480      	push	{r7}
 800db72:	b083      	sub	sp, #12
 800db74:	af00      	add	r7, sp, #0
 800db76:	4603      	mov	r3, r0
 800db78:	6039      	str	r1, [r7, #0]
 800db7a:	71fb      	strb	r3, [r7, #7]
 800db7c:	4613      	mov	r3, r2
 800db7e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800db80:	79fb      	ldrb	r3, [r7, #7]
 800db82:	2b23      	cmp	r3, #35	@ 0x23
 800db84:	d84a      	bhi.n	800dc1c <CDC_Control_FS+0xac>
 800db86:	a201      	add	r2, pc, #4	@ (adr r2, 800db8c <CDC_Control_FS+0x1c>)
 800db88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db8c:	0800dc1d 	.word	0x0800dc1d
 800db90:	0800dc1d 	.word	0x0800dc1d
 800db94:	0800dc1d 	.word	0x0800dc1d
 800db98:	0800dc1d 	.word	0x0800dc1d
 800db9c:	0800dc1d 	.word	0x0800dc1d
 800dba0:	0800dc1d 	.word	0x0800dc1d
 800dba4:	0800dc1d 	.word	0x0800dc1d
 800dba8:	0800dc1d 	.word	0x0800dc1d
 800dbac:	0800dc1d 	.word	0x0800dc1d
 800dbb0:	0800dc1d 	.word	0x0800dc1d
 800dbb4:	0800dc1d 	.word	0x0800dc1d
 800dbb8:	0800dc1d 	.word	0x0800dc1d
 800dbbc:	0800dc1d 	.word	0x0800dc1d
 800dbc0:	0800dc1d 	.word	0x0800dc1d
 800dbc4:	0800dc1d 	.word	0x0800dc1d
 800dbc8:	0800dc1d 	.word	0x0800dc1d
 800dbcc:	0800dc1d 	.word	0x0800dc1d
 800dbd0:	0800dc1d 	.word	0x0800dc1d
 800dbd4:	0800dc1d 	.word	0x0800dc1d
 800dbd8:	0800dc1d 	.word	0x0800dc1d
 800dbdc:	0800dc1d 	.word	0x0800dc1d
 800dbe0:	0800dc1d 	.word	0x0800dc1d
 800dbe4:	0800dc1d 	.word	0x0800dc1d
 800dbe8:	0800dc1d 	.word	0x0800dc1d
 800dbec:	0800dc1d 	.word	0x0800dc1d
 800dbf0:	0800dc1d 	.word	0x0800dc1d
 800dbf4:	0800dc1d 	.word	0x0800dc1d
 800dbf8:	0800dc1d 	.word	0x0800dc1d
 800dbfc:	0800dc1d 	.word	0x0800dc1d
 800dc00:	0800dc1d 	.word	0x0800dc1d
 800dc04:	0800dc1d 	.word	0x0800dc1d
 800dc08:	0800dc1d 	.word	0x0800dc1d
 800dc0c:	0800dc1d 	.word	0x0800dc1d
 800dc10:	0800dc1d 	.word	0x0800dc1d
 800dc14:	0800dc1d 	.word	0x0800dc1d
 800dc18:	0800dc1d 	.word	0x0800dc1d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dc1c:	bf00      	nop
  }

  return (USBD_OK);
 800dc1e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	370c      	adds	r7, #12
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dc36:	6879      	ldr	r1, [r7, #4]
 800dc38:	480c      	ldr	r0, [pc, #48]	@ (800dc6c <CDC_Receive_FS+0x40>)
 800dc3a:	f7fe fe72 	bl	800c922 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dc3e:	480b      	ldr	r0, [pc, #44]	@ (800dc6c <CDC_Receive_FS+0x40>)
 800dc40:	f7fe fe83 	bl	800c94a <USBD_CDC_ReceivePacket>

  for (uint32_t i = 0; i < *Len; i++) {
 800dc44:	2300      	movs	r3, #0
 800dc46:	60fb      	str	r3, [r7, #12]
 800dc48:	e005      	b.n	800dc56 <CDC_Receive_FS+0x2a>
	  printf("test");
 800dc4a:	4809      	ldr	r0, [pc, #36]	@ (800dc70 <CDC_Receive_FS+0x44>)
 800dc4c:	f001 fc68 	bl	800f520 <iprintf>
  for (uint32_t i = 0; i < *Len; i++) {
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	3301      	adds	r3, #1
 800dc54:	60fb      	str	r3, [r7, #12]
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	68fa      	ldr	r2, [r7, #12]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d3f4      	bcc.n	800dc4a <CDC_Receive_FS+0x1e>
//	  RingBuffer_PutChar(&comInputRingBuffer, Buf[i]);
  }
  return (USBD_OK);
 800dc60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3710      	adds	r7, #16
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	20000f44 	.word	0x20000f44
 800dc70:	08013810 	.word	0x08013810

0800dc74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b083      	sub	sp, #12
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	6039      	str	r1, [r7, #0]
 800dc7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	2212      	movs	r2, #18
 800dc84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dc86:	4b03      	ldr	r3, [pc, #12]	@ (800dc94 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	370c      	adds	r7, #12
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc92:	4770      	bx	lr
 800dc94:	20000158 	.word	0x20000158

0800dc98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b083      	sub	sp, #12
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	4603      	mov	r3, r0
 800dca0:	6039      	str	r1, [r7, #0]
 800dca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	2204      	movs	r2, #4
 800dca8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dcaa:	4b03      	ldr	r3, [pc, #12]	@ (800dcb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	370c      	adds	r7, #12
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr
 800dcb8:	2000016c 	.word	0x2000016c

0800dcbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	6039      	str	r1, [r7, #0]
 800dcc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dcc8:	79fb      	ldrb	r3, [r7, #7]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d105      	bne.n	800dcda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dcce:	683a      	ldr	r2, [r7, #0]
 800dcd0:	4907      	ldr	r1, [pc, #28]	@ (800dcf0 <USBD_FS_ProductStrDescriptor+0x34>)
 800dcd2:	4808      	ldr	r0, [pc, #32]	@ (800dcf4 <USBD_FS_ProductStrDescriptor+0x38>)
 800dcd4:	f7ff fe22 	bl	800d91c <USBD_GetString>
 800dcd8:	e004      	b.n	800dce4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dcda:	683a      	ldr	r2, [r7, #0]
 800dcdc:	4904      	ldr	r1, [pc, #16]	@ (800dcf0 <USBD_FS_ProductStrDescriptor+0x34>)
 800dcde:	4805      	ldr	r0, [pc, #20]	@ (800dcf4 <USBD_FS_ProductStrDescriptor+0x38>)
 800dce0:	f7ff fe1c 	bl	800d91c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dce4:	4b02      	ldr	r3, [pc, #8]	@ (800dcf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3708      	adds	r7, #8
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	20001a08 	.word	0x20001a08
 800dcf4:	08013818 	.word	0x08013818

0800dcf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b082      	sub	sp, #8
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	4603      	mov	r3, r0
 800dd00:	6039      	str	r1, [r7, #0]
 800dd02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dd04:	683a      	ldr	r2, [r7, #0]
 800dd06:	4904      	ldr	r1, [pc, #16]	@ (800dd18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dd08:	4804      	ldr	r0, [pc, #16]	@ (800dd1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dd0a:	f7ff fe07 	bl	800d91c <USBD_GetString>
  return USBD_StrDesc;
 800dd0e:	4b02      	ldr	r3, [pc, #8]	@ (800dd18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3708      	adds	r7, #8
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}
 800dd18:	20001a08 	.word	0x20001a08
 800dd1c:	08013830 	.word	0x08013830

0800dd20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	4603      	mov	r3, r0
 800dd28:	6039      	str	r1, [r7, #0]
 800dd2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	221a      	movs	r2, #26
 800dd30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dd32:	f000 f843 	bl	800ddbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dd36:	4b02      	ldr	r3, [pc, #8]	@ (800dd40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3708      	adds	r7, #8
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	20000170 	.word	0x20000170

0800dd44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	6039      	str	r1, [r7, #0]
 800dd4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dd50:	79fb      	ldrb	r3, [r7, #7]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d105      	bne.n	800dd62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dd56:	683a      	ldr	r2, [r7, #0]
 800dd58:	4907      	ldr	r1, [pc, #28]	@ (800dd78 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dd5a:	4808      	ldr	r0, [pc, #32]	@ (800dd7c <USBD_FS_ConfigStrDescriptor+0x38>)
 800dd5c:	f7ff fdde 	bl	800d91c <USBD_GetString>
 800dd60:	e004      	b.n	800dd6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dd62:	683a      	ldr	r2, [r7, #0]
 800dd64:	4904      	ldr	r1, [pc, #16]	@ (800dd78 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dd66:	4805      	ldr	r0, [pc, #20]	@ (800dd7c <USBD_FS_ConfigStrDescriptor+0x38>)
 800dd68:	f7ff fdd8 	bl	800d91c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd6c:	4b02      	ldr	r3, [pc, #8]	@ (800dd78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3708      	adds	r7, #8
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	20001a08 	.word	0x20001a08
 800dd7c:	08013844 	.word	0x08013844

0800dd80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	4603      	mov	r3, r0
 800dd88:	6039      	str	r1, [r7, #0]
 800dd8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd8c:	79fb      	ldrb	r3, [r7, #7]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d105      	bne.n	800dd9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dd92:	683a      	ldr	r2, [r7, #0]
 800dd94:	4907      	ldr	r1, [pc, #28]	@ (800ddb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dd96:	4808      	ldr	r0, [pc, #32]	@ (800ddb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dd98:	f7ff fdc0 	bl	800d91c <USBD_GetString>
 800dd9c:	e004      	b.n	800dda8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dd9e:	683a      	ldr	r2, [r7, #0]
 800dda0:	4904      	ldr	r1, [pc, #16]	@ (800ddb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dda2:	4805      	ldr	r0, [pc, #20]	@ (800ddb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dda4:	f7ff fdba 	bl	800d91c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dda8:	4b02      	ldr	r3, [pc, #8]	@ (800ddb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3708      	adds	r7, #8
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	20001a08 	.word	0x20001a08
 800ddb8:	08013850 	.word	0x08013850

0800ddbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b084      	sub	sp, #16
 800ddc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800ddc2:	68fa      	ldr	r2, [r7, #12]
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	4413      	add	r3, r2
 800ddc8:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d009      	beq.n	800dde4 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ddd0:	2208      	movs	r2, #8
 800ddd2:	4906      	ldr	r1, [pc, #24]	@ (800ddec <Get_SerialNum+0x30>)
 800ddd4:	68f8      	ldr	r0, [r7, #12]
 800ddd6:	f000 f80d 	bl	800ddf4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ddda:	2204      	movs	r2, #4
 800dddc:	4904      	ldr	r1, [pc, #16]	@ (800ddf0 <Get_SerialNum+0x34>)
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f000 f808 	bl	800ddf4 <IntToUnicode>
  }
}
 800dde4:	bf00      	nop
 800dde6:	3710      	adds	r7, #16
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	20000172 	.word	0x20000172
 800ddf0:	20000182 	.word	0x20000182

0800ddf4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b087      	sub	sp, #28
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	60f8      	str	r0, [r7, #12]
 800ddfc:	60b9      	str	r1, [r7, #8]
 800ddfe:	4613      	mov	r3, r2
 800de00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800de02:	2300      	movs	r3, #0
 800de04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800de06:	2300      	movs	r3, #0
 800de08:	75fb      	strb	r3, [r7, #23]
 800de0a:	e027      	b.n	800de5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	0f1b      	lsrs	r3, r3, #28
 800de10:	2b09      	cmp	r3, #9
 800de12:	d80b      	bhi.n	800de2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	0f1b      	lsrs	r3, r3, #28
 800de18:	b2da      	uxtb	r2, r3
 800de1a:	7dfb      	ldrb	r3, [r7, #23]
 800de1c:	005b      	lsls	r3, r3, #1
 800de1e:	4619      	mov	r1, r3
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	440b      	add	r3, r1
 800de24:	3230      	adds	r2, #48	@ 0x30
 800de26:	b2d2      	uxtb	r2, r2
 800de28:	701a      	strb	r2, [r3, #0]
 800de2a:	e00a      	b.n	800de42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	0f1b      	lsrs	r3, r3, #28
 800de30:	b2da      	uxtb	r2, r3
 800de32:	7dfb      	ldrb	r3, [r7, #23]
 800de34:	005b      	lsls	r3, r3, #1
 800de36:	4619      	mov	r1, r3
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	440b      	add	r3, r1
 800de3c:	3237      	adds	r2, #55	@ 0x37
 800de3e:	b2d2      	uxtb	r2, r2
 800de40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	011b      	lsls	r3, r3, #4
 800de46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800de48:	7dfb      	ldrb	r3, [r7, #23]
 800de4a:	005b      	lsls	r3, r3, #1
 800de4c:	3301      	adds	r3, #1
 800de4e:	68ba      	ldr	r2, [r7, #8]
 800de50:	4413      	add	r3, r2
 800de52:	2200      	movs	r2, #0
 800de54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800de56:	7dfb      	ldrb	r3, [r7, #23]
 800de58:	3301      	adds	r3, #1
 800de5a:	75fb      	strb	r3, [r7, #23]
 800de5c:	7dfa      	ldrb	r2, [r7, #23]
 800de5e:	79fb      	ldrb	r3, [r7, #7]
 800de60:	429a      	cmp	r2, r3
 800de62:	d3d3      	bcc.n	800de0c <IntToUnicode+0x18>
  }
}
 800de64:	bf00      	nop
 800de66:	bf00      	nop
 800de68:	371c      	adds	r7, #28
 800de6a:	46bd      	mov	sp, r7
 800de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de70:	4770      	bx	lr
	...

0800de74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b08a      	sub	sp, #40	@ 0x28
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de7c:	f107 0314 	add.w	r3, r7, #20
 800de80:	2200      	movs	r2, #0
 800de82:	601a      	str	r2, [r3, #0]
 800de84:	605a      	str	r2, [r3, #4]
 800de86:	609a      	str	r2, [r3, #8]
 800de88:	60da      	str	r2, [r3, #12]
 800de8a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4a20      	ldr	r2, [pc, #128]	@ (800df14 <HAL_PCD_MspInit+0xa0>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d139      	bne.n	800df0a <HAL_PCD_MspInit+0x96>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de96:	4b20      	ldr	r3, [pc, #128]	@ (800df18 <HAL_PCD_MspInit+0xa4>)
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	4a1f      	ldr	r2, [pc, #124]	@ (800df18 <HAL_PCD_MspInit+0xa4>)
 800de9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dea0:	6153      	str	r3, [r2, #20]
 800dea2:	4b1d      	ldr	r3, [pc, #116]	@ (800df18 <HAL_PCD_MspInit+0xa4>)
 800dea4:	695b      	ldr	r3, [r3, #20]
 800dea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800deaa:	613b      	str	r3, [r7, #16]
 800deac:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800deae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800deb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800deb4:	2302      	movs	r3, #2
 800deb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800deb8:	2300      	movs	r3, #0
 800deba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800debc:	2303      	movs	r3, #3
 800debe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800dec0:	230e      	movs	r3, #14
 800dec2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dec4:	f107 0314 	add.w	r3, r7, #20
 800dec8:	4619      	mov	r1, r3
 800deca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800dece:	f7f5 f8ed 	bl	80030ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ded2:	4b11      	ldr	r3, [pc, #68]	@ (800df18 <HAL_PCD_MspInit+0xa4>)
 800ded4:	69db      	ldr	r3, [r3, #28]
 800ded6:	4a10      	ldr	r2, [pc, #64]	@ (800df18 <HAL_PCD_MspInit+0xa4>)
 800ded8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800dedc:	61d3      	str	r3, [r2, #28]
 800dede:	4b0e      	ldr	r3, [pc, #56]	@ (800df18 <HAL_PCD_MspInit+0xa4>)
 800dee0:	69db      	ldr	r3, [r3, #28]
 800dee2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dee6:	60fb      	str	r3, [r7, #12]
 800dee8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800deea:	2200      	movs	r2, #0
 800deec:	2100      	movs	r1, #0
 800deee:	204a      	movs	r0, #74	@ 0x4a
 800def0:	f7f5 f82f 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800def4:	204a      	movs	r0, #74	@ 0x4a
 800def6:	f7f5 f848 	bl	8002f8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800defa:	2200      	movs	r2, #0
 800defc:	2100      	movs	r1, #0
 800defe:	204b      	movs	r0, #75	@ 0x4b
 800df00:	f7f5 f827 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800df04:	204b      	movs	r0, #75	@ 0x4b
 800df06:	f7f5 f840 	bl	8002f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800df0a:	bf00      	nop
 800df0c:	3728      	adds	r7, #40	@ 0x28
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	40005c00 	.word	0x40005c00
 800df18:	40021000 	.word	0x40021000

0800df1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800df30:	4619      	mov	r1, r3
 800df32:	4610      	mov	r0, r2
 800df34:	f7fe fdc1 	bl	800caba <USBD_LL_SetupStage>
}
 800df38:	bf00      	nop
 800df3a:	3708      	adds	r7, #8
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}

0800df40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	460b      	mov	r3, r1
 800df4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800df52:	78fa      	ldrb	r2, [r7, #3]
 800df54:	6879      	ldr	r1, [r7, #4]
 800df56:	4613      	mov	r3, r2
 800df58:	009b      	lsls	r3, r3, #2
 800df5a:	4413      	add	r3, r2
 800df5c:	00db      	lsls	r3, r3, #3
 800df5e:	440b      	add	r3, r1
 800df60:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800df64:	681a      	ldr	r2, [r3, #0]
 800df66:	78fb      	ldrb	r3, [r7, #3]
 800df68:	4619      	mov	r1, r3
 800df6a:	f7fe fdf3 	bl	800cb54 <USBD_LL_DataOutStage>
}
 800df6e:	bf00      	nop
 800df70:	3708      	adds	r7, #8
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}

0800df76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df76:	b580      	push	{r7, lr}
 800df78:	b082      	sub	sp, #8
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
 800df7e:	460b      	mov	r3, r1
 800df80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800df88:	78fa      	ldrb	r2, [r7, #3]
 800df8a:	6879      	ldr	r1, [r7, #4]
 800df8c:	4613      	mov	r3, r2
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	4413      	add	r3, r2
 800df92:	00db      	lsls	r3, r3, #3
 800df94:	440b      	add	r3, r1
 800df96:	333c      	adds	r3, #60	@ 0x3c
 800df98:	681a      	ldr	r2, [r3, #0]
 800df9a:	78fb      	ldrb	r3, [r7, #3]
 800df9c:	4619      	mov	r1, r3
 800df9e:	f7fe fe4a 	bl	800cc36 <USBD_LL_DataInStage>
}
 800dfa2:	bf00      	nop
 800dfa4:	3708      	adds	r7, #8
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b082      	sub	sp, #8
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7fe ff5d 	bl	800ce78 <USBD_LL_SOF>
}
 800dfbe:	bf00      	nop
 800dfc0:	3708      	adds	r7, #8
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}

0800dfc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfc6:	b580      	push	{r7, lr}
 800dfc8:	b084      	sub	sp, #16
 800dfca:	af00      	add	r7, sp, #0
 800dfcc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dfce:	2301      	movs	r3, #1
 800dfd0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	2b02      	cmp	r3, #2
 800dfd8:	d001      	beq.n	800dfde <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dfda:	f7f4 fa95 	bl	8002508 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800dfe4:	7bfa      	ldrb	r2, [r7, #15]
 800dfe6:	4611      	mov	r1, r2
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f7fe ff0a 	bl	800ce02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7fe fec3 	bl	800cd80 <USBD_LL_Reset>
}
 800dffa:	bf00      	nop
 800dffc:	3710      	adds	r7, #16
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
	...

0800e004 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800e012:	4618      	mov	r0, r3
 800e014:	f7fe ff05 	bl	800ce22 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	699b      	ldr	r3, [r3, #24]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d005      	beq.n	800e02c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e020:	4b04      	ldr	r3, [pc, #16]	@ (800e034 <HAL_PCD_SuspendCallback+0x30>)
 800e022:	691b      	ldr	r3, [r3, #16]
 800e024:	4a03      	ldr	r2, [pc, #12]	@ (800e034 <HAL_PCD_SuspendCallback+0x30>)
 800e026:	f043 0306 	orr.w	r3, r3, #6
 800e02a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e02c:	bf00      	nop
 800e02e:	3708      	adds	r7, #8
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}
 800e034:	e000ed00 	.word	0xe000ed00

0800e038 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800e046:	4618      	mov	r0, r3
 800e048:	f7fe ff00 	bl	800ce4c <USBD_LL_Resume>
}
 800e04c:	bf00      	nop
 800e04e:	3708      	adds	r7, #8
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e05c:	4a28      	ldr	r2, [pc, #160]	@ (800e100 <USBD_LL_Init+0xac>)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f8c2 32e8 	str.w	r3, [r2, #744]	@ 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	4a26      	ldr	r2, [pc, #152]	@ (800e100 <USBD_LL_Init+0xac>)
 800e068:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800e06c:	4b24      	ldr	r3, [pc, #144]	@ (800e100 <USBD_LL_Init+0xac>)
 800e06e:	4a25      	ldr	r2, [pc, #148]	@ (800e104 <USBD_LL_Init+0xb0>)
 800e070:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e072:	4b23      	ldr	r3, [pc, #140]	@ (800e100 <USBD_LL_Init+0xac>)
 800e074:	2208      	movs	r2, #8
 800e076:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e078:	4b21      	ldr	r3, [pc, #132]	@ (800e100 <USBD_LL_Init+0xac>)
 800e07a:	2202      	movs	r2, #2
 800e07c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e07e:	4b20      	ldr	r3, [pc, #128]	@ (800e100 <USBD_LL_Init+0xac>)
 800e080:	2202      	movs	r2, #2
 800e082:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e084:	4b1e      	ldr	r3, [pc, #120]	@ (800e100 <USBD_LL_Init+0xac>)
 800e086:	2200      	movs	r2, #0
 800e088:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e08a:	4b1d      	ldr	r3, [pc, #116]	@ (800e100 <USBD_LL_Init+0xac>)
 800e08c:	2200      	movs	r2, #0
 800e08e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e090:	481b      	ldr	r0, [pc, #108]	@ (800e100 <USBD_LL_Init+0xac>)
 800e092:	f7f5 ff58 	bl	8003f46 <HAL_PCD_Init>
 800e096:	4603      	mov	r3, r0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d001      	beq.n	800e0a0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800e09c:	f7f4 fa34 	bl	8002508 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e0a6:	2318      	movs	r3, #24
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	2100      	movs	r1, #0
 800e0ac:	f7f7 fbe0 	bl	8005870 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e0b6:	2358      	movs	r3, #88	@ 0x58
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	2180      	movs	r1, #128	@ 0x80
 800e0bc:	f7f7 fbd8 	bl	8005870 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e0c6:	23c0      	movs	r3, #192	@ 0xc0
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	2181      	movs	r1, #129	@ 0x81
 800e0cc:	f7f7 fbd0 	bl	8005870 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e0d6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800e0da:	2200      	movs	r2, #0
 800e0dc:	2101      	movs	r1, #1
 800e0de:	f7f7 fbc7 	bl	8005870 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e0e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	2182      	movs	r1, #130	@ 0x82
 800e0f0:	f7f7 fbbe 	bl	8005870 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e0f4:	2300      	movs	r3, #0
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3708      	adds	r7, #8
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	20001c08 	.word	0x20001c08
 800e104:	40005c00 	.word	0x40005c00

0800e108 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e110:	2300      	movs	r3, #0
 800e112:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e114:	2300      	movs	r3, #0
 800e116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e11e:	4618      	mov	r0, r3
 800e120:	f7f5 ffe3 	bl	80040ea <HAL_PCD_Start>
 800e124:	4603      	mov	r3, r0
 800e126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e128:	7bfb      	ldrb	r3, [r7, #15]
 800e12a:	4618      	mov	r0, r3
 800e12c:	f000 f954 	bl	800e3d8 <USBD_Get_USB_Status>
 800e130:	4603      	mov	r3, r0
 800e132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e134:	7bbb      	ldrb	r3, [r7, #14]
}
 800e136:	4618      	mov	r0, r3
 800e138:	3710      	adds	r7, #16
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e13e:	b580      	push	{r7, lr}
 800e140:	b084      	sub	sp, #16
 800e142:	af00      	add	r7, sp, #0
 800e144:	6078      	str	r0, [r7, #4]
 800e146:	4608      	mov	r0, r1
 800e148:	4611      	mov	r1, r2
 800e14a:	461a      	mov	r2, r3
 800e14c:	4603      	mov	r3, r0
 800e14e:	70fb      	strb	r3, [r7, #3]
 800e150:	460b      	mov	r3, r1
 800e152:	70bb      	strb	r3, [r7, #2]
 800e154:	4613      	mov	r3, r2
 800e156:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e158:	2300      	movs	r3, #0
 800e15a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e15c:	2300      	movs	r3, #0
 800e15e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e166:	78bb      	ldrb	r3, [r7, #2]
 800e168:	883a      	ldrh	r2, [r7, #0]
 800e16a:	78f9      	ldrb	r1, [r7, #3]
 800e16c:	f7f6 f8dc 	bl	8004328 <HAL_PCD_EP_Open>
 800e170:	4603      	mov	r3, r0
 800e172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e174:	7bfb      	ldrb	r3, [r7, #15]
 800e176:	4618      	mov	r0, r3
 800e178:	f000 f92e 	bl	800e3d8 <USBD_Get_USB_Status>
 800e17c:	4603      	mov	r3, r0
 800e17e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e180:	7bbb      	ldrb	r3, [r7, #14]
}
 800e182:	4618      	mov	r0, r3
 800e184:	3710      	adds	r7, #16
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}

0800e18a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e18a:	b580      	push	{r7, lr}
 800e18c:	b084      	sub	sp, #16
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
 800e192:	460b      	mov	r3, r1
 800e194:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e196:	2300      	movs	r3, #0
 800e198:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e19a:	2300      	movs	r3, #0
 800e19c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e1a4:	78fa      	ldrb	r2, [r7, #3]
 800e1a6:	4611      	mov	r1, r2
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f7f6 f91a 	bl	80043e2 <HAL_PCD_EP_Close>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1b2:	7bfb      	ldrb	r3, [r7, #15]
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f000 f90f 	bl	800e3d8 <USBD_Get_USB_Status>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1be:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3710      	adds	r7, #16
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b084      	sub	sp, #16
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e1e2:	78fa      	ldrb	r2, [r7, #3]
 800e1e4:	4611      	mov	r1, r2
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f7f6 f9c3 	bl	8004572 <HAL_PCD_EP_SetStall>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1f0:	7bfb      	ldrb	r3, [r7, #15]
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f000 f8f0 	bl	800e3d8 <USBD_Get_USB_Status>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3710      	adds	r7, #16
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}

0800e206 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e206:	b580      	push	{r7, lr}
 800e208:	b084      	sub	sp, #16
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
 800e20e:	460b      	mov	r3, r1
 800e210:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e212:	2300      	movs	r3, #0
 800e214:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e216:	2300      	movs	r3, #0
 800e218:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e220:	78fa      	ldrb	r2, [r7, #3]
 800e222:	4611      	mov	r1, r2
 800e224:	4618      	mov	r0, r3
 800e226:	f7f6 f9f6 	bl	8004616 <HAL_PCD_EP_ClrStall>
 800e22a:	4603      	mov	r3, r0
 800e22c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e22e:	7bfb      	ldrb	r3, [r7, #15]
 800e230:	4618      	mov	r0, r3
 800e232:	f000 f8d1 	bl	800e3d8 <USBD_Get_USB_Status>
 800e236:	4603      	mov	r3, r0
 800e238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e23a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3710      	adds	r7, #16
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e244:	b480      	push	{r7}
 800e246:	b085      	sub	sp, #20
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	460b      	mov	r3, r1
 800e24e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e256:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	da0c      	bge.n	800e27a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e260:	78fb      	ldrb	r3, [r7, #3]
 800e262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e266:	68f9      	ldr	r1, [r7, #12]
 800e268:	1c5a      	adds	r2, r3, #1
 800e26a:	4613      	mov	r3, r2
 800e26c:	009b      	lsls	r3, r3, #2
 800e26e:	4413      	add	r3, r2
 800e270:	00db      	lsls	r3, r3, #3
 800e272:	440b      	add	r3, r1
 800e274:	3302      	adds	r3, #2
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	e00b      	b.n	800e292 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e27a:	78fb      	ldrb	r3, [r7, #3]
 800e27c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e280:	68f9      	ldr	r1, [r7, #12]
 800e282:	4613      	mov	r3, r2
 800e284:	009b      	lsls	r3, r3, #2
 800e286:	4413      	add	r3, r2
 800e288:	00db      	lsls	r3, r3, #3
 800e28a:	440b      	add	r3, r1
 800e28c:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800e290:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e292:	4618      	mov	r0, r3
 800e294:	3714      	adds	r7, #20
 800e296:	46bd      	mov	sp, r7
 800e298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29c:	4770      	bx	lr

0800e29e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b084      	sub	sp, #16
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e2b8:	78fa      	ldrb	r2, [r7, #3]
 800e2ba:	4611      	mov	r1, r2
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7f6 f80e 	bl	80042de <HAL_PCD_SetAddress>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2c6:	7bfb      	ldrb	r3, [r7, #15]
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f000 f885 	bl	800e3d8 <USBD_Get_USB_Status>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3710      	adds	r7, #16
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b086      	sub	sp, #24
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	60f8      	str	r0, [r7, #12]
 800e2e4:	607a      	str	r2, [r7, #4]
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	72fb      	strb	r3, [r7, #11]
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e2fe:	893b      	ldrh	r3, [r7, #8]
 800e300:	7af9      	ldrb	r1, [r7, #11]
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	f7f6 f8fe 	bl	8004504 <HAL_PCD_EP_Transmit>
 800e308:	4603      	mov	r3, r0
 800e30a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e30c:	7dfb      	ldrb	r3, [r7, #23]
 800e30e:	4618      	mov	r0, r3
 800e310:	f000 f862 	bl	800e3d8 <USBD_Get_USB_Status>
 800e314:	4603      	mov	r3, r0
 800e316:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e318:	7dbb      	ldrb	r3, [r7, #22]
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3718      	adds	r7, #24
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}

0800e322 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e322:	b580      	push	{r7, lr}
 800e324:	b086      	sub	sp, #24
 800e326:	af00      	add	r7, sp, #0
 800e328:	60f8      	str	r0, [r7, #12]
 800e32a:	607a      	str	r2, [r7, #4]
 800e32c:	461a      	mov	r2, r3
 800e32e:	460b      	mov	r3, r1
 800e330:	72fb      	strb	r3, [r7, #11]
 800e332:	4613      	mov	r3, r2
 800e334:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e336:	2300      	movs	r3, #0
 800e338:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e33a:	2300      	movs	r3, #0
 800e33c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e344:	893b      	ldrh	r3, [r7, #8]
 800e346:	7af9      	ldrb	r1, [r7, #11]
 800e348:	687a      	ldr	r2, [r7, #4]
 800e34a:	f7f6 f892 	bl	8004472 <HAL_PCD_EP_Receive>
 800e34e:	4603      	mov	r3, r0
 800e350:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e352:	7dfb      	ldrb	r3, [r7, #23]
 800e354:	4618      	mov	r0, r3
 800e356:	f000 f83f 	bl	800e3d8 <USBD_Get_USB_Status>
 800e35a:	4603      	mov	r3, r0
 800e35c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e35e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e360:	4618      	mov	r0, r3
 800e362:	3718      	adds	r7, #24
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}

0800e368 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b082      	sub	sp, #8
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	460b      	mov	r3, r1
 800e372:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e37a:	78fa      	ldrb	r2, [r7, #3]
 800e37c:	4611      	mov	r1, r2
 800e37e:	4618      	mov	r0, r3
 800e380:	f7f6 f8a8 	bl	80044d4 <HAL_PCD_EP_GetRxCount>
 800e384:	4603      	mov	r3, r0
}
 800e386:	4618      	mov	r0, r3
 800e388:	3708      	adds	r7, #8
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
	...

0800e390 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e390:	b480      	push	{r7}
 800e392:	b083      	sub	sp, #12
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e398:	4b03      	ldr	r3, [pc, #12]	@ (800e3a8 <USBD_static_malloc+0x18>)
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	370c      	adds	r7, #12
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr
 800e3a6:	bf00      	nop
 800e3a8:	20001ef4 	.word	0x20001ef4

0800e3ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b083      	sub	sp, #12
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]

}
 800e3b4:	bf00      	nop
 800e3b6:	370c      	adds	r7, #12
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b083      	sub	sp, #12
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800e3cc:	bf00      	nop
 800e3ce:	370c      	adds	r7, #12
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b085      	sub	sp, #20
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	4603      	mov	r3, r0
 800e3e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e3e6:	79fb      	ldrb	r3, [r7, #7]
 800e3e8:	2b03      	cmp	r3, #3
 800e3ea:	d817      	bhi.n	800e41c <USBD_Get_USB_Status+0x44>
 800e3ec:	a201      	add	r2, pc, #4	@ (adr r2, 800e3f4 <USBD_Get_USB_Status+0x1c>)
 800e3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3f2:	bf00      	nop
 800e3f4:	0800e405 	.word	0x0800e405
 800e3f8:	0800e40b 	.word	0x0800e40b
 800e3fc:	0800e411 	.word	0x0800e411
 800e400:	0800e417 	.word	0x0800e417
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e404:	2300      	movs	r3, #0
 800e406:	73fb      	strb	r3, [r7, #15]
    break;
 800e408:	e00b      	b.n	800e422 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e40a:	2302      	movs	r3, #2
 800e40c:	73fb      	strb	r3, [r7, #15]
    break;
 800e40e:	e008      	b.n	800e422 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e410:	2301      	movs	r3, #1
 800e412:	73fb      	strb	r3, [r7, #15]
    break;
 800e414:	e005      	b.n	800e422 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e416:	2302      	movs	r3, #2
 800e418:	73fb      	strb	r3, [r7, #15]
    break;
 800e41a:	e002      	b.n	800e422 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e41c:	2302      	movs	r3, #2
 800e41e:	73fb      	strb	r3, [r7, #15]
    break;
 800e420:	bf00      	nop
  }
  return usb_status;
 800e422:	7bfb      	ldrb	r3, [r7, #15]
}
 800e424:	4618      	mov	r0, r3
 800e426:	3714      	adds	r7, #20
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr

0800e430 <atoi>:
 800e430:	220a      	movs	r2, #10
 800e432:	2100      	movs	r1, #0
 800e434:	f000 b87c 	b.w	800e530 <strtol>

0800e438 <_strtol_l.constprop.0>:
 800e438:	2b24      	cmp	r3, #36	@ 0x24
 800e43a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e43e:	4686      	mov	lr, r0
 800e440:	4690      	mov	r8, r2
 800e442:	d801      	bhi.n	800e448 <_strtol_l.constprop.0+0x10>
 800e444:	2b01      	cmp	r3, #1
 800e446:	d106      	bne.n	800e456 <_strtol_l.constprop.0+0x1e>
 800e448:	f001 fa78 	bl	800f93c <__errno>
 800e44c:	2316      	movs	r3, #22
 800e44e:	6003      	str	r3, [r0, #0]
 800e450:	2000      	movs	r0, #0
 800e452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e456:	4834      	ldr	r0, [pc, #208]	@ (800e528 <_strtol_l.constprop.0+0xf0>)
 800e458:	460d      	mov	r5, r1
 800e45a:	462a      	mov	r2, r5
 800e45c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e460:	5d06      	ldrb	r6, [r0, r4]
 800e462:	f016 0608 	ands.w	r6, r6, #8
 800e466:	d1f8      	bne.n	800e45a <_strtol_l.constprop.0+0x22>
 800e468:	2c2d      	cmp	r4, #45	@ 0x2d
 800e46a:	d12d      	bne.n	800e4c8 <_strtol_l.constprop.0+0x90>
 800e46c:	782c      	ldrb	r4, [r5, #0]
 800e46e:	2601      	movs	r6, #1
 800e470:	1c95      	adds	r5, r2, #2
 800e472:	f033 0210 	bics.w	r2, r3, #16
 800e476:	d109      	bne.n	800e48c <_strtol_l.constprop.0+0x54>
 800e478:	2c30      	cmp	r4, #48	@ 0x30
 800e47a:	d12a      	bne.n	800e4d2 <_strtol_l.constprop.0+0x9a>
 800e47c:	782a      	ldrb	r2, [r5, #0]
 800e47e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e482:	2a58      	cmp	r2, #88	@ 0x58
 800e484:	d125      	bne.n	800e4d2 <_strtol_l.constprop.0+0x9a>
 800e486:	786c      	ldrb	r4, [r5, #1]
 800e488:	2310      	movs	r3, #16
 800e48a:	3502      	adds	r5, #2
 800e48c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e490:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e494:	2200      	movs	r2, #0
 800e496:	fbbc f9f3 	udiv	r9, ip, r3
 800e49a:	4610      	mov	r0, r2
 800e49c:	fb03 ca19 	mls	sl, r3, r9, ip
 800e4a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e4a4:	2f09      	cmp	r7, #9
 800e4a6:	d81b      	bhi.n	800e4e0 <_strtol_l.constprop.0+0xa8>
 800e4a8:	463c      	mov	r4, r7
 800e4aa:	42a3      	cmp	r3, r4
 800e4ac:	dd27      	ble.n	800e4fe <_strtol_l.constprop.0+0xc6>
 800e4ae:	1c57      	adds	r7, r2, #1
 800e4b0:	d007      	beq.n	800e4c2 <_strtol_l.constprop.0+0x8a>
 800e4b2:	4581      	cmp	r9, r0
 800e4b4:	d320      	bcc.n	800e4f8 <_strtol_l.constprop.0+0xc0>
 800e4b6:	d101      	bne.n	800e4bc <_strtol_l.constprop.0+0x84>
 800e4b8:	45a2      	cmp	sl, r4
 800e4ba:	db1d      	blt.n	800e4f8 <_strtol_l.constprop.0+0xc0>
 800e4bc:	fb00 4003 	mla	r0, r0, r3, r4
 800e4c0:	2201      	movs	r2, #1
 800e4c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e4c6:	e7eb      	b.n	800e4a0 <_strtol_l.constprop.0+0x68>
 800e4c8:	2c2b      	cmp	r4, #43	@ 0x2b
 800e4ca:	bf04      	itt	eq
 800e4cc:	782c      	ldrbeq	r4, [r5, #0]
 800e4ce:	1c95      	addeq	r5, r2, #2
 800e4d0:	e7cf      	b.n	800e472 <_strtol_l.constprop.0+0x3a>
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d1da      	bne.n	800e48c <_strtol_l.constprop.0+0x54>
 800e4d6:	2c30      	cmp	r4, #48	@ 0x30
 800e4d8:	bf0c      	ite	eq
 800e4da:	2308      	moveq	r3, #8
 800e4dc:	230a      	movne	r3, #10
 800e4de:	e7d5      	b.n	800e48c <_strtol_l.constprop.0+0x54>
 800e4e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e4e4:	2f19      	cmp	r7, #25
 800e4e6:	d801      	bhi.n	800e4ec <_strtol_l.constprop.0+0xb4>
 800e4e8:	3c37      	subs	r4, #55	@ 0x37
 800e4ea:	e7de      	b.n	800e4aa <_strtol_l.constprop.0+0x72>
 800e4ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e4f0:	2f19      	cmp	r7, #25
 800e4f2:	d804      	bhi.n	800e4fe <_strtol_l.constprop.0+0xc6>
 800e4f4:	3c57      	subs	r4, #87	@ 0x57
 800e4f6:	e7d8      	b.n	800e4aa <_strtol_l.constprop.0+0x72>
 800e4f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e4fc:	e7e1      	b.n	800e4c2 <_strtol_l.constprop.0+0x8a>
 800e4fe:	1c53      	adds	r3, r2, #1
 800e500:	d108      	bne.n	800e514 <_strtol_l.constprop.0+0xdc>
 800e502:	2322      	movs	r3, #34	@ 0x22
 800e504:	f8ce 3000 	str.w	r3, [lr]
 800e508:	4660      	mov	r0, ip
 800e50a:	f1b8 0f00 	cmp.w	r8, #0
 800e50e:	d0a0      	beq.n	800e452 <_strtol_l.constprop.0+0x1a>
 800e510:	1e69      	subs	r1, r5, #1
 800e512:	e006      	b.n	800e522 <_strtol_l.constprop.0+0xea>
 800e514:	b106      	cbz	r6, 800e518 <_strtol_l.constprop.0+0xe0>
 800e516:	4240      	negs	r0, r0
 800e518:	f1b8 0f00 	cmp.w	r8, #0
 800e51c:	d099      	beq.n	800e452 <_strtol_l.constprop.0+0x1a>
 800e51e:	2a00      	cmp	r2, #0
 800e520:	d1f6      	bne.n	800e510 <_strtol_l.constprop.0+0xd8>
 800e522:	f8c8 1000 	str.w	r1, [r8]
 800e526:	e794      	b.n	800e452 <_strtol_l.constprop.0+0x1a>
 800e528:	080138a5 	.word	0x080138a5

0800e52c <_strtol_r>:
 800e52c:	f7ff bf84 	b.w	800e438 <_strtol_l.constprop.0>

0800e530 <strtol>:
 800e530:	4613      	mov	r3, r2
 800e532:	460a      	mov	r2, r1
 800e534:	4601      	mov	r1, r0
 800e536:	4802      	ldr	r0, [pc, #8]	@ (800e540 <strtol+0x10>)
 800e538:	6800      	ldr	r0, [r0, #0]
 800e53a:	f7ff bf7d 	b.w	800e438 <_strtol_l.constprop.0>
 800e53e:	bf00      	nop
 800e540:	20000198 	.word	0x20000198

0800e544 <__cvt>:
 800e544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e548:	ec57 6b10 	vmov	r6, r7, d0
 800e54c:	2f00      	cmp	r7, #0
 800e54e:	460c      	mov	r4, r1
 800e550:	4619      	mov	r1, r3
 800e552:	463b      	mov	r3, r7
 800e554:	bfbb      	ittet	lt
 800e556:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e55a:	461f      	movlt	r7, r3
 800e55c:	2300      	movge	r3, #0
 800e55e:	232d      	movlt	r3, #45	@ 0x2d
 800e560:	700b      	strb	r3, [r1, #0]
 800e562:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e564:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e568:	4691      	mov	r9, r2
 800e56a:	f023 0820 	bic.w	r8, r3, #32
 800e56e:	bfbc      	itt	lt
 800e570:	4632      	movlt	r2, r6
 800e572:	4616      	movlt	r6, r2
 800e574:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e578:	d005      	beq.n	800e586 <__cvt+0x42>
 800e57a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e57e:	d100      	bne.n	800e582 <__cvt+0x3e>
 800e580:	3401      	adds	r4, #1
 800e582:	2102      	movs	r1, #2
 800e584:	e000      	b.n	800e588 <__cvt+0x44>
 800e586:	2103      	movs	r1, #3
 800e588:	ab03      	add	r3, sp, #12
 800e58a:	9301      	str	r3, [sp, #4]
 800e58c:	ab02      	add	r3, sp, #8
 800e58e:	9300      	str	r3, [sp, #0]
 800e590:	ec47 6b10 	vmov	d0, r6, r7
 800e594:	4653      	mov	r3, sl
 800e596:	4622      	mov	r2, r4
 800e598:	f001 fa9a 	bl	800fad0 <_dtoa_r>
 800e59c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e5a0:	4605      	mov	r5, r0
 800e5a2:	d119      	bne.n	800e5d8 <__cvt+0x94>
 800e5a4:	f019 0f01 	tst.w	r9, #1
 800e5a8:	d00e      	beq.n	800e5c8 <__cvt+0x84>
 800e5aa:	eb00 0904 	add.w	r9, r0, r4
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	4630      	mov	r0, r6
 800e5b4:	4639      	mov	r1, r7
 800e5b6:	f7f2 fa87 	bl	8000ac8 <__aeabi_dcmpeq>
 800e5ba:	b108      	cbz	r0, 800e5c0 <__cvt+0x7c>
 800e5bc:	f8cd 900c 	str.w	r9, [sp, #12]
 800e5c0:	2230      	movs	r2, #48	@ 0x30
 800e5c2:	9b03      	ldr	r3, [sp, #12]
 800e5c4:	454b      	cmp	r3, r9
 800e5c6:	d31e      	bcc.n	800e606 <__cvt+0xc2>
 800e5c8:	9b03      	ldr	r3, [sp, #12]
 800e5ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5cc:	1b5b      	subs	r3, r3, r5
 800e5ce:	4628      	mov	r0, r5
 800e5d0:	6013      	str	r3, [r2, #0]
 800e5d2:	b004      	add	sp, #16
 800e5d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e5dc:	eb00 0904 	add.w	r9, r0, r4
 800e5e0:	d1e5      	bne.n	800e5ae <__cvt+0x6a>
 800e5e2:	7803      	ldrb	r3, [r0, #0]
 800e5e4:	2b30      	cmp	r3, #48	@ 0x30
 800e5e6:	d10a      	bne.n	800e5fe <__cvt+0xba>
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	4639      	mov	r1, r7
 800e5f0:	f7f2 fa6a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e5f4:	b918      	cbnz	r0, 800e5fe <__cvt+0xba>
 800e5f6:	f1c4 0401 	rsb	r4, r4, #1
 800e5fa:	f8ca 4000 	str.w	r4, [sl]
 800e5fe:	f8da 3000 	ldr.w	r3, [sl]
 800e602:	4499      	add	r9, r3
 800e604:	e7d3      	b.n	800e5ae <__cvt+0x6a>
 800e606:	1c59      	adds	r1, r3, #1
 800e608:	9103      	str	r1, [sp, #12]
 800e60a:	701a      	strb	r2, [r3, #0]
 800e60c:	e7d9      	b.n	800e5c2 <__cvt+0x7e>

0800e60e <__exponent>:
 800e60e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e610:	2900      	cmp	r1, #0
 800e612:	bfba      	itte	lt
 800e614:	4249      	neglt	r1, r1
 800e616:	232d      	movlt	r3, #45	@ 0x2d
 800e618:	232b      	movge	r3, #43	@ 0x2b
 800e61a:	2909      	cmp	r1, #9
 800e61c:	7002      	strb	r2, [r0, #0]
 800e61e:	7043      	strb	r3, [r0, #1]
 800e620:	dd29      	ble.n	800e676 <__exponent+0x68>
 800e622:	f10d 0307 	add.w	r3, sp, #7
 800e626:	461d      	mov	r5, r3
 800e628:	270a      	movs	r7, #10
 800e62a:	461a      	mov	r2, r3
 800e62c:	fbb1 f6f7 	udiv	r6, r1, r7
 800e630:	fb07 1416 	mls	r4, r7, r6, r1
 800e634:	3430      	adds	r4, #48	@ 0x30
 800e636:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e63a:	460c      	mov	r4, r1
 800e63c:	2c63      	cmp	r4, #99	@ 0x63
 800e63e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e642:	4631      	mov	r1, r6
 800e644:	dcf1      	bgt.n	800e62a <__exponent+0x1c>
 800e646:	3130      	adds	r1, #48	@ 0x30
 800e648:	1e94      	subs	r4, r2, #2
 800e64a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e64e:	1c41      	adds	r1, r0, #1
 800e650:	4623      	mov	r3, r4
 800e652:	42ab      	cmp	r3, r5
 800e654:	d30a      	bcc.n	800e66c <__exponent+0x5e>
 800e656:	f10d 0309 	add.w	r3, sp, #9
 800e65a:	1a9b      	subs	r3, r3, r2
 800e65c:	42ac      	cmp	r4, r5
 800e65e:	bf88      	it	hi
 800e660:	2300      	movhi	r3, #0
 800e662:	3302      	adds	r3, #2
 800e664:	4403      	add	r3, r0
 800e666:	1a18      	subs	r0, r3, r0
 800e668:	b003      	add	sp, #12
 800e66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e66c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e670:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e674:	e7ed      	b.n	800e652 <__exponent+0x44>
 800e676:	2330      	movs	r3, #48	@ 0x30
 800e678:	3130      	adds	r1, #48	@ 0x30
 800e67a:	7083      	strb	r3, [r0, #2]
 800e67c:	70c1      	strb	r1, [r0, #3]
 800e67e:	1d03      	adds	r3, r0, #4
 800e680:	e7f1      	b.n	800e666 <__exponent+0x58>
	...

0800e684 <_printf_float>:
 800e684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e688:	b08d      	sub	sp, #52	@ 0x34
 800e68a:	460c      	mov	r4, r1
 800e68c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e690:	4616      	mov	r6, r2
 800e692:	461f      	mov	r7, r3
 800e694:	4605      	mov	r5, r0
 800e696:	f001 f907 	bl	800f8a8 <_localeconv_r>
 800e69a:	6803      	ldr	r3, [r0, #0]
 800e69c:	9304      	str	r3, [sp, #16]
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7f1 fde6 	bl	8000270 <strlen>
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6a8:	f8d8 3000 	ldr.w	r3, [r8]
 800e6ac:	9005      	str	r0, [sp, #20]
 800e6ae:	3307      	adds	r3, #7
 800e6b0:	f023 0307 	bic.w	r3, r3, #7
 800e6b4:	f103 0208 	add.w	r2, r3, #8
 800e6b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e6bc:	f8d4 b000 	ldr.w	fp, [r4]
 800e6c0:	f8c8 2000 	str.w	r2, [r8]
 800e6c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e6c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e6cc:	9307      	str	r3, [sp, #28]
 800e6ce:	f8cd 8018 	str.w	r8, [sp, #24]
 800e6d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e6d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6da:	4b9c      	ldr	r3, [pc, #624]	@ (800e94c <_printf_float+0x2c8>)
 800e6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e6e0:	f7f2 fa24 	bl	8000b2c <__aeabi_dcmpun>
 800e6e4:	bb70      	cbnz	r0, 800e744 <_printf_float+0xc0>
 800e6e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6ea:	4b98      	ldr	r3, [pc, #608]	@ (800e94c <_printf_float+0x2c8>)
 800e6ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e6f0:	f7f2 f9fe 	bl	8000af0 <__aeabi_dcmple>
 800e6f4:	bb30      	cbnz	r0, 800e744 <_printf_float+0xc0>
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	4640      	mov	r0, r8
 800e6fc:	4649      	mov	r1, r9
 800e6fe:	f7f2 f9ed 	bl	8000adc <__aeabi_dcmplt>
 800e702:	b110      	cbz	r0, 800e70a <_printf_float+0x86>
 800e704:	232d      	movs	r3, #45	@ 0x2d
 800e706:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e70a:	4a91      	ldr	r2, [pc, #580]	@ (800e950 <_printf_float+0x2cc>)
 800e70c:	4b91      	ldr	r3, [pc, #580]	@ (800e954 <_printf_float+0x2d0>)
 800e70e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e712:	bf94      	ite	ls
 800e714:	4690      	movls	r8, r2
 800e716:	4698      	movhi	r8, r3
 800e718:	2303      	movs	r3, #3
 800e71a:	6123      	str	r3, [r4, #16]
 800e71c:	f02b 0304 	bic.w	r3, fp, #4
 800e720:	6023      	str	r3, [r4, #0]
 800e722:	f04f 0900 	mov.w	r9, #0
 800e726:	9700      	str	r7, [sp, #0]
 800e728:	4633      	mov	r3, r6
 800e72a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e72c:	4621      	mov	r1, r4
 800e72e:	4628      	mov	r0, r5
 800e730:	f000 f9d2 	bl	800ead8 <_printf_common>
 800e734:	3001      	adds	r0, #1
 800e736:	f040 808d 	bne.w	800e854 <_printf_float+0x1d0>
 800e73a:	f04f 30ff 	mov.w	r0, #4294967295
 800e73e:	b00d      	add	sp, #52	@ 0x34
 800e740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e744:	4642      	mov	r2, r8
 800e746:	464b      	mov	r3, r9
 800e748:	4640      	mov	r0, r8
 800e74a:	4649      	mov	r1, r9
 800e74c:	f7f2 f9ee 	bl	8000b2c <__aeabi_dcmpun>
 800e750:	b140      	cbz	r0, 800e764 <_printf_float+0xe0>
 800e752:	464b      	mov	r3, r9
 800e754:	2b00      	cmp	r3, #0
 800e756:	bfbc      	itt	lt
 800e758:	232d      	movlt	r3, #45	@ 0x2d
 800e75a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e75e:	4a7e      	ldr	r2, [pc, #504]	@ (800e958 <_printf_float+0x2d4>)
 800e760:	4b7e      	ldr	r3, [pc, #504]	@ (800e95c <_printf_float+0x2d8>)
 800e762:	e7d4      	b.n	800e70e <_printf_float+0x8a>
 800e764:	6863      	ldr	r3, [r4, #4]
 800e766:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e76a:	9206      	str	r2, [sp, #24]
 800e76c:	1c5a      	adds	r2, r3, #1
 800e76e:	d13b      	bne.n	800e7e8 <_printf_float+0x164>
 800e770:	2306      	movs	r3, #6
 800e772:	6063      	str	r3, [r4, #4]
 800e774:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e778:	2300      	movs	r3, #0
 800e77a:	6022      	str	r2, [r4, #0]
 800e77c:	9303      	str	r3, [sp, #12]
 800e77e:	ab0a      	add	r3, sp, #40	@ 0x28
 800e780:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e784:	ab09      	add	r3, sp, #36	@ 0x24
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	6861      	ldr	r1, [r4, #4]
 800e78a:	ec49 8b10 	vmov	d0, r8, r9
 800e78e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e792:	4628      	mov	r0, r5
 800e794:	f7ff fed6 	bl	800e544 <__cvt>
 800e798:	9b06      	ldr	r3, [sp, #24]
 800e79a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e79c:	2b47      	cmp	r3, #71	@ 0x47
 800e79e:	4680      	mov	r8, r0
 800e7a0:	d129      	bne.n	800e7f6 <_printf_float+0x172>
 800e7a2:	1cc8      	adds	r0, r1, #3
 800e7a4:	db02      	blt.n	800e7ac <_printf_float+0x128>
 800e7a6:	6863      	ldr	r3, [r4, #4]
 800e7a8:	4299      	cmp	r1, r3
 800e7aa:	dd41      	ble.n	800e830 <_printf_float+0x1ac>
 800e7ac:	f1aa 0a02 	sub.w	sl, sl, #2
 800e7b0:	fa5f fa8a 	uxtb.w	sl, sl
 800e7b4:	3901      	subs	r1, #1
 800e7b6:	4652      	mov	r2, sl
 800e7b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e7bc:	9109      	str	r1, [sp, #36]	@ 0x24
 800e7be:	f7ff ff26 	bl	800e60e <__exponent>
 800e7c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e7c4:	1813      	adds	r3, r2, r0
 800e7c6:	2a01      	cmp	r2, #1
 800e7c8:	4681      	mov	r9, r0
 800e7ca:	6123      	str	r3, [r4, #16]
 800e7cc:	dc02      	bgt.n	800e7d4 <_printf_float+0x150>
 800e7ce:	6822      	ldr	r2, [r4, #0]
 800e7d0:	07d2      	lsls	r2, r2, #31
 800e7d2:	d501      	bpl.n	800e7d8 <_printf_float+0x154>
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	6123      	str	r3, [r4, #16]
 800e7d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d0a2      	beq.n	800e726 <_printf_float+0xa2>
 800e7e0:	232d      	movs	r3, #45	@ 0x2d
 800e7e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e7e6:	e79e      	b.n	800e726 <_printf_float+0xa2>
 800e7e8:	9a06      	ldr	r2, [sp, #24]
 800e7ea:	2a47      	cmp	r2, #71	@ 0x47
 800e7ec:	d1c2      	bne.n	800e774 <_printf_float+0xf0>
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d1c0      	bne.n	800e774 <_printf_float+0xf0>
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	e7bd      	b.n	800e772 <_printf_float+0xee>
 800e7f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e7fa:	d9db      	bls.n	800e7b4 <_printf_float+0x130>
 800e7fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e800:	d118      	bne.n	800e834 <_printf_float+0x1b0>
 800e802:	2900      	cmp	r1, #0
 800e804:	6863      	ldr	r3, [r4, #4]
 800e806:	dd0b      	ble.n	800e820 <_printf_float+0x19c>
 800e808:	6121      	str	r1, [r4, #16]
 800e80a:	b913      	cbnz	r3, 800e812 <_printf_float+0x18e>
 800e80c:	6822      	ldr	r2, [r4, #0]
 800e80e:	07d0      	lsls	r0, r2, #31
 800e810:	d502      	bpl.n	800e818 <_printf_float+0x194>
 800e812:	3301      	adds	r3, #1
 800e814:	440b      	add	r3, r1
 800e816:	6123      	str	r3, [r4, #16]
 800e818:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e81a:	f04f 0900 	mov.w	r9, #0
 800e81e:	e7db      	b.n	800e7d8 <_printf_float+0x154>
 800e820:	b913      	cbnz	r3, 800e828 <_printf_float+0x1a4>
 800e822:	6822      	ldr	r2, [r4, #0]
 800e824:	07d2      	lsls	r2, r2, #31
 800e826:	d501      	bpl.n	800e82c <_printf_float+0x1a8>
 800e828:	3302      	adds	r3, #2
 800e82a:	e7f4      	b.n	800e816 <_printf_float+0x192>
 800e82c:	2301      	movs	r3, #1
 800e82e:	e7f2      	b.n	800e816 <_printf_float+0x192>
 800e830:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e836:	4299      	cmp	r1, r3
 800e838:	db05      	blt.n	800e846 <_printf_float+0x1c2>
 800e83a:	6823      	ldr	r3, [r4, #0]
 800e83c:	6121      	str	r1, [r4, #16]
 800e83e:	07d8      	lsls	r0, r3, #31
 800e840:	d5ea      	bpl.n	800e818 <_printf_float+0x194>
 800e842:	1c4b      	adds	r3, r1, #1
 800e844:	e7e7      	b.n	800e816 <_printf_float+0x192>
 800e846:	2900      	cmp	r1, #0
 800e848:	bfd4      	ite	le
 800e84a:	f1c1 0202 	rsble	r2, r1, #2
 800e84e:	2201      	movgt	r2, #1
 800e850:	4413      	add	r3, r2
 800e852:	e7e0      	b.n	800e816 <_printf_float+0x192>
 800e854:	6823      	ldr	r3, [r4, #0]
 800e856:	055a      	lsls	r2, r3, #21
 800e858:	d407      	bmi.n	800e86a <_printf_float+0x1e6>
 800e85a:	6923      	ldr	r3, [r4, #16]
 800e85c:	4642      	mov	r2, r8
 800e85e:	4631      	mov	r1, r6
 800e860:	4628      	mov	r0, r5
 800e862:	47b8      	blx	r7
 800e864:	3001      	adds	r0, #1
 800e866:	d12b      	bne.n	800e8c0 <_printf_float+0x23c>
 800e868:	e767      	b.n	800e73a <_printf_float+0xb6>
 800e86a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e86e:	f240 80dd 	bls.w	800ea2c <_printf_float+0x3a8>
 800e872:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e876:	2200      	movs	r2, #0
 800e878:	2300      	movs	r3, #0
 800e87a:	f7f2 f925 	bl	8000ac8 <__aeabi_dcmpeq>
 800e87e:	2800      	cmp	r0, #0
 800e880:	d033      	beq.n	800e8ea <_printf_float+0x266>
 800e882:	4a37      	ldr	r2, [pc, #220]	@ (800e960 <_printf_float+0x2dc>)
 800e884:	2301      	movs	r3, #1
 800e886:	4631      	mov	r1, r6
 800e888:	4628      	mov	r0, r5
 800e88a:	47b8      	blx	r7
 800e88c:	3001      	adds	r0, #1
 800e88e:	f43f af54 	beq.w	800e73a <_printf_float+0xb6>
 800e892:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e896:	4543      	cmp	r3, r8
 800e898:	db02      	blt.n	800e8a0 <_printf_float+0x21c>
 800e89a:	6823      	ldr	r3, [r4, #0]
 800e89c:	07d8      	lsls	r0, r3, #31
 800e89e:	d50f      	bpl.n	800e8c0 <_printf_float+0x23c>
 800e8a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8a4:	4631      	mov	r1, r6
 800e8a6:	4628      	mov	r0, r5
 800e8a8:	47b8      	blx	r7
 800e8aa:	3001      	adds	r0, #1
 800e8ac:	f43f af45 	beq.w	800e73a <_printf_float+0xb6>
 800e8b0:	f04f 0900 	mov.w	r9, #0
 800e8b4:	f108 38ff 	add.w	r8, r8, #4294967295
 800e8b8:	f104 0a1a 	add.w	sl, r4, #26
 800e8bc:	45c8      	cmp	r8, r9
 800e8be:	dc09      	bgt.n	800e8d4 <_printf_float+0x250>
 800e8c0:	6823      	ldr	r3, [r4, #0]
 800e8c2:	079b      	lsls	r3, r3, #30
 800e8c4:	f100 8103 	bmi.w	800eace <_printf_float+0x44a>
 800e8c8:	68e0      	ldr	r0, [r4, #12]
 800e8ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8cc:	4298      	cmp	r0, r3
 800e8ce:	bfb8      	it	lt
 800e8d0:	4618      	movlt	r0, r3
 800e8d2:	e734      	b.n	800e73e <_printf_float+0xba>
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	4652      	mov	r2, sl
 800e8d8:	4631      	mov	r1, r6
 800e8da:	4628      	mov	r0, r5
 800e8dc:	47b8      	blx	r7
 800e8de:	3001      	adds	r0, #1
 800e8e0:	f43f af2b 	beq.w	800e73a <_printf_float+0xb6>
 800e8e4:	f109 0901 	add.w	r9, r9, #1
 800e8e8:	e7e8      	b.n	800e8bc <_printf_float+0x238>
 800e8ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	dc39      	bgt.n	800e964 <_printf_float+0x2e0>
 800e8f0:	4a1b      	ldr	r2, [pc, #108]	@ (800e960 <_printf_float+0x2dc>)
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	4631      	mov	r1, r6
 800e8f6:	4628      	mov	r0, r5
 800e8f8:	47b8      	blx	r7
 800e8fa:	3001      	adds	r0, #1
 800e8fc:	f43f af1d 	beq.w	800e73a <_printf_float+0xb6>
 800e900:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e904:	ea59 0303 	orrs.w	r3, r9, r3
 800e908:	d102      	bne.n	800e910 <_printf_float+0x28c>
 800e90a:	6823      	ldr	r3, [r4, #0]
 800e90c:	07d9      	lsls	r1, r3, #31
 800e90e:	d5d7      	bpl.n	800e8c0 <_printf_float+0x23c>
 800e910:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e914:	4631      	mov	r1, r6
 800e916:	4628      	mov	r0, r5
 800e918:	47b8      	blx	r7
 800e91a:	3001      	adds	r0, #1
 800e91c:	f43f af0d 	beq.w	800e73a <_printf_float+0xb6>
 800e920:	f04f 0a00 	mov.w	sl, #0
 800e924:	f104 0b1a 	add.w	fp, r4, #26
 800e928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e92a:	425b      	negs	r3, r3
 800e92c:	4553      	cmp	r3, sl
 800e92e:	dc01      	bgt.n	800e934 <_printf_float+0x2b0>
 800e930:	464b      	mov	r3, r9
 800e932:	e793      	b.n	800e85c <_printf_float+0x1d8>
 800e934:	2301      	movs	r3, #1
 800e936:	465a      	mov	r2, fp
 800e938:	4631      	mov	r1, r6
 800e93a:	4628      	mov	r0, r5
 800e93c:	47b8      	blx	r7
 800e93e:	3001      	adds	r0, #1
 800e940:	f43f aefb 	beq.w	800e73a <_printf_float+0xb6>
 800e944:	f10a 0a01 	add.w	sl, sl, #1
 800e948:	e7ee      	b.n	800e928 <_printf_float+0x2a4>
 800e94a:	bf00      	nop
 800e94c:	7fefffff 	.word	0x7fefffff
 800e950:	080139a5 	.word	0x080139a5
 800e954:	080139a9 	.word	0x080139a9
 800e958:	080139ad 	.word	0x080139ad
 800e95c:	080139b1 	.word	0x080139b1
 800e960:	08013c3f 	.word	0x08013c3f
 800e964:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e966:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e96a:	4553      	cmp	r3, sl
 800e96c:	bfa8      	it	ge
 800e96e:	4653      	movge	r3, sl
 800e970:	2b00      	cmp	r3, #0
 800e972:	4699      	mov	r9, r3
 800e974:	dc36      	bgt.n	800e9e4 <_printf_float+0x360>
 800e976:	f04f 0b00 	mov.w	fp, #0
 800e97a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e97e:	f104 021a 	add.w	r2, r4, #26
 800e982:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e984:	9306      	str	r3, [sp, #24]
 800e986:	eba3 0309 	sub.w	r3, r3, r9
 800e98a:	455b      	cmp	r3, fp
 800e98c:	dc31      	bgt.n	800e9f2 <_printf_float+0x36e>
 800e98e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e990:	459a      	cmp	sl, r3
 800e992:	dc3a      	bgt.n	800ea0a <_printf_float+0x386>
 800e994:	6823      	ldr	r3, [r4, #0]
 800e996:	07da      	lsls	r2, r3, #31
 800e998:	d437      	bmi.n	800ea0a <_printf_float+0x386>
 800e99a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e99c:	ebaa 0903 	sub.w	r9, sl, r3
 800e9a0:	9b06      	ldr	r3, [sp, #24]
 800e9a2:	ebaa 0303 	sub.w	r3, sl, r3
 800e9a6:	4599      	cmp	r9, r3
 800e9a8:	bfa8      	it	ge
 800e9aa:	4699      	movge	r9, r3
 800e9ac:	f1b9 0f00 	cmp.w	r9, #0
 800e9b0:	dc33      	bgt.n	800ea1a <_printf_float+0x396>
 800e9b2:	f04f 0800 	mov.w	r8, #0
 800e9b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e9ba:	f104 0b1a 	add.w	fp, r4, #26
 800e9be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9c0:	ebaa 0303 	sub.w	r3, sl, r3
 800e9c4:	eba3 0309 	sub.w	r3, r3, r9
 800e9c8:	4543      	cmp	r3, r8
 800e9ca:	f77f af79 	ble.w	800e8c0 <_printf_float+0x23c>
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	465a      	mov	r2, fp
 800e9d2:	4631      	mov	r1, r6
 800e9d4:	4628      	mov	r0, r5
 800e9d6:	47b8      	blx	r7
 800e9d8:	3001      	adds	r0, #1
 800e9da:	f43f aeae 	beq.w	800e73a <_printf_float+0xb6>
 800e9de:	f108 0801 	add.w	r8, r8, #1
 800e9e2:	e7ec      	b.n	800e9be <_printf_float+0x33a>
 800e9e4:	4642      	mov	r2, r8
 800e9e6:	4631      	mov	r1, r6
 800e9e8:	4628      	mov	r0, r5
 800e9ea:	47b8      	blx	r7
 800e9ec:	3001      	adds	r0, #1
 800e9ee:	d1c2      	bne.n	800e976 <_printf_float+0x2f2>
 800e9f0:	e6a3      	b.n	800e73a <_printf_float+0xb6>
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	4631      	mov	r1, r6
 800e9f6:	4628      	mov	r0, r5
 800e9f8:	9206      	str	r2, [sp, #24]
 800e9fa:	47b8      	blx	r7
 800e9fc:	3001      	adds	r0, #1
 800e9fe:	f43f ae9c 	beq.w	800e73a <_printf_float+0xb6>
 800ea02:	9a06      	ldr	r2, [sp, #24]
 800ea04:	f10b 0b01 	add.w	fp, fp, #1
 800ea08:	e7bb      	b.n	800e982 <_printf_float+0x2fe>
 800ea0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea0e:	4631      	mov	r1, r6
 800ea10:	4628      	mov	r0, r5
 800ea12:	47b8      	blx	r7
 800ea14:	3001      	adds	r0, #1
 800ea16:	d1c0      	bne.n	800e99a <_printf_float+0x316>
 800ea18:	e68f      	b.n	800e73a <_printf_float+0xb6>
 800ea1a:	9a06      	ldr	r2, [sp, #24]
 800ea1c:	464b      	mov	r3, r9
 800ea1e:	4442      	add	r2, r8
 800ea20:	4631      	mov	r1, r6
 800ea22:	4628      	mov	r0, r5
 800ea24:	47b8      	blx	r7
 800ea26:	3001      	adds	r0, #1
 800ea28:	d1c3      	bne.n	800e9b2 <_printf_float+0x32e>
 800ea2a:	e686      	b.n	800e73a <_printf_float+0xb6>
 800ea2c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ea30:	f1ba 0f01 	cmp.w	sl, #1
 800ea34:	dc01      	bgt.n	800ea3a <_printf_float+0x3b6>
 800ea36:	07db      	lsls	r3, r3, #31
 800ea38:	d536      	bpl.n	800eaa8 <_printf_float+0x424>
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	4642      	mov	r2, r8
 800ea3e:	4631      	mov	r1, r6
 800ea40:	4628      	mov	r0, r5
 800ea42:	47b8      	blx	r7
 800ea44:	3001      	adds	r0, #1
 800ea46:	f43f ae78 	beq.w	800e73a <_printf_float+0xb6>
 800ea4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea4e:	4631      	mov	r1, r6
 800ea50:	4628      	mov	r0, r5
 800ea52:	47b8      	blx	r7
 800ea54:	3001      	adds	r0, #1
 800ea56:	f43f ae70 	beq.w	800e73a <_printf_float+0xb6>
 800ea5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ea5e:	2200      	movs	r2, #0
 800ea60:	2300      	movs	r3, #0
 800ea62:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea66:	f7f2 f82f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea6a:	b9c0      	cbnz	r0, 800ea9e <_printf_float+0x41a>
 800ea6c:	4653      	mov	r3, sl
 800ea6e:	f108 0201 	add.w	r2, r8, #1
 800ea72:	4631      	mov	r1, r6
 800ea74:	4628      	mov	r0, r5
 800ea76:	47b8      	blx	r7
 800ea78:	3001      	adds	r0, #1
 800ea7a:	d10c      	bne.n	800ea96 <_printf_float+0x412>
 800ea7c:	e65d      	b.n	800e73a <_printf_float+0xb6>
 800ea7e:	2301      	movs	r3, #1
 800ea80:	465a      	mov	r2, fp
 800ea82:	4631      	mov	r1, r6
 800ea84:	4628      	mov	r0, r5
 800ea86:	47b8      	blx	r7
 800ea88:	3001      	adds	r0, #1
 800ea8a:	f43f ae56 	beq.w	800e73a <_printf_float+0xb6>
 800ea8e:	f108 0801 	add.w	r8, r8, #1
 800ea92:	45d0      	cmp	r8, sl
 800ea94:	dbf3      	blt.n	800ea7e <_printf_float+0x3fa>
 800ea96:	464b      	mov	r3, r9
 800ea98:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ea9c:	e6df      	b.n	800e85e <_printf_float+0x1da>
 800ea9e:	f04f 0800 	mov.w	r8, #0
 800eaa2:	f104 0b1a 	add.w	fp, r4, #26
 800eaa6:	e7f4      	b.n	800ea92 <_printf_float+0x40e>
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	4642      	mov	r2, r8
 800eaac:	e7e1      	b.n	800ea72 <_printf_float+0x3ee>
 800eaae:	2301      	movs	r3, #1
 800eab0:	464a      	mov	r2, r9
 800eab2:	4631      	mov	r1, r6
 800eab4:	4628      	mov	r0, r5
 800eab6:	47b8      	blx	r7
 800eab8:	3001      	adds	r0, #1
 800eaba:	f43f ae3e 	beq.w	800e73a <_printf_float+0xb6>
 800eabe:	f108 0801 	add.w	r8, r8, #1
 800eac2:	68e3      	ldr	r3, [r4, #12]
 800eac4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eac6:	1a5b      	subs	r3, r3, r1
 800eac8:	4543      	cmp	r3, r8
 800eaca:	dcf0      	bgt.n	800eaae <_printf_float+0x42a>
 800eacc:	e6fc      	b.n	800e8c8 <_printf_float+0x244>
 800eace:	f04f 0800 	mov.w	r8, #0
 800ead2:	f104 0919 	add.w	r9, r4, #25
 800ead6:	e7f4      	b.n	800eac2 <_printf_float+0x43e>

0800ead8 <_printf_common>:
 800ead8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eadc:	4616      	mov	r6, r2
 800eade:	4698      	mov	r8, r3
 800eae0:	688a      	ldr	r2, [r1, #8]
 800eae2:	690b      	ldr	r3, [r1, #16]
 800eae4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eae8:	4293      	cmp	r3, r2
 800eaea:	bfb8      	it	lt
 800eaec:	4613      	movlt	r3, r2
 800eaee:	6033      	str	r3, [r6, #0]
 800eaf0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eaf4:	4607      	mov	r7, r0
 800eaf6:	460c      	mov	r4, r1
 800eaf8:	b10a      	cbz	r2, 800eafe <_printf_common+0x26>
 800eafa:	3301      	adds	r3, #1
 800eafc:	6033      	str	r3, [r6, #0]
 800eafe:	6823      	ldr	r3, [r4, #0]
 800eb00:	0699      	lsls	r1, r3, #26
 800eb02:	bf42      	ittt	mi
 800eb04:	6833      	ldrmi	r3, [r6, #0]
 800eb06:	3302      	addmi	r3, #2
 800eb08:	6033      	strmi	r3, [r6, #0]
 800eb0a:	6825      	ldr	r5, [r4, #0]
 800eb0c:	f015 0506 	ands.w	r5, r5, #6
 800eb10:	d106      	bne.n	800eb20 <_printf_common+0x48>
 800eb12:	f104 0a19 	add.w	sl, r4, #25
 800eb16:	68e3      	ldr	r3, [r4, #12]
 800eb18:	6832      	ldr	r2, [r6, #0]
 800eb1a:	1a9b      	subs	r3, r3, r2
 800eb1c:	42ab      	cmp	r3, r5
 800eb1e:	dc26      	bgt.n	800eb6e <_printf_common+0x96>
 800eb20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eb24:	6822      	ldr	r2, [r4, #0]
 800eb26:	3b00      	subs	r3, #0
 800eb28:	bf18      	it	ne
 800eb2a:	2301      	movne	r3, #1
 800eb2c:	0692      	lsls	r2, r2, #26
 800eb2e:	d42b      	bmi.n	800eb88 <_printf_common+0xb0>
 800eb30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eb34:	4641      	mov	r1, r8
 800eb36:	4638      	mov	r0, r7
 800eb38:	47c8      	blx	r9
 800eb3a:	3001      	adds	r0, #1
 800eb3c:	d01e      	beq.n	800eb7c <_printf_common+0xa4>
 800eb3e:	6823      	ldr	r3, [r4, #0]
 800eb40:	6922      	ldr	r2, [r4, #16]
 800eb42:	f003 0306 	and.w	r3, r3, #6
 800eb46:	2b04      	cmp	r3, #4
 800eb48:	bf02      	ittt	eq
 800eb4a:	68e5      	ldreq	r5, [r4, #12]
 800eb4c:	6833      	ldreq	r3, [r6, #0]
 800eb4e:	1aed      	subeq	r5, r5, r3
 800eb50:	68a3      	ldr	r3, [r4, #8]
 800eb52:	bf0c      	ite	eq
 800eb54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb58:	2500      	movne	r5, #0
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	bfc4      	itt	gt
 800eb5e:	1a9b      	subgt	r3, r3, r2
 800eb60:	18ed      	addgt	r5, r5, r3
 800eb62:	2600      	movs	r6, #0
 800eb64:	341a      	adds	r4, #26
 800eb66:	42b5      	cmp	r5, r6
 800eb68:	d11a      	bne.n	800eba0 <_printf_common+0xc8>
 800eb6a:	2000      	movs	r0, #0
 800eb6c:	e008      	b.n	800eb80 <_printf_common+0xa8>
 800eb6e:	2301      	movs	r3, #1
 800eb70:	4652      	mov	r2, sl
 800eb72:	4641      	mov	r1, r8
 800eb74:	4638      	mov	r0, r7
 800eb76:	47c8      	blx	r9
 800eb78:	3001      	adds	r0, #1
 800eb7a:	d103      	bne.n	800eb84 <_printf_common+0xac>
 800eb7c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb84:	3501      	adds	r5, #1
 800eb86:	e7c6      	b.n	800eb16 <_printf_common+0x3e>
 800eb88:	18e1      	adds	r1, r4, r3
 800eb8a:	1c5a      	adds	r2, r3, #1
 800eb8c:	2030      	movs	r0, #48	@ 0x30
 800eb8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eb92:	4422      	add	r2, r4
 800eb94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eb98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eb9c:	3302      	adds	r3, #2
 800eb9e:	e7c7      	b.n	800eb30 <_printf_common+0x58>
 800eba0:	2301      	movs	r3, #1
 800eba2:	4622      	mov	r2, r4
 800eba4:	4641      	mov	r1, r8
 800eba6:	4638      	mov	r0, r7
 800eba8:	47c8      	blx	r9
 800ebaa:	3001      	adds	r0, #1
 800ebac:	d0e6      	beq.n	800eb7c <_printf_common+0xa4>
 800ebae:	3601      	adds	r6, #1
 800ebb0:	e7d9      	b.n	800eb66 <_printf_common+0x8e>
	...

0800ebb4 <_printf_i>:
 800ebb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebb8:	7e0f      	ldrb	r7, [r1, #24]
 800ebba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ebbc:	2f78      	cmp	r7, #120	@ 0x78
 800ebbe:	4691      	mov	r9, r2
 800ebc0:	4680      	mov	r8, r0
 800ebc2:	460c      	mov	r4, r1
 800ebc4:	469a      	mov	sl, r3
 800ebc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ebca:	d807      	bhi.n	800ebdc <_printf_i+0x28>
 800ebcc:	2f62      	cmp	r7, #98	@ 0x62
 800ebce:	d80a      	bhi.n	800ebe6 <_printf_i+0x32>
 800ebd0:	2f00      	cmp	r7, #0
 800ebd2:	f000 80d2 	beq.w	800ed7a <_printf_i+0x1c6>
 800ebd6:	2f58      	cmp	r7, #88	@ 0x58
 800ebd8:	f000 80b9 	beq.w	800ed4e <_printf_i+0x19a>
 800ebdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ebe0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ebe4:	e03a      	b.n	800ec5c <_printf_i+0xa8>
 800ebe6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ebea:	2b15      	cmp	r3, #21
 800ebec:	d8f6      	bhi.n	800ebdc <_printf_i+0x28>
 800ebee:	a101      	add	r1, pc, #4	@ (adr r1, 800ebf4 <_printf_i+0x40>)
 800ebf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ebf4:	0800ec4d 	.word	0x0800ec4d
 800ebf8:	0800ec61 	.word	0x0800ec61
 800ebfc:	0800ebdd 	.word	0x0800ebdd
 800ec00:	0800ebdd 	.word	0x0800ebdd
 800ec04:	0800ebdd 	.word	0x0800ebdd
 800ec08:	0800ebdd 	.word	0x0800ebdd
 800ec0c:	0800ec61 	.word	0x0800ec61
 800ec10:	0800ebdd 	.word	0x0800ebdd
 800ec14:	0800ebdd 	.word	0x0800ebdd
 800ec18:	0800ebdd 	.word	0x0800ebdd
 800ec1c:	0800ebdd 	.word	0x0800ebdd
 800ec20:	0800ed61 	.word	0x0800ed61
 800ec24:	0800ec8b 	.word	0x0800ec8b
 800ec28:	0800ed1b 	.word	0x0800ed1b
 800ec2c:	0800ebdd 	.word	0x0800ebdd
 800ec30:	0800ebdd 	.word	0x0800ebdd
 800ec34:	0800ed83 	.word	0x0800ed83
 800ec38:	0800ebdd 	.word	0x0800ebdd
 800ec3c:	0800ec8b 	.word	0x0800ec8b
 800ec40:	0800ebdd 	.word	0x0800ebdd
 800ec44:	0800ebdd 	.word	0x0800ebdd
 800ec48:	0800ed23 	.word	0x0800ed23
 800ec4c:	6833      	ldr	r3, [r6, #0]
 800ec4e:	1d1a      	adds	r2, r3, #4
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	6032      	str	r2, [r6, #0]
 800ec54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	e09d      	b.n	800ed9c <_printf_i+0x1e8>
 800ec60:	6833      	ldr	r3, [r6, #0]
 800ec62:	6820      	ldr	r0, [r4, #0]
 800ec64:	1d19      	adds	r1, r3, #4
 800ec66:	6031      	str	r1, [r6, #0]
 800ec68:	0606      	lsls	r6, r0, #24
 800ec6a:	d501      	bpl.n	800ec70 <_printf_i+0xbc>
 800ec6c:	681d      	ldr	r5, [r3, #0]
 800ec6e:	e003      	b.n	800ec78 <_printf_i+0xc4>
 800ec70:	0645      	lsls	r5, r0, #25
 800ec72:	d5fb      	bpl.n	800ec6c <_printf_i+0xb8>
 800ec74:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ec78:	2d00      	cmp	r5, #0
 800ec7a:	da03      	bge.n	800ec84 <_printf_i+0xd0>
 800ec7c:	232d      	movs	r3, #45	@ 0x2d
 800ec7e:	426d      	negs	r5, r5
 800ec80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec84:	4859      	ldr	r0, [pc, #356]	@ (800edec <_printf_i+0x238>)
 800ec86:	230a      	movs	r3, #10
 800ec88:	e011      	b.n	800ecae <_printf_i+0xfa>
 800ec8a:	6821      	ldr	r1, [r4, #0]
 800ec8c:	6833      	ldr	r3, [r6, #0]
 800ec8e:	0608      	lsls	r0, r1, #24
 800ec90:	f853 5b04 	ldr.w	r5, [r3], #4
 800ec94:	d402      	bmi.n	800ec9c <_printf_i+0xe8>
 800ec96:	0649      	lsls	r1, r1, #25
 800ec98:	bf48      	it	mi
 800ec9a:	b2ad      	uxthmi	r5, r5
 800ec9c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ec9e:	4853      	ldr	r0, [pc, #332]	@ (800edec <_printf_i+0x238>)
 800eca0:	6033      	str	r3, [r6, #0]
 800eca2:	bf14      	ite	ne
 800eca4:	230a      	movne	r3, #10
 800eca6:	2308      	moveq	r3, #8
 800eca8:	2100      	movs	r1, #0
 800ecaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ecae:	6866      	ldr	r6, [r4, #4]
 800ecb0:	60a6      	str	r6, [r4, #8]
 800ecb2:	2e00      	cmp	r6, #0
 800ecb4:	bfa2      	ittt	ge
 800ecb6:	6821      	ldrge	r1, [r4, #0]
 800ecb8:	f021 0104 	bicge.w	r1, r1, #4
 800ecbc:	6021      	strge	r1, [r4, #0]
 800ecbe:	b90d      	cbnz	r5, 800ecc4 <_printf_i+0x110>
 800ecc0:	2e00      	cmp	r6, #0
 800ecc2:	d04b      	beq.n	800ed5c <_printf_i+0x1a8>
 800ecc4:	4616      	mov	r6, r2
 800ecc6:	fbb5 f1f3 	udiv	r1, r5, r3
 800ecca:	fb03 5711 	mls	r7, r3, r1, r5
 800ecce:	5dc7      	ldrb	r7, [r0, r7]
 800ecd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ecd4:	462f      	mov	r7, r5
 800ecd6:	42bb      	cmp	r3, r7
 800ecd8:	460d      	mov	r5, r1
 800ecda:	d9f4      	bls.n	800ecc6 <_printf_i+0x112>
 800ecdc:	2b08      	cmp	r3, #8
 800ecde:	d10b      	bne.n	800ecf8 <_printf_i+0x144>
 800ece0:	6823      	ldr	r3, [r4, #0]
 800ece2:	07df      	lsls	r7, r3, #31
 800ece4:	d508      	bpl.n	800ecf8 <_printf_i+0x144>
 800ece6:	6923      	ldr	r3, [r4, #16]
 800ece8:	6861      	ldr	r1, [r4, #4]
 800ecea:	4299      	cmp	r1, r3
 800ecec:	bfde      	ittt	le
 800ecee:	2330      	movle	r3, #48	@ 0x30
 800ecf0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ecf4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ecf8:	1b92      	subs	r2, r2, r6
 800ecfa:	6122      	str	r2, [r4, #16]
 800ecfc:	f8cd a000 	str.w	sl, [sp]
 800ed00:	464b      	mov	r3, r9
 800ed02:	aa03      	add	r2, sp, #12
 800ed04:	4621      	mov	r1, r4
 800ed06:	4640      	mov	r0, r8
 800ed08:	f7ff fee6 	bl	800ead8 <_printf_common>
 800ed0c:	3001      	adds	r0, #1
 800ed0e:	d14a      	bne.n	800eda6 <_printf_i+0x1f2>
 800ed10:	f04f 30ff 	mov.w	r0, #4294967295
 800ed14:	b004      	add	sp, #16
 800ed16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed1a:	6823      	ldr	r3, [r4, #0]
 800ed1c:	f043 0320 	orr.w	r3, r3, #32
 800ed20:	6023      	str	r3, [r4, #0]
 800ed22:	4833      	ldr	r0, [pc, #204]	@ (800edf0 <_printf_i+0x23c>)
 800ed24:	2778      	movs	r7, #120	@ 0x78
 800ed26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ed2a:	6823      	ldr	r3, [r4, #0]
 800ed2c:	6831      	ldr	r1, [r6, #0]
 800ed2e:	061f      	lsls	r7, r3, #24
 800ed30:	f851 5b04 	ldr.w	r5, [r1], #4
 800ed34:	d402      	bmi.n	800ed3c <_printf_i+0x188>
 800ed36:	065f      	lsls	r7, r3, #25
 800ed38:	bf48      	it	mi
 800ed3a:	b2ad      	uxthmi	r5, r5
 800ed3c:	6031      	str	r1, [r6, #0]
 800ed3e:	07d9      	lsls	r1, r3, #31
 800ed40:	bf44      	itt	mi
 800ed42:	f043 0320 	orrmi.w	r3, r3, #32
 800ed46:	6023      	strmi	r3, [r4, #0]
 800ed48:	b11d      	cbz	r5, 800ed52 <_printf_i+0x19e>
 800ed4a:	2310      	movs	r3, #16
 800ed4c:	e7ac      	b.n	800eca8 <_printf_i+0xf4>
 800ed4e:	4827      	ldr	r0, [pc, #156]	@ (800edec <_printf_i+0x238>)
 800ed50:	e7e9      	b.n	800ed26 <_printf_i+0x172>
 800ed52:	6823      	ldr	r3, [r4, #0]
 800ed54:	f023 0320 	bic.w	r3, r3, #32
 800ed58:	6023      	str	r3, [r4, #0]
 800ed5a:	e7f6      	b.n	800ed4a <_printf_i+0x196>
 800ed5c:	4616      	mov	r6, r2
 800ed5e:	e7bd      	b.n	800ecdc <_printf_i+0x128>
 800ed60:	6833      	ldr	r3, [r6, #0]
 800ed62:	6825      	ldr	r5, [r4, #0]
 800ed64:	6961      	ldr	r1, [r4, #20]
 800ed66:	1d18      	adds	r0, r3, #4
 800ed68:	6030      	str	r0, [r6, #0]
 800ed6a:	062e      	lsls	r6, r5, #24
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	d501      	bpl.n	800ed74 <_printf_i+0x1c0>
 800ed70:	6019      	str	r1, [r3, #0]
 800ed72:	e002      	b.n	800ed7a <_printf_i+0x1c6>
 800ed74:	0668      	lsls	r0, r5, #25
 800ed76:	d5fb      	bpl.n	800ed70 <_printf_i+0x1bc>
 800ed78:	8019      	strh	r1, [r3, #0]
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	6123      	str	r3, [r4, #16]
 800ed7e:	4616      	mov	r6, r2
 800ed80:	e7bc      	b.n	800ecfc <_printf_i+0x148>
 800ed82:	6833      	ldr	r3, [r6, #0]
 800ed84:	1d1a      	adds	r2, r3, #4
 800ed86:	6032      	str	r2, [r6, #0]
 800ed88:	681e      	ldr	r6, [r3, #0]
 800ed8a:	6862      	ldr	r2, [r4, #4]
 800ed8c:	2100      	movs	r1, #0
 800ed8e:	4630      	mov	r0, r6
 800ed90:	f7f1 fa1e 	bl	80001d0 <memchr>
 800ed94:	b108      	cbz	r0, 800ed9a <_printf_i+0x1e6>
 800ed96:	1b80      	subs	r0, r0, r6
 800ed98:	6060      	str	r0, [r4, #4]
 800ed9a:	6863      	ldr	r3, [r4, #4]
 800ed9c:	6123      	str	r3, [r4, #16]
 800ed9e:	2300      	movs	r3, #0
 800eda0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eda4:	e7aa      	b.n	800ecfc <_printf_i+0x148>
 800eda6:	6923      	ldr	r3, [r4, #16]
 800eda8:	4632      	mov	r2, r6
 800edaa:	4649      	mov	r1, r9
 800edac:	4640      	mov	r0, r8
 800edae:	47d0      	blx	sl
 800edb0:	3001      	adds	r0, #1
 800edb2:	d0ad      	beq.n	800ed10 <_printf_i+0x15c>
 800edb4:	6823      	ldr	r3, [r4, #0]
 800edb6:	079b      	lsls	r3, r3, #30
 800edb8:	d413      	bmi.n	800ede2 <_printf_i+0x22e>
 800edba:	68e0      	ldr	r0, [r4, #12]
 800edbc:	9b03      	ldr	r3, [sp, #12]
 800edbe:	4298      	cmp	r0, r3
 800edc0:	bfb8      	it	lt
 800edc2:	4618      	movlt	r0, r3
 800edc4:	e7a6      	b.n	800ed14 <_printf_i+0x160>
 800edc6:	2301      	movs	r3, #1
 800edc8:	4632      	mov	r2, r6
 800edca:	4649      	mov	r1, r9
 800edcc:	4640      	mov	r0, r8
 800edce:	47d0      	blx	sl
 800edd0:	3001      	adds	r0, #1
 800edd2:	d09d      	beq.n	800ed10 <_printf_i+0x15c>
 800edd4:	3501      	adds	r5, #1
 800edd6:	68e3      	ldr	r3, [r4, #12]
 800edd8:	9903      	ldr	r1, [sp, #12]
 800edda:	1a5b      	subs	r3, r3, r1
 800eddc:	42ab      	cmp	r3, r5
 800edde:	dcf2      	bgt.n	800edc6 <_printf_i+0x212>
 800ede0:	e7eb      	b.n	800edba <_printf_i+0x206>
 800ede2:	2500      	movs	r5, #0
 800ede4:	f104 0619 	add.w	r6, r4, #25
 800ede8:	e7f5      	b.n	800edd6 <_printf_i+0x222>
 800edea:	bf00      	nop
 800edec:	080139b5 	.word	0x080139b5
 800edf0:	080139c6 	.word	0x080139c6

0800edf4 <_scanf_float>:
 800edf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf8:	b087      	sub	sp, #28
 800edfa:	4617      	mov	r7, r2
 800edfc:	9303      	str	r3, [sp, #12]
 800edfe:	688b      	ldr	r3, [r1, #8]
 800ee00:	1e5a      	subs	r2, r3, #1
 800ee02:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ee06:	bf81      	itttt	hi
 800ee08:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ee0c:	eb03 0b05 	addhi.w	fp, r3, r5
 800ee10:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ee14:	608b      	strhi	r3, [r1, #8]
 800ee16:	680b      	ldr	r3, [r1, #0]
 800ee18:	460a      	mov	r2, r1
 800ee1a:	f04f 0500 	mov.w	r5, #0
 800ee1e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ee22:	f842 3b1c 	str.w	r3, [r2], #28
 800ee26:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ee2a:	4680      	mov	r8, r0
 800ee2c:	460c      	mov	r4, r1
 800ee2e:	bf98      	it	ls
 800ee30:	f04f 0b00 	movls.w	fp, #0
 800ee34:	9201      	str	r2, [sp, #4]
 800ee36:	4616      	mov	r6, r2
 800ee38:	46aa      	mov	sl, r5
 800ee3a:	46a9      	mov	r9, r5
 800ee3c:	9502      	str	r5, [sp, #8]
 800ee3e:	68a2      	ldr	r2, [r4, #8]
 800ee40:	b152      	cbz	r2, 800ee58 <_scanf_float+0x64>
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	781b      	ldrb	r3, [r3, #0]
 800ee46:	2b4e      	cmp	r3, #78	@ 0x4e
 800ee48:	d864      	bhi.n	800ef14 <_scanf_float+0x120>
 800ee4a:	2b40      	cmp	r3, #64	@ 0x40
 800ee4c:	d83c      	bhi.n	800eec8 <_scanf_float+0xd4>
 800ee4e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ee52:	b2c8      	uxtb	r0, r1
 800ee54:	280e      	cmp	r0, #14
 800ee56:	d93a      	bls.n	800eece <_scanf_float+0xda>
 800ee58:	f1b9 0f00 	cmp.w	r9, #0
 800ee5c:	d003      	beq.n	800ee66 <_scanf_float+0x72>
 800ee5e:	6823      	ldr	r3, [r4, #0]
 800ee60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ee64:	6023      	str	r3, [r4, #0]
 800ee66:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee6a:	f1ba 0f01 	cmp.w	sl, #1
 800ee6e:	f200 8117 	bhi.w	800f0a0 <_scanf_float+0x2ac>
 800ee72:	9b01      	ldr	r3, [sp, #4]
 800ee74:	429e      	cmp	r6, r3
 800ee76:	f200 8108 	bhi.w	800f08a <_scanf_float+0x296>
 800ee7a:	2001      	movs	r0, #1
 800ee7c:	b007      	add	sp, #28
 800ee7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee82:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ee86:	2a0d      	cmp	r2, #13
 800ee88:	d8e6      	bhi.n	800ee58 <_scanf_float+0x64>
 800ee8a:	a101      	add	r1, pc, #4	@ (adr r1, 800ee90 <_scanf_float+0x9c>)
 800ee8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ee90:	0800efd7 	.word	0x0800efd7
 800ee94:	0800ee59 	.word	0x0800ee59
 800ee98:	0800ee59 	.word	0x0800ee59
 800ee9c:	0800ee59 	.word	0x0800ee59
 800eea0:	0800f037 	.word	0x0800f037
 800eea4:	0800f00f 	.word	0x0800f00f
 800eea8:	0800ee59 	.word	0x0800ee59
 800eeac:	0800ee59 	.word	0x0800ee59
 800eeb0:	0800efe5 	.word	0x0800efe5
 800eeb4:	0800ee59 	.word	0x0800ee59
 800eeb8:	0800ee59 	.word	0x0800ee59
 800eebc:	0800ee59 	.word	0x0800ee59
 800eec0:	0800ee59 	.word	0x0800ee59
 800eec4:	0800ef9d 	.word	0x0800ef9d
 800eec8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800eecc:	e7db      	b.n	800ee86 <_scanf_float+0x92>
 800eece:	290e      	cmp	r1, #14
 800eed0:	d8c2      	bhi.n	800ee58 <_scanf_float+0x64>
 800eed2:	a001      	add	r0, pc, #4	@ (adr r0, 800eed8 <_scanf_float+0xe4>)
 800eed4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800eed8:	0800ef8d 	.word	0x0800ef8d
 800eedc:	0800ee59 	.word	0x0800ee59
 800eee0:	0800ef8d 	.word	0x0800ef8d
 800eee4:	0800f023 	.word	0x0800f023
 800eee8:	0800ee59 	.word	0x0800ee59
 800eeec:	0800ef35 	.word	0x0800ef35
 800eef0:	0800ef73 	.word	0x0800ef73
 800eef4:	0800ef73 	.word	0x0800ef73
 800eef8:	0800ef73 	.word	0x0800ef73
 800eefc:	0800ef73 	.word	0x0800ef73
 800ef00:	0800ef73 	.word	0x0800ef73
 800ef04:	0800ef73 	.word	0x0800ef73
 800ef08:	0800ef73 	.word	0x0800ef73
 800ef0c:	0800ef73 	.word	0x0800ef73
 800ef10:	0800ef73 	.word	0x0800ef73
 800ef14:	2b6e      	cmp	r3, #110	@ 0x6e
 800ef16:	d809      	bhi.n	800ef2c <_scanf_float+0x138>
 800ef18:	2b60      	cmp	r3, #96	@ 0x60
 800ef1a:	d8b2      	bhi.n	800ee82 <_scanf_float+0x8e>
 800ef1c:	2b54      	cmp	r3, #84	@ 0x54
 800ef1e:	d07b      	beq.n	800f018 <_scanf_float+0x224>
 800ef20:	2b59      	cmp	r3, #89	@ 0x59
 800ef22:	d199      	bne.n	800ee58 <_scanf_float+0x64>
 800ef24:	2d07      	cmp	r5, #7
 800ef26:	d197      	bne.n	800ee58 <_scanf_float+0x64>
 800ef28:	2508      	movs	r5, #8
 800ef2a:	e02c      	b.n	800ef86 <_scanf_float+0x192>
 800ef2c:	2b74      	cmp	r3, #116	@ 0x74
 800ef2e:	d073      	beq.n	800f018 <_scanf_float+0x224>
 800ef30:	2b79      	cmp	r3, #121	@ 0x79
 800ef32:	e7f6      	b.n	800ef22 <_scanf_float+0x12e>
 800ef34:	6821      	ldr	r1, [r4, #0]
 800ef36:	05c8      	lsls	r0, r1, #23
 800ef38:	d51b      	bpl.n	800ef72 <_scanf_float+0x17e>
 800ef3a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ef3e:	6021      	str	r1, [r4, #0]
 800ef40:	f109 0901 	add.w	r9, r9, #1
 800ef44:	f1bb 0f00 	cmp.w	fp, #0
 800ef48:	d003      	beq.n	800ef52 <_scanf_float+0x15e>
 800ef4a:	3201      	adds	r2, #1
 800ef4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ef50:	60a2      	str	r2, [r4, #8]
 800ef52:	68a3      	ldr	r3, [r4, #8]
 800ef54:	3b01      	subs	r3, #1
 800ef56:	60a3      	str	r3, [r4, #8]
 800ef58:	6923      	ldr	r3, [r4, #16]
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	6123      	str	r3, [r4, #16]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	3b01      	subs	r3, #1
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	607b      	str	r3, [r7, #4]
 800ef66:	f340 8087 	ble.w	800f078 <_scanf_float+0x284>
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	603b      	str	r3, [r7, #0]
 800ef70:	e765      	b.n	800ee3e <_scanf_float+0x4a>
 800ef72:	eb1a 0105 	adds.w	r1, sl, r5
 800ef76:	f47f af6f 	bne.w	800ee58 <_scanf_float+0x64>
 800ef7a:	6822      	ldr	r2, [r4, #0]
 800ef7c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ef80:	6022      	str	r2, [r4, #0]
 800ef82:	460d      	mov	r5, r1
 800ef84:	468a      	mov	sl, r1
 800ef86:	f806 3b01 	strb.w	r3, [r6], #1
 800ef8a:	e7e2      	b.n	800ef52 <_scanf_float+0x15e>
 800ef8c:	6822      	ldr	r2, [r4, #0]
 800ef8e:	0610      	lsls	r0, r2, #24
 800ef90:	f57f af62 	bpl.w	800ee58 <_scanf_float+0x64>
 800ef94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ef98:	6022      	str	r2, [r4, #0]
 800ef9a:	e7f4      	b.n	800ef86 <_scanf_float+0x192>
 800ef9c:	f1ba 0f00 	cmp.w	sl, #0
 800efa0:	d10e      	bne.n	800efc0 <_scanf_float+0x1cc>
 800efa2:	f1b9 0f00 	cmp.w	r9, #0
 800efa6:	d10e      	bne.n	800efc6 <_scanf_float+0x1d2>
 800efa8:	6822      	ldr	r2, [r4, #0]
 800efaa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800efae:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800efb2:	d108      	bne.n	800efc6 <_scanf_float+0x1d2>
 800efb4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800efb8:	6022      	str	r2, [r4, #0]
 800efba:	f04f 0a01 	mov.w	sl, #1
 800efbe:	e7e2      	b.n	800ef86 <_scanf_float+0x192>
 800efc0:	f1ba 0f02 	cmp.w	sl, #2
 800efc4:	d055      	beq.n	800f072 <_scanf_float+0x27e>
 800efc6:	2d01      	cmp	r5, #1
 800efc8:	d002      	beq.n	800efd0 <_scanf_float+0x1dc>
 800efca:	2d04      	cmp	r5, #4
 800efcc:	f47f af44 	bne.w	800ee58 <_scanf_float+0x64>
 800efd0:	3501      	adds	r5, #1
 800efd2:	b2ed      	uxtb	r5, r5
 800efd4:	e7d7      	b.n	800ef86 <_scanf_float+0x192>
 800efd6:	f1ba 0f01 	cmp.w	sl, #1
 800efda:	f47f af3d 	bne.w	800ee58 <_scanf_float+0x64>
 800efde:	f04f 0a02 	mov.w	sl, #2
 800efe2:	e7d0      	b.n	800ef86 <_scanf_float+0x192>
 800efe4:	b97d      	cbnz	r5, 800f006 <_scanf_float+0x212>
 800efe6:	f1b9 0f00 	cmp.w	r9, #0
 800efea:	f47f af38 	bne.w	800ee5e <_scanf_float+0x6a>
 800efee:	6822      	ldr	r2, [r4, #0]
 800eff0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800eff4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800eff8:	f040 8108 	bne.w	800f20c <_scanf_float+0x418>
 800effc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f000:	6022      	str	r2, [r4, #0]
 800f002:	2501      	movs	r5, #1
 800f004:	e7bf      	b.n	800ef86 <_scanf_float+0x192>
 800f006:	2d03      	cmp	r5, #3
 800f008:	d0e2      	beq.n	800efd0 <_scanf_float+0x1dc>
 800f00a:	2d05      	cmp	r5, #5
 800f00c:	e7de      	b.n	800efcc <_scanf_float+0x1d8>
 800f00e:	2d02      	cmp	r5, #2
 800f010:	f47f af22 	bne.w	800ee58 <_scanf_float+0x64>
 800f014:	2503      	movs	r5, #3
 800f016:	e7b6      	b.n	800ef86 <_scanf_float+0x192>
 800f018:	2d06      	cmp	r5, #6
 800f01a:	f47f af1d 	bne.w	800ee58 <_scanf_float+0x64>
 800f01e:	2507      	movs	r5, #7
 800f020:	e7b1      	b.n	800ef86 <_scanf_float+0x192>
 800f022:	6822      	ldr	r2, [r4, #0]
 800f024:	0591      	lsls	r1, r2, #22
 800f026:	f57f af17 	bpl.w	800ee58 <_scanf_float+0x64>
 800f02a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f02e:	6022      	str	r2, [r4, #0]
 800f030:	f8cd 9008 	str.w	r9, [sp, #8]
 800f034:	e7a7      	b.n	800ef86 <_scanf_float+0x192>
 800f036:	6822      	ldr	r2, [r4, #0]
 800f038:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f03c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f040:	d006      	beq.n	800f050 <_scanf_float+0x25c>
 800f042:	0550      	lsls	r0, r2, #21
 800f044:	f57f af08 	bpl.w	800ee58 <_scanf_float+0x64>
 800f048:	f1b9 0f00 	cmp.w	r9, #0
 800f04c:	f000 80de 	beq.w	800f20c <_scanf_float+0x418>
 800f050:	0591      	lsls	r1, r2, #22
 800f052:	bf58      	it	pl
 800f054:	9902      	ldrpl	r1, [sp, #8]
 800f056:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f05a:	bf58      	it	pl
 800f05c:	eba9 0101 	subpl.w	r1, r9, r1
 800f060:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f064:	bf58      	it	pl
 800f066:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f06a:	6022      	str	r2, [r4, #0]
 800f06c:	f04f 0900 	mov.w	r9, #0
 800f070:	e789      	b.n	800ef86 <_scanf_float+0x192>
 800f072:	f04f 0a03 	mov.w	sl, #3
 800f076:	e786      	b.n	800ef86 <_scanf_float+0x192>
 800f078:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f07c:	4639      	mov	r1, r7
 800f07e:	4640      	mov	r0, r8
 800f080:	4798      	blx	r3
 800f082:	2800      	cmp	r0, #0
 800f084:	f43f aedb 	beq.w	800ee3e <_scanf_float+0x4a>
 800f088:	e6e6      	b.n	800ee58 <_scanf_float+0x64>
 800f08a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f08e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f092:	463a      	mov	r2, r7
 800f094:	4640      	mov	r0, r8
 800f096:	4798      	blx	r3
 800f098:	6923      	ldr	r3, [r4, #16]
 800f09a:	3b01      	subs	r3, #1
 800f09c:	6123      	str	r3, [r4, #16]
 800f09e:	e6e8      	b.n	800ee72 <_scanf_float+0x7e>
 800f0a0:	1e6b      	subs	r3, r5, #1
 800f0a2:	2b06      	cmp	r3, #6
 800f0a4:	d824      	bhi.n	800f0f0 <_scanf_float+0x2fc>
 800f0a6:	2d02      	cmp	r5, #2
 800f0a8:	d836      	bhi.n	800f118 <_scanf_float+0x324>
 800f0aa:	9b01      	ldr	r3, [sp, #4]
 800f0ac:	429e      	cmp	r6, r3
 800f0ae:	f67f aee4 	bls.w	800ee7a <_scanf_float+0x86>
 800f0b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f0b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f0ba:	463a      	mov	r2, r7
 800f0bc:	4640      	mov	r0, r8
 800f0be:	4798      	blx	r3
 800f0c0:	6923      	ldr	r3, [r4, #16]
 800f0c2:	3b01      	subs	r3, #1
 800f0c4:	6123      	str	r3, [r4, #16]
 800f0c6:	e7f0      	b.n	800f0aa <_scanf_float+0x2b6>
 800f0c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f0cc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f0d0:	463a      	mov	r2, r7
 800f0d2:	4640      	mov	r0, r8
 800f0d4:	4798      	blx	r3
 800f0d6:	6923      	ldr	r3, [r4, #16]
 800f0d8:	3b01      	subs	r3, #1
 800f0da:	6123      	str	r3, [r4, #16]
 800f0dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f0e0:	fa5f fa8a 	uxtb.w	sl, sl
 800f0e4:	f1ba 0f02 	cmp.w	sl, #2
 800f0e8:	d1ee      	bne.n	800f0c8 <_scanf_float+0x2d4>
 800f0ea:	3d03      	subs	r5, #3
 800f0ec:	b2ed      	uxtb	r5, r5
 800f0ee:	1b76      	subs	r6, r6, r5
 800f0f0:	6823      	ldr	r3, [r4, #0]
 800f0f2:	05da      	lsls	r2, r3, #23
 800f0f4:	d530      	bpl.n	800f158 <_scanf_float+0x364>
 800f0f6:	055b      	lsls	r3, r3, #21
 800f0f8:	d511      	bpl.n	800f11e <_scanf_float+0x32a>
 800f0fa:	9b01      	ldr	r3, [sp, #4]
 800f0fc:	429e      	cmp	r6, r3
 800f0fe:	f67f aebc 	bls.w	800ee7a <_scanf_float+0x86>
 800f102:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f106:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f10a:	463a      	mov	r2, r7
 800f10c:	4640      	mov	r0, r8
 800f10e:	4798      	blx	r3
 800f110:	6923      	ldr	r3, [r4, #16]
 800f112:	3b01      	subs	r3, #1
 800f114:	6123      	str	r3, [r4, #16]
 800f116:	e7f0      	b.n	800f0fa <_scanf_float+0x306>
 800f118:	46aa      	mov	sl, r5
 800f11a:	46b3      	mov	fp, r6
 800f11c:	e7de      	b.n	800f0dc <_scanf_float+0x2e8>
 800f11e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f122:	6923      	ldr	r3, [r4, #16]
 800f124:	2965      	cmp	r1, #101	@ 0x65
 800f126:	f103 33ff 	add.w	r3, r3, #4294967295
 800f12a:	f106 35ff 	add.w	r5, r6, #4294967295
 800f12e:	6123      	str	r3, [r4, #16]
 800f130:	d00c      	beq.n	800f14c <_scanf_float+0x358>
 800f132:	2945      	cmp	r1, #69	@ 0x45
 800f134:	d00a      	beq.n	800f14c <_scanf_float+0x358>
 800f136:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f13a:	463a      	mov	r2, r7
 800f13c:	4640      	mov	r0, r8
 800f13e:	4798      	blx	r3
 800f140:	6923      	ldr	r3, [r4, #16]
 800f142:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f146:	3b01      	subs	r3, #1
 800f148:	1eb5      	subs	r5, r6, #2
 800f14a:	6123      	str	r3, [r4, #16]
 800f14c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f150:	463a      	mov	r2, r7
 800f152:	4640      	mov	r0, r8
 800f154:	4798      	blx	r3
 800f156:	462e      	mov	r6, r5
 800f158:	6822      	ldr	r2, [r4, #0]
 800f15a:	f012 0210 	ands.w	r2, r2, #16
 800f15e:	d001      	beq.n	800f164 <_scanf_float+0x370>
 800f160:	2000      	movs	r0, #0
 800f162:	e68b      	b.n	800ee7c <_scanf_float+0x88>
 800f164:	7032      	strb	r2, [r6, #0]
 800f166:	6823      	ldr	r3, [r4, #0]
 800f168:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f16c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f170:	d11c      	bne.n	800f1ac <_scanf_float+0x3b8>
 800f172:	9b02      	ldr	r3, [sp, #8]
 800f174:	454b      	cmp	r3, r9
 800f176:	eba3 0209 	sub.w	r2, r3, r9
 800f17a:	d123      	bne.n	800f1c4 <_scanf_float+0x3d0>
 800f17c:	9901      	ldr	r1, [sp, #4]
 800f17e:	2200      	movs	r2, #0
 800f180:	4640      	mov	r0, r8
 800f182:	f002 fe1d 	bl	8011dc0 <_strtod_r>
 800f186:	9b03      	ldr	r3, [sp, #12]
 800f188:	6821      	ldr	r1, [r4, #0]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	f011 0f02 	tst.w	r1, #2
 800f190:	ec57 6b10 	vmov	r6, r7, d0
 800f194:	f103 0204 	add.w	r2, r3, #4
 800f198:	d01f      	beq.n	800f1da <_scanf_float+0x3e6>
 800f19a:	9903      	ldr	r1, [sp, #12]
 800f19c:	600a      	str	r2, [r1, #0]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	e9c3 6700 	strd	r6, r7, [r3]
 800f1a4:	68e3      	ldr	r3, [r4, #12]
 800f1a6:	3301      	adds	r3, #1
 800f1a8:	60e3      	str	r3, [r4, #12]
 800f1aa:	e7d9      	b.n	800f160 <_scanf_float+0x36c>
 800f1ac:	9b04      	ldr	r3, [sp, #16]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d0e4      	beq.n	800f17c <_scanf_float+0x388>
 800f1b2:	9905      	ldr	r1, [sp, #20]
 800f1b4:	230a      	movs	r3, #10
 800f1b6:	3101      	adds	r1, #1
 800f1b8:	4640      	mov	r0, r8
 800f1ba:	f7ff f9b7 	bl	800e52c <_strtol_r>
 800f1be:	9b04      	ldr	r3, [sp, #16]
 800f1c0:	9e05      	ldr	r6, [sp, #20]
 800f1c2:	1ac2      	subs	r2, r0, r3
 800f1c4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f1c8:	429e      	cmp	r6, r3
 800f1ca:	bf28      	it	cs
 800f1cc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f1d0:	4910      	ldr	r1, [pc, #64]	@ (800f214 <_scanf_float+0x420>)
 800f1d2:	4630      	mov	r0, r6
 800f1d4:	f000 fa14 	bl	800f600 <siprintf>
 800f1d8:	e7d0      	b.n	800f17c <_scanf_float+0x388>
 800f1da:	f011 0f04 	tst.w	r1, #4
 800f1de:	9903      	ldr	r1, [sp, #12]
 800f1e0:	600a      	str	r2, [r1, #0]
 800f1e2:	d1dc      	bne.n	800f19e <_scanf_float+0x3aa>
 800f1e4:	681d      	ldr	r5, [r3, #0]
 800f1e6:	4632      	mov	r2, r6
 800f1e8:	463b      	mov	r3, r7
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	4639      	mov	r1, r7
 800f1ee:	f7f1 fc9d 	bl	8000b2c <__aeabi_dcmpun>
 800f1f2:	b128      	cbz	r0, 800f200 <_scanf_float+0x40c>
 800f1f4:	4808      	ldr	r0, [pc, #32]	@ (800f218 <_scanf_float+0x424>)
 800f1f6:	f000 fbdd 	bl	800f9b4 <nanf>
 800f1fa:	ed85 0a00 	vstr	s0, [r5]
 800f1fe:	e7d1      	b.n	800f1a4 <_scanf_float+0x3b0>
 800f200:	4630      	mov	r0, r6
 800f202:	4639      	mov	r1, r7
 800f204:	f7f1 fcf0 	bl	8000be8 <__aeabi_d2f>
 800f208:	6028      	str	r0, [r5, #0]
 800f20a:	e7cb      	b.n	800f1a4 <_scanf_float+0x3b0>
 800f20c:	f04f 0900 	mov.w	r9, #0
 800f210:	e629      	b.n	800ee66 <_scanf_float+0x72>
 800f212:	bf00      	nop
 800f214:	080139d7 	.word	0x080139d7
 800f218:	08013c87 	.word	0x08013c87

0800f21c <__sflush_r>:
 800f21c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f224:	0716      	lsls	r6, r2, #28
 800f226:	4605      	mov	r5, r0
 800f228:	460c      	mov	r4, r1
 800f22a:	d454      	bmi.n	800f2d6 <__sflush_r+0xba>
 800f22c:	684b      	ldr	r3, [r1, #4]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	dc02      	bgt.n	800f238 <__sflush_r+0x1c>
 800f232:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f234:	2b00      	cmp	r3, #0
 800f236:	dd48      	ble.n	800f2ca <__sflush_r+0xae>
 800f238:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f23a:	2e00      	cmp	r6, #0
 800f23c:	d045      	beq.n	800f2ca <__sflush_r+0xae>
 800f23e:	2300      	movs	r3, #0
 800f240:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f244:	682f      	ldr	r7, [r5, #0]
 800f246:	6a21      	ldr	r1, [r4, #32]
 800f248:	602b      	str	r3, [r5, #0]
 800f24a:	d030      	beq.n	800f2ae <__sflush_r+0x92>
 800f24c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f24e:	89a3      	ldrh	r3, [r4, #12]
 800f250:	0759      	lsls	r1, r3, #29
 800f252:	d505      	bpl.n	800f260 <__sflush_r+0x44>
 800f254:	6863      	ldr	r3, [r4, #4]
 800f256:	1ad2      	subs	r2, r2, r3
 800f258:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f25a:	b10b      	cbz	r3, 800f260 <__sflush_r+0x44>
 800f25c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f25e:	1ad2      	subs	r2, r2, r3
 800f260:	2300      	movs	r3, #0
 800f262:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f264:	6a21      	ldr	r1, [r4, #32]
 800f266:	4628      	mov	r0, r5
 800f268:	47b0      	blx	r6
 800f26a:	1c43      	adds	r3, r0, #1
 800f26c:	89a3      	ldrh	r3, [r4, #12]
 800f26e:	d106      	bne.n	800f27e <__sflush_r+0x62>
 800f270:	6829      	ldr	r1, [r5, #0]
 800f272:	291d      	cmp	r1, #29
 800f274:	d82b      	bhi.n	800f2ce <__sflush_r+0xb2>
 800f276:	4a2a      	ldr	r2, [pc, #168]	@ (800f320 <__sflush_r+0x104>)
 800f278:	410a      	asrs	r2, r1
 800f27a:	07d6      	lsls	r6, r2, #31
 800f27c:	d427      	bmi.n	800f2ce <__sflush_r+0xb2>
 800f27e:	2200      	movs	r2, #0
 800f280:	6062      	str	r2, [r4, #4]
 800f282:	04d9      	lsls	r1, r3, #19
 800f284:	6922      	ldr	r2, [r4, #16]
 800f286:	6022      	str	r2, [r4, #0]
 800f288:	d504      	bpl.n	800f294 <__sflush_r+0x78>
 800f28a:	1c42      	adds	r2, r0, #1
 800f28c:	d101      	bne.n	800f292 <__sflush_r+0x76>
 800f28e:	682b      	ldr	r3, [r5, #0]
 800f290:	b903      	cbnz	r3, 800f294 <__sflush_r+0x78>
 800f292:	6560      	str	r0, [r4, #84]	@ 0x54
 800f294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f296:	602f      	str	r7, [r5, #0]
 800f298:	b1b9      	cbz	r1, 800f2ca <__sflush_r+0xae>
 800f29a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f29e:	4299      	cmp	r1, r3
 800f2a0:	d002      	beq.n	800f2a8 <__sflush_r+0x8c>
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	f001 f9d8 	bl	8010658 <_free_r>
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	6363      	str	r3, [r4, #52]	@ 0x34
 800f2ac:	e00d      	b.n	800f2ca <__sflush_r+0xae>
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	4628      	mov	r0, r5
 800f2b2:	47b0      	blx	r6
 800f2b4:	4602      	mov	r2, r0
 800f2b6:	1c50      	adds	r0, r2, #1
 800f2b8:	d1c9      	bne.n	800f24e <__sflush_r+0x32>
 800f2ba:	682b      	ldr	r3, [r5, #0]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d0c6      	beq.n	800f24e <__sflush_r+0x32>
 800f2c0:	2b1d      	cmp	r3, #29
 800f2c2:	d001      	beq.n	800f2c8 <__sflush_r+0xac>
 800f2c4:	2b16      	cmp	r3, #22
 800f2c6:	d11e      	bne.n	800f306 <__sflush_r+0xea>
 800f2c8:	602f      	str	r7, [r5, #0]
 800f2ca:	2000      	movs	r0, #0
 800f2cc:	e022      	b.n	800f314 <__sflush_r+0xf8>
 800f2ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2d2:	b21b      	sxth	r3, r3
 800f2d4:	e01b      	b.n	800f30e <__sflush_r+0xf2>
 800f2d6:	690f      	ldr	r7, [r1, #16]
 800f2d8:	2f00      	cmp	r7, #0
 800f2da:	d0f6      	beq.n	800f2ca <__sflush_r+0xae>
 800f2dc:	0793      	lsls	r3, r2, #30
 800f2de:	680e      	ldr	r6, [r1, #0]
 800f2e0:	bf08      	it	eq
 800f2e2:	694b      	ldreq	r3, [r1, #20]
 800f2e4:	600f      	str	r7, [r1, #0]
 800f2e6:	bf18      	it	ne
 800f2e8:	2300      	movne	r3, #0
 800f2ea:	eba6 0807 	sub.w	r8, r6, r7
 800f2ee:	608b      	str	r3, [r1, #8]
 800f2f0:	f1b8 0f00 	cmp.w	r8, #0
 800f2f4:	dde9      	ble.n	800f2ca <__sflush_r+0xae>
 800f2f6:	6a21      	ldr	r1, [r4, #32]
 800f2f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f2fa:	4643      	mov	r3, r8
 800f2fc:	463a      	mov	r2, r7
 800f2fe:	4628      	mov	r0, r5
 800f300:	47b0      	blx	r6
 800f302:	2800      	cmp	r0, #0
 800f304:	dc08      	bgt.n	800f318 <__sflush_r+0xfc>
 800f306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f30a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f30e:	81a3      	strh	r3, [r4, #12]
 800f310:	f04f 30ff 	mov.w	r0, #4294967295
 800f314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f318:	4407      	add	r7, r0
 800f31a:	eba8 0800 	sub.w	r8, r8, r0
 800f31e:	e7e7      	b.n	800f2f0 <__sflush_r+0xd4>
 800f320:	dfbffffe 	.word	0xdfbffffe

0800f324 <_fflush_r>:
 800f324:	b538      	push	{r3, r4, r5, lr}
 800f326:	690b      	ldr	r3, [r1, #16]
 800f328:	4605      	mov	r5, r0
 800f32a:	460c      	mov	r4, r1
 800f32c:	b913      	cbnz	r3, 800f334 <_fflush_r+0x10>
 800f32e:	2500      	movs	r5, #0
 800f330:	4628      	mov	r0, r5
 800f332:	bd38      	pop	{r3, r4, r5, pc}
 800f334:	b118      	cbz	r0, 800f33e <_fflush_r+0x1a>
 800f336:	6a03      	ldr	r3, [r0, #32]
 800f338:	b90b      	cbnz	r3, 800f33e <_fflush_r+0x1a>
 800f33a:	f000 f8bb 	bl	800f4b4 <__sinit>
 800f33e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d0f3      	beq.n	800f32e <_fflush_r+0xa>
 800f346:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f348:	07d0      	lsls	r0, r2, #31
 800f34a:	d404      	bmi.n	800f356 <_fflush_r+0x32>
 800f34c:	0599      	lsls	r1, r3, #22
 800f34e:	d402      	bmi.n	800f356 <_fflush_r+0x32>
 800f350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f352:	f000 fb1e 	bl	800f992 <__retarget_lock_acquire_recursive>
 800f356:	4628      	mov	r0, r5
 800f358:	4621      	mov	r1, r4
 800f35a:	f7ff ff5f 	bl	800f21c <__sflush_r>
 800f35e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f360:	07da      	lsls	r2, r3, #31
 800f362:	4605      	mov	r5, r0
 800f364:	d4e4      	bmi.n	800f330 <_fflush_r+0xc>
 800f366:	89a3      	ldrh	r3, [r4, #12]
 800f368:	059b      	lsls	r3, r3, #22
 800f36a:	d4e1      	bmi.n	800f330 <_fflush_r+0xc>
 800f36c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f36e:	f000 fb11 	bl	800f994 <__retarget_lock_release_recursive>
 800f372:	e7dd      	b.n	800f330 <_fflush_r+0xc>

0800f374 <fflush>:
 800f374:	4601      	mov	r1, r0
 800f376:	b920      	cbnz	r0, 800f382 <fflush+0xe>
 800f378:	4a04      	ldr	r2, [pc, #16]	@ (800f38c <fflush+0x18>)
 800f37a:	4905      	ldr	r1, [pc, #20]	@ (800f390 <fflush+0x1c>)
 800f37c:	4805      	ldr	r0, [pc, #20]	@ (800f394 <fflush+0x20>)
 800f37e:	f000 b8b1 	b.w	800f4e4 <_fwalk_sglue>
 800f382:	4b05      	ldr	r3, [pc, #20]	@ (800f398 <fflush+0x24>)
 800f384:	6818      	ldr	r0, [r3, #0]
 800f386:	f7ff bfcd 	b.w	800f324 <_fflush_r>
 800f38a:	bf00      	nop
 800f38c:	2000018c 	.word	0x2000018c
 800f390:	0800f325 	.word	0x0800f325
 800f394:	2000019c 	.word	0x2000019c
 800f398:	20000198 	.word	0x20000198

0800f39c <std>:
 800f39c:	2300      	movs	r3, #0
 800f39e:	b510      	push	{r4, lr}
 800f3a0:	4604      	mov	r4, r0
 800f3a2:	e9c0 3300 	strd	r3, r3, [r0]
 800f3a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f3aa:	6083      	str	r3, [r0, #8]
 800f3ac:	8181      	strh	r1, [r0, #12]
 800f3ae:	6643      	str	r3, [r0, #100]	@ 0x64
 800f3b0:	81c2      	strh	r2, [r0, #14]
 800f3b2:	6183      	str	r3, [r0, #24]
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	2208      	movs	r2, #8
 800f3b8:	305c      	adds	r0, #92	@ 0x5c
 800f3ba:	f000 fa45 	bl	800f848 <memset>
 800f3be:	4b0d      	ldr	r3, [pc, #52]	@ (800f3f4 <std+0x58>)
 800f3c0:	6263      	str	r3, [r4, #36]	@ 0x24
 800f3c2:	4b0d      	ldr	r3, [pc, #52]	@ (800f3f8 <std+0x5c>)
 800f3c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f3c6:	4b0d      	ldr	r3, [pc, #52]	@ (800f3fc <std+0x60>)
 800f3c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f3ca:	4b0d      	ldr	r3, [pc, #52]	@ (800f400 <std+0x64>)
 800f3cc:	6323      	str	r3, [r4, #48]	@ 0x30
 800f3ce:	4b0d      	ldr	r3, [pc, #52]	@ (800f404 <std+0x68>)
 800f3d0:	6224      	str	r4, [r4, #32]
 800f3d2:	429c      	cmp	r4, r3
 800f3d4:	d006      	beq.n	800f3e4 <std+0x48>
 800f3d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f3da:	4294      	cmp	r4, r2
 800f3dc:	d002      	beq.n	800f3e4 <std+0x48>
 800f3de:	33d0      	adds	r3, #208	@ 0xd0
 800f3e0:	429c      	cmp	r4, r3
 800f3e2:	d105      	bne.n	800f3f0 <std+0x54>
 800f3e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f3e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3ec:	f000 bad0 	b.w	800f990 <__retarget_lock_init_recursive>
 800f3f0:	bd10      	pop	{r4, pc}
 800f3f2:	bf00      	nop
 800f3f4:	0800f695 	.word	0x0800f695
 800f3f8:	0800f6bb 	.word	0x0800f6bb
 800f3fc:	0800f6f3 	.word	0x0800f6f3
 800f400:	0800f717 	.word	0x0800f717
 800f404:	20002114 	.word	0x20002114

0800f408 <stdio_exit_handler>:
 800f408:	4a02      	ldr	r2, [pc, #8]	@ (800f414 <stdio_exit_handler+0xc>)
 800f40a:	4903      	ldr	r1, [pc, #12]	@ (800f418 <stdio_exit_handler+0x10>)
 800f40c:	4803      	ldr	r0, [pc, #12]	@ (800f41c <stdio_exit_handler+0x14>)
 800f40e:	f000 b869 	b.w	800f4e4 <_fwalk_sglue>
 800f412:	bf00      	nop
 800f414:	2000018c 	.word	0x2000018c
 800f418:	0800f325 	.word	0x0800f325
 800f41c:	2000019c 	.word	0x2000019c

0800f420 <cleanup_stdio>:
 800f420:	6841      	ldr	r1, [r0, #4]
 800f422:	4b0c      	ldr	r3, [pc, #48]	@ (800f454 <cleanup_stdio+0x34>)
 800f424:	4299      	cmp	r1, r3
 800f426:	b510      	push	{r4, lr}
 800f428:	4604      	mov	r4, r0
 800f42a:	d001      	beq.n	800f430 <cleanup_stdio+0x10>
 800f42c:	f7ff ff7a 	bl	800f324 <_fflush_r>
 800f430:	68a1      	ldr	r1, [r4, #8]
 800f432:	4b09      	ldr	r3, [pc, #36]	@ (800f458 <cleanup_stdio+0x38>)
 800f434:	4299      	cmp	r1, r3
 800f436:	d002      	beq.n	800f43e <cleanup_stdio+0x1e>
 800f438:	4620      	mov	r0, r4
 800f43a:	f7ff ff73 	bl	800f324 <_fflush_r>
 800f43e:	68e1      	ldr	r1, [r4, #12]
 800f440:	4b06      	ldr	r3, [pc, #24]	@ (800f45c <cleanup_stdio+0x3c>)
 800f442:	4299      	cmp	r1, r3
 800f444:	d004      	beq.n	800f450 <cleanup_stdio+0x30>
 800f446:	4620      	mov	r0, r4
 800f448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f44c:	f7ff bf6a 	b.w	800f324 <_fflush_r>
 800f450:	bd10      	pop	{r4, pc}
 800f452:	bf00      	nop
 800f454:	20002114 	.word	0x20002114
 800f458:	2000217c 	.word	0x2000217c
 800f45c:	200021e4 	.word	0x200021e4

0800f460 <global_stdio_init.part.0>:
 800f460:	b510      	push	{r4, lr}
 800f462:	4b0b      	ldr	r3, [pc, #44]	@ (800f490 <global_stdio_init.part.0+0x30>)
 800f464:	4c0b      	ldr	r4, [pc, #44]	@ (800f494 <global_stdio_init.part.0+0x34>)
 800f466:	4a0c      	ldr	r2, [pc, #48]	@ (800f498 <global_stdio_init.part.0+0x38>)
 800f468:	601a      	str	r2, [r3, #0]
 800f46a:	4620      	mov	r0, r4
 800f46c:	2200      	movs	r2, #0
 800f46e:	2104      	movs	r1, #4
 800f470:	f7ff ff94 	bl	800f39c <std>
 800f474:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f478:	2201      	movs	r2, #1
 800f47a:	2109      	movs	r1, #9
 800f47c:	f7ff ff8e 	bl	800f39c <std>
 800f480:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f484:	2202      	movs	r2, #2
 800f486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f48a:	2112      	movs	r1, #18
 800f48c:	f7ff bf86 	b.w	800f39c <std>
 800f490:	2000224c 	.word	0x2000224c
 800f494:	20002114 	.word	0x20002114
 800f498:	0800f409 	.word	0x0800f409

0800f49c <__sfp_lock_acquire>:
 800f49c:	4801      	ldr	r0, [pc, #4]	@ (800f4a4 <__sfp_lock_acquire+0x8>)
 800f49e:	f000 ba78 	b.w	800f992 <__retarget_lock_acquire_recursive>
 800f4a2:	bf00      	nop
 800f4a4:	20002255 	.word	0x20002255

0800f4a8 <__sfp_lock_release>:
 800f4a8:	4801      	ldr	r0, [pc, #4]	@ (800f4b0 <__sfp_lock_release+0x8>)
 800f4aa:	f000 ba73 	b.w	800f994 <__retarget_lock_release_recursive>
 800f4ae:	bf00      	nop
 800f4b0:	20002255 	.word	0x20002255

0800f4b4 <__sinit>:
 800f4b4:	b510      	push	{r4, lr}
 800f4b6:	4604      	mov	r4, r0
 800f4b8:	f7ff fff0 	bl	800f49c <__sfp_lock_acquire>
 800f4bc:	6a23      	ldr	r3, [r4, #32]
 800f4be:	b11b      	cbz	r3, 800f4c8 <__sinit+0x14>
 800f4c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4c4:	f7ff bff0 	b.w	800f4a8 <__sfp_lock_release>
 800f4c8:	4b04      	ldr	r3, [pc, #16]	@ (800f4dc <__sinit+0x28>)
 800f4ca:	6223      	str	r3, [r4, #32]
 800f4cc:	4b04      	ldr	r3, [pc, #16]	@ (800f4e0 <__sinit+0x2c>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d1f5      	bne.n	800f4c0 <__sinit+0xc>
 800f4d4:	f7ff ffc4 	bl	800f460 <global_stdio_init.part.0>
 800f4d8:	e7f2      	b.n	800f4c0 <__sinit+0xc>
 800f4da:	bf00      	nop
 800f4dc:	0800f421 	.word	0x0800f421
 800f4e0:	2000224c 	.word	0x2000224c

0800f4e4 <_fwalk_sglue>:
 800f4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4e8:	4607      	mov	r7, r0
 800f4ea:	4688      	mov	r8, r1
 800f4ec:	4614      	mov	r4, r2
 800f4ee:	2600      	movs	r6, #0
 800f4f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f4f4:	f1b9 0901 	subs.w	r9, r9, #1
 800f4f8:	d505      	bpl.n	800f506 <_fwalk_sglue+0x22>
 800f4fa:	6824      	ldr	r4, [r4, #0]
 800f4fc:	2c00      	cmp	r4, #0
 800f4fe:	d1f7      	bne.n	800f4f0 <_fwalk_sglue+0xc>
 800f500:	4630      	mov	r0, r6
 800f502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f506:	89ab      	ldrh	r3, [r5, #12]
 800f508:	2b01      	cmp	r3, #1
 800f50a:	d907      	bls.n	800f51c <_fwalk_sglue+0x38>
 800f50c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f510:	3301      	adds	r3, #1
 800f512:	d003      	beq.n	800f51c <_fwalk_sglue+0x38>
 800f514:	4629      	mov	r1, r5
 800f516:	4638      	mov	r0, r7
 800f518:	47c0      	blx	r8
 800f51a:	4306      	orrs	r6, r0
 800f51c:	3568      	adds	r5, #104	@ 0x68
 800f51e:	e7e9      	b.n	800f4f4 <_fwalk_sglue+0x10>

0800f520 <iprintf>:
 800f520:	b40f      	push	{r0, r1, r2, r3}
 800f522:	b507      	push	{r0, r1, r2, lr}
 800f524:	4906      	ldr	r1, [pc, #24]	@ (800f540 <iprintf+0x20>)
 800f526:	ab04      	add	r3, sp, #16
 800f528:	6808      	ldr	r0, [r1, #0]
 800f52a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f52e:	6881      	ldr	r1, [r0, #8]
 800f530:	9301      	str	r3, [sp, #4]
 800f532:	f002 ff99 	bl	8012468 <_vfiprintf_r>
 800f536:	b003      	add	sp, #12
 800f538:	f85d eb04 	ldr.w	lr, [sp], #4
 800f53c:	b004      	add	sp, #16
 800f53e:	4770      	bx	lr
 800f540:	20000198 	.word	0x20000198

0800f544 <_puts_r>:
 800f544:	6a03      	ldr	r3, [r0, #32]
 800f546:	b570      	push	{r4, r5, r6, lr}
 800f548:	6884      	ldr	r4, [r0, #8]
 800f54a:	4605      	mov	r5, r0
 800f54c:	460e      	mov	r6, r1
 800f54e:	b90b      	cbnz	r3, 800f554 <_puts_r+0x10>
 800f550:	f7ff ffb0 	bl	800f4b4 <__sinit>
 800f554:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f556:	07db      	lsls	r3, r3, #31
 800f558:	d405      	bmi.n	800f566 <_puts_r+0x22>
 800f55a:	89a3      	ldrh	r3, [r4, #12]
 800f55c:	0598      	lsls	r0, r3, #22
 800f55e:	d402      	bmi.n	800f566 <_puts_r+0x22>
 800f560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f562:	f000 fa16 	bl	800f992 <__retarget_lock_acquire_recursive>
 800f566:	89a3      	ldrh	r3, [r4, #12]
 800f568:	0719      	lsls	r1, r3, #28
 800f56a:	d502      	bpl.n	800f572 <_puts_r+0x2e>
 800f56c:	6923      	ldr	r3, [r4, #16]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d135      	bne.n	800f5de <_puts_r+0x9a>
 800f572:	4621      	mov	r1, r4
 800f574:	4628      	mov	r0, r5
 800f576:	f000 f911 	bl	800f79c <__swsetup_r>
 800f57a:	b380      	cbz	r0, 800f5de <_puts_r+0x9a>
 800f57c:	f04f 35ff 	mov.w	r5, #4294967295
 800f580:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f582:	07da      	lsls	r2, r3, #31
 800f584:	d405      	bmi.n	800f592 <_puts_r+0x4e>
 800f586:	89a3      	ldrh	r3, [r4, #12]
 800f588:	059b      	lsls	r3, r3, #22
 800f58a:	d402      	bmi.n	800f592 <_puts_r+0x4e>
 800f58c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f58e:	f000 fa01 	bl	800f994 <__retarget_lock_release_recursive>
 800f592:	4628      	mov	r0, r5
 800f594:	bd70      	pop	{r4, r5, r6, pc}
 800f596:	2b00      	cmp	r3, #0
 800f598:	da04      	bge.n	800f5a4 <_puts_r+0x60>
 800f59a:	69a2      	ldr	r2, [r4, #24]
 800f59c:	429a      	cmp	r2, r3
 800f59e:	dc17      	bgt.n	800f5d0 <_puts_r+0x8c>
 800f5a0:	290a      	cmp	r1, #10
 800f5a2:	d015      	beq.n	800f5d0 <_puts_r+0x8c>
 800f5a4:	6823      	ldr	r3, [r4, #0]
 800f5a6:	1c5a      	adds	r2, r3, #1
 800f5a8:	6022      	str	r2, [r4, #0]
 800f5aa:	7019      	strb	r1, [r3, #0]
 800f5ac:	68a3      	ldr	r3, [r4, #8]
 800f5ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f5b2:	3b01      	subs	r3, #1
 800f5b4:	60a3      	str	r3, [r4, #8]
 800f5b6:	2900      	cmp	r1, #0
 800f5b8:	d1ed      	bne.n	800f596 <_puts_r+0x52>
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	da11      	bge.n	800f5e2 <_puts_r+0x9e>
 800f5be:	4622      	mov	r2, r4
 800f5c0:	210a      	movs	r1, #10
 800f5c2:	4628      	mov	r0, r5
 800f5c4:	f000 f8ab 	bl	800f71e <__swbuf_r>
 800f5c8:	3001      	adds	r0, #1
 800f5ca:	d0d7      	beq.n	800f57c <_puts_r+0x38>
 800f5cc:	250a      	movs	r5, #10
 800f5ce:	e7d7      	b.n	800f580 <_puts_r+0x3c>
 800f5d0:	4622      	mov	r2, r4
 800f5d2:	4628      	mov	r0, r5
 800f5d4:	f000 f8a3 	bl	800f71e <__swbuf_r>
 800f5d8:	3001      	adds	r0, #1
 800f5da:	d1e7      	bne.n	800f5ac <_puts_r+0x68>
 800f5dc:	e7ce      	b.n	800f57c <_puts_r+0x38>
 800f5de:	3e01      	subs	r6, #1
 800f5e0:	e7e4      	b.n	800f5ac <_puts_r+0x68>
 800f5e2:	6823      	ldr	r3, [r4, #0]
 800f5e4:	1c5a      	adds	r2, r3, #1
 800f5e6:	6022      	str	r2, [r4, #0]
 800f5e8:	220a      	movs	r2, #10
 800f5ea:	701a      	strb	r2, [r3, #0]
 800f5ec:	e7ee      	b.n	800f5cc <_puts_r+0x88>
	...

0800f5f0 <puts>:
 800f5f0:	4b02      	ldr	r3, [pc, #8]	@ (800f5fc <puts+0xc>)
 800f5f2:	4601      	mov	r1, r0
 800f5f4:	6818      	ldr	r0, [r3, #0]
 800f5f6:	f7ff bfa5 	b.w	800f544 <_puts_r>
 800f5fa:	bf00      	nop
 800f5fc:	20000198 	.word	0x20000198

0800f600 <siprintf>:
 800f600:	b40e      	push	{r1, r2, r3}
 800f602:	b500      	push	{lr}
 800f604:	b09c      	sub	sp, #112	@ 0x70
 800f606:	ab1d      	add	r3, sp, #116	@ 0x74
 800f608:	9002      	str	r0, [sp, #8]
 800f60a:	9006      	str	r0, [sp, #24]
 800f60c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f610:	4809      	ldr	r0, [pc, #36]	@ (800f638 <siprintf+0x38>)
 800f612:	9107      	str	r1, [sp, #28]
 800f614:	9104      	str	r1, [sp, #16]
 800f616:	4909      	ldr	r1, [pc, #36]	@ (800f63c <siprintf+0x3c>)
 800f618:	f853 2b04 	ldr.w	r2, [r3], #4
 800f61c:	9105      	str	r1, [sp, #20]
 800f61e:	6800      	ldr	r0, [r0, #0]
 800f620:	9301      	str	r3, [sp, #4]
 800f622:	a902      	add	r1, sp, #8
 800f624:	f002 fc2e 	bl	8011e84 <_svfiprintf_r>
 800f628:	9b02      	ldr	r3, [sp, #8]
 800f62a:	2200      	movs	r2, #0
 800f62c:	701a      	strb	r2, [r3, #0]
 800f62e:	b01c      	add	sp, #112	@ 0x70
 800f630:	f85d eb04 	ldr.w	lr, [sp], #4
 800f634:	b003      	add	sp, #12
 800f636:	4770      	bx	lr
 800f638:	20000198 	.word	0x20000198
 800f63c:	ffff0208 	.word	0xffff0208

0800f640 <siscanf>:
 800f640:	b40e      	push	{r1, r2, r3}
 800f642:	b530      	push	{r4, r5, lr}
 800f644:	b09c      	sub	sp, #112	@ 0x70
 800f646:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f648:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f64c:	f854 5b04 	ldr.w	r5, [r4], #4
 800f650:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f654:	9002      	str	r0, [sp, #8]
 800f656:	9006      	str	r0, [sp, #24]
 800f658:	f7f0 fe0a 	bl	8000270 <strlen>
 800f65c:	4b0b      	ldr	r3, [pc, #44]	@ (800f68c <siscanf+0x4c>)
 800f65e:	9003      	str	r0, [sp, #12]
 800f660:	9007      	str	r0, [sp, #28]
 800f662:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f664:	480a      	ldr	r0, [pc, #40]	@ (800f690 <siscanf+0x50>)
 800f666:	9401      	str	r4, [sp, #4]
 800f668:	2300      	movs	r3, #0
 800f66a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f66c:	9314      	str	r3, [sp, #80]	@ 0x50
 800f66e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f672:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f676:	462a      	mov	r2, r5
 800f678:	4623      	mov	r3, r4
 800f67a:	a902      	add	r1, sp, #8
 800f67c:	6800      	ldr	r0, [r0, #0]
 800f67e:	f002 fd55 	bl	801212c <__ssvfiscanf_r>
 800f682:	b01c      	add	sp, #112	@ 0x70
 800f684:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f688:	b003      	add	sp, #12
 800f68a:	4770      	bx	lr
 800f68c:	0800f6b7 	.word	0x0800f6b7
 800f690:	20000198 	.word	0x20000198

0800f694 <__sread>:
 800f694:	b510      	push	{r4, lr}
 800f696:	460c      	mov	r4, r1
 800f698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f69c:	f000 f92a 	bl	800f8f4 <_read_r>
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	bfab      	itete	ge
 800f6a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f6a6:	89a3      	ldrhlt	r3, [r4, #12]
 800f6a8:	181b      	addge	r3, r3, r0
 800f6aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f6ae:	bfac      	ite	ge
 800f6b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f6b2:	81a3      	strhlt	r3, [r4, #12]
 800f6b4:	bd10      	pop	{r4, pc}

0800f6b6 <__seofread>:
 800f6b6:	2000      	movs	r0, #0
 800f6b8:	4770      	bx	lr

0800f6ba <__swrite>:
 800f6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6be:	461f      	mov	r7, r3
 800f6c0:	898b      	ldrh	r3, [r1, #12]
 800f6c2:	05db      	lsls	r3, r3, #23
 800f6c4:	4605      	mov	r5, r0
 800f6c6:	460c      	mov	r4, r1
 800f6c8:	4616      	mov	r6, r2
 800f6ca:	d505      	bpl.n	800f6d8 <__swrite+0x1e>
 800f6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6d0:	2302      	movs	r3, #2
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	f000 f8fc 	bl	800f8d0 <_lseek_r>
 800f6d8:	89a3      	ldrh	r3, [r4, #12]
 800f6da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f6e2:	81a3      	strh	r3, [r4, #12]
 800f6e4:	4632      	mov	r2, r6
 800f6e6:	463b      	mov	r3, r7
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ee:	f000 b913 	b.w	800f918 <_write_r>

0800f6f2 <__sseek>:
 800f6f2:	b510      	push	{r4, lr}
 800f6f4:	460c      	mov	r4, r1
 800f6f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6fa:	f000 f8e9 	bl	800f8d0 <_lseek_r>
 800f6fe:	1c43      	adds	r3, r0, #1
 800f700:	89a3      	ldrh	r3, [r4, #12]
 800f702:	bf15      	itete	ne
 800f704:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f706:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f70a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f70e:	81a3      	strheq	r3, [r4, #12]
 800f710:	bf18      	it	ne
 800f712:	81a3      	strhne	r3, [r4, #12]
 800f714:	bd10      	pop	{r4, pc}

0800f716 <__sclose>:
 800f716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f71a:	f000 b8c9 	b.w	800f8b0 <_close_r>

0800f71e <__swbuf_r>:
 800f71e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f720:	460e      	mov	r6, r1
 800f722:	4614      	mov	r4, r2
 800f724:	4605      	mov	r5, r0
 800f726:	b118      	cbz	r0, 800f730 <__swbuf_r+0x12>
 800f728:	6a03      	ldr	r3, [r0, #32]
 800f72a:	b90b      	cbnz	r3, 800f730 <__swbuf_r+0x12>
 800f72c:	f7ff fec2 	bl	800f4b4 <__sinit>
 800f730:	69a3      	ldr	r3, [r4, #24]
 800f732:	60a3      	str	r3, [r4, #8]
 800f734:	89a3      	ldrh	r3, [r4, #12]
 800f736:	071a      	lsls	r2, r3, #28
 800f738:	d501      	bpl.n	800f73e <__swbuf_r+0x20>
 800f73a:	6923      	ldr	r3, [r4, #16]
 800f73c:	b943      	cbnz	r3, 800f750 <__swbuf_r+0x32>
 800f73e:	4621      	mov	r1, r4
 800f740:	4628      	mov	r0, r5
 800f742:	f000 f82b 	bl	800f79c <__swsetup_r>
 800f746:	b118      	cbz	r0, 800f750 <__swbuf_r+0x32>
 800f748:	f04f 37ff 	mov.w	r7, #4294967295
 800f74c:	4638      	mov	r0, r7
 800f74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f750:	6823      	ldr	r3, [r4, #0]
 800f752:	6922      	ldr	r2, [r4, #16]
 800f754:	1a98      	subs	r0, r3, r2
 800f756:	6963      	ldr	r3, [r4, #20]
 800f758:	b2f6      	uxtb	r6, r6
 800f75a:	4283      	cmp	r3, r0
 800f75c:	4637      	mov	r7, r6
 800f75e:	dc05      	bgt.n	800f76c <__swbuf_r+0x4e>
 800f760:	4621      	mov	r1, r4
 800f762:	4628      	mov	r0, r5
 800f764:	f7ff fdde 	bl	800f324 <_fflush_r>
 800f768:	2800      	cmp	r0, #0
 800f76a:	d1ed      	bne.n	800f748 <__swbuf_r+0x2a>
 800f76c:	68a3      	ldr	r3, [r4, #8]
 800f76e:	3b01      	subs	r3, #1
 800f770:	60a3      	str	r3, [r4, #8]
 800f772:	6823      	ldr	r3, [r4, #0]
 800f774:	1c5a      	adds	r2, r3, #1
 800f776:	6022      	str	r2, [r4, #0]
 800f778:	701e      	strb	r6, [r3, #0]
 800f77a:	6962      	ldr	r2, [r4, #20]
 800f77c:	1c43      	adds	r3, r0, #1
 800f77e:	429a      	cmp	r2, r3
 800f780:	d004      	beq.n	800f78c <__swbuf_r+0x6e>
 800f782:	89a3      	ldrh	r3, [r4, #12]
 800f784:	07db      	lsls	r3, r3, #31
 800f786:	d5e1      	bpl.n	800f74c <__swbuf_r+0x2e>
 800f788:	2e0a      	cmp	r6, #10
 800f78a:	d1df      	bne.n	800f74c <__swbuf_r+0x2e>
 800f78c:	4621      	mov	r1, r4
 800f78e:	4628      	mov	r0, r5
 800f790:	f7ff fdc8 	bl	800f324 <_fflush_r>
 800f794:	2800      	cmp	r0, #0
 800f796:	d0d9      	beq.n	800f74c <__swbuf_r+0x2e>
 800f798:	e7d6      	b.n	800f748 <__swbuf_r+0x2a>
	...

0800f79c <__swsetup_r>:
 800f79c:	b538      	push	{r3, r4, r5, lr}
 800f79e:	4b29      	ldr	r3, [pc, #164]	@ (800f844 <__swsetup_r+0xa8>)
 800f7a0:	4605      	mov	r5, r0
 800f7a2:	6818      	ldr	r0, [r3, #0]
 800f7a4:	460c      	mov	r4, r1
 800f7a6:	b118      	cbz	r0, 800f7b0 <__swsetup_r+0x14>
 800f7a8:	6a03      	ldr	r3, [r0, #32]
 800f7aa:	b90b      	cbnz	r3, 800f7b0 <__swsetup_r+0x14>
 800f7ac:	f7ff fe82 	bl	800f4b4 <__sinit>
 800f7b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7b4:	0719      	lsls	r1, r3, #28
 800f7b6:	d422      	bmi.n	800f7fe <__swsetup_r+0x62>
 800f7b8:	06da      	lsls	r2, r3, #27
 800f7ba:	d407      	bmi.n	800f7cc <__swsetup_r+0x30>
 800f7bc:	2209      	movs	r2, #9
 800f7be:	602a      	str	r2, [r5, #0]
 800f7c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7c4:	81a3      	strh	r3, [r4, #12]
 800f7c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f7ca:	e033      	b.n	800f834 <__swsetup_r+0x98>
 800f7cc:	0758      	lsls	r0, r3, #29
 800f7ce:	d512      	bpl.n	800f7f6 <__swsetup_r+0x5a>
 800f7d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f7d2:	b141      	cbz	r1, 800f7e6 <__swsetup_r+0x4a>
 800f7d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f7d8:	4299      	cmp	r1, r3
 800f7da:	d002      	beq.n	800f7e2 <__swsetup_r+0x46>
 800f7dc:	4628      	mov	r0, r5
 800f7de:	f000 ff3b 	bl	8010658 <_free_r>
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800f7e6:	89a3      	ldrh	r3, [r4, #12]
 800f7e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f7ec:	81a3      	strh	r3, [r4, #12]
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	6063      	str	r3, [r4, #4]
 800f7f2:	6923      	ldr	r3, [r4, #16]
 800f7f4:	6023      	str	r3, [r4, #0]
 800f7f6:	89a3      	ldrh	r3, [r4, #12]
 800f7f8:	f043 0308 	orr.w	r3, r3, #8
 800f7fc:	81a3      	strh	r3, [r4, #12]
 800f7fe:	6923      	ldr	r3, [r4, #16]
 800f800:	b94b      	cbnz	r3, 800f816 <__swsetup_r+0x7a>
 800f802:	89a3      	ldrh	r3, [r4, #12]
 800f804:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f80c:	d003      	beq.n	800f816 <__swsetup_r+0x7a>
 800f80e:	4621      	mov	r1, r4
 800f810:	4628      	mov	r0, r5
 800f812:	f003 f8b5 	bl	8012980 <__smakebuf_r>
 800f816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f81a:	f013 0201 	ands.w	r2, r3, #1
 800f81e:	d00a      	beq.n	800f836 <__swsetup_r+0x9a>
 800f820:	2200      	movs	r2, #0
 800f822:	60a2      	str	r2, [r4, #8]
 800f824:	6962      	ldr	r2, [r4, #20]
 800f826:	4252      	negs	r2, r2
 800f828:	61a2      	str	r2, [r4, #24]
 800f82a:	6922      	ldr	r2, [r4, #16]
 800f82c:	b942      	cbnz	r2, 800f840 <__swsetup_r+0xa4>
 800f82e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f832:	d1c5      	bne.n	800f7c0 <__swsetup_r+0x24>
 800f834:	bd38      	pop	{r3, r4, r5, pc}
 800f836:	0799      	lsls	r1, r3, #30
 800f838:	bf58      	it	pl
 800f83a:	6962      	ldrpl	r2, [r4, #20]
 800f83c:	60a2      	str	r2, [r4, #8]
 800f83e:	e7f4      	b.n	800f82a <__swsetup_r+0x8e>
 800f840:	2000      	movs	r0, #0
 800f842:	e7f7      	b.n	800f834 <__swsetup_r+0x98>
 800f844:	20000198 	.word	0x20000198

0800f848 <memset>:
 800f848:	4402      	add	r2, r0
 800f84a:	4603      	mov	r3, r0
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d100      	bne.n	800f852 <memset+0xa>
 800f850:	4770      	bx	lr
 800f852:	f803 1b01 	strb.w	r1, [r3], #1
 800f856:	e7f9      	b.n	800f84c <memset+0x4>

0800f858 <strncmp>:
 800f858:	b510      	push	{r4, lr}
 800f85a:	b16a      	cbz	r2, 800f878 <strncmp+0x20>
 800f85c:	3901      	subs	r1, #1
 800f85e:	1884      	adds	r4, r0, r2
 800f860:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f864:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f868:	429a      	cmp	r2, r3
 800f86a:	d103      	bne.n	800f874 <strncmp+0x1c>
 800f86c:	42a0      	cmp	r0, r4
 800f86e:	d001      	beq.n	800f874 <strncmp+0x1c>
 800f870:	2a00      	cmp	r2, #0
 800f872:	d1f5      	bne.n	800f860 <strncmp+0x8>
 800f874:	1ad0      	subs	r0, r2, r3
 800f876:	bd10      	pop	{r4, pc}
 800f878:	4610      	mov	r0, r2
 800f87a:	e7fc      	b.n	800f876 <strncmp+0x1e>

0800f87c <strstr>:
 800f87c:	780a      	ldrb	r2, [r1, #0]
 800f87e:	b570      	push	{r4, r5, r6, lr}
 800f880:	b96a      	cbnz	r2, 800f89e <strstr+0x22>
 800f882:	bd70      	pop	{r4, r5, r6, pc}
 800f884:	429a      	cmp	r2, r3
 800f886:	d109      	bne.n	800f89c <strstr+0x20>
 800f888:	460c      	mov	r4, r1
 800f88a:	4605      	mov	r5, r0
 800f88c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f890:	2b00      	cmp	r3, #0
 800f892:	d0f6      	beq.n	800f882 <strstr+0x6>
 800f894:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f898:	429e      	cmp	r6, r3
 800f89a:	d0f7      	beq.n	800f88c <strstr+0x10>
 800f89c:	3001      	adds	r0, #1
 800f89e:	7803      	ldrb	r3, [r0, #0]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d1ef      	bne.n	800f884 <strstr+0x8>
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	e7ec      	b.n	800f882 <strstr+0x6>

0800f8a8 <_localeconv_r>:
 800f8a8:	4800      	ldr	r0, [pc, #0]	@ (800f8ac <_localeconv_r+0x4>)
 800f8aa:	4770      	bx	lr
 800f8ac:	200002d8 	.word	0x200002d8

0800f8b0 <_close_r>:
 800f8b0:	b538      	push	{r3, r4, r5, lr}
 800f8b2:	4d06      	ldr	r5, [pc, #24]	@ (800f8cc <_close_r+0x1c>)
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	4604      	mov	r4, r0
 800f8b8:	4608      	mov	r0, r1
 800f8ba:	602b      	str	r3, [r5, #0]
 800f8bc:	f7f3 f8bd 	bl	8002a3a <_close>
 800f8c0:	1c43      	adds	r3, r0, #1
 800f8c2:	d102      	bne.n	800f8ca <_close_r+0x1a>
 800f8c4:	682b      	ldr	r3, [r5, #0]
 800f8c6:	b103      	cbz	r3, 800f8ca <_close_r+0x1a>
 800f8c8:	6023      	str	r3, [r4, #0]
 800f8ca:	bd38      	pop	{r3, r4, r5, pc}
 800f8cc:	20002250 	.word	0x20002250

0800f8d0 <_lseek_r>:
 800f8d0:	b538      	push	{r3, r4, r5, lr}
 800f8d2:	4d07      	ldr	r5, [pc, #28]	@ (800f8f0 <_lseek_r+0x20>)
 800f8d4:	4604      	mov	r4, r0
 800f8d6:	4608      	mov	r0, r1
 800f8d8:	4611      	mov	r1, r2
 800f8da:	2200      	movs	r2, #0
 800f8dc:	602a      	str	r2, [r5, #0]
 800f8de:	461a      	mov	r2, r3
 800f8e0:	f7f3 f8d2 	bl	8002a88 <_lseek>
 800f8e4:	1c43      	adds	r3, r0, #1
 800f8e6:	d102      	bne.n	800f8ee <_lseek_r+0x1e>
 800f8e8:	682b      	ldr	r3, [r5, #0]
 800f8ea:	b103      	cbz	r3, 800f8ee <_lseek_r+0x1e>
 800f8ec:	6023      	str	r3, [r4, #0]
 800f8ee:	bd38      	pop	{r3, r4, r5, pc}
 800f8f0:	20002250 	.word	0x20002250

0800f8f4 <_read_r>:
 800f8f4:	b538      	push	{r3, r4, r5, lr}
 800f8f6:	4d07      	ldr	r5, [pc, #28]	@ (800f914 <_read_r+0x20>)
 800f8f8:	4604      	mov	r4, r0
 800f8fa:	4608      	mov	r0, r1
 800f8fc:	4611      	mov	r1, r2
 800f8fe:	2200      	movs	r2, #0
 800f900:	602a      	str	r2, [r5, #0]
 800f902:	461a      	mov	r2, r3
 800f904:	f7f3 f87c 	bl	8002a00 <_read>
 800f908:	1c43      	adds	r3, r0, #1
 800f90a:	d102      	bne.n	800f912 <_read_r+0x1e>
 800f90c:	682b      	ldr	r3, [r5, #0]
 800f90e:	b103      	cbz	r3, 800f912 <_read_r+0x1e>
 800f910:	6023      	str	r3, [r4, #0]
 800f912:	bd38      	pop	{r3, r4, r5, pc}
 800f914:	20002250 	.word	0x20002250

0800f918 <_write_r>:
 800f918:	b538      	push	{r3, r4, r5, lr}
 800f91a:	4d07      	ldr	r5, [pc, #28]	@ (800f938 <_write_r+0x20>)
 800f91c:	4604      	mov	r4, r0
 800f91e:	4608      	mov	r0, r1
 800f920:	4611      	mov	r1, r2
 800f922:	2200      	movs	r2, #0
 800f924:	602a      	str	r2, [r5, #0]
 800f926:	461a      	mov	r2, r3
 800f928:	f7f2 fdb8 	bl	800249c <_write>
 800f92c:	1c43      	adds	r3, r0, #1
 800f92e:	d102      	bne.n	800f936 <_write_r+0x1e>
 800f930:	682b      	ldr	r3, [r5, #0]
 800f932:	b103      	cbz	r3, 800f936 <_write_r+0x1e>
 800f934:	6023      	str	r3, [r4, #0]
 800f936:	bd38      	pop	{r3, r4, r5, pc}
 800f938:	20002250 	.word	0x20002250

0800f93c <__errno>:
 800f93c:	4b01      	ldr	r3, [pc, #4]	@ (800f944 <__errno+0x8>)
 800f93e:	6818      	ldr	r0, [r3, #0]
 800f940:	4770      	bx	lr
 800f942:	bf00      	nop
 800f944:	20000198 	.word	0x20000198

0800f948 <__libc_init_array>:
 800f948:	b570      	push	{r4, r5, r6, lr}
 800f94a:	4d0d      	ldr	r5, [pc, #52]	@ (800f980 <__libc_init_array+0x38>)
 800f94c:	4c0d      	ldr	r4, [pc, #52]	@ (800f984 <__libc_init_array+0x3c>)
 800f94e:	1b64      	subs	r4, r4, r5
 800f950:	10a4      	asrs	r4, r4, #2
 800f952:	2600      	movs	r6, #0
 800f954:	42a6      	cmp	r6, r4
 800f956:	d109      	bne.n	800f96c <__libc_init_array+0x24>
 800f958:	4d0b      	ldr	r5, [pc, #44]	@ (800f988 <__libc_init_array+0x40>)
 800f95a:	4c0c      	ldr	r4, [pc, #48]	@ (800f98c <__libc_init_array+0x44>)
 800f95c:	f003 fe20 	bl	80135a0 <_init>
 800f960:	1b64      	subs	r4, r4, r5
 800f962:	10a4      	asrs	r4, r4, #2
 800f964:	2600      	movs	r6, #0
 800f966:	42a6      	cmp	r6, r4
 800f968:	d105      	bne.n	800f976 <__libc_init_array+0x2e>
 800f96a:	bd70      	pop	{r4, r5, r6, pc}
 800f96c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f970:	4798      	blx	r3
 800f972:	3601      	adds	r6, #1
 800f974:	e7ee      	b.n	800f954 <__libc_init_array+0xc>
 800f976:	f855 3b04 	ldr.w	r3, [r5], #4
 800f97a:	4798      	blx	r3
 800f97c:	3601      	adds	r6, #1
 800f97e:	e7f2      	b.n	800f966 <__libc_init_array+0x1e>
 800f980:	08013cf0 	.word	0x08013cf0
 800f984:	08013cf0 	.word	0x08013cf0
 800f988:	08013cf0 	.word	0x08013cf0
 800f98c:	08013cf4 	.word	0x08013cf4

0800f990 <__retarget_lock_init_recursive>:
 800f990:	4770      	bx	lr

0800f992 <__retarget_lock_acquire_recursive>:
 800f992:	4770      	bx	lr

0800f994 <__retarget_lock_release_recursive>:
 800f994:	4770      	bx	lr

0800f996 <memcpy>:
 800f996:	440a      	add	r2, r1
 800f998:	4291      	cmp	r1, r2
 800f99a:	f100 33ff 	add.w	r3, r0, #4294967295
 800f99e:	d100      	bne.n	800f9a2 <memcpy+0xc>
 800f9a0:	4770      	bx	lr
 800f9a2:	b510      	push	{r4, lr}
 800f9a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9ac:	4291      	cmp	r1, r2
 800f9ae:	d1f9      	bne.n	800f9a4 <memcpy+0xe>
 800f9b0:	bd10      	pop	{r4, pc}
	...

0800f9b4 <nanf>:
 800f9b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f9bc <nanf+0x8>
 800f9b8:	4770      	bx	lr
 800f9ba:	bf00      	nop
 800f9bc:	7fc00000 	.word	0x7fc00000

0800f9c0 <quorem>:
 800f9c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c4:	6903      	ldr	r3, [r0, #16]
 800f9c6:	690c      	ldr	r4, [r1, #16]
 800f9c8:	42a3      	cmp	r3, r4
 800f9ca:	4607      	mov	r7, r0
 800f9cc:	db7e      	blt.n	800facc <quorem+0x10c>
 800f9ce:	3c01      	subs	r4, #1
 800f9d0:	f101 0814 	add.w	r8, r1, #20
 800f9d4:	00a3      	lsls	r3, r4, #2
 800f9d6:	f100 0514 	add.w	r5, r0, #20
 800f9da:	9300      	str	r3, [sp, #0]
 800f9dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f9e0:	9301      	str	r3, [sp, #4]
 800f9e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f9e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f9f2:	fbb2 f6f3 	udiv	r6, r2, r3
 800f9f6:	d32e      	bcc.n	800fa56 <quorem+0x96>
 800f9f8:	f04f 0a00 	mov.w	sl, #0
 800f9fc:	46c4      	mov	ip, r8
 800f9fe:	46ae      	mov	lr, r5
 800fa00:	46d3      	mov	fp, sl
 800fa02:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fa06:	b298      	uxth	r0, r3
 800fa08:	fb06 a000 	mla	r0, r6, r0, sl
 800fa0c:	0c02      	lsrs	r2, r0, #16
 800fa0e:	0c1b      	lsrs	r3, r3, #16
 800fa10:	fb06 2303 	mla	r3, r6, r3, r2
 800fa14:	f8de 2000 	ldr.w	r2, [lr]
 800fa18:	b280      	uxth	r0, r0
 800fa1a:	b292      	uxth	r2, r2
 800fa1c:	1a12      	subs	r2, r2, r0
 800fa1e:	445a      	add	r2, fp
 800fa20:	f8de 0000 	ldr.w	r0, [lr]
 800fa24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fa2e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fa32:	b292      	uxth	r2, r2
 800fa34:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fa38:	45e1      	cmp	r9, ip
 800fa3a:	f84e 2b04 	str.w	r2, [lr], #4
 800fa3e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fa42:	d2de      	bcs.n	800fa02 <quorem+0x42>
 800fa44:	9b00      	ldr	r3, [sp, #0]
 800fa46:	58eb      	ldr	r3, [r5, r3]
 800fa48:	b92b      	cbnz	r3, 800fa56 <quorem+0x96>
 800fa4a:	9b01      	ldr	r3, [sp, #4]
 800fa4c:	3b04      	subs	r3, #4
 800fa4e:	429d      	cmp	r5, r3
 800fa50:	461a      	mov	r2, r3
 800fa52:	d32f      	bcc.n	800fab4 <quorem+0xf4>
 800fa54:	613c      	str	r4, [r7, #16]
 800fa56:	4638      	mov	r0, r7
 800fa58:	f001 f9c2 	bl	8010de0 <__mcmp>
 800fa5c:	2800      	cmp	r0, #0
 800fa5e:	db25      	blt.n	800faac <quorem+0xec>
 800fa60:	4629      	mov	r1, r5
 800fa62:	2000      	movs	r0, #0
 800fa64:	f858 2b04 	ldr.w	r2, [r8], #4
 800fa68:	f8d1 c000 	ldr.w	ip, [r1]
 800fa6c:	fa1f fe82 	uxth.w	lr, r2
 800fa70:	fa1f f38c 	uxth.w	r3, ip
 800fa74:	eba3 030e 	sub.w	r3, r3, lr
 800fa78:	4403      	add	r3, r0
 800fa7a:	0c12      	lsrs	r2, r2, #16
 800fa7c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fa80:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fa84:	b29b      	uxth	r3, r3
 800fa86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa8a:	45c1      	cmp	r9, r8
 800fa8c:	f841 3b04 	str.w	r3, [r1], #4
 800fa90:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fa94:	d2e6      	bcs.n	800fa64 <quorem+0xa4>
 800fa96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa9e:	b922      	cbnz	r2, 800faaa <quorem+0xea>
 800faa0:	3b04      	subs	r3, #4
 800faa2:	429d      	cmp	r5, r3
 800faa4:	461a      	mov	r2, r3
 800faa6:	d30b      	bcc.n	800fac0 <quorem+0x100>
 800faa8:	613c      	str	r4, [r7, #16]
 800faaa:	3601      	adds	r6, #1
 800faac:	4630      	mov	r0, r6
 800faae:	b003      	add	sp, #12
 800fab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fab4:	6812      	ldr	r2, [r2, #0]
 800fab6:	3b04      	subs	r3, #4
 800fab8:	2a00      	cmp	r2, #0
 800faba:	d1cb      	bne.n	800fa54 <quorem+0x94>
 800fabc:	3c01      	subs	r4, #1
 800fabe:	e7c6      	b.n	800fa4e <quorem+0x8e>
 800fac0:	6812      	ldr	r2, [r2, #0]
 800fac2:	3b04      	subs	r3, #4
 800fac4:	2a00      	cmp	r2, #0
 800fac6:	d1ef      	bne.n	800faa8 <quorem+0xe8>
 800fac8:	3c01      	subs	r4, #1
 800faca:	e7ea      	b.n	800faa2 <quorem+0xe2>
 800facc:	2000      	movs	r0, #0
 800face:	e7ee      	b.n	800faae <quorem+0xee>

0800fad0 <_dtoa_r>:
 800fad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fad4:	69c7      	ldr	r7, [r0, #28]
 800fad6:	b099      	sub	sp, #100	@ 0x64
 800fad8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fadc:	ec55 4b10 	vmov	r4, r5, d0
 800fae0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fae2:	9109      	str	r1, [sp, #36]	@ 0x24
 800fae4:	4683      	mov	fp, r0
 800fae6:	920e      	str	r2, [sp, #56]	@ 0x38
 800fae8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800faea:	b97f      	cbnz	r7, 800fb0c <_dtoa_r+0x3c>
 800faec:	2010      	movs	r0, #16
 800faee:	f000 fdfd 	bl	80106ec <malloc>
 800faf2:	4602      	mov	r2, r0
 800faf4:	f8cb 001c 	str.w	r0, [fp, #28]
 800faf8:	b920      	cbnz	r0, 800fb04 <_dtoa_r+0x34>
 800fafa:	4ba7      	ldr	r3, [pc, #668]	@ (800fd98 <_dtoa_r+0x2c8>)
 800fafc:	21ef      	movs	r1, #239	@ 0xef
 800fafe:	48a7      	ldr	r0, [pc, #668]	@ (800fd9c <_dtoa_r+0x2cc>)
 800fb00:	f003 f842 	bl	8012b88 <__assert_func>
 800fb04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fb08:	6007      	str	r7, [r0, #0]
 800fb0a:	60c7      	str	r7, [r0, #12]
 800fb0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fb10:	6819      	ldr	r1, [r3, #0]
 800fb12:	b159      	cbz	r1, 800fb2c <_dtoa_r+0x5c>
 800fb14:	685a      	ldr	r2, [r3, #4]
 800fb16:	604a      	str	r2, [r1, #4]
 800fb18:	2301      	movs	r3, #1
 800fb1a:	4093      	lsls	r3, r2
 800fb1c:	608b      	str	r3, [r1, #8]
 800fb1e:	4658      	mov	r0, fp
 800fb20:	f000 feda 	bl	80108d8 <_Bfree>
 800fb24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fb28:	2200      	movs	r2, #0
 800fb2a:	601a      	str	r2, [r3, #0]
 800fb2c:	1e2b      	subs	r3, r5, #0
 800fb2e:	bfb9      	ittee	lt
 800fb30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fb34:	9303      	strlt	r3, [sp, #12]
 800fb36:	2300      	movge	r3, #0
 800fb38:	6033      	strge	r3, [r6, #0]
 800fb3a:	9f03      	ldr	r7, [sp, #12]
 800fb3c:	4b98      	ldr	r3, [pc, #608]	@ (800fda0 <_dtoa_r+0x2d0>)
 800fb3e:	bfbc      	itt	lt
 800fb40:	2201      	movlt	r2, #1
 800fb42:	6032      	strlt	r2, [r6, #0]
 800fb44:	43bb      	bics	r3, r7
 800fb46:	d112      	bne.n	800fb6e <_dtoa_r+0x9e>
 800fb48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fb4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fb4e:	6013      	str	r3, [r2, #0]
 800fb50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fb54:	4323      	orrs	r3, r4
 800fb56:	f000 854d 	beq.w	80105f4 <_dtoa_r+0xb24>
 800fb5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fb5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fdb4 <_dtoa_r+0x2e4>
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	f000 854f 	beq.w	8010604 <_dtoa_r+0xb34>
 800fb66:	f10a 0303 	add.w	r3, sl, #3
 800fb6a:	f000 bd49 	b.w	8010600 <_dtoa_r+0xb30>
 800fb6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fb72:	2200      	movs	r2, #0
 800fb74:	ec51 0b17 	vmov	r0, r1, d7
 800fb78:	2300      	movs	r3, #0
 800fb7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fb7e:	f7f0 ffa3 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb82:	4680      	mov	r8, r0
 800fb84:	b158      	cbz	r0, 800fb9e <_dtoa_r+0xce>
 800fb86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fb88:	2301      	movs	r3, #1
 800fb8a:	6013      	str	r3, [r2, #0]
 800fb8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fb8e:	b113      	cbz	r3, 800fb96 <_dtoa_r+0xc6>
 800fb90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fb92:	4b84      	ldr	r3, [pc, #528]	@ (800fda4 <_dtoa_r+0x2d4>)
 800fb94:	6013      	str	r3, [r2, #0]
 800fb96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fdb8 <_dtoa_r+0x2e8>
 800fb9a:	f000 bd33 	b.w	8010604 <_dtoa_r+0xb34>
 800fb9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fba2:	aa16      	add	r2, sp, #88	@ 0x58
 800fba4:	a917      	add	r1, sp, #92	@ 0x5c
 800fba6:	4658      	mov	r0, fp
 800fba8:	f001 fa3a 	bl	8011020 <__d2b>
 800fbac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fbb0:	4681      	mov	r9, r0
 800fbb2:	2e00      	cmp	r6, #0
 800fbb4:	d077      	beq.n	800fca6 <_dtoa_r+0x1d6>
 800fbb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fbb8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fbbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fbc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fbc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fbc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fbcc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fbd0:	4619      	mov	r1, r3
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	4b74      	ldr	r3, [pc, #464]	@ (800fda8 <_dtoa_r+0x2d8>)
 800fbd6:	f7f0 fb57 	bl	8000288 <__aeabi_dsub>
 800fbda:	a369      	add	r3, pc, #420	@ (adr r3, 800fd80 <_dtoa_r+0x2b0>)
 800fbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe0:	f7f0 fd0a 	bl	80005f8 <__aeabi_dmul>
 800fbe4:	a368      	add	r3, pc, #416	@ (adr r3, 800fd88 <_dtoa_r+0x2b8>)
 800fbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbea:	f7f0 fb4f 	bl	800028c <__adddf3>
 800fbee:	4604      	mov	r4, r0
 800fbf0:	4630      	mov	r0, r6
 800fbf2:	460d      	mov	r5, r1
 800fbf4:	f7f0 fc96 	bl	8000524 <__aeabi_i2d>
 800fbf8:	a365      	add	r3, pc, #404	@ (adr r3, 800fd90 <_dtoa_r+0x2c0>)
 800fbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfe:	f7f0 fcfb 	bl	80005f8 <__aeabi_dmul>
 800fc02:	4602      	mov	r2, r0
 800fc04:	460b      	mov	r3, r1
 800fc06:	4620      	mov	r0, r4
 800fc08:	4629      	mov	r1, r5
 800fc0a:	f7f0 fb3f 	bl	800028c <__adddf3>
 800fc0e:	4604      	mov	r4, r0
 800fc10:	460d      	mov	r5, r1
 800fc12:	f7f0 ffa1 	bl	8000b58 <__aeabi_d2iz>
 800fc16:	2200      	movs	r2, #0
 800fc18:	4607      	mov	r7, r0
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	4620      	mov	r0, r4
 800fc1e:	4629      	mov	r1, r5
 800fc20:	f7f0 ff5c 	bl	8000adc <__aeabi_dcmplt>
 800fc24:	b140      	cbz	r0, 800fc38 <_dtoa_r+0x168>
 800fc26:	4638      	mov	r0, r7
 800fc28:	f7f0 fc7c 	bl	8000524 <__aeabi_i2d>
 800fc2c:	4622      	mov	r2, r4
 800fc2e:	462b      	mov	r3, r5
 800fc30:	f7f0 ff4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc34:	b900      	cbnz	r0, 800fc38 <_dtoa_r+0x168>
 800fc36:	3f01      	subs	r7, #1
 800fc38:	2f16      	cmp	r7, #22
 800fc3a:	d851      	bhi.n	800fce0 <_dtoa_r+0x210>
 800fc3c:	4b5b      	ldr	r3, [pc, #364]	@ (800fdac <_dtoa_r+0x2dc>)
 800fc3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fc4a:	f7f0 ff47 	bl	8000adc <__aeabi_dcmplt>
 800fc4e:	2800      	cmp	r0, #0
 800fc50:	d048      	beq.n	800fce4 <_dtoa_r+0x214>
 800fc52:	3f01      	subs	r7, #1
 800fc54:	2300      	movs	r3, #0
 800fc56:	9312      	str	r3, [sp, #72]	@ 0x48
 800fc58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fc5a:	1b9b      	subs	r3, r3, r6
 800fc5c:	1e5a      	subs	r2, r3, #1
 800fc5e:	bf44      	itt	mi
 800fc60:	f1c3 0801 	rsbmi	r8, r3, #1
 800fc64:	2300      	movmi	r3, #0
 800fc66:	9208      	str	r2, [sp, #32]
 800fc68:	bf54      	ite	pl
 800fc6a:	f04f 0800 	movpl.w	r8, #0
 800fc6e:	9308      	strmi	r3, [sp, #32]
 800fc70:	2f00      	cmp	r7, #0
 800fc72:	db39      	blt.n	800fce8 <_dtoa_r+0x218>
 800fc74:	9b08      	ldr	r3, [sp, #32]
 800fc76:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fc78:	443b      	add	r3, r7
 800fc7a:	9308      	str	r3, [sp, #32]
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc82:	2b09      	cmp	r3, #9
 800fc84:	d864      	bhi.n	800fd50 <_dtoa_r+0x280>
 800fc86:	2b05      	cmp	r3, #5
 800fc88:	bfc4      	itt	gt
 800fc8a:	3b04      	subgt	r3, #4
 800fc8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fc8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc90:	f1a3 0302 	sub.w	r3, r3, #2
 800fc94:	bfcc      	ite	gt
 800fc96:	2400      	movgt	r4, #0
 800fc98:	2401      	movle	r4, #1
 800fc9a:	2b03      	cmp	r3, #3
 800fc9c:	d863      	bhi.n	800fd66 <_dtoa_r+0x296>
 800fc9e:	e8df f003 	tbb	[pc, r3]
 800fca2:	372a      	.short	0x372a
 800fca4:	5535      	.short	0x5535
 800fca6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fcaa:	441e      	add	r6, r3
 800fcac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fcb0:	2b20      	cmp	r3, #32
 800fcb2:	bfc1      	itttt	gt
 800fcb4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fcb8:	409f      	lslgt	r7, r3
 800fcba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fcbe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fcc2:	bfd6      	itet	le
 800fcc4:	f1c3 0320 	rsble	r3, r3, #32
 800fcc8:	ea47 0003 	orrgt.w	r0, r7, r3
 800fccc:	fa04 f003 	lslle.w	r0, r4, r3
 800fcd0:	f7f0 fc18 	bl	8000504 <__aeabi_ui2d>
 800fcd4:	2201      	movs	r2, #1
 800fcd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fcda:	3e01      	subs	r6, #1
 800fcdc:	9214      	str	r2, [sp, #80]	@ 0x50
 800fcde:	e777      	b.n	800fbd0 <_dtoa_r+0x100>
 800fce0:	2301      	movs	r3, #1
 800fce2:	e7b8      	b.n	800fc56 <_dtoa_r+0x186>
 800fce4:	9012      	str	r0, [sp, #72]	@ 0x48
 800fce6:	e7b7      	b.n	800fc58 <_dtoa_r+0x188>
 800fce8:	427b      	negs	r3, r7
 800fcea:	930a      	str	r3, [sp, #40]	@ 0x28
 800fcec:	2300      	movs	r3, #0
 800fcee:	eba8 0807 	sub.w	r8, r8, r7
 800fcf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fcf4:	e7c4      	b.n	800fc80 <_dtoa_r+0x1b0>
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fcfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	dc35      	bgt.n	800fd6c <_dtoa_r+0x29c>
 800fd00:	2301      	movs	r3, #1
 800fd02:	9300      	str	r3, [sp, #0]
 800fd04:	9307      	str	r3, [sp, #28]
 800fd06:	461a      	mov	r2, r3
 800fd08:	920e      	str	r2, [sp, #56]	@ 0x38
 800fd0a:	e00b      	b.n	800fd24 <_dtoa_r+0x254>
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	e7f3      	b.n	800fcf8 <_dtoa_r+0x228>
 800fd10:	2300      	movs	r3, #0
 800fd12:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd16:	18fb      	adds	r3, r7, r3
 800fd18:	9300      	str	r3, [sp, #0]
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	9307      	str	r3, [sp, #28]
 800fd20:	bfb8      	it	lt
 800fd22:	2301      	movlt	r3, #1
 800fd24:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fd28:	2100      	movs	r1, #0
 800fd2a:	2204      	movs	r2, #4
 800fd2c:	f102 0514 	add.w	r5, r2, #20
 800fd30:	429d      	cmp	r5, r3
 800fd32:	d91f      	bls.n	800fd74 <_dtoa_r+0x2a4>
 800fd34:	6041      	str	r1, [r0, #4]
 800fd36:	4658      	mov	r0, fp
 800fd38:	f000 fd8e 	bl	8010858 <_Balloc>
 800fd3c:	4682      	mov	sl, r0
 800fd3e:	2800      	cmp	r0, #0
 800fd40:	d13c      	bne.n	800fdbc <_dtoa_r+0x2ec>
 800fd42:	4b1b      	ldr	r3, [pc, #108]	@ (800fdb0 <_dtoa_r+0x2e0>)
 800fd44:	4602      	mov	r2, r0
 800fd46:	f240 11af 	movw	r1, #431	@ 0x1af
 800fd4a:	e6d8      	b.n	800fafe <_dtoa_r+0x2e>
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	e7e0      	b.n	800fd12 <_dtoa_r+0x242>
 800fd50:	2401      	movs	r4, #1
 800fd52:	2300      	movs	r3, #0
 800fd54:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd56:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fd58:	f04f 33ff 	mov.w	r3, #4294967295
 800fd5c:	9300      	str	r3, [sp, #0]
 800fd5e:	9307      	str	r3, [sp, #28]
 800fd60:	2200      	movs	r2, #0
 800fd62:	2312      	movs	r3, #18
 800fd64:	e7d0      	b.n	800fd08 <_dtoa_r+0x238>
 800fd66:	2301      	movs	r3, #1
 800fd68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd6a:	e7f5      	b.n	800fd58 <_dtoa_r+0x288>
 800fd6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd6e:	9300      	str	r3, [sp, #0]
 800fd70:	9307      	str	r3, [sp, #28]
 800fd72:	e7d7      	b.n	800fd24 <_dtoa_r+0x254>
 800fd74:	3101      	adds	r1, #1
 800fd76:	0052      	lsls	r2, r2, #1
 800fd78:	e7d8      	b.n	800fd2c <_dtoa_r+0x25c>
 800fd7a:	bf00      	nop
 800fd7c:	f3af 8000 	nop.w
 800fd80:	636f4361 	.word	0x636f4361
 800fd84:	3fd287a7 	.word	0x3fd287a7
 800fd88:	8b60c8b3 	.word	0x8b60c8b3
 800fd8c:	3fc68a28 	.word	0x3fc68a28
 800fd90:	509f79fb 	.word	0x509f79fb
 800fd94:	3fd34413 	.word	0x3fd34413
 800fd98:	080139e9 	.word	0x080139e9
 800fd9c:	08013a00 	.word	0x08013a00
 800fda0:	7ff00000 	.word	0x7ff00000
 800fda4:	08013c40 	.word	0x08013c40
 800fda8:	3ff80000 	.word	0x3ff80000
 800fdac:	08013af8 	.word	0x08013af8
 800fdb0:	08013a58 	.word	0x08013a58
 800fdb4:	080139e5 	.word	0x080139e5
 800fdb8:	08013c3f 	.word	0x08013c3f
 800fdbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fdc0:	6018      	str	r0, [r3, #0]
 800fdc2:	9b07      	ldr	r3, [sp, #28]
 800fdc4:	2b0e      	cmp	r3, #14
 800fdc6:	f200 80a4 	bhi.w	800ff12 <_dtoa_r+0x442>
 800fdca:	2c00      	cmp	r4, #0
 800fdcc:	f000 80a1 	beq.w	800ff12 <_dtoa_r+0x442>
 800fdd0:	2f00      	cmp	r7, #0
 800fdd2:	dd33      	ble.n	800fe3c <_dtoa_r+0x36c>
 800fdd4:	4bad      	ldr	r3, [pc, #692]	@ (801008c <_dtoa_r+0x5bc>)
 800fdd6:	f007 020f 	and.w	r2, r7, #15
 800fdda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fdde:	ed93 7b00 	vldr	d7, [r3]
 800fde2:	05f8      	lsls	r0, r7, #23
 800fde4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fde8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fdec:	d516      	bpl.n	800fe1c <_dtoa_r+0x34c>
 800fdee:	4ba8      	ldr	r3, [pc, #672]	@ (8010090 <_dtoa_r+0x5c0>)
 800fdf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fdf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fdf8:	f7f0 fd28 	bl	800084c <__aeabi_ddiv>
 800fdfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe00:	f004 040f 	and.w	r4, r4, #15
 800fe04:	2603      	movs	r6, #3
 800fe06:	4da2      	ldr	r5, [pc, #648]	@ (8010090 <_dtoa_r+0x5c0>)
 800fe08:	b954      	cbnz	r4, 800fe20 <_dtoa_r+0x350>
 800fe0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe12:	f7f0 fd1b 	bl	800084c <__aeabi_ddiv>
 800fe16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe1a:	e028      	b.n	800fe6e <_dtoa_r+0x39e>
 800fe1c:	2602      	movs	r6, #2
 800fe1e:	e7f2      	b.n	800fe06 <_dtoa_r+0x336>
 800fe20:	07e1      	lsls	r1, r4, #31
 800fe22:	d508      	bpl.n	800fe36 <_dtoa_r+0x366>
 800fe24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe28:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fe2c:	f7f0 fbe4 	bl	80005f8 <__aeabi_dmul>
 800fe30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe34:	3601      	adds	r6, #1
 800fe36:	1064      	asrs	r4, r4, #1
 800fe38:	3508      	adds	r5, #8
 800fe3a:	e7e5      	b.n	800fe08 <_dtoa_r+0x338>
 800fe3c:	f000 80d2 	beq.w	800ffe4 <_dtoa_r+0x514>
 800fe40:	427c      	negs	r4, r7
 800fe42:	4b92      	ldr	r3, [pc, #584]	@ (801008c <_dtoa_r+0x5bc>)
 800fe44:	4d92      	ldr	r5, [pc, #584]	@ (8010090 <_dtoa_r+0x5c0>)
 800fe46:	f004 020f 	and.w	r2, r4, #15
 800fe4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fe56:	f7f0 fbcf 	bl	80005f8 <__aeabi_dmul>
 800fe5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe5e:	1124      	asrs	r4, r4, #4
 800fe60:	2300      	movs	r3, #0
 800fe62:	2602      	movs	r6, #2
 800fe64:	2c00      	cmp	r4, #0
 800fe66:	f040 80b2 	bne.w	800ffce <_dtoa_r+0x4fe>
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d1d3      	bne.n	800fe16 <_dtoa_r+0x346>
 800fe6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fe70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	f000 80b7 	beq.w	800ffe8 <_dtoa_r+0x518>
 800fe7a:	4b86      	ldr	r3, [pc, #536]	@ (8010094 <_dtoa_r+0x5c4>)
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	4620      	mov	r0, r4
 800fe80:	4629      	mov	r1, r5
 800fe82:	f7f0 fe2b 	bl	8000adc <__aeabi_dcmplt>
 800fe86:	2800      	cmp	r0, #0
 800fe88:	f000 80ae 	beq.w	800ffe8 <_dtoa_r+0x518>
 800fe8c:	9b07      	ldr	r3, [sp, #28]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	f000 80aa 	beq.w	800ffe8 <_dtoa_r+0x518>
 800fe94:	9b00      	ldr	r3, [sp, #0]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	dd37      	ble.n	800ff0a <_dtoa_r+0x43a>
 800fe9a:	1e7b      	subs	r3, r7, #1
 800fe9c:	9304      	str	r3, [sp, #16]
 800fe9e:	4620      	mov	r0, r4
 800fea0:	4b7d      	ldr	r3, [pc, #500]	@ (8010098 <_dtoa_r+0x5c8>)
 800fea2:	2200      	movs	r2, #0
 800fea4:	4629      	mov	r1, r5
 800fea6:	f7f0 fba7 	bl	80005f8 <__aeabi_dmul>
 800feaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800feae:	9c00      	ldr	r4, [sp, #0]
 800feb0:	3601      	adds	r6, #1
 800feb2:	4630      	mov	r0, r6
 800feb4:	f7f0 fb36 	bl	8000524 <__aeabi_i2d>
 800feb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800febc:	f7f0 fb9c 	bl	80005f8 <__aeabi_dmul>
 800fec0:	4b76      	ldr	r3, [pc, #472]	@ (801009c <_dtoa_r+0x5cc>)
 800fec2:	2200      	movs	r2, #0
 800fec4:	f7f0 f9e2 	bl	800028c <__adddf3>
 800fec8:	4605      	mov	r5, r0
 800feca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fece:	2c00      	cmp	r4, #0
 800fed0:	f040 808d 	bne.w	800ffee <_dtoa_r+0x51e>
 800fed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fed8:	4b71      	ldr	r3, [pc, #452]	@ (80100a0 <_dtoa_r+0x5d0>)
 800feda:	2200      	movs	r2, #0
 800fedc:	f7f0 f9d4 	bl	8000288 <__aeabi_dsub>
 800fee0:	4602      	mov	r2, r0
 800fee2:	460b      	mov	r3, r1
 800fee4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fee8:	462a      	mov	r2, r5
 800feea:	4633      	mov	r3, r6
 800feec:	f7f0 fe14 	bl	8000b18 <__aeabi_dcmpgt>
 800fef0:	2800      	cmp	r0, #0
 800fef2:	f040 828b 	bne.w	801040c <_dtoa_r+0x93c>
 800fef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fefa:	462a      	mov	r2, r5
 800fefc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ff00:	f7f0 fdec 	bl	8000adc <__aeabi_dcmplt>
 800ff04:	2800      	cmp	r0, #0
 800ff06:	f040 8128 	bne.w	801015a <_dtoa_r+0x68a>
 800ff0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ff0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ff12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	f2c0 815a 	blt.w	80101ce <_dtoa_r+0x6fe>
 800ff1a:	2f0e      	cmp	r7, #14
 800ff1c:	f300 8157 	bgt.w	80101ce <_dtoa_r+0x6fe>
 800ff20:	4b5a      	ldr	r3, [pc, #360]	@ (801008c <_dtoa_r+0x5bc>)
 800ff22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ff26:	ed93 7b00 	vldr	d7, [r3]
 800ff2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	ed8d 7b00 	vstr	d7, [sp]
 800ff32:	da03      	bge.n	800ff3c <_dtoa_r+0x46c>
 800ff34:	9b07      	ldr	r3, [sp, #28]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	f340 8101 	ble.w	801013e <_dtoa_r+0x66e>
 800ff3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ff40:	4656      	mov	r6, sl
 800ff42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff46:	4620      	mov	r0, r4
 800ff48:	4629      	mov	r1, r5
 800ff4a:	f7f0 fc7f 	bl	800084c <__aeabi_ddiv>
 800ff4e:	f7f0 fe03 	bl	8000b58 <__aeabi_d2iz>
 800ff52:	4680      	mov	r8, r0
 800ff54:	f7f0 fae6 	bl	8000524 <__aeabi_i2d>
 800ff58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff5c:	f7f0 fb4c 	bl	80005f8 <__aeabi_dmul>
 800ff60:	4602      	mov	r2, r0
 800ff62:	460b      	mov	r3, r1
 800ff64:	4620      	mov	r0, r4
 800ff66:	4629      	mov	r1, r5
 800ff68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ff6c:	f7f0 f98c 	bl	8000288 <__aeabi_dsub>
 800ff70:	f806 4b01 	strb.w	r4, [r6], #1
 800ff74:	9d07      	ldr	r5, [sp, #28]
 800ff76:	eba6 040a 	sub.w	r4, r6, sl
 800ff7a:	42a5      	cmp	r5, r4
 800ff7c:	4602      	mov	r2, r0
 800ff7e:	460b      	mov	r3, r1
 800ff80:	f040 8117 	bne.w	80101b2 <_dtoa_r+0x6e2>
 800ff84:	f7f0 f982 	bl	800028c <__adddf3>
 800ff88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff8c:	4604      	mov	r4, r0
 800ff8e:	460d      	mov	r5, r1
 800ff90:	f7f0 fdc2 	bl	8000b18 <__aeabi_dcmpgt>
 800ff94:	2800      	cmp	r0, #0
 800ff96:	f040 80f9 	bne.w	801018c <_dtoa_r+0x6bc>
 800ff9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	4629      	mov	r1, r5
 800ffa2:	f7f0 fd91 	bl	8000ac8 <__aeabi_dcmpeq>
 800ffa6:	b118      	cbz	r0, 800ffb0 <_dtoa_r+0x4e0>
 800ffa8:	f018 0f01 	tst.w	r8, #1
 800ffac:	f040 80ee 	bne.w	801018c <_dtoa_r+0x6bc>
 800ffb0:	4649      	mov	r1, r9
 800ffb2:	4658      	mov	r0, fp
 800ffb4:	f000 fc90 	bl	80108d8 <_Bfree>
 800ffb8:	2300      	movs	r3, #0
 800ffba:	7033      	strb	r3, [r6, #0]
 800ffbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ffbe:	3701      	adds	r7, #1
 800ffc0:	601f      	str	r7, [r3, #0]
 800ffc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	f000 831d 	beq.w	8010604 <_dtoa_r+0xb34>
 800ffca:	601e      	str	r6, [r3, #0]
 800ffcc:	e31a      	b.n	8010604 <_dtoa_r+0xb34>
 800ffce:	07e2      	lsls	r2, r4, #31
 800ffd0:	d505      	bpl.n	800ffde <_dtoa_r+0x50e>
 800ffd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ffd6:	f7f0 fb0f 	bl	80005f8 <__aeabi_dmul>
 800ffda:	3601      	adds	r6, #1
 800ffdc:	2301      	movs	r3, #1
 800ffde:	1064      	asrs	r4, r4, #1
 800ffe0:	3508      	adds	r5, #8
 800ffe2:	e73f      	b.n	800fe64 <_dtoa_r+0x394>
 800ffe4:	2602      	movs	r6, #2
 800ffe6:	e742      	b.n	800fe6e <_dtoa_r+0x39e>
 800ffe8:	9c07      	ldr	r4, [sp, #28]
 800ffea:	9704      	str	r7, [sp, #16]
 800ffec:	e761      	b.n	800feb2 <_dtoa_r+0x3e2>
 800ffee:	4b27      	ldr	r3, [pc, #156]	@ (801008c <_dtoa_r+0x5bc>)
 800fff0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fff2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fff6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fffa:	4454      	add	r4, sl
 800fffc:	2900      	cmp	r1, #0
 800fffe:	d053      	beq.n	80100a8 <_dtoa_r+0x5d8>
 8010000:	4928      	ldr	r1, [pc, #160]	@ (80100a4 <_dtoa_r+0x5d4>)
 8010002:	2000      	movs	r0, #0
 8010004:	f7f0 fc22 	bl	800084c <__aeabi_ddiv>
 8010008:	4633      	mov	r3, r6
 801000a:	462a      	mov	r2, r5
 801000c:	f7f0 f93c 	bl	8000288 <__aeabi_dsub>
 8010010:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010014:	4656      	mov	r6, sl
 8010016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801001a:	f7f0 fd9d 	bl	8000b58 <__aeabi_d2iz>
 801001e:	4605      	mov	r5, r0
 8010020:	f7f0 fa80 	bl	8000524 <__aeabi_i2d>
 8010024:	4602      	mov	r2, r0
 8010026:	460b      	mov	r3, r1
 8010028:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801002c:	f7f0 f92c 	bl	8000288 <__aeabi_dsub>
 8010030:	3530      	adds	r5, #48	@ 0x30
 8010032:	4602      	mov	r2, r0
 8010034:	460b      	mov	r3, r1
 8010036:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801003a:	f806 5b01 	strb.w	r5, [r6], #1
 801003e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010042:	f7f0 fd4b 	bl	8000adc <__aeabi_dcmplt>
 8010046:	2800      	cmp	r0, #0
 8010048:	d171      	bne.n	801012e <_dtoa_r+0x65e>
 801004a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801004e:	4911      	ldr	r1, [pc, #68]	@ (8010094 <_dtoa_r+0x5c4>)
 8010050:	2000      	movs	r0, #0
 8010052:	f7f0 f919 	bl	8000288 <__aeabi_dsub>
 8010056:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801005a:	f7f0 fd3f 	bl	8000adc <__aeabi_dcmplt>
 801005e:	2800      	cmp	r0, #0
 8010060:	f040 8095 	bne.w	801018e <_dtoa_r+0x6be>
 8010064:	42a6      	cmp	r6, r4
 8010066:	f43f af50 	beq.w	800ff0a <_dtoa_r+0x43a>
 801006a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801006e:	4b0a      	ldr	r3, [pc, #40]	@ (8010098 <_dtoa_r+0x5c8>)
 8010070:	2200      	movs	r2, #0
 8010072:	f7f0 fac1 	bl	80005f8 <__aeabi_dmul>
 8010076:	4b08      	ldr	r3, [pc, #32]	@ (8010098 <_dtoa_r+0x5c8>)
 8010078:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801007c:	2200      	movs	r2, #0
 801007e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010082:	f7f0 fab9 	bl	80005f8 <__aeabi_dmul>
 8010086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801008a:	e7c4      	b.n	8010016 <_dtoa_r+0x546>
 801008c:	08013af8 	.word	0x08013af8
 8010090:	08013ad0 	.word	0x08013ad0
 8010094:	3ff00000 	.word	0x3ff00000
 8010098:	40240000 	.word	0x40240000
 801009c:	401c0000 	.word	0x401c0000
 80100a0:	40140000 	.word	0x40140000
 80100a4:	3fe00000 	.word	0x3fe00000
 80100a8:	4631      	mov	r1, r6
 80100aa:	4628      	mov	r0, r5
 80100ac:	f7f0 faa4 	bl	80005f8 <__aeabi_dmul>
 80100b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80100b4:	9415      	str	r4, [sp, #84]	@ 0x54
 80100b6:	4656      	mov	r6, sl
 80100b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100bc:	f7f0 fd4c 	bl	8000b58 <__aeabi_d2iz>
 80100c0:	4605      	mov	r5, r0
 80100c2:	f7f0 fa2f 	bl	8000524 <__aeabi_i2d>
 80100c6:	4602      	mov	r2, r0
 80100c8:	460b      	mov	r3, r1
 80100ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100ce:	f7f0 f8db 	bl	8000288 <__aeabi_dsub>
 80100d2:	3530      	adds	r5, #48	@ 0x30
 80100d4:	f806 5b01 	strb.w	r5, [r6], #1
 80100d8:	4602      	mov	r2, r0
 80100da:	460b      	mov	r3, r1
 80100dc:	42a6      	cmp	r6, r4
 80100de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80100e2:	f04f 0200 	mov.w	r2, #0
 80100e6:	d124      	bne.n	8010132 <_dtoa_r+0x662>
 80100e8:	4bac      	ldr	r3, [pc, #688]	@ (801039c <_dtoa_r+0x8cc>)
 80100ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80100ee:	f7f0 f8cd 	bl	800028c <__adddf3>
 80100f2:	4602      	mov	r2, r0
 80100f4:	460b      	mov	r3, r1
 80100f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100fa:	f7f0 fd0d 	bl	8000b18 <__aeabi_dcmpgt>
 80100fe:	2800      	cmp	r0, #0
 8010100:	d145      	bne.n	801018e <_dtoa_r+0x6be>
 8010102:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010106:	49a5      	ldr	r1, [pc, #660]	@ (801039c <_dtoa_r+0x8cc>)
 8010108:	2000      	movs	r0, #0
 801010a:	f7f0 f8bd 	bl	8000288 <__aeabi_dsub>
 801010e:	4602      	mov	r2, r0
 8010110:	460b      	mov	r3, r1
 8010112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010116:	f7f0 fce1 	bl	8000adc <__aeabi_dcmplt>
 801011a:	2800      	cmp	r0, #0
 801011c:	f43f aef5 	beq.w	800ff0a <_dtoa_r+0x43a>
 8010120:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010122:	1e73      	subs	r3, r6, #1
 8010124:	9315      	str	r3, [sp, #84]	@ 0x54
 8010126:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801012a:	2b30      	cmp	r3, #48	@ 0x30
 801012c:	d0f8      	beq.n	8010120 <_dtoa_r+0x650>
 801012e:	9f04      	ldr	r7, [sp, #16]
 8010130:	e73e      	b.n	800ffb0 <_dtoa_r+0x4e0>
 8010132:	4b9b      	ldr	r3, [pc, #620]	@ (80103a0 <_dtoa_r+0x8d0>)
 8010134:	f7f0 fa60 	bl	80005f8 <__aeabi_dmul>
 8010138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801013c:	e7bc      	b.n	80100b8 <_dtoa_r+0x5e8>
 801013e:	d10c      	bne.n	801015a <_dtoa_r+0x68a>
 8010140:	4b98      	ldr	r3, [pc, #608]	@ (80103a4 <_dtoa_r+0x8d4>)
 8010142:	2200      	movs	r2, #0
 8010144:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010148:	f7f0 fa56 	bl	80005f8 <__aeabi_dmul>
 801014c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010150:	f7f0 fcd8 	bl	8000b04 <__aeabi_dcmpge>
 8010154:	2800      	cmp	r0, #0
 8010156:	f000 8157 	beq.w	8010408 <_dtoa_r+0x938>
 801015a:	2400      	movs	r4, #0
 801015c:	4625      	mov	r5, r4
 801015e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010160:	43db      	mvns	r3, r3
 8010162:	9304      	str	r3, [sp, #16]
 8010164:	4656      	mov	r6, sl
 8010166:	2700      	movs	r7, #0
 8010168:	4621      	mov	r1, r4
 801016a:	4658      	mov	r0, fp
 801016c:	f000 fbb4 	bl	80108d8 <_Bfree>
 8010170:	2d00      	cmp	r5, #0
 8010172:	d0dc      	beq.n	801012e <_dtoa_r+0x65e>
 8010174:	b12f      	cbz	r7, 8010182 <_dtoa_r+0x6b2>
 8010176:	42af      	cmp	r7, r5
 8010178:	d003      	beq.n	8010182 <_dtoa_r+0x6b2>
 801017a:	4639      	mov	r1, r7
 801017c:	4658      	mov	r0, fp
 801017e:	f000 fbab 	bl	80108d8 <_Bfree>
 8010182:	4629      	mov	r1, r5
 8010184:	4658      	mov	r0, fp
 8010186:	f000 fba7 	bl	80108d8 <_Bfree>
 801018a:	e7d0      	b.n	801012e <_dtoa_r+0x65e>
 801018c:	9704      	str	r7, [sp, #16]
 801018e:	4633      	mov	r3, r6
 8010190:	461e      	mov	r6, r3
 8010192:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010196:	2a39      	cmp	r2, #57	@ 0x39
 8010198:	d107      	bne.n	80101aa <_dtoa_r+0x6da>
 801019a:	459a      	cmp	sl, r3
 801019c:	d1f8      	bne.n	8010190 <_dtoa_r+0x6c0>
 801019e:	9a04      	ldr	r2, [sp, #16]
 80101a0:	3201      	adds	r2, #1
 80101a2:	9204      	str	r2, [sp, #16]
 80101a4:	2230      	movs	r2, #48	@ 0x30
 80101a6:	f88a 2000 	strb.w	r2, [sl]
 80101aa:	781a      	ldrb	r2, [r3, #0]
 80101ac:	3201      	adds	r2, #1
 80101ae:	701a      	strb	r2, [r3, #0]
 80101b0:	e7bd      	b.n	801012e <_dtoa_r+0x65e>
 80101b2:	4b7b      	ldr	r3, [pc, #492]	@ (80103a0 <_dtoa_r+0x8d0>)
 80101b4:	2200      	movs	r2, #0
 80101b6:	f7f0 fa1f 	bl	80005f8 <__aeabi_dmul>
 80101ba:	2200      	movs	r2, #0
 80101bc:	2300      	movs	r3, #0
 80101be:	4604      	mov	r4, r0
 80101c0:	460d      	mov	r5, r1
 80101c2:	f7f0 fc81 	bl	8000ac8 <__aeabi_dcmpeq>
 80101c6:	2800      	cmp	r0, #0
 80101c8:	f43f aebb 	beq.w	800ff42 <_dtoa_r+0x472>
 80101cc:	e6f0      	b.n	800ffb0 <_dtoa_r+0x4e0>
 80101ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80101d0:	2a00      	cmp	r2, #0
 80101d2:	f000 80db 	beq.w	801038c <_dtoa_r+0x8bc>
 80101d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80101d8:	2a01      	cmp	r2, #1
 80101da:	f300 80bf 	bgt.w	801035c <_dtoa_r+0x88c>
 80101de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80101e0:	2a00      	cmp	r2, #0
 80101e2:	f000 80b7 	beq.w	8010354 <_dtoa_r+0x884>
 80101e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80101ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80101ec:	4646      	mov	r6, r8
 80101ee:	9a08      	ldr	r2, [sp, #32]
 80101f0:	2101      	movs	r1, #1
 80101f2:	441a      	add	r2, r3
 80101f4:	4658      	mov	r0, fp
 80101f6:	4498      	add	r8, r3
 80101f8:	9208      	str	r2, [sp, #32]
 80101fa:	f000 fc6b 	bl	8010ad4 <__i2b>
 80101fe:	4605      	mov	r5, r0
 8010200:	b15e      	cbz	r6, 801021a <_dtoa_r+0x74a>
 8010202:	9b08      	ldr	r3, [sp, #32]
 8010204:	2b00      	cmp	r3, #0
 8010206:	dd08      	ble.n	801021a <_dtoa_r+0x74a>
 8010208:	42b3      	cmp	r3, r6
 801020a:	9a08      	ldr	r2, [sp, #32]
 801020c:	bfa8      	it	ge
 801020e:	4633      	movge	r3, r6
 8010210:	eba8 0803 	sub.w	r8, r8, r3
 8010214:	1af6      	subs	r6, r6, r3
 8010216:	1ad3      	subs	r3, r2, r3
 8010218:	9308      	str	r3, [sp, #32]
 801021a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801021c:	b1f3      	cbz	r3, 801025c <_dtoa_r+0x78c>
 801021e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010220:	2b00      	cmp	r3, #0
 8010222:	f000 80b7 	beq.w	8010394 <_dtoa_r+0x8c4>
 8010226:	b18c      	cbz	r4, 801024c <_dtoa_r+0x77c>
 8010228:	4629      	mov	r1, r5
 801022a:	4622      	mov	r2, r4
 801022c:	4658      	mov	r0, fp
 801022e:	f000 fd11 	bl	8010c54 <__pow5mult>
 8010232:	464a      	mov	r2, r9
 8010234:	4601      	mov	r1, r0
 8010236:	4605      	mov	r5, r0
 8010238:	4658      	mov	r0, fp
 801023a:	f000 fc61 	bl	8010b00 <__multiply>
 801023e:	4649      	mov	r1, r9
 8010240:	9004      	str	r0, [sp, #16]
 8010242:	4658      	mov	r0, fp
 8010244:	f000 fb48 	bl	80108d8 <_Bfree>
 8010248:	9b04      	ldr	r3, [sp, #16]
 801024a:	4699      	mov	r9, r3
 801024c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801024e:	1b1a      	subs	r2, r3, r4
 8010250:	d004      	beq.n	801025c <_dtoa_r+0x78c>
 8010252:	4649      	mov	r1, r9
 8010254:	4658      	mov	r0, fp
 8010256:	f000 fcfd 	bl	8010c54 <__pow5mult>
 801025a:	4681      	mov	r9, r0
 801025c:	2101      	movs	r1, #1
 801025e:	4658      	mov	r0, fp
 8010260:	f000 fc38 	bl	8010ad4 <__i2b>
 8010264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010266:	4604      	mov	r4, r0
 8010268:	2b00      	cmp	r3, #0
 801026a:	f000 81cf 	beq.w	801060c <_dtoa_r+0xb3c>
 801026e:	461a      	mov	r2, r3
 8010270:	4601      	mov	r1, r0
 8010272:	4658      	mov	r0, fp
 8010274:	f000 fcee 	bl	8010c54 <__pow5mult>
 8010278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801027a:	2b01      	cmp	r3, #1
 801027c:	4604      	mov	r4, r0
 801027e:	f300 8095 	bgt.w	80103ac <_dtoa_r+0x8dc>
 8010282:	9b02      	ldr	r3, [sp, #8]
 8010284:	2b00      	cmp	r3, #0
 8010286:	f040 8087 	bne.w	8010398 <_dtoa_r+0x8c8>
 801028a:	9b03      	ldr	r3, [sp, #12]
 801028c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010290:	2b00      	cmp	r3, #0
 8010292:	f040 8089 	bne.w	80103a8 <_dtoa_r+0x8d8>
 8010296:	9b03      	ldr	r3, [sp, #12]
 8010298:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801029c:	0d1b      	lsrs	r3, r3, #20
 801029e:	051b      	lsls	r3, r3, #20
 80102a0:	b12b      	cbz	r3, 80102ae <_dtoa_r+0x7de>
 80102a2:	9b08      	ldr	r3, [sp, #32]
 80102a4:	3301      	adds	r3, #1
 80102a6:	9308      	str	r3, [sp, #32]
 80102a8:	f108 0801 	add.w	r8, r8, #1
 80102ac:	2301      	movs	r3, #1
 80102ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80102b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	f000 81b0 	beq.w	8010618 <_dtoa_r+0xb48>
 80102b8:	6923      	ldr	r3, [r4, #16]
 80102ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80102be:	6918      	ldr	r0, [r3, #16]
 80102c0:	f000 fbbc 	bl	8010a3c <__hi0bits>
 80102c4:	f1c0 0020 	rsb	r0, r0, #32
 80102c8:	9b08      	ldr	r3, [sp, #32]
 80102ca:	4418      	add	r0, r3
 80102cc:	f010 001f 	ands.w	r0, r0, #31
 80102d0:	d077      	beq.n	80103c2 <_dtoa_r+0x8f2>
 80102d2:	f1c0 0320 	rsb	r3, r0, #32
 80102d6:	2b04      	cmp	r3, #4
 80102d8:	dd6b      	ble.n	80103b2 <_dtoa_r+0x8e2>
 80102da:	9b08      	ldr	r3, [sp, #32]
 80102dc:	f1c0 001c 	rsb	r0, r0, #28
 80102e0:	4403      	add	r3, r0
 80102e2:	4480      	add	r8, r0
 80102e4:	4406      	add	r6, r0
 80102e6:	9308      	str	r3, [sp, #32]
 80102e8:	f1b8 0f00 	cmp.w	r8, #0
 80102ec:	dd05      	ble.n	80102fa <_dtoa_r+0x82a>
 80102ee:	4649      	mov	r1, r9
 80102f0:	4642      	mov	r2, r8
 80102f2:	4658      	mov	r0, fp
 80102f4:	f000 fd08 	bl	8010d08 <__lshift>
 80102f8:	4681      	mov	r9, r0
 80102fa:	9b08      	ldr	r3, [sp, #32]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	dd05      	ble.n	801030c <_dtoa_r+0x83c>
 8010300:	4621      	mov	r1, r4
 8010302:	461a      	mov	r2, r3
 8010304:	4658      	mov	r0, fp
 8010306:	f000 fcff 	bl	8010d08 <__lshift>
 801030a:	4604      	mov	r4, r0
 801030c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801030e:	2b00      	cmp	r3, #0
 8010310:	d059      	beq.n	80103c6 <_dtoa_r+0x8f6>
 8010312:	4621      	mov	r1, r4
 8010314:	4648      	mov	r0, r9
 8010316:	f000 fd63 	bl	8010de0 <__mcmp>
 801031a:	2800      	cmp	r0, #0
 801031c:	da53      	bge.n	80103c6 <_dtoa_r+0x8f6>
 801031e:	1e7b      	subs	r3, r7, #1
 8010320:	9304      	str	r3, [sp, #16]
 8010322:	4649      	mov	r1, r9
 8010324:	2300      	movs	r3, #0
 8010326:	220a      	movs	r2, #10
 8010328:	4658      	mov	r0, fp
 801032a:	f000 faf7 	bl	801091c <__multadd>
 801032e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010330:	4681      	mov	r9, r0
 8010332:	2b00      	cmp	r3, #0
 8010334:	f000 8172 	beq.w	801061c <_dtoa_r+0xb4c>
 8010338:	2300      	movs	r3, #0
 801033a:	4629      	mov	r1, r5
 801033c:	220a      	movs	r2, #10
 801033e:	4658      	mov	r0, fp
 8010340:	f000 faec 	bl	801091c <__multadd>
 8010344:	9b00      	ldr	r3, [sp, #0]
 8010346:	2b00      	cmp	r3, #0
 8010348:	4605      	mov	r5, r0
 801034a:	dc67      	bgt.n	801041c <_dtoa_r+0x94c>
 801034c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801034e:	2b02      	cmp	r3, #2
 8010350:	dc41      	bgt.n	80103d6 <_dtoa_r+0x906>
 8010352:	e063      	b.n	801041c <_dtoa_r+0x94c>
 8010354:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010356:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801035a:	e746      	b.n	80101ea <_dtoa_r+0x71a>
 801035c:	9b07      	ldr	r3, [sp, #28]
 801035e:	1e5c      	subs	r4, r3, #1
 8010360:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010362:	42a3      	cmp	r3, r4
 8010364:	bfbf      	itttt	lt
 8010366:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010368:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801036a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801036c:	1ae3      	sublt	r3, r4, r3
 801036e:	bfb4      	ite	lt
 8010370:	18d2      	addlt	r2, r2, r3
 8010372:	1b1c      	subge	r4, r3, r4
 8010374:	9b07      	ldr	r3, [sp, #28]
 8010376:	bfbc      	itt	lt
 8010378:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801037a:	2400      	movlt	r4, #0
 801037c:	2b00      	cmp	r3, #0
 801037e:	bfb5      	itete	lt
 8010380:	eba8 0603 	sublt.w	r6, r8, r3
 8010384:	9b07      	ldrge	r3, [sp, #28]
 8010386:	2300      	movlt	r3, #0
 8010388:	4646      	movge	r6, r8
 801038a:	e730      	b.n	80101ee <_dtoa_r+0x71e>
 801038c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801038e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010390:	4646      	mov	r6, r8
 8010392:	e735      	b.n	8010200 <_dtoa_r+0x730>
 8010394:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010396:	e75c      	b.n	8010252 <_dtoa_r+0x782>
 8010398:	2300      	movs	r3, #0
 801039a:	e788      	b.n	80102ae <_dtoa_r+0x7de>
 801039c:	3fe00000 	.word	0x3fe00000
 80103a0:	40240000 	.word	0x40240000
 80103a4:	40140000 	.word	0x40140000
 80103a8:	9b02      	ldr	r3, [sp, #8]
 80103aa:	e780      	b.n	80102ae <_dtoa_r+0x7de>
 80103ac:	2300      	movs	r3, #0
 80103ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80103b0:	e782      	b.n	80102b8 <_dtoa_r+0x7e8>
 80103b2:	d099      	beq.n	80102e8 <_dtoa_r+0x818>
 80103b4:	9a08      	ldr	r2, [sp, #32]
 80103b6:	331c      	adds	r3, #28
 80103b8:	441a      	add	r2, r3
 80103ba:	4498      	add	r8, r3
 80103bc:	441e      	add	r6, r3
 80103be:	9208      	str	r2, [sp, #32]
 80103c0:	e792      	b.n	80102e8 <_dtoa_r+0x818>
 80103c2:	4603      	mov	r3, r0
 80103c4:	e7f6      	b.n	80103b4 <_dtoa_r+0x8e4>
 80103c6:	9b07      	ldr	r3, [sp, #28]
 80103c8:	9704      	str	r7, [sp, #16]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	dc20      	bgt.n	8010410 <_dtoa_r+0x940>
 80103ce:	9300      	str	r3, [sp, #0]
 80103d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103d2:	2b02      	cmp	r3, #2
 80103d4:	dd1e      	ble.n	8010414 <_dtoa_r+0x944>
 80103d6:	9b00      	ldr	r3, [sp, #0]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	f47f aec0 	bne.w	801015e <_dtoa_r+0x68e>
 80103de:	4621      	mov	r1, r4
 80103e0:	2205      	movs	r2, #5
 80103e2:	4658      	mov	r0, fp
 80103e4:	f000 fa9a 	bl	801091c <__multadd>
 80103e8:	4601      	mov	r1, r0
 80103ea:	4604      	mov	r4, r0
 80103ec:	4648      	mov	r0, r9
 80103ee:	f000 fcf7 	bl	8010de0 <__mcmp>
 80103f2:	2800      	cmp	r0, #0
 80103f4:	f77f aeb3 	ble.w	801015e <_dtoa_r+0x68e>
 80103f8:	4656      	mov	r6, sl
 80103fa:	2331      	movs	r3, #49	@ 0x31
 80103fc:	f806 3b01 	strb.w	r3, [r6], #1
 8010400:	9b04      	ldr	r3, [sp, #16]
 8010402:	3301      	adds	r3, #1
 8010404:	9304      	str	r3, [sp, #16]
 8010406:	e6ae      	b.n	8010166 <_dtoa_r+0x696>
 8010408:	9c07      	ldr	r4, [sp, #28]
 801040a:	9704      	str	r7, [sp, #16]
 801040c:	4625      	mov	r5, r4
 801040e:	e7f3      	b.n	80103f8 <_dtoa_r+0x928>
 8010410:	9b07      	ldr	r3, [sp, #28]
 8010412:	9300      	str	r3, [sp, #0]
 8010414:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010416:	2b00      	cmp	r3, #0
 8010418:	f000 8104 	beq.w	8010624 <_dtoa_r+0xb54>
 801041c:	2e00      	cmp	r6, #0
 801041e:	dd05      	ble.n	801042c <_dtoa_r+0x95c>
 8010420:	4629      	mov	r1, r5
 8010422:	4632      	mov	r2, r6
 8010424:	4658      	mov	r0, fp
 8010426:	f000 fc6f 	bl	8010d08 <__lshift>
 801042a:	4605      	mov	r5, r0
 801042c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801042e:	2b00      	cmp	r3, #0
 8010430:	d05a      	beq.n	80104e8 <_dtoa_r+0xa18>
 8010432:	6869      	ldr	r1, [r5, #4]
 8010434:	4658      	mov	r0, fp
 8010436:	f000 fa0f 	bl	8010858 <_Balloc>
 801043a:	4606      	mov	r6, r0
 801043c:	b928      	cbnz	r0, 801044a <_dtoa_r+0x97a>
 801043e:	4b84      	ldr	r3, [pc, #528]	@ (8010650 <_dtoa_r+0xb80>)
 8010440:	4602      	mov	r2, r0
 8010442:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010446:	f7ff bb5a 	b.w	800fafe <_dtoa_r+0x2e>
 801044a:	692a      	ldr	r2, [r5, #16]
 801044c:	3202      	adds	r2, #2
 801044e:	0092      	lsls	r2, r2, #2
 8010450:	f105 010c 	add.w	r1, r5, #12
 8010454:	300c      	adds	r0, #12
 8010456:	f7ff fa9e 	bl	800f996 <memcpy>
 801045a:	2201      	movs	r2, #1
 801045c:	4631      	mov	r1, r6
 801045e:	4658      	mov	r0, fp
 8010460:	f000 fc52 	bl	8010d08 <__lshift>
 8010464:	f10a 0301 	add.w	r3, sl, #1
 8010468:	9307      	str	r3, [sp, #28]
 801046a:	9b00      	ldr	r3, [sp, #0]
 801046c:	4453      	add	r3, sl
 801046e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010470:	9b02      	ldr	r3, [sp, #8]
 8010472:	f003 0301 	and.w	r3, r3, #1
 8010476:	462f      	mov	r7, r5
 8010478:	930a      	str	r3, [sp, #40]	@ 0x28
 801047a:	4605      	mov	r5, r0
 801047c:	9b07      	ldr	r3, [sp, #28]
 801047e:	4621      	mov	r1, r4
 8010480:	3b01      	subs	r3, #1
 8010482:	4648      	mov	r0, r9
 8010484:	9300      	str	r3, [sp, #0]
 8010486:	f7ff fa9b 	bl	800f9c0 <quorem>
 801048a:	4639      	mov	r1, r7
 801048c:	9002      	str	r0, [sp, #8]
 801048e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010492:	4648      	mov	r0, r9
 8010494:	f000 fca4 	bl	8010de0 <__mcmp>
 8010498:	462a      	mov	r2, r5
 801049a:	9008      	str	r0, [sp, #32]
 801049c:	4621      	mov	r1, r4
 801049e:	4658      	mov	r0, fp
 80104a0:	f000 fcba 	bl	8010e18 <__mdiff>
 80104a4:	68c2      	ldr	r2, [r0, #12]
 80104a6:	4606      	mov	r6, r0
 80104a8:	bb02      	cbnz	r2, 80104ec <_dtoa_r+0xa1c>
 80104aa:	4601      	mov	r1, r0
 80104ac:	4648      	mov	r0, r9
 80104ae:	f000 fc97 	bl	8010de0 <__mcmp>
 80104b2:	4602      	mov	r2, r0
 80104b4:	4631      	mov	r1, r6
 80104b6:	4658      	mov	r0, fp
 80104b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80104ba:	f000 fa0d 	bl	80108d8 <_Bfree>
 80104be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80104c2:	9e07      	ldr	r6, [sp, #28]
 80104c4:	ea43 0102 	orr.w	r1, r3, r2
 80104c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80104ca:	4319      	orrs	r1, r3
 80104cc:	d110      	bne.n	80104f0 <_dtoa_r+0xa20>
 80104ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80104d2:	d029      	beq.n	8010528 <_dtoa_r+0xa58>
 80104d4:	9b08      	ldr	r3, [sp, #32]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	dd02      	ble.n	80104e0 <_dtoa_r+0xa10>
 80104da:	9b02      	ldr	r3, [sp, #8]
 80104dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80104e0:	9b00      	ldr	r3, [sp, #0]
 80104e2:	f883 8000 	strb.w	r8, [r3]
 80104e6:	e63f      	b.n	8010168 <_dtoa_r+0x698>
 80104e8:	4628      	mov	r0, r5
 80104ea:	e7bb      	b.n	8010464 <_dtoa_r+0x994>
 80104ec:	2201      	movs	r2, #1
 80104ee:	e7e1      	b.n	80104b4 <_dtoa_r+0x9e4>
 80104f0:	9b08      	ldr	r3, [sp, #32]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	db04      	blt.n	8010500 <_dtoa_r+0xa30>
 80104f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80104f8:	430b      	orrs	r3, r1
 80104fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80104fc:	430b      	orrs	r3, r1
 80104fe:	d120      	bne.n	8010542 <_dtoa_r+0xa72>
 8010500:	2a00      	cmp	r2, #0
 8010502:	dded      	ble.n	80104e0 <_dtoa_r+0xa10>
 8010504:	4649      	mov	r1, r9
 8010506:	2201      	movs	r2, #1
 8010508:	4658      	mov	r0, fp
 801050a:	f000 fbfd 	bl	8010d08 <__lshift>
 801050e:	4621      	mov	r1, r4
 8010510:	4681      	mov	r9, r0
 8010512:	f000 fc65 	bl	8010de0 <__mcmp>
 8010516:	2800      	cmp	r0, #0
 8010518:	dc03      	bgt.n	8010522 <_dtoa_r+0xa52>
 801051a:	d1e1      	bne.n	80104e0 <_dtoa_r+0xa10>
 801051c:	f018 0f01 	tst.w	r8, #1
 8010520:	d0de      	beq.n	80104e0 <_dtoa_r+0xa10>
 8010522:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010526:	d1d8      	bne.n	80104da <_dtoa_r+0xa0a>
 8010528:	9a00      	ldr	r2, [sp, #0]
 801052a:	2339      	movs	r3, #57	@ 0x39
 801052c:	7013      	strb	r3, [r2, #0]
 801052e:	4633      	mov	r3, r6
 8010530:	461e      	mov	r6, r3
 8010532:	3b01      	subs	r3, #1
 8010534:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010538:	2a39      	cmp	r2, #57	@ 0x39
 801053a:	d052      	beq.n	80105e2 <_dtoa_r+0xb12>
 801053c:	3201      	adds	r2, #1
 801053e:	701a      	strb	r2, [r3, #0]
 8010540:	e612      	b.n	8010168 <_dtoa_r+0x698>
 8010542:	2a00      	cmp	r2, #0
 8010544:	dd07      	ble.n	8010556 <_dtoa_r+0xa86>
 8010546:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801054a:	d0ed      	beq.n	8010528 <_dtoa_r+0xa58>
 801054c:	9a00      	ldr	r2, [sp, #0]
 801054e:	f108 0301 	add.w	r3, r8, #1
 8010552:	7013      	strb	r3, [r2, #0]
 8010554:	e608      	b.n	8010168 <_dtoa_r+0x698>
 8010556:	9b07      	ldr	r3, [sp, #28]
 8010558:	9a07      	ldr	r2, [sp, #28]
 801055a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801055e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010560:	4293      	cmp	r3, r2
 8010562:	d028      	beq.n	80105b6 <_dtoa_r+0xae6>
 8010564:	4649      	mov	r1, r9
 8010566:	2300      	movs	r3, #0
 8010568:	220a      	movs	r2, #10
 801056a:	4658      	mov	r0, fp
 801056c:	f000 f9d6 	bl	801091c <__multadd>
 8010570:	42af      	cmp	r7, r5
 8010572:	4681      	mov	r9, r0
 8010574:	f04f 0300 	mov.w	r3, #0
 8010578:	f04f 020a 	mov.w	r2, #10
 801057c:	4639      	mov	r1, r7
 801057e:	4658      	mov	r0, fp
 8010580:	d107      	bne.n	8010592 <_dtoa_r+0xac2>
 8010582:	f000 f9cb 	bl	801091c <__multadd>
 8010586:	4607      	mov	r7, r0
 8010588:	4605      	mov	r5, r0
 801058a:	9b07      	ldr	r3, [sp, #28]
 801058c:	3301      	adds	r3, #1
 801058e:	9307      	str	r3, [sp, #28]
 8010590:	e774      	b.n	801047c <_dtoa_r+0x9ac>
 8010592:	f000 f9c3 	bl	801091c <__multadd>
 8010596:	4629      	mov	r1, r5
 8010598:	4607      	mov	r7, r0
 801059a:	2300      	movs	r3, #0
 801059c:	220a      	movs	r2, #10
 801059e:	4658      	mov	r0, fp
 80105a0:	f000 f9bc 	bl	801091c <__multadd>
 80105a4:	4605      	mov	r5, r0
 80105a6:	e7f0      	b.n	801058a <_dtoa_r+0xaba>
 80105a8:	9b00      	ldr	r3, [sp, #0]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	bfcc      	ite	gt
 80105ae:	461e      	movgt	r6, r3
 80105b0:	2601      	movle	r6, #1
 80105b2:	4456      	add	r6, sl
 80105b4:	2700      	movs	r7, #0
 80105b6:	4649      	mov	r1, r9
 80105b8:	2201      	movs	r2, #1
 80105ba:	4658      	mov	r0, fp
 80105bc:	f000 fba4 	bl	8010d08 <__lshift>
 80105c0:	4621      	mov	r1, r4
 80105c2:	4681      	mov	r9, r0
 80105c4:	f000 fc0c 	bl	8010de0 <__mcmp>
 80105c8:	2800      	cmp	r0, #0
 80105ca:	dcb0      	bgt.n	801052e <_dtoa_r+0xa5e>
 80105cc:	d102      	bne.n	80105d4 <_dtoa_r+0xb04>
 80105ce:	f018 0f01 	tst.w	r8, #1
 80105d2:	d1ac      	bne.n	801052e <_dtoa_r+0xa5e>
 80105d4:	4633      	mov	r3, r6
 80105d6:	461e      	mov	r6, r3
 80105d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80105dc:	2a30      	cmp	r2, #48	@ 0x30
 80105de:	d0fa      	beq.n	80105d6 <_dtoa_r+0xb06>
 80105e0:	e5c2      	b.n	8010168 <_dtoa_r+0x698>
 80105e2:	459a      	cmp	sl, r3
 80105e4:	d1a4      	bne.n	8010530 <_dtoa_r+0xa60>
 80105e6:	9b04      	ldr	r3, [sp, #16]
 80105e8:	3301      	adds	r3, #1
 80105ea:	9304      	str	r3, [sp, #16]
 80105ec:	2331      	movs	r3, #49	@ 0x31
 80105ee:	f88a 3000 	strb.w	r3, [sl]
 80105f2:	e5b9      	b.n	8010168 <_dtoa_r+0x698>
 80105f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80105f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010654 <_dtoa_r+0xb84>
 80105fa:	b11b      	cbz	r3, 8010604 <_dtoa_r+0xb34>
 80105fc:	f10a 0308 	add.w	r3, sl, #8
 8010600:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010602:	6013      	str	r3, [r2, #0]
 8010604:	4650      	mov	r0, sl
 8010606:	b019      	add	sp, #100	@ 0x64
 8010608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801060c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801060e:	2b01      	cmp	r3, #1
 8010610:	f77f ae37 	ble.w	8010282 <_dtoa_r+0x7b2>
 8010614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010616:	930a      	str	r3, [sp, #40]	@ 0x28
 8010618:	2001      	movs	r0, #1
 801061a:	e655      	b.n	80102c8 <_dtoa_r+0x7f8>
 801061c:	9b00      	ldr	r3, [sp, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	f77f aed6 	ble.w	80103d0 <_dtoa_r+0x900>
 8010624:	4656      	mov	r6, sl
 8010626:	4621      	mov	r1, r4
 8010628:	4648      	mov	r0, r9
 801062a:	f7ff f9c9 	bl	800f9c0 <quorem>
 801062e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010632:	f806 8b01 	strb.w	r8, [r6], #1
 8010636:	9b00      	ldr	r3, [sp, #0]
 8010638:	eba6 020a 	sub.w	r2, r6, sl
 801063c:	4293      	cmp	r3, r2
 801063e:	ddb3      	ble.n	80105a8 <_dtoa_r+0xad8>
 8010640:	4649      	mov	r1, r9
 8010642:	2300      	movs	r3, #0
 8010644:	220a      	movs	r2, #10
 8010646:	4658      	mov	r0, fp
 8010648:	f000 f968 	bl	801091c <__multadd>
 801064c:	4681      	mov	r9, r0
 801064e:	e7ea      	b.n	8010626 <_dtoa_r+0xb56>
 8010650:	08013a58 	.word	0x08013a58
 8010654:	080139dc 	.word	0x080139dc

08010658 <_free_r>:
 8010658:	b538      	push	{r3, r4, r5, lr}
 801065a:	4605      	mov	r5, r0
 801065c:	2900      	cmp	r1, #0
 801065e:	d041      	beq.n	80106e4 <_free_r+0x8c>
 8010660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010664:	1f0c      	subs	r4, r1, #4
 8010666:	2b00      	cmp	r3, #0
 8010668:	bfb8      	it	lt
 801066a:	18e4      	addlt	r4, r4, r3
 801066c:	f000 f8e8 	bl	8010840 <__malloc_lock>
 8010670:	4a1d      	ldr	r2, [pc, #116]	@ (80106e8 <_free_r+0x90>)
 8010672:	6813      	ldr	r3, [r2, #0]
 8010674:	b933      	cbnz	r3, 8010684 <_free_r+0x2c>
 8010676:	6063      	str	r3, [r4, #4]
 8010678:	6014      	str	r4, [r2, #0]
 801067a:	4628      	mov	r0, r5
 801067c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010680:	f000 b8e4 	b.w	801084c <__malloc_unlock>
 8010684:	42a3      	cmp	r3, r4
 8010686:	d908      	bls.n	801069a <_free_r+0x42>
 8010688:	6820      	ldr	r0, [r4, #0]
 801068a:	1821      	adds	r1, r4, r0
 801068c:	428b      	cmp	r3, r1
 801068e:	bf01      	itttt	eq
 8010690:	6819      	ldreq	r1, [r3, #0]
 8010692:	685b      	ldreq	r3, [r3, #4]
 8010694:	1809      	addeq	r1, r1, r0
 8010696:	6021      	streq	r1, [r4, #0]
 8010698:	e7ed      	b.n	8010676 <_free_r+0x1e>
 801069a:	461a      	mov	r2, r3
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	b10b      	cbz	r3, 80106a4 <_free_r+0x4c>
 80106a0:	42a3      	cmp	r3, r4
 80106a2:	d9fa      	bls.n	801069a <_free_r+0x42>
 80106a4:	6811      	ldr	r1, [r2, #0]
 80106a6:	1850      	adds	r0, r2, r1
 80106a8:	42a0      	cmp	r0, r4
 80106aa:	d10b      	bne.n	80106c4 <_free_r+0x6c>
 80106ac:	6820      	ldr	r0, [r4, #0]
 80106ae:	4401      	add	r1, r0
 80106b0:	1850      	adds	r0, r2, r1
 80106b2:	4283      	cmp	r3, r0
 80106b4:	6011      	str	r1, [r2, #0]
 80106b6:	d1e0      	bne.n	801067a <_free_r+0x22>
 80106b8:	6818      	ldr	r0, [r3, #0]
 80106ba:	685b      	ldr	r3, [r3, #4]
 80106bc:	6053      	str	r3, [r2, #4]
 80106be:	4408      	add	r0, r1
 80106c0:	6010      	str	r0, [r2, #0]
 80106c2:	e7da      	b.n	801067a <_free_r+0x22>
 80106c4:	d902      	bls.n	80106cc <_free_r+0x74>
 80106c6:	230c      	movs	r3, #12
 80106c8:	602b      	str	r3, [r5, #0]
 80106ca:	e7d6      	b.n	801067a <_free_r+0x22>
 80106cc:	6820      	ldr	r0, [r4, #0]
 80106ce:	1821      	adds	r1, r4, r0
 80106d0:	428b      	cmp	r3, r1
 80106d2:	bf04      	itt	eq
 80106d4:	6819      	ldreq	r1, [r3, #0]
 80106d6:	685b      	ldreq	r3, [r3, #4]
 80106d8:	6063      	str	r3, [r4, #4]
 80106da:	bf04      	itt	eq
 80106dc:	1809      	addeq	r1, r1, r0
 80106de:	6021      	streq	r1, [r4, #0]
 80106e0:	6054      	str	r4, [r2, #4]
 80106e2:	e7ca      	b.n	801067a <_free_r+0x22>
 80106e4:	bd38      	pop	{r3, r4, r5, pc}
 80106e6:	bf00      	nop
 80106e8:	2000225c 	.word	0x2000225c

080106ec <malloc>:
 80106ec:	4b02      	ldr	r3, [pc, #8]	@ (80106f8 <malloc+0xc>)
 80106ee:	4601      	mov	r1, r0
 80106f0:	6818      	ldr	r0, [r3, #0]
 80106f2:	f000 b825 	b.w	8010740 <_malloc_r>
 80106f6:	bf00      	nop
 80106f8:	20000198 	.word	0x20000198

080106fc <sbrk_aligned>:
 80106fc:	b570      	push	{r4, r5, r6, lr}
 80106fe:	4e0f      	ldr	r6, [pc, #60]	@ (801073c <sbrk_aligned+0x40>)
 8010700:	460c      	mov	r4, r1
 8010702:	6831      	ldr	r1, [r6, #0]
 8010704:	4605      	mov	r5, r0
 8010706:	b911      	cbnz	r1, 801070e <sbrk_aligned+0x12>
 8010708:	f002 fa26 	bl	8012b58 <_sbrk_r>
 801070c:	6030      	str	r0, [r6, #0]
 801070e:	4621      	mov	r1, r4
 8010710:	4628      	mov	r0, r5
 8010712:	f002 fa21 	bl	8012b58 <_sbrk_r>
 8010716:	1c43      	adds	r3, r0, #1
 8010718:	d103      	bne.n	8010722 <sbrk_aligned+0x26>
 801071a:	f04f 34ff 	mov.w	r4, #4294967295
 801071e:	4620      	mov	r0, r4
 8010720:	bd70      	pop	{r4, r5, r6, pc}
 8010722:	1cc4      	adds	r4, r0, #3
 8010724:	f024 0403 	bic.w	r4, r4, #3
 8010728:	42a0      	cmp	r0, r4
 801072a:	d0f8      	beq.n	801071e <sbrk_aligned+0x22>
 801072c:	1a21      	subs	r1, r4, r0
 801072e:	4628      	mov	r0, r5
 8010730:	f002 fa12 	bl	8012b58 <_sbrk_r>
 8010734:	3001      	adds	r0, #1
 8010736:	d1f2      	bne.n	801071e <sbrk_aligned+0x22>
 8010738:	e7ef      	b.n	801071a <sbrk_aligned+0x1e>
 801073a:	bf00      	nop
 801073c:	20002258 	.word	0x20002258

08010740 <_malloc_r>:
 8010740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010744:	1ccd      	adds	r5, r1, #3
 8010746:	f025 0503 	bic.w	r5, r5, #3
 801074a:	3508      	adds	r5, #8
 801074c:	2d0c      	cmp	r5, #12
 801074e:	bf38      	it	cc
 8010750:	250c      	movcc	r5, #12
 8010752:	2d00      	cmp	r5, #0
 8010754:	4606      	mov	r6, r0
 8010756:	db01      	blt.n	801075c <_malloc_r+0x1c>
 8010758:	42a9      	cmp	r1, r5
 801075a:	d904      	bls.n	8010766 <_malloc_r+0x26>
 801075c:	230c      	movs	r3, #12
 801075e:	6033      	str	r3, [r6, #0]
 8010760:	2000      	movs	r0, #0
 8010762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010766:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801083c <_malloc_r+0xfc>
 801076a:	f000 f869 	bl	8010840 <__malloc_lock>
 801076e:	f8d8 3000 	ldr.w	r3, [r8]
 8010772:	461c      	mov	r4, r3
 8010774:	bb44      	cbnz	r4, 80107c8 <_malloc_r+0x88>
 8010776:	4629      	mov	r1, r5
 8010778:	4630      	mov	r0, r6
 801077a:	f7ff ffbf 	bl	80106fc <sbrk_aligned>
 801077e:	1c43      	adds	r3, r0, #1
 8010780:	4604      	mov	r4, r0
 8010782:	d158      	bne.n	8010836 <_malloc_r+0xf6>
 8010784:	f8d8 4000 	ldr.w	r4, [r8]
 8010788:	4627      	mov	r7, r4
 801078a:	2f00      	cmp	r7, #0
 801078c:	d143      	bne.n	8010816 <_malloc_r+0xd6>
 801078e:	2c00      	cmp	r4, #0
 8010790:	d04b      	beq.n	801082a <_malloc_r+0xea>
 8010792:	6823      	ldr	r3, [r4, #0]
 8010794:	4639      	mov	r1, r7
 8010796:	4630      	mov	r0, r6
 8010798:	eb04 0903 	add.w	r9, r4, r3
 801079c:	f002 f9dc 	bl	8012b58 <_sbrk_r>
 80107a0:	4581      	cmp	r9, r0
 80107a2:	d142      	bne.n	801082a <_malloc_r+0xea>
 80107a4:	6821      	ldr	r1, [r4, #0]
 80107a6:	1a6d      	subs	r5, r5, r1
 80107a8:	4629      	mov	r1, r5
 80107aa:	4630      	mov	r0, r6
 80107ac:	f7ff ffa6 	bl	80106fc <sbrk_aligned>
 80107b0:	3001      	adds	r0, #1
 80107b2:	d03a      	beq.n	801082a <_malloc_r+0xea>
 80107b4:	6823      	ldr	r3, [r4, #0]
 80107b6:	442b      	add	r3, r5
 80107b8:	6023      	str	r3, [r4, #0]
 80107ba:	f8d8 3000 	ldr.w	r3, [r8]
 80107be:	685a      	ldr	r2, [r3, #4]
 80107c0:	bb62      	cbnz	r2, 801081c <_malloc_r+0xdc>
 80107c2:	f8c8 7000 	str.w	r7, [r8]
 80107c6:	e00f      	b.n	80107e8 <_malloc_r+0xa8>
 80107c8:	6822      	ldr	r2, [r4, #0]
 80107ca:	1b52      	subs	r2, r2, r5
 80107cc:	d420      	bmi.n	8010810 <_malloc_r+0xd0>
 80107ce:	2a0b      	cmp	r2, #11
 80107d0:	d917      	bls.n	8010802 <_malloc_r+0xc2>
 80107d2:	1961      	adds	r1, r4, r5
 80107d4:	42a3      	cmp	r3, r4
 80107d6:	6025      	str	r5, [r4, #0]
 80107d8:	bf18      	it	ne
 80107da:	6059      	strne	r1, [r3, #4]
 80107dc:	6863      	ldr	r3, [r4, #4]
 80107de:	bf08      	it	eq
 80107e0:	f8c8 1000 	streq.w	r1, [r8]
 80107e4:	5162      	str	r2, [r4, r5]
 80107e6:	604b      	str	r3, [r1, #4]
 80107e8:	4630      	mov	r0, r6
 80107ea:	f000 f82f 	bl	801084c <__malloc_unlock>
 80107ee:	f104 000b 	add.w	r0, r4, #11
 80107f2:	1d23      	adds	r3, r4, #4
 80107f4:	f020 0007 	bic.w	r0, r0, #7
 80107f8:	1ac2      	subs	r2, r0, r3
 80107fa:	bf1c      	itt	ne
 80107fc:	1a1b      	subne	r3, r3, r0
 80107fe:	50a3      	strne	r3, [r4, r2]
 8010800:	e7af      	b.n	8010762 <_malloc_r+0x22>
 8010802:	6862      	ldr	r2, [r4, #4]
 8010804:	42a3      	cmp	r3, r4
 8010806:	bf0c      	ite	eq
 8010808:	f8c8 2000 	streq.w	r2, [r8]
 801080c:	605a      	strne	r2, [r3, #4]
 801080e:	e7eb      	b.n	80107e8 <_malloc_r+0xa8>
 8010810:	4623      	mov	r3, r4
 8010812:	6864      	ldr	r4, [r4, #4]
 8010814:	e7ae      	b.n	8010774 <_malloc_r+0x34>
 8010816:	463c      	mov	r4, r7
 8010818:	687f      	ldr	r7, [r7, #4]
 801081a:	e7b6      	b.n	801078a <_malloc_r+0x4a>
 801081c:	461a      	mov	r2, r3
 801081e:	685b      	ldr	r3, [r3, #4]
 8010820:	42a3      	cmp	r3, r4
 8010822:	d1fb      	bne.n	801081c <_malloc_r+0xdc>
 8010824:	2300      	movs	r3, #0
 8010826:	6053      	str	r3, [r2, #4]
 8010828:	e7de      	b.n	80107e8 <_malloc_r+0xa8>
 801082a:	230c      	movs	r3, #12
 801082c:	6033      	str	r3, [r6, #0]
 801082e:	4630      	mov	r0, r6
 8010830:	f000 f80c 	bl	801084c <__malloc_unlock>
 8010834:	e794      	b.n	8010760 <_malloc_r+0x20>
 8010836:	6005      	str	r5, [r0, #0]
 8010838:	e7d6      	b.n	80107e8 <_malloc_r+0xa8>
 801083a:	bf00      	nop
 801083c:	2000225c 	.word	0x2000225c

08010840 <__malloc_lock>:
 8010840:	4801      	ldr	r0, [pc, #4]	@ (8010848 <__malloc_lock+0x8>)
 8010842:	f7ff b8a6 	b.w	800f992 <__retarget_lock_acquire_recursive>
 8010846:	bf00      	nop
 8010848:	20002254 	.word	0x20002254

0801084c <__malloc_unlock>:
 801084c:	4801      	ldr	r0, [pc, #4]	@ (8010854 <__malloc_unlock+0x8>)
 801084e:	f7ff b8a1 	b.w	800f994 <__retarget_lock_release_recursive>
 8010852:	bf00      	nop
 8010854:	20002254 	.word	0x20002254

08010858 <_Balloc>:
 8010858:	b570      	push	{r4, r5, r6, lr}
 801085a:	69c6      	ldr	r6, [r0, #28]
 801085c:	4604      	mov	r4, r0
 801085e:	460d      	mov	r5, r1
 8010860:	b976      	cbnz	r6, 8010880 <_Balloc+0x28>
 8010862:	2010      	movs	r0, #16
 8010864:	f7ff ff42 	bl	80106ec <malloc>
 8010868:	4602      	mov	r2, r0
 801086a:	61e0      	str	r0, [r4, #28]
 801086c:	b920      	cbnz	r0, 8010878 <_Balloc+0x20>
 801086e:	4b18      	ldr	r3, [pc, #96]	@ (80108d0 <_Balloc+0x78>)
 8010870:	4818      	ldr	r0, [pc, #96]	@ (80108d4 <_Balloc+0x7c>)
 8010872:	216b      	movs	r1, #107	@ 0x6b
 8010874:	f002 f988 	bl	8012b88 <__assert_func>
 8010878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801087c:	6006      	str	r6, [r0, #0]
 801087e:	60c6      	str	r6, [r0, #12]
 8010880:	69e6      	ldr	r6, [r4, #28]
 8010882:	68f3      	ldr	r3, [r6, #12]
 8010884:	b183      	cbz	r3, 80108a8 <_Balloc+0x50>
 8010886:	69e3      	ldr	r3, [r4, #28]
 8010888:	68db      	ldr	r3, [r3, #12]
 801088a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801088e:	b9b8      	cbnz	r0, 80108c0 <_Balloc+0x68>
 8010890:	2101      	movs	r1, #1
 8010892:	fa01 f605 	lsl.w	r6, r1, r5
 8010896:	1d72      	adds	r2, r6, #5
 8010898:	0092      	lsls	r2, r2, #2
 801089a:	4620      	mov	r0, r4
 801089c:	f002 f992 	bl	8012bc4 <_calloc_r>
 80108a0:	b160      	cbz	r0, 80108bc <_Balloc+0x64>
 80108a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80108a6:	e00e      	b.n	80108c6 <_Balloc+0x6e>
 80108a8:	2221      	movs	r2, #33	@ 0x21
 80108aa:	2104      	movs	r1, #4
 80108ac:	4620      	mov	r0, r4
 80108ae:	f002 f989 	bl	8012bc4 <_calloc_r>
 80108b2:	69e3      	ldr	r3, [r4, #28]
 80108b4:	60f0      	str	r0, [r6, #12]
 80108b6:	68db      	ldr	r3, [r3, #12]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d1e4      	bne.n	8010886 <_Balloc+0x2e>
 80108bc:	2000      	movs	r0, #0
 80108be:	bd70      	pop	{r4, r5, r6, pc}
 80108c0:	6802      	ldr	r2, [r0, #0]
 80108c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80108c6:	2300      	movs	r3, #0
 80108c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80108cc:	e7f7      	b.n	80108be <_Balloc+0x66>
 80108ce:	bf00      	nop
 80108d0:	080139e9 	.word	0x080139e9
 80108d4:	08013a69 	.word	0x08013a69

080108d8 <_Bfree>:
 80108d8:	b570      	push	{r4, r5, r6, lr}
 80108da:	69c6      	ldr	r6, [r0, #28]
 80108dc:	4605      	mov	r5, r0
 80108de:	460c      	mov	r4, r1
 80108e0:	b976      	cbnz	r6, 8010900 <_Bfree+0x28>
 80108e2:	2010      	movs	r0, #16
 80108e4:	f7ff ff02 	bl	80106ec <malloc>
 80108e8:	4602      	mov	r2, r0
 80108ea:	61e8      	str	r0, [r5, #28]
 80108ec:	b920      	cbnz	r0, 80108f8 <_Bfree+0x20>
 80108ee:	4b09      	ldr	r3, [pc, #36]	@ (8010914 <_Bfree+0x3c>)
 80108f0:	4809      	ldr	r0, [pc, #36]	@ (8010918 <_Bfree+0x40>)
 80108f2:	218f      	movs	r1, #143	@ 0x8f
 80108f4:	f002 f948 	bl	8012b88 <__assert_func>
 80108f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80108fc:	6006      	str	r6, [r0, #0]
 80108fe:	60c6      	str	r6, [r0, #12]
 8010900:	b13c      	cbz	r4, 8010912 <_Bfree+0x3a>
 8010902:	69eb      	ldr	r3, [r5, #28]
 8010904:	6862      	ldr	r2, [r4, #4]
 8010906:	68db      	ldr	r3, [r3, #12]
 8010908:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801090c:	6021      	str	r1, [r4, #0]
 801090e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010912:	bd70      	pop	{r4, r5, r6, pc}
 8010914:	080139e9 	.word	0x080139e9
 8010918:	08013a69 	.word	0x08013a69

0801091c <__multadd>:
 801091c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010920:	690d      	ldr	r5, [r1, #16]
 8010922:	4607      	mov	r7, r0
 8010924:	460c      	mov	r4, r1
 8010926:	461e      	mov	r6, r3
 8010928:	f101 0c14 	add.w	ip, r1, #20
 801092c:	2000      	movs	r0, #0
 801092e:	f8dc 3000 	ldr.w	r3, [ip]
 8010932:	b299      	uxth	r1, r3
 8010934:	fb02 6101 	mla	r1, r2, r1, r6
 8010938:	0c1e      	lsrs	r6, r3, #16
 801093a:	0c0b      	lsrs	r3, r1, #16
 801093c:	fb02 3306 	mla	r3, r2, r6, r3
 8010940:	b289      	uxth	r1, r1
 8010942:	3001      	adds	r0, #1
 8010944:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010948:	4285      	cmp	r5, r0
 801094a:	f84c 1b04 	str.w	r1, [ip], #4
 801094e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010952:	dcec      	bgt.n	801092e <__multadd+0x12>
 8010954:	b30e      	cbz	r6, 801099a <__multadd+0x7e>
 8010956:	68a3      	ldr	r3, [r4, #8]
 8010958:	42ab      	cmp	r3, r5
 801095a:	dc19      	bgt.n	8010990 <__multadd+0x74>
 801095c:	6861      	ldr	r1, [r4, #4]
 801095e:	4638      	mov	r0, r7
 8010960:	3101      	adds	r1, #1
 8010962:	f7ff ff79 	bl	8010858 <_Balloc>
 8010966:	4680      	mov	r8, r0
 8010968:	b928      	cbnz	r0, 8010976 <__multadd+0x5a>
 801096a:	4602      	mov	r2, r0
 801096c:	4b0c      	ldr	r3, [pc, #48]	@ (80109a0 <__multadd+0x84>)
 801096e:	480d      	ldr	r0, [pc, #52]	@ (80109a4 <__multadd+0x88>)
 8010970:	21ba      	movs	r1, #186	@ 0xba
 8010972:	f002 f909 	bl	8012b88 <__assert_func>
 8010976:	6922      	ldr	r2, [r4, #16]
 8010978:	3202      	adds	r2, #2
 801097a:	f104 010c 	add.w	r1, r4, #12
 801097e:	0092      	lsls	r2, r2, #2
 8010980:	300c      	adds	r0, #12
 8010982:	f7ff f808 	bl	800f996 <memcpy>
 8010986:	4621      	mov	r1, r4
 8010988:	4638      	mov	r0, r7
 801098a:	f7ff ffa5 	bl	80108d8 <_Bfree>
 801098e:	4644      	mov	r4, r8
 8010990:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010994:	3501      	adds	r5, #1
 8010996:	615e      	str	r6, [r3, #20]
 8010998:	6125      	str	r5, [r4, #16]
 801099a:	4620      	mov	r0, r4
 801099c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109a0:	08013a58 	.word	0x08013a58
 80109a4:	08013a69 	.word	0x08013a69

080109a8 <__s2b>:
 80109a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109ac:	460c      	mov	r4, r1
 80109ae:	4615      	mov	r5, r2
 80109b0:	461f      	mov	r7, r3
 80109b2:	2209      	movs	r2, #9
 80109b4:	3308      	adds	r3, #8
 80109b6:	4606      	mov	r6, r0
 80109b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80109bc:	2100      	movs	r1, #0
 80109be:	2201      	movs	r2, #1
 80109c0:	429a      	cmp	r2, r3
 80109c2:	db09      	blt.n	80109d8 <__s2b+0x30>
 80109c4:	4630      	mov	r0, r6
 80109c6:	f7ff ff47 	bl	8010858 <_Balloc>
 80109ca:	b940      	cbnz	r0, 80109de <__s2b+0x36>
 80109cc:	4602      	mov	r2, r0
 80109ce:	4b19      	ldr	r3, [pc, #100]	@ (8010a34 <__s2b+0x8c>)
 80109d0:	4819      	ldr	r0, [pc, #100]	@ (8010a38 <__s2b+0x90>)
 80109d2:	21d3      	movs	r1, #211	@ 0xd3
 80109d4:	f002 f8d8 	bl	8012b88 <__assert_func>
 80109d8:	0052      	lsls	r2, r2, #1
 80109da:	3101      	adds	r1, #1
 80109dc:	e7f0      	b.n	80109c0 <__s2b+0x18>
 80109de:	9b08      	ldr	r3, [sp, #32]
 80109e0:	6143      	str	r3, [r0, #20]
 80109e2:	2d09      	cmp	r5, #9
 80109e4:	f04f 0301 	mov.w	r3, #1
 80109e8:	6103      	str	r3, [r0, #16]
 80109ea:	dd16      	ble.n	8010a1a <__s2b+0x72>
 80109ec:	f104 0909 	add.w	r9, r4, #9
 80109f0:	46c8      	mov	r8, r9
 80109f2:	442c      	add	r4, r5
 80109f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80109f8:	4601      	mov	r1, r0
 80109fa:	3b30      	subs	r3, #48	@ 0x30
 80109fc:	220a      	movs	r2, #10
 80109fe:	4630      	mov	r0, r6
 8010a00:	f7ff ff8c 	bl	801091c <__multadd>
 8010a04:	45a0      	cmp	r8, r4
 8010a06:	d1f5      	bne.n	80109f4 <__s2b+0x4c>
 8010a08:	f1a5 0408 	sub.w	r4, r5, #8
 8010a0c:	444c      	add	r4, r9
 8010a0e:	1b2d      	subs	r5, r5, r4
 8010a10:	1963      	adds	r3, r4, r5
 8010a12:	42bb      	cmp	r3, r7
 8010a14:	db04      	blt.n	8010a20 <__s2b+0x78>
 8010a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a1a:	340a      	adds	r4, #10
 8010a1c:	2509      	movs	r5, #9
 8010a1e:	e7f6      	b.n	8010a0e <__s2b+0x66>
 8010a20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010a24:	4601      	mov	r1, r0
 8010a26:	3b30      	subs	r3, #48	@ 0x30
 8010a28:	220a      	movs	r2, #10
 8010a2a:	4630      	mov	r0, r6
 8010a2c:	f7ff ff76 	bl	801091c <__multadd>
 8010a30:	e7ee      	b.n	8010a10 <__s2b+0x68>
 8010a32:	bf00      	nop
 8010a34:	08013a58 	.word	0x08013a58
 8010a38:	08013a69 	.word	0x08013a69

08010a3c <__hi0bits>:
 8010a3c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010a40:	4603      	mov	r3, r0
 8010a42:	bf36      	itet	cc
 8010a44:	0403      	lslcc	r3, r0, #16
 8010a46:	2000      	movcs	r0, #0
 8010a48:	2010      	movcc	r0, #16
 8010a4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010a4e:	bf3c      	itt	cc
 8010a50:	021b      	lslcc	r3, r3, #8
 8010a52:	3008      	addcc	r0, #8
 8010a54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010a58:	bf3c      	itt	cc
 8010a5a:	011b      	lslcc	r3, r3, #4
 8010a5c:	3004      	addcc	r0, #4
 8010a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010a62:	bf3c      	itt	cc
 8010a64:	009b      	lslcc	r3, r3, #2
 8010a66:	3002      	addcc	r0, #2
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	db05      	blt.n	8010a78 <__hi0bits+0x3c>
 8010a6c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010a70:	f100 0001 	add.w	r0, r0, #1
 8010a74:	bf08      	it	eq
 8010a76:	2020      	moveq	r0, #32
 8010a78:	4770      	bx	lr

08010a7a <__lo0bits>:
 8010a7a:	6803      	ldr	r3, [r0, #0]
 8010a7c:	4602      	mov	r2, r0
 8010a7e:	f013 0007 	ands.w	r0, r3, #7
 8010a82:	d00b      	beq.n	8010a9c <__lo0bits+0x22>
 8010a84:	07d9      	lsls	r1, r3, #31
 8010a86:	d421      	bmi.n	8010acc <__lo0bits+0x52>
 8010a88:	0798      	lsls	r0, r3, #30
 8010a8a:	bf49      	itett	mi
 8010a8c:	085b      	lsrmi	r3, r3, #1
 8010a8e:	089b      	lsrpl	r3, r3, #2
 8010a90:	2001      	movmi	r0, #1
 8010a92:	6013      	strmi	r3, [r2, #0]
 8010a94:	bf5c      	itt	pl
 8010a96:	6013      	strpl	r3, [r2, #0]
 8010a98:	2002      	movpl	r0, #2
 8010a9a:	4770      	bx	lr
 8010a9c:	b299      	uxth	r1, r3
 8010a9e:	b909      	cbnz	r1, 8010aa4 <__lo0bits+0x2a>
 8010aa0:	0c1b      	lsrs	r3, r3, #16
 8010aa2:	2010      	movs	r0, #16
 8010aa4:	b2d9      	uxtb	r1, r3
 8010aa6:	b909      	cbnz	r1, 8010aac <__lo0bits+0x32>
 8010aa8:	3008      	adds	r0, #8
 8010aaa:	0a1b      	lsrs	r3, r3, #8
 8010aac:	0719      	lsls	r1, r3, #28
 8010aae:	bf04      	itt	eq
 8010ab0:	091b      	lsreq	r3, r3, #4
 8010ab2:	3004      	addeq	r0, #4
 8010ab4:	0799      	lsls	r1, r3, #30
 8010ab6:	bf04      	itt	eq
 8010ab8:	089b      	lsreq	r3, r3, #2
 8010aba:	3002      	addeq	r0, #2
 8010abc:	07d9      	lsls	r1, r3, #31
 8010abe:	d403      	bmi.n	8010ac8 <__lo0bits+0x4e>
 8010ac0:	085b      	lsrs	r3, r3, #1
 8010ac2:	f100 0001 	add.w	r0, r0, #1
 8010ac6:	d003      	beq.n	8010ad0 <__lo0bits+0x56>
 8010ac8:	6013      	str	r3, [r2, #0]
 8010aca:	4770      	bx	lr
 8010acc:	2000      	movs	r0, #0
 8010ace:	4770      	bx	lr
 8010ad0:	2020      	movs	r0, #32
 8010ad2:	4770      	bx	lr

08010ad4 <__i2b>:
 8010ad4:	b510      	push	{r4, lr}
 8010ad6:	460c      	mov	r4, r1
 8010ad8:	2101      	movs	r1, #1
 8010ada:	f7ff febd 	bl	8010858 <_Balloc>
 8010ade:	4602      	mov	r2, r0
 8010ae0:	b928      	cbnz	r0, 8010aee <__i2b+0x1a>
 8010ae2:	4b05      	ldr	r3, [pc, #20]	@ (8010af8 <__i2b+0x24>)
 8010ae4:	4805      	ldr	r0, [pc, #20]	@ (8010afc <__i2b+0x28>)
 8010ae6:	f240 1145 	movw	r1, #325	@ 0x145
 8010aea:	f002 f84d 	bl	8012b88 <__assert_func>
 8010aee:	2301      	movs	r3, #1
 8010af0:	6144      	str	r4, [r0, #20]
 8010af2:	6103      	str	r3, [r0, #16]
 8010af4:	bd10      	pop	{r4, pc}
 8010af6:	bf00      	nop
 8010af8:	08013a58 	.word	0x08013a58
 8010afc:	08013a69 	.word	0x08013a69

08010b00 <__multiply>:
 8010b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b04:	4614      	mov	r4, r2
 8010b06:	690a      	ldr	r2, [r1, #16]
 8010b08:	6923      	ldr	r3, [r4, #16]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	bfa8      	it	ge
 8010b0e:	4623      	movge	r3, r4
 8010b10:	460f      	mov	r7, r1
 8010b12:	bfa4      	itt	ge
 8010b14:	460c      	movge	r4, r1
 8010b16:	461f      	movge	r7, r3
 8010b18:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010b1c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010b20:	68a3      	ldr	r3, [r4, #8]
 8010b22:	6861      	ldr	r1, [r4, #4]
 8010b24:	eb0a 0609 	add.w	r6, sl, r9
 8010b28:	42b3      	cmp	r3, r6
 8010b2a:	b085      	sub	sp, #20
 8010b2c:	bfb8      	it	lt
 8010b2e:	3101      	addlt	r1, #1
 8010b30:	f7ff fe92 	bl	8010858 <_Balloc>
 8010b34:	b930      	cbnz	r0, 8010b44 <__multiply+0x44>
 8010b36:	4602      	mov	r2, r0
 8010b38:	4b44      	ldr	r3, [pc, #272]	@ (8010c4c <__multiply+0x14c>)
 8010b3a:	4845      	ldr	r0, [pc, #276]	@ (8010c50 <__multiply+0x150>)
 8010b3c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010b40:	f002 f822 	bl	8012b88 <__assert_func>
 8010b44:	f100 0514 	add.w	r5, r0, #20
 8010b48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010b4c:	462b      	mov	r3, r5
 8010b4e:	2200      	movs	r2, #0
 8010b50:	4543      	cmp	r3, r8
 8010b52:	d321      	bcc.n	8010b98 <__multiply+0x98>
 8010b54:	f107 0114 	add.w	r1, r7, #20
 8010b58:	f104 0214 	add.w	r2, r4, #20
 8010b5c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010b60:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010b64:	9302      	str	r3, [sp, #8]
 8010b66:	1b13      	subs	r3, r2, r4
 8010b68:	3b15      	subs	r3, #21
 8010b6a:	f023 0303 	bic.w	r3, r3, #3
 8010b6e:	3304      	adds	r3, #4
 8010b70:	f104 0715 	add.w	r7, r4, #21
 8010b74:	42ba      	cmp	r2, r7
 8010b76:	bf38      	it	cc
 8010b78:	2304      	movcc	r3, #4
 8010b7a:	9301      	str	r3, [sp, #4]
 8010b7c:	9b02      	ldr	r3, [sp, #8]
 8010b7e:	9103      	str	r1, [sp, #12]
 8010b80:	428b      	cmp	r3, r1
 8010b82:	d80c      	bhi.n	8010b9e <__multiply+0x9e>
 8010b84:	2e00      	cmp	r6, #0
 8010b86:	dd03      	ble.n	8010b90 <__multiply+0x90>
 8010b88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d05b      	beq.n	8010c48 <__multiply+0x148>
 8010b90:	6106      	str	r6, [r0, #16]
 8010b92:	b005      	add	sp, #20
 8010b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b98:	f843 2b04 	str.w	r2, [r3], #4
 8010b9c:	e7d8      	b.n	8010b50 <__multiply+0x50>
 8010b9e:	f8b1 a000 	ldrh.w	sl, [r1]
 8010ba2:	f1ba 0f00 	cmp.w	sl, #0
 8010ba6:	d024      	beq.n	8010bf2 <__multiply+0xf2>
 8010ba8:	f104 0e14 	add.w	lr, r4, #20
 8010bac:	46a9      	mov	r9, r5
 8010bae:	f04f 0c00 	mov.w	ip, #0
 8010bb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010bb6:	f8d9 3000 	ldr.w	r3, [r9]
 8010bba:	fa1f fb87 	uxth.w	fp, r7
 8010bbe:	b29b      	uxth	r3, r3
 8010bc0:	fb0a 330b 	mla	r3, sl, fp, r3
 8010bc4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010bc8:	f8d9 7000 	ldr.w	r7, [r9]
 8010bcc:	4463      	add	r3, ip
 8010bce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010bd2:	fb0a c70b 	mla	r7, sl, fp, ip
 8010bd6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010be0:	4572      	cmp	r2, lr
 8010be2:	f849 3b04 	str.w	r3, [r9], #4
 8010be6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010bea:	d8e2      	bhi.n	8010bb2 <__multiply+0xb2>
 8010bec:	9b01      	ldr	r3, [sp, #4]
 8010bee:	f845 c003 	str.w	ip, [r5, r3]
 8010bf2:	9b03      	ldr	r3, [sp, #12]
 8010bf4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010bf8:	3104      	adds	r1, #4
 8010bfa:	f1b9 0f00 	cmp.w	r9, #0
 8010bfe:	d021      	beq.n	8010c44 <__multiply+0x144>
 8010c00:	682b      	ldr	r3, [r5, #0]
 8010c02:	f104 0c14 	add.w	ip, r4, #20
 8010c06:	46ae      	mov	lr, r5
 8010c08:	f04f 0a00 	mov.w	sl, #0
 8010c0c:	f8bc b000 	ldrh.w	fp, [ip]
 8010c10:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010c14:	fb09 770b 	mla	r7, r9, fp, r7
 8010c18:	4457      	add	r7, sl
 8010c1a:	b29b      	uxth	r3, r3
 8010c1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010c20:	f84e 3b04 	str.w	r3, [lr], #4
 8010c24:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010c28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010c2c:	f8be 3000 	ldrh.w	r3, [lr]
 8010c30:	fb09 330a 	mla	r3, r9, sl, r3
 8010c34:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010c38:	4562      	cmp	r2, ip
 8010c3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010c3e:	d8e5      	bhi.n	8010c0c <__multiply+0x10c>
 8010c40:	9f01      	ldr	r7, [sp, #4]
 8010c42:	51eb      	str	r3, [r5, r7]
 8010c44:	3504      	adds	r5, #4
 8010c46:	e799      	b.n	8010b7c <__multiply+0x7c>
 8010c48:	3e01      	subs	r6, #1
 8010c4a:	e79b      	b.n	8010b84 <__multiply+0x84>
 8010c4c:	08013a58 	.word	0x08013a58
 8010c50:	08013a69 	.word	0x08013a69

08010c54 <__pow5mult>:
 8010c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c58:	4615      	mov	r5, r2
 8010c5a:	f012 0203 	ands.w	r2, r2, #3
 8010c5e:	4607      	mov	r7, r0
 8010c60:	460e      	mov	r6, r1
 8010c62:	d007      	beq.n	8010c74 <__pow5mult+0x20>
 8010c64:	4c25      	ldr	r4, [pc, #148]	@ (8010cfc <__pow5mult+0xa8>)
 8010c66:	3a01      	subs	r2, #1
 8010c68:	2300      	movs	r3, #0
 8010c6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010c6e:	f7ff fe55 	bl	801091c <__multadd>
 8010c72:	4606      	mov	r6, r0
 8010c74:	10ad      	asrs	r5, r5, #2
 8010c76:	d03d      	beq.n	8010cf4 <__pow5mult+0xa0>
 8010c78:	69fc      	ldr	r4, [r7, #28]
 8010c7a:	b97c      	cbnz	r4, 8010c9c <__pow5mult+0x48>
 8010c7c:	2010      	movs	r0, #16
 8010c7e:	f7ff fd35 	bl	80106ec <malloc>
 8010c82:	4602      	mov	r2, r0
 8010c84:	61f8      	str	r0, [r7, #28]
 8010c86:	b928      	cbnz	r0, 8010c94 <__pow5mult+0x40>
 8010c88:	4b1d      	ldr	r3, [pc, #116]	@ (8010d00 <__pow5mult+0xac>)
 8010c8a:	481e      	ldr	r0, [pc, #120]	@ (8010d04 <__pow5mult+0xb0>)
 8010c8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010c90:	f001 ff7a 	bl	8012b88 <__assert_func>
 8010c94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c98:	6004      	str	r4, [r0, #0]
 8010c9a:	60c4      	str	r4, [r0, #12]
 8010c9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010ca0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010ca4:	b94c      	cbnz	r4, 8010cba <__pow5mult+0x66>
 8010ca6:	f240 2171 	movw	r1, #625	@ 0x271
 8010caa:	4638      	mov	r0, r7
 8010cac:	f7ff ff12 	bl	8010ad4 <__i2b>
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8010cb6:	4604      	mov	r4, r0
 8010cb8:	6003      	str	r3, [r0, #0]
 8010cba:	f04f 0900 	mov.w	r9, #0
 8010cbe:	07eb      	lsls	r3, r5, #31
 8010cc0:	d50a      	bpl.n	8010cd8 <__pow5mult+0x84>
 8010cc2:	4631      	mov	r1, r6
 8010cc4:	4622      	mov	r2, r4
 8010cc6:	4638      	mov	r0, r7
 8010cc8:	f7ff ff1a 	bl	8010b00 <__multiply>
 8010ccc:	4631      	mov	r1, r6
 8010cce:	4680      	mov	r8, r0
 8010cd0:	4638      	mov	r0, r7
 8010cd2:	f7ff fe01 	bl	80108d8 <_Bfree>
 8010cd6:	4646      	mov	r6, r8
 8010cd8:	106d      	asrs	r5, r5, #1
 8010cda:	d00b      	beq.n	8010cf4 <__pow5mult+0xa0>
 8010cdc:	6820      	ldr	r0, [r4, #0]
 8010cde:	b938      	cbnz	r0, 8010cf0 <__pow5mult+0x9c>
 8010ce0:	4622      	mov	r2, r4
 8010ce2:	4621      	mov	r1, r4
 8010ce4:	4638      	mov	r0, r7
 8010ce6:	f7ff ff0b 	bl	8010b00 <__multiply>
 8010cea:	6020      	str	r0, [r4, #0]
 8010cec:	f8c0 9000 	str.w	r9, [r0]
 8010cf0:	4604      	mov	r4, r0
 8010cf2:	e7e4      	b.n	8010cbe <__pow5mult+0x6a>
 8010cf4:	4630      	mov	r0, r6
 8010cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cfa:	bf00      	nop
 8010cfc:	08013ac4 	.word	0x08013ac4
 8010d00:	080139e9 	.word	0x080139e9
 8010d04:	08013a69 	.word	0x08013a69

08010d08 <__lshift>:
 8010d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d0c:	460c      	mov	r4, r1
 8010d0e:	6849      	ldr	r1, [r1, #4]
 8010d10:	6923      	ldr	r3, [r4, #16]
 8010d12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010d16:	68a3      	ldr	r3, [r4, #8]
 8010d18:	4607      	mov	r7, r0
 8010d1a:	4691      	mov	r9, r2
 8010d1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010d20:	f108 0601 	add.w	r6, r8, #1
 8010d24:	42b3      	cmp	r3, r6
 8010d26:	db0b      	blt.n	8010d40 <__lshift+0x38>
 8010d28:	4638      	mov	r0, r7
 8010d2a:	f7ff fd95 	bl	8010858 <_Balloc>
 8010d2e:	4605      	mov	r5, r0
 8010d30:	b948      	cbnz	r0, 8010d46 <__lshift+0x3e>
 8010d32:	4602      	mov	r2, r0
 8010d34:	4b28      	ldr	r3, [pc, #160]	@ (8010dd8 <__lshift+0xd0>)
 8010d36:	4829      	ldr	r0, [pc, #164]	@ (8010ddc <__lshift+0xd4>)
 8010d38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010d3c:	f001 ff24 	bl	8012b88 <__assert_func>
 8010d40:	3101      	adds	r1, #1
 8010d42:	005b      	lsls	r3, r3, #1
 8010d44:	e7ee      	b.n	8010d24 <__lshift+0x1c>
 8010d46:	2300      	movs	r3, #0
 8010d48:	f100 0114 	add.w	r1, r0, #20
 8010d4c:	f100 0210 	add.w	r2, r0, #16
 8010d50:	4618      	mov	r0, r3
 8010d52:	4553      	cmp	r3, sl
 8010d54:	db33      	blt.n	8010dbe <__lshift+0xb6>
 8010d56:	6920      	ldr	r0, [r4, #16]
 8010d58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010d5c:	f104 0314 	add.w	r3, r4, #20
 8010d60:	f019 091f 	ands.w	r9, r9, #31
 8010d64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010d68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010d6c:	d02b      	beq.n	8010dc6 <__lshift+0xbe>
 8010d6e:	f1c9 0e20 	rsb	lr, r9, #32
 8010d72:	468a      	mov	sl, r1
 8010d74:	2200      	movs	r2, #0
 8010d76:	6818      	ldr	r0, [r3, #0]
 8010d78:	fa00 f009 	lsl.w	r0, r0, r9
 8010d7c:	4310      	orrs	r0, r2
 8010d7e:	f84a 0b04 	str.w	r0, [sl], #4
 8010d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d86:	459c      	cmp	ip, r3
 8010d88:	fa22 f20e 	lsr.w	r2, r2, lr
 8010d8c:	d8f3      	bhi.n	8010d76 <__lshift+0x6e>
 8010d8e:	ebac 0304 	sub.w	r3, ip, r4
 8010d92:	3b15      	subs	r3, #21
 8010d94:	f023 0303 	bic.w	r3, r3, #3
 8010d98:	3304      	adds	r3, #4
 8010d9a:	f104 0015 	add.w	r0, r4, #21
 8010d9e:	4584      	cmp	ip, r0
 8010da0:	bf38      	it	cc
 8010da2:	2304      	movcc	r3, #4
 8010da4:	50ca      	str	r2, [r1, r3]
 8010da6:	b10a      	cbz	r2, 8010dac <__lshift+0xa4>
 8010da8:	f108 0602 	add.w	r6, r8, #2
 8010dac:	3e01      	subs	r6, #1
 8010dae:	4638      	mov	r0, r7
 8010db0:	612e      	str	r6, [r5, #16]
 8010db2:	4621      	mov	r1, r4
 8010db4:	f7ff fd90 	bl	80108d8 <_Bfree>
 8010db8:	4628      	mov	r0, r5
 8010dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	e7c5      	b.n	8010d52 <__lshift+0x4a>
 8010dc6:	3904      	subs	r1, #4
 8010dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010dcc:	f841 2f04 	str.w	r2, [r1, #4]!
 8010dd0:	459c      	cmp	ip, r3
 8010dd2:	d8f9      	bhi.n	8010dc8 <__lshift+0xc0>
 8010dd4:	e7ea      	b.n	8010dac <__lshift+0xa4>
 8010dd6:	bf00      	nop
 8010dd8:	08013a58 	.word	0x08013a58
 8010ddc:	08013a69 	.word	0x08013a69

08010de0 <__mcmp>:
 8010de0:	690a      	ldr	r2, [r1, #16]
 8010de2:	4603      	mov	r3, r0
 8010de4:	6900      	ldr	r0, [r0, #16]
 8010de6:	1a80      	subs	r0, r0, r2
 8010de8:	b530      	push	{r4, r5, lr}
 8010dea:	d10e      	bne.n	8010e0a <__mcmp+0x2a>
 8010dec:	3314      	adds	r3, #20
 8010dee:	3114      	adds	r1, #20
 8010df0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010df4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010df8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010dfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010e00:	4295      	cmp	r5, r2
 8010e02:	d003      	beq.n	8010e0c <__mcmp+0x2c>
 8010e04:	d205      	bcs.n	8010e12 <__mcmp+0x32>
 8010e06:	f04f 30ff 	mov.w	r0, #4294967295
 8010e0a:	bd30      	pop	{r4, r5, pc}
 8010e0c:	42a3      	cmp	r3, r4
 8010e0e:	d3f3      	bcc.n	8010df8 <__mcmp+0x18>
 8010e10:	e7fb      	b.n	8010e0a <__mcmp+0x2a>
 8010e12:	2001      	movs	r0, #1
 8010e14:	e7f9      	b.n	8010e0a <__mcmp+0x2a>
	...

08010e18 <__mdiff>:
 8010e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e1c:	4689      	mov	r9, r1
 8010e1e:	4606      	mov	r6, r0
 8010e20:	4611      	mov	r1, r2
 8010e22:	4648      	mov	r0, r9
 8010e24:	4614      	mov	r4, r2
 8010e26:	f7ff ffdb 	bl	8010de0 <__mcmp>
 8010e2a:	1e05      	subs	r5, r0, #0
 8010e2c:	d112      	bne.n	8010e54 <__mdiff+0x3c>
 8010e2e:	4629      	mov	r1, r5
 8010e30:	4630      	mov	r0, r6
 8010e32:	f7ff fd11 	bl	8010858 <_Balloc>
 8010e36:	4602      	mov	r2, r0
 8010e38:	b928      	cbnz	r0, 8010e46 <__mdiff+0x2e>
 8010e3a:	4b3f      	ldr	r3, [pc, #252]	@ (8010f38 <__mdiff+0x120>)
 8010e3c:	f240 2137 	movw	r1, #567	@ 0x237
 8010e40:	483e      	ldr	r0, [pc, #248]	@ (8010f3c <__mdiff+0x124>)
 8010e42:	f001 fea1 	bl	8012b88 <__assert_func>
 8010e46:	2301      	movs	r3, #1
 8010e48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010e4c:	4610      	mov	r0, r2
 8010e4e:	b003      	add	sp, #12
 8010e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e54:	bfbc      	itt	lt
 8010e56:	464b      	movlt	r3, r9
 8010e58:	46a1      	movlt	r9, r4
 8010e5a:	4630      	mov	r0, r6
 8010e5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010e60:	bfba      	itte	lt
 8010e62:	461c      	movlt	r4, r3
 8010e64:	2501      	movlt	r5, #1
 8010e66:	2500      	movge	r5, #0
 8010e68:	f7ff fcf6 	bl	8010858 <_Balloc>
 8010e6c:	4602      	mov	r2, r0
 8010e6e:	b918      	cbnz	r0, 8010e78 <__mdiff+0x60>
 8010e70:	4b31      	ldr	r3, [pc, #196]	@ (8010f38 <__mdiff+0x120>)
 8010e72:	f240 2145 	movw	r1, #581	@ 0x245
 8010e76:	e7e3      	b.n	8010e40 <__mdiff+0x28>
 8010e78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010e7c:	6926      	ldr	r6, [r4, #16]
 8010e7e:	60c5      	str	r5, [r0, #12]
 8010e80:	f109 0310 	add.w	r3, r9, #16
 8010e84:	f109 0514 	add.w	r5, r9, #20
 8010e88:	f104 0e14 	add.w	lr, r4, #20
 8010e8c:	f100 0b14 	add.w	fp, r0, #20
 8010e90:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010e94:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010e98:	9301      	str	r3, [sp, #4]
 8010e9a:	46d9      	mov	r9, fp
 8010e9c:	f04f 0c00 	mov.w	ip, #0
 8010ea0:	9b01      	ldr	r3, [sp, #4]
 8010ea2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010ea6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010eaa:	9301      	str	r3, [sp, #4]
 8010eac:	fa1f f38a 	uxth.w	r3, sl
 8010eb0:	4619      	mov	r1, r3
 8010eb2:	b283      	uxth	r3, r0
 8010eb4:	1acb      	subs	r3, r1, r3
 8010eb6:	0c00      	lsrs	r0, r0, #16
 8010eb8:	4463      	add	r3, ip
 8010eba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010ebe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010ec2:	b29b      	uxth	r3, r3
 8010ec4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010ec8:	4576      	cmp	r6, lr
 8010eca:	f849 3b04 	str.w	r3, [r9], #4
 8010ece:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010ed2:	d8e5      	bhi.n	8010ea0 <__mdiff+0x88>
 8010ed4:	1b33      	subs	r3, r6, r4
 8010ed6:	3b15      	subs	r3, #21
 8010ed8:	f023 0303 	bic.w	r3, r3, #3
 8010edc:	3415      	adds	r4, #21
 8010ede:	3304      	adds	r3, #4
 8010ee0:	42a6      	cmp	r6, r4
 8010ee2:	bf38      	it	cc
 8010ee4:	2304      	movcc	r3, #4
 8010ee6:	441d      	add	r5, r3
 8010ee8:	445b      	add	r3, fp
 8010eea:	461e      	mov	r6, r3
 8010eec:	462c      	mov	r4, r5
 8010eee:	4544      	cmp	r4, r8
 8010ef0:	d30e      	bcc.n	8010f10 <__mdiff+0xf8>
 8010ef2:	f108 0103 	add.w	r1, r8, #3
 8010ef6:	1b49      	subs	r1, r1, r5
 8010ef8:	f021 0103 	bic.w	r1, r1, #3
 8010efc:	3d03      	subs	r5, #3
 8010efe:	45a8      	cmp	r8, r5
 8010f00:	bf38      	it	cc
 8010f02:	2100      	movcc	r1, #0
 8010f04:	440b      	add	r3, r1
 8010f06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010f0a:	b191      	cbz	r1, 8010f32 <__mdiff+0x11a>
 8010f0c:	6117      	str	r7, [r2, #16]
 8010f0e:	e79d      	b.n	8010e4c <__mdiff+0x34>
 8010f10:	f854 1b04 	ldr.w	r1, [r4], #4
 8010f14:	46e6      	mov	lr, ip
 8010f16:	0c08      	lsrs	r0, r1, #16
 8010f18:	fa1c fc81 	uxtah	ip, ip, r1
 8010f1c:	4471      	add	r1, lr
 8010f1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010f22:	b289      	uxth	r1, r1
 8010f24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010f28:	f846 1b04 	str.w	r1, [r6], #4
 8010f2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010f30:	e7dd      	b.n	8010eee <__mdiff+0xd6>
 8010f32:	3f01      	subs	r7, #1
 8010f34:	e7e7      	b.n	8010f06 <__mdiff+0xee>
 8010f36:	bf00      	nop
 8010f38:	08013a58 	.word	0x08013a58
 8010f3c:	08013a69 	.word	0x08013a69

08010f40 <__ulp>:
 8010f40:	b082      	sub	sp, #8
 8010f42:	ed8d 0b00 	vstr	d0, [sp]
 8010f46:	9a01      	ldr	r2, [sp, #4]
 8010f48:	4b0f      	ldr	r3, [pc, #60]	@ (8010f88 <__ulp+0x48>)
 8010f4a:	4013      	ands	r3, r2
 8010f4c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	dc08      	bgt.n	8010f66 <__ulp+0x26>
 8010f54:	425b      	negs	r3, r3
 8010f56:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010f5a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010f5e:	da04      	bge.n	8010f6a <__ulp+0x2a>
 8010f60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010f64:	4113      	asrs	r3, r2
 8010f66:	2200      	movs	r2, #0
 8010f68:	e008      	b.n	8010f7c <__ulp+0x3c>
 8010f6a:	f1a2 0314 	sub.w	r3, r2, #20
 8010f6e:	2b1e      	cmp	r3, #30
 8010f70:	bfda      	itte	le
 8010f72:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010f76:	40da      	lsrle	r2, r3
 8010f78:	2201      	movgt	r2, #1
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	4619      	mov	r1, r3
 8010f7e:	4610      	mov	r0, r2
 8010f80:	ec41 0b10 	vmov	d0, r0, r1
 8010f84:	b002      	add	sp, #8
 8010f86:	4770      	bx	lr
 8010f88:	7ff00000 	.word	0x7ff00000

08010f8c <__b2d>:
 8010f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f90:	6906      	ldr	r6, [r0, #16]
 8010f92:	f100 0814 	add.w	r8, r0, #20
 8010f96:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010f9a:	1f37      	subs	r7, r6, #4
 8010f9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010fa0:	4610      	mov	r0, r2
 8010fa2:	f7ff fd4b 	bl	8010a3c <__hi0bits>
 8010fa6:	f1c0 0320 	rsb	r3, r0, #32
 8010faa:	280a      	cmp	r0, #10
 8010fac:	600b      	str	r3, [r1, #0]
 8010fae:	491b      	ldr	r1, [pc, #108]	@ (801101c <__b2d+0x90>)
 8010fb0:	dc15      	bgt.n	8010fde <__b2d+0x52>
 8010fb2:	f1c0 0c0b 	rsb	ip, r0, #11
 8010fb6:	fa22 f30c 	lsr.w	r3, r2, ip
 8010fba:	45b8      	cmp	r8, r7
 8010fbc:	ea43 0501 	orr.w	r5, r3, r1
 8010fc0:	bf34      	ite	cc
 8010fc2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010fc6:	2300      	movcs	r3, #0
 8010fc8:	3015      	adds	r0, #21
 8010fca:	fa02 f000 	lsl.w	r0, r2, r0
 8010fce:	fa23 f30c 	lsr.w	r3, r3, ip
 8010fd2:	4303      	orrs	r3, r0
 8010fd4:	461c      	mov	r4, r3
 8010fd6:	ec45 4b10 	vmov	d0, r4, r5
 8010fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fde:	45b8      	cmp	r8, r7
 8010fe0:	bf3a      	itte	cc
 8010fe2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010fe6:	f1a6 0708 	subcc.w	r7, r6, #8
 8010fea:	2300      	movcs	r3, #0
 8010fec:	380b      	subs	r0, #11
 8010fee:	d012      	beq.n	8011016 <__b2d+0x8a>
 8010ff0:	f1c0 0120 	rsb	r1, r0, #32
 8010ff4:	fa23 f401 	lsr.w	r4, r3, r1
 8010ff8:	4082      	lsls	r2, r0
 8010ffa:	4322      	orrs	r2, r4
 8010ffc:	4547      	cmp	r7, r8
 8010ffe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011002:	bf8c      	ite	hi
 8011004:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011008:	2200      	movls	r2, #0
 801100a:	4083      	lsls	r3, r0
 801100c:	40ca      	lsrs	r2, r1
 801100e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011012:	4313      	orrs	r3, r2
 8011014:	e7de      	b.n	8010fd4 <__b2d+0x48>
 8011016:	ea42 0501 	orr.w	r5, r2, r1
 801101a:	e7db      	b.n	8010fd4 <__b2d+0x48>
 801101c:	3ff00000 	.word	0x3ff00000

08011020 <__d2b>:
 8011020:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011024:	460f      	mov	r7, r1
 8011026:	2101      	movs	r1, #1
 8011028:	ec59 8b10 	vmov	r8, r9, d0
 801102c:	4616      	mov	r6, r2
 801102e:	f7ff fc13 	bl	8010858 <_Balloc>
 8011032:	4604      	mov	r4, r0
 8011034:	b930      	cbnz	r0, 8011044 <__d2b+0x24>
 8011036:	4602      	mov	r2, r0
 8011038:	4b23      	ldr	r3, [pc, #140]	@ (80110c8 <__d2b+0xa8>)
 801103a:	4824      	ldr	r0, [pc, #144]	@ (80110cc <__d2b+0xac>)
 801103c:	f240 310f 	movw	r1, #783	@ 0x30f
 8011040:	f001 fda2 	bl	8012b88 <__assert_func>
 8011044:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011048:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801104c:	b10d      	cbz	r5, 8011052 <__d2b+0x32>
 801104e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011052:	9301      	str	r3, [sp, #4]
 8011054:	f1b8 0300 	subs.w	r3, r8, #0
 8011058:	d023      	beq.n	80110a2 <__d2b+0x82>
 801105a:	4668      	mov	r0, sp
 801105c:	9300      	str	r3, [sp, #0]
 801105e:	f7ff fd0c 	bl	8010a7a <__lo0bits>
 8011062:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011066:	b1d0      	cbz	r0, 801109e <__d2b+0x7e>
 8011068:	f1c0 0320 	rsb	r3, r0, #32
 801106c:	fa02 f303 	lsl.w	r3, r2, r3
 8011070:	430b      	orrs	r3, r1
 8011072:	40c2      	lsrs	r2, r0
 8011074:	6163      	str	r3, [r4, #20]
 8011076:	9201      	str	r2, [sp, #4]
 8011078:	9b01      	ldr	r3, [sp, #4]
 801107a:	61a3      	str	r3, [r4, #24]
 801107c:	2b00      	cmp	r3, #0
 801107e:	bf0c      	ite	eq
 8011080:	2201      	moveq	r2, #1
 8011082:	2202      	movne	r2, #2
 8011084:	6122      	str	r2, [r4, #16]
 8011086:	b1a5      	cbz	r5, 80110b2 <__d2b+0x92>
 8011088:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801108c:	4405      	add	r5, r0
 801108e:	603d      	str	r5, [r7, #0]
 8011090:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011094:	6030      	str	r0, [r6, #0]
 8011096:	4620      	mov	r0, r4
 8011098:	b003      	add	sp, #12
 801109a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801109e:	6161      	str	r1, [r4, #20]
 80110a0:	e7ea      	b.n	8011078 <__d2b+0x58>
 80110a2:	a801      	add	r0, sp, #4
 80110a4:	f7ff fce9 	bl	8010a7a <__lo0bits>
 80110a8:	9b01      	ldr	r3, [sp, #4]
 80110aa:	6163      	str	r3, [r4, #20]
 80110ac:	3020      	adds	r0, #32
 80110ae:	2201      	movs	r2, #1
 80110b0:	e7e8      	b.n	8011084 <__d2b+0x64>
 80110b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80110b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80110ba:	6038      	str	r0, [r7, #0]
 80110bc:	6918      	ldr	r0, [r3, #16]
 80110be:	f7ff fcbd 	bl	8010a3c <__hi0bits>
 80110c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80110c6:	e7e5      	b.n	8011094 <__d2b+0x74>
 80110c8:	08013a58 	.word	0x08013a58
 80110cc:	08013a69 	.word	0x08013a69

080110d0 <__ratio>:
 80110d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d4:	b085      	sub	sp, #20
 80110d6:	e9cd 1000 	strd	r1, r0, [sp]
 80110da:	a902      	add	r1, sp, #8
 80110dc:	f7ff ff56 	bl	8010f8c <__b2d>
 80110e0:	9800      	ldr	r0, [sp, #0]
 80110e2:	a903      	add	r1, sp, #12
 80110e4:	ec55 4b10 	vmov	r4, r5, d0
 80110e8:	f7ff ff50 	bl	8010f8c <__b2d>
 80110ec:	9b01      	ldr	r3, [sp, #4]
 80110ee:	6919      	ldr	r1, [r3, #16]
 80110f0:	9b00      	ldr	r3, [sp, #0]
 80110f2:	691b      	ldr	r3, [r3, #16]
 80110f4:	1ac9      	subs	r1, r1, r3
 80110f6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80110fa:	1a9b      	subs	r3, r3, r2
 80110fc:	ec5b ab10 	vmov	sl, fp, d0
 8011100:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011104:	2b00      	cmp	r3, #0
 8011106:	bfce      	itee	gt
 8011108:	462a      	movgt	r2, r5
 801110a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801110e:	465a      	movle	r2, fp
 8011110:	462f      	mov	r7, r5
 8011112:	46d9      	mov	r9, fp
 8011114:	bfcc      	ite	gt
 8011116:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801111a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801111e:	464b      	mov	r3, r9
 8011120:	4652      	mov	r2, sl
 8011122:	4620      	mov	r0, r4
 8011124:	4639      	mov	r1, r7
 8011126:	f7ef fb91 	bl	800084c <__aeabi_ddiv>
 801112a:	ec41 0b10 	vmov	d0, r0, r1
 801112e:	b005      	add	sp, #20
 8011130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011134 <__copybits>:
 8011134:	3901      	subs	r1, #1
 8011136:	b570      	push	{r4, r5, r6, lr}
 8011138:	1149      	asrs	r1, r1, #5
 801113a:	6914      	ldr	r4, [r2, #16]
 801113c:	3101      	adds	r1, #1
 801113e:	f102 0314 	add.w	r3, r2, #20
 8011142:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011146:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801114a:	1f05      	subs	r5, r0, #4
 801114c:	42a3      	cmp	r3, r4
 801114e:	d30c      	bcc.n	801116a <__copybits+0x36>
 8011150:	1aa3      	subs	r3, r4, r2
 8011152:	3b11      	subs	r3, #17
 8011154:	f023 0303 	bic.w	r3, r3, #3
 8011158:	3211      	adds	r2, #17
 801115a:	42a2      	cmp	r2, r4
 801115c:	bf88      	it	hi
 801115e:	2300      	movhi	r3, #0
 8011160:	4418      	add	r0, r3
 8011162:	2300      	movs	r3, #0
 8011164:	4288      	cmp	r0, r1
 8011166:	d305      	bcc.n	8011174 <__copybits+0x40>
 8011168:	bd70      	pop	{r4, r5, r6, pc}
 801116a:	f853 6b04 	ldr.w	r6, [r3], #4
 801116e:	f845 6f04 	str.w	r6, [r5, #4]!
 8011172:	e7eb      	b.n	801114c <__copybits+0x18>
 8011174:	f840 3b04 	str.w	r3, [r0], #4
 8011178:	e7f4      	b.n	8011164 <__copybits+0x30>

0801117a <__any_on>:
 801117a:	f100 0214 	add.w	r2, r0, #20
 801117e:	6900      	ldr	r0, [r0, #16]
 8011180:	114b      	asrs	r3, r1, #5
 8011182:	4298      	cmp	r0, r3
 8011184:	b510      	push	{r4, lr}
 8011186:	db11      	blt.n	80111ac <__any_on+0x32>
 8011188:	dd0a      	ble.n	80111a0 <__any_on+0x26>
 801118a:	f011 011f 	ands.w	r1, r1, #31
 801118e:	d007      	beq.n	80111a0 <__any_on+0x26>
 8011190:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011194:	fa24 f001 	lsr.w	r0, r4, r1
 8011198:	fa00 f101 	lsl.w	r1, r0, r1
 801119c:	428c      	cmp	r4, r1
 801119e:	d10b      	bne.n	80111b8 <__any_on+0x3e>
 80111a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80111a4:	4293      	cmp	r3, r2
 80111a6:	d803      	bhi.n	80111b0 <__any_on+0x36>
 80111a8:	2000      	movs	r0, #0
 80111aa:	bd10      	pop	{r4, pc}
 80111ac:	4603      	mov	r3, r0
 80111ae:	e7f7      	b.n	80111a0 <__any_on+0x26>
 80111b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80111b4:	2900      	cmp	r1, #0
 80111b6:	d0f5      	beq.n	80111a4 <__any_on+0x2a>
 80111b8:	2001      	movs	r0, #1
 80111ba:	e7f6      	b.n	80111aa <__any_on+0x30>

080111bc <sulp>:
 80111bc:	b570      	push	{r4, r5, r6, lr}
 80111be:	4604      	mov	r4, r0
 80111c0:	460d      	mov	r5, r1
 80111c2:	ec45 4b10 	vmov	d0, r4, r5
 80111c6:	4616      	mov	r6, r2
 80111c8:	f7ff feba 	bl	8010f40 <__ulp>
 80111cc:	ec51 0b10 	vmov	r0, r1, d0
 80111d0:	b17e      	cbz	r6, 80111f2 <sulp+0x36>
 80111d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80111d6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80111da:	2b00      	cmp	r3, #0
 80111dc:	dd09      	ble.n	80111f2 <sulp+0x36>
 80111de:	051b      	lsls	r3, r3, #20
 80111e0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80111e4:	2400      	movs	r4, #0
 80111e6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80111ea:	4622      	mov	r2, r4
 80111ec:	462b      	mov	r3, r5
 80111ee:	f7ef fa03 	bl	80005f8 <__aeabi_dmul>
 80111f2:	ec41 0b10 	vmov	d0, r0, r1
 80111f6:	bd70      	pop	{r4, r5, r6, pc}

080111f8 <_strtod_l>:
 80111f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111fc:	b09f      	sub	sp, #124	@ 0x7c
 80111fe:	460c      	mov	r4, r1
 8011200:	9217      	str	r2, [sp, #92]	@ 0x5c
 8011202:	2200      	movs	r2, #0
 8011204:	921a      	str	r2, [sp, #104]	@ 0x68
 8011206:	9005      	str	r0, [sp, #20]
 8011208:	f04f 0a00 	mov.w	sl, #0
 801120c:	f04f 0b00 	mov.w	fp, #0
 8011210:	460a      	mov	r2, r1
 8011212:	9219      	str	r2, [sp, #100]	@ 0x64
 8011214:	7811      	ldrb	r1, [r2, #0]
 8011216:	292b      	cmp	r1, #43	@ 0x2b
 8011218:	d04a      	beq.n	80112b0 <_strtod_l+0xb8>
 801121a:	d838      	bhi.n	801128e <_strtod_l+0x96>
 801121c:	290d      	cmp	r1, #13
 801121e:	d832      	bhi.n	8011286 <_strtod_l+0x8e>
 8011220:	2908      	cmp	r1, #8
 8011222:	d832      	bhi.n	801128a <_strtod_l+0x92>
 8011224:	2900      	cmp	r1, #0
 8011226:	d03b      	beq.n	80112a0 <_strtod_l+0xa8>
 8011228:	2200      	movs	r2, #0
 801122a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801122c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801122e:	782a      	ldrb	r2, [r5, #0]
 8011230:	2a30      	cmp	r2, #48	@ 0x30
 8011232:	f040 80b3 	bne.w	801139c <_strtod_l+0x1a4>
 8011236:	786a      	ldrb	r2, [r5, #1]
 8011238:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801123c:	2a58      	cmp	r2, #88	@ 0x58
 801123e:	d16e      	bne.n	801131e <_strtod_l+0x126>
 8011240:	9302      	str	r3, [sp, #8]
 8011242:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011244:	9301      	str	r3, [sp, #4]
 8011246:	ab1a      	add	r3, sp, #104	@ 0x68
 8011248:	9300      	str	r3, [sp, #0]
 801124a:	4a8e      	ldr	r2, [pc, #568]	@ (8011484 <_strtod_l+0x28c>)
 801124c:	9805      	ldr	r0, [sp, #20]
 801124e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011250:	a919      	add	r1, sp, #100	@ 0x64
 8011252:	f001 fd33 	bl	8012cbc <__gethex>
 8011256:	f010 060f 	ands.w	r6, r0, #15
 801125a:	4604      	mov	r4, r0
 801125c:	d005      	beq.n	801126a <_strtod_l+0x72>
 801125e:	2e06      	cmp	r6, #6
 8011260:	d128      	bne.n	80112b4 <_strtod_l+0xbc>
 8011262:	3501      	adds	r5, #1
 8011264:	2300      	movs	r3, #0
 8011266:	9519      	str	r5, [sp, #100]	@ 0x64
 8011268:	930b      	str	r3, [sp, #44]	@ 0x2c
 801126a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801126c:	2b00      	cmp	r3, #0
 801126e:	f040 858e 	bne.w	8011d8e <_strtod_l+0xb96>
 8011272:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011274:	b1cb      	cbz	r3, 80112aa <_strtod_l+0xb2>
 8011276:	4652      	mov	r2, sl
 8011278:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801127c:	ec43 2b10 	vmov	d0, r2, r3
 8011280:	b01f      	add	sp, #124	@ 0x7c
 8011282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011286:	2920      	cmp	r1, #32
 8011288:	d1ce      	bne.n	8011228 <_strtod_l+0x30>
 801128a:	3201      	adds	r2, #1
 801128c:	e7c1      	b.n	8011212 <_strtod_l+0x1a>
 801128e:	292d      	cmp	r1, #45	@ 0x2d
 8011290:	d1ca      	bne.n	8011228 <_strtod_l+0x30>
 8011292:	2101      	movs	r1, #1
 8011294:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011296:	1c51      	adds	r1, r2, #1
 8011298:	9119      	str	r1, [sp, #100]	@ 0x64
 801129a:	7852      	ldrb	r2, [r2, #1]
 801129c:	2a00      	cmp	r2, #0
 801129e:	d1c5      	bne.n	801122c <_strtod_l+0x34>
 80112a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80112a2:	9419      	str	r4, [sp, #100]	@ 0x64
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	f040 8570 	bne.w	8011d8a <_strtod_l+0xb92>
 80112aa:	4652      	mov	r2, sl
 80112ac:	465b      	mov	r3, fp
 80112ae:	e7e5      	b.n	801127c <_strtod_l+0x84>
 80112b0:	2100      	movs	r1, #0
 80112b2:	e7ef      	b.n	8011294 <_strtod_l+0x9c>
 80112b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80112b6:	b13a      	cbz	r2, 80112c8 <_strtod_l+0xd0>
 80112b8:	2135      	movs	r1, #53	@ 0x35
 80112ba:	a81c      	add	r0, sp, #112	@ 0x70
 80112bc:	f7ff ff3a 	bl	8011134 <__copybits>
 80112c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80112c2:	9805      	ldr	r0, [sp, #20]
 80112c4:	f7ff fb08 	bl	80108d8 <_Bfree>
 80112c8:	3e01      	subs	r6, #1
 80112ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80112cc:	2e04      	cmp	r6, #4
 80112ce:	d806      	bhi.n	80112de <_strtod_l+0xe6>
 80112d0:	e8df f006 	tbb	[pc, r6]
 80112d4:	201d0314 	.word	0x201d0314
 80112d8:	14          	.byte	0x14
 80112d9:	00          	.byte	0x00
 80112da:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80112de:	05e1      	lsls	r1, r4, #23
 80112e0:	bf48      	it	mi
 80112e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80112e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80112ea:	0d1b      	lsrs	r3, r3, #20
 80112ec:	051b      	lsls	r3, r3, #20
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d1bb      	bne.n	801126a <_strtod_l+0x72>
 80112f2:	f7fe fb23 	bl	800f93c <__errno>
 80112f6:	2322      	movs	r3, #34	@ 0x22
 80112f8:	6003      	str	r3, [r0, #0]
 80112fa:	e7b6      	b.n	801126a <_strtod_l+0x72>
 80112fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011300:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011304:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011308:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801130c:	e7e7      	b.n	80112de <_strtod_l+0xe6>
 801130e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801148c <_strtod_l+0x294>
 8011312:	e7e4      	b.n	80112de <_strtod_l+0xe6>
 8011314:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011318:	f04f 3aff 	mov.w	sl, #4294967295
 801131c:	e7df      	b.n	80112de <_strtod_l+0xe6>
 801131e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011320:	1c5a      	adds	r2, r3, #1
 8011322:	9219      	str	r2, [sp, #100]	@ 0x64
 8011324:	785b      	ldrb	r3, [r3, #1]
 8011326:	2b30      	cmp	r3, #48	@ 0x30
 8011328:	d0f9      	beq.n	801131e <_strtod_l+0x126>
 801132a:	2b00      	cmp	r3, #0
 801132c:	d09d      	beq.n	801126a <_strtod_l+0x72>
 801132e:	2301      	movs	r3, #1
 8011330:	9309      	str	r3, [sp, #36]	@ 0x24
 8011332:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011334:	930c      	str	r3, [sp, #48]	@ 0x30
 8011336:	2300      	movs	r3, #0
 8011338:	9308      	str	r3, [sp, #32]
 801133a:	930a      	str	r3, [sp, #40]	@ 0x28
 801133c:	461f      	mov	r7, r3
 801133e:	220a      	movs	r2, #10
 8011340:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011342:	7805      	ldrb	r5, [r0, #0]
 8011344:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011348:	b2d9      	uxtb	r1, r3
 801134a:	2909      	cmp	r1, #9
 801134c:	d928      	bls.n	80113a0 <_strtod_l+0x1a8>
 801134e:	494e      	ldr	r1, [pc, #312]	@ (8011488 <_strtod_l+0x290>)
 8011350:	2201      	movs	r2, #1
 8011352:	f7fe fa81 	bl	800f858 <strncmp>
 8011356:	2800      	cmp	r0, #0
 8011358:	d032      	beq.n	80113c0 <_strtod_l+0x1c8>
 801135a:	2000      	movs	r0, #0
 801135c:	462a      	mov	r2, r5
 801135e:	4681      	mov	r9, r0
 8011360:	463d      	mov	r5, r7
 8011362:	4603      	mov	r3, r0
 8011364:	2a65      	cmp	r2, #101	@ 0x65
 8011366:	d001      	beq.n	801136c <_strtod_l+0x174>
 8011368:	2a45      	cmp	r2, #69	@ 0x45
 801136a:	d114      	bne.n	8011396 <_strtod_l+0x19e>
 801136c:	b91d      	cbnz	r5, 8011376 <_strtod_l+0x17e>
 801136e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011370:	4302      	orrs	r2, r0
 8011372:	d095      	beq.n	80112a0 <_strtod_l+0xa8>
 8011374:	2500      	movs	r5, #0
 8011376:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011378:	1c62      	adds	r2, r4, #1
 801137a:	9219      	str	r2, [sp, #100]	@ 0x64
 801137c:	7862      	ldrb	r2, [r4, #1]
 801137e:	2a2b      	cmp	r2, #43	@ 0x2b
 8011380:	d077      	beq.n	8011472 <_strtod_l+0x27a>
 8011382:	2a2d      	cmp	r2, #45	@ 0x2d
 8011384:	d07b      	beq.n	801147e <_strtod_l+0x286>
 8011386:	f04f 0c00 	mov.w	ip, #0
 801138a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801138e:	2909      	cmp	r1, #9
 8011390:	f240 8082 	bls.w	8011498 <_strtod_l+0x2a0>
 8011394:	9419      	str	r4, [sp, #100]	@ 0x64
 8011396:	f04f 0800 	mov.w	r8, #0
 801139a:	e0a2      	b.n	80114e2 <_strtod_l+0x2ea>
 801139c:	2300      	movs	r3, #0
 801139e:	e7c7      	b.n	8011330 <_strtod_l+0x138>
 80113a0:	2f08      	cmp	r7, #8
 80113a2:	bfd5      	itete	le
 80113a4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80113a6:	9908      	ldrgt	r1, [sp, #32]
 80113a8:	fb02 3301 	mlale	r3, r2, r1, r3
 80113ac:	fb02 3301 	mlagt	r3, r2, r1, r3
 80113b0:	f100 0001 	add.w	r0, r0, #1
 80113b4:	bfd4      	ite	le
 80113b6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80113b8:	9308      	strgt	r3, [sp, #32]
 80113ba:	3701      	adds	r7, #1
 80113bc:	9019      	str	r0, [sp, #100]	@ 0x64
 80113be:	e7bf      	b.n	8011340 <_strtod_l+0x148>
 80113c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80113c2:	1c5a      	adds	r2, r3, #1
 80113c4:	9219      	str	r2, [sp, #100]	@ 0x64
 80113c6:	785a      	ldrb	r2, [r3, #1]
 80113c8:	b37f      	cbz	r7, 801142a <_strtod_l+0x232>
 80113ca:	4681      	mov	r9, r0
 80113cc:	463d      	mov	r5, r7
 80113ce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80113d2:	2b09      	cmp	r3, #9
 80113d4:	d912      	bls.n	80113fc <_strtod_l+0x204>
 80113d6:	2301      	movs	r3, #1
 80113d8:	e7c4      	b.n	8011364 <_strtod_l+0x16c>
 80113da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80113dc:	1c5a      	adds	r2, r3, #1
 80113de:	9219      	str	r2, [sp, #100]	@ 0x64
 80113e0:	785a      	ldrb	r2, [r3, #1]
 80113e2:	3001      	adds	r0, #1
 80113e4:	2a30      	cmp	r2, #48	@ 0x30
 80113e6:	d0f8      	beq.n	80113da <_strtod_l+0x1e2>
 80113e8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80113ec:	2b08      	cmp	r3, #8
 80113ee:	f200 84d3 	bhi.w	8011d98 <_strtod_l+0xba0>
 80113f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80113f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80113f6:	4681      	mov	r9, r0
 80113f8:	2000      	movs	r0, #0
 80113fa:	4605      	mov	r5, r0
 80113fc:	3a30      	subs	r2, #48	@ 0x30
 80113fe:	f100 0301 	add.w	r3, r0, #1
 8011402:	d02a      	beq.n	801145a <_strtod_l+0x262>
 8011404:	4499      	add	r9, r3
 8011406:	eb00 0c05 	add.w	ip, r0, r5
 801140a:	462b      	mov	r3, r5
 801140c:	210a      	movs	r1, #10
 801140e:	4563      	cmp	r3, ip
 8011410:	d10d      	bne.n	801142e <_strtod_l+0x236>
 8011412:	1c69      	adds	r1, r5, #1
 8011414:	4401      	add	r1, r0
 8011416:	4428      	add	r0, r5
 8011418:	2808      	cmp	r0, #8
 801141a:	dc16      	bgt.n	801144a <_strtod_l+0x252>
 801141c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801141e:	230a      	movs	r3, #10
 8011420:	fb03 2300 	mla	r3, r3, r0, r2
 8011424:	930a      	str	r3, [sp, #40]	@ 0x28
 8011426:	2300      	movs	r3, #0
 8011428:	e018      	b.n	801145c <_strtod_l+0x264>
 801142a:	4638      	mov	r0, r7
 801142c:	e7da      	b.n	80113e4 <_strtod_l+0x1ec>
 801142e:	2b08      	cmp	r3, #8
 8011430:	f103 0301 	add.w	r3, r3, #1
 8011434:	dc03      	bgt.n	801143e <_strtod_l+0x246>
 8011436:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011438:	434e      	muls	r6, r1
 801143a:	960a      	str	r6, [sp, #40]	@ 0x28
 801143c:	e7e7      	b.n	801140e <_strtod_l+0x216>
 801143e:	2b10      	cmp	r3, #16
 8011440:	bfde      	ittt	le
 8011442:	9e08      	ldrle	r6, [sp, #32]
 8011444:	434e      	mulle	r6, r1
 8011446:	9608      	strle	r6, [sp, #32]
 8011448:	e7e1      	b.n	801140e <_strtod_l+0x216>
 801144a:	280f      	cmp	r0, #15
 801144c:	dceb      	bgt.n	8011426 <_strtod_l+0x22e>
 801144e:	9808      	ldr	r0, [sp, #32]
 8011450:	230a      	movs	r3, #10
 8011452:	fb03 2300 	mla	r3, r3, r0, r2
 8011456:	9308      	str	r3, [sp, #32]
 8011458:	e7e5      	b.n	8011426 <_strtod_l+0x22e>
 801145a:	4629      	mov	r1, r5
 801145c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801145e:	1c50      	adds	r0, r2, #1
 8011460:	9019      	str	r0, [sp, #100]	@ 0x64
 8011462:	7852      	ldrb	r2, [r2, #1]
 8011464:	4618      	mov	r0, r3
 8011466:	460d      	mov	r5, r1
 8011468:	e7b1      	b.n	80113ce <_strtod_l+0x1d6>
 801146a:	f04f 0900 	mov.w	r9, #0
 801146e:	2301      	movs	r3, #1
 8011470:	e77d      	b.n	801136e <_strtod_l+0x176>
 8011472:	f04f 0c00 	mov.w	ip, #0
 8011476:	1ca2      	adds	r2, r4, #2
 8011478:	9219      	str	r2, [sp, #100]	@ 0x64
 801147a:	78a2      	ldrb	r2, [r4, #2]
 801147c:	e785      	b.n	801138a <_strtod_l+0x192>
 801147e:	f04f 0c01 	mov.w	ip, #1
 8011482:	e7f8      	b.n	8011476 <_strtod_l+0x27e>
 8011484:	08013bd8 	.word	0x08013bd8
 8011488:	08013bc0 	.word	0x08013bc0
 801148c:	7ff00000 	.word	0x7ff00000
 8011490:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011492:	1c51      	adds	r1, r2, #1
 8011494:	9119      	str	r1, [sp, #100]	@ 0x64
 8011496:	7852      	ldrb	r2, [r2, #1]
 8011498:	2a30      	cmp	r2, #48	@ 0x30
 801149a:	d0f9      	beq.n	8011490 <_strtod_l+0x298>
 801149c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80114a0:	2908      	cmp	r1, #8
 80114a2:	f63f af78 	bhi.w	8011396 <_strtod_l+0x19e>
 80114a6:	3a30      	subs	r2, #48	@ 0x30
 80114a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80114aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80114ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 80114ae:	f04f 080a 	mov.w	r8, #10
 80114b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80114b4:	1c56      	adds	r6, r2, #1
 80114b6:	9619      	str	r6, [sp, #100]	@ 0x64
 80114b8:	7852      	ldrb	r2, [r2, #1]
 80114ba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80114be:	f1be 0f09 	cmp.w	lr, #9
 80114c2:	d939      	bls.n	8011538 <_strtod_l+0x340>
 80114c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80114c6:	1a76      	subs	r6, r6, r1
 80114c8:	2e08      	cmp	r6, #8
 80114ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80114ce:	dc03      	bgt.n	80114d8 <_strtod_l+0x2e0>
 80114d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80114d2:	4588      	cmp	r8, r1
 80114d4:	bfa8      	it	ge
 80114d6:	4688      	movge	r8, r1
 80114d8:	f1bc 0f00 	cmp.w	ip, #0
 80114dc:	d001      	beq.n	80114e2 <_strtod_l+0x2ea>
 80114de:	f1c8 0800 	rsb	r8, r8, #0
 80114e2:	2d00      	cmp	r5, #0
 80114e4:	d14e      	bne.n	8011584 <_strtod_l+0x38c>
 80114e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80114e8:	4308      	orrs	r0, r1
 80114ea:	f47f aebe 	bne.w	801126a <_strtod_l+0x72>
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	f47f aed6 	bne.w	80112a0 <_strtod_l+0xa8>
 80114f4:	2a69      	cmp	r2, #105	@ 0x69
 80114f6:	d028      	beq.n	801154a <_strtod_l+0x352>
 80114f8:	dc25      	bgt.n	8011546 <_strtod_l+0x34e>
 80114fa:	2a49      	cmp	r2, #73	@ 0x49
 80114fc:	d025      	beq.n	801154a <_strtod_l+0x352>
 80114fe:	2a4e      	cmp	r2, #78	@ 0x4e
 8011500:	f47f aece 	bne.w	80112a0 <_strtod_l+0xa8>
 8011504:	499b      	ldr	r1, [pc, #620]	@ (8011774 <_strtod_l+0x57c>)
 8011506:	a819      	add	r0, sp, #100	@ 0x64
 8011508:	f001 fdfa 	bl	8013100 <__match>
 801150c:	2800      	cmp	r0, #0
 801150e:	f43f aec7 	beq.w	80112a0 <_strtod_l+0xa8>
 8011512:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	2b28      	cmp	r3, #40	@ 0x28
 8011518:	d12e      	bne.n	8011578 <_strtod_l+0x380>
 801151a:	4997      	ldr	r1, [pc, #604]	@ (8011778 <_strtod_l+0x580>)
 801151c:	aa1c      	add	r2, sp, #112	@ 0x70
 801151e:	a819      	add	r0, sp, #100	@ 0x64
 8011520:	f001 fe02 	bl	8013128 <__hexnan>
 8011524:	2805      	cmp	r0, #5
 8011526:	d127      	bne.n	8011578 <_strtod_l+0x380>
 8011528:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801152a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801152e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011532:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011536:	e698      	b.n	801126a <_strtod_l+0x72>
 8011538:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801153a:	fb08 2101 	mla	r1, r8, r1, r2
 801153e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011542:	920e      	str	r2, [sp, #56]	@ 0x38
 8011544:	e7b5      	b.n	80114b2 <_strtod_l+0x2ba>
 8011546:	2a6e      	cmp	r2, #110	@ 0x6e
 8011548:	e7da      	b.n	8011500 <_strtod_l+0x308>
 801154a:	498c      	ldr	r1, [pc, #560]	@ (801177c <_strtod_l+0x584>)
 801154c:	a819      	add	r0, sp, #100	@ 0x64
 801154e:	f001 fdd7 	bl	8013100 <__match>
 8011552:	2800      	cmp	r0, #0
 8011554:	f43f aea4 	beq.w	80112a0 <_strtod_l+0xa8>
 8011558:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801155a:	4989      	ldr	r1, [pc, #548]	@ (8011780 <_strtod_l+0x588>)
 801155c:	3b01      	subs	r3, #1
 801155e:	a819      	add	r0, sp, #100	@ 0x64
 8011560:	9319      	str	r3, [sp, #100]	@ 0x64
 8011562:	f001 fdcd 	bl	8013100 <__match>
 8011566:	b910      	cbnz	r0, 801156e <_strtod_l+0x376>
 8011568:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801156a:	3301      	adds	r3, #1
 801156c:	9319      	str	r3, [sp, #100]	@ 0x64
 801156e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011790 <_strtod_l+0x598>
 8011572:	f04f 0a00 	mov.w	sl, #0
 8011576:	e678      	b.n	801126a <_strtod_l+0x72>
 8011578:	4882      	ldr	r0, [pc, #520]	@ (8011784 <_strtod_l+0x58c>)
 801157a:	f001 fafd 	bl	8012b78 <nan>
 801157e:	ec5b ab10 	vmov	sl, fp, d0
 8011582:	e672      	b.n	801126a <_strtod_l+0x72>
 8011584:	eba8 0309 	sub.w	r3, r8, r9
 8011588:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801158a:	9309      	str	r3, [sp, #36]	@ 0x24
 801158c:	2f00      	cmp	r7, #0
 801158e:	bf08      	it	eq
 8011590:	462f      	moveq	r7, r5
 8011592:	2d10      	cmp	r5, #16
 8011594:	462c      	mov	r4, r5
 8011596:	bfa8      	it	ge
 8011598:	2410      	movge	r4, #16
 801159a:	f7ee ffb3 	bl	8000504 <__aeabi_ui2d>
 801159e:	2d09      	cmp	r5, #9
 80115a0:	4682      	mov	sl, r0
 80115a2:	468b      	mov	fp, r1
 80115a4:	dc13      	bgt.n	80115ce <_strtod_l+0x3d6>
 80115a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	f43f ae5e 	beq.w	801126a <_strtod_l+0x72>
 80115ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115b0:	dd78      	ble.n	80116a4 <_strtod_l+0x4ac>
 80115b2:	2b16      	cmp	r3, #22
 80115b4:	dc5f      	bgt.n	8011676 <_strtod_l+0x47e>
 80115b6:	4974      	ldr	r1, [pc, #464]	@ (8011788 <_strtod_l+0x590>)
 80115b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80115bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115c0:	4652      	mov	r2, sl
 80115c2:	465b      	mov	r3, fp
 80115c4:	f7ef f818 	bl	80005f8 <__aeabi_dmul>
 80115c8:	4682      	mov	sl, r0
 80115ca:	468b      	mov	fp, r1
 80115cc:	e64d      	b.n	801126a <_strtod_l+0x72>
 80115ce:	4b6e      	ldr	r3, [pc, #440]	@ (8011788 <_strtod_l+0x590>)
 80115d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80115d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80115d8:	f7ef f80e 	bl	80005f8 <__aeabi_dmul>
 80115dc:	4682      	mov	sl, r0
 80115de:	9808      	ldr	r0, [sp, #32]
 80115e0:	468b      	mov	fp, r1
 80115e2:	f7ee ff8f 	bl	8000504 <__aeabi_ui2d>
 80115e6:	4602      	mov	r2, r0
 80115e8:	460b      	mov	r3, r1
 80115ea:	4650      	mov	r0, sl
 80115ec:	4659      	mov	r1, fp
 80115ee:	f7ee fe4d 	bl	800028c <__adddf3>
 80115f2:	2d0f      	cmp	r5, #15
 80115f4:	4682      	mov	sl, r0
 80115f6:	468b      	mov	fp, r1
 80115f8:	ddd5      	ble.n	80115a6 <_strtod_l+0x3ae>
 80115fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115fc:	1b2c      	subs	r4, r5, r4
 80115fe:	441c      	add	r4, r3
 8011600:	2c00      	cmp	r4, #0
 8011602:	f340 8096 	ble.w	8011732 <_strtod_l+0x53a>
 8011606:	f014 030f 	ands.w	r3, r4, #15
 801160a:	d00a      	beq.n	8011622 <_strtod_l+0x42a>
 801160c:	495e      	ldr	r1, [pc, #376]	@ (8011788 <_strtod_l+0x590>)
 801160e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011612:	4652      	mov	r2, sl
 8011614:	465b      	mov	r3, fp
 8011616:	e9d1 0100 	ldrd	r0, r1, [r1]
 801161a:	f7ee ffed 	bl	80005f8 <__aeabi_dmul>
 801161e:	4682      	mov	sl, r0
 8011620:	468b      	mov	fp, r1
 8011622:	f034 040f 	bics.w	r4, r4, #15
 8011626:	d073      	beq.n	8011710 <_strtod_l+0x518>
 8011628:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801162c:	dd48      	ble.n	80116c0 <_strtod_l+0x4c8>
 801162e:	2400      	movs	r4, #0
 8011630:	46a0      	mov	r8, r4
 8011632:	940a      	str	r4, [sp, #40]	@ 0x28
 8011634:	46a1      	mov	r9, r4
 8011636:	9a05      	ldr	r2, [sp, #20]
 8011638:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011790 <_strtod_l+0x598>
 801163c:	2322      	movs	r3, #34	@ 0x22
 801163e:	6013      	str	r3, [r2, #0]
 8011640:	f04f 0a00 	mov.w	sl, #0
 8011644:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011646:	2b00      	cmp	r3, #0
 8011648:	f43f ae0f 	beq.w	801126a <_strtod_l+0x72>
 801164c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801164e:	9805      	ldr	r0, [sp, #20]
 8011650:	f7ff f942 	bl	80108d8 <_Bfree>
 8011654:	9805      	ldr	r0, [sp, #20]
 8011656:	4649      	mov	r1, r9
 8011658:	f7ff f93e 	bl	80108d8 <_Bfree>
 801165c:	9805      	ldr	r0, [sp, #20]
 801165e:	4641      	mov	r1, r8
 8011660:	f7ff f93a 	bl	80108d8 <_Bfree>
 8011664:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011666:	9805      	ldr	r0, [sp, #20]
 8011668:	f7ff f936 	bl	80108d8 <_Bfree>
 801166c:	9805      	ldr	r0, [sp, #20]
 801166e:	4621      	mov	r1, r4
 8011670:	f7ff f932 	bl	80108d8 <_Bfree>
 8011674:	e5f9      	b.n	801126a <_strtod_l+0x72>
 8011676:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011678:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801167c:	4293      	cmp	r3, r2
 801167e:	dbbc      	blt.n	80115fa <_strtod_l+0x402>
 8011680:	4c41      	ldr	r4, [pc, #260]	@ (8011788 <_strtod_l+0x590>)
 8011682:	f1c5 050f 	rsb	r5, r5, #15
 8011686:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801168a:	4652      	mov	r2, sl
 801168c:	465b      	mov	r3, fp
 801168e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011692:	f7ee ffb1 	bl	80005f8 <__aeabi_dmul>
 8011696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011698:	1b5d      	subs	r5, r3, r5
 801169a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801169e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80116a2:	e78f      	b.n	80115c4 <_strtod_l+0x3cc>
 80116a4:	3316      	adds	r3, #22
 80116a6:	dba8      	blt.n	80115fa <_strtod_l+0x402>
 80116a8:	4b37      	ldr	r3, [pc, #220]	@ (8011788 <_strtod_l+0x590>)
 80116aa:	eba9 0808 	sub.w	r8, r9, r8
 80116ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80116b2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80116b6:	4650      	mov	r0, sl
 80116b8:	4659      	mov	r1, fp
 80116ba:	f7ef f8c7 	bl	800084c <__aeabi_ddiv>
 80116be:	e783      	b.n	80115c8 <_strtod_l+0x3d0>
 80116c0:	4b32      	ldr	r3, [pc, #200]	@ (801178c <_strtod_l+0x594>)
 80116c2:	9308      	str	r3, [sp, #32]
 80116c4:	2300      	movs	r3, #0
 80116c6:	1124      	asrs	r4, r4, #4
 80116c8:	4650      	mov	r0, sl
 80116ca:	4659      	mov	r1, fp
 80116cc:	461e      	mov	r6, r3
 80116ce:	2c01      	cmp	r4, #1
 80116d0:	dc21      	bgt.n	8011716 <_strtod_l+0x51e>
 80116d2:	b10b      	cbz	r3, 80116d8 <_strtod_l+0x4e0>
 80116d4:	4682      	mov	sl, r0
 80116d6:	468b      	mov	fp, r1
 80116d8:	492c      	ldr	r1, [pc, #176]	@ (801178c <_strtod_l+0x594>)
 80116da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80116de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80116e2:	4652      	mov	r2, sl
 80116e4:	465b      	mov	r3, fp
 80116e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116ea:	f7ee ff85 	bl	80005f8 <__aeabi_dmul>
 80116ee:	4b28      	ldr	r3, [pc, #160]	@ (8011790 <_strtod_l+0x598>)
 80116f0:	460a      	mov	r2, r1
 80116f2:	400b      	ands	r3, r1
 80116f4:	4927      	ldr	r1, [pc, #156]	@ (8011794 <_strtod_l+0x59c>)
 80116f6:	428b      	cmp	r3, r1
 80116f8:	4682      	mov	sl, r0
 80116fa:	d898      	bhi.n	801162e <_strtod_l+0x436>
 80116fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011700:	428b      	cmp	r3, r1
 8011702:	bf86      	itte	hi
 8011704:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8011798 <_strtod_l+0x5a0>
 8011708:	f04f 3aff 	movhi.w	sl, #4294967295
 801170c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011710:	2300      	movs	r3, #0
 8011712:	9308      	str	r3, [sp, #32]
 8011714:	e07a      	b.n	801180c <_strtod_l+0x614>
 8011716:	07e2      	lsls	r2, r4, #31
 8011718:	d505      	bpl.n	8011726 <_strtod_l+0x52e>
 801171a:	9b08      	ldr	r3, [sp, #32]
 801171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011720:	f7ee ff6a 	bl	80005f8 <__aeabi_dmul>
 8011724:	2301      	movs	r3, #1
 8011726:	9a08      	ldr	r2, [sp, #32]
 8011728:	3208      	adds	r2, #8
 801172a:	3601      	adds	r6, #1
 801172c:	1064      	asrs	r4, r4, #1
 801172e:	9208      	str	r2, [sp, #32]
 8011730:	e7cd      	b.n	80116ce <_strtod_l+0x4d6>
 8011732:	d0ed      	beq.n	8011710 <_strtod_l+0x518>
 8011734:	4264      	negs	r4, r4
 8011736:	f014 020f 	ands.w	r2, r4, #15
 801173a:	d00a      	beq.n	8011752 <_strtod_l+0x55a>
 801173c:	4b12      	ldr	r3, [pc, #72]	@ (8011788 <_strtod_l+0x590>)
 801173e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011742:	4650      	mov	r0, sl
 8011744:	4659      	mov	r1, fp
 8011746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174a:	f7ef f87f 	bl	800084c <__aeabi_ddiv>
 801174e:	4682      	mov	sl, r0
 8011750:	468b      	mov	fp, r1
 8011752:	1124      	asrs	r4, r4, #4
 8011754:	d0dc      	beq.n	8011710 <_strtod_l+0x518>
 8011756:	2c1f      	cmp	r4, #31
 8011758:	dd20      	ble.n	801179c <_strtod_l+0x5a4>
 801175a:	2400      	movs	r4, #0
 801175c:	46a0      	mov	r8, r4
 801175e:	940a      	str	r4, [sp, #40]	@ 0x28
 8011760:	46a1      	mov	r9, r4
 8011762:	9a05      	ldr	r2, [sp, #20]
 8011764:	2322      	movs	r3, #34	@ 0x22
 8011766:	f04f 0a00 	mov.w	sl, #0
 801176a:	f04f 0b00 	mov.w	fp, #0
 801176e:	6013      	str	r3, [r2, #0]
 8011770:	e768      	b.n	8011644 <_strtod_l+0x44c>
 8011772:	bf00      	nop
 8011774:	080139b2 	.word	0x080139b2
 8011778:	08013bc4 	.word	0x08013bc4
 801177c:	080139aa 	.word	0x080139aa
 8011780:	080139df 	.word	0x080139df
 8011784:	08013c87 	.word	0x08013c87
 8011788:	08013af8 	.word	0x08013af8
 801178c:	08013ad0 	.word	0x08013ad0
 8011790:	7ff00000 	.word	0x7ff00000
 8011794:	7ca00000 	.word	0x7ca00000
 8011798:	7fefffff 	.word	0x7fefffff
 801179c:	f014 0310 	ands.w	r3, r4, #16
 80117a0:	bf18      	it	ne
 80117a2:	236a      	movne	r3, #106	@ 0x6a
 80117a4:	4ea9      	ldr	r6, [pc, #676]	@ (8011a4c <_strtod_l+0x854>)
 80117a6:	9308      	str	r3, [sp, #32]
 80117a8:	4650      	mov	r0, sl
 80117aa:	4659      	mov	r1, fp
 80117ac:	2300      	movs	r3, #0
 80117ae:	07e2      	lsls	r2, r4, #31
 80117b0:	d504      	bpl.n	80117bc <_strtod_l+0x5c4>
 80117b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80117b6:	f7ee ff1f 	bl	80005f8 <__aeabi_dmul>
 80117ba:	2301      	movs	r3, #1
 80117bc:	1064      	asrs	r4, r4, #1
 80117be:	f106 0608 	add.w	r6, r6, #8
 80117c2:	d1f4      	bne.n	80117ae <_strtod_l+0x5b6>
 80117c4:	b10b      	cbz	r3, 80117ca <_strtod_l+0x5d2>
 80117c6:	4682      	mov	sl, r0
 80117c8:	468b      	mov	fp, r1
 80117ca:	9b08      	ldr	r3, [sp, #32]
 80117cc:	b1b3      	cbz	r3, 80117fc <_strtod_l+0x604>
 80117ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80117d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	4659      	mov	r1, fp
 80117da:	dd0f      	ble.n	80117fc <_strtod_l+0x604>
 80117dc:	2b1f      	cmp	r3, #31
 80117de:	dd55      	ble.n	801188c <_strtod_l+0x694>
 80117e0:	2b34      	cmp	r3, #52	@ 0x34
 80117e2:	bfde      	ittt	le
 80117e4:	f04f 33ff 	movle.w	r3, #4294967295
 80117e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80117ec:	4093      	lslle	r3, r2
 80117ee:	f04f 0a00 	mov.w	sl, #0
 80117f2:	bfcc      	ite	gt
 80117f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80117f8:	ea03 0b01 	andle.w	fp, r3, r1
 80117fc:	2200      	movs	r2, #0
 80117fe:	2300      	movs	r3, #0
 8011800:	4650      	mov	r0, sl
 8011802:	4659      	mov	r1, fp
 8011804:	f7ef f960 	bl	8000ac8 <__aeabi_dcmpeq>
 8011808:	2800      	cmp	r0, #0
 801180a:	d1a6      	bne.n	801175a <_strtod_l+0x562>
 801180c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801180e:	9300      	str	r3, [sp, #0]
 8011810:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011812:	9805      	ldr	r0, [sp, #20]
 8011814:	462b      	mov	r3, r5
 8011816:	463a      	mov	r2, r7
 8011818:	f7ff f8c6 	bl	80109a8 <__s2b>
 801181c:	900a      	str	r0, [sp, #40]	@ 0x28
 801181e:	2800      	cmp	r0, #0
 8011820:	f43f af05 	beq.w	801162e <_strtod_l+0x436>
 8011824:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011826:	2a00      	cmp	r2, #0
 8011828:	eba9 0308 	sub.w	r3, r9, r8
 801182c:	bfa8      	it	ge
 801182e:	2300      	movge	r3, #0
 8011830:	9312      	str	r3, [sp, #72]	@ 0x48
 8011832:	2400      	movs	r4, #0
 8011834:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011838:	9316      	str	r3, [sp, #88]	@ 0x58
 801183a:	46a0      	mov	r8, r4
 801183c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801183e:	9805      	ldr	r0, [sp, #20]
 8011840:	6859      	ldr	r1, [r3, #4]
 8011842:	f7ff f809 	bl	8010858 <_Balloc>
 8011846:	4681      	mov	r9, r0
 8011848:	2800      	cmp	r0, #0
 801184a:	f43f aef4 	beq.w	8011636 <_strtod_l+0x43e>
 801184e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011850:	691a      	ldr	r2, [r3, #16]
 8011852:	3202      	adds	r2, #2
 8011854:	f103 010c 	add.w	r1, r3, #12
 8011858:	0092      	lsls	r2, r2, #2
 801185a:	300c      	adds	r0, #12
 801185c:	f7fe f89b 	bl	800f996 <memcpy>
 8011860:	ec4b ab10 	vmov	d0, sl, fp
 8011864:	9805      	ldr	r0, [sp, #20]
 8011866:	aa1c      	add	r2, sp, #112	@ 0x70
 8011868:	a91b      	add	r1, sp, #108	@ 0x6c
 801186a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801186e:	f7ff fbd7 	bl	8011020 <__d2b>
 8011872:	901a      	str	r0, [sp, #104]	@ 0x68
 8011874:	2800      	cmp	r0, #0
 8011876:	f43f aede 	beq.w	8011636 <_strtod_l+0x43e>
 801187a:	9805      	ldr	r0, [sp, #20]
 801187c:	2101      	movs	r1, #1
 801187e:	f7ff f929 	bl	8010ad4 <__i2b>
 8011882:	4680      	mov	r8, r0
 8011884:	b948      	cbnz	r0, 801189a <_strtod_l+0x6a2>
 8011886:	f04f 0800 	mov.w	r8, #0
 801188a:	e6d4      	b.n	8011636 <_strtod_l+0x43e>
 801188c:	f04f 32ff 	mov.w	r2, #4294967295
 8011890:	fa02 f303 	lsl.w	r3, r2, r3
 8011894:	ea03 0a0a 	and.w	sl, r3, sl
 8011898:	e7b0      	b.n	80117fc <_strtod_l+0x604>
 801189a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801189c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801189e:	2d00      	cmp	r5, #0
 80118a0:	bfab      	itete	ge
 80118a2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80118a4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80118a6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80118a8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80118aa:	bfac      	ite	ge
 80118ac:	18ef      	addge	r7, r5, r3
 80118ae:	1b5e      	sublt	r6, r3, r5
 80118b0:	9b08      	ldr	r3, [sp, #32]
 80118b2:	1aed      	subs	r5, r5, r3
 80118b4:	4415      	add	r5, r2
 80118b6:	4b66      	ldr	r3, [pc, #408]	@ (8011a50 <_strtod_l+0x858>)
 80118b8:	3d01      	subs	r5, #1
 80118ba:	429d      	cmp	r5, r3
 80118bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80118c0:	da50      	bge.n	8011964 <_strtod_l+0x76c>
 80118c2:	1b5b      	subs	r3, r3, r5
 80118c4:	2b1f      	cmp	r3, #31
 80118c6:	eba2 0203 	sub.w	r2, r2, r3
 80118ca:	f04f 0101 	mov.w	r1, #1
 80118ce:	dc3d      	bgt.n	801194c <_strtod_l+0x754>
 80118d0:	fa01 f303 	lsl.w	r3, r1, r3
 80118d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80118d6:	2300      	movs	r3, #0
 80118d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80118da:	18bd      	adds	r5, r7, r2
 80118dc:	9b08      	ldr	r3, [sp, #32]
 80118de:	42af      	cmp	r7, r5
 80118e0:	4416      	add	r6, r2
 80118e2:	441e      	add	r6, r3
 80118e4:	463b      	mov	r3, r7
 80118e6:	bfa8      	it	ge
 80118e8:	462b      	movge	r3, r5
 80118ea:	42b3      	cmp	r3, r6
 80118ec:	bfa8      	it	ge
 80118ee:	4633      	movge	r3, r6
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	bfc2      	ittt	gt
 80118f4:	1aed      	subgt	r5, r5, r3
 80118f6:	1af6      	subgt	r6, r6, r3
 80118f8:	1aff      	subgt	r7, r7, r3
 80118fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	dd16      	ble.n	801192e <_strtod_l+0x736>
 8011900:	4641      	mov	r1, r8
 8011902:	9805      	ldr	r0, [sp, #20]
 8011904:	461a      	mov	r2, r3
 8011906:	f7ff f9a5 	bl	8010c54 <__pow5mult>
 801190a:	4680      	mov	r8, r0
 801190c:	2800      	cmp	r0, #0
 801190e:	d0ba      	beq.n	8011886 <_strtod_l+0x68e>
 8011910:	4601      	mov	r1, r0
 8011912:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011914:	9805      	ldr	r0, [sp, #20]
 8011916:	f7ff f8f3 	bl	8010b00 <__multiply>
 801191a:	900e      	str	r0, [sp, #56]	@ 0x38
 801191c:	2800      	cmp	r0, #0
 801191e:	f43f ae8a 	beq.w	8011636 <_strtod_l+0x43e>
 8011922:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011924:	9805      	ldr	r0, [sp, #20]
 8011926:	f7fe ffd7 	bl	80108d8 <_Bfree>
 801192a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801192c:	931a      	str	r3, [sp, #104]	@ 0x68
 801192e:	2d00      	cmp	r5, #0
 8011930:	dc1d      	bgt.n	801196e <_strtod_l+0x776>
 8011932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011934:	2b00      	cmp	r3, #0
 8011936:	dd23      	ble.n	8011980 <_strtod_l+0x788>
 8011938:	4649      	mov	r1, r9
 801193a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801193c:	9805      	ldr	r0, [sp, #20]
 801193e:	f7ff f989 	bl	8010c54 <__pow5mult>
 8011942:	4681      	mov	r9, r0
 8011944:	b9e0      	cbnz	r0, 8011980 <_strtod_l+0x788>
 8011946:	f04f 0900 	mov.w	r9, #0
 801194a:	e674      	b.n	8011636 <_strtod_l+0x43e>
 801194c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011950:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011954:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011958:	35e2      	adds	r5, #226	@ 0xe2
 801195a:	fa01 f305 	lsl.w	r3, r1, r5
 801195e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011960:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011962:	e7ba      	b.n	80118da <_strtod_l+0x6e2>
 8011964:	2300      	movs	r3, #0
 8011966:	9310      	str	r3, [sp, #64]	@ 0x40
 8011968:	2301      	movs	r3, #1
 801196a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801196c:	e7b5      	b.n	80118da <_strtod_l+0x6e2>
 801196e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011970:	9805      	ldr	r0, [sp, #20]
 8011972:	462a      	mov	r2, r5
 8011974:	f7ff f9c8 	bl	8010d08 <__lshift>
 8011978:	901a      	str	r0, [sp, #104]	@ 0x68
 801197a:	2800      	cmp	r0, #0
 801197c:	d1d9      	bne.n	8011932 <_strtod_l+0x73a>
 801197e:	e65a      	b.n	8011636 <_strtod_l+0x43e>
 8011980:	2e00      	cmp	r6, #0
 8011982:	dd07      	ble.n	8011994 <_strtod_l+0x79c>
 8011984:	4649      	mov	r1, r9
 8011986:	9805      	ldr	r0, [sp, #20]
 8011988:	4632      	mov	r2, r6
 801198a:	f7ff f9bd 	bl	8010d08 <__lshift>
 801198e:	4681      	mov	r9, r0
 8011990:	2800      	cmp	r0, #0
 8011992:	d0d8      	beq.n	8011946 <_strtod_l+0x74e>
 8011994:	2f00      	cmp	r7, #0
 8011996:	dd08      	ble.n	80119aa <_strtod_l+0x7b2>
 8011998:	4641      	mov	r1, r8
 801199a:	9805      	ldr	r0, [sp, #20]
 801199c:	463a      	mov	r2, r7
 801199e:	f7ff f9b3 	bl	8010d08 <__lshift>
 80119a2:	4680      	mov	r8, r0
 80119a4:	2800      	cmp	r0, #0
 80119a6:	f43f ae46 	beq.w	8011636 <_strtod_l+0x43e>
 80119aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80119ac:	9805      	ldr	r0, [sp, #20]
 80119ae:	464a      	mov	r2, r9
 80119b0:	f7ff fa32 	bl	8010e18 <__mdiff>
 80119b4:	4604      	mov	r4, r0
 80119b6:	2800      	cmp	r0, #0
 80119b8:	f43f ae3d 	beq.w	8011636 <_strtod_l+0x43e>
 80119bc:	68c3      	ldr	r3, [r0, #12]
 80119be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80119c0:	2300      	movs	r3, #0
 80119c2:	60c3      	str	r3, [r0, #12]
 80119c4:	4641      	mov	r1, r8
 80119c6:	f7ff fa0b 	bl	8010de0 <__mcmp>
 80119ca:	2800      	cmp	r0, #0
 80119cc:	da46      	bge.n	8011a5c <_strtod_l+0x864>
 80119ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119d0:	ea53 030a 	orrs.w	r3, r3, sl
 80119d4:	d16c      	bne.n	8011ab0 <_strtod_l+0x8b8>
 80119d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d168      	bne.n	8011ab0 <_strtod_l+0x8b8>
 80119de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80119e2:	0d1b      	lsrs	r3, r3, #20
 80119e4:	051b      	lsls	r3, r3, #20
 80119e6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80119ea:	d961      	bls.n	8011ab0 <_strtod_l+0x8b8>
 80119ec:	6963      	ldr	r3, [r4, #20]
 80119ee:	b913      	cbnz	r3, 80119f6 <_strtod_l+0x7fe>
 80119f0:	6923      	ldr	r3, [r4, #16]
 80119f2:	2b01      	cmp	r3, #1
 80119f4:	dd5c      	ble.n	8011ab0 <_strtod_l+0x8b8>
 80119f6:	4621      	mov	r1, r4
 80119f8:	2201      	movs	r2, #1
 80119fa:	9805      	ldr	r0, [sp, #20]
 80119fc:	f7ff f984 	bl	8010d08 <__lshift>
 8011a00:	4641      	mov	r1, r8
 8011a02:	4604      	mov	r4, r0
 8011a04:	f7ff f9ec 	bl	8010de0 <__mcmp>
 8011a08:	2800      	cmp	r0, #0
 8011a0a:	dd51      	ble.n	8011ab0 <_strtod_l+0x8b8>
 8011a0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011a10:	9a08      	ldr	r2, [sp, #32]
 8011a12:	0d1b      	lsrs	r3, r3, #20
 8011a14:	051b      	lsls	r3, r3, #20
 8011a16:	2a00      	cmp	r2, #0
 8011a18:	d06b      	beq.n	8011af2 <_strtod_l+0x8fa>
 8011a1a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011a1e:	d868      	bhi.n	8011af2 <_strtod_l+0x8fa>
 8011a20:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011a24:	f67f ae9d 	bls.w	8011762 <_strtod_l+0x56a>
 8011a28:	4b0a      	ldr	r3, [pc, #40]	@ (8011a54 <_strtod_l+0x85c>)
 8011a2a:	4650      	mov	r0, sl
 8011a2c:	4659      	mov	r1, fp
 8011a2e:	2200      	movs	r2, #0
 8011a30:	f7ee fde2 	bl	80005f8 <__aeabi_dmul>
 8011a34:	4b08      	ldr	r3, [pc, #32]	@ (8011a58 <_strtod_l+0x860>)
 8011a36:	400b      	ands	r3, r1
 8011a38:	4682      	mov	sl, r0
 8011a3a:	468b      	mov	fp, r1
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	f47f ae05 	bne.w	801164c <_strtod_l+0x454>
 8011a42:	9a05      	ldr	r2, [sp, #20]
 8011a44:	2322      	movs	r3, #34	@ 0x22
 8011a46:	6013      	str	r3, [r2, #0]
 8011a48:	e600      	b.n	801164c <_strtod_l+0x454>
 8011a4a:	bf00      	nop
 8011a4c:	08013bf0 	.word	0x08013bf0
 8011a50:	fffffc02 	.word	0xfffffc02
 8011a54:	39500000 	.word	0x39500000
 8011a58:	7ff00000 	.word	0x7ff00000
 8011a5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011a60:	d165      	bne.n	8011b2e <_strtod_l+0x936>
 8011a62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011a64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011a68:	b35a      	cbz	r2, 8011ac2 <_strtod_l+0x8ca>
 8011a6a:	4a9f      	ldr	r2, [pc, #636]	@ (8011ce8 <_strtod_l+0xaf0>)
 8011a6c:	4293      	cmp	r3, r2
 8011a6e:	d12b      	bne.n	8011ac8 <_strtod_l+0x8d0>
 8011a70:	9b08      	ldr	r3, [sp, #32]
 8011a72:	4651      	mov	r1, sl
 8011a74:	b303      	cbz	r3, 8011ab8 <_strtod_l+0x8c0>
 8011a76:	4b9d      	ldr	r3, [pc, #628]	@ (8011cec <_strtod_l+0xaf4>)
 8011a78:	465a      	mov	r2, fp
 8011a7a:	4013      	ands	r3, r2
 8011a7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011a80:	f04f 32ff 	mov.w	r2, #4294967295
 8011a84:	d81b      	bhi.n	8011abe <_strtod_l+0x8c6>
 8011a86:	0d1b      	lsrs	r3, r3, #20
 8011a88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8011a90:	4299      	cmp	r1, r3
 8011a92:	d119      	bne.n	8011ac8 <_strtod_l+0x8d0>
 8011a94:	4b96      	ldr	r3, [pc, #600]	@ (8011cf0 <_strtod_l+0xaf8>)
 8011a96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d102      	bne.n	8011aa2 <_strtod_l+0x8aa>
 8011a9c:	3101      	adds	r1, #1
 8011a9e:	f43f adca 	beq.w	8011636 <_strtod_l+0x43e>
 8011aa2:	4b92      	ldr	r3, [pc, #584]	@ (8011cec <_strtod_l+0xaf4>)
 8011aa4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011aa6:	401a      	ands	r2, r3
 8011aa8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011aac:	f04f 0a00 	mov.w	sl, #0
 8011ab0:	9b08      	ldr	r3, [sp, #32]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d1b8      	bne.n	8011a28 <_strtod_l+0x830>
 8011ab6:	e5c9      	b.n	801164c <_strtod_l+0x454>
 8011ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8011abc:	e7e8      	b.n	8011a90 <_strtod_l+0x898>
 8011abe:	4613      	mov	r3, r2
 8011ac0:	e7e6      	b.n	8011a90 <_strtod_l+0x898>
 8011ac2:	ea53 030a 	orrs.w	r3, r3, sl
 8011ac6:	d0a1      	beq.n	8011a0c <_strtod_l+0x814>
 8011ac8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011aca:	b1db      	cbz	r3, 8011b04 <_strtod_l+0x90c>
 8011acc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011ace:	4213      	tst	r3, r2
 8011ad0:	d0ee      	beq.n	8011ab0 <_strtod_l+0x8b8>
 8011ad2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ad4:	9a08      	ldr	r2, [sp, #32]
 8011ad6:	4650      	mov	r0, sl
 8011ad8:	4659      	mov	r1, fp
 8011ada:	b1bb      	cbz	r3, 8011b0c <_strtod_l+0x914>
 8011adc:	f7ff fb6e 	bl	80111bc <sulp>
 8011ae0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011ae4:	ec53 2b10 	vmov	r2, r3, d0
 8011ae8:	f7ee fbd0 	bl	800028c <__adddf3>
 8011aec:	4682      	mov	sl, r0
 8011aee:	468b      	mov	fp, r1
 8011af0:	e7de      	b.n	8011ab0 <_strtod_l+0x8b8>
 8011af2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011af6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011afa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011afe:	f04f 3aff 	mov.w	sl, #4294967295
 8011b02:	e7d5      	b.n	8011ab0 <_strtod_l+0x8b8>
 8011b04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011b06:	ea13 0f0a 	tst.w	r3, sl
 8011b0a:	e7e1      	b.n	8011ad0 <_strtod_l+0x8d8>
 8011b0c:	f7ff fb56 	bl	80111bc <sulp>
 8011b10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011b14:	ec53 2b10 	vmov	r2, r3, d0
 8011b18:	f7ee fbb6 	bl	8000288 <__aeabi_dsub>
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	2300      	movs	r3, #0
 8011b20:	4682      	mov	sl, r0
 8011b22:	468b      	mov	fp, r1
 8011b24:	f7ee ffd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b28:	2800      	cmp	r0, #0
 8011b2a:	d0c1      	beq.n	8011ab0 <_strtod_l+0x8b8>
 8011b2c:	e619      	b.n	8011762 <_strtod_l+0x56a>
 8011b2e:	4641      	mov	r1, r8
 8011b30:	4620      	mov	r0, r4
 8011b32:	f7ff facd 	bl	80110d0 <__ratio>
 8011b36:	ec57 6b10 	vmov	r6, r7, d0
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011b40:	4630      	mov	r0, r6
 8011b42:	4639      	mov	r1, r7
 8011b44:	f7ee ffd4 	bl	8000af0 <__aeabi_dcmple>
 8011b48:	2800      	cmp	r0, #0
 8011b4a:	d06f      	beq.n	8011c2c <_strtod_l+0xa34>
 8011b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d17a      	bne.n	8011c48 <_strtod_l+0xa50>
 8011b52:	f1ba 0f00 	cmp.w	sl, #0
 8011b56:	d158      	bne.n	8011c0a <_strtod_l+0xa12>
 8011b58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d15a      	bne.n	8011c18 <_strtod_l+0xa20>
 8011b62:	4b64      	ldr	r3, [pc, #400]	@ (8011cf4 <_strtod_l+0xafc>)
 8011b64:	2200      	movs	r2, #0
 8011b66:	4630      	mov	r0, r6
 8011b68:	4639      	mov	r1, r7
 8011b6a:	f7ee ffb7 	bl	8000adc <__aeabi_dcmplt>
 8011b6e:	2800      	cmp	r0, #0
 8011b70:	d159      	bne.n	8011c26 <_strtod_l+0xa2e>
 8011b72:	4630      	mov	r0, r6
 8011b74:	4639      	mov	r1, r7
 8011b76:	4b60      	ldr	r3, [pc, #384]	@ (8011cf8 <_strtod_l+0xb00>)
 8011b78:	2200      	movs	r2, #0
 8011b7a:	f7ee fd3d 	bl	80005f8 <__aeabi_dmul>
 8011b7e:	4606      	mov	r6, r0
 8011b80:	460f      	mov	r7, r1
 8011b82:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011b86:	9606      	str	r6, [sp, #24]
 8011b88:	9307      	str	r3, [sp, #28]
 8011b8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b8e:	4d57      	ldr	r5, [pc, #348]	@ (8011cec <_strtod_l+0xaf4>)
 8011b90:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011b94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b96:	401d      	ands	r5, r3
 8011b98:	4b58      	ldr	r3, [pc, #352]	@ (8011cfc <_strtod_l+0xb04>)
 8011b9a:	429d      	cmp	r5, r3
 8011b9c:	f040 80b2 	bne.w	8011d04 <_strtod_l+0xb0c>
 8011ba0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ba2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011ba6:	ec4b ab10 	vmov	d0, sl, fp
 8011baa:	f7ff f9c9 	bl	8010f40 <__ulp>
 8011bae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011bb2:	ec51 0b10 	vmov	r0, r1, d0
 8011bb6:	f7ee fd1f 	bl	80005f8 <__aeabi_dmul>
 8011bba:	4652      	mov	r2, sl
 8011bbc:	465b      	mov	r3, fp
 8011bbe:	f7ee fb65 	bl	800028c <__adddf3>
 8011bc2:	460b      	mov	r3, r1
 8011bc4:	4949      	ldr	r1, [pc, #292]	@ (8011cec <_strtod_l+0xaf4>)
 8011bc6:	4a4e      	ldr	r2, [pc, #312]	@ (8011d00 <_strtod_l+0xb08>)
 8011bc8:	4019      	ands	r1, r3
 8011bca:	4291      	cmp	r1, r2
 8011bcc:	4682      	mov	sl, r0
 8011bce:	d942      	bls.n	8011c56 <_strtod_l+0xa5e>
 8011bd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011bd2:	4b47      	ldr	r3, [pc, #284]	@ (8011cf0 <_strtod_l+0xaf8>)
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d103      	bne.n	8011be0 <_strtod_l+0x9e8>
 8011bd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011bda:	3301      	adds	r3, #1
 8011bdc:	f43f ad2b 	beq.w	8011636 <_strtod_l+0x43e>
 8011be0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011cf0 <_strtod_l+0xaf8>
 8011be4:	f04f 3aff 	mov.w	sl, #4294967295
 8011be8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011bea:	9805      	ldr	r0, [sp, #20]
 8011bec:	f7fe fe74 	bl	80108d8 <_Bfree>
 8011bf0:	9805      	ldr	r0, [sp, #20]
 8011bf2:	4649      	mov	r1, r9
 8011bf4:	f7fe fe70 	bl	80108d8 <_Bfree>
 8011bf8:	9805      	ldr	r0, [sp, #20]
 8011bfa:	4641      	mov	r1, r8
 8011bfc:	f7fe fe6c 	bl	80108d8 <_Bfree>
 8011c00:	9805      	ldr	r0, [sp, #20]
 8011c02:	4621      	mov	r1, r4
 8011c04:	f7fe fe68 	bl	80108d8 <_Bfree>
 8011c08:	e618      	b.n	801183c <_strtod_l+0x644>
 8011c0a:	f1ba 0f01 	cmp.w	sl, #1
 8011c0e:	d103      	bne.n	8011c18 <_strtod_l+0xa20>
 8011c10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	f43f ada5 	beq.w	8011762 <_strtod_l+0x56a>
 8011c18:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011cc8 <_strtod_l+0xad0>
 8011c1c:	4f35      	ldr	r7, [pc, #212]	@ (8011cf4 <_strtod_l+0xafc>)
 8011c1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011c22:	2600      	movs	r6, #0
 8011c24:	e7b1      	b.n	8011b8a <_strtod_l+0x992>
 8011c26:	4f34      	ldr	r7, [pc, #208]	@ (8011cf8 <_strtod_l+0xb00>)
 8011c28:	2600      	movs	r6, #0
 8011c2a:	e7aa      	b.n	8011b82 <_strtod_l+0x98a>
 8011c2c:	4b32      	ldr	r3, [pc, #200]	@ (8011cf8 <_strtod_l+0xb00>)
 8011c2e:	4630      	mov	r0, r6
 8011c30:	4639      	mov	r1, r7
 8011c32:	2200      	movs	r2, #0
 8011c34:	f7ee fce0 	bl	80005f8 <__aeabi_dmul>
 8011c38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c3a:	4606      	mov	r6, r0
 8011c3c:	460f      	mov	r7, r1
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d09f      	beq.n	8011b82 <_strtod_l+0x98a>
 8011c42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011c46:	e7a0      	b.n	8011b8a <_strtod_l+0x992>
 8011c48:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011cd0 <_strtod_l+0xad8>
 8011c4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011c50:	ec57 6b17 	vmov	r6, r7, d7
 8011c54:	e799      	b.n	8011b8a <_strtod_l+0x992>
 8011c56:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011c5a:	9b08      	ldr	r3, [sp, #32]
 8011c5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d1c1      	bne.n	8011be8 <_strtod_l+0x9f0>
 8011c64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011c68:	0d1b      	lsrs	r3, r3, #20
 8011c6a:	051b      	lsls	r3, r3, #20
 8011c6c:	429d      	cmp	r5, r3
 8011c6e:	d1bb      	bne.n	8011be8 <_strtod_l+0x9f0>
 8011c70:	4630      	mov	r0, r6
 8011c72:	4639      	mov	r1, r7
 8011c74:	f7ef f808 	bl	8000c88 <__aeabi_d2lz>
 8011c78:	f7ee fc90 	bl	800059c <__aeabi_l2d>
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	460b      	mov	r3, r1
 8011c80:	4630      	mov	r0, r6
 8011c82:	4639      	mov	r1, r7
 8011c84:	f7ee fb00 	bl	8000288 <__aeabi_dsub>
 8011c88:	460b      	mov	r3, r1
 8011c8a:	4602      	mov	r2, r0
 8011c8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011c90:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011c94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c96:	ea46 060a 	orr.w	r6, r6, sl
 8011c9a:	431e      	orrs	r6, r3
 8011c9c:	d06f      	beq.n	8011d7e <_strtod_l+0xb86>
 8011c9e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011cd8 <_strtod_l+0xae0>)
 8011ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca4:	f7ee ff1a 	bl	8000adc <__aeabi_dcmplt>
 8011ca8:	2800      	cmp	r0, #0
 8011caa:	f47f accf 	bne.w	801164c <_strtod_l+0x454>
 8011cae:	a30c      	add	r3, pc, #48	@ (adr r3, 8011ce0 <_strtod_l+0xae8>)
 8011cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011cb8:	f7ee ff2e 	bl	8000b18 <__aeabi_dcmpgt>
 8011cbc:	2800      	cmp	r0, #0
 8011cbe:	d093      	beq.n	8011be8 <_strtod_l+0x9f0>
 8011cc0:	e4c4      	b.n	801164c <_strtod_l+0x454>
 8011cc2:	bf00      	nop
 8011cc4:	f3af 8000 	nop.w
 8011cc8:	00000000 	.word	0x00000000
 8011ccc:	bff00000 	.word	0xbff00000
 8011cd0:	00000000 	.word	0x00000000
 8011cd4:	3ff00000 	.word	0x3ff00000
 8011cd8:	94a03595 	.word	0x94a03595
 8011cdc:	3fdfffff 	.word	0x3fdfffff
 8011ce0:	35afe535 	.word	0x35afe535
 8011ce4:	3fe00000 	.word	0x3fe00000
 8011ce8:	000fffff 	.word	0x000fffff
 8011cec:	7ff00000 	.word	0x7ff00000
 8011cf0:	7fefffff 	.word	0x7fefffff
 8011cf4:	3ff00000 	.word	0x3ff00000
 8011cf8:	3fe00000 	.word	0x3fe00000
 8011cfc:	7fe00000 	.word	0x7fe00000
 8011d00:	7c9fffff 	.word	0x7c9fffff
 8011d04:	9b08      	ldr	r3, [sp, #32]
 8011d06:	b323      	cbz	r3, 8011d52 <_strtod_l+0xb5a>
 8011d08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8011d0c:	d821      	bhi.n	8011d52 <_strtod_l+0xb5a>
 8011d0e:	a328      	add	r3, pc, #160	@ (adr r3, 8011db0 <_strtod_l+0xbb8>)
 8011d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d14:	4630      	mov	r0, r6
 8011d16:	4639      	mov	r1, r7
 8011d18:	f7ee feea 	bl	8000af0 <__aeabi_dcmple>
 8011d1c:	b1a0      	cbz	r0, 8011d48 <_strtod_l+0xb50>
 8011d1e:	4639      	mov	r1, r7
 8011d20:	4630      	mov	r0, r6
 8011d22:	f7ee ff41 	bl	8000ba8 <__aeabi_d2uiz>
 8011d26:	2801      	cmp	r0, #1
 8011d28:	bf38      	it	cc
 8011d2a:	2001      	movcc	r0, #1
 8011d2c:	f7ee fbea 	bl	8000504 <__aeabi_ui2d>
 8011d30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d32:	4606      	mov	r6, r0
 8011d34:	460f      	mov	r7, r1
 8011d36:	b9fb      	cbnz	r3, 8011d78 <_strtod_l+0xb80>
 8011d38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011d3c:	9014      	str	r0, [sp, #80]	@ 0x50
 8011d3e:	9315      	str	r3, [sp, #84]	@ 0x54
 8011d40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011d44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011d48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011d4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011d4e:	1b5b      	subs	r3, r3, r5
 8011d50:	9311      	str	r3, [sp, #68]	@ 0x44
 8011d52:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011d56:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011d5a:	f7ff f8f1 	bl	8010f40 <__ulp>
 8011d5e:	4650      	mov	r0, sl
 8011d60:	ec53 2b10 	vmov	r2, r3, d0
 8011d64:	4659      	mov	r1, fp
 8011d66:	f7ee fc47 	bl	80005f8 <__aeabi_dmul>
 8011d6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011d6e:	f7ee fa8d 	bl	800028c <__adddf3>
 8011d72:	4682      	mov	sl, r0
 8011d74:	468b      	mov	fp, r1
 8011d76:	e770      	b.n	8011c5a <_strtod_l+0xa62>
 8011d78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011d7c:	e7e0      	b.n	8011d40 <_strtod_l+0xb48>
 8011d7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011db8 <_strtod_l+0xbc0>)
 8011d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d84:	f7ee feaa 	bl	8000adc <__aeabi_dcmplt>
 8011d88:	e798      	b.n	8011cbc <_strtod_l+0xac4>
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011d8e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011d90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011d92:	6013      	str	r3, [r2, #0]
 8011d94:	f7ff ba6d 	b.w	8011272 <_strtod_l+0x7a>
 8011d98:	2a65      	cmp	r2, #101	@ 0x65
 8011d9a:	f43f ab66 	beq.w	801146a <_strtod_l+0x272>
 8011d9e:	2a45      	cmp	r2, #69	@ 0x45
 8011da0:	f43f ab63 	beq.w	801146a <_strtod_l+0x272>
 8011da4:	2301      	movs	r3, #1
 8011da6:	f7ff bb9e 	b.w	80114e6 <_strtod_l+0x2ee>
 8011daa:	bf00      	nop
 8011dac:	f3af 8000 	nop.w
 8011db0:	ffc00000 	.word	0xffc00000
 8011db4:	41dfffff 	.word	0x41dfffff
 8011db8:	94a03595 	.word	0x94a03595
 8011dbc:	3fcfffff 	.word	0x3fcfffff

08011dc0 <_strtod_r>:
 8011dc0:	4b01      	ldr	r3, [pc, #4]	@ (8011dc8 <_strtod_r+0x8>)
 8011dc2:	f7ff ba19 	b.w	80111f8 <_strtod_l>
 8011dc6:	bf00      	nop
 8011dc8:	200001e8 	.word	0x200001e8

08011dcc <__ssputs_r>:
 8011dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dd0:	688e      	ldr	r6, [r1, #8]
 8011dd2:	461f      	mov	r7, r3
 8011dd4:	42be      	cmp	r6, r7
 8011dd6:	680b      	ldr	r3, [r1, #0]
 8011dd8:	4682      	mov	sl, r0
 8011dda:	460c      	mov	r4, r1
 8011ddc:	4690      	mov	r8, r2
 8011dde:	d82d      	bhi.n	8011e3c <__ssputs_r+0x70>
 8011de0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011de4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011de8:	d026      	beq.n	8011e38 <__ssputs_r+0x6c>
 8011dea:	6965      	ldr	r5, [r4, #20]
 8011dec:	6909      	ldr	r1, [r1, #16]
 8011dee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011df2:	eba3 0901 	sub.w	r9, r3, r1
 8011df6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011dfa:	1c7b      	adds	r3, r7, #1
 8011dfc:	444b      	add	r3, r9
 8011dfe:	106d      	asrs	r5, r5, #1
 8011e00:	429d      	cmp	r5, r3
 8011e02:	bf38      	it	cc
 8011e04:	461d      	movcc	r5, r3
 8011e06:	0553      	lsls	r3, r2, #21
 8011e08:	d527      	bpl.n	8011e5a <__ssputs_r+0x8e>
 8011e0a:	4629      	mov	r1, r5
 8011e0c:	f7fe fc98 	bl	8010740 <_malloc_r>
 8011e10:	4606      	mov	r6, r0
 8011e12:	b360      	cbz	r0, 8011e6e <__ssputs_r+0xa2>
 8011e14:	6921      	ldr	r1, [r4, #16]
 8011e16:	464a      	mov	r2, r9
 8011e18:	f7fd fdbd 	bl	800f996 <memcpy>
 8011e1c:	89a3      	ldrh	r3, [r4, #12]
 8011e1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e26:	81a3      	strh	r3, [r4, #12]
 8011e28:	6126      	str	r6, [r4, #16]
 8011e2a:	6165      	str	r5, [r4, #20]
 8011e2c:	444e      	add	r6, r9
 8011e2e:	eba5 0509 	sub.w	r5, r5, r9
 8011e32:	6026      	str	r6, [r4, #0]
 8011e34:	60a5      	str	r5, [r4, #8]
 8011e36:	463e      	mov	r6, r7
 8011e38:	42be      	cmp	r6, r7
 8011e3a:	d900      	bls.n	8011e3e <__ssputs_r+0x72>
 8011e3c:	463e      	mov	r6, r7
 8011e3e:	6820      	ldr	r0, [r4, #0]
 8011e40:	4632      	mov	r2, r6
 8011e42:	4641      	mov	r1, r8
 8011e44:	f000 fe4b 	bl	8012ade <memmove>
 8011e48:	68a3      	ldr	r3, [r4, #8]
 8011e4a:	1b9b      	subs	r3, r3, r6
 8011e4c:	60a3      	str	r3, [r4, #8]
 8011e4e:	6823      	ldr	r3, [r4, #0]
 8011e50:	4433      	add	r3, r6
 8011e52:	6023      	str	r3, [r4, #0]
 8011e54:	2000      	movs	r0, #0
 8011e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e5a:	462a      	mov	r2, r5
 8011e5c:	f001 fa11 	bl	8013282 <_realloc_r>
 8011e60:	4606      	mov	r6, r0
 8011e62:	2800      	cmp	r0, #0
 8011e64:	d1e0      	bne.n	8011e28 <__ssputs_r+0x5c>
 8011e66:	6921      	ldr	r1, [r4, #16]
 8011e68:	4650      	mov	r0, sl
 8011e6a:	f7fe fbf5 	bl	8010658 <_free_r>
 8011e6e:	230c      	movs	r3, #12
 8011e70:	f8ca 3000 	str.w	r3, [sl]
 8011e74:	89a3      	ldrh	r3, [r4, #12]
 8011e76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e7a:	81a3      	strh	r3, [r4, #12]
 8011e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e80:	e7e9      	b.n	8011e56 <__ssputs_r+0x8a>
	...

08011e84 <_svfiprintf_r>:
 8011e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e88:	4698      	mov	r8, r3
 8011e8a:	898b      	ldrh	r3, [r1, #12]
 8011e8c:	061b      	lsls	r3, r3, #24
 8011e8e:	b09d      	sub	sp, #116	@ 0x74
 8011e90:	4607      	mov	r7, r0
 8011e92:	460d      	mov	r5, r1
 8011e94:	4614      	mov	r4, r2
 8011e96:	d510      	bpl.n	8011eba <_svfiprintf_r+0x36>
 8011e98:	690b      	ldr	r3, [r1, #16]
 8011e9a:	b973      	cbnz	r3, 8011eba <_svfiprintf_r+0x36>
 8011e9c:	2140      	movs	r1, #64	@ 0x40
 8011e9e:	f7fe fc4f 	bl	8010740 <_malloc_r>
 8011ea2:	6028      	str	r0, [r5, #0]
 8011ea4:	6128      	str	r0, [r5, #16]
 8011ea6:	b930      	cbnz	r0, 8011eb6 <_svfiprintf_r+0x32>
 8011ea8:	230c      	movs	r3, #12
 8011eaa:	603b      	str	r3, [r7, #0]
 8011eac:	f04f 30ff 	mov.w	r0, #4294967295
 8011eb0:	b01d      	add	sp, #116	@ 0x74
 8011eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eb6:	2340      	movs	r3, #64	@ 0x40
 8011eb8:	616b      	str	r3, [r5, #20]
 8011eba:	2300      	movs	r3, #0
 8011ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ebe:	2320      	movs	r3, #32
 8011ec0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011ec4:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ec8:	2330      	movs	r3, #48	@ 0x30
 8011eca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012068 <_svfiprintf_r+0x1e4>
 8011ece:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ed2:	f04f 0901 	mov.w	r9, #1
 8011ed6:	4623      	mov	r3, r4
 8011ed8:	469a      	mov	sl, r3
 8011eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ede:	b10a      	cbz	r2, 8011ee4 <_svfiprintf_r+0x60>
 8011ee0:	2a25      	cmp	r2, #37	@ 0x25
 8011ee2:	d1f9      	bne.n	8011ed8 <_svfiprintf_r+0x54>
 8011ee4:	ebba 0b04 	subs.w	fp, sl, r4
 8011ee8:	d00b      	beq.n	8011f02 <_svfiprintf_r+0x7e>
 8011eea:	465b      	mov	r3, fp
 8011eec:	4622      	mov	r2, r4
 8011eee:	4629      	mov	r1, r5
 8011ef0:	4638      	mov	r0, r7
 8011ef2:	f7ff ff6b 	bl	8011dcc <__ssputs_r>
 8011ef6:	3001      	adds	r0, #1
 8011ef8:	f000 80a7 	beq.w	801204a <_svfiprintf_r+0x1c6>
 8011efc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011efe:	445a      	add	r2, fp
 8011f00:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f02:	f89a 3000 	ldrb.w	r3, [sl]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	f000 809f 	beq.w	801204a <_svfiprintf_r+0x1c6>
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8011f12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f16:	f10a 0a01 	add.w	sl, sl, #1
 8011f1a:	9304      	str	r3, [sp, #16]
 8011f1c:	9307      	str	r3, [sp, #28]
 8011f1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011f22:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f24:	4654      	mov	r4, sl
 8011f26:	2205      	movs	r2, #5
 8011f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f2c:	484e      	ldr	r0, [pc, #312]	@ (8012068 <_svfiprintf_r+0x1e4>)
 8011f2e:	f7ee f94f 	bl	80001d0 <memchr>
 8011f32:	9a04      	ldr	r2, [sp, #16]
 8011f34:	b9d8      	cbnz	r0, 8011f6e <_svfiprintf_r+0xea>
 8011f36:	06d0      	lsls	r0, r2, #27
 8011f38:	bf44      	itt	mi
 8011f3a:	2320      	movmi	r3, #32
 8011f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f40:	0711      	lsls	r1, r2, #28
 8011f42:	bf44      	itt	mi
 8011f44:	232b      	movmi	r3, #43	@ 0x2b
 8011f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8011f4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f50:	d015      	beq.n	8011f7e <_svfiprintf_r+0xfa>
 8011f52:	9a07      	ldr	r2, [sp, #28]
 8011f54:	4654      	mov	r4, sl
 8011f56:	2000      	movs	r0, #0
 8011f58:	f04f 0c0a 	mov.w	ip, #10
 8011f5c:	4621      	mov	r1, r4
 8011f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f62:	3b30      	subs	r3, #48	@ 0x30
 8011f64:	2b09      	cmp	r3, #9
 8011f66:	d94b      	bls.n	8012000 <_svfiprintf_r+0x17c>
 8011f68:	b1b0      	cbz	r0, 8011f98 <_svfiprintf_r+0x114>
 8011f6a:	9207      	str	r2, [sp, #28]
 8011f6c:	e014      	b.n	8011f98 <_svfiprintf_r+0x114>
 8011f6e:	eba0 0308 	sub.w	r3, r0, r8
 8011f72:	fa09 f303 	lsl.w	r3, r9, r3
 8011f76:	4313      	orrs	r3, r2
 8011f78:	9304      	str	r3, [sp, #16]
 8011f7a:	46a2      	mov	sl, r4
 8011f7c:	e7d2      	b.n	8011f24 <_svfiprintf_r+0xa0>
 8011f7e:	9b03      	ldr	r3, [sp, #12]
 8011f80:	1d19      	adds	r1, r3, #4
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	9103      	str	r1, [sp, #12]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	bfbb      	ittet	lt
 8011f8a:	425b      	neglt	r3, r3
 8011f8c:	f042 0202 	orrlt.w	r2, r2, #2
 8011f90:	9307      	strge	r3, [sp, #28]
 8011f92:	9307      	strlt	r3, [sp, #28]
 8011f94:	bfb8      	it	lt
 8011f96:	9204      	strlt	r2, [sp, #16]
 8011f98:	7823      	ldrb	r3, [r4, #0]
 8011f9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f9c:	d10a      	bne.n	8011fb4 <_svfiprintf_r+0x130>
 8011f9e:	7863      	ldrb	r3, [r4, #1]
 8011fa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8011fa2:	d132      	bne.n	801200a <_svfiprintf_r+0x186>
 8011fa4:	9b03      	ldr	r3, [sp, #12]
 8011fa6:	1d1a      	adds	r2, r3, #4
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	9203      	str	r2, [sp, #12]
 8011fac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011fb0:	3402      	adds	r4, #2
 8011fb2:	9305      	str	r3, [sp, #20]
 8011fb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012078 <_svfiprintf_r+0x1f4>
 8011fb8:	7821      	ldrb	r1, [r4, #0]
 8011fba:	2203      	movs	r2, #3
 8011fbc:	4650      	mov	r0, sl
 8011fbe:	f7ee f907 	bl	80001d0 <memchr>
 8011fc2:	b138      	cbz	r0, 8011fd4 <_svfiprintf_r+0x150>
 8011fc4:	9b04      	ldr	r3, [sp, #16]
 8011fc6:	eba0 000a 	sub.w	r0, r0, sl
 8011fca:	2240      	movs	r2, #64	@ 0x40
 8011fcc:	4082      	lsls	r2, r0
 8011fce:	4313      	orrs	r3, r2
 8011fd0:	3401      	adds	r4, #1
 8011fd2:	9304      	str	r3, [sp, #16]
 8011fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fd8:	4824      	ldr	r0, [pc, #144]	@ (801206c <_svfiprintf_r+0x1e8>)
 8011fda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011fde:	2206      	movs	r2, #6
 8011fe0:	f7ee f8f6 	bl	80001d0 <memchr>
 8011fe4:	2800      	cmp	r0, #0
 8011fe6:	d036      	beq.n	8012056 <_svfiprintf_r+0x1d2>
 8011fe8:	4b21      	ldr	r3, [pc, #132]	@ (8012070 <_svfiprintf_r+0x1ec>)
 8011fea:	bb1b      	cbnz	r3, 8012034 <_svfiprintf_r+0x1b0>
 8011fec:	9b03      	ldr	r3, [sp, #12]
 8011fee:	3307      	adds	r3, #7
 8011ff0:	f023 0307 	bic.w	r3, r3, #7
 8011ff4:	3308      	adds	r3, #8
 8011ff6:	9303      	str	r3, [sp, #12]
 8011ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ffa:	4433      	add	r3, r6
 8011ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ffe:	e76a      	b.n	8011ed6 <_svfiprintf_r+0x52>
 8012000:	fb0c 3202 	mla	r2, ip, r2, r3
 8012004:	460c      	mov	r4, r1
 8012006:	2001      	movs	r0, #1
 8012008:	e7a8      	b.n	8011f5c <_svfiprintf_r+0xd8>
 801200a:	2300      	movs	r3, #0
 801200c:	3401      	adds	r4, #1
 801200e:	9305      	str	r3, [sp, #20]
 8012010:	4619      	mov	r1, r3
 8012012:	f04f 0c0a 	mov.w	ip, #10
 8012016:	4620      	mov	r0, r4
 8012018:	f810 2b01 	ldrb.w	r2, [r0], #1
 801201c:	3a30      	subs	r2, #48	@ 0x30
 801201e:	2a09      	cmp	r2, #9
 8012020:	d903      	bls.n	801202a <_svfiprintf_r+0x1a6>
 8012022:	2b00      	cmp	r3, #0
 8012024:	d0c6      	beq.n	8011fb4 <_svfiprintf_r+0x130>
 8012026:	9105      	str	r1, [sp, #20]
 8012028:	e7c4      	b.n	8011fb4 <_svfiprintf_r+0x130>
 801202a:	fb0c 2101 	mla	r1, ip, r1, r2
 801202e:	4604      	mov	r4, r0
 8012030:	2301      	movs	r3, #1
 8012032:	e7f0      	b.n	8012016 <_svfiprintf_r+0x192>
 8012034:	ab03      	add	r3, sp, #12
 8012036:	9300      	str	r3, [sp, #0]
 8012038:	462a      	mov	r2, r5
 801203a:	4b0e      	ldr	r3, [pc, #56]	@ (8012074 <_svfiprintf_r+0x1f0>)
 801203c:	a904      	add	r1, sp, #16
 801203e:	4638      	mov	r0, r7
 8012040:	f7fc fb20 	bl	800e684 <_printf_float>
 8012044:	1c42      	adds	r2, r0, #1
 8012046:	4606      	mov	r6, r0
 8012048:	d1d6      	bne.n	8011ff8 <_svfiprintf_r+0x174>
 801204a:	89ab      	ldrh	r3, [r5, #12]
 801204c:	065b      	lsls	r3, r3, #25
 801204e:	f53f af2d 	bmi.w	8011eac <_svfiprintf_r+0x28>
 8012052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012054:	e72c      	b.n	8011eb0 <_svfiprintf_r+0x2c>
 8012056:	ab03      	add	r3, sp, #12
 8012058:	9300      	str	r3, [sp, #0]
 801205a:	462a      	mov	r2, r5
 801205c:	4b05      	ldr	r3, [pc, #20]	@ (8012074 <_svfiprintf_r+0x1f0>)
 801205e:	a904      	add	r1, sp, #16
 8012060:	4638      	mov	r0, r7
 8012062:	f7fc fda7 	bl	800ebb4 <_printf_i>
 8012066:	e7ed      	b.n	8012044 <_svfiprintf_r+0x1c0>
 8012068:	08013c18 	.word	0x08013c18
 801206c:	08013c22 	.word	0x08013c22
 8012070:	0800e685 	.word	0x0800e685
 8012074:	08011dcd 	.word	0x08011dcd
 8012078:	08013c1e 	.word	0x08013c1e

0801207c <_sungetc_r>:
 801207c:	b538      	push	{r3, r4, r5, lr}
 801207e:	1c4b      	adds	r3, r1, #1
 8012080:	4614      	mov	r4, r2
 8012082:	d103      	bne.n	801208c <_sungetc_r+0x10>
 8012084:	f04f 35ff 	mov.w	r5, #4294967295
 8012088:	4628      	mov	r0, r5
 801208a:	bd38      	pop	{r3, r4, r5, pc}
 801208c:	8993      	ldrh	r3, [r2, #12]
 801208e:	f023 0320 	bic.w	r3, r3, #32
 8012092:	8193      	strh	r3, [r2, #12]
 8012094:	6853      	ldr	r3, [r2, #4]
 8012096:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8012098:	b2cd      	uxtb	r5, r1
 801209a:	b18a      	cbz	r2, 80120c0 <_sungetc_r+0x44>
 801209c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801209e:	429a      	cmp	r2, r3
 80120a0:	dd08      	ble.n	80120b4 <_sungetc_r+0x38>
 80120a2:	6823      	ldr	r3, [r4, #0]
 80120a4:	1e5a      	subs	r2, r3, #1
 80120a6:	6022      	str	r2, [r4, #0]
 80120a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80120ac:	6863      	ldr	r3, [r4, #4]
 80120ae:	3301      	adds	r3, #1
 80120b0:	6063      	str	r3, [r4, #4]
 80120b2:	e7e9      	b.n	8012088 <_sungetc_r+0xc>
 80120b4:	4621      	mov	r1, r4
 80120b6:	f000 fcd8 	bl	8012a6a <__submore>
 80120ba:	2800      	cmp	r0, #0
 80120bc:	d0f1      	beq.n	80120a2 <_sungetc_r+0x26>
 80120be:	e7e1      	b.n	8012084 <_sungetc_r+0x8>
 80120c0:	6921      	ldr	r1, [r4, #16]
 80120c2:	6822      	ldr	r2, [r4, #0]
 80120c4:	b141      	cbz	r1, 80120d8 <_sungetc_r+0x5c>
 80120c6:	4291      	cmp	r1, r2
 80120c8:	d206      	bcs.n	80120d8 <_sungetc_r+0x5c>
 80120ca:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80120ce:	42a9      	cmp	r1, r5
 80120d0:	d102      	bne.n	80120d8 <_sungetc_r+0x5c>
 80120d2:	3a01      	subs	r2, #1
 80120d4:	6022      	str	r2, [r4, #0]
 80120d6:	e7ea      	b.n	80120ae <_sungetc_r+0x32>
 80120d8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80120dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80120e2:	2303      	movs	r3, #3
 80120e4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80120e6:	4623      	mov	r3, r4
 80120e8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80120ec:	6023      	str	r3, [r4, #0]
 80120ee:	2301      	movs	r3, #1
 80120f0:	e7de      	b.n	80120b0 <_sungetc_r+0x34>

080120f2 <__ssrefill_r>:
 80120f2:	b510      	push	{r4, lr}
 80120f4:	460c      	mov	r4, r1
 80120f6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80120f8:	b169      	cbz	r1, 8012116 <__ssrefill_r+0x24>
 80120fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120fe:	4299      	cmp	r1, r3
 8012100:	d001      	beq.n	8012106 <__ssrefill_r+0x14>
 8012102:	f7fe faa9 	bl	8010658 <_free_r>
 8012106:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012108:	6063      	str	r3, [r4, #4]
 801210a:	2000      	movs	r0, #0
 801210c:	6360      	str	r0, [r4, #52]	@ 0x34
 801210e:	b113      	cbz	r3, 8012116 <__ssrefill_r+0x24>
 8012110:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012112:	6023      	str	r3, [r4, #0]
 8012114:	bd10      	pop	{r4, pc}
 8012116:	6923      	ldr	r3, [r4, #16]
 8012118:	6023      	str	r3, [r4, #0]
 801211a:	2300      	movs	r3, #0
 801211c:	6063      	str	r3, [r4, #4]
 801211e:	89a3      	ldrh	r3, [r4, #12]
 8012120:	f043 0320 	orr.w	r3, r3, #32
 8012124:	81a3      	strh	r3, [r4, #12]
 8012126:	f04f 30ff 	mov.w	r0, #4294967295
 801212a:	e7f3      	b.n	8012114 <__ssrefill_r+0x22>

0801212c <__ssvfiscanf_r>:
 801212c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012130:	460c      	mov	r4, r1
 8012132:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012136:	2100      	movs	r1, #0
 8012138:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801213c:	49a5      	ldr	r1, [pc, #660]	@ (80123d4 <__ssvfiscanf_r+0x2a8>)
 801213e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8012140:	f10d 0804 	add.w	r8, sp, #4
 8012144:	49a4      	ldr	r1, [pc, #656]	@ (80123d8 <__ssvfiscanf_r+0x2ac>)
 8012146:	4fa5      	ldr	r7, [pc, #660]	@ (80123dc <__ssvfiscanf_r+0x2b0>)
 8012148:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801214c:	4606      	mov	r6, r0
 801214e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8012150:	9300      	str	r3, [sp, #0]
 8012152:	7813      	ldrb	r3, [r2, #0]
 8012154:	2b00      	cmp	r3, #0
 8012156:	f000 8158 	beq.w	801240a <__ssvfiscanf_r+0x2de>
 801215a:	5cf9      	ldrb	r1, [r7, r3]
 801215c:	f011 0108 	ands.w	r1, r1, #8
 8012160:	f102 0501 	add.w	r5, r2, #1
 8012164:	d019      	beq.n	801219a <__ssvfiscanf_r+0x6e>
 8012166:	6863      	ldr	r3, [r4, #4]
 8012168:	2b00      	cmp	r3, #0
 801216a:	dd0f      	ble.n	801218c <__ssvfiscanf_r+0x60>
 801216c:	6823      	ldr	r3, [r4, #0]
 801216e:	781a      	ldrb	r2, [r3, #0]
 8012170:	5cba      	ldrb	r2, [r7, r2]
 8012172:	0712      	lsls	r2, r2, #28
 8012174:	d401      	bmi.n	801217a <__ssvfiscanf_r+0x4e>
 8012176:	462a      	mov	r2, r5
 8012178:	e7eb      	b.n	8012152 <__ssvfiscanf_r+0x26>
 801217a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801217c:	3201      	adds	r2, #1
 801217e:	9245      	str	r2, [sp, #276]	@ 0x114
 8012180:	6862      	ldr	r2, [r4, #4]
 8012182:	3301      	adds	r3, #1
 8012184:	3a01      	subs	r2, #1
 8012186:	6062      	str	r2, [r4, #4]
 8012188:	6023      	str	r3, [r4, #0]
 801218a:	e7ec      	b.n	8012166 <__ssvfiscanf_r+0x3a>
 801218c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801218e:	4621      	mov	r1, r4
 8012190:	4630      	mov	r0, r6
 8012192:	4798      	blx	r3
 8012194:	2800      	cmp	r0, #0
 8012196:	d0e9      	beq.n	801216c <__ssvfiscanf_r+0x40>
 8012198:	e7ed      	b.n	8012176 <__ssvfiscanf_r+0x4a>
 801219a:	2b25      	cmp	r3, #37	@ 0x25
 801219c:	d012      	beq.n	80121c4 <__ssvfiscanf_r+0x98>
 801219e:	4699      	mov	r9, r3
 80121a0:	6863      	ldr	r3, [r4, #4]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	f340 8093 	ble.w	80122ce <__ssvfiscanf_r+0x1a2>
 80121a8:	6822      	ldr	r2, [r4, #0]
 80121aa:	7813      	ldrb	r3, [r2, #0]
 80121ac:	454b      	cmp	r3, r9
 80121ae:	f040 812c 	bne.w	801240a <__ssvfiscanf_r+0x2de>
 80121b2:	6863      	ldr	r3, [r4, #4]
 80121b4:	3b01      	subs	r3, #1
 80121b6:	6063      	str	r3, [r4, #4]
 80121b8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80121ba:	3201      	adds	r2, #1
 80121bc:	3301      	adds	r3, #1
 80121be:	6022      	str	r2, [r4, #0]
 80121c0:	9345      	str	r3, [sp, #276]	@ 0x114
 80121c2:	e7d8      	b.n	8012176 <__ssvfiscanf_r+0x4a>
 80121c4:	9141      	str	r1, [sp, #260]	@ 0x104
 80121c6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80121c8:	7853      	ldrb	r3, [r2, #1]
 80121ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80121cc:	bf02      	ittt	eq
 80121ce:	2310      	moveq	r3, #16
 80121d0:	1c95      	addeq	r5, r2, #2
 80121d2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80121d4:	220a      	movs	r2, #10
 80121d6:	46a9      	mov	r9, r5
 80121d8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80121dc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80121e0:	2b09      	cmp	r3, #9
 80121e2:	d91e      	bls.n	8012222 <__ssvfiscanf_r+0xf6>
 80121e4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80123e0 <__ssvfiscanf_r+0x2b4>
 80121e8:	2203      	movs	r2, #3
 80121ea:	4650      	mov	r0, sl
 80121ec:	f7ed fff0 	bl	80001d0 <memchr>
 80121f0:	b138      	cbz	r0, 8012202 <__ssvfiscanf_r+0xd6>
 80121f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80121f4:	eba0 000a 	sub.w	r0, r0, sl
 80121f8:	2301      	movs	r3, #1
 80121fa:	4083      	lsls	r3, r0
 80121fc:	4313      	orrs	r3, r2
 80121fe:	9341      	str	r3, [sp, #260]	@ 0x104
 8012200:	464d      	mov	r5, r9
 8012202:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012206:	2b78      	cmp	r3, #120	@ 0x78
 8012208:	d806      	bhi.n	8012218 <__ssvfiscanf_r+0xec>
 801220a:	2b57      	cmp	r3, #87	@ 0x57
 801220c:	d810      	bhi.n	8012230 <__ssvfiscanf_r+0x104>
 801220e:	2b25      	cmp	r3, #37	@ 0x25
 8012210:	d0c5      	beq.n	801219e <__ssvfiscanf_r+0x72>
 8012212:	d857      	bhi.n	80122c4 <__ssvfiscanf_r+0x198>
 8012214:	2b00      	cmp	r3, #0
 8012216:	d065      	beq.n	80122e4 <__ssvfiscanf_r+0x1b8>
 8012218:	2303      	movs	r3, #3
 801221a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801221c:	230a      	movs	r3, #10
 801221e:	9342      	str	r3, [sp, #264]	@ 0x108
 8012220:	e078      	b.n	8012314 <__ssvfiscanf_r+0x1e8>
 8012222:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012224:	fb02 1103 	mla	r1, r2, r3, r1
 8012228:	3930      	subs	r1, #48	@ 0x30
 801222a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801222c:	464d      	mov	r5, r9
 801222e:	e7d2      	b.n	80121d6 <__ssvfiscanf_r+0xaa>
 8012230:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012234:	2a20      	cmp	r2, #32
 8012236:	d8ef      	bhi.n	8012218 <__ssvfiscanf_r+0xec>
 8012238:	a101      	add	r1, pc, #4	@ (adr r1, 8012240 <__ssvfiscanf_r+0x114>)
 801223a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801223e:	bf00      	nop
 8012240:	080122f3 	.word	0x080122f3
 8012244:	08012219 	.word	0x08012219
 8012248:	08012219 	.word	0x08012219
 801224c:	0801234d 	.word	0x0801234d
 8012250:	08012219 	.word	0x08012219
 8012254:	08012219 	.word	0x08012219
 8012258:	08012219 	.word	0x08012219
 801225c:	08012219 	.word	0x08012219
 8012260:	08012219 	.word	0x08012219
 8012264:	08012219 	.word	0x08012219
 8012268:	08012219 	.word	0x08012219
 801226c:	08012363 	.word	0x08012363
 8012270:	08012349 	.word	0x08012349
 8012274:	080122cb 	.word	0x080122cb
 8012278:	080122cb 	.word	0x080122cb
 801227c:	080122cb 	.word	0x080122cb
 8012280:	08012219 	.word	0x08012219
 8012284:	08012305 	.word	0x08012305
 8012288:	08012219 	.word	0x08012219
 801228c:	08012219 	.word	0x08012219
 8012290:	08012219 	.word	0x08012219
 8012294:	08012219 	.word	0x08012219
 8012298:	08012373 	.word	0x08012373
 801229c:	0801230d 	.word	0x0801230d
 80122a0:	080122eb 	.word	0x080122eb
 80122a4:	08012219 	.word	0x08012219
 80122a8:	08012219 	.word	0x08012219
 80122ac:	0801236f 	.word	0x0801236f
 80122b0:	08012219 	.word	0x08012219
 80122b4:	08012349 	.word	0x08012349
 80122b8:	08012219 	.word	0x08012219
 80122bc:	08012219 	.word	0x08012219
 80122c0:	080122f3 	.word	0x080122f3
 80122c4:	3b45      	subs	r3, #69	@ 0x45
 80122c6:	2b02      	cmp	r3, #2
 80122c8:	d8a6      	bhi.n	8012218 <__ssvfiscanf_r+0xec>
 80122ca:	2305      	movs	r3, #5
 80122cc:	e021      	b.n	8012312 <__ssvfiscanf_r+0x1e6>
 80122ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80122d0:	4621      	mov	r1, r4
 80122d2:	4630      	mov	r0, r6
 80122d4:	4798      	blx	r3
 80122d6:	2800      	cmp	r0, #0
 80122d8:	f43f af66 	beq.w	80121a8 <__ssvfiscanf_r+0x7c>
 80122dc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80122de:	2800      	cmp	r0, #0
 80122e0:	f040 808b 	bne.w	80123fa <__ssvfiscanf_r+0x2ce>
 80122e4:	f04f 30ff 	mov.w	r0, #4294967295
 80122e8:	e08b      	b.n	8012402 <__ssvfiscanf_r+0x2d6>
 80122ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80122ec:	f042 0220 	orr.w	r2, r2, #32
 80122f0:	9241      	str	r2, [sp, #260]	@ 0x104
 80122f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80122f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80122f8:	9241      	str	r2, [sp, #260]	@ 0x104
 80122fa:	2210      	movs	r2, #16
 80122fc:	2b6e      	cmp	r3, #110	@ 0x6e
 80122fe:	9242      	str	r2, [sp, #264]	@ 0x108
 8012300:	d902      	bls.n	8012308 <__ssvfiscanf_r+0x1dc>
 8012302:	e005      	b.n	8012310 <__ssvfiscanf_r+0x1e4>
 8012304:	2300      	movs	r3, #0
 8012306:	9342      	str	r3, [sp, #264]	@ 0x108
 8012308:	2303      	movs	r3, #3
 801230a:	e002      	b.n	8012312 <__ssvfiscanf_r+0x1e6>
 801230c:	2308      	movs	r3, #8
 801230e:	9342      	str	r3, [sp, #264]	@ 0x108
 8012310:	2304      	movs	r3, #4
 8012312:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012314:	6863      	ldr	r3, [r4, #4]
 8012316:	2b00      	cmp	r3, #0
 8012318:	dd39      	ble.n	801238e <__ssvfiscanf_r+0x262>
 801231a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801231c:	0659      	lsls	r1, r3, #25
 801231e:	d404      	bmi.n	801232a <__ssvfiscanf_r+0x1fe>
 8012320:	6823      	ldr	r3, [r4, #0]
 8012322:	781a      	ldrb	r2, [r3, #0]
 8012324:	5cba      	ldrb	r2, [r7, r2]
 8012326:	0712      	lsls	r2, r2, #28
 8012328:	d438      	bmi.n	801239c <__ssvfiscanf_r+0x270>
 801232a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801232c:	2b02      	cmp	r3, #2
 801232e:	dc47      	bgt.n	80123c0 <__ssvfiscanf_r+0x294>
 8012330:	466b      	mov	r3, sp
 8012332:	4622      	mov	r2, r4
 8012334:	a941      	add	r1, sp, #260	@ 0x104
 8012336:	4630      	mov	r0, r6
 8012338:	f000 f9ae 	bl	8012698 <_scanf_chars>
 801233c:	2801      	cmp	r0, #1
 801233e:	d064      	beq.n	801240a <__ssvfiscanf_r+0x2de>
 8012340:	2802      	cmp	r0, #2
 8012342:	f47f af18 	bne.w	8012176 <__ssvfiscanf_r+0x4a>
 8012346:	e7c9      	b.n	80122dc <__ssvfiscanf_r+0x1b0>
 8012348:	220a      	movs	r2, #10
 801234a:	e7d7      	b.n	80122fc <__ssvfiscanf_r+0x1d0>
 801234c:	4629      	mov	r1, r5
 801234e:	4640      	mov	r0, r8
 8012350:	f000 fb52 	bl	80129f8 <__sccl>
 8012354:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801235a:	9341      	str	r3, [sp, #260]	@ 0x104
 801235c:	4605      	mov	r5, r0
 801235e:	2301      	movs	r3, #1
 8012360:	e7d7      	b.n	8012312 <__ssvfiscanf_r+0x1e6>
 8012362:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012368:	9341      	str	r3, [sp, #260]	@ 0x104
 801236a:	2300      	movs	r3, #0
 801236c:	e7d1      	b.n	8012312 <__ssvfiscanf_r+0x1e6>
 801236e:	2302      	movs	r3, #2
 8012370:	e7cf      	b.n	8012312 <__ssvfiscanf_r+0x1e6>
 8012372:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8012374:	06c3      	lsls	r3, r0, #27
 8012376:	f53f aefe 	bmi.w	8012176 <__ssvfiscanf_r+0x4a>
 801237a:	9b00      	ldr	r3, [sp, #0]
 801237c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801237e:	1d19      	adds	r1, r3, #4
 8012380:	9100      	str	r1, [sp, #0]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	07c0      	lsls	r0, r0, #31
 8012386:	bf4c      	ite	mi
 8012388:	801a      	strhmi	r2, [r3, #0]
 801238a:	601a      	strpl	r2, [r3, #0]
 801238c:	e6f3      	b.n	8012176 <__ssvfiscanf_r+0x4a>
 801238e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012390:	4621      	mov	r1, r4
 8012392:	4630      	mov	r0, r6
 8012394:	4798      	blx	r3
 8012396:	2800      	cmp	r0, #0
 8012398:	d0bf      	beq.n	801231a <__ssvfiscanf_r+0x1ee>
 801239a:	e79f      	b.n	80122dc <__ssvfiscanf_r+0x1b0>
 801239c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801239e:	3201      	adds	r2, #1
 80123a0:	9245      	str	r2, [sp, #276]	@ 0x114
 80123a2:	6862      	ldr	r2, [r4, #4]
 80123a4:	3a01      	subs	r2, #1
 80123a6:	2a00      	cmp	r2, #0
 80123a8:	6062      	str	r2, [r4, #4]
 80123aa:	dd02      	ble.n	80123b2 <__ssvfiscanf_r+0x286>
 80123ac:	3301      	adds	r3, #1
 80123ae:	6023      	str	r3, [r4, #0]
 80123b0:	e7b6      	b.n	8012320 <__ssvfiscanf_r+0x1f4>
 80123b2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80123b4:	4621      	mov	r1, r4
 80123b6:	4630      	mov	r0, r6
 80123b8:	4798      	blx	r3
 80123ba:	2800      	cmp	r0, #0
 80123bc:	d0b0      	beq.n	8012320 <__ssvfiscanf_r+0x1f4>
 80123be:	e78d      	b.n	80122dc <__ssvfiscanf_r+0x1b0>
 80123c0:	2b04      	cmp	r3, #4
 80123c2:	dc0f      	bgt.n	80123e4 <__ssvfiscanf_r+0x2b8>
 80123c4:	466b      	mov	r3, sp
 80123c6:	4622      	mov	r2, r4
 80123c8:	a941      	add	r1, sp, #260	@ 0x104
 80123ca:	4630      	mov	r0, r6
 80123cc:	f000 f9be 	bl	801274c <_scanf_i>
 80123d0:	e7b4      	b.n	801233c <__ssvfiscanf_r+0x210>
 80123d2:	bf00      	nop
 80123d4:	0801207d 	.word	0x0801207d
 80123d8:	080120f3 	.word	0x080120f3
 80123dc:	080138a5 	.word	0x080138a5
 80123e0:	08013c1e 	.word	0x08013c1e
 80123e4:	4b0a      	ldr	r3, [pc, #40]	@ (8012410 <__ssvfiscanf_r+0x2e4>)
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	f43f aec5 	beq.w	8012176 <__ssvfiscanf_r+0x4a>
 80123ec:	466b      	mov	r3, sp
 80123ee:	4622      	mov	r2, r4
 80123f0:	a941      	add	r1, sp, #260	@ 0x104
 80123f2:	4630      	mov	r0, r6
 80123f4:	f7fc fcfe 	bl	800edf4 <_scanf_float>
 80123f8:	e7a0      	b.n	801233c <__ssvfiscanf_r+0x210>
 80123fa:	89a3      	ldrh	r3, [r4, #12]
 80123fc:	065b      	lsls	r3, r3, #25
 80123fe:	f53f af71 	bmi.w	80122e4 <__ssvfiscanf_r+0x1b8>
 8012402:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8012406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801240a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801240c:	e7f9      	b.n	8012402 <__ssvfiscanf_r+0x2d6>
 801240e:	bf00      	nop
 8012410:	0800edf5 	.word	0x0800edf5

08012414 <__sfputc_r>:
 8012414:	6893      	ldr	r3, [r2, #8]
 8012416:	3b01      	subs	r3, #1
 8012418:	2b00      	cmp	r3, #0
 801241a:	b410      	push	{r4}
 801241c:	6093      	str	r3, [r2, #8]
 801241e:	da08      	bge.n	8012432 <__sfputc_r+0x1e>
 8012420:	6994      	ldr	r4, [r2, #24]
 8012422:	42a3      	cmp	r3, r4
 8012424:	db01      	blt.n	801242a <__sfputc_r+0x16>
 8012426:	290a      	cmp	r1, #10
 8012428:	d103      	bne.n	8012432 <__sfputc_r+0x1e>
 801242a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801242e:	f7fd b976 	b.w	800f71e <__swbuf_r>
 8012432:	6813      	ldr	r3, [r2, #0]
 8012434:	1c58      	adds	r0, r3, #1
 8012436:	6010      	str	r0, [r2, #0]
 8012438:	7019      	strb	r1, [r3, #0]
 801243a:	4608      	mov	r0, r1
 801243c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012440:	4770      	bx	lr

08012442 <__sfputs_r>:
 8012442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012444:	4606      	mov	r6, r0
 8012446:	460f      	mov	r7, r1
 8012448:	4614      	mov	r4, r2
 801244a:	18d5      	adds	r5, r2, r3
 801244c:	42ac      	cmp	r4, r5
 801244e:	d101      	bne.n	8012454 <__sfputs_r+0x12>
 8012450:	2000      	movs	r0, #0
 8012452:	e007      	b.n	8012464 <__sfputs_r+0x22>
 8012454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012458:	463a      	mov	r2, r7
 801245a:	4630      	mov	r0, r6
 801245c:	f7ff ffda 	bl	8012414 <__sfputc_r>
 8012460:	1c43      	adds	r3, r0, #1
 8012462:	d1f3      	bne.n	801244c <__sfputs_r+0xa>
 8012464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012468 <_vfiprintf_r>:
 8012468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801246c:	460d      	mov	r5, r1
 801246e:	b09d      	sub	sp, #116	@ 0x74
 8012470:	4614      	mov	r4, r2
 8012472:	4698      	mov	r8, r3
 8012474:	4606      	mov	r6, r0
 8012476:	b118      	cbz	r0, 8012480 <_vfiprintf_r+0x18>
 8012478:	6a03      	ldr	r3, [r0, #32]
 801247a:	b90b      	cbnz	r3, 8012480 <_vfiprintf_r+0x18>
 801247c:	f7fd f81a 	bl	800f4b4 <__sinit>
 8012480:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012482:	07d9      	lsls	r1, r3, #31
 8012484:	d405      	bmi.n	8012492 <_vfiprintf_r+0x2a>
 8012486:	89ab      	ldrh	r3, [r5, #12]
 8012488:	059a      	lsls	r2, r3, #22
 801248a:	d402      	bmi.n	8012492 <_vfiprintf_r+0x2a>
 801248c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801248e:	f7fd fa80 	bl	800f992 <__retarget_lock_acquire_recursive>
 8012492:	89ab      	ldrh	r3, [r5, #12]
 8012494:	071b      	lsls	r3, r3, #28
 8012496:	d501      	bpl.n	801249c <_vfiprintf_r+0x34>
 8012498:	692b      	ldr	r3, [r5, #16]
 801249a:	b99b      	cbnz	r3, 80124c4 <_vfiprintf_r+0x5c>
 801249c:	4629      	mov	r1, r5
 801249e:	4630      	mov	r0, r6
 80124a0:	f7fd f97c 	bl	800f79c <__swsetup_r>
 80124a4:	b170      	cbz	r0, 80124c4 <_vfiprintf_r+0x5c>
 80124a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124a8:	07dc      	lsls	r4, r3, #31
 80124aa:	d504      	bpl.n	80124b6 <_vfiprintf_r+0x4e>
 80124ac:	f04f 30ff 	mov.w	r0, #4294967295
 80124b0:	b01d      	add	sp, #116	@ 0x74
 80124b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124b6:	89ab      	ldrh	r3, [r5, #12]
 80124b8:	0598      	lsls	r0, r3, #22
 80124ba:	d4f7      	bmi.n	80124ac <_vfiprintf_r+0x44>
 80124bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124be:	f7fd fa69 	bl	800f994 <__retarget_lock_release_recursive>
 80124c2:	e7f3      	b.n	80124ac <_vfiprintf_r+0x44>
 80124c4:	2300      	movs	r3, #0
 80124c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80124c8:	2320      	movs	r3, #32
 80124ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80124ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80124d2:	2330      	movs	r3, #48	@ 0x30
 80124d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012684 <_vfiprintf_r+0x21c>
 80124d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80124dc:	f04f 0901 	mov.w	r9, #1
 80124e0:	4623      	mov	r3, r4
 80124e2:	469a      	mov	sl, r3
 80124e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124e8:	b10a      	cbz	r2, 80124ee <_vfiprintf_r+0x86>
 80124ea:	2a25      	cmp	r2, #37	@ 0x25
 80124ec:	d1f9      	bne.n	80124e2 <_vfiprintf_r+0x7a>
 80124ee:	ebba 0b04 	subs.w	fp, sl, r4
 80124f2:	d00b      	beq.n	801250c <_vfiprintf_r+0xa4>
 80124f4:	465b      	mov	r3, fp
 80124f6:	4622      	mov	r2, r4
 80124f8:	4629      	mov	r1, r5
 80124fa:	4630      	mov	r0, r6
 80124fc:	f7ff ffa1 	bl	8012442 <__sfputs_r>
 8012500:	3001      	adds	r0, #1
 8012502:	f000 80a7 	beq.w	8012654 <_vfiprintf_r+0x1ec>
 8012506:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012508:	445a      	add	r2, fp
 801250a:	9209      	str	r2, [sp, #36]	@ 0x24
 801250c:	f89a 3000 	ldrb.w	r3, [sl]
 8012510:	2b00      	cmp	r3, #0
 8012512:	f000 809f 	beq.w	8012654 <_vfiprintf_r+0x1ec>
 8012516:	2300      	movs	r3, #0
 8012518:	f04f 32ff 	mov.w	r2, #4294967295
 801251c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012520:	f10a 0a01 	add.w	sl, sl, #1
 8012524:	9304      	str	r3, [sp, #16]
 8012526:	9307      	str	r3, [sp, #28]
 8012528:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801252c:	931a      	str	r3, [sp, #104]	@ 0x68
 801252e:	4654      	mov	r4, sl
 8012530:	2205      	movs	r2, #5
 8012532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012536:	4853      	ldr	r0, [pc, #332]	@ (8012684 <_vfiprintf_r+0x21c>)
 8012538:	f7ed fe4a 	bl	80001d0 <memchr>
 801253c:	9a04      	ldr	r2, [sp, #16]
 801253e:	b9d8      	cbnz	r0, 8012578 <_vfiprintf_r+0x110>
 8012540:	06d1      	lsls	r1, r2, #27
 8012542:	bf44      	itt	mi
 8012544:	2320      	movmi	r3, #32
 8012546:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801254a:	0713      	lsls	r3, r2, #28
 801254c:	bf44      	itt	mi
 801254e:	232b      	movmi	r3, #43	@ 0x2b
 8012550:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012554:	f89a 3000 	ldrb.w	r3, [sl]
 8012558:	2b2a      	cmp	r3, #42	@ 0x2a
 801255a:	d015      	beq.n	8012588 <_vfiprintf_r+0x120>
 801255c:	9a07      	ldr	r2, [sp, #28]
 801255e:	4654      	mov	r4, sl
 8012560:	2000      	movs	r0, #0
 8012562:	f04f 0c0a 	mov.w	ip, #10
 8012566:	4621      	mov	r1, r4
 8012568:	f811 3b01 	ldrb.w	r3, [r1], #1
 801256c:	3b30      	subs	r3, #48	@ 0x30
 801256e:	2b09      	cmp	r3, #9
 8012570:	d94b      	bls.n	801260a <_vfiprintf_r+0x1a2>
 8012572:	b1b0      	cbz	r0, 80125a2 <_vfiprintf_r+0x13a>
 8012574:	9207      	str	r2, [sp, #28]
 8012576:	e014      	b.n	80125a2 <_vfiprintf_r+0x13a>
 8012578:	eba0 0308 	sub.w	r3, r0, r8
 801257c:	fa09 f303 	lsl.w	r3, r9, r3
 8012580:	4313      	orrs	r3, r2
 8012582:	9304      	str	r3, [sp, #16]
 8012584:	46a2      	mov	sl, r4
 8012586:	e7d2      	b.n	801252e <_vfiprintf_r+0xc6>
 8012588:	9b03      	ldr	r3, [sp, #12]
 801258a:	1d19      	adds	r1, r3, #4
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	9103      	str	r1, [sp, #12]
 8012590:	2b00      	cmp	r3, #0
 8012592:	bfbb      	ittet	lt
 8012594:	425b      	neglt	r3, r3
 8012596:	f042 0202 	orrlt.w	r2, r2, #2
 801259a:	9307      	strge	r3, [sp, #28]
 801259c:	9307      	strlt	r3, [sp, #28]
 801259e:	bfb8      	it	lt
 80125a0:	9204      	strlt	r2, [sp, #16]
 80125a2:	7823      	ldrb	r3, [r4, #0]
 80125a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80125a6:	d10a      	bne.n	80125be <_vfiprintf_r+0x156>
 80125a8:	7863      	ldrb	r3, [r4, #1]
 80125aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80125ac:	d132      	bne.n	8012614 <_vfiprintf_r+0x1ac>
 80125ae:	9b03      	ldr	r3, [sp, #12]
 80125b0:	1d1a      	adds	r2, r3, #4
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	9203      	str	r2, [sp, #12]
 80125b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80125ba:	3402      	adds	r4, #2
 80125bc:	9305      	str	r3, [sp, #20]
 80125be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012694 <_vfiprintf_r+0x22c>
 80125c2:	7821      	ldrb	r1, [r4, #0]
 80125c4:	2203      	movs	r2, #3
 80125c6:	4650      	mov	r0, sl
 80125c8:	f7ed fe02 	bl	80001d0 <memchr>
 80125cc:	b138      	cbz	r0, 80125de <_vfiprintf_r+0x176>
 80125ce:	9b04      	ldr	r3, [sp, #16]
 80125d0:	eba0 000a 	sub.w	r0, r0, sl
 80125d4:	2240      	movs	r2, #64	@ 0x40
 80125d6:	4082      	lsls	r2, r0
 80125d8:	4313      	orrs	r3, r2
 80125da:	3401      	adds	r4, #1
 80125dc:	9304      	str	r3, [sp, #16]
 80125de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125e2:	4829      	ldr	r0, [pc, #164]	@ (8012688 <_vfiprintf_r+0x220>)
 80125e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80125e8:	2206      	movs	r2, #6
 80125ea:	f7ed fdf1 	bl	80001d0 <memchr>
 80125ee:	2800      	cmp	r0, #0
 80125f0:	d03f      	beq.n	8012672 <_vfiprintf_r+0x20a>
 80125f2:	4b26      	ldr	r3, [pc, #152]	@ (801268c <_vfiprintf_r+0x224>)
 80125f4:	bb1b      	cbnz	r3, 801263e <_vfiprintf_r+0x1d6>
 80125f6:	9b03      	ldr	r3, [sp, #12]
 80125f8:	3307      	adds	r3, #7
 80125fa:	f023 0307 	bic.w	r3, r3, #7
 80125fe:	3308      	adds	r3, #8
 8012600:	9303      	str	r3, [sp, #12]
 8012602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012604:	443b      	add	r3, r7
 8012606:	9309      	str	r3, [sp, #36]	@ 0x24
 8012608:	e76a      	b.n	80124e0 <_vfiprintf_r+0x78>
 801260a:	fb0c 3202 	mla	r2, ip, r2, r3
 801260e:	460c      	mov	r4, r1
 8012610:	2001      	movs	r0, #1
 8012612:	e7a8      	b.n	8012566 <_vfiprintf_r+0xfe>
 8012614:	2300      	movs	r3, #0
 8012616:	3401      	adds	r4, #1
 8012618:	9305      	str	r3, [sp, #20]
 801261a:	4619      	mov	r1, r3
 801261c:	f04f 0c0a 	mov.w	ip, #10
 8012620:	4620      	mov	r0, r4
 8012622:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012626:	3a30      	subs	r2, #48	@ 0x30
 8012628:	2a09      	cmp	r2, #9
 801262a:	d903      	bls.n	8012634 <_vfiprintf_r+0x1cc>
 801262c:	2b00      	cmp	r3, #0
 801262e:	d0c6      	beq.n	80125be <_vfiprintf_r+0x156>
 8012630:	9105      	str	r1, [sp, #20]
 8012632:	e7c4      	b.n	80125be <_vfiprintf_r+0x156>
 8012634:	fb0c 2101 	mla	r1, ip, r1, r2
 8012638:	4604      	mov	r4, r0
 801263a:	2301      	movs	r3, #1
 801263c:	e7f0      	b.n	8012620 <_vfiprintf_r+0x1b8>
 801263e:	ab03      	add	r3, sp, #12
 8012640:	9300      	str	r3, [sp, #0]
 8012642:	462a      	mov	r2, r5
 8012644:	4b12      	ldr	r3, [pc, #72]	@ (8012690 <_vfiprintf_r+0x228>)
 8012646:	a904      	add	r1, sp, #16
 8012648:	4630      	mov	r0, r6
 801264a:	f7fc f81b 	bl	800e684 <_printf_float>
 801264e:	4607      	mov	r7, r0
 8012650:	1c78      	adds	r0, r7, #1
 8012652:	d1d6      	bne.n	8012602 <_vfiprintf_r+0x19a>
 8012654:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012656:	07d9      	lsls	r1, r3, #31
 8012658:	d405      	bmi.n	8012666 <_vfiprintf_r+0x1fe>
 801265a:	89ab      	ldrh	r3, [r5, #12]
 801265c:	059a      	lsls	r2, r3, #22
 801265e:	d402      	bmi.n	8012666 <_vfiprintf_r+0x1fe>
 8012660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012662:	f7fd f997 	bl	800f994 <__retarget_lock_release_recursive>
 8012666:	89ab      	ldrh	r3, [r5, #12]
 8012668:	065b      	lsls	r3, r3, #25
 801266a:	f53f af1f 	bmi.w	80124ac <_vfiprintf_r+0x44>
 801266e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012670:	e71e      	b.n	80124b0 <_vfiprintf_r+0x48>
 8012672:	ab03      	add	r3, sp, #12
 8012674:	9300      	str	r3, [sp, #0]
 8012676:	462a      	mov	r2, r5
 8012678:	4b05      	ldr	r3, [pc, #20]	@ (8012690 <_vfiprintf_r+0x228>)
 801267a:	a904      	add	r1, sp, #16
 801267c:	4630      	mov	r0, r6
 801267e:	f7fc fa99 	bl	800ebb4 <_printf_i>
 8012682:	e7e4      	b.n	801264e <_vfiprintf_r+0x1e6>
 8012684:	08013c18 	.word	0x08013c18
 8012688:	08013c22 	.word	0x08013c22
 801268c:	0800e685 	.word	0x0800e685
 8012690:	08012443 	.word	0x08012443
 8012694:	08013c1e 	.word	0x08013c1e

08012698 <_scanf_chars>:
 8012698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801269c:	4615      	mov	r5, r2
 801269e:	688a      	ldr	r2, [r1, #8]
 80126a0:	4680      	mov	r8, r0
 80126a2:	460c      	mov	r4, r1
 80126a4:	b932      	cbnz	r2, 80126b4 <_scanf_chars+0x1c>
 80126a6:	698a      	ldr	r2, [r1, #24]
 80126a8:	2a00      	cmp	r2, #0
 80126aa:	bf14      	ite	ne
 80126ac:	f04f 32ff 	movne.w	r2, #4294967295
 80126b0:	2201      	moveq	r2, #1
 80126b2:	608a      	str	r2, [r1, #8]
 80126b4:	6822      	ldr	r2, [r4, #0]
 80126b6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012748 <_scanf_chars+0xb0>
 80126ba:	06d1      	lsls	r1, r2, #27
 80126bc:	bf5f      	itttt	pl
 80126be:	681a      	ldrpl	r2, [r3, #0]
 80126c0:	1d11      	addpl	r1, r2, #4
 80126c2:	6019      	strpl	r1, [r3, #0]
 80126c4:	6816      	ldrpl	r6, [r2, #0]
 80126c6:	2700      	movs	r7, #0
 80126c8:	69a0      	ldr	r0, [r4, #24]
 80126ca:	b188      	cbz	r0, 80126f0 <_scanf_chars+0x58>
 80126cc:	2801      	cmp	r0, #1
 80126ce:	d107      	bne.n	80126e0 <_scanf_chars+0x48>
 80126d0:	682b      	ldr	r3, [r5, #0]
 80126d2:	781a      	ldrb	r2, [r3, #0]
 80126d4:	6963      	ldr	r3, [r4, #20]
 80126d6:	5c9b      	ldrb	r3, [r3, r2]
 80126d8:	b953      	cbnz	r3, 80126f0 <_scanf_chars+0x58>
 80126da:	2f00      	cmp	r7, #0
 80126dc:	d031      	beq.n	8012742 <_scanf_chars+0xaa>
 80126de:	e022      	b.n	8012726 <_scanf_chars+0x8e>
 80126e0:	2802      	cmp	r0, #2
 80126e2:	d120      	bne.n	8012726 <_scanf_chars+0x8e>
 80126e4:	682b      	ldr	r3, [r5, #0]
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80126ec:	071b      	lsls	r3, r3, #28
 80126ee:	d41a      	bmi.n	8012726 <_scanf_chars+0x8e>
 80126f0:	6823      	ldr	r3, [r4, #0]
 80126f2:	06da      	lsls	r2, r3, #27
 80126f4:	bf5e      	ittt	pl
 80126f6:	682b      	ldrpl	r3, [r5, #0]
 80126f8:	781b      	ldrbpl	r3, [r3, #0]
 80126fa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80126fe:	682a      	ldr	r2, [r5, #0]
 8012700:	686b      	ldr	r3, [r5, #4]
 8012702:	3201      	adds	r2, #1
 8012704:	602a      	str	r2, [r5, #0]
 8012706:	68a2      	ldr	r2, [r4, #8]
 8012708:	3b01      	subs	r3, #1
 801270a:	3a01      	subs	r2, #1
 801270c:	606b      	str	r3, [r5, #4]
 801270e:	3701      	adds	r7, #1
 8012710:	60a2      	str	r2, [r4, #8]
 8012712:	b142      	cbz	r2, 8012726 <_scanf_chars+0x8e>
 8012714:	2b00      	cmp	r3, #0
 8012716:	dcd7      	bgt.n	80126c8 <_scanf_chars+0x30>
 8012718:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801271c:	4629      	mov	r1, r5
 801271e:	4640      	mov	r0, r8
 8012720:	4798      	blx	r3
 8012722:	2800      	cmp	r0, #0
 8012724:	d0d0      	beq.n	80126c8 <_scanf_chars+0x30>
 8012726:	6823      	ldr	r3, [r4, #0]
 8012728:	f013 0310 	ands.w	r3, r3, #16
 801272c:	d105      	bne.n	801273a <_scanf_chars+0xa2>
 801272e:	68e2      	ldr	r2, [r4, #12]
 8012730:	3201      	adds	r2, #1
 8012732:	60e2      	str	r2, [r4, #12]
 8012734:	69a2      	ldr	r2, [r4, #24]
 8012736:	b102      	cbz	r2, 801273a <_scanf_chars+0xa2>
 8012738:	7033      	strb	r3, [r6, #0]
 801273a:	6923      	ldr	r3, [r4, #16]
 801273c:	443b      	add	r3, r7
 801273e:	6123      	str	r3, [r4, #16]
 8012740:	2000      	movs	r0, #0
 8012742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012746:	bf00      	nop
 8012748:	080138a5 	.word	0x080138a5

0801274c <_scanf_i>:
 801274c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012750:	4698      	mov	r8, r3
 8012752:	4b74      	ldr	r3, [pc, #464]	@ (8012924 <_scanf_i+0x1d8>)
 8012754:	460c      	mov	r4, r1
 8012756:	4682      	mov	sl, r0
 8012758:	4616      	mov	r6, r2
 801275a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801275e:	b087      	sub	sp, #28
 8012760:	ab03      	add	r3, sp, #12
 8012762:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012766:	4b70      	ldr	r3, [pc, #448]	@ (8012928 <_scanf_i+0x1dc>)
 8012768:	69a1      	ldr	r1, [r4, #24]
 801276a:	4a70      	ldr	r2, [pc, #448]	@ (801292c <_scanf_i+0x1e0>)
 801276c:	2903      	cmp	r1, #3
 801276e:	bf08      	it	eq
 8012770:	461a      	moveq	r2, r3
 8012772:	68a3      	ldr	r3, [r4, #8]
 8012774:	9201      	str	r2, [sp, #4]
 8012776:	1e5a      	subs	r2, r3, #1
 8012778:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801277c:	bf88      	it	hi
 801277e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012782:	4627      	mov	r7, r4
 8012784:	bf82      	ittt	hi
 8012786:	eb03 0905 	addhi.w	r9, r3, r5
 801278a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801278e:	60a3      	strhi	r3, [r4, #8]
 8012790:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012794:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012798:	bf98      	it	ls
 801279a:	f04f 0900 	movls.w	r9, #0
 801279e:	6023      	str	r3, [r4, #0]
 80127a0:	463d      	mov	r5, r7
 80127a2:	f04f 0b00 	mov.w	fp, #0
 80127a6:	6831      	ldr	r1, [r6, #0]
 80127a8:	ab03      	add	r3, sp, #12
 80127aa:	7809      	ldrb	r1, [r1, #0]
 80127ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80127b0:	2202      	movs	r2, #2
 80127b2:	f7ed fd0d 	bl	80001d0 <memchr>
 80127b6:	b328      	cbz	r0, 8012804 <_scanf_i+0xb8>
 80127b8:	f1bb 0f01 	cmp.w	fp, #1
 80127bc:	d159      	bne.n	8012872 <_scanf_i+0x126>
 80127be:	6862      	ldr	r2, [r4, #4]
 80127c0:	b92a      	cbnz	r2, 80127ce <_scanf_i+0x82>
 80127c2:	6822      	ldr	r2, [r4, #0]
 80127c4:	2108      	movs	r1, #8
 80127c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80127ca:	6061      	str	r1, [r4, #4]
 80127cc:	6022      	str	r2, [r4, #0]
 80127ce:	6822      	ldr	r2, [r4, #0]
 80127d0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80127d4:	6022      	str	r2, [r4, #0]
 80127d6:	68a2      	ldr	r2, [r4, #8]
 80127d8:	1e51      	subs	r1, r2, #1
 80127da:	60a1      	str	r1, [r4, #8]
 80127dc:	b192      	cbz	r2, 8012804 <_scanf_i+0xb8>
 80127de:	6832      	ldr	r2, [r6, #0]
 80127e0:	1c51      	adds	r1, r2, #1
 80127e2:	6031      	str	r1, [r6, #0]
 80127e4:	7812      	ldrb	r2, [r2, #0]
 80127e6:	f805 2b01 	strb.w	r2, [r5], #1
 80127ea:	6872      	ldr	r2, [r6, #4]
 80127ec:	3a01      	subs	r2, #1
 80127ee:	2a00      	cmp	r2, #0
 80127f0:	6072      	str	r2, [r6, #4]
 80127f2:	dc07      	bgt.n	8012804 <_scanf_i+0xb8>
 80127f4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80127f8:	4631      	mov	r1, r6
 80127fa:	4650      	mov	r0, sl
 80127fc:	4790      	blx	r2
 80127fe:	2800      	cmp	r0, #0
 8012800:	f040 8085 	bne.w	801290e <_scanf_i+0x1c2>
 8012804:	f10b 0b01 	add.w	fp, fp, #1
 8012808:	f1bb 0f03 	cmp.w	fp, #3
 801280c:	d1cb      	bne.n	80127a6 <_scanf_i+0x5a>
 801280e:	6863      	ldr	r3, [r4, #4]
 8012810:	b90b      	cbnz	r3, 8012816 <_scanf_i+0xca>
 8012812:	230a      	movs	r3, #10
 8012814:	6063      	str	r3, [r4, #4]
 8012816:	6863      	ldr	r3, [r4, #4]
 8012818:	4945      	ldr	r1, [pc, #276]	@ (8012930 <_scanf_i+0x1e4>)
 801281a:	6960      	ldr	r0, [r4, #20]
 801281c:	1ac9      	subs	r1, r1, r3
 801281e:	f000 f8eb 	bl	80129f8 <__sccl>
 8012822:	f04f 0b00 	mov.w	fp, #0
 8012826:	68a3      	ldr	r3, [r4, #8]
 8012828:	6822      	ldr	r2, [r4, #0]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d03d      	beq.n	80128aa <_scanf_i+0x15e>
 801282e:	6831      	ldr	r1, [r6, #0]
 8012830:	6960      	ldr	r0, [r4, #20]
 8012832:	f891 c000 	ldrb.w	ip, [r1]
 8012836:	f810 000c 	ldrb.w	r0, [r0, ip]
 801283a:	2800      	cmp	r0, #0
 801283c:	d035      	beq.n	80128aa <_scanf_i+0x15e>
 801283e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8012842:	d124      	bne.n	801288e <_scanf_i+0x142>
 8012844:	0510      	lsls	r0, r2, #20
 8012846:	d522      	bpl.n	801288e <_scanf_i+0x142>
 8012848:	f10b 0b01 	add.w	fp, fp, #1
 801284c:	f1b9 0f00 	cmp.w	r9, #0
 8012850:	d003      	beq.n	801285a <_scanf_i+0x10e>
 8012852:	3301      	adds	r3, #1
 8012854:	f109 39ff 	add.w	r9, r9, #4294967295
 8012858:	60a3      	str	r3, [r4, #8]
 801285a:	6873      	ldr	r3, [r6, #4]
 801285c:	3b01      	subs	r3, #1
 801285e:	2b00      	cmp	r3, #0
 8012860:	6073      	str	r3, [r6, #4]
 8012862:	dd1b      	ble.n	801289c <_scanf_i+0x150>
 8012864:	6833      	ldr	r3, [r6, #0]
 8012866:	3301      	adds	r3, #1
 8012868:	6033      	str	r3, [r6, #0]
 801286a:	68a3      	ldr	r3, [r4, #8]
 801286c:	3b01      	subs	r3, #1
 801286e:	60a3      	str	r3, [r4, #8]
 8012870:	e7d9      	b.n	8012826 <_scanf_i+0xda>
 8012872:	f1bb 0f02 	cmp.w	fp, #2
 8012876:	d1ae      	bne.n	80127d6 <_scanf_i+0x8a>
 8012878:	6822      	ldr	r2, [r4, #0]
 801287a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801287e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8012882:	d1bf      	bne.n	8012804 <_scanf_i+0xb8>
 8012884:	2110      	movs	r1, #16
 8012886:	6061      	str	r1, [r4, #4]
 8012888:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801288c:	e7a2      	b.n	80127d4 <_scanf_i+0x88>
 801288e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8012892:	6022      	str	r2, [r4, #0]
 8012894:	780b      	ldrb	r3, [r1, #0]
 8012896:	f805 3b01 	strb.w	r3, [r5], #1
 801289a:	e7de      	b.n	801285a <_scanf_i+0x10e>
 801289c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80128a0:	4631      	mov	r1, r6
 80128a2:	4650      	mov	r0, sl
 80128a4:	4798      	blx	r3
 80128a6:	2800      	cmp	r0, #0
 80128a8:	d0df      	beq.n	801286a <_scanf_i+0x11e>
 80128aa:	6823      	ldr	r3, [r4, #0]
 80128ac:	05d9      	lsls	r1, r3, #23
 80128ae:	d50d      	bpl.n	80128cc <_scanf_i+0x180>
 80128b0:	42bd      	cmp	r5, r7
 80128b2:	d909      	bls.n	80128c8 <_scanf_i+0x17c>
 80128b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80128b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80128bc:	4632      	mov	r2, r6
 80128be:	4650      	mov	r0, sl
 80128c0:	4798      	blx	r3
 80128c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80128c6:	464d      	mov	r5, r9
 80128c8:	42bd      	cmp	r5, r7
 80128ca:	d028      	beq.n	801291e <_scanf_i+0x1d2>
 80128cc:	6822      	ldr	r2, [r4, #0]
 80128ce:	f012 0210 	ands.w	r2, r2, #16
 80128d2:	d113      	bne.n	80128fc <_scanf_i+0x1b0>
 80128d4:	702a      	strb	r2, [r5, #0]
 80128d6:	6863      	ldr	r3, [r4, #4]
 80128d8:	9e01      	ldr	r6, [sp, #4]
 80128da:	4639      	mov	r1, r7
 80128dc:	4650      	mov	r0, sl
 80128de:	47b0      	blx	r6
 80128e0:	f8d8 3000 	ldr.w	r3, [r8]
 80128e4:	6821      	ldr	r1, [r4, #0]
 80128e6:	1d1a      	adds	r2, r3, #4
 80128e8:	f8c8 2000 	str.w	r2, [r8]
 80128ec:	f011 0f20 	tst.w	r1, #32
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	d00f      	beq.n	8012914 <_scanf_i+0x1c8>
 80128f4:	6018      	str	r0, [r3, #0]
 80128f6:	68e3      	ldr	r3, [r4, #12]
 80128f8:	3301      	adds	r3, #1
 80128fa:	60e3      	str	r3, [r4, #12]
 80128fc:	6923      	ldr	r3, [r4, #16]
 80128fe:	1bed      	subs	r5, r5, r7
 8012900:	445d      	add	r5, fp
 8012902:	442b      	add	r3, r5
 8012904:	6123      	str	r3, [r4, #16]
 8012906:	2000      	movs	r0, #0
 8012908:	b007      	add	sp, #28
 801290a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801290e:	f04f 0b00 	mov.w	fp, #0
 8012912:	e7ca      	b.n	80128aa <_scanf_i+0x15e>
 8012914:	07ca      	lsls	r2, r1, #31
 8012916:	bf4c      	ite	mi
 8012918:	8018      	strhmi	r0, [r3, #0]
 801291a:	6018      	strpl	r0, [r3, #0]
 801291c:	e7eb      	b.n	80128f6 <_scanf_i+0x1aa>
 801291e:	2001      	movs	r0, #1
 8012920:	e7f2      	b.n	8012908 <_scanf_i+0x1bc>
 8012922:	bf00      	nop
 8012924:	08013860 	.word	0x08013860
 8012928:	0800e52d 	.word	0x0800e52d
 801292c:	080133bd 	.word	0x080133bd
 8012930:	08013c39 	.word	0x08013c39

08012934 <__swhatbuf_r>:
 8012934:	b570      	push	{r4, r5, r6, lr}
 8012936:	460c      	mov	r4, r1
 8012938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801293c:	2900      	cmp	r1, #0
 801293e:	b096      	sub	sp, #88	@ 0x58
 8012940:	4615      	mov	r5, r2
 8012942:	461e      	mov	r6, r3
 8012944:	da0d      	bge.n	8012962 <__swhatbuf_r+0x2e>
 8012946:	89a3      	ldrh	r3, [r4, #12]
 8012948:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801294c:	f04f 0100 	mov.w	r1, #0
 8012950:	bf14      	ite	ne
 8012952:	2340      	movne	r3, #64	@ 0x40
 8012954:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012958:	2000      	movs	r0, #0
 801295a:	6031      	str	r1, [r6, #0]
 801295c:	602b      	str	r3, [r5, #0]
 801295e:	b016      	add	sp, #88	@ 0x58
 8012960:	bd70      	pop	{r4, r5, r6, pc}
 8012962:	466a      	mov	r2, sp
 8012964:	f000 f8d6 	bl	8012b14 <_fstat_r>
 8012968:	2800      	cmp	r0, #0
 801296a:	dbec      	blt.n	8012946 <__swhatbuf_r+0x12>
 801296c:	9901      	ldr	r1, [sp, #4]
 801296e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012972:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012976:	4259      	negs	r1, r3
 8012978:	4159      	adcs	r1, r3
 801297a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801297e:	e7eb      	b.n	8012958 <__swhatbuf_r+0x24>

08012980 <__smakebuf_r>:
 8012980:	898b      	ldrh	r3, [r1, #12]
 8012982:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012984:	079d      	lsls	r5, r3, #30
 8012986:	4606      	mov	r6, r0
 8012988:	460c      	mov	r4, r1
 801298a:	d507      	bpl.n	801299c <__smakebuf_r+0x1c>
 801298c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012990:	6023      	str	r3, [r4, #0]
 8012992:	6123      	str	r3, [r4, #16]
 8012994:	2301      	movs	r3, #1
 8012996:	6163      	str	r3, [r4, #20]
 8012998:	b003      	add	sp, #12
 801299a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801299c:	ab01      	add	r3, sp, #4
 801299e:	466a      	mov	r2, sp
 80129a0:	f7ff ffc8 	bl	8012934 <__swhatbuf_r>
 80129a4:	9f00      	ldr	r7, [sp, #0]
 80129a6:	4605      	mov	r5, r0
 80129a8:	4639      	mov	r1, r7
 80129aa:	4630      	mov	r0, r6
 80129ac:	f7fd fec8 	bl	8010740 <_malloc_r>
 80129b0:	b948      	cbnz	r0, 80129c6 <__smakebuf_r+0x46>
 80129b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129b6:	059a      	lsls	r2, r3, #22
 80129b8:	d4ee      	bmi.n	8012998 <__smakebuf_r+0x18>
 80129ba:	f023 0303 	bic.w	r3, r3, #3
 80129be:	f043 0302 	orr.w	r3, r3, #2
 80129c2:	81a3      	strh	r3, [r4, #12]
 80129c4:	e7e2      	b.n	801298c <__smakebuf_r+0xc>
 80129c6:	89a3      	ldrh	r3, [r4, #12]
 80129c8:	6020      	str	r0, [r4, #0]
 80129ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80129ce:	81a3      	strh	r3, [r4, #12]
 80129d0:	9b01      	ldr	r3, [sp, #4]
 80129d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80129d6:	b15b      	cbz	r3, 80129f0 <__smakebuf_r+0x70>
 80129d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129dc:	4630      	mov	r0, r6
 80129de:	f000 f8ab 	bl	8012b38 <_isatty_r>
 80129e2:	b128      	cbz	r0, 80129f0 <__smakebuf_r+0x70>
 80129e4:	89a3      	ldrh	r3, [r4, #12]
 80129e6:	f023 0303 	bic.w	r3, r3, #3
 80129ea:	f043 0301 	orr.w	r3, r3, #1
 80129ee:	81a3      	strh	r3, [r4, #12]
 80129f0:	89a3      	ldrh	r3, [r4, #12]
 80129f2:	431d      	orrs	r5, r3
 80129f4:	81a5      	strh	r5, [r4, #12]
 80129f6:	e7cf      	b.n	8012998 <__smakebuf_r+0x18>

080129f8 <__sccl>:
 80129f8:	b570      	push	{r4, r5, r6, lr}
 80129fa:	780b      	ldrb	r3, [r1, #0]
 80129fc:	4604      	mov	r4, r0
 80129fe:	2b5e      	cmp	r3, #94	@ 0x5e
 8012a00:	bf0b      	itete	eq
 8012a02:	784b      	ldrbeq	r3, [r1, #1]
 8012a04:	1c4a      	addne	r2, r1, #1
 8012a06:	1c8a      	addeq	r2, r1, #2
 8012a08:	2100      	movne	r1, #0
 8012a0a:	bf08      	it	eq
 8012a0c:	2101      	moveq	r1, #1
 8012a0e:	3801      	subs	r0, #1
 8012a10:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012a14:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012a18:	42a8      	cmp	r0, r5
 8012a1a:	d1fb      	bne.n	8012a14 <__sccl+0x1c>
 8012a1c:	b90b      	cbnz	r3, 8012a22 <__sccl+0x2a>
 8012a1e:	1e50      	subs	r0, r2, #1
 8012a20:	bd70      	pop	{r4, r5, r6, pc}
 8012a22:	f081 0101 	eor.w	r1, r1, #1
 8012a26:	54e1      	strb	r1, [r4, r3]
 8012a28:	4610      	mov	r0, r2
 8012a2a:	4602      	mov	r2, r0
 8012a2c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012a30:	2d2d      	cmp	r5, #45	@ 0x2d
 8012a32:	d005      	beq.n	8012a40 <__sccl+0x48>
 8012a34:	2d5d      	cmp	r5, #93	@ 0x5d
 8012a36:	d016      	beq.n	8012a66 <__sccl+0x6e>
 8012a38:	2d00      	cmp	r5, #0
 8012a3a:	d0f1      	beq.n	8012a20 <__sccl+0x28>
 8012a3c:	462b      	mov	r3, r5
 8012a3e:	e7f2      	b.n	8012a26 <__sccl+0x2e>
 8012a40:	7846      	ldrb	r6, [r0, #1]
 8012a42:	2e5d      	cmp	r6, #93	@ 0x5d
 8012a44:	d0fa      	beq.n	8012a3c <__sccl+0x44>
 8012a46:	42b3      	cmp	r3, r6
 8012a48:	dcf8      	bgt.n	8012a3c <__sccl+0x44>
 8012a4a:	3002      	adds	r0, #2
 8012a4c:	461a      	mov	r2, r3
 8012a4e:	3201      	adds	r2, #1
 8012a50:	4296      	cmp	r6, r2
 8012a52:	54a1      	strb	r1, [r4, r2]
 8012a54:	dcfb      	bgt.n	8012a4e <__sccl+0x56>
 8012a56:	1af2      	subs	r2, r6, r3
 8012a58:	3a01      	subs	r2, #1
 8012a5a:	1c5d      	adds	r5, r3, #1
 8012a5c:	42b3      	cmp	r3, r6
 8012a5e:	bfa8      	it	ge
 8012a60:	2200      	movge	r2, #0
 8012a62:	18ab      	adds	r3, r5, r2
 8012a64:	e7e1      	b.n	8012a2a <__sccl+0x32>
 8012a66:	4610      	mov	r0, r2
 8012a68:	e7da      	b.n	8012a20 <__sccl+0x28>

08012a6a <__submore>:
 8012a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a6e:	460c      	mov	r4, r1
 8012a70:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012a72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012a76:	4299      	cmp	r1, r3
 8012a78:	d11d      	bne.n	8012ab6 <__submore+0x4c>
 8012a7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012a7e:	f7fd fe5f 	bl	8010740 <_malloc_r>
 8012a82:	b918      	cbnz	r0, 8012a8c <__submore+0x22>
 8012a84:	f04f 30ff 	mov.w	r0, #4294967295
 8012a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012a90:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012a92:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012a96:	6360      	str	r0, [r4, #52]	@ 0x34
 8012a98:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012a9c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012aa0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012aa4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012aa8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012aac:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012ab0:	6020      	str	r0, [r4, #0]
 8012ab2:	2000      	movs	r0, #0
 8012ab4:	e7e8      	b.n	8012a88 <__submore+0x1e>
 8012ab6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012ab8:	0077      	lsls	r7, r6, #1
 8012aba:	463a      	mov	r2, r7
 8012abc:	f000 fbe1 	bl	8013282 <_realloc_r>
 8012ac0:	4605      	mov	r5, r0
 8012ac2:	2800      	cmp	r0, #0
 8012ac4:	d0de      	beq.n	8012a84 <__submore+0x1a>
 8012ac6:	eb00 0806 	add.w	r8, r0, r6
 8012aca:	4601      	mov	r1, r0
 8012acc:	4632      	mov	r2, r6
 8012ace:	4640      	mov	r0, r8
 8012ad0:	f7fc ff61 	bl	800f996 <memcpy>
 8012ad4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012ad8:	f8c4 8000 	str.w	r8, [r4]
 8012adc:	e7e9      	b.n	8012ab2 <__submore+0x48>

08012ade <memmove>:
 8012ade:	4288      	cmp	r0, r1
 8012ae0:	b510      	push	{r4, lr}
 8012ae2:	eb01 0402 	add.w	r4, r1, r2
 8012ae6:	d902      	bls.n	8012aee <memmove+0x10>
 8012ae8:	4284      	cmp	r4, r0
 8012aea:	4623      	mov	r3, r4
 8012aec:	d807      	bhi.n	8012afe <memmove+0x20>
 8012aee:	1e43      	subs	r3, r0, #1
 8012af0:	42a1      	cmp	r1, r4
 8012af2:	d008      	beq.n	8012b06 <memmove+0x28>
 8012af4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012af8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012afc:	e7f8      	b.n	8012af0 <memmove+0x12>
 8012afe:	4402      	add	r2, r0
 8012b00:	4601      	mov	r1, r0
 8012b02:	428a      	cmp	r2, r1
 8012b04:	d100      	bne.n	8012b08 <memmove+0x2a>
 8012b06:	bd10      	pop	{r4, pc}
 8012b08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b0c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b10:	e7f7      	b.n	8012b02 <memmove+0x24>
	...

08012b14 <_fstat_r>:
 8012b14:	b538      	push	{r3, r4, r5, lr}
 8012b16:	4d07      	ldr	r5, [pc, #28]	@ (8012b34 <_fstat_r+0x20>)
 8012b18:	2300      	movs	r3, #0
 8012b1a:	4604      	mov	r4, r0
 8012b1c:	4608      	mov	r0, r1
 8012b1e:	4611      	mov	r1, r2
 8012b20:	602b      	str	r3, [r5, #0]
 8012b22:	f7ef ff96 	bl	8002a52 <_fstat>
 8012b26:	1c43      	adds	r3, r0, #1
 8012b28:	d102      	bne.n	8012b30 <_fstat_r+0x1c>
 8012b2a:	682b      	ldr	r3, [r5, #0]
 8012b2c:	b103      	cbz	r3, 8012b30 <_fstat_r+0x1c>
 8012b2e:	6023      	str	r3, [r4, #0]
 8012b30:	bd38      	pop	{r3, r4, r5, pc}
 8012b32:	bf00      	nop
 8012b34:	20002250 	.word	0x20002250

08012b38 <_isatty_r>:
 8012b38:	b538      	push	{r3, r4, r5, lr}
 8012b3a:	4d06      	ldr	r5, [pc, #24]	@ (8012b54 <_isatty_r+0x1c>)
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	4604      	mov	r4, r0
 8012b40:	4608      	mov	r0, r1
 8012b42:	602b      	str	r3, [r5, #0]
 8012b44:	f7ef ff95 	bl	8002a72 <_isatty>
 8012b48:	1c43      	adds	r3, r0, #1
 8012b4a:	d102      	bne.n	8012b52 <_isatty_r+0x1a>
 8012b4c:	682b      	ldr	r3, [r5, #0]
 8012b4e:	b103      	cbz	r3, 8012b52 <_isatty_r+0x1a>
 8012b50:	6023      	str	r3, [r4, #0]
 8012b52:	bd38      	pop	{r3, r4, r5, pc}
 8012b54:	20002250 	.word	0x20002250

08012b58 <_sbrk_r>:
 8012b58:	b538      	push	{r3, r4, r5, lr}
 8012b5a:	4d06      	ldr	r5, [pc, #24]	@ (8012b74 <_sbrk_r+0x1c>)
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	4604      	mov	r4, r0
 8012b60:	4608      	mov	r0, r1
 8012b62:	602b      	str	r3, [r5, #0]
 8012b64:	f7ef ff9e 	bl	8002aa4 <_sbrk>
 8012b68:	1c43      	adds	r3, r0, #1
 8012b6a:	d102      	bne.n	8012b72 <_sbrk_r+0x1a>
 8012b6c:	682b      	ldr	r3, [r5, #0]
 8012b6e:	b103      	cbz	r3, 8012b72 <_sbrk_r+0x1a>
 8012b70:	6023      	str	r3, [r4, #0]
 8012b72:	bd38      	pop	{r3, r4, r5, pc}
 8012b74:	20002250 	.word	0x20002250

08012b78 <nan>:
 8012b78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012b80 <nan+0x8>
 8012b7c:	4770      	bx	lr
 8012b7e:	bf00      	nop
 8012b80:	00000000 	.word	0x00000000
 8012b84:	7ff80000 	.word	0x7ff80000

08012b88 <__assert_func>:
 8012b88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012b8a:	4614      	mov	r4, r2
 8012b8c:	461a      	mov	r2, r3
 8012b8e:	4b09      	ldr	r3, [pc, #36]	@ (8012bb4 <__assert_func+0x2c>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	4605      	mov	r5, r0
 8012b94:	68d8      	ldr	r0, [r3, #12]
 8012b96:	b954      	cbnz	r4, 8012bae <__assert_func+0x26>
 8012b98:	4b07      	ldr	r3, [pc, #28]	@ (8012bb8 <__assert_func+0x30>)
 8012b9a:	461c      	mov	r4, r3
 8012b9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012ba0:	9100      	str	r1, [sp, #0]
 8012ba2:	462b      	mov	r3, r5
 8012ba4:	4905      	ldr	r1, [pc, #20]	@ (8012bbc <__assert_func+0x34>)
 8012ba6:	f000 fc19 	bl	80133dc <fiprintf>
 8012baa:	f000 fc29 	bl	8013400 <abort>
 8012bae:	4b04      	ldr	r3, [pc, #16]	@ (8012bc0 <__assert_func+0x38>)
 8012bb0:	e7f4      	b.n	8012b9c <__assert_func+0x14>
 8012bb2:	bf00      	nop
 8012bb4:	20000198 	.word	0x20000198
 8012bb8:	08013c87 	.word	0x08013c87
 8012bbc:	08013c59 	.word	0x08013c59
 8012bc0:	08013c4c 	.word	0x08013c4c

08012bc4 <_calloc_r>:
 8012bc4:	b570      	push	{r4, r5, r6, lr}
 8012bc6:	fba1 5402 	umull	r5, r4, r1, r2
 8012bca:	b93c      	cbnz	r4, 8012bdc <_calloc_r+0x18>
 8012bcc:	4629      	mov	r1, r5
 8012bce:	f7fd fdb7 	bl	8010740 <_malloc_r>
 8012bd2:	4606      	mov	r6, r0
 8012bd4:	b928      	cbnz	r0, 8012be2 <_calloc_r+0x1e>
 8012bd6:	2600      	movs	r6, #0
 8012bd8:	4630      	mov	r0, r6
 8012bda:	bd70      	pop	{r4, r5, r6, pc}
 8012bdc:	220c      	movs	r2, #12
 8012bde:	6002      	str	r2, [r0, #0]
 8012be0:	e7f9      	b.n	8012bd6 <_calloc_r+0x12>
 8012be2:	462a      	mov	r2, r5
 8012be4:	4621      	mov	r1, r4
 8012be6:	f7fc fe2f 	bl	800f848 <memset>
 8012bea:	e7f5      	b.n	8012bd8 <_calloc_r+0x14>

08012bec <rshift>:
 8012bec:	6903      	ldr	r3, [r0, #16]
 8012bee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012bf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bf6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012bfa:	f100 0414 	add.w	r4, r0, #20
 8012bfe:	dd45      	ble.n	8012c8c <rshift+0xa0>
 8012c00:	f011 011f 	ands.w	r1, r1, #31
 8012c04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012c08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012c0c:	d10c      	bne.n	8012c28 <rshift+0x3c>
 8012c0e:	f100 0710 	add.w	r7, r0, #16
 8012c12:	4629      	mov	r1, r5
 8012c14:	42b1      	cmp	r1, r6
 8012c16:	d334      	bcc.n	8012c82 <rshift+0x96>
 8012c18:	1a9b      	subs	r3, r3, r2
 8012c1a:	009b      	lsls	r3, r3, #2
 8012c1c:	1eea      	subs	r2, r5, #3
 8012c1e:	4296      	cmp	r6, r2
 8012c20:	bf38      	it	cc
 8012c22:	2300      	movcc	r3, #0
 8012c24:	4423      	add	r3, r4
 8012c26:	e015      	b.n	8012c54 <rshift+0x68>
 8012c28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012c2c:	f1c1 0820 	rsb	r8, r1, #32
 8012c30:	40cf      	lsrs	r7, r1
 8012c32:	f105 0e04 	add.w	lr, r5, #4
 8012c36:	46a1      	mov	r9, r4
 8012c38:	4576      	cmp	r6, lr
 8012c3a:	46f4      	mov	ip, lr
 8012c3c:	d815      	bhi.n	8012c6a <rshift+0x7e>
 8012c3e:	1a9a      	subs	r2, r3, r2
 8012c40:	0092      	lsls	r2, r2, #2
 8012c42:	3a04      	subs	r2, #4
 8012c44:	3501      	adds	r5, #1
 8012c46:	42ae      	cmp	r6, r5
 8012c48:	bf38      	it	cc
 8012c4a:	2200      	movcc	r2, #0
 8012c4c:	18a3      	adds	r3, r4, r2
 8012c4e:	50a7      	str	r7, [r4, r2]
 8012c50:	b107      	cbz	r7, 8012c54 <rshift+0x68>
 8012c52:	3304      	adds	r3, #4
 8012c54:	1b1a      	subs	r2, r3, r4
 8012c56:	42a3      	cmp	r3, r4
 8012c58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012c5c:	bf08      	it	eq
 8012c5e:	2300      	moveq	r3, #0
 8012c60:	6102      	str	r2, [r0, #16]
 8012c62:	bf08      	it	eq
 8012c64:	6143      	streq	r3, [r0, #20]
 8012c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c6a:	f8dc c000 	ldr.w	ip, [ip]
 8012c6e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012c72:	ea4c 0707 	orr.w	r7, ip, r7
 8012c76:	f849 7b04 	str.w	r7, [r9], #4
 8012c7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012c7e:	40cf      	lsrs	r7, r1
 8012c80:	e7da      	b.n	8012c38 <rshift+0x4c>
 8012c82:	f851 cb04 	ldr.w	ip, [r1], #4
 8012c86:	f847 cf04 	str.w	ip, [r7, #4]!
 8012c8a:	e7c3      	b.n	8012c14 <rshift+0x28>
 8012c8c:	4623      	mov	r3, r4
 8012c8e:	e7e1      	b.n	8012c54 <rshift+0x68>

08012c90 <__hexdig_fun>:
 8012c90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012c94:	2b09      	cmp	r3, #9
 8012c96:	d802      	bhi.n	8012c9e <__hexdig_fun+0xe>
 8012c98:	3820      	subs	r0, #32
 8012c9a:	b2c0      	uxtb	r0, r0
 8012c9c:	4770      	bx	lr
 8012c9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012ca2:	2b05      	cmp	r3, #5
 8012ca4:	d801      	bhi.n	8012caa <__hexdig_fun+0x1a>
 8012ca6:	3847      	subs	r0, #71	@ 0x47
 8012ca8:	e7f7      	b.n	8012c9a <__hexdig_fun+0xa>
 8012caa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012cae:	2b05      	cmp	r3, #5
 8012cb0:	d801      	bhi.n	8012cb6 <__hexdig_fun+0x26>
 8012cb2:	3827      	subs	r0, #39	@ 0x27
 8012cb4:	e7f1      	b.n	8012c9a <__hexdig_fun+0xa>
 8012cb6:	2000      	movs	r0, #0
 8012cb8:	4770      	bx	lr
	...

08012cbc <__gethex>:
 8012cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cc0:	b085      	sub	sp, #20
 8012cc2:	468a      	mov	sl, r1
 8012cc4:	9302      	str	r3, [sp, #8]
 8012cc6:	680b      	ldr	r3, [r1, #0]
 8012cc8:	9001      	str	r0, [sp, #4]
 8012cca:	4690      	mov	r8, r2
 8012ccc:	1c9c      	adds	r4, r3, #2
 8012cce:	46a1      	mov	r9, r4
 8012cd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012cd4:	2830      	cmp	r0, #48	@ 0x30
 8012cd6:	d0fa      	beq.n	8012cce <__gethex+0x12>
 8012cd8:	eba9 0303 	sub.w	r3, r9, r3
 8012cdc:	f1a3 0b02 	sub.w	fp, r3, #2
 8012ce0:	f7ff ffd6 	bl	8012c90 <__hexdig_fun>
 8012ce4:	4605      	mov	r5, r0
 8012ce6:	2800      	cmp	r0, #0
 8012ce8:	d168      	bne.n	8012dbc <__gethex+0x100>
 8012cea:	49a0      	ldr	r1, [pc, #640]	@ (8012f6c <__gethex+0x2b0>)
 8012cec:	2201      	movs	r2, #1
 8012cee:	4648      	mov	r0, r9
 8012cf0:	f7fc fdb2 	bl	800f858 <strncmp>
 8012cf4:	4607      	mov	r7, r0
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	d167      	bne.n	8012dca <__gethex+0x10e>
 8012cfa:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012cfe:	4626      	mov	r6, r4
 8012d00:	f7ff ffc6 	bl	8012c90 <__hexdig_fun>
 8012d04:	2800      	cmp	r0, #0
 8012d06:	d062      	beq.n	8012dce <__gethex+0x112>
 8012d08:	4623      	mov	r3, r4
 8012d0a:	7818      	ldrb	r0, [r3, #0]
 8012d0c:	2830      	cmp	r0, #48	@ 0x30
 8012d0e:	4699      	mov	r9, r3
 8012d10:	f103 0301 	add.w	r3, r3, #1
 8012d14:	d0f9      	beq.n	8012d0a <__gethex+0x4e>
 8012d16:	f7ff ffbb 	bl	8012c90 <__hexdig_fun>
 8012d1a:	fab0 f580 	clz	r5, r0
 8012d1e:	096d      	lsrs	r5, r5, #5
 8012d20:	f04f 0b01 	mov.w	fp, #1
 8012d24:	464a      	mov	r2, r9
 8012d26:	4616      	mov	r6, r2
 8012d28:	3201      	adds	r2, #1
 8012d2a:	7830      	ldrb	r0, [r6, #0]
 8012d2c:	f7ff ffb0 	bl	8012c90 <__hexdig_fun>
 8012d30:	2800      	cmp	r0, #0
 8012d32:	d1f8      	bne.n	8012d26 <__gethex+0x6a>
 8012d34:	498d      	ldr	r1, [pc, #564]	@ (8012f6c <__gethex+0x2b0>)
 8012d36:	2201      	movs	r2, #1
 8012d38:	4630      	mov	r0, r6
 8012d3a:	f7fc fd8d 	bl	800f858 <strncmp>
 8012d3e:	2800      	cmp	r0, #0
 8012d40:	d13f      	bne.n	8012dc2 <__gethex+0x106>
 8012d42:	b944      	cbnz	r4, 8012d56 <__gethex+0x9a>
 8012d44:	1c74      	adds	r4, r6, #1
 8012d46:	4622      	mov	r2, r4
 8012d48:	4616      	mov	r6, r2
 8012d4a:	3201      	adds	r2, #1
 8012d4c:	7830      	ldrb	r0, [r6, #0]
 8012d4e:	f7ff ff9f 	bl	8012c90 <__hexdig_fun>
 8012d52:	2800      	cmp	r0, #0
 8012d54:	d1f8      	bne.n	8012d48 <__gethex+0x8c>
 8012d56:	1ba4      	subs	r4, r4, r6
 8012d58:	00a7      	lsls	r7, r4, #2
 8012d5a:	7833      	ldrb	r3, [r6, #0]
 8012d5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012d60:	2b50      	cmp	r3, #80	@ 0x50
 8012d62:	d13e      	bne.n	8012de2 <__gethex+0x126>
 8012d64:	7873      	ldrb	r3, [r6, #1]
 8012d66:	2b2b      	cmp	r3, #43	@ 0x2b
 8012d68:	d033      	beq.n	8012dd2 <__gethex+0x116>
 8012d6a:	2b2d      	cmp	r3, #45	@ 0x2d
 8012d6c:	d034      	beq.n	8012dd8 <__gethex+0x11c>
 8012d6e:	1c71      	adds	r1, r6, #1
 8012d70:	2400      	movs	r4, #0
 8012d72:	7808      	ldrb	r0, [r1, #0]
 8012d74:	f7ff ff8c 	bl	8012c90 <__hexdig_fun>
 8012d78:	1e43      	subs	r3, r0, #1
 8012d7a:	b2db      	uxtb	r3, r3
 8012d7c:	2b18      	cmp	r3, #24
 8012d7e:	d830      	bhi.n	8012de2 <__gethex+0x126>
 8012d80:	f1a0 0210 	sub.w	r2, r0, #16
 8012d84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012d88:	f7ff ff82 	bl	8012c90 <__hexdig_fun>
 8012d8c:	f100 3cff 	add.w	ip, r0, #4294967295
 8012d90:	fa5f fc8c 	uxtb.w	ip, ip
 8012d94:	f1bc 0f18 	cmp.w	ip, #24
 8012d98:	f04f 030a 	mov.w	r3, #10
 8012d9c:	d91e      	bls.n	8012ddc <__gethex+0x120>
 8012d9e:	b104      	cbz	r4, 8012da2 <__gethex+0xe6>
 8012da0:	4252      	negs	r2, r2
 8012da2:	4417      	add	r7, r2
 8012da4:	f8ca 1000 	str.w	r1, [sl]
 8012da8:	b1ed      	cbz	r5, 8012de6 <__gethex+0x12a>
 8012daa:	f1bb 0f00 	cmp.w	fp, #0
 8012dae:	bf0c      	ite	eq
 8012db0:	2506      	moveq	r5, #6
 8012db2:	2500      	movne	r5, #0
 8012db4:	4628      	mov	r0, r5
 8012db6:	b005      	add	sp, #20
 8012db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dbc:	2500      	movs	r5, #0
 8012dbe:	462c      	mov	r4, r5
 8012dc0:	e7b0      	b.n	8012d24 <__gethex+0x68>
 8012dc2:	2c00      	cmp	r4, #0
 8012dc4:	d1c7      	bne.n	8012d56 <__gethex+0x9a>
 8012dc6:	4627      	mov	r7, r4
 8012dc8:	e7c7      	b.n	8012d5a <__gethex+0x9e>
 8012dca:	464e      	mov	r6, r9
 8012dcc:	462f      	mov	r7, r5
 8012dce:	2501      	movs	r5, #1
 8012dd0:	e7c3      	b.n	8012d5a <__gethex+0x9e>
 8012dd2:	2400      	movs	r4, #0
 8012dd4:	1cb1      	adds	r1, r6, #2
 8012dd6:	e7cc      	b.n	8012d72 <__gethex+0xb6>
 8012dd8:	2401      	movs	r4, #1
 8012dda:	e7fb      	b.n	8012dd4 <__gethex+0x118>
 8012ddc:	fb03 0002 	mla	r0, r3, r2, r0
 8012de0:	e7ce      	b.n	8012d80 <__gethex+0xc4>
 8012de2:	4631      	mov	r1, r6
 8012de4:	e7de      	b.n	8012da4 <__gethex+0xe8>
 8012de6:	eba6 0309 	sub.w	r3, r6, r9
 8012dea:	3b01      	subs	r3, #1
 8012dec:	4629      	mov	r1, r5
 8012dee:	2b07      	cmp	r3, #7
 8012df0:	dc0a      	bgt.n	8012e08 <__gethex+0x14c>
 8012df2:	9801      	ldr	r0, [sp, #4]
 8012df4:	f7fd fd30 	bl	8010858 <_Balloc>
 8012df8:	4604      	mov	r4, r0
 8012dfa:	b940      	cbnz	r0, 8012e0e <__gethex+0x152>
 8012dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8012f70 <__gethex+0x2b4>)
 8012dfe:	4602      	mov	r2, r0
 8012e00:	21e4      	movs	r1, #228	@ 0xe4
 8012e02:	485c      	ldr	r0, [pc, #368]	@ (8012f74 <__gethex+0x2b8>)
 8012e04:	f7ff fec0 	bl	8012b88 <__assert_func>
 8012e08:	3101      	adds	r1, #1
 8012e0a:	105b      	asrs	r3, r3, #1
 8012e0c:	e7ef      	b.n	8012dee <__gethex+0x132>
 8012e0e:	f100 0a14 	add.w	sl, r0, #20
 8012e12:	2300      	movs	r3, #0
 8012e14:	4655      	mov	r5, sl
 8012e16:	469b      	mov	fp, r3
 8012e18:	45b1      	cmp	r9, r6
 8012e1a:	d337      	bcc.n	8012e8c <__gethex+0x1d0>
 8012e1c:	f845 bb04 	str.w	fp, [r5], #4
 8012e20:	eba5 050a 	sub.w	r5, r5, sl
 8012e24:	10ad      	asrs	r5, r5, #2
 8012e26:	6125      	str	r5, [r4, #16]
 8012e28:	4658      	mov	r0, fp
 8012e2a:	f7fd fe07 	bl	8010a3c <__hi0bits>
 8012e2e:	016d      	lsls	r5, r5, #5
 8012e30:	f8d8 6000 	ldr.w	r6, [r8]
 8012e34:	1a2d      	subs	r5, r5, r0
 8012e36:	42b5      	cmp	r5, r6
 8012e38:	dd54      	ble.n	8012ee4 <__gethex+0x228>
 8012e3a:	1bad      	subs	r5, r5, r6
 8012e3c:	4629      	mov	r1, r5
 8012e3e:	4620      	mov	r0, r4
 8012e40:	f7fe f99b 	bl	801117a <__any_on>
 8012e44:	4681      	mov	r9, r0
 8012e46:	b178      	cbz	r0, 8012e68 <__gethex+0x1ac>
 8012e48:	1e6b      	subs	r3, r5, #1
 8012e4a:	1159      	asrs	r1, r3, #5
 8012e4c:	f003 021f 	and.w	r2, r3, #31
 8012e50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012e54:	f04f 0901 	mov.w	r9, #1
 8012e58:	fa09 f202 	lsl.w	r2, r9, r2
 8012e5c:	420a      	tst	r2, r1
 8012e5e:	d003      	beq.n	8012e68 <__gethex+0x1ac>
 8012e60:	454b      	cmp	r3, r9
 8012e62:	dc36      	bgt.n	8012ed2 <__gethex+0x216>
 8012e64:	f04f 0902 	mov.w	r9, #2
 8012e68:	4629      	mov	r1, r5
 8012e6a:	4620      	mov	r0, r4
 8012e6c:	f7ff febe 	bl	8012bec <rshift>
 8012e70:	442f      	add	r7, r5
 8012e72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012e76:	42bb      	cmp	r3, r7
 8012e78:	da42      	bge.n	8012f00 <__gethex+0x244>
 8012e7a:	9801      	ldr	r0, [sp, #4]
 8012e7c:	4621      	mov	r1, r4
 8012e7e:	f7fd fd2b 	bl	80108d8 <_Bfree>
 8012e82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012e84:	2300      	movs	r3, #0
 8012e86:	6013      	str	r3, [r2, #0]
 8012e88:	25a3      	movs	r5, #163	@ 0xa3
 8012e8a:	e793      	b.n	8012db4 <__gethex+0xf8>
 8012e8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012e90:	2a2e      	cmp	r2, #46	@ 0x2e
 8012e92:	d012      	beq.n	8012eba <__gethex+0x1fe>
 8012e94:	2b20      	cmp	r3, #32
 8012e96:	d104      	bne.n	8012ea2 <__gethex+0x1e6>
 8012e98:	f845 bb04 	str.w	fp, [r5], #4
 8012e9c:	f04f 0b00 	mov.w	fp, #0
 8012ea0:	465b      	mov	r3, fp
 8012ea2:	7830      	ldrb	r0, [r6, #0]
 8012ea4:	9303      	str	r3, [sp, #12]
 8012ea6:	f7ff fef3 	bl	8012c90 <__hexdig_fun>
 8012eaa:	9b03      	ldr	r3, [sp, #12]
 8012eac:	f000 000f 	and.w	r0, r0, #15
 8012eb0:	4098      	lsls	r0, r3
 8012eb2:	ea4b 0b00 	orr.w	fp, fp, r0
 8012eb6:	3304      	adds	r3, #4
 8012eb8:	e7ae      	b.n	8012e18 <__gethex+0x15c>
 8012eba:	45b1      	cmp	r9, r6
 8012ebc:	d8ea      	bhi.n	8012e94 <__gethex+0x1d8>
 8012ebe:	492b      	ldr	r1, [pc, #172]	@ (8012f6c <__gethex+0x2b0>)
 8012ec0:	9303      	str	r3, [sp, #12]
 8012ec2:	2201      	movs	r2, #1
 8012ec4:	4630      	mov	r0, r6
 8012ec6:	f7fc fcc7 	bl	800f858 <strncmp>
 8012eca:	9b03      	ldr	r3, [sp, #12]
 8012ecc:	2800      	cmp	r0, #0
 8012ece:	d1e1      	bne.n	8012e94 <__gethex+0x1d8>
 8012ed0:	e7a2      	b.n	8012e18 <__gethex+0x15c>
 8012ed2:	1ea9      	subs	r1, r5, #2
 8012ed4:	4620      	mov	r0, r4
 8012ed6:	f7fe f950 	bl	801117a <__any_on>
 8012eda:	2800      	cmp	r0, #0
 8012edc:	d0c2      	beq.n	8012e64 <__gethex+0x1a8>
 8012ede:	f04f 0903 	mov.w	r9, #3
 8012ee2:	e7c1      	b.n	8012e68 <__gethex+0x1ac>
 8012ee4:	da09      	bge.n	8012efa <__gethex+0x23e>
 8012ee6:	1b75      	subs	r5, r6, r5
 8012ee8:	4621      	mov	r1, r4
 8012eea:	9801      	ldr	r0, [sp, #4]
 8012eec:	462a      	mov	r2, r5
 8012eee:	f7fd ff0b 	bl	8010d08 <__lshift>
 8012ef2:	1b7f      	subs	r7, r7, r5
 8012ef4:	4604      	mov	r4, r0
 8012ef6:	f100 0a14 	add.w	sl, r0, #20
 8012efa:	f04f 0900 	mov.w	r9, #0
 8012efe:	e7b8      	b.n	8012e72 <__gethex+0x1b6>
 8012f00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012f04:	42bd      	cmp	r5, r7
 8012f06:	dd6f      	ble.n	8012fe8 <__gethex+0x32c>
 8012f08:	1bed      	subs	r5, r5, r7
 8012f0a:	42ae      	cmp	r6, r5
 8012f0c:	dc34      	bgt.n	8012f78 <__gethex+0x2bc>
 8012f0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012f12:	2b02      	cmp	r3, #2
 8012f14:	d022      	beq.n	8012f5c <__gethex+0x2a0>
 8012f16:	2b03      	cmp	r3, #3
 8012f18:	d024      	beq.n	8012f64 <__gethex+0x2a8>
 8012f1a:	2b01      	cmp	r3, #1
 8012f1c:	d115      	bne.n	8012f4a <__gethex+0x28e>
 8012f1e:	42ae      	cmp	r6, r5
 8012f20:	d113      	bne.n	8012f4a <__gethex+0x28e>
 8012f22:	2e01      	cmp	r6, #1
 8012f24:	d10b      	bne.n	8012f3e <__gethex+0x282>
 8012f26:	9a02      	ldr	r2, [sp, #8]
 8012f28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012f2c:	6013      	str	r3, [r2, #0]
 8012f2e:	2301      	movs	r3, #1
 8012f30:	6123      	str	r3, [r4, #16]
 8012f32:	f8ca 3000 	str.w	r3, [sl]
 8012f36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f38:	2562      	movs	r5, #98	@ 0x62
 8012f3a:	601c      	str	r4, [r3, #0]
 8012f3c:	e73a      	b.n	8012db4 <__gethex+0xf8>
 8012f3e:	1e71      	subs	r1, r6, #1
 8012f40:	4620      	mov	r0, r4
 8012f42:	f7fe f91a 	bl	801117a <__any_on>
 8012f46:	2800      	cmp	r0, #0
 8012f48:	d1ed      	bne.n	8012f26 <__gethex+0x26a>
 8012f4a:	9801      	ldr	r0, [sp, #4]
 8012f4c:	4621      	mov	r1, r4
 8012f4e:	f7fd fcc3 	bl	80108d8 <_Bfree>
 8012f52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012f54:	2300      	movs	r3, #0
 8012f56:	6013      	str	r3, [r2, #0]
 8012f58:	2550      	movs	r5, #80	@ 0x50
 8012f5a:	e72b      	b.n	8012db4 <__gethex+0xf8>
 8012f5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d1f3      	bne.n	8012f4a <__gethex+0x28e>
 8012f62:	e7e0      	b.n	8012f26 <__gethex+0x26a>
 8012f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d1dd      	bne.n	8012f26 <__gethex+0x26a>
 8012f6a:	e7ee      	b.n	8012f4a <__gethex+0x28e>
 8012f6c:	08013bc0 	.word	0x08013bc0
 8012f70:	08013a58 	.word	0x08013a58
 8012f74:	08013c88 	.word	0x08013c88
 8012f78:	1e6f      	subs	r7, r5, #1
 8012f7a:	f1b9 0f00 	cmp.w	r9, #0
 8012f7e:	d130      	bne.n	8012fe2 <__gethex+0x326>
 8012f80:	b127      	cbz	r7, 8012f8c <__gethex+0x2d0>
 8012f82:	4639      	mov	r1, r7
 8012f84:	4620      	mov	r0, r4
 8012f86:	f7fe f8f8 	bl	801117a <__any_on>
 8012f8a:	4681      	mov	r9, r0
 8012f8c:	117a      	asrs	r2, r7, #5
 8012f8e:	2301      	movs	r3, #1
 8012f90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012f94:	f007 071f 	and.w	r7, r7, #31
 8012f98:	40bb      	lsls	r3, r7
 8012f9a:	4213      	tst	r3, r2
 8012f9c:	4629      	mov	r1, r5
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	bf18      	it	ne
 8012fa2:	f049 0902 	orrne.w	r9, r9, #2
 8012fa6:	f7ff fe21 	bl	8012bec <rshift>
 8012faa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012fae:	1b76      	subs	r6, r6, r5
 8012fb0:	2502      	movs	r5, #2
 8012fb2:	f1b9 0f00 	cmp.w	r9, #0
 8012fb6:	d047      	beq.n	8013048 <__gethex+0x38c>
 8012fb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012fbc:	2b02      	cmp	r3, #2
 8012fbe:	d015      	beq.n	8012fec <__gethex+0x330>
 8012fc0:	2b03      	cmp	r3, #3
 8012fc2:	d017      	beq.n	8012ff4 <__gethex+0x338>
 8012fc4:	2b01      	cmp	r3, #1
 8012fc6:	d109      	bne.n	8012fdc <__gethex+0x320>
 8012fc8:	f019 0f02 	tst.w	r9, #2
 8012fcc:	d006      	beq.n	8012fdc <__gethex+0x320>
 8012fce:	f8da 3000 	ldr.w	r3, [sl]
 8012fd2:	ea49 0903 	orr.w	r9, r9, r3
 8012fd6:	f019 0f01 	tst.w	r9, #1
 8012fda:	d10e      	bne.n	8012ffa <__gethex+0x33e>
 8012fdc:	f045 0510 	orr.w	r5, r5, #16
 8012fe0:	e032      	b.n	8013048 <__gethex+0x38c>
 8012fe2:	f04f 0901 	mov.w	r9, #1
 8012fe6:	e7d1      	b.n	8012f8c <__gethex+0x2d0>
 8012fe8:	2501      	movs	r5, #1
 8012fea:	e7e2      	b.n	8012fb2 <__gethex+0x2f6>
 8012fec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012fee:	f1c3 0301 	rsb	r3, r3, #1
 8012ff2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012ff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d0f0      	beq.n	8012fdc <__gethex+0x320>
 8012ffa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012ffe:	f104 0314 	add.w	r3, r4, #20
 8013002:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013006:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801300a:	f04f 0c00 	mov.w	ip, #0
 801300e:	4618      	mov	r0, r3
 8013010:	f853 2b04 	ldr.w	r2, [r3], #4
 8013014:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013018:	d01b      	beq.n	8013052 <__gethex+0x396>
 801301a:	3201      	adds	r2, #1
 801301c:	6002      	str	r2, [r0, #0]
 801301e:	2d02      	cmp	r5, #2
 8013020:	f104 0314 	add.w	r3, r4, #20
 8013024:	d13c      	bne.n	80130a0 <__gethex+0x3e4>
 8013026:	f8d8 2000 	ldr.w	r2, [r8]
 801302a:	3a01      	subs	r2, #1
 801302c:	42b2      	cmp	r2, r6
 801302e:	d109      	bne.n	8013044 <__gethex+0x388>
 8013030:	1171      	asrs	r1, r6, #5
 8013032:	2201      	movs	r2, #1
 8013034:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013038:	f006 061f 	and.w	r6, r6, #31
 801303c:	fa02 f606 	lsl.w	r6, r2, r6
 8013040:	421e      	tst	r6, r3
 8013042:	d13a      	bne.n	80130ba <__gethex+0x3fe>
 8013044:	f045 0520 	orr.w	r5, r5, #32
 8013048:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801304a:	601c      	str	r4, [r3, #0]
 801304c:	9b02      	ldr	r3, [sp, #8]
 801304e:	601f      	str	r7, [r3, #0]
 8013050:	e6b0      	b.n	8012db4 <__gethex+0xf8>
 8013052:	4299      	cmp	r1, r3
 8013054:	f843 cc04 	str.w	ip, [r3, #-4]
 8013058:	d8d9      	bhi.n	801300e <__gethex+0x352>
 801305a:	68a3      	ldr	r3, [r4, #8]
 801305c:	459b      	cmp	fp, r3
 801305e:	db17      	blt.n	8013090 <__gethex+0x3d4>
 8013060:	6861      	ldr	r1, [r4, #4]
 8013062:	9801      	ldr	r0, [sp, #4]
 8013064:	3101      	adds	r1, #1
 8013066:	f7fd fbf7 	bl	8010858 <_Balloc>
 801306a:	4681      	mov	r9, r0
 801306c:	b918      	cbnz	r0, 8013076 <__gethex+0x3ba>
 801306e:	4b1a      	ldr	r3, [pc, #104]	@ (80130d8 <__gethex+0x41c>)
 8013070:	4602      	mov	r2, r0
 8013072:	2184      	movs	r1, #132	@ 0x84
 8013074:	e6c5      	b.n	8012e02 <__gethex+0x146>
 8013076:	6922      	ldr	r2, [r4, #16]
 8013078:	3202      	adds	r2, #2
 801307a:	f104 010c 	add.w	r1, r4, #12
 801307e:	0092      	lsls	r2, r2, #2
 8013080:	300c      	adds	r0, #12
 8013082:	f7fc fc88 	bl	800f996 <memcpy>
 8013086:	4621      	mov	r1, r4
 8013088:	9801      	ldr	r0, [sp, #4]
 801308a:	f7fd fc25 	bl	80108d8 <_Bfree>
 801308e:	464c      	mov	r4, r9
 8013090:	6923      	ldr	r3, [r4, #16]
 8013092:	1c5a      	adds	r2, r3, #1
 8013094:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013098:	6122      	str	r2, [r4, #16]
 801309a:	2201      	movs	r2, #1
 801309c:	615a      	str	r2, [r3, #20]
 801309e:	e7be      	b.n	801301e <__gethex+0x362>
 80130a0:	6922      	ldr	r2, [r4, #16]
 80130a2:	455a      	cmp	r2, fp
 80130a4:	dd0b      	ble.n	80130be <__gethex+0x402>
 80130a6:	2101      	movs	r1, #1
 80130a8:	4620      	mov	r0, r4
 80130aa:	f7ff fd9f 	bl	8012bec <rshift>
 80130ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80130b2:	3701      	adds	r7, #1
 80130b4:	42bb      	cmp	r3, r7
 80130b6:	f6ff aee0 	blt.w	8012e7a <__gethex+0x1be>
 80130ba:	2501      	movs	r5, #1
 80130bc:	e7c2      	b.n	8013044 <__gethex+0x388>
 80130be:	f016 061f 	ands.w	r6, r6, #31
 80130c2:	d0fa      	beq.n	80130ba <__gethex+0x3fe>
 80130c4:	4453      	add	r3, sl
 80130c6:	f1c6 0620 	rsb	r6, r6, #32
 80130ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80130ce:	f7fd fcb5 	bl	8010a3c <__hi0bits>
 80130d2:	42b0      	cmp	r0, r6
 80130d4:	dbe7      	blt.n	80130a6 <__gethex+0x3ea>
 80130d6:	e7f0      	b.n	80130ba <__gethex+0x3fe>
 80130d8:	08013a58 	.word	0x08013a58

080130dc <L_shift>:
 80130dc:	f1c2 0208 	rsb	r2, r2, #8
 80130e0:	0092      	lsls	r2, r2, #2
 80130e2:	b570      	push	{r4, r5, r6, lr}
 80130e4:	f1c2 0620 	rsb	r6, r2, #32
 80130e8:	6843      	ldr	r3, [r0, #4]
 80130ea:	6804      	ldr	r4, [r0, #0]
 80130ec:	fa03 f506 	lsl.w	r5, r3, r6
 80130f0:	432c      	orrs	r4, r5
 80130f2:	40d3      	lsrs	r3, r2
 80130f4:	6004      	str	r4, [r0, #0]
 80130f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80130fa:	4288      	cmp	r0, r1
 80130fc:	d3f4      	bcc.n	80130e8 <L_shift+0xc>
 80130fe:	bd70      	pop	{r4, r5, r6, pc}

08013100 <__match>:
 8013100:	b530      	push	{r4, r5, lr}
 8013102:	6803      	ldr	r3, [r0, #0]
 8013104:	3301      	adds	r3, #1
 8013106:	f811 4b01 	ldrb.w	r4, [r1], #1
 801310a:	b914      	cbnz	r4, 8013112 <__match+0x12>
 801310c:	6003      	str	r3, [r0, #0]
 801310e:	2001      	movs	r0, #1
 8013110:	bd30      	pop	{r4, r5, pc}
 8013112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013116:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801311a:	2d19      	cmp	r5, #25
 801311c:	bf98      	it	ls
 801311e:	3220      	addls	r2, #32
 8013120:	42a2      	cmp	r2, r4
 8013122:	d0f0      	beq.n	8013106 <__match+0x6>
 8013124:	2000      	movs	r0, #0
 8013126:	e7f3      	b.n	8013110 <__match+0x10>

08013128 <__hexnan>:
 8013128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801312c:	680b      	ldr	r3, [r1, #0]
 801312e:	6801      	ldr	r1, [r0, #0]
 8013130:	115e      	asrs	r6, r3, #5
 8013132:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013136:	f013 031f 	ands.w	r3, r3, #31
 801313a:	b087      	sub	sp, #28
 801313c:	bf18      	it	ne
 801313e:	3604      	addne	r6, #4
 8013140:	2500      	movs	r5, #0
 8013142:	1f37      	subs	r7, r6, #4
 8013144:	4682      	mov	sl, r0
 8013146:	4690      	mov	r8, r2
 8013148:	9301      	str	r3, [sp, #4]
 801314a:	f846 5c04 	str.w	r5, [r6, #-4]
 801314e:	46b9      	mov	r9, r7
 8013150:	463c      	mov	r4, r7
 8013152:	9502      	str	r5, [sp, #8]
 8013154:	46ab      	mov	fp, r5
 8013156:	784a      	ldrb	r2, [r1, #1]
 8013158:	1c4b      	adds	r3, r1, #1
 801315a:	9303      	str	r3, [sp, #12]
 801315c:	b342      	cbz	r2, 80131b0 <__hexnan+0x88>
 801315e:	4610      	mov	r0, r2
 8013160:	9105      	str	r1, [sp, #20]
 8013162:	9204      	str	r2, [sp, #16]
 8013164:	f7ff fd94 	bl	8012c90 <__hexdig_fun>
 8013168:	2800      	cmp	r0, #0
 801316a:	d151      	bne.n	8013210 <__hexnan+0xe8>
 801316c:	9a04      	ldr	r2, [sp, #16]
 801316e:	9905      	ldr	r1, [sp, #20]
 8013170:	2a20      	cmp	r2, #32
 8013172:	d818      	bhi.n	80131a6 <__hexnan+0x7e>
 8013174:	9b02      	ldr	r3, [sp, #8]
 8013176:	459b      	cmp	fp, r3
 8013178:	dd13      	ble.n	80131a2 <__hexnan+0x7a>
 801317a:	454c      	cmp	r4, r9
 801317c:	d206      	bcs.n	801318c <__hexnan+0x64>
 801317e:	2d07      	cmp	r5, #7
 8013180:	dc04      	bgt.n	801318c <__hexnan+0x64>
 8013182:	462a      	mov	r2, r5
 8013184:	4649      	mov	r1, r9
 8013186:	4620      	mov	r0, r4
 8013188:	f7ff ffa8 	bl	80130dc <L_shift>
 801318c:	4544      	cmp	r4, r8
 801318e:	d952      	bls.n	8013236 <__hexnan+0x10e>
 8013190:	2300      	movs	r3, #0
 8013192:	f1a4 0904 	sub.w	r9, r4, #4
 8013196:	f844 3c04 	str.w	r3, [r4, #-4]
 801319a:	f8cd b008 	str.w	fp, [sp, #8]
 801319e:	464c      	mov	r4, r9
 80131a0:	461d      	mov	r5, r3
 80131a2:	9903      	ldr	r1, [sp, #12]
 80131a4:	e7d7      	b.n	8013156 <__hexnan+0x2e>
 80131a6:	2a29      	cmp	r2, #41	@ 0x29
 80131a8:	d157      	bne.n	801325a <__hexnan+0x132>
 80131aa:	3102      	adds	r1, #2
 80131ac:	f8ca 1000 	str.w	r1, [sl]
 80131b0:	f1bb 0f00 	cmp.w	fp, #0
 80131b4:	d051      	beq.n	801325a <__hexnan+0x132>
 80131b6:	454c      	cmp	r4, r9
 80131b8:	d206      	bcs.n	80131c8 <__hexnan+0xa0>
 80131ba:	2d07      	cmp	r5, #7
 80131bc:	dc04      	bgt.n	80131c8 <__hexnan+0xa0>
 80131be:	462a      	mov	r2, r5
 80131c0:	4649      	mov	r1, r9
 80131c2:	4620      	mov	r0, r4
 80131c4:	f7ff ff8a 	bl	80130dc <L_shift>
 80131c8:	4544      	cmp	r4, r8
 80131ca:	d936      	bls.n	801323a <__hexnan+0x112>
 80131cc:	f1a8 0204 	sub.w	r2, r8, #4
 80131d0:	4623      	mov	r3, r4
 80131d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80131d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80131da:	429f      	cmp	r7, r3
 80131dc:	d2f9      	bcs.n	80131d2 <__hexnan+0xaa>
 80131de:	1b3b      	subs	r3, r7, r4
 80131e0:	f023 0303 	bic.w	r3, r3, #3
 80131e4:	3304      	adds	r3, #4
 80131e6:	3401      	adds	r4, #1
 80131e8:	3e03      	subs	r6, #3
 80131ea:	42b4      	cmp	r4, r6
 80131ec:	bf88      	it	hi
 80131ee:	2304      	movhi	r3, #4
 80131f0:	4443      	add	r3, r8
 80131f2:	2200      	movs	r2, #0
 80131f4:	f843 2b04 	str.w	r2, [r3], #4
 80131f8:	429f      	cmp	r7, r3
 80131fa:	d2fb      	bcs.n	80131f4 <__hexnan+0xcc>
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	b91b      	cbnz	r3, 8013208 <__hexnan+0xe0>
 8013200:	4547      	cmp	r7, r8
 8013202:	d128      	bne.n	8013256 <__hexnan+0x12e>
 8013204:	2301      	movs	r3, #1
 8013206:	603b      	str	r3, [r7, #0]
 8013208:	2005      	movs	r0, #5
 801320a:	b007      	add	sp, #28
 801320c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013210:	3501      	adds	r5, #1
 8013212:	2d08      	cmp	r5, #8
 8013214:	f10b 0b01 	add.w	fp, fp, #1
 8013218:	dd06      	ble.n	8013228 <__hexnan+0x100>
 801321a:	4544      	cmp	r4, r8
 801321c:	d9c1      	bls.n	80131a2 <__hexnan+0x7a>
 801321e:	2300      	movs	r3, #0
 8013220:	f844 3c04 	str.w	r3, [r4, #-4]
 8013224:	2501      	movs	r5, #1
 8013226:	3c04      	subs	r4, #4
 8013228:	6822      	ldr	r2, [r4, #0]
 801322a:	f000 000f 	and.w	r0, r0, #15
 801322e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013232:	6020      	str	r0, [r4, #0]
 8013234:	e7b5      	b.n	80131a2 <__hexnan+0x7a>
 8013236:	2508      	movs	r5, #8
 8013238:	e7b3      	b.n	80131a2 <__hexnan+0x7a>
 801323a:	9b01      	ldr	r3, [sp, #4]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d0dd      	beq.n	80131fc <__hexnan+0xd4>
 8013240:	f1c3 0320 	rsb	r3, r3, #32
 8013244:	f04f 32ff 	mov.w	r2, #4294967295
 8013248:	40da      	lsrs	r2, r3
 801324a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801324e:	4013      	ands	r3, r2
 8013250:	f846 3c04 	str.w	r3, [r6, #-4]
 8013254:	e7d2      	b.n	80131fc <__hexnan+0xd4>
 8013256:	3f04      	subs	r7, #4
 8013258:	e7d0      	b.n	80131fc <__hexnan+0xd4>
 801325a:	2004      	movs	r0, #4
 801325c:	e7d5      	b.n	801320a <__hexnan+0xe2>

0801325e <__ascii_mbtowc>:
 801325e:	b082      	sub	sp, #8
 8013260:	b901      	cbnz	r1, 8013264 <__ascii_mbtowc+0x6>
 8013262:	a901      	add	r1, sp, #4
 8013264:	b142      	cbz	r2, 8013278 <__ascii_mbtowc+0x1a>
 8013266:	b14b      	cbz	r3, 801327c <__ascii_mbtowc+0x1e>
 8013268:	7813      	ldrb	r3, [r2, #0]
 801326a:	600b      	str	r3, [r1, #0]
 801326c:	7812      	ldrb	r2, [r2, #0]
 801326e:	1e10      	subs	r0, r2, #0
 8013270:	bf18      	it	ne
 8013272:	2001      	movne	r0, #1
 8013274:	b002      	add	sp, #8
 8013276:	4770      	bx	lr
 8013278:	4610      	mov	r0, r2
 801327a:	e7fb      	b.n	8013274 <__ascii_mbtowc+0x16>
 801327c:	f06f 0001 	mvn.w	r0, #1
 8013280:	e7f8      	b.n	8013274 <__ascii_mbtowc+0x16>

08013282 <_realloc_r>:
 8013282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013286:	4680      	mov	r8, r0
 8013288:	4615      	mov	r5, r2
 801328a:	460c      	mov	r4, r1
 801328c:	b921      	cbnz	r1, 8013298 <_realloc_r+0x16>
 801328e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013292:	4611      	mov	r1, r2
 8013294:	f7fd ba54 	b.w	8010740 <_malloc_r>
 8013298:	b92a      	cbnz	r2, 80132a6 <_realloc_r+0x24>
 801329a:	f7fd f9dd 	bl	8010658 <_free_r>
 801329e:	2400      	movs	r4, #0
 80132a0:	4620      	mov	r0, r4
 80132a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132a6:	f000 f8b2 	bl	801340e <_malloc_usable_size_r>
 80132aa:	4285      	cmp	r5, r0
 80132ac:	4606      	mov	r6, r0
 80132ae:	d802      	bhi.n	80132b6 <_realloc_r+0x34>
 80132b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80132b4:	d8f4      	bhi.n	80132a0 <_realloc_r+0x1e>
 80132b6:	4629      	mov	r1, r5
 80132b8:	4640      	mov	r0, r8
 80132ba:	f7fd fa41 	bl	8010740 <_malloc_r>
 80132be:	4607      	mov	r7, r0
 80132c0:	2800      	cmp	r0, #0
 80132c2:	d0ec      	beq.n	801329e <_realloc_r+0x1c>
 80132c4:	42b5      	cmp	r5, r6
 80132c6:	462a      	mov	r2, r5
 80132c8:	4621      	mov	r1, r4
 80132ca:	bf28      	it	cs
 80132cc:	4632      	movcs	r2, r6
 80132ce:	f7fc fb62 	bl	800f996 <memcpy>
 80132d2:	4621      	mov	r1, r4
 80132d4:	4640      	mov	r0, r8
 80132d6:	f7fd f9bf 	bl	8010658 <_free_r>
 80132da:	463c      	mov	r4, r7
 80132dc:	e7e0      	b.n	80132a0 <_realloc_r+0x1e>
	...

080132e0 <_strtoul_l.constprop.0>:
 80132e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132e4:	4e34      	ldr	r6, [pc, #208]	@ (80133b8 <_strtoul_l.constprop.0+0xd8>)
 80132e6:	4686      	mov	lr, r0
 80132e8:	460d      	mov	r5, r1
 80132ea:	4628      	mov	r0, r5
 80132ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80132f0:	5d37      	ldrb	r7, [r6, r4]
 80132f2:	f017 0708 	ands.w	r7, r7, #8
 80132f6:	d1f8      	bne.n	80132ea <_strtoul_l.constprop.0+0xa>
 80132f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80132fa:	d12f      	bne.n	801335c <_strtoul_l.constprop.0+0x7c>
 80132fc:	782c      	ldrb	r4, [r5, #0]
 80132fe:	2701      	movs	r7, #1
 8013300:	1c85      	adds	r5, r0, #2
 8013302:	f033 0010 	bics.w	r0, r3, #16
 8013306:	d109      	bne.n	801331c <_strtoul_l.constprop.0+0x3c>
 8013308:	2c30      	cmp	r4, #48	@ 0x30
 801330a:	d12c      	bne.n	8013366 <_strtoul_l.constprop.0+0x86>
 801330c:	7828      	ldrb	r0, [r5, #0]
 801330e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8013312:	2858      	cmp	r0, #88	@ 0x58
 8013314:	d127      	bne.n	8013366 <_strtoul_l.constprop.0+0x86>
 8013316:	786c      	ldrb	r4, [r5, #1]
 8013318:	2310      	movs	r3, #16
 801331a:	3502      	adds	r5, #2
 801331c:	f04f 38ff 	mov.w	r8, #4294967295
 8013320:	2600      	movs	r6, #0
 8013322:	fbb8 f8f3 	udiv	r8, r8, r3
 8013326:	fb03 f908 	mul.w	r9, r3, r8
 801332a:	ea6f 0909 	mvn.w	r9, r9
 801332e:	4630      	mov	r0, r6
 8013330:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8013334:	f1bc 0f09 	cmp.w	ip, #9
 8013338:	d81c      	bhi.n	8013374 <_strtoul_l.constprop.0+0x94>
 801333a:	4664      	mov	r4, ip
 801333c:	42a3      	cmp	r3, r4
 801333e:	dd2a      	ble.n	8013396 <_strtoul_l.constprop.0+0xb6>
 8013340:	f1b6 3fff 	cmp.w	r6, #4294967295
 8013344:	d007      	beq.n	8013356 <_strtoul_l.constprop.0+0x76>
 8013346:	4580      	cmp	r8, r0
 8013348:	d322      	bcc.n	8013390 <_strtoul_l.constprop.0+0xb0>
 801334a:	d101      	bne.n	8013350 <_strtoul_l.constprop.0+0x70>
 801334c:	45a1      	cmp	r9, r4
 801334e:	db1f      	blt.n	8013390 <_strtoul_l.constprop.0+0xb0>
 8013350:	fb00 4003 	mla	r0, r0, r3, r4
 8013354:	2601      	movs	r6, #1
 8013356:	f815 4b01 	ldrb.w	r4, [r5], #1
 801335a:	e7e9      	b.n	8013330 <_strtoul_l.constprop.0+0x50>
 801335c:	2c2b      	cmp	r4, #43	@ 0x2b
 801335e:	bf04      	itt	eq
 8013360:	782c      	ldrbeq	r4, [r5, #0]
 8013362:	1c85      	addeq	r5, r0, #2
 8013364:	e7cd      	b.n	8013302 <_strtoul_l.constprop.0+0x22>
 8013366:	2b00      	cmp	r3, #0
 8013368:	d1d8      	bne.n	801331c <_strtoul_l.constprop.0+0x3c>
 801336a:	2c30      	cmp	r4, #48	@ 0x30
 801336c:	bf0c      	ite	eq
 801336e:	2308      	moveq	r3, #8
 8013370:	230a      	movne	r3, #10
 8013372:	e7d3      	b.n	801331c <_strtoul_l.constprop.0+0x3c>
 8013374:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8013378:	f1bc 0f19 	cmp.w	ip, #25
 801337c:	d801      	bhi.n	8013382 <_strtoul_l.constprop.0+0xa2>
 801337e:	3c37      	subs	r4, #55	@ 0x37
 8013380:	e7dc      	b.n	801333c <_strtoul_l.constprop.0+0x5c>
 8013382:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8013386:	f1bc 0f19 	cmp.w	ip, #25
 801338a:	d804      	bhi.n	8013396 <_strtoul_l.constprop.0+0xb6>
 801338c:	3c57      	subs	r4, #87	@ 0x57
 801338e:	e7d5      	b.n	801333c <_strtoul_l.constprop.0+0x5c>
 8013390:	f04f 36ff 	mov.w	r6, #4294967295
 8013394:	e7df      	b.n	8013356 <_strtoul_l.constprop.0+0x76>
 8013396:	1c73      	adds	r3, r6, #1
 8013398:	d106      	bne.n	80133a8 <_strtoul_l.constprop.0+0xc8>
 801339a:	2322      	movs	r3, #34	@ 0x22
 801339c:	f8ce 3000 	str.w	r3, [lr]
 80133a0:	4630      	mov	r0, r6
 80133a2:	b932      	cbnz	r2, 80133b2 <_strtoul_l.constprop.0+0xd2>
 80133a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133a8:	b107      	cbz	r7, 80133ac <_strtoul_l.constprop.0+0xcc>
 80133aa:	4240      	negs	r0, r0
 80133ac:	2a00      	cmp	r2, #0
 80133ae:	d0f9      	beq.n	80133a4 <_strtoul_l.constprop.0+0xc4>
 80133b0:	b106      	cbz	r6, 80133b4 <_strtoul_l.constprop.0+0xd4>
 80133b2:	1e69      	subs	r1, r5, #1
 80133b4:	6011      	str	r1, [r2, #0]
 80133b6:	e7f5      	b.n	80133a4 <_strtoul_l.constprop.0+0xc4>
 80133b8:	080138a5 	.word	0x080138a5

080133bc <_strtoul_r>:
 80133bc:	f7ff bf90 	b.w	80132e0 <_strtoul_l.constprop.0>

080133c0 <__ascii_wctomb>:
 80133c0:	4603      	mov	r3, r0
 80133c2:	4608      	mov	r0, r1
 80133c4:	b141      	cbz	r1, 80133d8 <__ascii_wctomb+0x18>
 80133c6:	2aff      	cmp	r2, #255	@ 0xff
 80133c8:	d904      	bls.n	80133d4 <__ascii_wctomb+0x14>
 80133ca:	228a      	movs	r2, #138	@ 0x8a
 80133cc:	601a      	str	r2, [r3, #0]
 80133ce:	f04f 30ff 	mov.w	r0, #4294967295
 80133d2:	4770      	bx	lr
 80133d4:	700a      	strb	r2, [r1, #0]
 80133d6:	2001      	movs	r0, #1
 80133d8:	4770      	bx	lr
	...

080133dc <fiprintf>:
 80133dc:	b40e      	push	{r1, r2, r3}
 80133de:	b503      	push	{r0, r1, lr}
 80133e0:	4601      	mov	r1, r0
 80133e2:	ab03      	add	r3, sp, #12
 80133e4:	4805      	ldr	r0, [pc, #20]	@ (80133fc <fiprintf+0x20>)
 80133e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80133ea:	6800      	ldr	r0, [r0, #0]
 80133ec:	9301      	str	r3, [sp, #4]
 80133ee:	f7ff f83b 	bl	8012468 <_vfiprintf_r>
 80133f2:	b002      	add	sp, #8
 80133f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80133f8:	b003      	add	sp, #12
 80133fa:	4770      	bx	lr
 80133fc:	20000198 	.word	0x20000198

08013400 <abort>:
 8013400:	b508      	push	{r3, lr}
 8013402:	2006      	movs	r0, #6
 8013404:	f000 f834 	bl	8013470 <raise>
 8013408:	2001      	movs	r0, #1
 801340a:	f7ef faef 	bl	80029ec <_exit>

0801340e <_malloc_usable_size_r>:
 801340e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013412:	1f18      	subs	r0, r3, #4
 8013414:	2b00      	cmp	r3, #0
 8013416:	bfbc      	itt	lt
 8013418:	580b      	ldrlt	r3, [r1, r0]
 801341a:	18c0      	addlt	r0, r0, r3
 801341c:	4770      	bx	lr

0801341e <_raise_r>:
 801341e:	291f      	cmp	r1, #31
 8013420:	b538      	push	{r3, r4, r5, lr}
 8013422:	4605      	mov	r5, r0
 8013424:	460c      	mov	r4, r1
 8013426:	d904      	bls.n	8013432 <_raise_r+0x14>
 8013428:	2316      	movs	r3, #22
 801342a:	6003      	str	r3, [r0, #0]
 801342c:	f04f 30ff 	mov.w	r0, #4294967295
 8013430:	bd38      	pop	{r3, r4, r5, pc}
 8013432:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013434:	b112      	cbz	r2, 801343c <_raise_r+0x1e>
 8013436:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801343a:	b94b      	cbnz	r3, 8013450 <_raise_r+0x32>
 801343c:	4628      	mov	r0, r5
 801343e:	f000 f831 	bl	80134a4 <_getpid_r>
 8013442:	4622      	mov	r2, r4
 8013444:	4601      	mov	r1, r0
 8013446:	4628      	mov	r0, r5
 8013448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801344c:	f000 b818 	b.w	8013480 <_kill_r>
 8013450:	2b01      	cmp	r3, #1
 8013452:	d00a      	beq.n	801346a <_raise_r+0x4c>
 8013454:	1c59      	adds	r1, r3, #1
 8013456:	d103      	bne.n	8013460 <_raise_r+0x42>
 8013458:	2316      	movs	r3, #22
 801345a:	6003      	str	r3, [r0, #0]
 801345c:	2001      	movs	r0, #1
 801345e:	e7e7      	b.n	8013430 <_raise_r+0x12>
 8013460:	2100      	movs	r1, #0
 8013462:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013466:	4620      	mov	r0, r4
 8013468:	4798      	blx	r3
 801346a:	2000      	movs	r0, #0
 801346c:	e7e0      	b.n	8013430 <_raise_r+0x12>
	...

08013470 <raise>:
 8013470:	4b02      	ldr	r3, [pc, #8]	@ (801347c <raise+0xc>)
 8013472:	4601      	mov	r1, r0
 8013474:	6818      	ldr	r0, [r3, #0]
 8013476:	f7ff bfd2 	b.w	801341e <_raise_r>
 801347a:	bf00      	nop
 801347c:	20000198 	.word	0x20000198

08013480 <_kill_r>:
 8013480:	b538      	push	{r3, r4, r5, lr}
 8013482:	4d07      	ldr	r5, [pc, #28]	@ (80134a0 <_kill_r+0x20>)
 8013484:	2300      	movs	r3, #0
 8013486:	4604      	mov	r4, r0
 8013488:	4608      	mov	r0, r1
 801348a:	4611      	mov	r1, r2
 801348c:	602b      	str	r3, [r5, #0]
 801348e:	f7ef fa9d 	bl	80029cc <_kill>
 8013492:	1c43      	adds	r3, r0, #1
 8013494:	d102      	bne.n	801349c <_kill_r+0x1c>
 8013496:	682b      	ldr	r3, [r5, #0]
 8013498:	b103      	cbz	r3, 801349c <_kill_r+0x1c>
 801349a:	6023      	str	r3, [r4, #0]
 801349c:	bd38      	pop	{r3, r4, r5, pc}
 801349e:	bf00      	nop
 80134a0:	20002250 	.word	0x20002250

080134a4 <_getpid_r>:
 80134a4:	f7ef ba8a 	b.w	80029bc <_getpid>

080134a8 <floor>:
 80134a8:	ec51 0b10 	vmov	r0, r1, d0
 80134ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80134b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134b4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80134b8:	2e13      	cmp	r6, #19
 80134ba:	460c      	mov	r4, r1
 80134bc:	4605      	mov	r5, r0
 80134be:	4680      	mov	r8, r0
 80134c0:	dc34      	bgt.n	801352c <floor+0x84>
 80134c2:	2e00      	cmp	r6, #0
 80134c4:	da17      	bge.n	80134f6 <floor+0x4e>
 80134c6:	a332      	add	r3, pc, #200	@ (adr r3, 8013590 <floor+0xe8>)
 80134c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134cc:	f7ec fede 	bl	800028c <__adddf3>
 80134d0:	2200      	movs	r2, #0
 80134d2:	2300      	movs	r3, #0
 80134d4:	f7ed fb20 	bl	8000b18 <__aeabi_dcmpgt>
 80134d8:	b150      	cbz	r0, 80134f0 <floor+0x48>
 80134da:	2c00      	cmp	r4, #0
 80134dc:	da55      	bge.n	801358a <floor+0xe2>
 80134de:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80134e2:	432c      	orrs	r4, r5
 80134e4:	2500      	movs	r5, #0
 80134e6:	42ac      	cmp	r4, r5
 80134e8:	4c2b      	ldr	r4, [pc, #172]	@ (8013598 <floor+0xf0>)
 80134ea:	bf08      	it	eq
 80134ec:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80134f0:	4621      	mov	r1, r4
 80134f2:	4628      	mov	r0, r5
 80134f4:	e023      	b.n	801353e <floor+0x96>
 80134f6:	4f29      	ldr	r7, [pc, #164]	@ (801359c <floor+0xf4>)
 80134f8:	4137      	asrs	r7, r6
 80134fa:	ea01 0307 	and.w	r3, r1, r7
 80134fe:	4303      	orrs	r3, r0
 8013500:	d01d      	beq.n	801353e <floor+0x96>
 8013502:	a323      	add	r3, pc, #140	@ (adr r3, 8013590 <floor+0xe8>)
 8013504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013508:	f7ec fec0 	bl	800028c <__adddf3>
 801350c:	2200      	movs	r2, #0
 801350e:	2300      	movs	r3, #0
 8013510:	f7ed fb02 	bl	8000b18 <__aeabi_dcmpgt>
 8013514:	2800      	cmp	r0, #0
 8013516:	d0eb      	beq.n	80134f0 <floor+0x48>
 8013518:	2c00      	cmp	r4, #0
 801351a:	bfbe      	ittt	lt
 801351c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013520:	4133      	asrlt	r3, r6
 8013522:	18e4      	addlt	r4, r4, r3
 8013524:	ea24 0407 	bic.w	r4, r4, r7
 8013528:	2500      	movs	r5, #0
 801352a:	e7e1      	b.n	80134f0 <floor+0x48>
 801352c:	2e33      	cmp	r6, #51	@ 0x33
 801352e:	dd0a      	ble.n	8013546 <floor+0x9e>
 8013530:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8013534:	d103      	bne.n	801353e <floor+0x96>
 8013536:	4602      	mov	r2, r0
 8013538:	460b      	mov	r3, r1
 801353a:	f7ec fea7 	bl	800028c <__adddf3>
 801353e:	ec41 0b10 	vmov	d0, r0, r1
 8013542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013546:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801354a:	f04f 37ff 	mov.w	r7, #4294967295
 801354e:	40df      	lsrs	r7, r3
 8013550:	4207      	tst	r7, r0
 8013552:	d0f4      	beq.n	801353e <floor+0x96>
 8013554:	a30e      	add	r3, pc, #56	@ (adr r3, 8013590 <floor+0xe8>)
 8013556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801355a:	f7ec fe97 	bl	800028c <__adddf3>
 801355e:	2200      	movs	r2, #0
 8013560:	2300      	movs	r3, #0
 8013562:	f7ed fad9 	bl	8000b18 <__aeabi_dcmpgt>
 8013566:	2800      	cmp	r0, #0
 8013568:	d0c2      	beq.n	80134f0 <floor+0x48>
 801356a:	2c00      	cmp	r4, #0
 801356c:	da0a      	bge.n	8013584 <floor+0xdc>
 801356e:	2e14      	cmp	r6, #20
 8013570:	d101      	bne.n	8013576 <floor+0xce>
 8013572:	3401      	adds	r4, #1
 8013574:	e006      	b.n	8013584 <floor+0xdc>
 8013576:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801357a:	2301      	movs	r3, #1
 801357c:	40b3      	lsls	r3, r6
 801357e:	441d      	add	r5, r3
 8013580:	4545      	cmp	r5, r8
 8013582:	d3f6      	bcc.n	8013572 <floor+0xca>
 8013584:	ea25 0507 	bic.w	r5, r5, r7
 8013588:	e7b2      	b.n	80134f0 <floor+0x48>
 801358a:	2500      	movs	r5, #0
 801358c:	462c      	mov	r4, r5
 801358e:	e7af      	b.n	80134f0 <floor+0x48>
 8013590:	8800759c 	.word	0x8800759c
 8013594:	7e37e43c 	.word	0x7e37e43c
 8013598:	bff00000 	.word	0xbff00000
 801359c:	000fffff 	.word	0x000fffff

080135a0 <_init>:
 80135a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135a2:	bf00      	nop
 80135a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135a6:	bc08      	pop	{r3}
 80135a8:	469e      	mov	lr, r3
 80135aa:	4770      	bx	lr

080135ac <_fini>:
 80135ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135ae:	bf00      	nop
 80135b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135b2:	bc08      	pop	{r3}
 80135b4:	469e      	mov	lr, r3
 80135b6:	4770      	bx	lr
