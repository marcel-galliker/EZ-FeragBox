
EZ-FeragBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cac8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  0800cc58  0800cc58  0000dc58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3c0  0800d3c0  0000f1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3c0  0800d3c0  0000e3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3c8  0800d3c8  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3c8  0800d3c8  0000e3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3cc  0800d3cc  0000e3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d3d0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ff8  200001e8  0800d5b8  0000f1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011e0  0800d5b8  000101e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152eb  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ee  00000000  00000000  00024503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  000276f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e98  00000000  00000000  000289a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e087  00000000  00000000  00029840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189b1  00000000  00000000  000478c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9f2d  00000000  00000000  00060278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a1a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065d0  00000000  00000000  0010a1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  001107b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cc40 	.word	0x0800cc40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800cc40 	.word	0x0800cc40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <AD55936_init>:
#define _ADAC_ADC_READ        0b01000000
#define _ADAC_DAC_READ        0b01010000
#define _ADAC_GPIO_READ       0b01100000
#define _ADAC_REG_READ        0b01110000

HAL_StatusTypeDef AD55936_init(I2C_HandleTypeDef *hi2c, uint16_t DevAddress) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	uint8_t data[3];

	data[0] = _ADAC_GP_CONTROL;
 8000d00:	2303      	movs	r3, #3
 8000d02:	733b      	strb	r3, [r7, #12]
	data[1] = 0x01;
 8000d04:	2301      	movs	r3, #1
 8000d06:	737b      	strb	r3, [r7, #13]
	data[2] = 0x00;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, 3, HAL_MAX_DELAY);
 8000d0c:	f107 020c 	add.w	r2, r7, #12
 8000d10:	8879      	ldrh	r1, [r7, #2]
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2303      	movs	r3, #3
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f002 fc3a 	bl	8003594 <HAL_I2C_Master_Transmit>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <AD55936_init+0x3a>
		return status;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	e029      	b.n	8000d82 <AD55936_init+0x8e>

	data[0] = _ADAC_POWER_REF_CTRL;
 8000d2e:	230b      	movs	r3, #11
 8000d30:	733b      	strb	r3, [r7, #12]
	data[1] = 0x02;
 8000d32:	2302      	movs	r3, #2
 8000d34:	737b      	strb	r3, [r7, #13]
	data[2] = 0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, 3, HAL_MAX_DELAY);
 8000d3a:	f107 020c 	add.w	r2, r7, #12
 8000d3e:	8879      	ldrh	r1, [r7, #2]
 8000d40:	f04f 33ff 	mov.w	r3, #4294967295
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2303      	movs	r3, #3
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f002 fc23 	bl	8003594 <HAL_I2C_Master_Transmit>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <AD55936_init+0x68>
		return status;
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	e012      	b.n	8000d82 <AD55936_init+0x8e>

	data[0] = _ADAC_ADC_CONFIG;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	733b      	strb	r3, [r7, #12]
	data[1] = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	737b      	strb	r3, [r7, #13]
	data[2] = 0xFF;
 8000d64:	23ff      	movs	r3, #255	@ 0xff
 8000d66:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, 3, HAL_MAX_DELAY);
 8000d68:	f107 020c 	add.w	r2, r7, #12
 8000d6c:	8879      	ldrh	r1, [r7, #2]
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2303      	movs	r3, #3
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f002 fc0c 	bl	8003594 <HAL_I2C_Master_Transmit>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	73fb      	strb	r3, [r7, #15]

	return status;
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <AD5593R_ReadADC>:

HAL_StatusTypeDef AD5593R_ReadADC(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t channel, uint16_t *adcValue) {
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b08a      	sub	sp, #40	@ 0x28
 8000d8e:	af02      	add	r7, sp, #8
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	817b      	strh	r3, [r7, #10]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	727b      	strb	r3, [r7, #9]
    uint16_t channelBit = 1 << channel;
 8000d9c:	7a7b      	ldrb	r3, [r7, #9]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	83fb      	strh	r3, [r7, #30]

	if (channel > 8) {
 8000da6:	7a7b      	ldrb	r3, [r7, #9]
 8000da8:	2b08      	cmp	r3, #8
 8000daa:	d901      	bls.n	8000db0 <AD5593R_ReadADC+0x26>
        // Invalid channel, return error (0-7 = ADC Inputs, 8 = Internal Temperature Sensor)
        return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e04a      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    HAL_StatusTypeDef status;
    uint8_t command[3];
    uint8_t data[2];

    // Configure the ADC channel
    command[0] = _ADAC_ADC_SEQUENCE;
 8000db0:	2302      	movs	r3, #2
 8000db2:	763b      	strb	r3, [r7, #24]

    // Select Channel
    command[1] = (uint8_t)(channelBit >> 8);
 8000db4:	8bfb      	ldrh	r3, [r7, #30]
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	767b      	strb	r3, [r7, #25]
    command[2] = (uint8_t)(channelBit & 0xFF);
 8000dbe:	8bfb      	ldrh	r3, [r7, #30]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	76bb      	strb	r3, [r7, #26]

    status = HAL_I2C_Master_Transmit(hi2c, DevAddress, command, sizeof(command), HAL_MAX_DELAY);
 8000dc4:	f107 0218 	add.w	r2, r7, #24
 8000dc8:	8979      	ldrh	r1, [r7, #10]
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	68f8      	ldr	r0, [r7, #12]
 8000dd4:	f002 fbde 	bl	8003594 <HAL_I2C_Master_Transmit>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	777b      	strb	r3, [r7, #29]

    if (status != HAL_OK) {
 8000ddc:	7f7b      	ldrb	r3, [r7, #29]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <AD5593R_ReadADC+0x5c>
        // Handle error here
        return status;
 8000de2:	7f7b      	ldrb	r3, [r7, #29]
 8000de4:	e02f      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    }

	// Initiate an ADC read
	command[0] = _ADAC_ADC_READ;
 8000de6:	2340      	movs	r3, #64	@ 0x40
 8000de8:	763b      	strb	r3, [r7, #24]

    // Begin transmission to set the ADC read pointer
    status = HAL_I2C_Master_Transmit(hi2c, DevAddress, command, 1, HAL_MAX_DELAY);
 8000dea:	f107 0218 	add.w	r2, r7, #24
 8000dee:	8979      	ldrh	r1, [r7, #10]
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2301      	movs	r3, #1
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f002 fbcb 	bl	8003594 <HAL_I2C_Master_Transmit>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	777b      	strb	r3, [r7, #29]

    if (status != HAL_OK) {
 8000e02:	7f7b      	ldrb	r3, [r7, #29]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <AD5593R_ReadADC+0x82>
        // Handle error here
        return status;
 8000e08:	7f7b      	ldrb	r3, [r7, #29]
 8000e0a:	e01c      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    }

    // Read the ADC value (2 bytes)
    status = HAL_I2C_Master_Receive(hi2c, DevAddress, data, 2, HAL_MAX_DELAY);
 8000e0c:	f107 0214 	add.w	r2, r7, #20
 8000e10:	8979      	ldrh	r1, [r7, #10]
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2302      	movs	r3, #2
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f002 fcae 	bl	800377c <HAL_I2C_Master_Receive>
 8000e20:	4603      	mov	r3, r0
 8000e22:	777b      	strb	r3, [r7, #29]

    if (status != HAL_OK) {
 8000e24:	7f7b      	ldrb	r3, [r7, #29]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <AD5593R_ReadADC+0xa4>
        // Handle error here
        return status;
 8000e2a:	7f7b      	ldrb	r3, [r7, #29]
 8000e2c:	e00b      	b.n	8000e46 <AD5593R_ReadADC+0xbc>
    }

    // Convert the two received bytes into a single 16-bit value
    *adcValue = (uint16_t)((data[0] & 0x0F) << 8) + data[1];
 8000e2e:	7d3b      	ldrb	r3, [r7, #20]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	7d7a      	ldrb	r2, [r7, #21]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	801a      	strh	r2, [r3, #0]

    return status;
 8000e44:	7f7b      	ldrb	r3, [r7, #29]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <box_init>:
static void _check_printer_ready(void);
static void _send_print_done(void);

//--- box_init -------------------------------
void box_init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	memset(&_Status, 0, sizeof(_Status));
 8000e54:	223c      	movs	r2, #60	@ 0x3c
 8000e56:	2100      	movs	r1, #0
 8000e58:	480e      	ldr	r0, [pc, #56]	@ (8000e94 <box_init+0x44>)
 8000e5a:	f008 f85b 	bl	8008f14 <memset>
	_FeragMsgIn      = 0;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <box_init+0x48>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
	_FeragMsgOut     = 0;
 8000e64:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <box_init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
	_TrackInIdx  	 = 0;
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <box_init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
	_TrackOutIdx 	 = 0;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <box_init+0x54>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
	_PrintDoneDelay  = 0;
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <box_init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
	_PrinterReadyIn  = -1;
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <box_init+0x5c>)
 8000e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e82:	601a      	str	r2, [r3, #0]
	box_start();
 8000e84:	f000 f82a 	bl	8000edc <box_start>
	printf("LOG: box_init\n");
 8000e88:	4809      	ldr	r0, [pc, #36]	@ (8000eb0 <box_init+0x60>)
 8000e8a:	f007 ff17 	bl	8008cbc <puts>
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000208 	.word	0x20000208
 8000e98:	20000250 	.word	0x20000250
 8000e9c:	20000254 	.word	0x20000254
 8000ea0:	20000558 	.word	0x20000558
 8000ea4:	2000055c 	.word	0x2000055c
 8000ea8:	2000056c 	.word	0x2000056c
 8000eac:	20000004 	.word	0x20000004
 8000eb0:	0800cc58 	.word	0x0800cc58

08000eb4 <box_set_pgDelay>:

//--- box_set_pgDelay ------------------------------------
void box_set_pgDelay(int delay)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	_PrintGoDelay = delay;
 8000ebc:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <box_set_pgDelay+0x20>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
	printf("set pgDelay=%d\n", delay);
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	4804      	ldr	r0, [pc, #16]	@ (8000ed8 <box_set_pgDelay+0x24>)
 8000ec6:	f007 fe91 	bl	8008bec <iprintf>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	0800cc68 	.word	0x0800cc68

08000edc <box_start>:

//--- box_start -------------------------
void box_start(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	printf("start\n");
 8000ee0:	481b      	ldr	r0, [pc, #108]	@ (8000f50 <box_start+0x74>)
 8000ee2:	f007 feeb 	bl	8008cbc <puts>
	_FeragMsgIn   = 0;
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <box_start+0x78>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
	_FeragMsgOut  = 0;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <box_start+0x7c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
	_TrackInIdx  	  = 0;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <box_start+0x80>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
	_TrackOutIdx 	  = 0;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <box_start+0x84>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
	_Status.dtCnt = 0;
 8000efe:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <box_start+0x88>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	625a      	str	r2, [r3, #36]	@ 0x24
	_Status.pgCnt = 0;
 8000f04:	4b17      	ldr	r3, [pc, #92]	@ (8000f64 <box_start+0x88>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	635a      	str	r2, [r3, #52]	@ 0x34
	_Status.pdCnt = 0;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	@ (8000f64 <box_start+0x88>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	639a      	str	r2, [r3, #56]	@ 0x38
	_EncoderPos   = 0;
 8000f10:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <box_start+0x8c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
	_TrackingError = FALSE;
 8000f16:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <box_start+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
	_PrintDoneDelay = 0;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <box_start+0x94>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
	_PrinterReadyIn  = -1;
 8000f22:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <box_start+0x98>)
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	601a      	str	r2, [r3, #0]
	_PaceId		  = -1;
 8000f2a:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <box_start+0x9c>)
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	601a      	str	r2, [r3, #0]
	box_send_status();
 8000f32:	f000 fb97 	bl	8001664 <box_send_status>
	_Running = TRUE;
 8000f36:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <box_start+0xa0>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f42:	480f      	ldr	r0, [pc, #60]	@ (8000f80 <box_start+0xa4>)
 8000f44:	f002 fa7e 	bl	8003444 <HAL_GPIO_WritePin>
	enc_start();
 8000f48:	f000 fdae 	bl	8001aa8 <enc_start>
		enc_set_speed(100);
		//--- PaceId 10 ----
		box_handle_ferag_char(0x11);
		box_handle_ferag_char(0x8a);
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	0800cc78 	.word	0x0800cc78
 8000f54:	20000250 	.word	0x20000250
 8000f58:	20000254 	.word	0x20000254
 8000f5c:	20000558 	.word	0x20000558
 8000f60:	2000055c 	.word	0x2000055c
 8000f64:	20000208 	.word	0x20000208
 8000f68:	20000568 	.word	0x20000568
 8000f6c:	20000570 	.word	0x20000570
 8000f70:	2000056c 	.word	0x2000056c
 8000f74:	20000004 	.word	0x20000004
 8000f78:	20000560 	.word	0x20000560
 8000f7c:	20000204 	.word	0x20000204
 8000f80:	48001000 	.word	0x48001000

08000f84 <box_stop>:

//--- box_stop ----------------------------
void box_stop(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	_Running = FALSE;
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <box_stop+0x20>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
	enc_stop();
 8000f8e:	f000 fda3 	bl	8001ad8 <enc_stop>
	HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f98:	4803      	ldr	r0, [pc, #12]	@ (8000fa8 <box_stop+0x24>)
 8000f9a:	f002 fa53 	bl	8003444 <HAL_GPIO_WritePin>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000204 	.word	0x20000204
 8000fa8:	48001000 	.word	0x48001000

08000fac <box_idle>:

//--- box_idle ----------------------------------------
void box_idle(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	_handle_feragMsg();
 8000fb0:	f000 f934 	bl	800121c <_handle_feragMsg>
	_handle_encoder();
 8000fb4:	f000 f9b2 	bl	800131c <_handle_encoder>
//	_check_printer_ready();
//	if (!SIMULATION) _check_print_done();
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <box_tick_10ms>:

//--- box_tick_10ms ------------------
void box_tick_10ms(int ticks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	_Ticks = ticks;
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <box_tick_10ms+0x34>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]

	if (_Ticks > _TicksSysCheck)
 8000fca:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <box_tick_10ms+0x34>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <box_tick_10ms+0x38>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	dd07      	ble.n	8000fe6 <box_tick_10ms+0x2a>
	{
		_TicksSysCheck = _Ticks+500;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <box_tick_10ms+0x34>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000fde:	4a05      	ldr	r2, [pc, #20]	@ (8000ff4 <box_tick_10ms+0x38>)
 8000fe0:	6013      	str	r3, [r2, #0]
		_check_system();
 8000fe2:	f000 f809 	bl	8000ff8 <_check_system>
	}
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000244 	.word	0x20000244
 8000ff4:	20000248 	.word	0x20000248

08000ff8 <_check_system>:

//--- _check_system -----------------
static void _check_system(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
	_Status.voltages.voltage24V 			= (INT8)(10*adc_get_value(0, 30.0));
 8000ffe:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001002:	2000      	movs	r0, #0
 8001004:	f001 f97c 	bl	8002300 <adc_get_value>
 8001008:	eef0 7a40 	vmov.f32	s15, s0
 800100c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001014:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001018:	edc7 7a01 	vstr	s15, [r7, #4]
 800101c:	793b      	ldrb	r3, [r7, #4]
 800101e:	b25b      	sxtb	r3, r3
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b62      	ldr	r3, [pc, #392]	@ (80011ac <_check_system+0x1b4>)
 8001024:	725a      	strb	r2, [r3, #9]
	_Status.voltages.voltage12V 			= (INT8)(10*adc_get_value(1, 15.0));
 8001026:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800102a:	2001      	movs	r0, #1
 800102c:	f001 f968 	bl	8002300 <adc_get_value>
 8001030:	eef0 7a40 	vmov.f32	s15, s0
 8001034:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001038:	ee67 7a87 	vmul.f32	s15, s15, s14
 800103c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001040:	edc7 7a01 	vstr	s15, [r7, #4]
 8001044:	793b      	ldrb	r3, [r7, #4]
 8001046:	b25b      	sxtb	r3, r3
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b58      	ldr	r3, [pc, #352]	@ (80011ac <_check_system+0x1b4>)
 800104c:	719a      	strb	r2, [r3, #6]
	_Status.voltages.voltage12VNuc 			= (INT8)(10*adc_get_value(2, 15.0));
 800104e:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001052:	2002      	movs	r0, #2
 8001054:	f001 f954 	bl	8002300 <adc_get_value>
 8001058:	eef0 7a40 	vmov.f32	s15, s0
 800105c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001068:	edc7 7a01 	vstr	s15, [r7, #4]
 800106c:	793b      	ldrb	r3, [r7, #4]
 800106e:	b25b      	sxtb	r3, r3
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b4e      	ldr	r3, [pc, #312]	@ (80011ac <_check_system+0x1b4>)
 8001074:	71da      	strb	r2, [r3, #7]
	_Status.voltages.voltage12VDisplay 		= (INT8)(10*adc_get_value(3, 15.0));
 8001076:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800107a:	2003      	movs	r0, #3
 800107c:	f001 f940 	bl	8002300 <adc_get_value>
 8001080:	eef0 7a40 	vmov.f32	s15, s0
 8001084:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001090:	edc7 7a01 	vstr	s15, [r7, #4]
 8001094:	793b      	ldrb	r3, [r7, #4]
 8001096:	b25b      	sxtb	r3, r3
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b44      	ldr	r3, [pc, #272]	@ (80011ac <_check_system+0x1b4>)
 800109c:	721a      	strb	r2, [r3, #8]
	_Status.voltages.voltage5V 				= (INT8)(10*adc_get_value(4, 6.25));
 800109e:	eeb1 0a09 	vmov.f32	s0, #25	@ 0x40c80000  6.250
 80010a2:	2004      	movs	r0, #4
 80010a4:	f001 f92c 	bl	8002300 <adc_get_value>
 80010a8:	eef0 7a40 	vmov.f32	s15, s0
 80010ac:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80010b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80010bc:	793b      	ldrb	r3, [r7, #4]
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b3a      	ldr	r3, [pc, #232]	@ (80011ac <_check_system+0x1b4>)
 80010c4:	715a      	strb	r2, [r3, #5]
	_Status.voltages.voltage3V3 			= (INT8)(10*adc_get_value(5, 4.125));
 80010c6:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 80011b0 <_check_system+0x1b8>
 80010ca:	2005      	movs	r0, #5
 80010cc:	f001 f918 	bl	8002300 <adc_get_value>
 80010d0:	eef0 7a40 	vmov.f32	s15, s0
 80010d4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80010d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80010e4:	793b      	ldrb	r3, [r7, #4]
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b30      	ldr	r3, [pc, #192]	@ (80011ac <_check_system+0x1b4>)
 80010ec:	711a      	strb	r2, [r3, #4]
	_Status.voltages.voltagePcbRevision 	= (INT8)(10*adc_get_value(6, 4.125));
 80010ee:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 80011b0 <_check_system+0x1b8>
 80010f2:	2006      	movs	r0, #6
 80010f4:	f001 f904 	bl	8002300 <adc_get_value>
 80010f8:	eef0 7a40 	vmov.f32	s15, s0
 80010fc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001100:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001104:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001108:	edc7 7a01 	vstr	s15, [r7, #4]
 800110c:	793b      	ldrb	r3, [r7, #4]
 800110e:	b25b      	sxtb	r3, r3
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b26      	ldr	r3, [pc, #152]	@ (80011ac <_check_system+0x1b4>)
 8001114:	729a      	strb	r2, [r3, #10]
	_Status.pcbRevision 					= adc_get_revision(_Status.voltages.voltagePcbRevision);
 8001116:	4b25      	ldr	r3, [pc, #148]	@ (80011ac <_check_system+0x1b4>)
 8001118:	7a9b      	ldrb	r3, [r3, #10]
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001122:	eeb0 0a67 	vmov.f32	s0, s15
 8001126:	f001 f93b 	bl	80023a0 <adc_get_revision>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ac <_check_system+0x1b4>)
 8001130:	72da      	strb	r2, [r3, #11]
	_Status.boardTemperature 				= (INT8)(10*adc_get_temp());
 8001132:	f001 f90b 	bl	800234c <adc_get_temp>
 8001136:	eef0 7a40 	vmov.f32	s15, s0
 800113a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800113e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001146:	edc7 7a01 	vstr	s15, [r7, #4]
 800114a:	793b      	ldrb	r3, [r7, #4]
 800114c:	b25b      	sxtb	r3, r3
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <_check_system+0x1b4>)
 8001152:	70da      	strb	r2, [r3, #3]

	// Update DIP Switch inputs
	_Status.dipSwitch						= gpio_get_dipswitches();
 8001154:	f001 f96c 	bl	8002430 <gpio_get_dipswitches>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <_check_system+0x1b4>)
 800115e:	709a      	strb	r2, [r3, #2]

	// Update encoder generator parameters
	enc_get_status(&_Status.enc);
 8001160:	4814      	ldr	r0, [pc, #80]	@ (80011b4 <_check_system+0x1bc>)
 8001162:	f000 fb8d 	bl	8001880 <enc_get_status>

	// Update Power Status
	_Status.flags=0;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <_check_system+0x1b4>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin)) _Status.flags |= FLAG_nucPower;
 800116c:	2140      	movs	r1, #64	@ 0x40
 800116e:	4812      	ldr	r0, [pc, #72]	@ (80011b8 <_check_system+0x1c0>)
 8001170:	f002 f950 	bl	8003414 <HAL_GPIO_ReadPin>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <_check_system+0x190>
 800117a:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <_check_system+0x1b4>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <_check_system+0x1b4>)
 8001186:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin)) _Status.flags |= FLAG_displayPower;
 8001188:	2180      	movs	r1, #128	@ 0x80
 800118a:	480b      	ldr	r0, [pc, #44]	@ (80011b8 <_check_system+0x1c0>)
 800118c:	f002 f942 	bl	8003414 <HAL_GPIO_ReadPin>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d006      	beq.n	80011a4 <_check_system+0x1ac>
 8001196:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <_check_system+0x1b4>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	f043 0302 	orr.w	r3, r3, #2
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b02      	ldr	r3, [pc, #8]	@ (80011ac <_check_system+0x1b4>)
 80011a2:	701a      	strb	r2, [r3, #0]
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000208 	.word	0x20000208
 80011b0:	40840000 	.word	0x40840000
 80011b4:	20000214 	.word	0x20000214
 80011b8:	48001400 	.word	0x48001400

080011bc <box_handle_ferag_char>:

//--- box_handle_ferag_char -----------------------------
void box_handle_ferag_char(char data)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	if (data & 0x80)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	da18      	bge.n	8001200 <box_handle_ferag_char+0x44>
	{
		_FeragMsg.data[1]=data;
 80011ce:	4a10      	ldr	r2, [pc, #64]	@ (8001210 <box_handle_ferag_char+0x54>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	7053      	strb	r3, [r2, #1]
		_Status.paceId = _FeragMsg.paceId;
 80011d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <box_handle_ferag_char+0x54>)
 80011d6:	785b      	ldrb	r3, [r3, #1]
 80011d8:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	461a      	mov	r2, r3
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <box_handle_ferag_char+0x58>)
 80011e2:	621a      	str	r2, [r3, #32]
	//	printf("FERAG in 0x%02x 0x%02x, type=%d, info=%d, paceId=0x%02x\n", _FeragMsg.data[0], _FeragMsg.data[1], _FeragMsg.type, _FeragMsg.info, _FeragMsg.paceId);

		_Status.feragMsgInCnt++;
 80011e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <box_handle_ferag_char+0x58>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <box_handle_ferag_char+0x58>)
 80011ec:	6193      	str	r3, [r2, #24]
		_FeragMsgIn++;
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <box_handle_ferag_char+0x5c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	3301      	adds	r3, #1
 80011f4:	4a08      	ldr	r2, [pc, #32]	@ (8001218 <box_handle_ferag_char+0x5c>)
 80011f6:	6013      	str	r3, [r2, #0]
		ferag_send_char(0x80);
 80011f8:	2080      	movs	r0, #128	@ 0x80
 80011fa:	f001 f861 	bl	80022c0 <ferag_send_char>
	}
	else
	{
		_FeragMsg.data[0]=data;
	}
}
 80011fe:	e002      	b.n	8001206 <box_handle_ferag_char+0x4a>
		_FeragMsg.data[0]=data;
 8001200:	4a03      	ldr	r2, [pc, #12]	@ (8001210 <box_handle_ferag_char+0x54>)
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	7013      	strb	r3, [r2, #0]
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000024c 	.word	0x2000024c
 8001214:	20000208 	.word	0x20000208
 8001218:	20000250 	.word	0x20000250

0800121c <_handle_feragMsg>:

//--- _handle_feragMsg ---------------------
static void _handle_feragMsg(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
	if (_FeragMsgOut!=_FeragMsgIn)
 8001222:	4b33      	ldr	r3, [pc, #204]	@ (80012f0 <_handle_feragMsg+0xd4>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4b33      	ldr	r3, [pc, #204]	@ (80012f4 <_handle_feragMsg+0xd8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d05c      	beq.n	80012e8 <_handle_feragMsg+0xcc>
	{
		int idx;
		switch (_FeragMsg.type)
 800122e:	4b32      	ldr	r3, [pc, #200]	@ (80012f8 <_handle_feragMsg+0xdc>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b01      	cmp	r3, #1
 800123a:	d002      	beq.n	8001242 <_handle_feragMsg+0x26>
 800123c:	2b02      	cmp	r3, #2
 800123e:	d039      	beq.n	80012b4 <_handle_feragMsg+0x98>
 8001240:	e03e      	b.n	80012c0 <_handle_feragMsg+0xa4>
		{
		case 1:	idx=(_TrackInIdx+1)% TRACKING_CNT;
 8001242:	4b2e      	ldr	r3, [pc, #184]	@ (80012fc <_handle_feragMsg+0xe0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	425a      	negs	r2, r3
 800124a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800124e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001252:	bf58      	it	pl
 8001254:	4253      	negpl	r3, r2
 8001256:	607b      	str	r3, [r7, #4]
				if (idx==_TrackOutIdx)
 8001258:	4b29      	ldr	r3, [pc, #164]	@ (8001300 <_handle_feragMsg+0xe4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	429a      	cmp	r2, r3
 8001260:	d10a      	bne.n	8001278 <_handle_feragMsg+0x5c>
				{
					if (!_TrackingError)
 8001262:	4b28      	ldr	r3, [pc, #160]	@ (8001304 <_handle_feragMsg+0xe8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d102      	bne.n	8001270 <_handle_feragMsg+0x54>
					 printf("ERROR: Tracking overflow\n");
 800126a:	4827      	ldr	r0, [pc, #156]	@ (8001308 <_handle_feragMsg+0xec>)
 800126c:	f007 fd26 	bl	8008cbc <puts>
					_TrackingError= TRUE;
 8001270:	4b24      	ldr	r3, [pc, #144]	@ (8001304 <_handle_feragMsg+0xe8>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]
					_TrackInIdx=idx;
				//	if (_FeragMsg.info&1) printf("ProductDetect %d: PaceId=%d, \n", _Status.dtCnt, _FeragMsg.paceId);
				//	else printf("ProductDetect %d: PaceId=%d (EMPTY)\n", _Status.dtCnt, _FeragMsg.paceId);
					_Status.dtCnt++;
				}
				break;
 8001276:	e02d      	b.n	80012d4 <_handle_feragMsg+0xb8>
					memcpy(&_Tracking[idx].prod, &_FeragMsg,  sizeof(_Tracking[idx].prod));
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4a22      	ldr	r2, [pc, #136]	@ (800130c <_handle_feragMsg+0xf0>)
 8001284:	4413      	add	r3, r2
 8001286:	3304      	adds	r3, #4
 8001288:	4a1b      	ldr	r2, [pc, #108]	@ (80012f8 <_handle_feragMsg+0xdc>)
 800128a:	8812      	ldrh	r2, [r2, #0]
 800128c:	801a      	strh	r2, [r3, #0]
					_Tracking[idx].delay = _PrintGoDelay;
 800128e:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <_handle_feragMsg+0xf4>)
 8001290:	6819      	ldr	r1, [r3, #0]
 8001292:	481e      	ldr	r0, [pc, #120]	@ (800130c <_handle_feragMsg+0xf0>)
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4403      	add	r3, r0
 80012a0:	6019      	str	r1, [r3, #0]
					_TrackInIdx=idx;
 80012a2:	4a16      	ldr	r2, [pc, #88]	@ (80012fc <_handle_feragMsg+0xe0>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6013      	str	r3, [r2, #0]
					_Status.dtCnt++;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <_handle_feragMsg+0xf8>)
 80012aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a19      	ldr	r2, [pc, #100]	@ (8001314 <_handle_feragMsg+0xf8>)
 80012b0:	6253      	str	r3, [r2, #36]	@ 0x24
				break;
 80012b2:	e00f      	b.n	80012d4 <_handle_feragMsg+0xb8>

		case 2:		// printf("Alive\n");
					_Status.aliveCnt++; break;
 80012b4:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <_handle_feragMsg+0xf8>)
 80012b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b8:	3301      	adds	r3, #1
 80012ba:	4a16      	ldr	r2, [pc, #88]	@ (8001314 <_handle_feragMsg+0xf8>)
 80012bc:	6293      	str	r3, [r2, #40]	@ 0x28
 80012be:	e009      	b.n	80012d4 <_handle_feragMsg+0xb8>
		default: 	printf("Unknown Message Type=%d\n", _FeragMsg.type);
 80012c0:	4b0d      	ldr	r3, [pc, #52]	@ (80012f8 <_handle_feragMsg+0xdc>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4619      	mov	r1, r3
 80012cc:	4812      	ldr	r0, [pc, #72]	@ (8001318 <_handle_feragMsg+0xfc>)
 80012ce:	f007 fc8d 	bl	8008bec <iprintf>
					break;
 80012d2:	bf00      	nop
		}
		_Status.feragMsgOutCnt++;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <_handle_feragMsg+0xf8>)
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	3301      	adds	r3, #1
 80012da:	4a0e      	ldr	r2, [pc, #56]	@ (8001314 <_handle_feragMsg+0xf8>)
 80012dc:	61d3      	str	r3, [r2, #28]
		_FeragMsgOut++;
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <_handle_feragMsg+0xd4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	3301      	adds	r3, #1
 80012e4:	4a02      	ldr	r2, [pc, #8]	@ (80012f0 <_handle_feragMsg+0xd4>)
 80012e6:	6013      	str	r3, [r2, #0]
	}
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000254 	.word	0x20000254
 80012f4:	20000250 	.word	0x20000250
 80012f8:	2000024c 	.word	0x2000024c
 80012fc:	20000558 	.word	0x20000558
 8001300:	2000055c 	.word	0x2000055c
 8001304:	20000570 	.word	0x20000570
 8001308:	0800cc80 	.word	0x0800cc80
 800130c:	20000258 	.word	0x20000258
 8001310:	20000000 	.word	0x20000000
 8001314:	20000208 	.word	0x20000208
 8001318:	0800cc9c 	.word	0x0800cc9c

0800131c <_handle_encoder>:

//--- _handle_encoder -------------------------------------
static void _handle_encoder(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
	if (_EncoderPos!=EZ_EncoderOutPos)
 8001322:	4b40      	ldr	r3, [pc, #256]	@ (8001424 <_handle_encoder+0x108>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b40      	ldr	r3, [pc, #256]	@ (8001428 <_handle_encoder+0x10c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d075      	beq.n	800141a <_handle_encoder+0xfe>
	{
		_EncoderPos++;
 800132e:	4b3d      	ldr	r3, [pc, #244]	@ (8001424 <_handle_encoder+0x108>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	4a3b      	ldr	r2, [pc, #236]	@ (8001424 <_handle_encoder+0x108>)
 8001336:	6013      	str	r3, [r2, #0]
	//	if (_EncoderPos%1000==0)
	//		printf("Enc=%d: DELAY=%d, %d, %d ,%d, %d, %d, %d, %d\n", _EncoderPos, _Tracking[0].delay, _Tracking[1].delay, _Tracking[2].delay, _Tracking[3].delay, _Tracking[4].delay, _Tracking[5].delay, _Tracking[6].delay, _Tracking[7].delay);
		for (int i=0; i<TRACKING_CNT; i++)
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	e048      	b.n	80013d0 <_handle_encoder+0xb4>
		{
			if (_Tracking[i].delay>0 && (--_Tracking[i].delay)==0)
 800133e:	493b      	ldr	r1, [pc, #236]	@ (800142c <_handle_encoder+0x110>)
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	440b      	add	r3, r1
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	dd3b      	ble.n	80013ca <_handle_encoder+0xae>
 8001352:	4936      	ldr	r1, [pc, #216]	@ (800142c <_handle_encoder+0x110>)
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	440b      	add	r3, r1
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	1e59      	subs	r1, r3, #1
 8001364:	4831      	ldr	r0, [pc, #196]	@ (800142c <_handle_encoder+0x110>)
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4403      	add	r3, r0
 8001372:	6019      	str	r1, [r3, #0]
 8001374:	492d      	ldr	r1, [pc, #180]	@ (800142c <_handle_encoder+0x110>)
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	440b      	add	r3, r1
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d120      	bne.n	80013ca <_handle_encoder+0xae>
			{
				_TrackOutIdx=i;
 8001388:	4a29      	ldr	r2, [pc, #164]	@ (8001430 <_handle_encoder+0x114>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
				printf("PrintGo PaceId=%d, ok=%d\n", _Tracking[i].prod.paceId, _Tracking[i].prod.info);
 800138e:	4927      	ldr	r1, [pc, #156]	@ (800142c <_handle_encoder+0x110>)
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	440b      	add	r3, r1
 800139c:	795b      	ldrb	r3, [r3, #5]
 800139e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	4921      	ldr	r1, [pc, #132]	@ (800142c <_handle_encoder+0x110>)
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4413      	add	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	440b      	add	r3, r1
 80013b4:	791b      	ldrb	r3, [r3, #4]
 80013b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	4601      	mov	r1, r0
 80013c0:	481c      	ldr	r0, [pc, #112]	@ (8001434 <_handle_encoder+0x118>)
 80013c2:	f007 fc13 	bl	8008bec <iprintf>
				box_printGo();
 80013c6:	f000 f8b9 	bl	800153c <box_printGo>
		for (int i=0; i<TRACKING_CNT; i++)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3301      	adds	r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80013d4:	ddb3      	ble.n	800133e <_handle_encoder+0x22>
			}
		}
		if (_PrintGoOffDelay>0)
 80013d6:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <_handle_encoder+0x11c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	dd0e      	ble.n	80013fc <_handle_encoder+0xe0>
		{
			if ((--_PrintGoOffDelay)==0)
 80013de:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <_handle_encoder+0x11c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <_handle_encoder+0x11c>)
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <_handle_encoder+0x11c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d105      	bne.n	80013fc <_handle_encoder+0xe0>
				HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013f6:	4811      	ldr	r0, [pc, #68]	@ (800143c <_handle_encoder+0x120>)
 80013f8:	f002 f824 	bl	8003444 <HAL_GPIO_WritePin>
		}

		if (_PrintDoneDelay>0)
 80013fc:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <_handle_encoder+0x124>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	dd0a      	ble.n	800141a <_handle_encoder+0xfe>
		{
			if ((--_PrintDoneDelay)==0)
 8001404:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <_handle_encoder+0x124>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	3b01      	subs	r3, #1
 800140a:	4a0d      	ldr	r2, [pc, #52]	@ (8001440 <_handle_encoder+0x124>)
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <_handle_encoder+0x124>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <_handle_encoder+0xfe>
				_send_print_done();
 8001416:	f000 f815 	bl	8001444 <_send_print_done>
		}
	}
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000568 	.word	0x20000568
 8001428:	20000594 	.word	0x20000594
 800142c:	20000258 	.word	0x20000258
 8001430:	2000055c 	.word	0x2000055c
 8001434:	0800ccb8 	.word	0x0800ccb8
 8001438:	20000564 	.word	0x20000564
 800143c:	48001000 	.word	0x48001000
 8001440:	2000056c 	.word	0x2000056c

08001444 <_send_print_done>:
	_PrinterReadyIn = ready;
}

//--- _send_print_done ----------------------------------------
static void _send_print_done(void)
{
 8001444:	b5b0      	push	{r4, r5, r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af02      	add	r7, sp, #8
	if (enc_fixSpeed() || _Tracking[_TrackOutIdx].prod.info&0x01)
 800144a:	f000 fa87 	bl	800195c <enc_fixSpeed>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d10f      	bne.n	8001474 <_send_print_done+0x30>
 8001454:	4b33      	ldr	r3, [pc, #204]	@ (8001524 <_send_print_done+0xe0>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4933      	ldr	r1, [pc, #204]	@ (8001528 <_send_print_done+0xe4>)
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	440b      	add	r3, r1
 8001464:	791b      	ldrb	r3, [r3, #4]
 8001466:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800146a:	b2db      	uxtb	r3, r3
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d028      	beq.n	80014c6 <_send_print_done+0x82>
	{
		printf("PrintDone %d: PaceId[%d]=%d, ok=%d\n", _Status.pdCnt, _TrackOutIdx, _Tracking[_TrackOutIdx].prod.paceId, _Tracking[_TrackOutIdx].prod.info);
 8001474:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <_send_print_done+0xe8>)
 8001476:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001478:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <_send_print_done+0xe0>)
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	4b29      	ldr	r3, [pc, #164]	@ (8001524 <_send_print_done+0xe0>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4c29      	ldr	r4, [pc, #164]	@ (8001528 <_send_print_done+0xe4>)
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4423      	add	r3, r4
 800148c:	795b      	ldrb	r3, [r3, #5]
 800148e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001492:	b2db      	uxtb	r3, r3
 8001494:	461d      	mov	r5, r3
 8001496:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <_send_print_done+0xe0>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4c23      	ldr	r4, [pc, #140]	@ (8001528 <_send_print_done+0xe4>)
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4423      	add	r3, r4
 80014a6:	791b      	ldrb	r3, [r3, #4]
 80014a8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	462b      	mov	r3, r5
 80014b2:	4602      	mov	r2, r0
 80014b4:	481e      	ldr	r0, [pc, #120]	@ (8001530 <_send_print_done+0xec>)
 80014b6:	f007 fb99 	bl	8008bec <iprintf>
		_Status.pdCnt++;
 80014ba:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <_send_print_done+0xe8>)
 80014bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014be:	3301      	adds	r3, #1
 80014c0:	4a1a      	ldr	r2, [pc, #104]	@ (800152c <_send_print_done+0xe8>)
 80014c2:	6393      	str	r3, [r2, #56]	@ 0x38
 80014c4:	e027      	b.n	8001516 <_send_print_done+0xd2>
	}
	else
	{
		printf("EmptyDone %d: PaceId[%d]=%d, ok=%d\n", _Status.emptyDoneCnt, _TrackOutIdx, _Tracking[_TrackOutIdx].prod.paceId, _Tracking[_TrackOutIdx].prod.info);
 80014c6:	4b19      	ldr	r3, [pc, #100]	@ (800152c <_send_print_done+0xe8>)
 80014c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014ca:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <_send_print_done+0xe0>)
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <_send_print_done+0xe0>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4c15      	ldr	r4, [pc, #84]	@ (8001528 <_send_print_done+0xe4>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4423      	add	r3, r4
 80014de:	795b      	ldrb	r3, [r3, #5]
 80014e0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	461d      	mov	r5, r3
 80014e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <_send_print_done+0xe0>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4c0e      	ldr	r4, [pc, #56]	@ (8001528 <_send_print_done+0xe4>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4423      	add	r3, r4
 80014f8:	791b      	ldrb	r3, [r3, #4]
 80014fa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	462b      	mov	r3, r5
 8001504:	4602      	mov	r2, r0
 8001506:	480b      	ldr	r0, [pc, #44]	@ (8001534 <_send_print_done+0xf0>)
 8001508:	f007 fb70 	bl	8008bec <iprintf>
		_Status.emptyDoneCnt++;
 800150c:	4b07      	ldr	r3, [pc, #28]	@ (800152c <_send_print_done+0xe8>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001510:	3301      	adds	r3, #1
 8001512:	4a06      	ldr	r2, [pc, #24]	@ (800152c <_send_print_done+0xe8>)
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	_PaceId = -1;
 8001516:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <_send_print_done+0xf4>)
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	601a      	str	r2, [r3, #0]
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	bdb0      	pop	{r4, r5, r7, pc}
 8001524:	2000055c 	.word	0x2000055c
 8001528:	20000258 	.word	0x20000258
 800152c:	20000208 	.word	0x20000208
 8001530:	0800ccf4 	.word	0x0800ccf4
 8001534:	0800cd18 	.word	0x0800cd18
 8001538:	20000560 	.word	0x20000560

0800153c <box_printGo>:

//--- box_printGo ----------------------
void box_printGo(void)
{
 800153c:	b598      	push	{r3, r4, r7, lr}
 800153e:	af00      	add	r7, sp, #0
//	printf("PrintGo ON %d\n",  _Ticks);
	_Status.paceId = _Tracking[_TrackOutIdx].prod.paceId;
 8001540:	4b3e      	ldr	r3, [pc, #248]	@ (800163c <box_printGo+0x100>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	493e      	ldr	r1, [pc, #248]	@ (8001640 <box_printGo+0x104>)
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	440b      	add	r3, r1
 8001550:	795b      	ldrb	r3, [r3, #5]
 8001552:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001556:	b2db      	uxtb	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	4b3a      	ldr	r3, [pc, #232]	@ (8001644 <box_printGo+0x108>)
 800155c:	621a      	str	r2, [r3, #32]
	_PaceId = _Tracking[_TrackOutIdx].prod.paceId;
 800155e:	4b37      	ldr	r3, [pc, #220]	@ (800163c <box_printGo+0x100>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	4937      	ldr	r1, [pc, #220]	@ (8001640 <box_printGo+0x104>)
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	440b      	add	r3, r1
 800156e:	795b      	ldrb	r3, [r3, #5]
 8001570:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001574:	b2db      	uxtb	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	4b33      	ldr	r3, [pc, #204]	@ (8001648 <box_printGo+0x10c>)
 800157a:	601a      	str	r2, [r3, #0]
	if (enc_fixSpeed() || _Tracking[_TrackOutIdx].prod.info&0x01)
 800157c:	f000 f9ee 	bl	800195c <enc_fixSpeed>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10f      	bne.n	80015a6 <box_printGo+0x6a>
 8001586:	4b2d      	ldr	r3, [pc, #180]	@ (800163c <box_printGo+0x100>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	492d      	ldr	r1, [pc, #180]	@ (8001640 <box_printGo+0x104>)
 800158c:	4613      	mov	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	440b      	add	r3, r1
 8001596:	791b      	ldrb	r3, [r3, #4]
 8001598:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d01f      	beq.n	80015e6 <box_printGo+0xaa>
	{
		printf("PrintGo %d: PaceId[%d]=%d\n", _Status.pgCnt, _TrackOutIdx, _Tracking[_TrackOutIdx].prod.paceId);
 80015a6:	4b27      	ldr	r3, [pc, #156]	@ (8001644 <box_printGo+0x108>)
 80015a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015aa:	4b24      	ldr	r3, [pc, #144]	@ (800163c <box_printGo+0x100>)
 80015ac:	6818      	ldr	r0, [r3, #0]
 80015ae:	4b23      	ldr	r3, [pc, #140]	@ (800163c <box_printGo+0x100>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4c23      	ldr	r4, [pc, #140]	@ (8001640 <box_printGo+0x104>)
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4423      	add	r3, r4
 80015be:	795b      	ldrb	r3, [r3, #5]
 80015c0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	4602      	mov	r2, r0
 80015c8:	4820      	ldr	r0, [pc, #128]	@ (800164c <box_printGo+0x110>)
 80015ca:	f007 fb0f 	bl	8008bec <iprintf>
		_Status.pgCnt++;
 80015ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001644 <box_printGo+0x108>)
 80015d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d2:	3301      	adds	r3, #1
 80015d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001644 <box_printGo+0x108>)
 80015d6:	6353      	str	r3, [r2, #52]	@ 0x34
		HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015de:	481c      	ldr	r0, [pc, #112]	@ (8001650 <box_printGo+0x114>)
 80015e0:	f001 ff30 	bl	8003444 <HAL_GPIO_WritePin>
 80015e4:	e018      	b.n	8001618 <box_printGo+0xdc>
	}
	else
	{
		printf("EmptyGo %d: PaceId[%d]=%d\n", _Status.pgCnt, _TrackOutIdx, _Tracking[_TrackOutIdx].prod.paceId);
 80015e6:	4b17      	ldr	r3, [pc, #92]	@ (8001644 <box_printGo+0x108>)
 80015e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015ea:	4b14      	ldr	r3, [pc, #80]	@ (800163c <box_printGo+0x100>)
 80015ec:	6818      	ldr	r0, [r3, #0]
 80015ee:	4b13      	ldr	r3, [pc, #76]	@ (800163c <box_printGo+0x100>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4c13      	ldr	r4, [pc, #76]	@ (8001640 <box_printGo+0x104>)
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4423      	add	r3, r4
 80015fe:	795b      	ldrb	r3, [r3, #5]
 8001600:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4602      	mov	r2, r0
 8001608:	4812      	ldr	r0, [pc, #72]	@ (8001654 <box_printGo+0x118>)
 800160a:	f007 faef 	bl	8008bec <iprintf>
		_Status.emptyGoCnt++;
 800160e:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <box_printGo+0x108>)
 8001610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001612:	3301      	adds	r3, #1
 8001614:	4a0b      	ldr	r2, [pc, #44]	@ (8001644 <box_printGo+0x108>)
 8001616:	62d3      	str	r3, [r2, #44]	@ 0x2c
	}
	if (_PrintDoneDelay) printf("ERROR: PringGo while still printing _PrintDoneDelay=%d\n",_PrintDoneDelay);
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <box_printGo+0x11c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <box_printGo+0xf0>
 8001620:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <box_printGo+0x11c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	480d      	ldr	r0, [pc, #52]	@ (800165c <box_printGo+0x120>)
 8001628:	f007 fae0 	bl	8008bec <iprintf>
	_PrintGoOffDelay = 10;
 800162c:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <box_printGo+0x124>)
 800162e:	220a      	movs	r2, #10
 8001630:	601a      	str	r2, [r3, #0]
	_PrintDoneDelay = 20;
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <box_printGo+0x11c>)
 8001634:	2214      	movs	r2, #20
 8001636:	601a      	str	r2, [r3, #0]
}
 8001638:	bf00      	nop
 800163a:	bd98      	pop	{r3, r4, r7, pc}
 800163c:	2000055c 	.word	0x2000055c
 8001640:	20000258 	.word	0x20000258
 8001644:	20000208 	.word	0x20000208
 8001648:	20000560 	.word	0x20000560
 800164c:	0800cd3c 	.word	0x0800cd3c
 8001650:	48001000 	.word	0x48001000
 8001654:	0800cd58 	.word	0x0800cd58
 8001658:	2000056c 	.word	0x2000056c
 800165c:	0800cd74 	.word	0x0800cd74
 8001660:	20000564 	.word	0x20000564

08001664 <box_send_status>:

//--- box_send_status ----------------------------------------
void box_send_status(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800166a:	af00      	add	r7, sp, #0
	printf("encOut Pos:     %d\n",    (int)_Status.enc.encOutPos);
	printf("PrintGo Cnt:    %d\n",    (int)_Status.pgCnt);
	printf("\n");
	 */
	char msg[512];
	_Status.test++;
 800166c:	4b0d      	ldr	r3, [pc, #52]	@ (80016a4 <box_send_status+0x40>)
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	3301      	adds	r3, #1
 8001672:	4a0c      	ldr	r2, [pc, #48]	@ (80016a4 <box_send_status+0x40>)
 8001674:	6153      	str	r3, [r2, #20]
		printf(&msg[start]);
		msg[start+l]=ch;
		start+=l;
	}
	*/
	printf("STATUS %s\n", bin2hex(msg, &_Status, sizeof(_Status)));
 8001676:	463b      	mov	r3, r7
 8001678:	223c      	movs	r2, #60	@ 0x3c
 800167a:	490a      	ldr	r1, [pc, #40]	@ (80016a4 <box_send_status+0x40>)
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fa75 	bl	8001b6c <bin2hex>
 8001682:	4603      	mov	r3, r0
 8001684:	4619      	mov	r1, r3
 8001686:	4808      	ldr	r0, [pc, #32]	@ (80016a8 <box_send_status+0x44>)
 8001688:	f007 fab0 	bl	8008bec <iprintf>
	fflush(stdout);
 800168c:	4b07      	ldr	r3, [pc, #28]	@ (80016ac <box_send_status+0x48>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	4618      	mov	r0, r3
 8001694:	f007 f9d4 	bl	8008a40 <fflush>
}
 8001698:	bf00      	nop
 800169a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000208 	.word	0x20000208
 80016a8:	0800cdac 	.word	0x0800cdac
 80016ac:	2000002c 	.word	0x2000002c

080016b0 <enc_init>:

static void _set_speed(int32_t speed);

//--- enc_init ----------------------------------
void enc_init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	_Timer_clock_frequency = HAL_RCC_GetPCLK1Freq(); // Adjust based on your clock tree settings
 80016b4:	f003 feb4 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4a05      	ldr	r2, [pc, #20]	@ (80016d0 <enc_init+0x20>)
 80016bc:	6013      	str	r3, [r2, #0]
	_Prescaler=1;
 80016be:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <enc_init+0x24>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]
	_EncoderInPos = 0;
 80016c4:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <enc_init+0x28>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000574 	.word	0x20000574
 80016d4:	20000578 	.word	0x20000578
 80016d8:	20000584 	.word	0x20000584

080016dc <enc_in_irq>:

//--- enc_irq ------------------------
void enc_in_irq(TIM_HandleTypeDef *htim)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	int time=HAL_GetTick();
 80016e4:	f001 fb88 	bl	8002df8 <HAL_GetTick>
 80016e8:	4603      	mov	r3, r0
 80016ea:	617b      	str	r3, [r7, #20]
	int pos = _EncoderInPos;
 80016ec:	4b23      	ldr	r3, [pc, #140]	@ (800177c <enc_in_irq+0xa0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	613b      	str	r3, [r7, #16]
	_EncoderInPos = enc_get_pos();
 80016f2:	f000 fda3 	bl	800223c <enc_get_pos>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4a20      	ldr	r2, [pc, #128]	@ (800177c <enc_in_irq+0xa0>)
 80016fa:	6013      	str	r3, [r2, #0]
	int dist=_EncoderInPos-pos;
 80016fc:	4b1f      	ldr	r3, [pc, #124]	@ (800177c <enc_in_irq+0xa0>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	60fb      	str	r3, [r7, #12]
	int t=time-_EncInTime;
 8001706:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <enc_in_irq+0xa4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	60bb      	str	r3, [r7, #8]
	if (t==0) _EncStatus.encInSpeed=0;
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d103      	bne.n	800171e <enc_in_irq+0x42>
 8001716:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <enc_in_irq+0xa8>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	e009      	b.n	8001732 <enc_in_irq+0x56>
	else _EncStatus.encInSpeed = (dist*1000)/t;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001724:	fb03 f202 	mul.w	r2, r3, r2
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	fb92 f3f3 	sdiv	r3, r2, r3
 800172e:	4a15      	ldr	r2, [pc, #84]	@ (8001784 <enc_in_irq+0xa8>)
 8001730:	6013      	str	r3, [r2, #0]

	_EncInTime=time;
 8001732:	4a13      	ldr	r2, [pc, #76]	@ (8001780 <enc_in_irq+0xa4>)
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	6013      	str	r3, [r2, #0]

	//--- set output speed ------
	if (_Running && !_FixedSpeed)
 8001738:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <enc_in_irq+0xac>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d019      	beq.n	8001774 <enc_in_irq+0x98>
 8001740:	4b12      	ldr	r3, [pc, #72]	@ (800178c <enc_in_irq+0xb0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d115      	bne.n	8001774 <enc_in_irq+0x98>
		enc_set_speed((int)(_EncStatus.encInSpeed*_EncOut_incPM/_EncIn_incPM));
 8001748:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <enc_in_irq+0xa8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001754:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <enc_in_irq+0xb4>)
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800175e:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <enc_in_irq+0xb8>)
 8001760:	ed93 7a00 	vldr	s14, [r3]
 8001764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001768:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800176c:	ee17 0a90 	vmov	r0, s15
 8001770:	f000 f8c4 	bl	80018fc <enc_set_speed>
}
 8001774:	bf00      	nop
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000584 	.word	0x20000584
 8001780:	20000590 	.word	0x20000590
 8001784:	2000057c 	.word	0x2000057c
 8001788:	2000058c 	.word	0x2000058c
 800178c:	200005a8 	.word	0x200005a8
 8001790:	2000000c 	.word	0x2000000c
 8001794:	20000008 	.word	0x20000008

08001798 <enc_tick_10ms>:

//--- enc_tick_10ms ---------------------------
void enc_tick_10ms(int ticks)
{
 8001798:	b5b0      	push	{r4, r5, r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	if (ticks-_EncOutTime>1000)
 80017a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001860 <enc_tick_10ms+0xc8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017ac:	dd54      	ble.n	8001858 <enc_tick_10ms+0xc0>
	{
		float t=(float)(ticks-_EncOutTime);
 80017ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001860 <enc_tick_10ms+0xc8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017be:	edc7 7a03 	vstr	s15, [r7, #12]
		_EncStatus.encOutSpeed = (int32_t) (1000.0*_EncOutSpeedCnt/t/2);
 80017c2:	4b28      	ldr	r3, [pc, #160]	@ (8001864 <enc_tick_10ms+0xcc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe feac 	bl	8000524 <__aeabi_i2d>
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	4b25      	ldr	r3, [pc, #148]	@ (8001868 <enc_tick_10ms+0xd0>)
 80017d2:	f7fe ff11 	bl	80005f8 <__aeabi_dmul>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4614      	mov	r4, r2
 80017dc:	461d      	mov	r5, r3
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f7fe feb2 	bl	8000548 <__aeabi_f2d>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4620      	mov	r0, r4
 80017ea:	4629      	mov	r1, r5
 80017ec:	f7ff f82e 	bl	800084c <__aeabi_ddiv>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001800:	f7ff f824 	bl	800084c <__aeabi_ddiv>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	f7ff f9a4 	bl	8000b58 <__aeabi_d2iz>
 8001810:	4603      	mov	r3, r0
 8001812:	4a16      	ldr	r2, [pc, #88]	@ (800186c <enc_tick_10ms+0xd4>)
 8001814:	6053      	str	r3, [r2, #4]
		_EncOutTime=ticks;
 8001816:	4a12      	ldr	r2, [pc, #72]	@ (8001860 <enc_tick_10ms+0xc8>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6013      	str	r3, [r2, #0]
		_EncOutSpeedCnt=0;
 800181c:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <enc_tick_10ms+0xcc>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
		if (_FixedSpeed==777 && _SpeedOutSet<20000)
 8001822:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <enc_tick_10ms+0xd8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f240 3209 	movw	r2, #777	@ 0x309
 800182a:	4293      	cmp	r3, r2
 800182c:	d114      	bne.n	8001858 <enc_tick_10ms+0xc0>
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <enc_tick_10ms+0xdc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001836:	4293      	cmp	r3, r2
 8001838:	dc0e      	bgt.n	8001858 <enc_tick_10ms+0xc0>
		{
			_SpeedOutSet    += 1000;
 800183a:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <enc_tick_10ms+0xdc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001842:	4a0c      	ldr	r2, [pc, #48]	@ (8001874 <enc_tick_10ms+0xdc>)
 8001844:	6013      	str	r3, [r2, #0]
			_SpeedOutChange = TRUE;
 8001846:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <enc_tick_10ms+0xe0>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]
			printf("LOG: SetSpeed=%d Hz\n", _SpeedOutSet);
 800184c:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <enc_tick_10ms+0xdc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	480a      	ldr	r0, [pc, #40]	@ (800187c <enc_tick_10ms+0xe4>)
 8001854:	f007 f9ca 	bl	8008bec <iprintf>
		}
	}
}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bdb0      	pop	{r4, r5, r7, pc}
 8001860:	200005a0 	.word	0x200005a0
 8001864:	200005a4 	.word	0x200005a4
 8001868:	408f4000 	.word	0x408f4000
 800186c:	2000057c 	.word	0x2000057c
 8001870:	200005a8 	.word	0x200005a8
 8001874:	20000598 	.word	0x20000598
 8001878:	2000059c 	.word	0x2000059c
 800187c:	0800cdb8 	.word	0x0800cdb8

08001880 <enc_get_status>:

//--- enc_get_status -------------------------------
void enc_get_status(SEZFB_EncStatus *pstatus)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	memcpy(pstatus, &_EncStatus, sizeof(_EncStatus));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4906      	ldr	r1, [pc, #24]	@ (80018a4 <enc_get_status+0x24>)
 800188c:	461a      	mov	r2, r3
 800188e:	460b      	mov	r3, r1
 8001890:	cb03      	ldmia	r3!, {r0, r1}
 8001892:	6010      	str	r0, [r2, #0]
 8001894:	6051      	str	r1, [r2, #4]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	2000057c 	.word	0x2000057c

080018a8 <enc_command>:

//--- enc_command ----------------------------------
void enc_command(const char *args)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
    int cnt=0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]

   // Parse the command arguments for action type
  //  if (strstr(args, "start")) 		enc_start();
  //  else if (strstr(args, "stop"))	enc_stop();
  //  else
    if ((cnt=sscanf(args, "speed %d", &_FixedSpeed)))
 80018b4:	4a0d      	ldr	r2, [pc, #52]	@ (80018ec <enc_command+0x44>)
 80018b6:	490e      	ldr	r1, [pc, #56]	@ (80018f0 <enc_command+0x48>)
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f007 fa27 	bl	8008d0c <siscanf>
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00b      	beq.n	80018de <enc_command+0x36>
    {
    	printf("LOG: enc_command speed=%d Hz\n", _FixedSpeed);
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <enc_command+0x44>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4619      	mov	r1, r3
 80018cc:	4809      	ldr	r0, [pc, #36]	@ (80018f4 <enc_command+0x4c>)
 80018ce:	f007 f98d 	bl	8008bec <iprintf>
    	enc_set_speed(_FixedSpeed);
 80018d2:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <enc_command+0x44>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f810 	bl	80018fc <enc_set_speed>
    }
    else
    {
        printf("Unknown command. Use 'encoder start', 'encoder stop', or 'encoder speed ...'\n");
    }
}
 80018dc:	e002      	b.n	80018e4 <enc_command+0x3c>
        printf("Unknown command. Use 'encoder start', 'encoder stop', or 'encoder speed ...'\n");
 80018de:	4806      	ldr	r0, [pc, #24]	@ (80018f8 <enc_command+0x50>)
 80018e0:	f007 f9ec 	bl	8008cbc <puts>
}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200005a8 	.word	0x200005a8
 80018f0:	0800cdd0 	.word	0x0800cdd0
 80018f4:	0800cddc 	.word	0x0800cddc
 80018f8:	0800cdfc 	.word	0x0800cdfc

080018fc <enc_set_speed>:

//--- enc_set_speed ---------------------------
void enc_set_speed(int32_t speed)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	if (_FixedSpeed) speed=_FixedSpeed;
 8001904:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <enc_set_speed+0x4c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <enc_set_speed+0x16>
 800190c:	4b0e      	ldr	r3, [pc, #56]	@ (8001948 <enc_set_speed+0x4c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	607b      	str	r3, [r7, #4]
	if (!_Init) _set_speed(speed);
 8001912:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <enc_set_speed+0x50>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d103      	bne.n	8001922 <enc_set_speed+0x26>
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f82a 	bl	8001974 <_set_speed>
	{
		_SpeedOutSet = speed;
		_SpeedOutChange = TRUE;
		printf("Encoder Speedchange=%d\n", speed);
	}
}
 8001920:	e00e      	b.n	8001940 <enc_set_speed+0x44>
	else if (speed!=_SpeedOutSet)
 8001922:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <enc_set_speed+0x54>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	429a      	cmp	r2, r3
 800192a:	d009      	beq.n	8001940 <enc_set_speed+0x44>
		_SpeedOutSet = speed;
 800192c:	4a08      	ldr	r2, [pc, #32]	@ (8001950 <enc_set_speed+0x54>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
		_SpeedOutChange = TRUE;
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <enc_set_speed+0x58>)
 8001934:	2201      	movs	r2, #1
 8001936:	601a      	str	r2, [r3, #0]
		printf("Encoder Speedchange=%d\n", speed);
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4807      	ldr	r0, [pc, #28]	@ (8001958 <enc_set_speed+0x5c>)
 800193c:	f007 f956 	bl	8008bec <iprintf>
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200005a8 	.word	0x200005a8
 800194c:	20000588 	.word	0x20000588
 8001950:	20000598 	.word	0x20000598
 8001954:	2000059c 	.word	0x2000059c
 8001958:	0800ce4c 	.word	0x0800ce4c

0800195c <enc_fixSpeed>:

//--- enc_fixSpeed ----------------------------
int  enc_fixSpeed(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
	return _FixedSpeed;
 8001960:	4b03      	ldr	r3, [pc, #12]	@ (8001970 <enc_fixSpeed+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	200005a8 	.word	0x200005a8

08001974 <_set_speed>:

//--- _set_speed ------------------------------
static void _set_speed(int32_t speed)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	if (htim2.Instance)
 800197c:	4b1d      	ldr	r3, [pc, #116]	@ (80019f4 <_set_speed+0x80>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d032      	beq.n	80019ea <_set_speed+0x76>
	{
		if (speed==0)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <_set_speed+0x2a>
		{
			printf("LOG: encoder HAL_TIM_Base_Stop\n");
 800198a:	481b      	ldr	r0, [pc, #108]	@ (80019f8 <_set_speed+0x84>)
 800198c:	f007 f996 	bl	8008cbc <puts>
			HAL_TIM_Base_Stop(&htim2);
 8001990:	4818      	ldr	r0, [pc, #96]	@ (80019f4 <_set_speed+0x80>)
 8001992:	f003 ffad 	bl	80058f0 <HAL_TIM_Base_Stop>
			_Running = FALSE;
 8001996:	4b19      	ldr	r3, [pc, #100]	@ (80019fc <_set_speed+0x88>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
				}
				HAL_TIM_Base_Start(&htim2);
			}
		}
	}
}
 800199c:	e025      	b.n	80019ea <_set_speed+0x76>
			uint32_t period = ((_Timer_clock_frequency / (_Prescaler * speed)) / 2) - 1;
 800199e:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <_set_speed+0x8c>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b18      	ldr	r3, [pc, #96]	@ (8001a04 <_set_speed+0x90>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b0:	085b      	lsrs	r3, r3, #1
 80019b2:	3b01      	subs	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
			TIM2->ARR = period;
 80019b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
			if (!_Running)
 80019be:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <_set_speed+0x88>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d111      	bne.n	80019ea <_set_speed+0x76>
				_Running = TRUE;
 80019c6:	4b0d      	ldr	r3, [pc, #52]	@ (80019fc <_set_speed+0x88>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	601a      	str	r2, [r3, #0]
				printf("LOG: encoder HAL_TIM_Base_Start period=%d\n", period);
 80019cc:	68f9      	ldr	r1, [r7, #12]
 80019ce:	480e      	ldr	r0, [pc, #56]	@ (8001a08 <_set_speed+0x94>)
 80019d0:	f007 f90c 	bl	8008bec <iprintf>
				if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 80019d4:	4807      	ldr	r0, [pc, #28]	@ (80019f4 <_set_speed+0x80>)
 80019d6:	f003 ffb3 	bl	8005940 <HAL_TIM_Base_Start_IT>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <_set_speed+0x70>
					Error_Handler();
 80019e0:	f000 fe3e 	bl	8002660 <Error_Handler>
				HAL_TIM_Base_Start(&htim2);
 80019e4:	4803      	ldr	r0, [pc, #12]	@ (80019f4 <_set_speed+0x80>)
 80019e6:	f003 ff23 	bl	8005830 <HAL_TIM_Base_Start>
}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000600 	.word	0x20000600
 80019f8:	0800ce64 	.word	0x0800ce64
 80019fc:	2000058c 	.word	0x2000058c
 8001a00:	20000574 	.word	0x20000574
 8001a04:	20000578 	.word	0x20000578
 8001a08:	0800ce84 	.word	0x0800ce84

08001a0c <enc_out_irq>:

//--- enc_out_irq -------------------------------
void enc_out_irq(TIM_HandleTypeDef *htim)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  EZ_EncoderOutPos++;
 8001a14:	4b1f      	ldr	r3, [pc, #124]	@ (8001a94 <enc_out_irq+0x88>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8001a94 <enc_out_irq+0x88>)
 8001a1c:	6013      	str	r3, [r2, #0]
  _EncOutSpeedCnt++;
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a98 <enc_out_irq+0x8c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3301      	adds	r3, #1
 8001a24:	4a1c      	ldr	r2, [pc, #112]	@ (8001a98 <enc_out_irq+0x8c>)
 8001a26:	6013      	str	r3, [r2, #0]
  switch(EZ_EncoderOutPos&0x03)
 8001a28:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <enc_out_irq+0x88>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d81f      	bhi.n	8001a74 <enc_out_irq+0x68>
 8001a34:	a201      	add	r2, pc, #4	@ (adr r2, 8001a3c <enc_out_irq+0x30>)
 8001a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3a:	bf00      	nop
 8001a3c:	08001a4d 	.word	0x08001a4d
 8001a40:	08001a59 	.word	0x08001a59
 8001a44:	08001a61 	.word	0x08001a61
 8001a48:	08001a6d 	.word	0x08001a6d
  {
  case 0: ENCODER_A_GPIO_Port->BRR  = ENCODER_A_Pin; break;
 8001a4c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a50:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a54:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a56:	e00d      	b.n	8001a74 <enc_out_irq+0x68>
  case 1: ENCODER_B_GPIO_Port->BRR  = ENCODER_B_Pin; break;
 8001a58:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <enc_out_irq+0x90>)
 8001a5a:	2208      	movs	r2, #8
 8001a5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a5e:	e009      	b.n	8001a74 <enc_out_irq+0x68>
  case 2: ENCODER_A_GPIO_Port->BSRR = ENCODER_A_Pin; break;
 8001a60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a64:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a68:	619a      	str	r2, [r3, #24]
 8001a6a:	e003      	b.n	8001a74 <enc_out_irq+0x68>
  case 3: ENCODER_B_GPIO_Port->BSRR = ENCODER_B_Pin; break;
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <enc_out_irq+0x90>)
 8001a6e:	2208      	movs	r2, #8
 8001a70:	619a      	str	r2, [r3, #24]
 8001a72:	bf00      	nop
  }
  if (_SpeedOutChange)
 8001a74:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa0 <enc_out_irq+0x94>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d004      	beq.n	8001a86 <enc_out_irq+0x7a>
	  _set_speed(_SpeedOutSet);
 8001a7c:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <enc_out_irq+0x98>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff77 	bl	8001974 <_set_speed>
  _SpeedOutChange = FALSE;
 8001a86:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <enc_out_irq+0x94>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000594 	.word	0x20000594
 8001a98:	200005a4 	.word	0x200005a4
 8001a9c:	48000400 	.word	0x48000400
 8001aa0:	2000059c 	.word	0x2000059c
 8001aa4:	20000598 	.word	0x20000598

08001aa8 <enc_start>:

//--- enc_start ---------------------------
void enc_start(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	if (_FixedSpeed) printf("WARN: Encoder speed fixed to %d Hz\n", _FixedSpeed);
 8001aac:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <enc_start+0x24>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <enc_start+0x18>
 8001ab4:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <enc_start+0x24>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4805      	ldr	r0, [pc, #20]	@ (8001ad0 <enc_start+0x28>)
 8001abc:	f007 f896 	bl	8008bec <iprintf>

    // Apply the last configured settings and start PWM
	EZ_EncoderOutPos=0;
 8001ac0:	4b04      	ldr	r3, [pc, #16]	@ (8001ad4 <enc_start+0x2c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200005a8 	.word	0x200005a8
 8001ad0:	0800ceb0 	.word	0x0800ceb0
 8001ad4:	20000594 	.word	0x20000594

08001ad8 <enc_stop>:

//--- enc_stop ---------------------------------
void enc_stop(void) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
    // Stop the PWM and ensure both outputs are low
	if (_Running)
 8001adc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <enc_stop+0x38>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d012      	beq.n	8001b0a <enc_stop+0x32>
	{
		_SpeedOutSet=0;
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <enc_stop+0x3c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
		_SpeedOutChange=TRUE;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <enc_stop+0x40>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(ENCODER_A_GPIO_Port, ENCODER_A_Pin, GPIO_PIN_SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001af6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001afa:	f001 fca3 	bl	8003444 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENCODER_B_GPIO_Port, ENCODER_A_Pin, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b04:	4805      	ldr	r0, [pc, #20]	@ (8001b1c <enc_stop+0x44>)
 8001b06:	f001 fc9d 	bl	8003444 <HAL_GPIO_WritePin>
	}
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000058c 	.word	0x2000058c
 8001b14:	20000598 	.word	0x20000598
 8001b18:	2000059c 	.word	0x2000059c
 8001b1c:	48000400 	.word	0x48000400

08001b20 <strstart>:
#include <stdlib.h>
#include "ge_common.h"

//--- strstart ---------------------------------------
char *strstart(const char *str, const char *start)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
	int len=strlen(start);
 8001b2a:	6838      	ldr	r0, [r7, #0]
 8001b2c:	f7fe fba0 	bl	8000270 <strlen>
 8001b30:	4603      	mov	r3, r0
 8001b32:	60fb      	str	r3, [r7, #12]
	if (!strncmp(str, start, len))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	461a      	mov	r2, r3
 8001b38:	6839      	ldr	r1, [r7, #0]
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f007 f9f2 	bl	8008f24 <strncmp>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10d      	bne.n	8001b62 <strstart+0x42>
	{
		while (str[len]==' ') len++;
 8001b46:	e002      	b.n	8001b4e <strstart+0x2e>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b20      	cmp	r3, #32
 8001b58:	d0f6      	beq.n	8001b48 <strstart+0x28>
		return (char*)&str[len];
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	e000      	b.n	8001b64 <strstart+0x44>
	}
	return 0;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <bin2hex>:

//--- bin2hex ------------------------------
char *bin2hex(char *str, void *data, int len)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
	UINT8 *src=(UINT8*)data;
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	61fb      	str	r3, [r7, #28]
	char *dst = str;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	61bb      	str	r3, [r7, #24]
	dst+= sprintf(dst, "%03d ", len);
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	4913      	ldr	r1, [pc, #76]	@ (8001bd0 <bin2hex+0x64>)
 8001b84:	69b8      	ldr	r0, [r7, #24]
 8001b86:	f007 f8a1 	bl	8008ccc <siprintf>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4413      	add	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
	for(int i=0; i<len; i++, src++)
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e011      	b.n	8001bbe <bin2hex+0x52>
	{
		dst+=sprintf(dst, "%02x ", *src);
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	@ (8001bd4 <bin2hex+0x68>)
 8001ba2:	69b8      	ldr	r0, [r7, #24]
 8001ba4:	f007 f892 	bl	8008ccc <siprintf>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	4413      	add	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
	for(int i=0; i<len; i++, src++)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	dbe9      	blt.n	8001b9a <bin2hex+0x2e>
	}
	return str;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3720      	adds	r7, #32
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	0800ced4 	.word	0x0800ced4
 8001bd4:	0800cedc 	.word	0x0800cedc

08001bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bde:	f001 f8b1 	bl	8002d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001be2:	f000 f85d 	bl	8001ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be6:	f000 fa59 	bl	800209c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001bea:	f000 fa27 	bl	800203c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001bee:	f000 f945 	bl	8001e7c <MX_TIM3_Init>
  MX_I2C1_Init();
 8001bf2:	f000 f8b5 	bl	8001d60 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001bf6:	f000 f8f3 	bl	8001de0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001bfa:	f000 f999 	bl	8001f30 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001bfe:	f000 f9eb 	bl	8001fd8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001c02:	213c      	movs	r1, #60	@ 0x3c
 8001c04:	481f      	ldr	r0, [pc, #124]	@ (8001c84 <main+0xac>)
 8001c06:	f003 ffa9 	bl	8005b5c <HAL_TIM_Encoder_Start>

  // Kick off asynchronous UART RCV
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&RxDataFERAG, 1);
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	491e      	ldr	r1, [pc, #120]	@ (8001c88 <main+0xb0>)
 8001c0e:	481f      	ldr	r0, [pc, #124]	@ (8001c8c <main+0xb4>)
 8001c10:	f004 fd42 	bl	8006698 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&RxDataNUC, 1);
 8001c14:	2201      	movs	r2, #1
 8001c16:	491e      	ldr	r1, [pc, #120]	@ (8001c90 <main+0xb8>)
 8001c18:	481e      	ldr	r0, [pc, #120]	@ (8001c94 <main+0xbc>)
 8001c1a:	f004 fd3d 	bl	8006698 <HAL_UART_Receive_IT>

  term_init();
 8001c1e:	f000 ffc3 	bl	8002ba8 <term_init>
  enc_init();
 8001c22:	f7ff fd45 	bl	80016b0 <enc_init>
  box_init();
 8001c26:	f7ff f913 	bl	8000e50 <box_init>

  power_nuc(TRUE);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f000 fc54 	bl	80024d8 <power_nuc>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	AD55936_init(&hi2c1, 0x10 << 1);
 8001c30:	2120      	movs	r1, #32
 8001c32:	4819      	ldr	r0, [pc, #100]	@ (8001c98 <main+0xc0>)
 8001c34:	f7ff f85e 	bl	8000cf4 <AD55936_init>
	int _ticks=0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	607b      	str	r3, [r7, #4]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		int ticks= HAL_GetTick();
 8001c3c:	f001 f8dc 	bl	8002df8 <HAL_GetTick>
 8001c40:	4603      	mov	r3, r0
 8001c42:	603b      	str	r3, [r7, #0]

		while (ticks-_ticks>9)
 8001c44:	e013      	b.n	8001c6e <main+0x96>
		{
			_tick_10ms(ticks);
 8001c46:	6838      	ldr	r0, [r7, #0]
 8001c48:	f000 fb4c 	bl	80022e4 <_tick_10ms>
			_ticks=ticks;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	607b      	str	r3, [r7, #4]
			if (_powerDisplay && _ticks>_powerDisplay)
 8001c50:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <main+0xc4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00a      	beq.n	8001c6e <main+0x96>
 8001c58:	4b10      	ldr	r3, [pc, #64]	@ (8001c9c <main+0xc4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	dd05      	ble.n	8001c6e <main+0x96>
			{
				_powerDisplay=0;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	@ (8001c9c <main+0xc4>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
				power_display(TRUE);
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f000 fc4d 	bl	8002508 <power_display>
		while (ticks-_ticks>9)
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b09      	cmp	r3, #9
 8001c76:	dce6      	bgt.n	8001c46 <main+0x6e>
			}
		}
		box_idle();
 8001c78:	f7ff f998 	bl	8000fac <box_idle>
		term_idle();
 8001c7c:	f000 ffc0 	bl	8002c00 <term_idle>
	{
 8001c80:	e7dc      	b.n	8001c3c <main+0x64>
 8001c82:	bf00      	nop
 8001c84:	20000698 	.word	0x20000698
 8001c88:	200007f5 	.word	0x200007f5
 8001c8c:	200006e4 	.word	0x200006e4
 8001c90:	200007f4 	.word	0x200007f4
 8001c94:	2000076c 	.word	0x2000076c
 8001c98:	200005ac 	.word	0x200005ac
 8001c9c:	20000010 	.word	0x20000010

08001ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b09a      	sub	sp, #104	@ 0x68
 8001ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001caa:	2228      	movs	r2, #40	@ 0x28
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f007 f930 	bl	8008f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc4:	463b      	mov	r3, r7
 8001cc6:	222c      	movs	r2, #44	@ 0x2c
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f007 f922 	bl	8008f14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cd8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ce2:	2310      	movs	r3, #16
 8001ce4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cee:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001cf0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001cf4:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cf6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f002 f95e 	bl	8003fbc <HAL_RCC_OscConfig>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001d06:	f000 fcab 	bl	8002660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d0a:	230f      	movs	r3, #15
 8001d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d12:	2300      	movs	r3, #0
 8001d14:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d24:	2102      	movs	r1, #2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 f986 	bl	8005038 <HAL_RCC_ClockConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d32:	f000 fc95 	bl	8002660 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8001d36:	2325      	movs	r3, #37	@ 0x25
 8001d38:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d46:	463b      	mov	r3, r7
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fbad 	bl	80054a8 <HAL_RCCEx_PeriphCLKConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001d54:	f000 fc84 	bl	8002660 <Error_Handler>
  }
}
 8001d58:	bf00      	nop
 8001d5a:	3768      	adds	r7, #104	@ 0x68
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d64:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd4 <MX_I2C1_Init+0x74>)
 8001d66:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd8 <MX_I2C1_Init+0x78>)
 8001d68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <MX_I2C1_Init+0x74>)
 8001d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ddc <MX_I2C1_Init+0x7c>)
 8001d6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d70:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <MX_I2C1_Init+0x74>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d76:	4b17      	ldr	r3, [pc, #92]	@ (8001dd4 <MX_I2C1_Init+0x74>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d7c:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <MX_I2C1_Init+0x74>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d82:	4b14      	ldr	r3, [pc, #80]	@ (8001dd4 <MX_I2C1_Init+0x74>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d88:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <MX_I2C1_Init+0x74>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <MX_I2C1_Init+0x74>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <MX_I2C1_Init+0x74>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d9a:	480e      	ldr	r0, [pc, #56]	@ (8001dd4 <MX_I2C1_Init+0x74>)
 8001d9c:	f001 fb6a 	bl	8003474 <HAL_I2C_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001da6:	f000 fc5b 	bl	8002660 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001daa:	2100      	movs	r1, #0
 8001dac:	4809      	ldr	r0, [pc, #36]	@ (8001dd4 <MX_I2C1_Init+0x74>)
 8001dae:	f002 f86d 	bl	8003e8c <HAL_I2CEx_ConfigAnalogFilter>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001db8:	f000 fc52 	bl	8002660 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <MX_I2C1_Init+0x74>)
 8001dc0:	f002 f8af 	bl	8003f22 <HAL_I2CEx_ConfigDigitalFilter>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001dca:	f000 fc49 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200005ac 	.word	0x200005ac
 8001dd8:	40005400 	.word	0x40005400
 8001ddc:	2000090e 	.word	0x2000090e

08001de0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
//	PWM for encoder output
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001de6:	f107 0308 	add.w	r3, r7, #8
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df4:	463b      	mov	r3, r7
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e74 <MX_TIM2_Init+0x94>)
 8001dfe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	@ (8001e74 <MX_TIM2_Init+0x94>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <MX_TIM2_Init+0x94>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 8001e10:	4b18      	ldr	r3, [pc, #96]	@ (8001e74 <MX_TIM2_Init+0x94>)
 8001e12:	4a19      	ldr	r2, [pc, #100]	@ (8001e78 <MX_TIM2_Init+0x98>)
 8001e14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e16:	4b17      	ldr	r3, [pc, #92]	@ (8001e74 <MX_TIM2_Init+0x94>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1c:	4b15      	ldr	r3, [pc, #84]	@ (8001e74 <MX_TIM2_Init+0x94>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e22:	4814      	ldr	r0, [pc, #80]	@ (8001e74 <MX_TIM2_Init+0x94>)
 8001e24:	f003 fcb4 	bl	8005790 <HAL_TIM_Base_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001e2e:	f000 fc17 	bl	8002660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e38:	f107 0308 	add.w	r3, r7, #8
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480d      	ldr	r0, [pc, #52]	@ (8001e74 <MX_TIM2_Init+0x94>)
 8001e40:	f004 f822 	bl	8005e88 <HAL_TIM_ConfigClockSource>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001e4a:	f000 fc09 	bl	8002660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e56:	463b      	mov	r3, r7
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4806      	ldr	r0, [pc, #24]	@ (8001e74 <MX_TIM2_Init+0x94>)
 8001e5c:	f004 fa5e 	bl	800631c <HAL_TIMEx_MasterConfigSynchronization>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001e66:	f000 fbfb 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000600 	.word	0x20000600
 8001e78:	000186a0 	.word	0x000186a0

08001e7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e82:	f107 0308 	add.w	r3, r7, #8
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	463b      	mov	r3, r7
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e98:	4b23      	ldr	r3, [pc, #140]	@ (8001f28 <MX_TIM3_Init+0xac>)
 8001e9a:	4a24      	ldr	r2, [pc, #144]	@ (8001f2c <MX_TIM3_Init+0xb0>)
 8001e9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 8001e9e:	4b22      	ldr	r3, [pc, #136]	@ (8001f28 <MX_TIM3_Init+0xac>)
 8001ea0:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001ea4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001ea6:	4b20      	ldr	r3, [pc, #128]	@ (8001f28 <MX_TIM3_Init+0xac>)
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001eac:	4b1e      	ldr	r3, [pc, #120]	@ (8001f28 <MX_TIM3_Init+0xac>)
 8001eae:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001eb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f28 <MX_TIM3_Init+0xac>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eba:	4b1b      	ldr	r3, [pc, #108]	@ (8001f28 <MX_TIM3_Init+0xac>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ec0:	4819      	ldr	r0, [pc, #100]	@ (8001f28 <MX_TIM3_Init+0xac>)
 8001ec2:	f003 fc65 	bl	8005790 <HAL_TIM_Base_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ecc:	f000 fbc8 	bl	8002660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	4619      	mov	r1, r3
 8001edc:	4812      	ldr	r0, [pc, #72]	@ (8001f28 <MX_TIM3_Init+0xac>)
 8001ede:	f003 ffd3 	bl	8005e88 <HAL_TIM_ConfigClockSource>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001ee8:	f000 fbba 	bl	8002660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480b      	ldr	r0, [pc, #44]	@ (8001f28 <MX_TIM3_Init+0xac>)
 8001efa:	f004 fa0f 	bl	800631c <HAL_TIMEx_MasterConfigSynchronization>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f04:	f000 fbac 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK) {
 8001f08:	4807      	ldr	r0, [pc, #28]	@ (8001f28 <MX_TIM3_Init+0xac>)
 8001f0a:	f003 fd19 	bl	8005940 <HAL_TIM_Base_Start_IT>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM3_Init+0x9c>
		Error_Handler();
 8001f14:	f000 fba4 	bl	8002660 <Error_Handler>
	}
	HAL_TIM_Base_Start(&htim3);
 8001f18:	4803      	ldr	r0, [pc, #12]	@ (8001f28 <MX_TIM3_Init+0xac>)
 8001f1a:	f003 fc89 	bl	8005830 <HAL_TIM_Base_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8001f1e:	bf00      	nop
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000064c 	.word	0x2000064c
 8001f2c:	40000400 	.word	0x40000400

08001f30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08c      	sub	sp, #48	@ 0x30
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f36:	f107 030c 	add.w	r3, r7, #12
 8001f3a:	2224      	movs	r2, #36	@ 0x24
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f006 ffe8 	bl	8008f14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f4c:	4b20      	ldr	r3, [pc, #128]	@ (8001fd0 <MX_TIM5_Init+0xa0>)
 8001f4e:	4a21      	ldr	r2, [pc, #132]	@ (8001fd4 <MX_TIM5_Init+0xa4>)
 8001f50:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f52:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd0 <MX_TIM5_Init+0xa0>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f58:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <MX_TIM5_Init+0xa0>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd0 <MX_TIM5_Init+0xa0>)
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295
 8001f64:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f66:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd0 <MX_TIM5_Init+0xa0>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f6c:	4b18      	ldr	r3, [pc, #96]	@ (8001fd0 <MX_TIM5_Init+0xa0>)
 8001f6e:	2280      	movs	r2, #128	@ 0x80
 8001f70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f72:	2303      	movs	r3, #3
 8001f74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001f82:	230a      	movs	r3, #10
 8001f84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001f92:	230a      	movs	r3, #10
 8001f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001f96:	f107 030c 	add.w	r3, r7, #12
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	480c      	ldr	r0, [pc, #48]	@ (8001fd0 <MX_TIM5_Init+0xa0>)
 8001f9e:	f003 fd37 	bl	8005a10 <HAL_TIM_Encoder_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001fa8:	f000 fb5a 	bl	8002660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fac:	2300      	movs	r3, #0
 8001fae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <MX_TIM5_Init+0xa0>)
 8001fba:	f004 f9af 	bl	800631c <HAL_TIMEx_MasterConfigSynchronization>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001fc4:	f000 fb4c 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001fc8:	bf00      	nop
 8001fca:	3730      	adds	r7, #48	@ 0x30
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000698 	.word	0x20000698
 8001fd4:	40000c00 	.word	0x40000c00

08001fd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fdc:	4b15      	ldr	r3, [pc, #84]	@ (8002034 <MX_USART1_UART_Init+0x5c>)
 8001fde:	4a16      	ldr	r2, [pc, #88]	@ (8002038 <MX_USART1_UART_Init+0x60>)
 8001fe0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001fe2:	4b14      	ldr	r3, [pc, #80]	@ (8002034 <MX_USART1_UART_Init+0x5c>)
 8001fe4:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001fe8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001fea:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <MX_USART1_UART_Init+0x5c>)
 8001fec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ff0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <MX_USART1_UART_Init+0x5c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8002034 <MX_USART1_UART_Init+0x5c>)
 8001ffa:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001ffe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002000:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <MX_USART1_UART_Init+0x5c>)
 8002002:	220c      	movs	r2, #12
 8002004:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002006:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <MX_USART1_UART_Init+0x5c>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800200c:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <MX_USART1_UART_Init+0x5c>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002012:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <MX_USART1_UART_Init+0x5c>)
 8002014:	2200      	movs	r2, #0
 8002016:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002018:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <MX_USART1_UART_Init+0x5c>)
 800201a:	2200      	movs	r2, #0
 800201c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800201e:	4805      	ldr	r0, [pc, #20]	@ (8002034 <MX_USART1_UART_Init+0x5c>)
 8002020:	f004 fa04 	bl	800642c <HAL_UART_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800202a:	f000 fb19 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200006e4 	.word	0x200006e4
 8002038:	40013800 	.word	0x40013800

0800203c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002040:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <MX_USART3_UART_Init+0x58>)
 8002042:	4a15      	ldr	r2, [pc, #84]	@ (8002098 <MX_USART3_UART_Init+0x5c>)
 8002044:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002046:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <MX_USART3_UART_Init+0x58>)
 8002048:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800204c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <MX_USART3_UART_Init+0x58>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <MX_USART3_UART_Init+0x58>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800205a:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <MX_USART3_UART_Init+0x58>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b0c      	ldr	r3, [pc, #48]	@ (8002094 <MX_USART3_UART_Init+0x58>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <MX_USART3_UART_Init+0x58>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <MX_USART3_UART_Init+0x58>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002072:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <MX_USART3_UART_Init+0x58>)
 8002074:	2200      	movs	r2, #0
 8002076:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002078:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <MX_USART3_UART_Init+0x58>)
 800207a:	2200      	movs	r2, #0
 800207c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800207e:	4805      	ldr	r0, [pc, #20]	@ (8002094 <MX_USART3_UART_Init+0x58>)
 8002080:	f004 f9d4 	bl	800642c <HAL_UART_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800208a:	f000 fae9 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	2000076c 	.word	0x2000076c
 8002098:	40004800 	.word	0x40004800

0800209c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	@ 0x28
 80020a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a2:	f107 0314 	add.w	r3, r7, #20
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020b2:	4b50      	ldr	r3, [pc, #320]	@ (80021f4 <MX_GPIO_Init+0x158>)
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	4a4f      	ldr	r2, [pc, #316]	@ (80021f4 <MX_GPIO_Init+0x158>)
 80020b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020bc:	6153      	str	r3, [r2, #20]
 80020be:	4b4d      	ldr	r3, [pc, #308]	@ (80021f4 <MX_GPIO_Init+0x158>)
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	4b4a      	ldr	r3, [pc, #296]	@ (80021f4 <MX_GPIO_Init+0x158>)
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	4a49      	ldr	r2, [pc, #292]	@ (80021f4 <MX_GPIO_Init+0x158>)
 80020d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020d4:	6153      	str	r3, [r2, #20]
 80020d6:	4b47      	ldr	r3, [pc, #284]	@ (80021f4 <MX_GPIO_Init+0x158>)
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020e2:	4b44      	ldr	r3, [pc, #272]	@ (80021f4 <MX_GPIO_Init+0x158>)
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	4a43      	ldr	r2, [pc, #268]	@ (80021f4 <MX_GPIO_Init+0x158>)
 80020e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020ec:	6153      	str	r3, [r2, #20]
 80020ee:	4b41      	ldr	r3, [pc, #260]	@ (80021f4 <MX_GPIO_Init+0x158>)
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	4b3e      	ldr	r3, [pc, #248]	@ (80021f4 <MX_GPIO_Init+0x158>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	4a3d      	ldr	r2, [pc, #244]	@ (80021f4 <MX_GPIO_Init+0x158>)
 8002100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002104:	6153      	str	r3, [r2, #20]
 8002106:	4b3b      	ldr	r3, [pc, #236]	@ (80021f4 <MX_GPIO_Init+0x158>)
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PRINT_GO_GPIO_Port, PRINT_GO_Pin, GPIO_PIN_RESET);
 8002112:	2200      	movs	r2, #0
 8002114:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002118:	4837      	ldr	r0, [pc, #220]	@ (80021f8 <MX_GPIO_Init+0x15c>)
 800211a:	f001 f993 	bl	8003444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, NUC_PWR_EN_Pin|DISPLAY_PWR_EN_Pin, GPIO_PIN_RESET);
 800211e:	2200      	movs	r2, #0
 8002120:	21c0      	movs	r1, #192	@ 0xc0
 8002122:	4836      	ldr	r0, [pc, #216]	@ (80021fc <MX_GPIO_Init+0x160>)
 8002124:	f001 f98e 	bl	8003444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER_A_GPIO_Port, ENCODER_A_Pin, GPIO_PIN_SET);
 8002128:	2201      	movs	r2, #1
 800212a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800212e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002132:	f001 f987 	bl	8003444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER_B_GPIO_Port, ENCODER_B_Pin, GPIO_PIN_SET);
 8002136:	2201      	movs	r2, #1
 8002138:	2108      	movs	r1, #8
 800213a:	4831      	ldr	r0, [pc, #196]	@ (8002200 <MX_GPIO_Init+0x164>)
 800213c:	f001 f982 	bl	8003444 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIP_5_Pin DIP_4_Pin DIP_3_Pin DIP_2_Pin
                           DIP_1_Pin DIP_0_Pin */
  GPIO_InitStruct.Pin = DIP_5_Pin|DIP_4_Pin|DIP_3_Pin|DIP_2_Pin
 8002140:	f44f 73be 	mov.w	r3, #380	@ 0x17c
 8002144:	617b      	str	r3, [r7, #20]
                          |DIP_1_Pin|DIP_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	f107 0314 	add.w	r3, r7, #20
 8002152:	4619      	mov	r1, r3
 8002154:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002158:	f000 ffe2 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PRINT_GO_Pin */
  GPIO_InitStruct.Pin = PRINT_GO_Pin;
 800215c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002162:	2301      	movs	r3, #1
 8002164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PRINT_GO_GPIO_Port, &GPIO_InitStruct);
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	4619      	mov	r1, r3
 8002174:	4820      	ldr	r0, [pc, #128]	@ (80021f8 <MX_GPIO_Init+0x15c>)
 8002176:	f000 ffd3 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PRINT_DONE_Pin */
  GPIO_InitStruct.Pin = PRINT_DONE_Pin;
 800217a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800217e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002180:	2300      	movs	r3, #0
 8002182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PRINT_DONE_GPIO_Port, &GPIO_InitStruct);
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	4619      	mov	r1, r3
 800218e:	481a      	ldr	r0, [pc, #104]	@ (80021f8 <MX_GPIO_Init+0x15c>)
 8002190:	f000 ffc6 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pins : NUC_PWR_EN_Pin DISPLAY_PWR_EN_Pin */
  GPIO_InitStruct.Pin = NUC_PWR_EN_Pin|DISPLAY_PWR_EN_Pin;
 8002194:	23c0      	movs	r3, #192	@ 0xc0
 8002196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002198:	2301      	movs	r3, #1
 800219a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a0:	2300      	movs	r3, #0
 80021a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	4619      	mov	r1, r3
 80021aa:	4814      	ldr	r0, [pc, #80]	@ (80021fc <MX_GPIO_Init+0x160>)
 80021ac:	f000 ffb8 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_A_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin;
 80021b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b6:	2301      	movs	r3, #1
 80021b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021be:	2303      	movs	r3, #3
 80021c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	4619      	mov	r1, r3
 80021c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021cc:	f000 ffa8 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_B_Pin;
 80021d0:	2308      	movs	r3, #8
 80021d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d4:	2301      	movs	r3, #1
 80021d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021dc:	2303      	movs	r3, #3
 80021de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	4619      	mov	r1, r3
 80021e6:	4806      	ldr	r0, [pc, #24]	@ (8002200 <MX_GPIO_Init+0x164>)
 80021e8:	f000 ff9a 	bl	8003120 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021ec:	bf00      	nop
 80021ee:	3728      	adds	r7, #40	@ 0x28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40021000 	.word	0x40021000
 80021f8:	48001000 	.word	0x48001000
 80021fc:	48001400 	.word	0x48001400
 8002200:	48000400 	.word	0x48000400

08002204 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//--- HAL_TIM_PeriodElapsedCallback -------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	if (htim==&htim3) 		enc_in_irq(htim);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a09      	ldr	r2, [pc, #36]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d103      	bne.n	800221c <HAL_TIM_PeriodElapsedCallback+0x18>
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff fa61 	bl	80016dc <enc_in_irq>
	else if (htim==&htim2) 	enc_out_irq(htim);
}
 800221a:	e006      	b.n	800222a <HAL_TIM_PeriodElapsedCallback+0x26>
	else if (htim==&htim2) 	enc_out_irq(htim);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a06      	ldr	r2, [pc, #24]	@ (8002238 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d102      	bne.n	800222a <HAL_TIM_PeriodElapsedCallback+0x26>
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff fbf1 	bl	8001a0c <enc_out_irq>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	2000064c 	.word	0x2000064c
 8002238:	20000600 	.word	0x20000600

0800223c <enc_get_pos>:

//--- enc_get_pos -------------------------------------
int32_t	enc_get_pos(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5);
 8002240:	4b03      	ldr	r3, [pc, #12]	@ (8002250 <enc_get_pos+0x14>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	20000698 	.word	0x20000698

08002254 <HAL_UART_RxCpltCallback>:

// UART RX Interrupt function override
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a11      	ldr	r2, [pc, #68]	@ (80022a8 <HAL_UART_RxCpltCallback+0x54>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d10b      	bne.n	800227e <HAL_UART_RxCpltCallback+0x2a>
	{
		box_handle_ferag_char(RxDataFERAG);
 8002266:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <HAL_UART_RxCpltCallback+0x58>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe ffa5 	bl	80011bc <box_handle_ferag_char>
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&RxDataFERAG, 1);
 8002272:	2201      	movs	r2, #1
 8002274:	490d      	ldr	r1, [pc, #52]	@ (80022ac <HAL_UART_RxCpltCallback+0x58>)
 8002276:	480e      	ldr	r0, [pc, #56]	@ (80022b0 <HAL_UART_RxCpltCallback+0x5c>)
 8002278:	f004 fa0e 	bl	8006698 <HAL_UART_Receive_IT>
	else if (huart->Instance == USART3)
	{
		term_handle_char(RxDataNUC);
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&RxDataNUC, 1);
	}
}
 800227c:	e00f      	b.n	800229e <HAL_UART_RxCpltCallback+0x4a>
	else if (huart->Instance == USART3)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a0c      	ldr	r2, [pc, #48]	@ (80022b4 <HAL_UART_RxCpltCallback+0x60>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d10a      	bne.n	800229e <HAL_UART_RxCpltCallback+0x4a>
		term_handle_char(RxDataNUC);
 8002288:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <HAL_UART_RxCpltCallback+0x64>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	4618      	mov	r0, r3
 8002290:	f000 fc96 	bl	8002bc0 <term_handle_char>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&RxDataNUC, 1);
 8002294:	2201      	movs	r2, #1
 8002296:	4908      	ldr	r1, [pc, #32]	@ (80022b8 <HAL_UART_RxCpltCallback+0x64>)
 8002298:	4808      	ldr	r0, [pc, #32]	@ (80022bc <HAL_UART_RxCpltCallback+0x68>)
 800229a:	f004 f9fd 	bl	8006698 <HAL_UART_Receive_IT>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40013800 	.word	0x40013800
 80022ac:	200007f5 	.word	0x200007f5
 80022b0:	200006e4 	.word	0x200006e4
 80022b4:	40004800 	.word	0x40004800
 80022b8:	200007f4 	.word	0x200007f4
 80022bc:	2000076c 	.word	0x2000076c

080022c0 <ferag_send_char>:

//--- ferag_send_char -----------------------
void ferag_send_char(char data)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 80022ca:	1df9      	adds	r1, r7, #7
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295
 80022d0:	2201      	movs	r2, #1
 80022d2:	4803      	ldr	r0, [pc, #12]	@ (80022e0 <ferag_send_char+0x20>)
 80022d4:	f004 f8f8 	bl	80064c8 <HAL_UART_Transmit>
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	200006e4 	.word	0x200006e4

080022e4 <_tick_10ms>:

//--- _tick_10ms ---------------------
static void _tick_10ms(int ticks)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	box_tick_10ms(ticks);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7fe fe65 	bl	8000fbc <box_tick_10ms>
	enc_tick_10ms(ticks);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff fa50 	bl	8001798 <enc_tick_10ms>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <adc_get_value>:

//--- adc_get_value --------------------------
float adc_get_value(int no, float factor)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	ed87 0a00 	vstr	s0, [r7]
	uint16_t val;
	AD5593R_ReadADC(&hi2c1, 0x10 << 1, no, &val);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	b2da      	uxtb	r2, r3
 8002310:	f107 030e 	add.w	r3, r7, #14
 8002314:	2120      	movs	r1, #32
 8002316:	480b      	ldr	r0, [pc, #44]	@ (8002344 <adc_get_value+0x44>)
 8002318:	f7fe fd37 	bl	8000d8a <AD5593R_ReadADC>
	return ((float)val * factor) / 4095.0;
 800231c:	89fb      	ldrh	r3, [r7, #14]
 800231e:	ee07 3a90 	vmov	s15, r3
 8002322:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002326:	edd7 7a00 	vldr	s15, [r7]
 800232a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002348 <adc_get_value+0x48>
 8002332:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002336:	eef0 7a66 	vmov.f32	s15, s13
}
 800233a:	eeb0 0a67 	vmov.f32	s0, s15
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	200005ac 	.word	0x200005ac
 8002348:	457ff000 	.word	0x457ff000

0800234c <adc_get_temp>:

//--- adc_get_temp --------------------------------------
float adc_get_temp(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
    const float ADC_25 = 819.0; // ADC value at 25 degrees Celsius
 8002352:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <adc_get_temp+0x48>)
 8002354:	60fb      	str	r3, [r7, #12]
    const float SLOPE = 2.654; // ADC counts per degree Celsius
 8002356:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <adc_get_temp+0x4c>)
 8002358:	60bb      	str	r3, [r7, #8]
	uint16_t val;
	AD5593R_ReadADC(&hi2c1, 0x10 << 1, 8, &val);
 800235a:	1dbb      	adds	r3, r7, #6
 800235c:	2208      	movs	r2, #8
 800235e:	2120      	movs	r1, #32
 8002360:	480e      	ldr	r0, [pc, #56]	@ (800239c <adc_get_temp+0x50>)
 8002362:	f7fe fd12 	bl	8000d8a <AD5593R_ReadADC>
    return 25.0 + ((float)val - ADC_25) / SLOPE;
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	ee07 3a90 	vmov	s15, r3
 800236c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002370:	edd7 7a03 	vldr	s15, [r7, #12]
 8002374:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002378:	ed97 7a02 	vldr	s14, [r7, #8]
 800237c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002380:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002384:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8002388:	eeb0 0a67 	vmov.f32	s0, s15
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	444cc000 	.word	0x444cc000
 8002398:	4029db23 	.word	0x4029db23
 800239c:	200005ac 	.word	0x200005ac

080023a0 <adc_get_revision>:

//--- adc_get_revision ------------------------------------
uint8_t adc_get_revision(float val)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	ed87 0a01 	vstr	s0, [r7, #4]
	const float baseVoltage = 0.075f; // Base voltage (0.1V - 0.025V)
 80023aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002424 <adc_get_revision+0x84>)
 80023ac:	617b      	str	r3, [r7, #20]
    const float increment = 0.1f; // Voltage increment per revision
 80023ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002428 <adc_get_revision+0x88>)
 80023b0:	613b      	str	r3, [r7, #16]
    const float maxValidVoltage = 26.0f; // Example: max expected voltage, adjust based on your last revision
 80023b2:	4b1e      	ldr	r3, [pc, #120]	@ (800242c <adc_get_revision+0x8c>)
 80023b4:	60fb      	str	r3, [r7, #12]

    if (val < baseVoltage || val > maxValidVoltage) return 0; // Invalid voltage
 80023b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80023ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80023be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c6:	d408      	bmi.n	80023da <adc_get_revision+0x3a>
 80023c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80023cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80023d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	dd01      	ble.n	80023de <adc_get_revision+0x3e>
 80023da:	2300      	movs	r3, #0
 80023dc:	e01d      	b.n	800241a <adc_get_revision+0x7a>

    return (uint8_t)floor((val - baseVoltage) / increment) + 1;
 80023de:	ed97 7a01 	vldr	s14, [r7, #4]
 80023e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80023e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80023ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023f2:	ee16 0a90 	vmov	r0, s13
 80023f6:	f7fe f8a7 	bl	8000548 <__aeabi_f2d>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	ec43 2b10 	vmov	d0, r2, r3
 8002402:	f00a fba1 	bl	800cb48 <floor>
 8002406:	ec53 2b10 	vmov	r2, r3, d0
 800240a:	4610      	mov	r0, r2
 800240c:	4619      	mov	r1, r3
 800240e:	f7fe fbcb 	bl	8000ba8 <__aeabi_d2uiz>
 8002412:	4603      	mov	r3, r0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	3301      	adds	r3, #1
 8002418:	b2db      	uxtb	r3, r3
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	3d99999a 	.word	0x3d99999a
 8002428:	3dcccccd 	.word	0x3dcccccd
 800242c:	41d00000 	.word	0x41d00000

08002430 <gpio_get_dipswitches>:

//--- gpio_get_dipswitches -------------------------------
uint8_t gpio_get_dipswitches(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
    uint8_t dipswitches = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	71fb      	strb	r3, [r7, #7]

    if (HAL_GPIO_ReadPin(DIP_0_GPIO_Port, DIP_0_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 0;
 800243a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800243e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002442:	f000 ffe7 	bl	8003414 <HAL_GPIO_ReadPin>
 8002446:	4603      	mov	r3, r0
 8002448:	2b01      	cmp	r3, #1
 800244a:	d103      	bne.n	8002454 <gpio_get_dipswitches+0x24>
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_1_GPIO_Port, DIP_1_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 1;
 8002454:	2140      	movs	r1, #64	@ 0x40
 8002456:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800245a:	f000 ffdb 	bl	8003414 <HAL_GPIO_ReadPin>
 800245e:	4603      	mov	r3, r0
 8002460:	2b01      	cmp	r3, #1
 8002462:	d103      	bne.n	800246c <gpio_get_dipswitches+0x3c>
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	f043 0302 	orr.w	r3, r3, #2
 800246a:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_2_GPIO_Port, DIP_2_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 2;
 800246c:	2120      	movs	r1, #32
 800246e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002472:	f000 ffcf 	bl	8003414 <HAL_GPIO_ReadPin>
 8002476:	4603      	mov	r3, r0
 8002478:	2b01      	cmp	r3, #1
 800247a:	d103      	bne.n	8002484 <gpio_get_dipswitches+0x54>
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_3_GPIO_Port, DIP_3_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 3;
 8002484:	2110      	movs	r1, #16
 8002486:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800248a:	f000 ffc3 	bl	8003414 <HAL_GPIO_ReadPin>
 800248e:	4603      	mov	r3, r0
 8002490:	2b01      	cmp	r3, #1
 8002492:	d103      	bne.n	800249c <gpio_get_dipswitches+0x6c>
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	f043 0308 	orr.w	r3, r3, #8
 800249a:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_4_GPIO_Port, DIP_4_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 4;
 800249c:	2108      	movs	r1, #8
 800249e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024a2:	f000 ffb7 	bl	8003414 <HAL_GPIO_ReadPin>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d103      	bne.n	80024b4 <gpio_get_dipswitches+0x84>
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	f043 0310 	orr.w	r3, r3, #16
 80024b2:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DIP_5_GPIO_Port, DIP_5_Pin) == GPIO_PIN_SET) dipswitches |= 1 << 5;
 80024b4:	2104      	movs	r1, #4
 80024b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024ba:	f000 ffab 	bl	8003414 <HAL_GPIO_ReadPin>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d103      	bne.n	80024cc <gpio_get_dipswitches+0x9c>
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	f043 0320 	orr.w	r3, r3, #32
 80024ca:	71fb      	strb	r3, [r7, #7]

    return dipswitches;
 80024cc:	79fb      	ldrb	r3, [r7, #7]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <power_nuc>:

//--- power_nuc -----------------------------
void    power_nuc(int on)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	if (on) HAL_GPIO_WritePin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin, GPIO_PIN_SET);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <power_nuc+0x1a>
 80024e6:	2201      	movs	r2, #1
 80024e8:	2140      	movs	r1, #64	@ 0x40
 80024ea:	4806      	ldr	r0, [pc, #24]	@ (8002504 <power_nuc+0x2c>)
 80024ec:	f000 ffaa 	bl	8003444 <HAL_GPIO_WritePin>
	else 	HAL_GPIO_WritePin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin, GPIO_PIN_RESET);
}
 80024f0:	e004      	b.n	80024fc <power_nuc+0x24>
	else 	HAL_GPIO_WritePin(NUC_PWR_EN_GPIO_Port, NUC_PWR_EN_Pin, GPIO_PIN_RESET);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2140      	movs	r1, #64	@ 0x40
 80024f6:	4803      	ldr	r0, [pc, #12]	@ (8002504 <power_nuc+0x2c>)
 80024f8:	f000 ffa4 	bl	8003444 <HAL_GPIO_WritePin>
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	48001400 	.word	0x48001400

08002508 <power_display>:

//--- power_display -------------------------
void    power_display(int on)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	if (on) HAL_GPIO_WritePin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin, GPIO_PIN_SET);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <power_display+0x1a>
 8002516:	2201      	movs	r2, #1
 8002518:	2180      	movs	r1, #128	@ 0x80
 800251a:	4806      	ldr	r0, [pc, #24]	@ (8002534 <power_display+0x2c>)
 800251c:	f000 ff92 	bl	8003444 <HAL_GPIO_WritePin>
	else 	HAL_GPIO_WritePin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin, GPIO_PIN_RESET);
}
 8002520:	e004      	b.n	800252c <power_display+0x24>
	else 	HAL_GPIO_WritePin(DISPLAY_PWR_EN_GPIO_Port, DISPLAY_PWR_EN_Pin, GPIO_PIN_RESET);
 8002522:	2200      	movs	r2, #0
 8002524:	2180      	movs	r1, #128	@ 0x80
 8002526:	4803      	ldr	r0, [pc, #12]	@ (8002534 <power_display+0x2c>)
 8002528:	f000 ff8c 	bl	8003444 <HAL_GPIO_WritePin>
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	48001400 	.word	0x48001400

08002538 <_nuc_send_next>:

void _nuc_send_next()
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
	if (_NUC_InIdx!=_NUC_StartIdx && !_NUC_Busy)
 800253e:	4b1e      	ldr	r3, [pc, #120]	@ (80025b8 <_nuc_send_next+0x80>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4b1e      	ldr	r3, [pc, #120]	@ (80025bc <_nuc_send_next+0x84>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d031      	beq.n	80025ae <_nuc_send_next+0x76>
 800254a:	4b1d      	ldr	r3, [pc, #116]	@ (80025c0 <_nuc_send_next+0x88>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d12d      	bne.n	80025ae <_nuc_send_next+0x76>
	{
		int time=HAL_GetTick();
 8002552:	f000 fc51 	bl	8002df8 <HAL_GetTick>
 8002556:	4603      	mov	r3, r0
 8002558:	607b      	str	r3, [r7, #4]
		_NUC_Busy = TRUE;
 800255a:	4b19      	ldr	r3, [pc, #100]	@ (80025c0 <_nuc_send_next+0x88>)
 800255c:	2201      	movs	r2, #1
 800255e:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, TxDataNuc[_NUC_StartIdx], TxDataLenNuc[_NUC_StartIdx]); // NUC
 8002560:	4b16      	ldr	r3, [pc, #88]	@ (80025bc <_nuc_send_next+0x84>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	025b      	lsls	r3, r3, #9
 8002566:	4a17      	ldr	r2, [pc, #92]	@ (80025c4 <_nuc_send_next+0x8c>)
 8002568:	1899      	adds	r1, r3, r2
 800256a:	4b14      	ldr	r3, [pc, #80]	@ (80025bc <_nuc_send_next+0x84>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a16      	ldr	r2, [pc, #88]	@ (80025c8 <_nuc_send_next+0x90>)
 8002570:	5cd3      	ldrb	r3, [r2, r3]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	4815      	ldr	r0, [pc, #84]	@ (80025cc <_nuc_send_next+0x94>)
 8002578:	f004 f830 	bl	80065dc <HAL_UART_Transmit_IT>
		_NUC_StartIdx = (_NUC_StartIdx+1) % NUC_FIFO_CNT;
 800257c:	4b0f      	ldr	r3, [pc, #60]	@ (80025bc <_nuc_send_next+0x84>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	3301      	adds	r3, #1
 8002582:	425a      	negs	r2, r3
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	f002 0203 	and.w	r2, r2, #3
 800258c:	bf58      	it	pl
 800258e:	4253      	negpl	r3, r2
 8002590:	4a0a      	ldr	r2, [pc, #40]	@ (80025bc <_nuc_send_next+0x84>)
 8002592:	6013      	str	r3, [r2, #0]
	    time=HAL_GetTick()-time;
 8002594:	f000 fc30 	bl	8002df8 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	607b      	str	r3, [r7, #4]
	    if (time>1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	dd03      	ble.n	80025ae <_nuc_send_next+0x76>
	    	printf("WARN: UART send time=%d\n", time);
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4809      	ldr	r0, [pc, #36]	@ (80025d0 <_nuc_send_next+0x98>)
 80025aa:	f006 fb1f 	bl	8008bec <iprintf>
	}
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000ffc 	.word	0x20000ffc
 80025bc:	20001000 	.word	0x20001000
 80025c0:	20001004 	.word	0x20001004
 80025c4:	200007f8 	.word	0x200007f8
 80025c8:	20000ff8 	.word	0x20000ff8
 80025cc:	2000076c 	.word	0x2000076c
 80025d0:	0800ceec 	.word	0x0800ceec

080025d4 <HAL_UART_TxCpltCallback>:

//--- HAL_UART_TxCpltCallback ---------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	_NUC_Busy = FALSE;
 80025dc:	4b04      	ldr	r3, [pc, #16]	@ (80025f0 <HAL_UART_TxCpltCallback+0x1c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
	_nuc_send_next();
 80025e2:	f7ff ffa9 	bl	8002538 <_nuc_send_next>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20001004 	.word	0x20001004

080025f4 <_write>:

//--- WRITE_PROTOTYPE ----------------------------------------------------
// Retarget stdout to UART and CDC
WRITE_PROTOTYPE {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
	int idx = (_NUC_InIdx+1) % NUC_FIFO_CNT;
 8002600:	4b14      	ldr	r3, [pc, #80]	@ (8002654 <_write+0x60>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	3301      	adds	r3, #1
 8002606:	425a      	negs	r2, r3
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	f002 0203 	and.w	r2, r2, #3
 8002610:	bf58      	it	pl
 8002612:	4253      	negpl	r3, r2
 8002614:	617b      	str	r3, [r7, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002616:	b672      	cpsid	i
}
 8002618:	bf00      	nop
	__disable_irq();
	TxDataLenNuc[_NUC_InIdx] = len;
 800261a:	4b0e      	ldr	r3, [pc, #56]	@ (8002654 <_write+0x60>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	b2d1      	uxtb	r1, r2
 8002622:	4a0d      	ldr	r2, [pc, #52]	@ (8002658 <_write+0x64>)
 8002624:	54d1      	strb	r1, [r2, r3]
	memcpy(&TxDataNuc[_NUC_InIdx], ptr, len);
 8002626:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <_write+0x60>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	025b      	lsls	r3, r3, #9
 800262c:	4a0b      	ldr	r2, [pc, #44]	@ (800265c <_write+0x68>)
 800262e:	4413      	add	r3, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	4618      	mov	r0, r3
 8002636:	f006 fcfe 	bl	8009036 <memcpy>
	_NUC_InIdx = idx;
 800263a:	4a06      	ldr	r2, [pc, #24]	@ (8002654 <_write+0x60>)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002640:	b662      	cpsie	i
}
 8002642:	bf00      	nop
	__enable_irq();

	_nuc_send_next();
 8002644:	f7ff ff78 	bl	8002538 <_nuc_send_next>
  //  HAL_UART_Transmit_IT(&huart1, ptr, len); // debugging
    time=HAL_GetTick()-time;
    if (time>0)
    	printf("WARN: UART send time=%d\n", time);
    	*/
    return len; // Return the number of characters written
 8002648:	687b      	ldr	r3, [r7, #4]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000ffc 	.word	0x20000ffc
 8002658:	20000ff8 	.word	0x20000ff8
 800265c:	200007f8 	.word	0x200007f8

08002660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002664:	b672      	cpsid	i
}
 8002666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002668:	e7fe      	b.n	8002668 <Error_Handler+0x8>
	...

0800266c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <HAL_MspInit+0x50>)
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	4a11      	ldr	r2, [pc, #68]	@ (80026bc <HAL_MspInit+0x50>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6193      	str	r3, [r2, #24]
 800267e:	4b0f      	ldr	r3, [pc, #60]	@ (80026bc <HAL_MspInit+0x50>)
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	607b      	str	r3, [r7, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <HAL_MspInit+0x50>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	4a0b      	ldr	r2, [pc, #44]	@ (80026bc <HAL_MspInit+0x50>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002694:	61d3      	str	r3, [r2, #28]
 8002696:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <HAL_MspInit+0x50>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	2005      	movs	r0, #5
 80026a8:	f000 fc8d 	bl	8002fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80026ac:	2005      	movs	r0, #5
 80026ae:	f000 fca6 	bl	8002ffe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000

080026c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	@ 0x28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a17      	ldr	r2, [pc, #92]	@ (800273c <HAL_I2C_MspInit+0x7c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d127      	bne.n	8002732 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e2:	4b17      	ldr	r3, [pc, #92]	@ (8002740 <HAL_I2C_MspInit+0x80>)
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	4a16      	ldr	r2, [pc, #88]	@ (8002740 <HAL_I2C_MspInit+0x80>)
 80026e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026ec:	6153      	str	r3, [r2, #20]
 80026ee:	4b14      	ldr	r3, [pc, #80]	@ (8002740 <HAL_I2C_MspInit+0x80>)
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80026fa:	23c0      	movs	r3, #192	@ 0xc0
 80026fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026fe:	2312      	movs	r3, #18
 8002700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002706:	2303      	movs	r3, #3
 8002708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800270a:	2304      	movs	r3, #4
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270e:	f107 0314 	add.w	r3, r7, #20
 8002712:	4619      	mov	r1, r3
 8002714:	480b      	ldr	r0, [pc, #44]	@ (8002744 <HAL_I2C_MspInit+0x84>)
 8002716:	f000 fd03 	bl	8003120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800271a:	4b09      	ldr	r3, [pc, #36]	@ (8002740 <HAL_I2C_MspInit+0x80>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4a08      	ldr	r2, [pc, #32]	@ (8002740 <HAL_I2C_MspInit+0x80>)
 8002720:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002724:	61d3      	str	r3, [r2, #28]
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_I2C_MspInit+0x80>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002732:	bf00      	nop
 8002734:	3728      	adds	r7, #40	@ 0x28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40005400 	.word	0x40005400
 8002740:	40021000 	.word	0x40021000
 8002744:	48000400 	.word	0x48000400

08002748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002758:	d114      	bne.n	8002784 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800275a:	4b19      	ldr	r3, [pc, #100]	@ (80027c0 <HAL_TIM_Base_MspInit+0x78>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	4a18      	ldr	r2, [pc, #96]	@ (80027c0 <HAL_TIM_Base_MspInit+0x78>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	61d3      	str	r3, [r2, #28]
 8002766:	4b16      	ldr	r3, [pc, #88]	@ (80027c0 <HAL_TIM_Base_MspInit+0x78>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2101      	movs	r1, #1
 8002776:	201c      	movs	r0, #28
 8002778:	f000 fc25 	bl	8002fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800277c:	201c      	movs	r0, #28
 800277e:	f000 fc3e 	bl	8002ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002782:	e018      	b.n	80027b6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0e      	ldr	r2, [pc, #56]	@ (80027c4 <HAL_TIM_Base_MspInit+0x7c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d113      	bne.n	80027b6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800278e:	4b0c      	ldr	r3, [pc, #48]	@ (80027c0 <HAL_TIM_Base_MspInit+0x78>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4a0b      	ldr	r2, [pc, #44]	@ (80027c0 <HAL_TIM_Base_MspInit+0x78>)
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	61d3      	str	r3, [r2, #28]
 800279a:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <HAL_TIM_Base_MspInit+0x78>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027a6:	2200      	movs	r2, #0
 80027a8:	2100      	movs	r1, #0
 80027aa:	201d      	movs	r0, #29
 80027ac:	f000 fc0b 	bl	8002fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027b0:	201d      	movs	r0, #29
 80027b2:	f000 fc24 	bl	8002ffe <HAL_NVIC_EnableIRQ>
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40000400 	.word	0x40000400

080027c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	@ 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002854 <HAL_TIM_Encoder_MspInit+0x8c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d130      	bne.n	800284c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002858 <HAL_TIM_Encoder_MspInit+0x90>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002858 <HAL_TIM_Encoder_MspInit+0x90>)
 80027f0:	f043 0308 	orr.w	r3, r3, #8
 80027f4:	61d3      	str	r3, [r2, #28]
 80027f6:	4b18      	ldr	r3, [pc, #96]	@ (8002858 <HAL_TIM_Encoder_MspInit+0x90>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002802:	4b15      	ldr	r3, [pc, #84]	@ (8002858 <HAL_TIM_Encoder_MspInit+0x90>)
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	4a14      	ldr	r2, [pc, #80]	@ (8002858 <HAL_TIM_Encoder_MspInit+0x90>)
 8002808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800280c:	6153      	str	r3, [r2, #20]
 800280e:	4b12      	ldr	r3, [pc, #72]	@ (8002858 <HAL_TIM_Encoder_MspInit+0x90>)
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800281a:	2303      	movs	r3, #3
 800281c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002826:	2300      	movs	r3, #0
 8002828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800282a:	2302      	movs	r3, #2
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002838:	f000 fc72 	bl	8003120 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800283c:	2200      	movs	r2, #0
 800283e:	2100      	movs	r1, #0
 8002840:	2032      	movs	r0, #50	@ 0x32
 8002842:	f000 fbc0 	bl	8002fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002846:	2032      	movs	r0, #50	@ 0x32
 8002848:	f000 fbd9 	bl	8002ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800284c:	bf00      	nop
 800284e:	3728      	adds	r7, #40	@ 0x28
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40000c00 	.word	0x40000c00
 8002858:	40021000 	.word	0x40021000

0800285c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08c      	sub	sp, #48	@ 0x30
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 031c 	add.w	r3, r7, #28
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a37      	ldr	r2, [pc, #220]	@ (8002958 <HAL_UART_MspInit+0xfc>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d132      	bne.n	80028e4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800287e:	4b37      	ldr	r3, [pc, #220]	@ (800295c <HAL_UART_MspInit+0x100>)
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	4a36      	ldr	r2, [pc, #216]	@ (800295c <HAL_UART_MspInit+0x100>)
 8002884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002888:	6193      	str	r3, [r2, #24]
 800288a:	4b34      	ldr	r3, [pc, #208]	@ (800295c <HAL_UART_MspInit+0x100>)
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002892:	61bb      	str	r3, [r7, #24]
 8002894:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002896:	4b31      	ldr	r3, [pc, #196]	@ (800295c <HAL_UART_MspInit+0x100>)
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	4a30      	ldr	r2, [pc, #192]	@ (800295c <HAL_UART_MspInit+0x100>)
 800289c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a0:	6153      	str	r3, [r2, #20]
 80028a2:	4b2e      	ldr	r3, [pc, #184]	@ (800295c <HAL_UART_MspInit+0x100>)
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS422_COM_TX_Pin|RS422_COM_RX_Pin;
 80028ae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80028b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028bc:	2303      	movs	r3, #3
 80028be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028c0:	2307      	movs	r3, #7
 80028c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c4:	f107 031c 	add.w	r3, r7, #28
 80028c8:	4619      	mov	r1, r3
 80028ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028ce:	f000 fc27 	bl	8003120 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028d2:	2200      	movs	r2, #0
 80028d4:	2100      	movs	r1, #0
 80028d6:	2025      	movs	r0, #37	@ 0x25
 80028d8:	f000 fb75 	bl	8002fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028dc:	2025      	movs	r0, #37	@ 0x25
 80028de:	f000 fb8e 	bl	8002ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028e2:	e035      	b.n	8002950 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002960 <HAL_UART_MspInit+0x104>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d130      	bne.n	8002950 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028ee:	4b1b      	ldr	r3, [pc, #108]	@ (800295c <HAL_UART_MspInit+0x100>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	4a1a      	ldr	r2, [pc, #104]	@ (800295c <HAL_UART_MspInit+0x100>)
 80028f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028f8:	61d3      	str	r3, [r2, #28]
 80028fa:	4b18      	ldr	r3, [pc, #96]	@ (800295c <HAL_UART_MspInit+0x100>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002906:	4b15      	ldr	r3, [pc, #84]	@ (800295c <HAL_UART_MspInit+0x100>)
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	4a14      	ldr	r2, [pc, #80]	@ (800295c <HAL_UART_MspInit+0x100>)
 800290c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002910:	6153      	str	r3, [r2, #20]
 8002912:	4b12      	ldr	r3, [pc, #72]	@ (800295c <HAL_UART_MspInit+0x100>)
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_NUC_TX_Pin|UART_NUC_RX_Pin;
 800291e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800292c:	2303      	movs	r3, #3
 800292e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002930:	2307      	movs	r3, #7
 8002932:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002934:	f107 031c 	add.w	r3, r7, #28
 8002938:	4619      	mov	r1, r3
 800293a:	480a      	ldr	r0, [pc, #40]	@ (8002964 <HAL_UART_MspInit+0x108>)
 800293c:	f000 fbf0 	bl	8003120 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002940:	2200      	movs	r2, #0
 8002942:	2100      	movs	r1, #0
 8002944:	2027      	movs	r0, #39	@ 0x27
 8002946:	f000 fb3e 	bl	8002fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800294a:	2027      	movs	r0, #39	@ 0x27
 800294c:	f000 fb57 	bl	8002ffe <HAL_NVIC_EnableIRQ>
}
 8002950:	bf00      	nop
 8002952:	3730      	adds	r7, #48	@ 0x30
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40013800 	.word	0x40013800
 800295c:	40021000 	.word	0x40021000
 8002960:	40004800 	.word	0x40004800
 8002964:	48000400 	.word	0x48000400

08002968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800296c:	e7fe      	b.n	800296c <NMI_Handler+0x4>

0800296e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002972:	e7fe      	b.n	8002972 <HardFault_Handler+0x4>

08002974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002978:	e7fe      	b.n	8002978 <MemManage_Handler+0x4>

0800297a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800297e:	e7fe      	b.n	800297e <BusFault_Handler+0x4>

08002980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <UsageFault_Handler+0x4>

08002986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b4:	f000 fa0c 	bl	8002dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}

080029bc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029d0:	4802      	ldr	r0, [pc, #8]	@ (80029dc <TIM2_IRQHandler+0x10>)
 80029d2:	f003 f951 	bl	8005c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000600 	.word	0x20000600

080029e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029e4:	4802      	ldr	r0, [pc, #8]	@ (80029f0 <TIM3_IRQHandler+0x10>)
 80029e6:	f003 f947 	bl	8005c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	2000064c 	.word	0x2000064c

080029f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029f8:	4802      	ldr	r0, [pc, #8]	@ (8002a04 <USART1_IRQHandler+0x10>)
 80029fa:	f003 fe91 	bl	8006720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200006e4 	.word	0x200006e4

08002a08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a0c:	4802      	ldr	r0, [pc, #8]	@ (8002a18 <USART3_IRQHandler+0x10>)
 8002a0e:	f003 fe87 	bl	8006720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	2000076c 	.word	0x2000076c

08002a1c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002a20:	4802      	ldr	r0, [pc, #8]	@ (8002a2c <TIM5_IRQHandler+0x10>)
 8002a22:	f003 f929 	bl	8005c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000698 	.word	0x20000698

08002a30 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
	return 1;
 8002a34:	2301      	movs	r3, #1
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <_kill>:

int _kill(int pid, int sig) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8002a4a:	f006 fac7 	bl	8008fdc <__errno>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2216      	movs	r2, #22
 8002a52:	601a      	str	r2, [r3, #0]
	return -1;
 8002a54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <_exit>:

void _exit(int status) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a68:	f04f 31ff 	mov.w	r1, #4294967295
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff ffe7 	bl	8002a40 <_kill>
	while (1) {
 8002a72:	e7fe      	b.n	8002a72 <_exit+0x12>

08002a74 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	e00a      	b.n	8002a9c <_read+0x28>
		*ptr++ = __io_getchar();
 8002a86:	f3af 8000 	nop.w
 8002a8a:	4601      	mov	r1, r0
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	60ba      	str	r2, [r7, #8]
 8002a92:	b2ca      	uxtb	r2, r1
 8002a94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	dbf0      	blt.n	8002a86 <_read+0x12>
	}

	return len;
 8002aa4:	687b      	ldr	r3, [r7, #4]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002ab6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ad6:	605a      	str	r2, [r3, #4]
	return 0;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <_isatty>:

int _isatty(int file) {
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002aee:	2301      	movs	r3, #1
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002b20:	4a14      	ldr	r2, [pc, #80]	@ (8002b74 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002b22:	4b15      	ldr	r3, [pc, #84]	@ (8002b78 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002b2c:	4b13      	ldr	r3, [pc, #76]	@ (8002b7c <_sbrk+0x64>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d102      	bne.n	8002b3a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002b34:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <_sbrk+0x64>)
 8002b36:	4a12      	ldr	r2, [pc, #72]	@ (8002b80 <_sbrk+0x68>)
 8002b38:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002b3a:	4b10      	ldr	r3, [pc, #64]	@ (8002b7c <_sbrk+0x64>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d207      	bcs.n	8002b58 <_sbrk+0x40>
		errno = ENOMEM;
 8002b48:	f006 fa48 	bl	8008fdc <__errno>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	220c      	movs	r2, #12
 8002b50:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
 8002b56:	e009      	b.n	8002b6c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002b58:	4b08      	ldr	r3, [pc, #32]	@ (8002b7c <_sbrk+0x64>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002b5e:	4b07      	ldr	r3, [pc, #28]	@ (8002b7c <_sbrk+0x64>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	4a05      	ldr	r2, [pc, #20]	@ (8002b7c <_sbrk+0x64>)
 8002b68:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20008000 	.word	0x20008000
 8002b78:	00000400 	.word	0x00000400
 8002b7c:	20001008 	.word	0x20001008
 8002b80:	200011e0 	.word	0x200011e0

08002b84 <SystemInit>:
/**
 * @brief  Setup the microcontroller system
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
	/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002b88:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <SystemInit+0x20>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8e:	4a05      	ldr	r2, [pc, #20]	@ (8002ba4 <SystemInit+0x20>)
 8002b90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <term_init>:
static char _Input[128];
static int	_InputLen=0;

//--- terminal_init --------------------------------
void term_init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
	memset(_Input, 0, sizeof(_Input));
 8002bac:	2280      	movs	r2, #128	@ 0x80
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4802      	ldr	r0, [pc, #8]	@ (8002bbc <term_init+0x14>)
 8002bb2:	f006 f9af 	bl	8008f14 <memset>
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	2000100c 	.word	0x2000100c

08002bc0 <term_handle_char>:
//--- term_handle_char -------------------------
void term_handle_char(char ch)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
	if (_InputLen<sizeof(_Input)) _Input[_InputLen++] = ch;
 8002bca:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <term_handle_char+0x38>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bd0:	d808      	bhi.n	8002be4 <term_handle_char+0x24>
 8002bd2:	4b09      	ldr	r3, [pc, #36]	@ (8002bf8 <term_handle_char+0x38>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	4907      	ldr	r1, [pc, #28]	@ (8002bf8 <term_handle_char+0x38>)
 8002bda:	600a      	str	r2, [r1, #0]
 8002bdc:	4907      	ldr	r1, [pc, #28]	@ (8002bfc <term_handle_char+0x3c>)
 8002bde:	79fa      	ldrb	r2, [r7, #7]
 8002be0:	54ca      	strb	r2, [r1, r3]
	else _InputLen=0;
//	putchar(ch);
}
 8002be2:	e002      	b.n	8002bea <term_handle_char+0x2a>
	else _InputLen=0;
 8002be4:	4b04      	ldr	r3, [pc, #16]	@ (8002bf8 <term_handle_char+0x38>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	2000108c 	.word	0x2000108c
 8002bfc:	2000100c 	.word	0x2000100c

08002c00 <term_idle>:

//--- term_idle -------------------------------
void term_idle(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
    if (_InputLen>1 && (_Input[_InputLen-1]=='\r' || _Input[_InputLen-1]=='\n'))
 8002c06:	4b32      	ldr	r3, [pc, #200]	@ (8002cd0 <term_idle+0xd0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	dd5b      	ble.n	8002cc6 <term_idle+0xc6>
 8002c0e:	4b30      	ldr	r3, [pc, #192]	@ (8002cd0 <term_idle+0xd0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	4a2f      	ldr	r2, [pc, #188]	@ (8002cd4 <term_idle+0xd4>)
 8002c16:	5cd3      	ldrb	r3, [r2, r3]
 8002c18:	2b0d      	cmp	r3, #13
 8002c1a:	d006      	beq.n	8002c2a <term_idle+0x2a>
 8002c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002cd0 <term_idle+0xd0>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	4a2c      	ldr	r2, [pc, #176]	@ (8002cd4 <term_idle+0xd4>)
 8002c24:	5cd3      	ldrb	r3, [r2, r3]
 8002c26:	2b0a      	cmp	r3, #10
 8002c28:	d14d      	bne.n	8002cc6 <term_idle+0xc6>
    {
    	char *args;
    //	printf("TERM: >>%s<<\n", _Input);
    	if (strstart(_Input, "status")) 		  		box_send_status();
 8002c2a:	492b      	ldr	r1, [pc, #172]	@ (8002cd8 <term_idle+0xd8>)
 8002c2c:	4829      	ldr	r0, [pc, #164]	@ (8002cd4 <term_idle+0xd4>)
 8002c2e:	f7fe ff77 	bl	8001b20 <strstart>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <term_idle+0x3e>
 8002c38:	f7fe fd14 	bl	8001664 <box_send_status>
 8002c3c:	e03b      	b.n	8002cb6 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "encoder"))) 	enc_command(args);
 8002c3e:	4927      	ldr	r1, [pc, #156]	@ (8002cdc <term_idle+0xdc>)
 8002c40:	4824      	ldr	r0, [pc, #144]	@ (8002cd4 <term_idle+0xd4>)
 8002c42:	f7fe ff6d 	bl	8001b20 <strstart>
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <term_idle+0x56>
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fe fe2a 	bl	80018a8 <enc_command>
 8002c54:	e02f      	b.n	8002cb6 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "start"))) 		box_start();
 8002c56:	4922      	ldr	r1, [pc, #136]	@ (8002ce0 <term_idle+0xe0>)
 8002c58:	481e      	ldr	r0, [pc, #120]	@ (8002cd4 <term_idle+0xd4>)
 8002c5a:	f7fe ff61 	bl	8001b20 <strstart>
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <term_idle+0x6c>
 8002c66:	f7fe f939 	bl	8000edc <box_start>
 8002c6a:	e024      	b.n	8002cb6 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "stop"))) 		box_stop();
 8002c6c:	491d      	ldr	r1, [pc, #116]	@ (8002ce4 <term_idle+0xe4>)
 8002c6e:	4819      	ldr	r0, [pc, #100]	@ (8002cd4 <term_idle+0xd4>)
 8002c70:	f7fe ff56 	bl	8001b20 <strstart>
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <term_idle+0x82>
 8002c7c:	f7fe f982 	bl	8000f84 <box_stop>
 8002c80:	e019      	b.n	8002cb6 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "pgDelay"))) 	box_set_pgDelay(atoi(args));
 8002c82:	4919      	ldr	r1, [pc, #100]	@ (8002ce8 <term_idle+0xe8>)
 8002c84:	4813      	ldr	r0, [pc, #76]	@ (8002cd4 <term_idle+0xd4>)
 8002c86:	f7fe ff4b 	bl	8001b20 <strstart>
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <term_idle+0xa2>
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f004 ff31 	bl	8007afa <atoi>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe f90a 	bl	8000eb4 <box_set_pgDelay>
 8002ca0:	e009      	b.n	8002cb6 <term_idle+0xb6>
    	else if ((args=strstart(_Input, "pg"))) 		box_printGo();
 8002ca2:	4912      	ldr	r1, [pc, #72]	@ (8002cec <term_idle+0xec>)
 8002ca4:	480b      	ldr	r0, [pc, #44]	@ (8002cd4 <term_idle+0xd4>)
 8002ca6:	f7fe ff3b 	bl	8001b20 <strstart>
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <term_idle+0xb6>
 8002cb2:	f7fe fc43 	bl	800153c <box_printGo>

    	memset(_Input, 0, sizeof(_Input));
 8002cb6:	2280      	movs	r2, #128	@ 0x80
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4806      	ldr	r0, [pc, #24]	@ (8002cd4 <term_idle+0xd4>)
 8002cbc:	f006 f92a 	bl	8008f14 <memset>
    	_InputLen=0;
 8002cc0:	4b03      	ldr	r3, [pc, #12]	@ (8002cd0 <term_idle+0xd0>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
    }
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	2000108c 	.word	0x2000108c
 8002cd4:	2000100c 	.word	0x2000100c
 8002cd8:	0800cf08 	.word	0x0800cf08
 8002cdc:	0800cf10 	.word	0x0800cf10
 8002ce0:	0800cf18 	.word	0x0800cf18
 8002ce4:	0800cf20 	.word	0x0800cf20
 8002ce8:	0800cf28 	.word	0x0800cf28
 8002cec:	0800cf30 	.word	0x0800cf30

08002cf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002cf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d28 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cf4:	f7ff ff46 	bl	8002b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cf8:	480c      	ldr	r0, [pc, #48]	@ (8002d2c <LoopForever+0x6>)
  ldr r1, =_edata
 8002cfa:	490d      	ldr	r1, [pc, #52]	@ (8002d30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d34 <LoopForever+0xe>)
  movs r3, #0
 8002cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d00:	e002      	b.n	8002d08 <LoopCopyDataInit>

08002d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d06:	3304      	adds	r3, #4

08002d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d0c:	d3f9      	bcc.n	8002d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d10:	4c0a      	ldr	r4, [pc, #40]	@ (8002d3c <LoopForever+0x16>)
  movs r3, #0
 8002d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d14:	e001      	b.n	8002d1a <LoopFillZerobss>

08002d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d18:	3204      	adds	r2, #4

08002d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d1c:	d3fb      	bcc.n	8002d16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d1e:	f006 f963 	bl	8008fe8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d22:	f7fe ff59 	bl	8001bd8 <main>

08002d26 <LoopForever>:

LoopForever:
    b LoopForever
 8002d26:	e7fe      	b.n	8002d26 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d28:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d30:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002d34:	0800d3d0 	.word	0x0800d3d0
  ldr r2, =_sbss
 8002d38:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002d3c:	200011e0 	.word	0x200011e0

08002d40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d40:	e7fe      	b.n	8002d40 <ADC1_IRQHandler>
	...

08002d44 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d48:	4b08      	ldr	r3, [pc, #32]	@ (8002d6c <HAL_Init+0x28>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a07      	ldr	r2, [pc, #28]	@ (8002d6c <HAL_Init+0x28>)
 8002d4e:	f043 0310 	orr.w	r3, r3, #16
 8002d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d54:	2003      	movs	r0, #3
 8002d56:	f000 f92b 	bl	8002fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d5a:	200f      	movs	r0, #15
 8002d5c:	f000 f808 	bl	8002d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d60:	f7ff fc84 	bl	800266c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40022000 	.word	0x40022000

08002d70 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d78:	4b12      	ldr	r3, [pc, #72]	@ (8002dc4 <HAL_InitTick+0x54>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b12      	ldr	r3, [pc, #72]	@ (8002dc8 <HAL_InitTick+0x58>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	4619      	mov	r1, r3
 8002d82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f943 	bl	800301a <HAL_SYSTICK_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00e      	b.n	8002dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b0f      	cmp	r3, #15
 8002da2:	d80a      	bhi.n	8002dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002da4:	2200      	movs	r2, #0
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	f000 f90b 	bl	8002fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002db0:	4a06      	ldr	r2, [pc, #24]	@ (8002dcc <HAL_InitTick+0x5c>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e000      	b.n	8002dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000014 	.word	0x20000014
 8002dc8:	2000001c 	.word	0x2000001c
 8002dcc:	20000018 	.word	0x20000018

08002dd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dd4:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_IncTick+0x20>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <HAL_IncTick+0x24>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4413      	add	r3, r2
 8002de0:	4a04      	ldr	r2, [pc, #16]	@ (8002df4 <HAL_IncTick+0x24>)
 8002de2:	6013      	str	r3, [r2, #0]
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	2000001c 	.word	0x2000001c
 8002df4:	20001090 	.word	0x20001090

08002df8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return uwTick;  
 8002dfc:	4b03      	ldr	r3, [pc, #12]	@ (8002e0c <HAL_GetTick+0x14>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	20001090 	.word	0x20001090

08002e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e20:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e42:	4a04      	ldr	r2, [pc, #16]	@ (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	60d3      	str	r3, [r2, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e5c:	4b04      	ldr	r3, [pc, #16]	@ (8002e70 <__NVIC_GetPriorityGrouping+0x18>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	0a1b      	lsrs	r3, r3, #8
 8002e62:	f003 0307 	and.w	r3, r3, #7
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	db0b      	blt.n	8002e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	f003 021f 	and.w	r2, r3, #31
 8002e8c:	4907      	ldr	r1, [pc, #28]	@ (8002eac <__NVIC_EnableIRQ+0x38>)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2001      	movs	r0, #1
 8002e96:	fa00 f202 	lsl.w	r2, r0, r2
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000e100 	.word	0xe000e100

08002eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	db0a      	blt.n	8002eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	490c      	ldr	r1, [pc, #48]	@ (8002efc <__NVIC_SetPriority+0x4c>)
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	0112      	lsls	r2, r2, #4
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed8:	e00a      	b.n	8002ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4908      	ldr	r1, [pc, #32]	@ (8002f00 <__NVIC_SetPriority+0x50>)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	3b04      	subs	r3, #4
 8002ee8:	0112      	lsls	r2, r2, #4
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	440b      	add	r3, r1
 8002eee:	761a      	strb	r2, [r3, #24]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000e100 	.word	0xe000e100
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	@ 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f1c3 0307 	rsb	r3, r3, #7
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	bf28      	it	cs
 8002f22:	2304      	movcs	r3, #4
 8002f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d902      	bls.n	8002f34 <NVIC_EncodePriority+0x30>
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3b03      	subs	r3, #3
 8002f32:	e000      	b.n	8002f36 <NVIC_EncodePriority+0x32>
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f38:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43da      	mvns	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	401a      	ands	r2, r3
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	43d9      	mvns	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5c:	4313      	orrs	r3, r2
         );
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3724      	adds	r7, #36	@ 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f7c:	d301      	bcc.n	8002f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e00f      	b.n	8002fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f82:	4a0a      	ldr	r2, [pc, #40]	@ (8002fac <SysTick_Config+0x40>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f8a:	210f      	movs	r1, #15
 8002f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f90:	f7ff ff8e 	bl	8002eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f94:	4b05      	ldr	r3, [pc, #20]	@ (8002fac <SysTick_Config+0x40>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f9a:	4b04      	ldr	r3, [pc, #16]	@ (8002fac <SysTick_Config+0x40>)
 8002f9c:	2207      	movs	r2, #7
 8002f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	e000e010 	.word	0xe000e010

08002fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff ff29 	bl	8002e10 <__NVIC_SetPriorityGrouping>
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b086      	sub	sp, #24
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	4603      	mov	r3, r0
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fd8:	f7ff ff3e 	bl	8002e58 <__NVIC_GetPriorityGrouping>
 8002fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68b9      	ldr	r1, [r7, #8]
 8002fe2:	6978      	ldr	r0, [r7, #20]
 8002fe4:	f7ff ff8e 	bl	8002f04 <NVIC_EncodePriority>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff5d 	bl	8002eb0 <__NVIC_SetPriority>
}
 8002ff6:	bf00      	nop
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	4603      	mov	r3, r0
 8003006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ff31 	bl	8002e74 <__NVIC_EnableIRQ>
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff ffa2 	bl	8002f6c <SysTick_Config>
 8003028:	4603      	mov	r3, r0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003040:	2b02      	cmp	r3, #2
 8003042:	d008      	beq.n	8003056 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2204      	movs	r2, #4
 8003048:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e020      	b.n	8003098 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 020e 	bic.w	r2, r2, #14
 8003064:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0201 	bic.w	r2, r2, #1
 8003074:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307e:	2101      	movs	r1, #1
 8003080:	fa01 f202 	lsl.w	r2, r1, r2
 8003084:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d005      	beq.n	80030c6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2204      	movs	r2, #4
 80030be:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
 80030c4:	e027      	b.n	8003116 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 020e 	bic.w	r2, r2, #14
 80030d4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0201 	bic.w	r2, r2, #1
 80030e4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ee:	2101      	movs	r1, #1
 80030f0:	fa01 f202 	lsl.w	r2, r1, r2
 80030f4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	4798      	blx	r3
    } 
  }
  return status;
 8003116:	7bfb      	ldrb	r3, [r7, #15]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800312e:	e154      	b.n	80033da <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	2101      	movs	r1, #1
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	fa01 f303 	lsl.w	r3, r1, r3
 800313c:	4013      	ands	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 8146 	beq.w	80033d4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	2b01      	cmp	r3, #1
 8003152:	d005      	beq.n	8003160 <HAL_GPIO_Init+0x40>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d130      	bne.n	80031c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2203      	movs	r2, #3
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003196:	2201      	movs	r2, #1
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4013      	ands	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	f003 0201 	and.w	r2, r3, #1
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d017      	beq.n	80031fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	2203      	movs	r2, #3
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4013      	ands	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d123      	bne.n	8003252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	08da      	lsrs	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3208      	adds	r2, #8
 8003212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	220f      	movs	r2, #15
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	08da      	lsrs	r2, r3, #3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3208      	adds	r2, #8
 800324c:	6939      	ldr	r1, [r7, #16]
 800324e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	2203      	movs	r2, #3
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4013      	ands	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f003 0203 	and.w	r2, r3, #3
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 80a0 	beq.w	80033d4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003294:	4b58      	ldr	r3, [pc, #352]	@ (80033f8 <HAL_GPIO_Init+0x2d8>)
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	4a57      	ldr	r2, [pc, #348]	@ (80033f8 <HAL_GPIO_Init+0x2d8>)
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	6193      	str	r3, [r2, #24]
 80032a0:	4b55      	ldr	r3, [pc, #340]	@ (80033f8 <HAL_GPIO_Init+0x2d8>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032ac:	4a53      	ldr	r2, [pc, #332]	@ (80033fc <HAL_GPIO_Init+0x2dc>)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	089b      	lsrs	r3, r3, #2
 80032b2:	3302      	adds	r3, #2
 80032b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	220f      	movs	r2, #15
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4013      	ands	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80032d6:	d019      	beq.n	800330c <HAL_GPIO_Init+0x1ec>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a49      	ldr	r2, [pc, #292]	@ (8003400 <HAL_GPIO_Init+0x2e0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d013      	beq.n	8003308 <HAL_GPIO_Init+0x1e8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a48      	ldr	r2, [pc, #288]	@ (8003404 <HAL_GPIO_Init+0x2e4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00d      	beq.n	8003304 <HAL_GPIO_Init+0x1e4>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a47      	ldr	r2, [pc, #284]	@ (8003408 <HAL_GPIO_Init+0x2e8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d007      	beq.n	8003300 <HAL_GPIO_Init+0x1e0>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a46      	ldr	r2, [pc, #280]	@ (800340c <HAL_GPIO_Init+0x2ec>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d101      	bne.n	80032fc <HAL_GPIO_Init+0x1dc>
 80032f8:	2304      	movs	r3, #4
 80032fa:	e008      	b.n	800330e <HAL_GPIO_Init+0x1ee>
 80032fc:	2305      	movs	r3, #5
 80032fe:	e006      	b.n	800330e <HAL_GPIO_Init+0x1ee>
 8003300:	2303      	movs	r3, #3
 8003302:	e004      	b.n	800330e <HAL_GPIO_Init+0x1ee>
 8003304:	2302      	movs	r3, #2
 8003306:	e002      	b.n	800330e <HAL_GPIO_Init+0x1ee>
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <HAL_GPIO_Init+0x1ee>
 800330c:	2300      	movs	r3, #0
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	f002 0203 	and.w	r2, r2, #3
 8003314:	0092      	lsls	r2, r2, #2
 8003316:	4093      	lsls	r3, r2
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800331e:	4937      	ldr	r1, [pc, #220]	@ (80033fc <HAL_GPIO_Init+0x2dc>)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	3302      	adds	r3, #2
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800332c:	4b38      	ldr	r3, [pc, #224]	@ (8003410 <HAL_GPIO_Init+0x2f0>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	43db      	mvns	r3, r3
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003350:	4a2f      	ldr	r2, [pc, #188]	@ (8003410 <HAL_GPIO_Init+0x2f0>)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003356:	4b2e      	ldr	r3, [pc, #184]	@ (8003410 <HAL_GPIO_Init+0x2f0>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	43db      	mvns	r3, r3
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4013      	ands	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800337a:	4a25      	ldr	r2, [pc, #148]	@ (8003410 <HAL_GPIO_Init+0x2f0>)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003380:	4b23      	ldr	r3, [pc, #140]	@ (8003410 <HAL_GPIO_Init+0x2f0>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	43db      	mvns	r3, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003410 <HAL_GPIO_Init+0x2f0>)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033aa:	4b19      	ldr	r3, [pc, #100]	@ (8003410 <HAL_GPIO_Init+0x2f0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4013      	ands	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80033ce:	4a10      	ldr	r2, [pc, #64]	@ (8003410 <HAL_GPIO_Init+0x2f0>)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	3301      	adds	r3, #1
 80033d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f47f aea3 	bne.w	8003130 <HAL_GPIO_Init+0x10>
  }
}
 80033ea:	bf00      	nop
 80033ec:	bf00      	nop
 80033ee:	371c      	adds	r7, #28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40010000 	.word	0x40010000
 8003400:	48000400 	.word	0x48000400
 8003404:	48000800 	.word	0x48000800
 8003408:	48000c00 	.word	0x48000c00
 800340c:	48001000 	.word	0x48001000
 8003410:	40010400 	.word	0x40010400

08003414 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	887b      	ldrh	r3, [r7, #2]
 8003426:	4013      	ands	r3, r2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
 8003430:	e001      	b.n	8003436 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003432:	2300      	movs	r3, #0
 8003434:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003436:	7bfb      	ldrb	r3, [r7, #15]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	807b      	strh	r3, [r7, #2]
 8003450:	4613      	mov	r3, r2
 8003452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003454:	787b      	ldrb	r3, [r7, #1]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800345a:	887a      	ldrh	r2, [r7, #2]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003460:	e002      	b.n	8003468 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003462:	887a      	ldrh	r2, [r7, #2]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e081      	b.n	800358a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff f910 	bl	80026c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2224      	movs	r2, #36	@ 0x24
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0201 	bic.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d107      	bne.n	80034ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	e006      	b.n	80034fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80034fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d104      	bne.n	800350e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800350c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6812      	ldr	r2, [r2, #0]
 8003518:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800351c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003520:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003530:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69d9      	ldr	r1, [r3, #28]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1a      	ldr	r2, [r3, #32]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	461a      	mov	r2, r3
 80035a0:	460b      	mov	r3, r1
 80035a2:	817b      	strh	r3, [r7, #10]
 80035a4:	4613      	mov	r3, r2
 80035a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	f040 80da 	bne.w	800376a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_I2C_Master_Transmit+0x30>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e0d3      	b.n	800376c <HAL_I2C_Master_Transmit+0x1d8>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035cc:	f7ff fc14 	bl	8002df8 <HAL_GetTick>
 80035d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	2319      	movs	r3, #25
 80035d8:	2201      	movs	r2, #1
 80035da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f9e6 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e0be      	b.n	800376c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2221      	movs	r2, #33	@ 0x21
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2210      	movs	r2, #16
 80035fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	893a      	ldrh	r2, [r7, #8]
 800360e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361a:	b29b      	uxth	r3, r3
 800361c:	2bff      	cmp	r3, #255	@ 0xff
 800361e:	d90e      	bls.n	800363e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	22ff      	movs	r2, #255	@ 0xff
 8003624:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362a:	b2da      	uxtb	r2, r3
 800362c:	8979      	ldrh	r1, [r7, #10]
 800362e:	4b51      	ldr	r3, [pc, #324]	@ (8003774 <HAL_I2C_Master_Transmit+0x1e0>)
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fbf6 	bl	8003e28 <I2C_TransferConfig>
 800363c:	e06c      	b.n	8003718 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800364c:	b2da      	uxtb	r2, r3
 800364e:	8979      	ldrh	r1, [r7, #10]
 8003650:	4b48      	ldr	r3, [pc, #288]	@ (8003774 <HAL_I2C_Master_Transmit+0x1e0>)
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fbe5 	bl	8003e28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800365e:	e05b      	b.n	8003718 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	6a39      	ldr	r1, [r7, #32]
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f9f2 	bl	8003a4e <I2C_WaitOnTXISFlagUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e07b      	b.n	800376c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d034      	beq.n	8003718 <HAL_I2C_Master_Transmit+0x184>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d130      	bne.n	8003718 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	2200      	movs	r2, #0
 80036be:	2180      	movs	r1, #128	@ 0x80
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f975 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e04d      	b.n	800376c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2bff      	cmp	r3, #255	@ 0xff
 80036d8:	d90e      	bls.n	80036f8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	22ff      	movs	r2, #255	@ 0xff
 80036de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	8979      	ldrh	r1, [r7, #10]
 80036e8:	2300      	movs	r3, #0
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 fb99 	bl	8003e28 <I2C_TransferConfig>
 80036f6:	e00f      	b.n	8003718 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003706:	b2da      	uxtb	r2, r3
 8003708:	8979      	ldrh	r1, [r7, #10]
 800370a:	2300      	movs	r3, #0
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fb88 	bl	8003e28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d19e      	bne.n	8003660 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	6a39      	ldr	r1, [r7, #32]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f9d8 	bl	8003adc <I2C_WaitOnSTOPFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e01a      	b.n	800376c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2220      	movs	r2, #32
 800373c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6859      	ldr	r1, [r3, #4]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b0b      	ldr	r3, [pc, #44]	@ (8003778 <HAL_I2C_Master_Transmit+0x1e4>)
 800374a:	400b      	ands	r3, r1
 800374c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	e000      	b.n	800376c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800376a:	2302      	movs	r3, #2
  }
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	80002000 	.word	0x80002000
 8003778:	fe00e800 	.word	0xfe00e800

0800377c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af02      	add	r7, sp, #8
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	461a      	mov	r2, r3
 8003788:	460b      	mov	r3, r1
 800378a:	817b      	strh	r3, [r7, #10]
 800378c:	4613      	mov	r3, r2
 800378e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b20      	cmp	r3, #32
 800379a:	f040 80db 	bne.w	8003954 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_I2C_Master_Receive+0x30>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e0d4      	b.n	8003956 <HAL_I2C_Master_Receive+0x1da>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037b4:	f7ff fb20 	bl	8002df8 <HAL_GetTick>
 80037b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	2319      	movs	r3, #25
 80037c0:	2201      	movs	r2, #1
 80037c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f8f2 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e0bf      	b.n	8003956 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2222      	movs	r2, #34	@ 0x22
 80037da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2210      	movs	r2, #16
 80037e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	893a      	ldrh	r2, [r7, #8]
 80037f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003802:	b29b      	uxth	r3, r3
 8003804:	2bff      	cmp	r3, #255	@ 0xff
 8003806:	d90e      	bls.n	8003826 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	22ff      	movs	r2, #255	@ 0xff
 800380c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003812:	b2da      	uxtb	r2, r3
 8003814:	8979      	ldrh	r1, [r7, #10]
 8003816:	4b52      	ldr	r3, [pc, #328]	@ (8003960 <HAL_I2C_Master_Receive+0x1e4>)
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fb02 	bl	8003e28 <I2C_TransferConfig>
 8003824:	e06d      	b.n	8003902 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003834:	b2da      	uxtb	r2, r3
 8003836:	8979      	ldrh	r1, [r7, #10]
 8003838:	4b49      	ldr	r3, [pc, #292]	@ (8003960 <HAL_I2C_Master_Receive+0x1e4>)
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 faf1 	bl	8003e28 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003846:	e05c      	b.n	8003902 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	6a39      	ldr	r1, [r7, #32]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f989 	bl	8003b64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e07c      	b.n	8003956 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d034      	beq.n	8003902 <HAL_I2C_Master_Receive+0x186>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389c:	2b00      	cmp	r3, #0
 800389e:	d130      	bne.n	8003902 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	2200      	movs	r2, #0
 80038a8:	2180      	movs	r1, #128	@ 0x80
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 f880 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e04d      	b.n	8003956 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2bff      	cmp	r3, #255	@ 0xff
 80038c2:	d90e      	bls.n	80038e2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	22ff      	movs	r2, #255	@ 0xff
 80038c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	8979      	ldrh	r1, [r7, #10]
 80038d2:	2300      	movs	r3, #0
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 faa4 	bl	8003e28 <I2C_TransferConfig>
 80038e0:	e00f      	b.n	8003902 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	8979      	ldrh	r1, [r7, #10]
 80038f4:	2300      	movs	r3, #0
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fa93 	bl	8003e28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d19d      	bne.n	8003848 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	6a39      	ldr	r1, [r7, #32]
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 f8e3 	bl	8003adc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e01a      	b.n	8003956 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2220      	movs	r2, #32
 8003926:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6859      	ldr	r1, [r3, #4]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4b0c      	ldr	r3, [pc, #48]	@ (8003964 <HAL_I2C_Master_Receive+0x1e8>)
 8003934:	400b      	ands	r3, r1
 8003936:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	e000      	b.n	8003956 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003954:	2302      	movs	r3, #2
  }
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	80002400 	.word	0x80002400
 8003964:	fe00e800 	.word	0xfe00e800

08003968 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b02      	cmp	r3, #2
 800397c:	d103      	bne.n	8003986 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2200      	movs	r2, #0
 8003984:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b01      	cmp	r3, #1
 8003992:	d007      	beq.n	80039a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	619a      	str	r2, [r3, #24]
  }
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039c0:	e031      	b.n	8003a26 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d02d      	beq.n	8003a26 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ca:	f7ff fa15 	bl	8002df8 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d302      	bcc.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d122      	bne.n	8003a26 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4013      	ands	r3, r2
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	bf0c      	ite	eq
 80039f0:	2301      	moveq	r3, #1
 80039f2:	2300      	movne	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d113      	bne.n	8003a26 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	f043 0220 	orr.w	r2, r3, #32
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e00f      	b.n	8003a46 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699a      	ldr	r2, [r3, #24]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	bf0c      	ite	eq
 8003a36:	2301      	moveq	r3, #1
 8003a38:	2300      	movne	r3, #0
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d0be      	beq.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a5a:	e033      	b.n	8003ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f901 	bl	8003c68 <I2C_IsErrorOccurred>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e031      	b.n	8003ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a76:	d025      	beq.n	8003ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a78:	f7ff f9be 	bl	8002df8 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d302      	bcc.n	8003a8e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d11a      	bne.n	8003ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d013      	beq.n	8003ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa0:	f043 0220 	orr.w	r2, r3, #32
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e007      	b.n	8003ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d1c4      	bne.n	8003a5c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ae8:	e02f      	b.n	8003b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f8ba 	bl	8003c68 <I2C_IsErrorOccurred>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e02d      	b.n	8003b5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afe:	f7ff f97b 	bl	8002df8 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d302      	bcc.n	8003b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d11a      	bne.n	8003b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d013      	beq.n	8003b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b26:	f043 0220 	orr.w	r2, r3, #32
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e007      	b.n	8003b5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d1c8      	bne.n	8003aea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b70:	e06b      	b.n	8003c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	68b9      	ldr	r1, [r7, #8]
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f876 	bl	8003c68 <I2C_IsErrorOccurred>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e069      	b.n	8003c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d138      	bne.n	8003c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d105      	bne.n	8003bae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	e055      	b.n	8003c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2b10      	cmp	r3, #16
 8003bba:	d107      	bne.n	8003bcc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2210      	movs	r2, #16
 8003bc2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2204      	movs	r2, #4
 8003bc8:	645a      	str	r2, [r3, #68]	@ 0x44
 8003bca:	e002      	b.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6859      	ldr	r1, [r3, #4]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003be6:	400b      	ands	r3, r1
 8003be8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e029      	b.n	8003c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c06:	f7ff f8f7 	bl	8002df8 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d302      	bcc.n	8003c1c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d116      	bne.n	8003c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d00f      	beq.n	8003c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2e:	f043 0220 	orr.w	r2, r3, #32
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e007      	b.n	8003c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d18c      	bne.n	8003b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	fe00e800 	.word	0xfe00e800

08003c68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08a      	sub	sp, #40	@ 0x28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d068      	beq.n	8003d66 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2210      	movs	r2, #16
 8003c9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c9c:	e049      	b.n	8003d32 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	d045      	beq.n	8003d32 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ca6:	f7ff f8a7 	bl	8002df8 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d302      	bcc.n	8003cbc <I2C_IsErrorOccurred+0x54>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d13a      	bne.n	8003d32 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cde:	d121      	bne.n	8003d24 <I2C_IsErrorOccurred+0xbc>
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ce6:	d01d      	beq.n	8003d24 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003ce8:	7cfb      	ldrb	r3, [r7, #19]
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d01a      	beq.n	8003d24 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cfc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003cfe:	f7ff f87b 	bl	8002df8 <HAL_GetTick>
 8003d02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d04:	e00e      	b.n	8003d24 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d06:	f7ff f877 	bl	8002df8 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b19      	cmp	r3, #25
 8003d12:	d907      	bls.n	8003d24 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	f043 0320 	orr.w	r3, r3, #32
 8003d1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003d22:	e006      	b.n	8003d32 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	d1e9      	bne.n	8003d06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d003      	beq.n	8003d48 <I2C_IsErrorOccurred+0xe0>
 8003d40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0aa      	beq.n	8003c9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d103      	bne.n	8003d58 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2220      	movs	r2, #32
 8003d56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	f043 0304 	orr.w	r3, r3, #4
 8003d5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00b      	beq.n	8003d90 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00b      	beq.n	8003db2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	f043 0308 	orr.w	r3, r3, #8
 8003da0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003daa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00b      	beq.n	8003dd4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	f043 0302 	orr.w	r3, r3, #2
 8003dc2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dcc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01c      	beq.n	8003e16 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f7ff fdc3 	bl	8003968 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6859      	ldr	r1, [r3, #4]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	4b0d      	ldr	r3, [pc, #52]	@ (8003e24 <I2C_IsErrorOccurred+0x1bc>)
 8003dee:	400b      	ands	r3, r1
 8003df0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003e16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3728      	adds	r7, #40	@ 0x28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	fe00e800 	.word	0xfe00e800

08003e28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	607b      	str	r3, [r7, #4]
 8003e32:	460b      	mov	r3, r1
 8003e34:	817b      	strh	r3, [r7, #10]
 8003e36:	4613      	mov	r3, r2
 8003e38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e3a:	897b      	ldrh	r3, [r7, #10]
 8003e3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e40:	7a7b      	ldrb	r3, [r7, #9]
 8003e42:	041b      	lsls	r3, r3, #16
 8003e44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e48:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e56:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	0d5b      	lsrs	r3, r3, #21
 8003e62:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003e66:	4b08      	ldr	r3, [pc, #32]	@ (8003e88 <I2C_TransferConfig+0x60>)
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	ea02 0103 	and.w	r1, r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	03ff63ff 	.word	0x03ff63ff

08003e8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d138      	bne.n	8003f14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e032      	b.n	8003f16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2224      	movs	r2, #36	@ 0x24
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0201 	bic.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ede:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6819      	ldr	r1, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e000      	b.n	8003f16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f14:	2302      	movs	r3, #2
  }
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b085      	sub	sp, #20
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d139      	bne.n	8003fac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e033      	b.n	8003fae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2224      	movs	r2, #36	@ 0x24
 8003f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	021b      	lsls	r3, r3, #8
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e000      	b.n	8003fae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fac:	2302      	movs	r3, #2
  }
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
	...

08003fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fcc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d102      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f001 b823 	b.w	8005028 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 817d 	beq.w	80042f2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ff8:	4bbc      	ldr	r3, [pc, #752]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 030c 	and.w	r3, r3, #12
 8004000:	2b04      	cmp	r3, #4
 8004002:	d00c      	beq.n	800401e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004004:	4bb9      	ldr	r3, [pc, #740]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 030c 	and.w	r3, r3, #12
 800400c:	2b08      	cmp	r3, #8
 800400e:	d15c      	bne.n	80040ca <HAL_RCC_OscConfig+0x10e>
 8004010:	4bb6      	ldr	r3, [pc, #728]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800401c:	d155      	bne.n	80040ca <HAL_RCC_OscConfig+0x10e>
 800401e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004022:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004026:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800402a:	fa93 f3a3 	rbit	r3, r3
 800402e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004032:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004036:	fab3 f383 	clz	r3, r3
 800403a:	b2db      	uxtb	r3, r3
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	b2db      	uxtb	r3, r3
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b01      	cmp	r3, #1
 8004048:	d102      	bne.n	8004050 <HAL_RCC_OscConfig+0x94>
 800404a:	4ba8      	ldr	r3, [pc, #672]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	e015      	b.n	800407c <HAL_RCC_OscConfig+0xc0>
 8004050:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004054:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004058:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800405c:	fa93 f3a3 	rbit	r3, r3
 8004060:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004064:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004068:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800406c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004070:	fa93 f3a3 	rbit	r3, r3
 8004074:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8004078:	4b9c      	ldr	r3, [pc, #624]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004080:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8004084:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004088:	fa92 f2a2 	rbit	r2, r2
 800408c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8004090:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8004094:	fab2 f282 	clz	r2, r2
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	f042 0220 	orr.w	r2, r2, #32
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	f002 021f 	and.w	r2, r2, #31
 80040a4:	2101      	movs	r1, #1
 80040a6:	fa01 f202 	lsl.w	r2, r1, r2
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 811f 	beq.w	80042f0 <HAL_RCC_OscConfig+0x334>
 80040b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f040 8116 	bne.w	80042f0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	f000 bfaf 	b.w	8005028 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040da:	d106      	bne.n	80040ea <HAL_RCC_OscConfig+0x12e>
 80040dc:	4b83      	ldr	r3, [pc, #524]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a82      	ldr	r2, [pc, #520]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 80040e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	e036      	b.n	8004158 <HAL_RCC_OscConfig+0x19c>
 80040ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10c      	bne.n	8004114 <HAL_RCC_OscConfig+0x158>
 80040fa:	4b7c      	ldr	r3, [pc, #496]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a7b      	ldr	r2, [pc, #492]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 8004100:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	4b79      	ldr	r3, [pc, #484]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a78      	ldr	r2, [pc, #480]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 800410c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e021      	b.n	8004158 <HAL_RCC_OscConfig+0x19c>
 8004114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004118:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004124:	d10c      	bne.n	8004140 <HAL_RCC_OscConfig+0x184>
 8004126:	4b71      	ldr	r3, [pc, #452]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a70      	ldr	r2, [pc, #448]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 800412c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	4b6e      	ldr	r3, [pc, #440]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a6d      	ldr	r2, [pc, #436]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 8004138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e00b      	b.n	8004158 <HAL_RCC_OscConfig+0x19c>
 8004140:	4b6a      	ldr	r3, [pc, #424]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a69      	ldr	r2, [pc, #420]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 8004146:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	4b67      	ldr	r3, [pc, #412]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a66      	ldr	r2, [pc, #408]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 8004152:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004156:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004158:	4b64      	ldr	r3, [pc, #400]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 800415a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415c:	f023 020f 	bic.w	r2, r3, #15
 8004160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004164:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	495f      	ldr	r1, [pc, #380]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 800416e:	4313      	orrs	r3, r2
 8004170:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004176:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d059      	beq.n	8004236 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004182:	f7fe fe39 	bl	8002df8 <HAL_GetTick>
 8004186:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418a:	e00a      	b.n	80041a2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800418c:	f7fe fe34 	bl	8002df8 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b64      	cmp	r3, #100	@ 0x64
 800419a:	d902      	bls.n	80041a2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	f000 bf43 	b.w	8005028 <HAL_RCC_OscConfig+0x106c>
 80041a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041a6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80041ae:	fa93 f3a3 	rbit	r3, r3
 80041b2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80041b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ba:	fab3 f383 	clz	r3, r3
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d102      	bne.n	80041d4 <HAL_RCC_OscConfig+0x218>
 80041ce:	4b47      	ldr	r3, [pc, #284]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	e015      	b.n	8004200 <HAL_RCC_OscConfig+0x244>
 80041d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041d8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041dc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80041e0:	fa93 f3a3 	rbit	r3, r3
 80041e4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80041e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041ec:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80041f0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80041fc:	4b3b      	ldr	r3, [pc, #236]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004204:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004208:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800420c:	fa92 f2a2 	rbit	r2, r2
 8004210:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004214:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004218:	fab2 f282 	clz	r2, r2
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	f042 0220 	orr.w	r2, r2, #32
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	f002 021f 	and.w	r2, r2, #31
 8004228:	2101      	movs	r1, #1
 800422a:	fa01 f202 	lsl.w	r2, r1, r2
 800422e:	4013      	ands	r3, r2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0ab      	beq.n	800418c <HAL_RCC_OscConfig+0x1d0>
 8004234:	e05d      	b.n	80042f2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004236:	f7fe fddf 	bl	8002df8 <HAL_GetTick>
 800423a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800423e:	e00a      	b.n	8004256 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004240:	f7fe fdda 	bl	8002df8 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b64      	cmp	r3, #100	@ 0x64
 800424e:	d902      	bls.n	8004256 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	f000 bee9 	b.w	8005028 <HAL_RCC_OscConfig+0x106c>
 8004256:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800425a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8004262:	fa93 f3a3 	rbit	r3, r3
 8004266:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800426a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426e:	fab3 f383 	clz	r3, r3
 8004272:	b2db      	uxtb	r3, r3
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	b2db      	uxtb	r3, r3
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b01      	cmp	r3, #1
 8004280:	d102      	bne.n	8004288 <HAL_RCC_OscConfig+0x2cc>
 8004282:	4b1a      	ldr	r3, [pc, #104]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	e015      	b.n	80042b4 <HAL_RCC_OscConfig+0x2f8>
 8004288:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800428c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004294:	fa93 f3a3 	rbit	r3, r3
 8004298:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800429c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042a0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80042a4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80042a8:	fa93 f3a3 	rbit	r3, r3
 80042ac:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80042b0:	4b0e      	ldr	r3, [pc, #56]	@ (80042ec <HAL_RCC_OscConfig+0x330>)
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80042b8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80042bc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80042c0:	fa92 f2a2 	rbit	r2, r2
 80042c4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80042c8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80042cc:	fab2 f282 	clz	r2, r2
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	f042 0220 	orr.w	r2, r2, #32
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	f002 021f 	and.w	r2, r2, #31
 80042dc:	2101      	movs	r1, #1
 80042de:	fa01 f202 	lsl.w	r2, r1, r2
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1ab      	bne.n	8004240 <HAL_RCC_OscConfig+0x284>
 80042e8:	e003      	b.n	80042f2 <HAL_RCC_OscConfig+0x336>
 80042ea:	bf00      	nop
 80042ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 817d 	beq.w	8004602 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004308:	4ba6      	ldr	r3, [pc, #664]	@ (80045a4 <HAL_RCC_OscConfig+0x5e8>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 030c 	and.w	r3, r3, #12
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00b      	beq.n	800432c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004314:	4ba3      	ldr	r3, [pc, #652]	@ (80045a4 <HAL_RCC_OscConfig+0x5e8>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 030c 	and.w	r3, r3, #12
 800431c:	2b08      	cmp	r3, #8
 800431e:	d172      	bne.n	8004406 <HAL_RCC_OscConfig+0x44a>
 8004320:	4ba0      	ldr	r3, [pc, #640]	@ (80045a4 <HAL_RCC_OscConfig+0x5e8>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d16c      	bne.n	8004406 <HAL_RCC_OscConfig+0x44a>
 800432c:	2302      	movs	r3, #2
 800432e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004332:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004336:	fa93 f3a3 	rbit	r3, r3
 800433a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800433e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004342:	fab3 f383 	clz	r3, r3
 8004346:	b2db      	uxtb	r3, r3
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	b2db      	uxtb	r3, r3
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	d102      	bne.n	800435c <HAL_RCC_OscConfig+0x3a0>
 8004356:	4b93      	ldr	r3, [pc, #588]	@ (80045a4 <HAL_RCC_OscConfig+0x5e8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	e013      	b.n	8004384 <HAL_RCC_OscConfig+0x3c8>
 800435c:	2302      	movs	r3, #2
 800435e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004362:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004366:	fa93 f3a3 	rbit	r3, r3
 800436a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800436e:	2302      	movs	r3, #2
 8004370:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004374:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004378:	fa93 f3a3 	rbit	r3, r3
 800437c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004380:	4b88      	ldr	r3, [pc, #544]	@ (80045a4 <HAL_RCC_OscConfig+0x5e8>)
 8004382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004384:	2202      	movs	r2, #2
 8004386:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800438a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800438e:	fa92 f2a2 	rbit	r2, r2
 8004392:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8004396:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800439a:	fab2 f282 	clz	r2, r2
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	f042 0220 	orr.w	r2, r2, #32
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	f002 021f 	and.w	r2, r2, #31
 80043aa:	2101      	movs	r1, #1
 80043ac:	fa01 f202 	lsl.w	r2, r1, r2
 80043b0:	4013      	ands	r3, r2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <HAL_RCC_OscConfig+0x410>
 80043b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d002      	beq.n	80043cc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	f000 be2e 	b.w	8005028 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043cc:	4b75      	ldr	r3, [pc, #468]	@ (80045a4 <HAL_RCC_OscConfig+0x5e8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	21f8      	movs	r1, #248	@ 0xf8
 80043e2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80043ea:	fa91 f1a1 	rbit	r1, r1
 80043ee:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80043f2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80043f6:	fab1 f181 	clz	r1, r1
 80043fa:	b2c9      	uxtb	r1, r1
 80043fc:	408b      	lsls	r3, r1
 80043fe:	4969      	ldr	r1, [pc, #420]	@ (80045a4 <HAL_RCC_OscConfig+0x5e8>)
 8004400:	4313      	orrs	r3, r2
 8004402:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004404:	e0fd      	b.n	8004602 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800440a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 8088 	beq.w	8004528 <HAL_RCC_OscConfig+0x56c>
 8004418:	2301      	movs	r3, #1
 800441a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004422:	fa93 f3a3 	rbit	r3, r3
 8004426:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800442a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800442e:	fab3 f383 	clz	r3, r3
 8004432:	b2db      	uxtb	r3, r3
 8004434:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004438:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	461a      	mov	r2, r3
 8004440:	2301      	movs	r3, #1
 8004442:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004444:	f7fe fcd8 	bl	8002df8 <HAL_GetTick>
 8004448:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444c:	e00a      	b.n	8004464 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800444e:	f7fe fcd3 	bl	8002df8 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d902      	bls.n	8004464 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	f000 bde2 	b.w	8005028 <HAL_RCC_OscConfig+0x106c>
 8004464:	2302      	movs	r3, #2
 8004466:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800446e:	fa93 f3a3 	rbit	r3, r3
 8004472:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8004476:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447a:	fab3 f383 	clz	r3, r3
 800447e:	b2db      	uxtb	r3, r3
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	b2db      	uxtb	r3, r3
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b01      	cmp	r3, #1
 800448c:	d102      	bne.n	8004494 <HAL_RCC_OscConfig+0x4d8>
 800448e:	4b45      	ldr	r3, [pc, #276]	@ (80045a4 <HAL_RCC_OscConfig+0x5e8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	e013      	b.n	80044bc <HAL_RCC_OscConfig+0x500>
 8004494:	2302      	movs	r3, #2
 8004496:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800449e:	fa93 f3a3 	rbit	r3, r3
 80044a2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80044a6:	2302      	movs	r3, #2
 80044a8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80044ac:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80044b0:	fa93 f3a3 	rbit	r3, r3
 80044b4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80044b8:	4b3a      	ldr	r3, [pc, #232]	@ (80045a4 <HAL_RCC_OscConfig+0x5e8>)
 80044ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044bc:	2202      	movs	r2, #2
 80044be:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80044c2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80044c6:	fa92 f2a2 	rbit	r2, r2
 80044ca:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80044ce:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80044d2:	fab2 f282 	clz	r2, r2
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	f042 0220 	orr.w	r2, r2, #32
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	f002 021f 	and.w	r2, r2, #31
 80044e2:	2101      	movs	r1, #1
 80044e4:	fa01 f202 	lsl.w	r2, r1, r2
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0af      	beq.n	800444e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ee:	4b2d      	ldr	r3, [pc, #180]	@ (80045a4 <HAL_RCC_OscConfig+0x5e8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	21f8      	movs	r1, #248	@ 0xf8
 8004504:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004508:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800450c:	fa91 f1a1 	rbit	r1, r1
 8004510:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004514:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004518:	fab1 f181 	clz	r1, r1
 800451c:	b2c9      	uxtb	r1, r1
 800451e:	408b      	lsls	r3, r1
 8004520:	4920      	ldr	r1, [pc, #128]	@ (80045a4 <HAL_RCC_OscConfig+0x5e8>)
 8004522:	4313      	orrs	r3, r2
 8004524:	600b      	str	r3, [r1, #0]
 8004526:	e06c      	b.n	8004602 <HAL_RCC_OscConfig+0x646>
 8004528:	2301      	movs	r3, #1
 800452a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004532:	fa93 f3a3 	rbit	r3, r3
 8004536:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800453a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800453e:	fab3 f383 	clz	r3, r3
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004548:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	461a      	mov	r2, r3
 8004550:	2300      	movs	r3, #0
 8004552:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fe fc50 	bl	8002df8 <HAL_GetTick>
 8004558:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800455c:	e00a      	b.n	8004574 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800455e:	f7fe fc4b 	bl	8002df8 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d902      	bls.n	8004574 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	f000 bd5a 	b.w	8005028 <HAL_RCC_OscConfig+0x106c>
 8004574:	2302      	movs	r3, #2
 8004576:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800457e:	fa93 f3a3 	rbit	r3, r3
 8004582:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004586:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800458a:	fab3 f383 	clz	r3, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	b2db      	uxtb	r3, r3
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b01      	cmp	r3, #1
 800459c:	d104      	bne.n	80045a8 <HAL_RCC_OscConfig+0x5ec>
 800459e:	4b01      	ldr	r3, [pc, #4]	@ (80045a4 <HAL_RCC_OscConfig+0x5e8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	e015      	b.n	80045d0 <HAL_RCC_OscConfig+0x614>
 80045a4:	40021000 	.word	0x40021000
 80045a8:	2302      	movs	r3, #2
 80045aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80045b2:	fa93 f3a3 	rbit	r3, r3
 80045b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80045ba:	2302      	movs	r3, #2
 80045bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80045c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80045c4:	fa93 f3a3 	rbit	r3, r3
 80045c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80045cc:	4bc8      	ldr	r3, [pc, #800]	@ (80048f0 <HAL_RCC_OscConfig+0x934>)
 80045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d0:	2202      	movs	r2, #2
 80045d2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80045d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80045da:	fa92 f2a2 	rbit	r2, r2
 80045de:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80045e2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80045e6:	fab2 f282 	clz	r2, r2
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	f042 0220 	orr.w	r2, r2, #32
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	f002 021f 	and.w	r2, r2, #31
 80045f6:	2101      	movs	r1, #1
 80045f8:	fa01 f202 	lsl.w	r2, r1, r2
 80045fc:	4013      	ands	r3, r2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1ad      	bne.n	800455e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004606:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 8110 	beq.w	8004838 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800461c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d079      	beq.n	800471c <HAL_RCC_OscConfig+0x760>
 8004628:	2301      	movs	r3, #1
 800462a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004632:	fa93 f3a3 	rbit	r3, r3
 8004636:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800463a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800463e:	fab3 f383 	clz	r3, r3
 8004642:	b2db      	uxtb	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	4bab      	ldr	r3, [pc, #684]	@ (80048f4 <HAL_RCC_OscConfig+0x938>)
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	461a      	mov	r2, r3
 800464e:	2301      	movs	r3, #1
 8004650:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004652:	f7fe fbd1 	bl	8002df8 <HAL_GetTick>
 8004656:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800465a:	e00a      	b.n	8004672 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800465c:	f7fe fbcc 	bl	8002df8 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d902      	bls.n	8004672 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	f000 bcdb 	b.w	8005028 <HAL_RCC_OscConfig+0x106c>
 8004672:	2302      	movs	r3, #2
 8004674:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004678:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800467c:	fa93 f3a3 	rbit	r3, r3
 8004680:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004688:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800468c:	2202      	movs	r2, #2
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004694:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	fa93 f2a3 	rbit	r2, r3
 800469e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046b0:	2202      	movs	r2, #2
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	fa93 f2a3 	rbit	r2, r3
 80046c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80046ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046cc:	4b88      	ldr	r3, [pc, #544]	@ (80048f0 <HAL_RCC_OscConfig+0x934>)
 80046ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80046d8:	2102      	movs	r1, #2
 80046da:	6019      	str	r1, [r3, #0]
 80046dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	fa93 f1a3 	rbit	r1, r3
 80046ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80046f2:	6019      	str	r1, [r3, #0]
  return result;
 80046f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	fab3 f383 	clz	r3, r3
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004708:	b2db      	uxtb	r3, r3
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	2101      	movs	r1, #1
 8004710:	fa01 f303 	lsl.w	r3, r1, r3
 8004714:	4013      	ands	r3, r2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0a0      	beq.n	800465c <HAL_RCC_OscConfig+0x6a0>
 800471a:	e08d      	b.n	8004838 <HAL_RCC_OscConfig+0x87c>
 800471c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004720:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004724:	2201      	movs	r2, #1
 8004726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800472c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	fa93 f2a3 	rbit	r2, r3
 8004736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800473a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800473e:	601a      	str	r2, [r3, #0]
  return result;
 8004740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004744:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004748:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800474a:	fab3 f383 	clz	r3, r3
 800474e:	b2db      	uxtb	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	4b68      	ldr	r3, [pc, #416]	@ (80048f4 <HAL_RCC_OscConfig+0x938>)
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	461a      	mov	r2, r3
 800475a:	2300      	movs	r3, #0
 800475c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800475e:	f7fe fb4b 	bl	8002df8 <HAL_GetTick>
 8004762:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004766:	e00a      	b.n	800477e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004768:	f7fe fb46 	bl	8002df8 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d902      	bls.n	800477e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	f000 bc55 	b.w	8005028 <HAL_RCC_OscConfig+0x106c>
 800477e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004782:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004786:	2202      	movs	r2, #2
 8004788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800478e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	fa93 f2a3 	rbit	r2, r3
 8004798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800479c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80047aa:	2202      	movs	r2, #2
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	fa93 f2a3 	rbit	r2, r3
 80047bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80047ce:	2202      	movs	r2, #2
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	fa93 f2a3 	rbit	r2, r3
 80047e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80047e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ea:	4b41      	ldr	r3, [pc, #260]	@ (80048f0 <HAL_RCC_OscConfig+0x934>)
 80047ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80047f6:	2102      	movs	r1, #2
 80047f8:	6019      	str	r1, [r3, #0]
 80047fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	fa93 f1a3 	rbit	r1, r3
 8004808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800480c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004810:	6019      	str	r1, [r3, #0]
  return result;
 8004812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004816:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	fab3 f383 	clz	r3, r3
 8004820:	b2db      	uxtb	r3, r3
 8004822:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004826:	b2db      	uxtb	r3, r3
 8004828:	f003 031f 	and.w	r3, r3, #31
 800482c:	2101      	movs	r1, #1
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	4013      	ands	r3, r2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d197      	bne.n	8004768 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800483c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 81a1 	beq.w	8004b90 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800484e:	2300      	movs	r3, #0
 8004850:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004854:	4b26      	ldr	r3, [pc, #152]	@ (80048f0 <HAL_RCC_OscConfig+0x934>)
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d116      	bne.n	800488e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004860:	4b23      	ldr	r3, [pc, #140]	@ (80048f0 <HAL_RCC_OscConfig+0x934>)
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	4a22      	ldr	r2, [pc, #136]	@ (80048f0 <HAL_RCC_OscConfig+0x934>)
 8004866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800486a:	61d3      	str	r3, [r2, #28]
 800486c:	4b20      	ldr	r3, [pc, #128]	@ (80048f0 <HAL_RCC_OscConfig+0x934>)
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004878:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004882:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004886:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004888:	2301      	movs	r3, #1
 800488a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488e:	4b1a      	ldr	r3, [pc, #104]	@ (80048f8 <HAL_RCC_OscConfig+0x93c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d11a      	bne.n	80048d0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800489a:	4b17      	ldr	r3, [pc, #92]	@ (80048f8 <HAL_RCC_OscConfig+0x93c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a16      	ldr	r2, [pc, #88]	@ (80048f8 <HAL_RCC_OscConfig+0x93c>)
 80048a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048a6:	f7fe faa7 	bl	8002df8 <HAL_GetTick>
 80048aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ae:	e009      	b.n	80048c4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b0:	f7fe faa2 	bl	8002df8 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b64      	cmp	r3, #100	@ 0x64
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e3b1      	b.n	8005028 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c4:	4b0c      	ldr	r3, [pc, #48]	@ (80048f8 <HAL_RCC_OscConfig+0x93c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0ef      	beq.n	80048b0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d10d      	bne.n	80048fc <HAL_RCC_OscConfig+0x940>
 80048e0:	4b03      	ldr	r3, [pc, #12]	@ (80048f0 <HAL_RCC_OscConfig+0x934>)
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	4a02      	ldr	r2, [pc, #8]	@ (80048f0 <HAL_RCC_OscConfig+0x934>)
 80048e6:	f043 0301 	orr.w	r3, r3, #1
 80048ea:	6213      	str	r3, [r2, #32]
 80048ec:	e03c      	b.n	8004968 <HAL_RCC_OscConfig+0x9ac>
 80048ee:	bf00      	nop
 80048f0:	40021000 	.word	0x40021000
 80048f4:	10908120 	.word	0x10908120
 80048f8:	40007000 	.word	0x40007000
 80048fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004900:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10c      	bne.n	8004926 <HAL_RCC_OscConfig+0x96a>
 800490c:	4bc1      	ldr	r3, [pc, #772]	@ (8004c14 <HAL_RCC_OscConfig+0xc58>)
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	4ac0      	ldr	r2, [pc, #768]	@ (8004c14 <HAL_RCC_OscConfig+0xc58>)
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	6213      	str	r3, [r2, #32]
 8004918:	4bbe      	ldr	r3, [pc, #760]	@ (8004c14 <HAL_RCC_OscConfig+0xc58>)
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	4abd      	ldr	r2, [pc, #756]	@ (8004c14 <HAL_RCC_OscConfig+0xc58>)
 800491e:	f023 0304 	bic.w	r3, r3, #4
 8004922:	6213      	str	r3, [r2, #32]
 8004924:	e020      	b.n	8004968 <HAL_RCC_OscConfig+0x9ac>
 8004926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800492a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	2b05      	cmp	r3, #5
 8004934:	d10c      	bne.n	8004950 <HAL_RCC_OscConfig+0x994>
 8004936:	4bb7      	ldr	r3, [pc, #732]	@ (8004c14 <HAL_RCC_OscConfig+0xc58>)
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	4ab6      	ldr	r2, [pc, #728]	@ (8004c14 <HAL_RCC_OscConfig+0xc58>)
 800493c:	f043 0304 	orr.w	r3, r3, #4
 8004940:	6213      	str	r3, [r2, #32]
 8004942:	4bb4      	ldr	r3, [pc, #720]	@ (8004c14 <HAL_RCC_OscConfig+0xc58>)
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	4ab3      	ldr	r2, [pc, #716]	@ (8004c14 <HAL_RCC_OscConfig+0xc58>)
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	6213      	str	r3, [r2, #32]
 800494e:	e00b      	b.n	8004968 <HAL_RCC_OscConfig+0x9ac>
 8004950:	4bb0      	ldr	r3, [pc, #704]	@ (8004c14 <HAL_RCC_OscConfig+0xc58>)
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	4aaf      	ldr	r2, [pc, #700]	@ (8004c14 <HAL_RCC_OscConfig+0xc58>)
 8004956:	f023 0301 	bic.w	r3, r3, #1
 800495a:	6213      	str	r3, [r2, #32]
 800495c:	4bad      	ldr	r3, [pc, #692]	@ (8004c14 <HAL_RCC_OscConfig+0xc58>)
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	4aac      	ldr	r2, [pc, #688]	@ (8004c14 <HAL_RCC_OscConfig+0xc58>)
 8004962:	f023 0304 	bic.w	r3, r3, #4
 8004966:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800496c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 8081 	beq.w	8004a7c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497a:	f7fe fa3d 	bl	8002df8 <HAL_GetTick>
 800497e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004982:	e00b      	b.n	800499c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004984:	f7fe fa38 	bl	8002df8 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004994:	4293      	cmp	r3, r2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e345      	b.n	8005028 <HAL_RCC_OscConfig+0x106c>
 800499c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80049a4:	2202      	movs	r2, #2
 80049a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	fa93 f2a3 	rbit	r2, r3
 80049b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80049c8:	2202      	movs	r2, #2
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049d0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	fa93 f2a3 	rbit	r2, r3
 80049da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049de:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80049e2:	601a      	str	r2, [r3, #0]
  return result;
 80049e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049e8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80049ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ee:	fab3 f383 	clz	r3, r3
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	095b      	lsrs	r3, r3, #5
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	f043 0302 	orr.w	r3, r3, #2
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d102      	bne.n	8004a08 <HAL_RCC_OscConfig+0xa4c>
 8004a02:	4b84      	ldr	r3, [pc, #528]	@ (8004c14 <HAL_RCC_OscConfig+0xc58>)
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	e013      	b.n	8004a30 <HAL_RCC_OscConfig+0xa74>
 8004a08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a0c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004a10:	2202      	movs	r2, #2
 8004a12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a18:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	fa93 f2a3 	rbit	r2, r3
 8004a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a26:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	4b79      	ldr	r3, [pc, #484]	@ (8004c14 <HAL_RCC_OscConfig+0xc58>)
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a34:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004a38:	2102      	movs	r1, #2
 8004a3a:	6011      	str	r1, [r2, #0]
 8004a3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a40:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004a44:	6812      	ldr	r2, [r2, #0]
 8004a46:	fa92 f1a2 	rbit	r1, r2
 8004a4a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a4e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004a52:	6011      	str	r1, [r2, #0]
  return result;
 8004a54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a58:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004a5c:	6812      	ldr	r2, [r2, #0]
 8004a5e:	fab2 f282 	clz	r2, r2
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	f002 021f 	and.w	r2, r2, #31
 8004a6e:	2101      	movs	r1, #1
 8004a70:	fa01 f202 	lsl.w	r2, r1, r2
 8004a74:	4013      	ands	r3, r2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d084      	beq.n	8004984 <HAL_RCC_OscConfig+0x9c8>
 8004a7a:	e07f      	b.n	8004b7c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a7c:	f7fe f9bc 	bl	8002df8 <HAL_GetTick>
 8004a80:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a84:	e00b      	b.n	8004a9e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a86:	f7fe f9b7 	bl	8002df8 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e2c4      	b.n	8005028 <HAL_RCC_OscConfig+0x106c>
 8004a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aa2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aae:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	fa93 f2a3 	rbit	r2, r3
 8004ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004abc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ac6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004aca:	2202      	movs	r2, #2
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ad2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	fa93 f2a3 	rbit	r2, r3
 8004adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ae0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004ae4:	601a      	str	r2, [r3, #0]
  return result;
 8004ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aea:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004aee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af0:	fab3 f383 	clz	r3, r3
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	f043 0302 	orr.w	r3, r3, #2
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d102      	bne.n	8004b0a <HAL_RCC_OscConfig+0xb4e>
 8004b04:	4b43      	ldr	r3, [pc, #268]	@ (8004c14 <HAL_RCC_OscConfig+0xc58>)
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	e013      	b.n	8004b32 <HAL_RCC_OscConfig+0xb76>
 8004b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b0e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004b12:	2202      	movs	r2, #2
 8004b14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b1a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	fa93 f2a3 	rbit	r2, r3
 8004b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b28:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	4b39      	ldr	r3, [pc, #228]	@ (8004c14 <HAL_RCC_OscConfig+0xc58>)
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b36:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004b3a:	2102      	movs	r1, #2
 8004b3c:	6011      	str	r1, [r2, #0]
 8004b3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b42:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	fa92 f1a2 	rbit	r1, r2
 8004b4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b50:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004b54:	6011      	str	r1, [r2, #0]
  return result;
 8004b56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b5a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	fab2 f282 	clz	r2, r2
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	f002 021f 	and.w	r2, r2, #31
 8004b70:	2101      	movs	r1, #1
 8004b72:	fa01 f202 	lsl.w	r2, r1, r2
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d184      	bne.n	8004a86 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b7c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d105      	bne.n	8004b90 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b84:	4b23      	ldr	r3, [pc, #140]	@ (8004c14 <HAL_RCC_OscConfig+0xc58>)
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	4a22      	ldr	r2, [pc, #136]	@ (8004c14 <HAL_RCC_OscConfig+0xc58>)
 8004b8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b8e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 8242 	beq.w	8005026 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8004c14 <HAL_RCC_OscConfig+0xc58>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f003 030c 	and.w	r3, r3, #12
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	f000 8213 	beq.w	8004fd6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	f040 8162 	bne.w	8004e86 <HAL_RCC_OscConfig+0xeca>
 8004bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bc6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004bca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bd4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	fa93 f2a3 	rbit	r2, r3
 8004bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004be2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004be6:	601a      	str	r2, [r3, #0]
  return result;
 8004be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bec:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004bf0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf2:	fab3 f383 	clz	r3, r3
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004bfc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	461a      	mov	r2, r3
 8004c04:	2300      	movs	r3, #0
 8004c06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c08:	f7fe f8f6 	bl	8002df8 <HAL_GetTick>
 8004c0c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c10:	e00c      	b.n	8004c2c <HAL_RCC_OscConfig+0xc70>
 8004c12:	bf00      	nop
 8004c14:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c18:	f7fe f8ee 	bl	8002df8 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e1fd      	b.n	8005028 <HAL_RCC_OscConfig+0x106c>
 8004c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c30:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004c34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c3e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	fa93 f2a3 	rbit	r2, r3
 8004c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c4c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004c50:	601a      	str	r2, [r3, #0]
  return result;
 8004c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c56:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004c5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c5c:	fab3 f383 	clz	r3, r3
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	095b      	lsrs	r3, r3, #5
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	f043 0301 	orr.w	r3, r3, #1
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d102      	bne.n	8004c76 <HAL_RCC_OscConfig+0xcba>
 8004c70:	4bb0      	ldr	r3, [pc, #704]	@ (8004f34 <HAL_RCC_OscConfig+0xf78>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	e027      	b.n	8004cc6 <HAL_RCC_OscConfig+0xd0a>
 8004c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c7a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004c7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c88:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	fa93 f2a3 	rbit	r2, r3
 8004c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c96:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ca0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004ca4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cae:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	fa93 f2a3 	rbit	r2, r3
 8004cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cbc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	4b9c      	ldr	r3, [pc, #624]	@ (8004f34 <HAL_RCC_OscConfig+0xf78>)
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004cca:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004cce:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004cd2:	6011      	str	r1, [r2, #0]
 8004cd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004cd8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	fa92 f1a2 	rbit	r1, r2
 8004ce2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ce6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004cea:	6011      	str	r1, [r2, #0]
  return result;
 8004cec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004cf0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004cf4:	6812      	ldr	r2, [r2, #0]
 8004cf6:	fab2 f282 	clz	r2, r2
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	f042 0220 	orr.w	r2, r2, #32
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	f002 021f 	and.w	r2, r2, #31
 8004d06:	2101      	movs	r1, #1
 8004d08:	fa01 f202 	lsl.w	r2, r1, r2
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d182      	bne.n	8004c18 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d12:	4b88      	ldr	r3, [pc, #544]	@ (8004f34 <HAL_RCC_OscConfig+0xf78>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	430b      	orrs	r3, r1
 8004d34:	497f      	ldr	r1, [pc, #508]	@ (8004f34 <HAL_RCC_OscConfig+0xf78>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	604b      	str	r3, [r1, #4]
 8004d3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d3e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004d42:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d4c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	fa93 f2a3 	rbit	r2, r3
 8004d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d5a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004d5e:	601a      	str	r2, [r3, #0]
  return result;
 8004d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d64:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004d68:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d6a:	fab3 f383 	clz	r3, r3
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004d74:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d80:	f7fe f83a 	bl	8002df8 <HAL_GetTick>
 8004d84:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d88:	e009      	b.n	8004d9e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d8a:	f7fe f835 	bl	8002df8 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e144      	b.n	8005028 <HAL_RCC_OscConfig+0x106c>
 8004d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004da2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004da6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004db0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	fa93 f2a3 	rbit	r2, r3
 8004dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dbe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004dc2:	601a      	str	r2, [r3, #0]
  return result;
 8004dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dc8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004dcc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dce:	fab3 f383 	clz	r3, r3
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d102      	bne.n	8004de8 <HAL_RCC_OscConfig+0xe2c>
 8004de2:	4b54      	ldr	r3, [pc, #336]	@ (8004f34 <HAL_RCC_OscConfig+0xf78>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	e027      	b.n	8004e38 <HAL_RCC_OscConfig+0xe7c>
 8004de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004df0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dfa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	fa93 f2a3 	rbit	r2, r3
 8004e04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e08:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e12:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004e16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e20:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	fa93 f2a3 	rbit	r2, r3
 8004e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e2e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	4b3f      	ldr	r3, [pc, #252]	@ (8004f34 <HAL_RCC_OscConfig+0xf78>)
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e3c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004e40:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004e44:	6011      	str	r1, [r2, #0]
 8004e46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e4a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	fa92 f1a2 	rbit	r1, r2
 8004e54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e58:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004e5c:	6011      	str	r1, [r2, #0]
  return result;
 8004e5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e62:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	fab2 f282 	clz	r2, r2
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	f042 0220 	orr.w	r2, r2, #32
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	f002 021f 	and.w	r2, r2, #31
 8004e78:	2101      	movs	r1, #1
 8004e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d082      	beq.n	8004d8a <HAL_RCC_OscConfig+0xdce>
 8004e84:	e0cf      	b.n	8005026 <HAL_RCC_OscConfig+0x106a>
 8004e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e8a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004e8e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e98:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	fa93 f2a3 	rbit	r2, r3
 8004ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ea6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004eaa:	601a      	str	r2, [r3, #0]
  return result;
 8004eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eb0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004eb4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb6:	fab3 f383 	clz	r3, r3
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004ec0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	2300      	movs	r3, #0
 8004eca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ecc:	f7fd ff94 	bl	8002df8 <HAL_GetTick>
 8004ed0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ed4:	e009      	b.n	8004eea <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ed6:	f7fd ff8f 	bl	8002df8 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e09e      	b.n	8005028 <HAL_RCC_OscConfig+0x106c>
 8004eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eee:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004ef2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004efc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	fa93 f2a3 	rbit	r2, r3
 8004f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f0a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004f0e:	601a      	str	r2, [r3, #0]
  return result;
 8004f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f14:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004f18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f1a:	fab3 f383 	clz	r3, r3
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	095b      	lsrs	r3, r3, #5
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	f043 0301 	orr.w	r3, r3, #1
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d104      	bne.n	8004f38 <HAL_RCC_OscConfig+0xf7c>
 8004f2e:	4b01      	ldr	r3, [pc, #4]	@ (8004f34 <HAL_RCC_OscConfig+0xf78>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	e029      	b.n	8004f88 <HAL_RCC_OscConfig+0xfcc>
 8004f34:	40021000 	.word	0x40021000
 8004f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f3c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004f40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f4a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	fa93 f2a3 	rbit	r2, r3
 8004f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f58:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f62:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004f66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f70:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	fa93 f2a3 	rbit	r2, r3
 8004f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f7e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	4b2b      	ldr	r3, [pc, #172]	@ (8005034 <HAL_RCC_OscConfig+0x1078>)
 8004f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f8c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004f90:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004f94:	6011      	str	r1, [r2, #0]
 8004f96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f9a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	fa92 f1a2 	rbit	r1, r2
 8004fa4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004fa8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004fac:	6011      	str	r1, [r2, #0]
  return result;
 8004fae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004fb2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	fab2 f282 	clz	r2, r2
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	f042 0220 	orr.w	r2, r2, #32
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	f002 021f 	and.w	r2, r2, #31
 8004fc8:	2101      	movs	r1, #1
 8004fca:	fa01 f202 	lsl.w	r2, r1, r2
 8004fce:	4013      	ands	r3, r2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d180      	bne.n	8004ed6 <HAL_RCC_OscConfig+0xf1a>
 8004fd4:	e027      	b.n	8005026 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e01e      	b.n	8005028 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fea:	4b12      	ldr	r3, [pc, #72]	@ (8005034 <HAL_RCC_OscConfig+0x1078>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ff2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004ff6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ffe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	429a      	cmp	r2, r3
 8005008:	d10b      	bne.n	8005022 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800500a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800500e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005016:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800501e:	429a      	cmp	r2, r3
 8005020:	d001      	beq.n	8005026 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40021000 	.word	0x40021000

08005038 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b09e      	sub	sp, #120	@ 0x78
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e162      	b.n	8005316 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005050:	4b90      	ldr	r3, [pc, #576]	@ (8005294 <HAL_RCC_ClockConfig+0x25c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d910      	bls.n	8005080 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505e:	4b8d      	ldr	r3, [pc, #564]	@ (8005294 <HAL_RCC_ClockConfig+0x25c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f023 0207 	bic.w	r2, r3, #7
 8005066:	498b      	ldr	r1, [pc, #556]	@ (8005294 <HAL_RCC_ClockConfig+0x25c>)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	4313      	orrs	r3, r2
 800506c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800506e:	4b89      	ldr	r3, [pc, #548]	@ (8005294 <HAL_RCC_ClockConfig+0x25c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d001      	beq.n	8005080 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e14a      	b.n	8005316 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800508c:	4b82      	ldr	r3, [pc, #520]	@ (8005298 <HAL_RCC_ClockConfig+0x260>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	497f      	ldr	r1, [pc, #508]	@ (8005298 <HAL_RCC_ClockConfig+0x260>)
 800509a:	4313      	orrs	r3, r2
 800509c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 80dc 	beq.w	8005264 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d13c      	bne.n	800512e <HAL_RCC_ClockConfig+0xf6>
 80050b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80050b8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050bc:	fa93 f3a3 	rbit	r3, r3
 80050c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80050c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c4:	fab3 f383 	clz	r3, r3
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	095b      	lsrs	r3, r3, #5
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d102      	bne.n	80050de <HAL_RCC_ClockConfig+0xa6>
 80050d8:	4b6f      	ldr	r3, [pc, #444]	@ (8005298 <HAL_RCC_ClockConfig+0x260>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	e00f      	b.n	80050fe <HAL_RCC_ClockConfig+0xc6>
 80050de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80050e2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050e6:	fa93 f3a3 	rbit	r3, r3
 80050ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80050ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80050f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80050f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050f4:	fa93 f3a3 	rbit	r3, r3
 80050f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050fa:	4b67      	ldr	r3, [pc, #412]	@ (8005298 <HAL_RCC_ClockConfig+0x260>)
 80050fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005102:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005104:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005106:	fa92 f2a2 	rbit	r2, r2
 800510a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800510c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800510e:	fab2 f282 	clz	r2, r2
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	f042 0220 	orr.w	r2, r2, #32
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	f002 021f 	and.w	r2, r2, #31
 800511e:	2101      	movs	r1, #1
 8005120:	fa01 f202 	lsl.w	r2, r1, r2
 8005124:	4013      	ands	r3, r2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d17b      	bne.n	8005222 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e0f3      	b.n	8005316 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d13c      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x178>
 8005136:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800513a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800513e:	fa93 f3a3 	rbit	r3, r3
 8005142:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005146:	fab3 f383 	clz	r3, r3
 800514a:	b2db      	uxtb	r3, r3
 800514c:	095b      	lsrs	r3, r3, #5
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f043 0301 	orr.w	r3, r3, #1
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b01      	cmp	r3, #1
 8005158:	d102      	bne.n	8005160 <HAL_RCC_ClockConfig+0x128>
 800515a:	4b4f      	ldr	r3, [pc, #316]	@ (8005298 <HAL_RCC_ClockConfig+0x260>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	e00f      	b.n	8005180 <HAL_RCC_ClockConfig+0x148>
 8005160:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005164:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005168:	fa93 f3a3 	rbit	r3, r3
 800516c:	647b      	str	r3, [r7, #68]	@ 0x44
 800516e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005172:	643b      	str	r3, [r7, #64]	@ 0x40
 8005174:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005176:	fa93 f3a3 	rbit	r3, r3
 800517a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800517c:	4b46      	ldr	r3, [pc, #280]	@ (8005298 <HAL_RCC_ClockConfig+0x260>)
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005184:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005186:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005188:	fa92 f2a2 	rbit	r2, r2
 800518c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800518e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005190:	fab2 f282 	clz	r2, r2
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	f042 0220 	orr.w	r2, r2, #32
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	f002 021f 	and.w	r2, r2, #31
 80051a0:	2101      	movs	r1, #1
 80051a2:	fa01 f202 	lsl.w	r2, r1, r2
 80051a6:	4013      	ands	r3, r2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d13a      	bne.n	8005222 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0b2      	b.n	8005316 <HAL_RCC_ClockConfig+0x2de>
 80051b0:	2302      	movs	r3, #2
 80051b2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b6:	fa93 f3a3 	rbit	r3, r3
 80051ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80051bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051be:	fab3 f383 	clz	r3, r3
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d102      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x1a0>
 80051d2:	4b31      	ldr	r3, [pc, #196]	@ (8005298 <HAL_RCC_ClockConfig+0x260>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	e00d      	b.n	80051f4 <HAL_RCC_ClockConfig+0x1bc>
 80051d8:	2302      	movs	r3, #2
 80051da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051de:	fa93 f3a3 	rbit	r3, r3
 80051e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051e4:	2302      	movs	r3, #2
 80051e6:	623b      	str	r3, [r7, #32]
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	fa93 f3a3 	rbit	r3, r3
 80051ee:	61fb      	str	r3, [r7, #28]
 80051f0:	4b29      	ldr	r3, [pc, #164]	@ (8005298 <HAL_RCC_ClockConfig+0x260>)
 80051f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f4:	2202      	movs	r2, #2
 80051f6:	61ba      	str	r2, [r7, #24]
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	fa92 f2a2 	rbit	r2, r2
 80051fe:	617a      	str	r2, [r7, #20]
  return result;
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	fab2 f282 	clz	r2, r2
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	f042 0220 	orr.w	r2, r2, #32
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	f002 021f 	and.w	r2, r2, #31
 8005212:	2101      	movs	r1, #1
 8005214:	fa01 f202 	lsl.w	r2, r1, r2
 8005218:	4013      	ands	r3, r2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e079      	b.n	8005316 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005222:	4b1d      	ldr	r3, [pc, #116]	@ (8005298 <HAL_RCC_ClockConfig+0x260>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f023 0203 	bic.w	r2, r3, #3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	491a      	ldr	r1, [pc, #104]	@ (8005298 <HAL_RCC_ClockConfig+0x260>)
 8005230:	4313      	orrs	r3, r2
 8005232:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005234:	f7fd fde0 	bl	8002df8 <HAL_GetTick>
 8005238:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523a:	e00a      	b.n	8005252 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800523c:	f7fd fddc 	bl	8002df8 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e061      	b.n	8005316 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005252:	4b11      	ldr	r3, [pc, #68]	@ (8005298 <HAL_RCC_ClockConfig+0x260>)
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f003 020c 	and.w	r2, r3, #12
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	429a      	cmp	r2, r3
 8005262:	d1eb      	bne.n	800523c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005264:	4b0b      	ldr	r3, [pc, #44]	@ (8005294 <HAL_RCC_ClockConfig+0x25c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d214      	bcs.n	800529c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005272:	4b08      	ldr	r3, [pc, #32]	@ (8005294 <HAL_RCC_ClockConfig+0x25c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f023 0207 	bic.w	r2, r3, #7
 800527a:	4906      	ldr	r1, [pc, #24]	@ (8005294 <HAL_RCC_ClockConfig+0x25c>)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	4313      	orrs	r3, r2
 8005280:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005282:	4b04      	ldr	r3, [pc, #16]	@ (8005294 <HAL_RCC_ClockConfig+0x25c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d005      	beq.n	800529c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e040      	b.n	8005316 <HAL_RCC_ClockConfig+0x2de>
 8005294:	40022000 	.word	0x40022000
 8005298:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005320 <HAL_RCC_ClockConfig+0x2e8>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	491a      	ldr	r1, [pc, #104]	@ (8005320 <HAL_RCC_ClockConfig+0x2e8>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d009      	beq.n	80052da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052c6:	4b16      	ldr	r3, [pc, #88]	@ (8005320 <HAL_RCC_ClockConfig+0x2e8>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	4912      	ldr	r1, [pc, #72]	@ (8005320 <HAL_RCC_ClockConfig+0x2e8>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80052da:	f000 f829 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 80052de:	4601      	mov	r1, r0
 80052e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005320 <HAL_RCC_ClockConfig+0x2e8>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052e8:	22f0      	movs	r2, #240	@ 0xf0
 80052ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	fa92 f2a2 	rbit	r2, r2
 80052f2:	60fa      	str	r2, [r7, #12]
  return result;
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	fab2 f282 	clz	r2, r2
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	40d3      	lsrs	r3, r2
 80052fe:	4a09      	ldr	r2, [pc, #36]	@ (8005324 <HAL_RCC_ClockConfig+0x2ec>)
 8005300:	5cd3      	ldrb	r3, [r2, r3]
 8005302:	fa21 f303 	lsr.w	r3, r1, r3
 8005306:	4a08      	ldr	r2, [pc, #32]	@ (8005328 <HAL_RCC_ClockConfig+0x2f0>)
 8005308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800530a:	4b08      	ldr	r3, [pc, #32]	@ (800532c <HAL_RCC_ClockConfig+0x2f4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4618      	mov	r0, r3
 8005310:	f7fd fd2e 	bl	8002d70 <HAL_InitTick>
  
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3778      	adds	r7, #120	@ 0x78
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	40021000 	.word	0x40021000
 8005324:	0800cf40 	.word	0x0800cf40
 8005328:	20000014 	.word	0x20000014
 800532c:	20000018 	.word	0x20000018

08005330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005330:	b480      	push	{r7}
 8005332:	b08b      	sub	sp, #44	@ 0x2c
 8005334:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	61fb      	str	r3, [r7, #28]
 800533a:	2300      	movs	r3, #0
 800533c:	61bb      	str	r3, [r7, #24]
 800533e:	2300      	movs	r3, #0
 8005340:	627b      	str	r3, [r7, #36]	@ 0x24
 8005342:	2300      	movs	r3, #0
 8005344:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800534a:	4b29      	ldr	r3, [pc, #164]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	f003 030c 	and.w	r3, r3, #12
 8005356:	2b04      	cmp	r3, #4
 8005358:	d002      	beq.n	8005360 <HAL_RCC_GetSysClockFreq+0x30>
 800535a:	2b08      	cmp	r3, #8
 800535c:	d003      	beq.n	8005366 <HAL_RCC_GetSysClockFreq+0x36>
 800535e:	e03c      	b.n	80053da <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005360:	4b24      	ldr	r3, [pc, #144]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005362:	623b      	str	r3, [r7, #32]
      break;
 8005364:	e03c      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800536c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8005370:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	fa92 f2a2 	rbit	r2, r2
 8005378:	607a      	str	r2, [r7, #4]
  return result;
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	fab2 f282 	clz	r2, r2
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	40d3      	lsrs	r3, r2
 8005384:	4a1c      	ldr	r2, [pc, #112]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005386:	5cd3      	ldrb	r3, [r2, r3]
 8005388:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800538a:	4b19      	ldr	r3, [pc, #100]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800538c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	220f      	movs	r2, #15
 8005394:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	fa92 f2a2 	rbit	r2, r2
 800539c:	60fa      	str	r2, [r7, #12]
  return result;
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	fab2 f282 	clz	r2, r2
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	40d3      	lsrs	r3, r2
 80053a8:	4a14      	ldr	r2, [pc, #80]	@ (80053fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80053aa:	5cd3      	ldrb	r3, [r2, r3]
 80053ac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d008      	beq.n	80053ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80053b8:	4a0e      	ldr	r2, [pc, #56]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	fb02 f303 	mul.w	r3, r2, r3
 80053c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c8:	e004      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	4a0c      	ldr	r2, [pc, #48]	@ (8005400 <HAL_RCC_GetSysClockFreq+0xd0>)
 80053ce:	fb02 f303 	mul.w	r3, r2, r3
 80053d2:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80053d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d6:	623b      	str	r3, [r7, #32]
      break;
 80053d8:	e002      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053da:	4b0a      	ldr	r3, [pc, #40]	@ (8005404 <HAL_RCC_GetSysClockFreq+0xd4>)
 80053dc:	623b      	str	r3, [r7, #32]
      break;
 80053de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053e0:	6a3b      	ldr	r3, [r7, #32]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	372c      	adds	r7, #44	@ 0x2c
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40021000 	.word	0x40021000
 80053f4:	00b71b00 	.word	0x00b71b00
 80053f8:	0800cf58 	.word	0x0800cf58
 80053fc:	0800cf68 	.word	0x0800cf68
 8005400:	003d0900 	.word	0x003d0900
 8005404:	007a1200 	.word	0x007a1200

08005408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800540c:	4b03      	ldr	r3, [pc, #12]	@ (800541c <HAL_RCC_GetHCLKFreq+0x14>)
 800540e:	681b      	ldr	r3, [r3, #0]
}
 8005410:	4618      	mov	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	20000014 	.word	0x20000014

08005420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005426:	f7ff ffef 	bl	8005408 <HAL_RCC_GetHCLKFreq>
 800542a:	4601      	mov	r1, r0
 800542c:	4b0b      	ldr	r3, [pc, #44]	@ (800545c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005434:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005438:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	fa92 f2a2 	rbit	r2, r2
 8005440:	603a      	str	r2, [r7, #0]
  return result;
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	fab2 f282 	clz	r2, r2
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	40d3      	lsrs	r3, r2
 800544c:	4a04      	ldr	r2, [pc, #16]	@ (8005460 <HAL_RCC_GetPCLK1Freq+0x40>)
 800544e:	5cd3      	ldrb	r3, [r2, r3]
 8005450:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40021000 	.word	0x40021000
 8005460:	0800cf50 	.word	0x0800cf50

08005464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800546a:	f7ff ffcd 	bl	8005408 <HAL_RCC_GetHCLKFreq>
 800546e:	4601      	mov	r1, r0
 8005470:	4b0b      	ldr	r3, [pc, #44]	@ (80054a0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005478:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800547c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	fa92 f2a2 	rbit	r2, r2
 8005484:	603a      	str	r2, [r7, #0]
  return result;
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	fab2 f282 	clz	r2, r2
 800548c:	b2d2      	uxtb	r2, r2
 800548e:	40d3      	lsrs	r3, r2
 8005490:	4a04      	ldr	r2, [pc, #16]	@ (80054a4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005492:	5cd3      	ldrb	r3, [r2, r3]
 8005494:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005498:	4618      	mov	r0, r3
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40021000 	.word	0x40021000
 80054a4:	0800cf50 	.word	0x0800cf50

080054a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b092      	sub	sp, #72	@ 0x48
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80054b8:	2300      	movs	r3, #0
 80054ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 80d4 	beq.w	8005674 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054cc:	4b4e      	ldr	r3, [pc, #312]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10e      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054d8:	4b4b      	ldr	r3, [pc, #300]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	4a4a      	ldr	r2, [pc, #296]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054e2:	61d3      	str	r3, [r2, #28]
 80054e4:	4b48      	ldr	r3, [pc, #288]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ec:	60bb      	str	r3, [r7, #8]
 80054ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f6:	4b45      	ldr	r3, [pc, #276]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d118      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005502:	4b42      	ldr	r3, [pc, #264]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a41      	ldr	r2, [pc, #260]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005508:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800550c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800550e:	f7fd fc73 	bl	8002df8 <HAL_GetTick>
 8005512:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005514:	e008      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005516:	f7fd fc6f 	bl	8002df8 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b64      	cmp	r3, #100	@ 0x64
 8005522:	d901      	bls.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e12d      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005528:	4b38      	ldr	r3, [pc, #224]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0f0      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005534:	4b34      	ldr	r3, [pc, #208]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800553c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800553e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 8084 	beq.w	800564e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800554e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005550:	429a      	cmp	r2, r3
 8005552:	d07c      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005554:	4b2c      	ldr	r3, [pc, #176]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800555c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800555e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005562:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005566:	fa93 f3a3 	rbit	r3, r3
 800556a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800556c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800556e:	fab3 f383 	clz	r3, r3
 8005572:	b2db      	uxtb	r3, r3
 8005574:	461a      	mov	r2, r3
 8005576:	4b26      	ldr	r3, [pc, #152]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005578:	4413      	add	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	461a      	mov	r2, r3
 800557e:	2301      	movs	r3, #1
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005586:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558a:	fa93 f3a3 	rbit	r3, r3
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005592:	fab3 f383 	clz	r3, r3
 8005596:	b2db      	uxtb	r3, r3
 8005598:	461a      	mov	r2, r3
 800559a:	4b1d      	ldr	r3, [pc, #116]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	461a      	mov	r2, r3
 80055a2:	2300      	movs	r3, #0
 80055a4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80055a6:	4a18      	ldr	r2, [pc, #96]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055aa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80055ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d04b      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b6:	f7fd fc1f 	bl	8002df8 <HAL_GetTick>
 80055ba:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055bc:	e00a      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055be:	f7fd fc1b 	bl	8002df8 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e0d7      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80055d4:	2302      	movs	r3, #2
 80055d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055da:	fa93 f3a3 	rbit	r3, r3
 80055de:	627b      	str	r3, [r7, #36]	@ 0x24
 80055e0:	2302      	movs	r3, #2
 80055e2:	623b      	str	r3, [r7, #32]
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	fa93 f3a3 	rbit	r3, r3
 80055ea:	61fb      	str	r3, [r7, #28]
  return result;
 80055ec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ee:	fab3 f383 	clz	r3, r3
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	f043 0302 	orr.w	r3, r3, #2
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d108      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005602:	4b01      	ldr	r3, [pc, #4]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	e00d      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005608:	40021000 	.word	0x40021000
 800560c:	40007000 	.word	0x40007000
 8005610:	10908100 	.word	0x10908100
 8005614:	2302      	movs	r3, #2
 8005616:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	fa93 f3a3 	rbit	r3, r3
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	4b5a      	ldr	r3, [pc, #360]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005624:	2202      	movs	r2, #2
 8005626:	613a      	str	r2, [r7, #16]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	fa92 f2a2 	rbit	r2, r2
 800562e:	60fa      	str	r2, [r7, #12]
  return result;
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	fab2 f282 	clz	r2, r2
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	f002 021f 	and.w	r2, r2, #31
 8005642:	2101      	movs	r1, #1
 8005644:	fa01 f202 	lsl.w	r2, r1, r2
 8005648:	4013      	ands	r3, r2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0b7      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800564e:	4b4f      	ldr	r3, [pc, #316]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	494c      	ldr	r1, [pc, #304]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800565c:	4313      	orrs	r3, r2
 800565e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005660:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005664:	2b01      	cmp	r3, #1
 8005666:	d105      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005668:	4b48      	ldr	r3, [pc, #288]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	4a47      	ldr	r2, [pc, #284]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800566e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005672:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d008      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005680:	4b42      	ldr	r3, [pc, #264]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005684:	f023 0203 	bic.w	r2, r3, #3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	493f      	ldr	r1, [pc, #252]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800568e:	4313      	orrs	r3, r2
 8005690:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d008      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800569e:	4b3b      	ldr	r3, [pc, #236]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	4938      	ldr	r1, [pc, #224]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056bc:	4b33      	ldr	r3, [pc, #204]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	4930      	ldr	r1, [pc, #192]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0320 	and.w	r3, r3, #32
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d008      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056da:	4b2c      	ldr	r3, [pc, #176]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056de:	f023 0210 	bic.w	r2, r3, #16
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	4929      	ldr	r1, [pc, #164]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d008      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80056f8:	4b24      	ldr	r3, [pc, #144]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005704:	4921      	ldr	r1, [pc, #132]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005706:	4313      	orrs	r3, r2
 8005708:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	d008      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005716:	4b1d      	ldr	r3, [pc, #116]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571a:	f023 0220 	bic.w	r2, r3, #32
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	491a      	ldr	r1, [pc, #104]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005724:	4313      	orrs	r3, r2
 8005726:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005730:	2b00      	cmp	r3, #0
 8005732:	d008      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005734:	4b15      	ldr	r3, [pc, #84]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	4912      	ldr	r1, [pc, #72]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005742:	4313      	orrs	r3, r2
 8005744:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800574e:	2b00      	cmp	r3, #0
 8005750:	d008      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8005752:	4b0e      	ldr	r3, [pc, #56]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	490b      	ldr	r1, [pc, #44]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005760:	4313      	orrs	r3, r2
 8005762:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800576c:	2b00      	cmp	r3, #0
 800576e:	d008      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005770:	4b06      	ldr	r3, [pc, #24]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005774:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577c:	4903      	ldr	r1, [pc, #12]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800577e:	4313      	orrs	r3, r2
 8005780:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3748      	adds	r7, #72	@ 0x48
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40021000 	.word	0x40021000

08005790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e041      	b.n	8005826 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d106      	bne.n	80057bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fc ffc6 	bl	8002748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3304      	adds	r3, #4
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f000 fc4a 	bl	8006068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b01      	cmp	r3, #1
 8005842:	d001      	beq.n	8005848 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e041      	b.n	80058cc <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005858:	d01d      	beq.n	8005896 <HAL_TIM_Base_Start+0x66>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a1e      	ldr	r2, [pc, #120]	@ (80058d8 <HAL_TIM_Base_Start+0xa8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d018      	beq.n	8005896 <HAL_TIM_Base_Start+0x66>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a1c      	ldr	r2, [pc, #112]	@ (80058dc <HAL_TIM_Base_Start+0xac>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d013      	beq.n	8005896 <HAL_TIM_Base_Start+0x66>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a1b      	ldr	r2, [pc, #108]	@ (80058e0 <HAL_TIM_Base_Start+0xb0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00e      	beq.n	8005896 <HAL_TIM_Base_Start+0x66>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a19      	ldr	r2, [pc, #100]	@ (80058e4 <HAL_TIM_Base_Start+0xb4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d009      	beq.n	8005896 <HAL_TIM_Base_Start+0x66>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a18      	ldr	r2, [pc, #96]	@ (80058e8 <HAL_TIM_Base_Start+0xb8>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d004      	beq.n	8005896 <HAL_TIM_Base_Start+0x66>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a16      	ldr	r2, [pc, #88]	@ (80058ec <HAL_TIM_Base_Start+0xbc>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d111      	bne.n	80058ba <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b06      	cmp	r3, #6
 80058a6:	d010      	beq.n	80058ca <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b8:	e007      	b.n	80058ca <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0201 	orr.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40000800 	.word	0x40000800
 80058e0:	40000c00 	.word	0x40000c00
 80058e4:	40001800 	.word	0x40001800
 80058e8:	40014000 	.word	0x40014000
 80058ec:	40015c00 	.word	0x40015c00

080058f0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6a1a      	ldr	r2, [r3, #32]
 80058fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005902:	4013      	ands	r3, r2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10f      	bne.n	8005928 <HAL_TIM_Base_Stop+0x38>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6a1a      	ldr	r2, [r3, #32]
 800590e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005912:	4013      	ands	r3, r2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d107      	bne.n	8005928 <HAL_TIM_Base_Stop+0x38>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0201 	bic.w	r2, r2, #1
 8005926:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
	...

08005940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b01      	cmp	r3, #1
 8005952:	d001      	beq.n	8005958 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e049      	b.n	80059ec <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0201 	orr.w	r2, r2, #1
 800596e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005978:	d01d      	beq.n	80059b6 <HAL_TIM_Base_Start_IT+0x76>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a1e      	ldr	r2, [pc, #120]	@ (80059f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d018      	beq.n	80059b6 <HAL_TIM_Base_Start_IT+0x76>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a1c      	ldr	r2, [pc, #112]	@ (80059fc <HAL_TIM_Base_Start_IT+0xbc>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d013      	beq.n	80059b6 <HAL_TIM_Base_Start_IT+0x76>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1b      	ldr	r2, [pc, #108]	@ (8005a00 <HAL_TIM_Base_Start_IT+0xc0>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00e      	beq.n	80059b6 <HAL_TIM_Base_Start_IT+0x76>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a19      	ldr	r2, [pc, #100]	@ (8005a04 <HAL_TIM_Base_Start_IT+0xc4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d009      	beq.n	80059b6 <HAL_TIM_Base_Start_IT+0x76>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a18      	ldr	r2, [pc, #96]	@ (8005a08 <HAL_TIM_Base_Start_IT+0xc8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d004      	beq.n	80059b6 <HAL_TIM_Base_Start_IT+0x76>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a16      	ldr	r2, [pc, #88]	@ (8005a0c <HAL_TIM_Base_Start_IT+0xcc>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d111      	bne.n	80059da <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b06      	cmp	r3, #6
 80059c6:	d010      	beq.n	80059ea <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0201 	orr.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d8:	e007      	b.n	80059ea <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f042 0201 	orr.w	r2, r2, #1
 80059e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	40000400 	.word	0x40000400
 80059fc:	40000800 	.word	0x40000800
 8005a00:	40000c00 	.word	0x40000c00
 8005a04:	40001800 	.word	0x40001800
 8005a08:	40014000 	.word	0x40014000
 8005a0c:	40015c00 	.word	0x40015c00

08005a10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e097      	b.n	8005b54 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d106      	bne.n	8005a3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7fc fec5 	bl	80027c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2202      	movs	r2, #2
 8005a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	6812      	ldr	r2, [r2, #0]
 8005a50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a54:	f023 0307 	bic.w	r3, r3, #7
 8005a58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3304      	adds	r3, #4
 8005a62:	4619      	mov	r1, r3
 8005a64:	4610      	mov	r0, r2
 8005a66:	f000 faff 	bl	8006068 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a92:	f023 0303 	bic.w	r3, r3, #3
 8005a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	021b      	lsls	r3, r3, #8
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005ab0:	f023 030c 	bic.w	r3, r3, #12
 8005ab4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005abc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ac0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	4313      	orrs	r3, r2
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	011a      	lsls	r2, r3, #4
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	031b      	lsls	r3, r3, #12
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005aee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005af6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	4313      	orrs	r3, r2
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3718      	adds	r7, #24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b6c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b74:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b7c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b84:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d110      	bne.n	8005bae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d102      	bne.n	8005b98 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b92:	7b7b      	ldrb	r3, [r7, #13]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d001      	beq.n	8005b9c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e069      	b.n	8005c70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bac:	e031      	b.n	8005c12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d110      	bne.n	8005bd6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bb4:	7bbb      	ldrb	r3, [r7, #14]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d102      	bne.n	8005bc0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bba:	7b3b      	ldrb	r3, [r7, #12]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d001      	beq.n	8005bc4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e055      	b.n	8005c70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bd4:	e01d      	b.n	8005c12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d108      	bne.n	8005bee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bdc:	7bbb      	ldrb	r3, [r7, #14]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d105      	bne.n	8005bee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005be2:	7b7b      	ldrb	r3, [r7, #13]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d102      	bne.n	8005bee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005be8:	7b3b      	ldrb	r3, [r7, #12]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d001      	beq.n	8005bf2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e03e      	b.n	8005c70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2202      	movs	r2, #2
 8005c06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <HAL_TIM_Encoder_Start+0xc4>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d008      	beq.n	8005c30 <HAL_TIM_Encoder_Start+0xd4>
 8005c1e:	e00f      	b.n	8005c40 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2201      	movs	r2, #1
 8005c26:	2100      	movs	r1, #0
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 fb51 	bl	80062d0 <TIM_CCxChannelCmd>
      break;
 8005c2e:	e016      	b.n	8005c5e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2201      	movs	r2, #1
 8005c36:	2104      	movs	r1, #4
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 fb49 	bl	80062d0 <TIM_CCxChannelCmd>
      break;
 8005c3e:	e00e      	b.n	8005c5e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2201      	movs	r2, #1
 8005c46:	2100      	movs	r1, #0
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fb41 	bl	80062d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2201      	movs	r2, #1
 8005c54:	2104      	movs	r1, #4
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fb3a 	bl	80062d0 <TIM_CCxChannelCmd>
      break;
 8005c5c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f042 0201 	orr.w	r2, r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d122      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d11b      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f06f 0202 	mvn.w	r2, #2
 8005ca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	f003 0303 	and.w	r3, r3, #3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f9b5 	bl	800602a <HAL_TIM_IC_CaptureCallback>
 8005cc0:	e005      	b.n	8005cce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f9a7 	bl	8006016 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f9b8 	bl	800603e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f003 0304 	and.w	r3, r3, #4
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d122      	bne.n	8005d28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d11b      	bne.n	8005d28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f06f 0204 	mvn.w	r2, #4
 8005cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f98b 	bl	800602a <HAL_TIM_IC_CaptureCallback>
 8005d14:	e005      	b.n	8005d22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f97d 	bl	8006016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f98e 	bl	800603e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b08      	cmp	r3, #8
 8005d34:	d122      	bne.n	8005d7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f003 0308 	and.w	r3, r3, #8
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d11b      	bne.n	8005d7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f06f 0208 	mvn.w	r2, #8
 8005d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2204      	movs	r2, #4
 8005d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f961 	bl	800602a <HAL_TIM_IC_CaptureCallback>
 8005d68:	e005      	b.n	8005d76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f953 	bl	8006016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f964 	bl	800603e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	f003 0310 	and.w	r3, r3, #16
 8005d86:	2b10      	cmp	r3, #16
 8005d88:	d122      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f003 0310 	and.w	r3, r3, #16
 8005d94:	2b10      	cmp	r3, #16
 8005d96:	d11b      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f06f 0210 	mvn.w	r2, #16
 8005da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2208      	movs	r2, #8
 8005da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f937 	bl	800602a <HAL_TIM_IC_CaptureCallback>
 8005dbc:	e005      	b.n	8005dca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f929 	bl	8006016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f93a 	bl	800603e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d10e      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d107      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f06f 0201 	mvn.w	r2, #1
 8005df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fc fa04 	bl	8002204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e06:	2b80      	cmp	r3, #128	@ 0x80
 8005e08:	d10e      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e14:	2b80      	cmp	r3, #128	@ 0x80
 8005e16:	d107      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 faf8 	bl	8006418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e32:	2b40      	cmp	r3, #64	@ 0x40
 8005e34:	d10e      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e40:	2b40      	cmp	r3, #64	@ 0x40
 8005e42:	d107      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f8ff 	bl	8006052 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b20      	cmp	r3, #32
 8005e60:	d10e      	bne.n	8005e80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f003 0320 	and.w	r3, r3, #32
 8005e6c:	2b20      	cmp	r3, #32
 8005e6e:	d107      	bne.n	8005e80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0220 	mvn.w	r2, #32
 8005e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fac2 	bl	8006404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e80:	bf00      	nop
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e0b4      	b.n	800600e <HAL_TIM_ConfigClockSource+0x186>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005edc:	d03e      	beq.n	8005f5c <HAL_TIM_ConfigClockSource+0xd4>
 8005ede:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ee2:	f200 8087 	bhi.w	8005ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eea:	f000 8086 	beq.w	8005ffa <HAL_TIM_ConfigClockSource+0x172>
 8005eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ef2:	d87f      	bhi.n	8005ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef4:	2b70      	cmp	r3, #112	@ 0x70
 8005ef6:	d01a      	beq.n	8005f2e <HAL_TIM_ConfigClockSource+0xa6>
 8005ef8:	2b70      	cmp	r3, #112	@ 0x70
 8005efa:	d87b      	bhi.n	8005ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8005efc:	2b60      	cmp	r3, #96	@ 0x60
 8005efe:	d050      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x11a>
 8005f00:	2b60      	cmp	r3, #96	@ 0x60
 8005f02:	d877      	bhi.n	8005ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f04:	2b50      	cmp	r3, #80	@ 0x50
 8005f06:	d03c      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0xfa>
 8005f08:	2b50      	cmp	r3, #80	@ 0x50
 8005f0a:	d873      	bhi.n	8005ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f0c:	2b40      	cmp	r3, #64	@ 0x40
 8005f0e:	d058      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x13a>
 8005f10:	2b40      	cmp	r3, #64	@ 0x40
 8005f12:	d86f      	bhi.n	8005ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f14:	2b30      	cmp	r3, #48	@ 0x30
 8005f16:	d064      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f18:	2b30      	cmp	r3, #48	@ 0x30
 8005f1a:	d86b      	bhi.n	8005ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	d060      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	d867      	bhi.n	8005ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d05c      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f28:	2b10      	cmp	r3, #16
 8005f2a:	d05a      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f2c:	e062      	b.n	8005ff4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f3e:	f000 f9a7 	bl	8006290 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	609a      	str	r2, [r3, #8]
      break;
 8005f5a:	e04f      	b.n	8005ffc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f6c:	f000 f990 	bl	8006290 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f7e:	609a      	str	r2, [r3, #8]
      break;
 8005f80:	e03c      	b.n	8005ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f000 f904 	bl	800619c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2150      	movs	r1, #80	@ 0x50
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 f95d 	bl	800625a <TIM_ITRx_SetConfig>
      break;
 8005fa0:	e02c      	b.n	8005ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f000 f923 	bl	80061fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2160      	movs	r1, #96	@ 0x60
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 f94d 	bl	800625a <TIM_ITRx_SetConfig>
      break;
 8005fc0:	e01c      	b.n	8005ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f000 f8e4 	bl	800619c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2140      	movs	r1, #64	@ 0x40
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 f93d 	bl	800625a <TIM_ITRx_SetConfig>
      break;
 8005fe0:	e00c      	b.n	8005ffc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4619      	mov	r1, r3
 8005fec:	4610      	mov	r0, r2
 8005fee:	f000 f934 	bl	800625a <TIM_ITRx_SetConfig>
      break;
 8005ff2:	e003      	b.n	8005ffc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff8:	e000      	b.n	8005ffc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ffa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800600c:	7bfb      	ldrb	r3, [r7, #15]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800601e:	bf00      	nop
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
	...

08006068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800607e:	d00f      	beq.n	80060a0 <TIM_Base_SetConfig+0x38>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a3c      	ldr	r2, [pc, #240]	@ (8006174 <TIM_Base_SetConfig+0x10c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00b      	beq.n	80060a0 <TIM_Base_SetConfig+0x38>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a3b      	ldr	r2, [pc, #236]	@ (8006178 <TIM_Base_SetConfig+0x110>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d007      	beq.n	80060a0 <TIM_Base_SetConfig+0x38>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a3a      	ldr	r2, [pc, #232]	@ (800617c <TIM_Base_SetConfig+0x114>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d003      	beq.n	80060a0 <TIM_Base_SetConfig+0x38>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a39      	ldr	r2, [pc, #228]	@ (8006180 <TIM_Base_SetConfig+0x118>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d108      	bne.n	80060b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b8:	d027      	beq.n	800610a <TIM_Base_SetConfig+0xa2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a2d      	ldr	r2, [pc, #180]	@ (8006174 <TIM_Base_SetConfig+0x10c>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d023      	beq.n	800610a <TIM_Base_SetConfig+0xa2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a2c      	ldr	r2, [pc, #176]	@ (8006178 <TIM_Base_SetConfig+0x110>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d01f      	beq.n	800610a <TIM_Base_SetConfig+0xa2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a2b      	ldr	r2, [pc, #172]	@ (800617c <TIM_Base_SetConfig+0x114>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d01b      	beq.n	800610a <TIM_Base_SetConfig+0xa2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a2b      	ldr	r2, [pc, #172]	@ (8006184 <TIM_Base_SetConfig+0x11c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d017      	beq.n	800610a <TIM_Base_SetConfig+0xa2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a2a      	ldr	r2, [pc, #168]	@ (8006188 <TIM_Base_SetConfig+0x120>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d013      	beq.n	800610a <TIM_Base_SetConfig+0xa2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a29      	ldr	r2, [pc, #164]	@ (800618c <TIM_Base_SetConfig+0x124>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d00f      	beq.n	800610a <TIM_Base_SetConfig+0xa2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a28      	ldr	r2, [pc, #160]	@ (8006190 <TIM_Base_SetConfig+0x128>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d00b      	beq.n	800610a <TIM_Base_SetConfig+0xa2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a27      	ldr	r2, [pc, #156]	@ (8006194 <TIM_Base_SetConfig+0x12c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d007      	beq.n	800610a <TIM_Base_SetConfig+0xa2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a26      	ldr	r2, [pc, #152]	@ (8006198 <TIM_Base_SetConfig+0x130>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d003      	beq.n	800610a <TIM_Base_SetConfig+0xa2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a1e      	ldr	r2, [pc, #120]	@ (8006180 <TIM_Base_SetConfig+0x118>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d108      	bne.n	800611c <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	4313      	orrs	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	4313      	orrs	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a13      	ldr	r2, [pc, #76]	@ (8006190 <TIM_Base_SetConfig+0x128>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d007      	beq.n	8006158 <TIM_Base_SetConfig+0xf0>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a12      	ldr	r2, [pc, #72]	@ (8006194 <TIM_Base_SetConfig+0x12c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d003      	beq.n	8006158 <TIM_Base_SetConfig+0xf0>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a11      	ldr	r2, [pc, #68]	@ (8006198 <TIM_Base_SetConfig+0x130>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d103      	bne.n	8006160 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	691a      	ldr	r2, [r3, #16]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	615a      	str	r2, [r3, #20]
}
 8006166:	bf00      	nop
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	40000400 	.word	0x40000400
 8006178:	40000800 	.word	0x40000800
 800617c:	40000c00 	.word	0x40000c00
 8006180:	40015c00 	.word	0x40015c00
 8006184:	40001800 	.word	0x40001800
 8006188:	40001c00 	.word	0x40001c00
 800618c:	40002000 	.word	0x40002000
 8006190:	40014000 	.word	0x40014000
 8006194:	40014400 	.word	0x40014400
 8006198:	40014800 	.word	0x40014800

0800619c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f023 0201 	bic.w	r2, r3, #1
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	011b      	lsls	r3, r3, #4
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f023 030a 	bic.w	r3, r3, #10
 80061d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	621a      	str	r2, [r3, #32]
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b087      	sub	sp, #28
 80061fe:	af00      	add	r7, sp, #0
 8006200:	60f8      	str	r0, [r7, #12]
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	f023 0210 	bic.w	r2, r3, #16
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006224:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	031b      	lsls	r3, r3, #12
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	4313      	orrs	r3, r2
 800622e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006236:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	4313      	orrs	r3, r2
 8006240:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	621a      	str	r2, [r3, #32]
}
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800625a:	b480      	push	{r7}
 800625c:	b085      	sub	sp, #20
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006270:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	f043 0307 	orr.w	r3, r3, #7
 800627c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	609a      	str	r2, [r3, #8]
}
 8006284:	bf00      	nop
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	021a      	lsls	r2, r3, #8
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	609a      	str	r2, [r3, #8]
}
 80062c4:	bf00      	nop
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f003 031f 	and.w	r3, r3, #31
 80062e2:	2201      	movs	r2, #1
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a1a      	ldr	r2, [r3, #32]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	43db      	mvns	r3, r3
 80062f2:	401a      	ands	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a1a      	ldr	r2, [r3, #32]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	fa01 f303 	lsl.w	r3, r1, r3
 8006308:	431a      	orrs	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	621a      	str	r2, [r3, #32]
}
 800630e:	bf00      	nop
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
	...

0800631c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800632c:	2b01      	cmp	r3, #1
 800632e:	d101      	bne.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006330:	2302      	movs	r3, #2
 8006332:	e055      	b.n	80063e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800635a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006376:	d01d      	beq.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a1b      	ldr	r2, [pc, #108]	@ (80063ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d018      	beq.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a1a      	ldr	r2, [pc, #104]	@ (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d013      	beq.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a18      	ldr	r2, [pc, #96]	@ (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d00e      	beq.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a17      	ldr	r2, [pc, #92]	@ (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d009      	beq.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a15      	ldr	r2, [pc, #84]	@ (80063fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d004      	beq.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a14      	ldr	r2, [pc, #80]	@ (8006400 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d10c      	bne.n	80063ce <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	40000400 	.word	0x40000400
 80063f0:	40000800 	.word	0x40000800
 80063f4:	40000c00 	.word	0x40000c00
 80063f8:	40001800 	.word	0x40001800
 80063fc:	40014000 	.word	0x40014000
 8006400:	40015c00 	.word	0x40015c00

08006404 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e040      	b.n	80064c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7fc fa04 	bl	800285c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2224      	movs	r2, #36	@ 0x24
 8006458:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 0201 	bic.w	r2, r2, #1
 8006468:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fc54 	bl	8006d18 <UART_SetConfig>
 8006470:	4603      	mov	r3, r0
 8006472:	2b01      	cmp	r3, #1
 8006474:	d101      	bne.n	800647a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e022      	b.n	80064c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fdc2 	bl	800700c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006496:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0201 	orr.w	r2, r2, #1
 80064b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fe49 	bl	8007150 <UART_CheckIdleState>
 80064be:	4603      	mov	r3, r0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	@ 0x28
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	4613      	mov	r3, r2
 80064d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064dc:	2b20      	cmp	r3, #32
 80064de:	d177      	bne.n	80065d0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <HAL_UART_Transmit+0x24>
 80064e6:	88fb      	ldrh	r3, [r7, #6]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d101      	bne.n	80064f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e070      	b.n	80065d2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2221      	movs	r2, #33	@ 0x21
 80064fc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064fe:	f7fc fc7b 	bl	8002df8 <HAL_GetTick>
 8006502:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	88fa      	ldrh	r2, [r7, #6]
 8006508:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	88fa      	ldrh	r2, [r7, #6]
 8006510:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800651c:	d108      	bne.n	8006530 <HAL_UART_Transmit+0x68>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d104      	bne.n	8006530 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006526:	2300      	movs	r3, #0
 8006528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	e003      	b.n	8006538 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006534:	2300      	movs	r3, #0
 8006536:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006538:	e02f      	b.n	800659a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2200      	movs	r2, #0
 8006542:	2180      	movs	r1, #128	@ 0x80
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 feab 	bl	80072a0 <UART_WaitOnFlagUntilTimeout>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d004      	beq.n	800655a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2220      	movs	r2, #32
 8006554:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e03b      	b.n	80065d2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10b      	bne.n	8006578 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	881a      	ldrh	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800656c:	b292      	uxth	r2, r2
 800656e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	3302      	adds	r3, #2
 8006574:	61bb      	str	r3, [r7, #24]
 8006576:	e007      	b.n	8006588 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	781a      	ldrb	r2, [r3, #0]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	3301      	adds	r3, #1
 8006586:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800658e:	b29b      	uxth	r3, r3
 8006590:	3b01      	subs	r3, #1
 8006592:	b29a      	uxth	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1c9      	bne.n	800653a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2200      	movs	r2, #0
 80065ae:	2140      	movs	r1, #64	@ 0x40
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 fe75 	bl	80072a0 <UART_WaitOnFlagUntilTimeout>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d004      	beq.n	80065c6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2220      	movs	r2, #32
 80065c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e005      	b.n	80065d2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2220      	movs	r2, #32
 80065ca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	e000      	b.n	80065d2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80065d0:	2302      	movs	r3, #2
  }
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3720      	adds	r7, #32
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80065dc:	b480      	push	{r7}
 80065de:	b08b      	sub	sp, #44	@ 0x2c
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	4613      	mov	r3, r2
 80065e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065ee:	2b20      	cmp	r3, #32
 80065f0:	d147      	bne.n	8006682 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <HAL_UART_Transmit_IT+0x22>
 80065f8:	88fb      	ldrh	r3, [r7, #6]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e040      	b.n	8006684 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	88fa      	ldrh	r2, [r7, #6]
 800660c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	88fa      	ldrh	r2, [r7, #6]
 8006614:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2221      	movs	r2, #33	@ 0x21
 800662a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006634:	d107      	bne.n	8006646 <HAL_UART_Transmit_IT+0x6a>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d103      	bne.n	8006646 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4a13      	ldr	r2, [pc, #76]	@ (8006690 <HAL_UART_Transmit_IT+0xb4>)
 8006642:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006644:	e002      	b.n	800664c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4a12      	ldr	r2, [pc, #72]	@ (8006694 <HAL_UART_Transmit_IT+0xb8>)
 800664a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	613b      	str	r3, [r7, #16]
   return(result);
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006660:	627b      	str	r3, [r7, #36]	@ 0x24
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666a:	623b      	str	r3, [r7, #32]
 800666c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	69f9      	ldr	r1, [r7, #28]
 8006670:	6a3a      	ldr	r2, [r7, #32]
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	61bb      	str	r3, [r7, #24]
   return(result);
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e6      	bne.n	800664c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	e000      	b.n	8006684 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006682:	2302      	movs	r3, #2
  }
}
 8006684:	4618      	mov	r0, r3
 8006686:	372c      	adds	r7, #44	@ 0x2c
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	08007683 	.word	0x08007683
 8006694:	080075cd 	.word	0x080075cd

08006698 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b08a      	sub	sp, #40	@ 0x28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	4613      	mov	r3, r2
 80066a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066ac:	2b20      	cmp	r3, #32
 80066ae:	d132      	bne.n	8006716 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <HAL_UART_Receive_IT+0x24>
 80066b6:	88fb      	ldrh	r3, [r7, #6]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e02b      	b.n	8006718 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d018      	beq.n	8006706 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	613b      	str	r3, [r7, #16]
   return(result);
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80066e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	461a      	mov	r2, r3
 80066f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f2:	623b      	str	r3, [r7, #32]
 80066f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f6:	69f9      	ldr	r1, [r7, #28]
 80066f8:	6a3a      	ldr	r2, [r7, #32]
 80066fa:	e841 2300 	strex	r3, r2, [r1]
 80066fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1e6      	bne.n	80066d4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006706:	88fb      	ldrh	r3, [r7, #6]
 8006708:	461a      	mov	r2, r3
 800670a:	68b9      	ldr	r1, [r7, #8]
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 fe2f 	bl	8007370 <UART_Start_Receive_IT>
 8006712:	4603      	mov	r3, r0
 8006714:	e000      	b.n	8006718 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006716:	2302      	movs	r3, #2
  }
}
 8006718:	4618      	mov	r0, r3
 800671a:	3728      	adds	r7, #40	@ 0x28
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b0ba      	sub	sp, #232	@ 0xe8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006746:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800674a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800674e:	4013      	ands	r3, r2
 8006750:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006754:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d115      	bne.n	8006788 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800675c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006760:	f003 0320 	and.w	r3, r3, #32
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00f      	beq.n	8006788 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800676c:	f003 0320 	and.w	r3, r3, #32
 8006770:	2b00      	cmp	r3, #0
 8006772:	d009      	beq.n	8006788 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 82ab 	beq.w	8006cd4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	4798      	blx	r3
      }
      return;
 8006786:	e2a5      	b.n	8006cd4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006788:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 8117 	beq.w	80069c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800679e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80067a2:	4b85      	ldr	r3, [pc, #532]	@ (80069b8 <HAL_UART_IRQHandler+0x298>)
 80067a4:	4013      	ands	r3, r2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 810a 	beq.w	80069c0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d011      	beq.n	80067dc <HAL_UART_IRQHandler+0xbc>
 80067b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00b      	beq.n	80067dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2201      	movs	r2, #1
 80067ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067d2:	f043 0201 	orr.w	r2, r3, #1
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d011      	beq.n	800680c <HAL_UART_IRQHandler+0xec>
 80067e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2202      	movs	r2, #2
 80067fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006802:	f043 0204 	orr.w	r2, r3, #4
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800680c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d011      	beq.n	800683c <HAL_UART_IRQHandler+0x11c>
 8006818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00b      	beq.n	800683c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2204      	movs	r2, #4
 800682a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006832:	f043 0202 	orr.w	r2, r3, #2
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800683c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006840:	f003 0308 	and.w	r3, r3, #8
 8006844:	2b00      	cmp	r3, #0
 8006846:	d017      	beq.n	8006878 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800684c:	f003 0320 	and.w	r3, r3, #32
 8006850:	2b00      	cmp	r3, #0
 8006852:	d105      	bne.n	8006860 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006858:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00b      	beq.n	8006878 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2208      	movs	r2, #8
 8006866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800686e:	f043 0208 	orr.w	r2, r3, #8
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800687c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006880:	2b00      	cmp	r3, #0
 8006882:	d012      	beq.n	80068aa <HAL_UART_IRQHandler+0x18a>
 8006884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006888:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00c      	beq.n	80068aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006898:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068a0:	f043 0220 	orr.w	r2, r3, #32
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 8211 	beq.w	8006cd8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80068b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00d      	beq.n	80068de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068c6:	f003 0320 	and.w	r3, r3, #32
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d007      	beq.n	80068de <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f2:	2b40      	cmp	r3, #64	@ 0x40
 80068f4:	d005      	beq.n	8006902 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d04f      	beq.n	80069a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fde8 	bl	80074d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006912:	2b40      	cmp	r3, #64	@ 0x40
 8006914:	d141      	bne.n	800699a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3308      	adds	r3, #8
 800691c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800692c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006930:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006934:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3308      	adds	r3, #8
 800693e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006942:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006946:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800694e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800695a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1d9      	bne.n	8006916 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006966:	2b00      	cmp	r3, #0
 8006968:	d013      	beq.n	8006992 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800696e:	4a13      	ldr	r2, [pc, #76]	@ (80069bc <HAL_UART_IRQHandler+0x29c>)
 8006970:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006976:	4618      	mov	r0, r3
 8006978:	f7fc fb94 	bl	80030a4 <HAL_DMA_Abort_IT>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d017      	beq.n	80069b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800698c:	4610      	mov	r0, r2
 800698e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006990:	e00f      	b.n	80069b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f9aa 	bl	8006cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006998:	e00b      	b.n	80069b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f9a6 	bl	8006cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a0:	e007      	b.n	80069b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f9a2 	bl	8006cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80069b0:	e192      	b.n	8006cd8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b2:	bf00      	nop
    return;
 80069b4:	e190      	b.n	8006cd8 <HAL_UART_IRQHandler+0x5b8>
 80069b6:	bf00      	nop
 80069b8:	04000120 	.word	0x04000120
 80069bc:	080075a1 	.word	0x080075a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	f040 814b 	bne.w	8006c60 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ce:	f003 0310 	and.w	r3, r3, #16
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 8144 	beq.w	8006c60 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069dc:	f003 0310 	and.w	r3, r3, #16
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 813d 	beq.w	8006c60 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2210      	movs	r2, #16
 80069ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f8:	2b40      	cmp	r3, #64	@ 0x40
 80069fa:	f040 80b5 	bne.w	8006b68 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 8164 	beq.w	8006cdc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	f080 815c 	bcs.w	8006cdc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	f000 8086 	beq.w	8006b46 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a46:	e853 3f00 	ldrex	r3, [r3]
 8006a4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a68:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a70:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1da      	bne.n	8006a3a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3308      	adds	r3, #8
 8006a8a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a96:	f023 0301 	bic.w	r3, r3, #1
 8006a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3308      	adds	r3, #8
 8006aa4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006aa8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006aac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006ab0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006aba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e1      	bne.n	8006a84 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006ad0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ad2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3308      	adds	r3, #8
 8006ae0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ae4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ae6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006aea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006af2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e3      	bne.n	8006ac0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b0e:	e853 3f00 	ldrex	r3, [r3]
 8006b12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b16:	f023 0310 	bic.w	r3, r3, #16
 8006b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b2a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b30:	e841 2300 	strex	r3, r2, [r1]
 8006b34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e4      	bne.n	8006b06 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fc fa76 	bl	8003032 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2202      	movs	r2, #2
 8006b4a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f8cd 	bl	8006d00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b66:	e0b9      	b.n	8006cdc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 80ab 	beq.w	8006ce0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006b8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 80a6 	beq.w	8006ce0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ba8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bb8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006bbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bbe:	e841 2300 	strex	r3, r2, [r1]
 8006bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1e4      	bne.n	8006b94 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3308      	adds	r3, #8
 8006bd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd4:	e853 3f00 	ldrex	r3, [r3]
 8006bd8:	623b      	str	r3, [r7, #32]
   return(result);
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	f023 0301 	bic.w	r3, r3, #1
 8006be0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3308      	adds	r3, #8
 8006bea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006bee:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e3      	bne.n	8006bca <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0310 	bic.w	r3, r3, #16
 8006c2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006c38:	61fb      	str	r3, [r7, #28]
 8006c3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	69b9      	ldr	r1, [r7, #24]
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	617b      	str	r3, [r7, #20]
   return(result);
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e4      	bne.n	8006c16 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f851 	bl	8006d00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c5e:	e03f      	b.n	8006ce0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00e      	beq.n	8006c8a <HAL_UART_IRQHandler+0x56a>
 8006c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d008      	beq.n	8006c8a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006c80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 ff2f 	bl	8007ae6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c88:	e02d      	b.n	8006ce6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00e      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d008      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d01c      	beq.n	8006ce4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3
    }
    return;
 8006cb2:	e017      	b.n	8006ce4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d012      	beq.n	8006ce6 <HAL_UART_IRQHandler+0x5c6>
 8006cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00c      	beq.n	8006ce6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fd38 	bl	8007742 <UART_EndTransmit_IT>
    return;
 8006cd2:	e008      	b.n	8006ce6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006cd4:	bf00      	nop
 8006cd6:	e006      	b.n	8006ce6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006cd8:	bf00      	nop
 8006cda:	e004      	b.n	8006ce6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006cdc:	bf00      	nop
 8006cde:	e002      	b.n	8006ce6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006ce0:	bf00      	nop
 8006ce2:	e000      	b.n	8006ce6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006ce4:	bf00      	nop
  }

}
 8006ce6:	37e8      	adds	r7, #232	@ 0xe8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b088      	sub	sp, #32
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8006d46:	f023 030c 	bic.w	r3, r3, #12
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	6812      	ldr	r2, [r2, #0]
 8006d4e:	6979      	ldr	r1, [r7, #20]
 8006d50:	430b      	orrs	r3, r1
 8006d52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a1b      	ldr	r3, [r3, #32]
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a99      	ldr	r2, [pc, #612]	@ (8006ff8 <UART_SetConfig+0x2e0>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d120      	bne.n	8006dda <UART_SetConfig+0xc2>
 8006d98:	4b98      	ldr	r3, [pc, #608]	@ (8006ffc <UART_SetConfig+0x2e4>)
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9c:	f003 0303 	and.w	r3, r3, #3
 8006da0:	2b03      	cmp	r3, #3
 8006da2:	d817      	bhi.n	8006dd4 <UART_SetConfig+0xbc>
 8006da4:	a201      	add	r2, pc, #4	@ (adr r2, 8006dac <UART_SetConfig+0x94>)
 8006da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006daa:	bf00      	nop
 8006dac:	08006dbd 	.word	0x08006dbd
 8006db0:	08006dc9 	.word	0x08006dc9
 8006db4:	08006dcf 	.word	0x08006dcf
 8006db8:	08006dc3 	.word	0x08006dc3
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	77fb      	strb	r3, [r7, #31]
 8006dc0:	e061      	b.n	8006e86 <UART_SetConfig+0x16e>
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	77fb      	strb	r3, [r7, #31]
 8006dc6:	e05e      	b.n	8006e86 <UART_SetConfig+0x16e>
 8006dc8:	2304      	movs	r3, #4
 8006dca:	77fb      	strb	r3, [r7, #31]
 8006dcc:	e05b      	b.n	8006e86 <UART_SetConfig+0x16e>
 8006dce:	2308      	movs	r3, #8
 8006dd0:	77fb      	strb	r3, [r7, #31]
 8006dd2:	e058      	b.n	8006e86 <UART_SetConfig+0x16e>
 8006dd4:	2310      	movs	r3, #16
 8006dd6:	77fb      	strb	r3, [r7, #31]
 8006dd8:	e055      	b.n	8006e86 <UART_SetConfig+0x16e>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a88      	ldr	r2, [pc, #544]	@ (8007000 <UART_SetConfig+0x2e8>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d124      	bne.n	8006e2e <UART_SetConfig+0x116>
 8006de4:	4b85      	ldr	r3, [pc, #532]	@ (8006ffc <UART_SetConfig+0x2e4>)
 8006de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006dec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006df0:	d011      	beq.n	8006e16 <UART_SetConfig+0xfe>
 8006df2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006df6:	d817      	bhi.n	8006e28 <UART_SetConfig+0x110>
 8006df8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dfc:	d011      	beq.n	8006e22 <UART_SetConfig+0x10a>
 8006dfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e02:	d811      	bhi.n	8006e28 <UART_SetConfig+0x110>
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <UART_SetConfig+0xf8>
 8006e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e0c:	d006      	beq.n	8006e1c <UART_SetConfig+0x104>
 8006e0e:	e00b      	b.n	8006e28 <UART_SetConfig+0x110>
 8006e10:	2300      	movs	r3, #0
 8006e12:	77fb      	strb	r3, [r7, #31]
 8006e14:	e037      	b.n	8006e86 <UART_SetConfig+0x16e>
 8006e16:	2302      	movs	r3, #2
 8006e18:	77fb      	strb	r3, [r7, #31]
 8006e1a:	e034      	b.n	8006e86 <UART_SetConfig+0x16e>
 8006e1c:	2304      	movs	r3, #4
 8006e1e:	77fb      	strb	r3, [r7, #31]
 8006e20:	e031      	b.n	8006e86 <UART_SetConfig+0x16e>
 8006e22:	2308      	movs	r3, #8
 8006e24:	77fb      	strb	r3, [r7, #31]
 8006e26:	e02e      	b.n	8006e86 <UART_SetConfig+0x16e>
 8006e28:	2310      	movs	r3, #16
 8006e2a:	77fb      	strb	r3, [r7, #31]
 8006e2c:	e02b      	b.n	8006e86 <UART_SetConfig+0x16e>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a74      	ldr	r2, [pc, #464]	@ (8007004 <UART_SetConfig+0x2ec>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d124      	bne.n	8006e82 <UART_SetConfig+0x16a>
 8006e38:	4b70      	ldr	r3, [pc, #448]	@ (8006ffc <UART_SetConfig+0x2e4>)
 8006e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006e40:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006e44:	d011      	beq.n	8006e6a <UART_SetConfig+0x152>
 8006e46:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006e4a:	d817      	bhi.n	8006e7c <UART_SetConfig+0x164>
 8006e4c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006e50:	d011      	beq.n	8006e76 <UART_SetConfig+0x15e>
 8006e52:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006e56:	d811      	bhi.n	8006e7c <UART_SetConfig+0x164>
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d003      	beq.n	8006e64 <UART_SetConfig+0x14c>
 8006e5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e60:	d006      	beq.n	8006e70 <UART_SetConfig+0x158>
 8006e62:	e00b      	b.n	8006e7c <UART_SetConfig+0x164>
 8006e64:	2300      	movs	r3, #0
 8006e66:	77fb      	strb	r3, [r7, #31]
 8006e68:	e00d      	b.n	8006e86 <UART_SetConfig+0x16e>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	77fb      	strb	r3, [r7, #31]
 8006e6e:	e00a      	b.n	8006e86 <UART_SetConfig+0x16e>
 8006e70:	2304      	movs	r3, #4
 8006e72:	77fb      	strb	r3, [r7, #31]
 8006e74:	e007      	b.n	8006e86 <UART_SetConfig+0x16e>
 8006e76:	2308      	movs	r3, #8
 8006e78:	77fb      	strb	r3, [r7, #31]
 8006e7a:	e004      	b.n	8006e86 <UART_SetConfig+0x16e>
 8006e7c:	2310      	movs	r3, #16
 8006e7e:	77fb      	strb	r3, [r7, #31]
 8006e80:	e001      	b.n	8006e86 <UART_SetConfig+0x16e>
 8006e82:	2310      	movs	r3, #16
 8006e84:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e8e:	d15a      	bne.n	8006f46 <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 8006e90:	7ffb      	ldrb	r3, [r7, #31]
 8006e92:	2b08      	cmp	r3, #8
 8006e94:	d827      	bhi.n	8006ee6 <UART_SetConfig+0x1ce>
 8006e96:	a201      	add	r2, pc, #4	@ (adr r2, 8006e9c <UART_SetConfig+0x184>)
 8006e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9c:	08006ec1 	.word	0x08006ec1
 8006ea0:	08006ec9 	.word	0x08006ec9
 8006ea4:	08006ed1 	.word	0x08006ed1
 8006ea8:	08006ee7 	.word	0x08006ee7
 8006eac:	08006ed7 	.word	0x08006ed7
 8006eb0:	08006ee7 	.word	0x08006ee7
 8006eb4:	08006ee7 	.word	0x08006ee7
 8006eb8:	08006ee7 	.word	0x08006ee7
 8006ebc:	08006edf 	.word	0x08006edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ec0:	f7fe faae 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 8006ec4:	61b8      	str	r0, [r7, #24]
        break;
 8006ec6:	e013      	b.n	8006ef0 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ec8:	f7fe facc 	bl	8005464 <HAL_RCC_GetPCLK2Freq>
 8006ecc:	61b8      	str	r0, [r7, #24]
        break;
 8006ece:	e00f      	b.n	8006ef0 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ed0:	4b4d      	ldr	r3, [pc, #308]	@ (8007008 <UART_SetConfig+0x2f0>)
 8006ed2:	61bb      	str	r3, [r7, #24]
        break;
 8006ed4:	e00c      	b.n	8006ef0 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ed6:	f7fe fa2b 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 8006eda:	61b8      	str	r0, [r7, #24]
        break;
 8006edc:	e008      	b.n	8006ef0 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ee2:	61bb      	str	r3, [r7, #24]
        break;
 8006ee4:	e004      	b.n	8006ef0 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	77bb      	strb	r3, [r7, #30]
        break;
 8006eee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d074      	beq.n	8006fe0 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	005a      	lsls	r2, r3, #1
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	085b      	lsrs	r3, r3, #1
 8006f00:	441a      	add	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	2b0f      	cmp	r3, #15
 8006f10:	d916      	bls.n	8006f40 <UART_SetConfig+0x228>
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f18:	d212      	bcs.n	8006f40 <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	f023 030f 	bic.w	r3, r3, #15
 8006f22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	085b      	lsrs	r3, r3, #1
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	f003 0307 	and.w	r3, r3, #7
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	89fb      	ldrh	r3, [r7, #14]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	89fa      	ldrh	r2, [r7, #14]
 8006f3c:	60da      	str	r2, [r3, #12]
 8006f3e:	e04f      	b.n	8006fe0 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	77bb      	strb	r3, [r7, #30]
 8006f44:	e04c      	b.n	8006fe0 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f46:	7ffb      	ldrb	r3, [r7, #31]
 8006f48:	2b08      	cmp	r3, #8
 8006f4a:	d828      	bhi.n	8006f9e <UART_SetConfig+0x286>
 8006f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f54 <UART_SetConfig+0x23c>)
 8006f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f52:	bf00      	nop
 8006f54:	08006f79 	.word	0x08006f79
 8006f58:	08006f81 	.word	0x08006f81
 8006f5c:	08006f89 	.word	0x08006f89
 8006f60:	08006f9f 	.word	0x08006f9f
 8006f64:	08006f8f 	.word	0x08006f8f
 8006f68:	08006f9f 	.word	0x08006f9f
 8006f6c:	08006f9f 	.word	0x08006f9f
 8006f70:	08006f9f 	.word	0x08006f9f
 8006f74:	08006f97 	.word	0x08006f97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f78:	f7fe fa52 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 8006f7c:	61b8      	str	r0, [r7, #24]
        break;
 8006f7e:	e013      	b.n	8006fa8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f80:	f7fe fa70 	bl	8005464 <HAL_RCC_GetPCLK2Freq>
 8006f84:	61b8      	str	r0, [r7, #24]
        break;
 8006f86:	e00f      	b.n	8006fa8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f88:	4b1f      	ldr	r3, [pc, #124]	@ (8007008 <UART_SetConfig+0x2f0>)
 8006f8a:	61bb      	str	r3, [r7, #24]
        break;
 8006f8c:	e00c      	b.n	8006fa8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f8e:	f7fe f9cf 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 8006f92:	61b8      	str	r0, [r7, #24]
        break;
 8006f94:	e008      	b.n	8006fa8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f9a:	61bb      	str	r3, [r7, #24]
        break;
 8006f9c:	e004      	b.n	8006fa8 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	77bb      	strb	r3, [r7, #30]
        break;
 8006fa6:	bf00      	nop
    }

    if (pclk != 0U)
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d018      	beq.n	8006fe0 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	085a      	lsrs	r2, r3, #1
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	441a      	add	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2b0f      	cmp	r3, #15
 8006fc6:	d909      	bls.n	8006fdc <UART_SetConfig+0x2c4>
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fce:	d205      	bcs.n	8006fdc <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	60da      	str	r2, [r3, #12]
 8006fda:	e001      	b.n	8006fe0 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006fec:	7fbb      	ldrb	r3, [r7, #30]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3720      	adds	r7, #32
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	40013800 	.word	0x40013800
 8006ffc:	40021000 	.word	0x40021000
 8007000:	40004400 	.word	0x40004400
 8007004:	40004800 	.word	0x40004800
 8007008:	007a1200 	.word	0x007a1200

0800700c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00a      	beq.n	8007036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00a      	beq.n	800707a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707e:	f003 0308 	and.w	r3, r3, #8
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a0:	f003 0310 	and.w	r3, r3, #16
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00a      	beq.n	80070be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c2:	f003 0320 	and.w	r3, r3, #32
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d01a      	beq.n	8007122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007106:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800710a:	d10a      	bne.n	8007122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	605a      	str	r2, [r3, #4]
  }
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b098      	sub	sp, #96	@ 0x60
 8007154:	af02      	add	r7, sp, #8
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007160:	f7fb fe4a 	bl	8002df8 <HAL_GetTick>
 8007164:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0308 	and.w	r3, r3, #8
 8007170:	2b08      	cmp	r3, #8
 8007172:	d12e      	bne.n	80071d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007174:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800717c:	2200      	movs	r2, #0
 800717e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f88c 	bl	80072a0 <UART_WaitOnFlagUntilTimeout>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d021      	beq.n	80071d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007196:	e853 3f00 	ldrex	r3, [r3]
 800719a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800719c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800719e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	461a      	mov	r2, r3
 80071aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80071ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071b4:	e841 2300 	strex	r3, r2, [r1]
 80071b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1e6      	bne.n	800718e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2220      	movs	r2, #32
 80071c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e062      	b.n	8007298 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0304 	and.w	r3, r3, #4
 80071dc:	2b04      	cmp	r3, #4
 80071de:	d149      	bne.n	8007274 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071e8:	2200      	movs	r2, #0
 80071ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f856 	bl	80072a0 <UART_WaitOnFlagUntilTimeout>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d03c      	beq.n	8007274 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007202:	e853 3f00 	ldrex	r3, [r3]
 8007206:	623b      	str	r3, [r7, #32]
   return(result);
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800720e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	461a      	mov	r2, r3
 8007216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007218:	633b      	str	r3, [r7, #48]	@ 0x30
 800721a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800721e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007220:	e841 2300 	strex	r3, r2, [r1]
 8007224:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1e6      	bne.n	80071fa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3308      	adds	r3, #8
 8007232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	e853 3f00 	ldrex	r3, [r3]
 800723a:	60fb      	str	r3, [r7, #12]
   return(result);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0301 	bic.w	r3, r3, #1
 8007242:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3308      	adds	r3, #8
 800724a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800724c:	61fa      	str	r2, [r7, #28]
 800724e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	69b9      	ldr	r1, [r7, #24]
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	e841 2300 	strex	r3, r2, [r1]
 8007258:	617b      	str	r3, [r7, #20]
   return(result);
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1e5      	bne.n	800722c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2220      	movs	r2, #32
 8007264:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e011      	b.n	8007298 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2220      	movs	r2, #32
 8007278:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3758      	adds	r7, #88	@ 0x58
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	603b      	str	r3, [r7, #0]
 80072ac:	4613      	mov	r3, r2
 80072ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072b0:	e049      	b.n	8007346 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b8:	d045      	beq.n	8007346 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ba:	f7fb fd9d 	bl	8002df8 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d302      	bcc.n	80072d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e048      	b.n	8007366 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0304 	and.w	r3, r3, #4
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d031      	beq.n	8007346 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	f003 0308 	and.w	r3, r3, #8
 80072ec:	2b08      	cmp	r3, #8
 80072ee:	d110      	bne.n	8007312 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2208      	movs	r2, #8
 80072f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 f8ed 	bl	80074d8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2208      	movs	r2, #8
 8007302:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e029      	b.n	8007366 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800731c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007320:	d111      	bne.n	8007346 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800732a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 f8d3 	bl	80074d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2220      	movs	r2, #32
 8007336:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e00f      	b.n	8007366 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69da      	ldr	r2, [r3, #28]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	4013      	ands	r3, r2
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	429a      	cmp	r2, r3
 8007354:	bf0c      	ite	eq
 8007356:	2301      	moveq	r3, #1
 8007358:	2300      	movne	r3, #0
 800735a:	b2db      	uxtb	r3, r3
 800735c:	461a      	mov	r2, r3
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	429a      	cmp	r2, r3
 8007362:	d0a6      	beq.n	80072b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007370:	b480      	push	{r7}
 8007372:	b097      	sub	sp, #92	@ 0x5c
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	4613      	mov	r3, r2
 800737c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	88fa      	ldrh	r2, [r7, #6]
 8007388:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	88fa      	ldrh	r2, [r7, #6]
 8007390:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073a2:	d10e      	bne.n	80073c2 <UART_Start_Receive_IT+0x52>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d105      	bne.n	80073b8 <UART_Start_Receive_IT+0x48>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80073b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80073b6:	e01a      	b.n	80073ee <UART_Start_Receive_IT+0x7e>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	22ff      	movs	r2, #255	@ 0xff
 80073bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80073c0:	e015      	b.n	80073ee <UART_Start_Receive_IT+0x7e>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10d      	bne.n	80073e6 <UART_Start_Receive_IT+0x76>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d104      	bne.n	80073dc <UART_Start_Receive_IT+0x6c>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	22ff      	movs	r2, #255	@ 0xff
 80073d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80073da:	e008      	b.n	80073ee <UART_Start_Receive_IT+0x7e>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	227f      	movs	r2, #127	@ 0x7f
 80073e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80073e4:	e003      	b.n	80073ee <UART_Start_Receive_IT+0x7e>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2222      	movs	r2, #34	@ 0x22
 80073fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3308      	adds	r3, #8
 8007404:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800740e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007410:	f043 0301 	orr.w	r3, r3, #1
 8007414:	657b      	str	r3, [r7, #84]	@ 0x54
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3308      	adds	r3, #8
 800741c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800741e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007420:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007422:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007424:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800742c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e5      	bne.n	80073fe <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800743a:	d107      	bne.n	800744c <UART_Start_Receive_IT+0xdc>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d103      	bne.n	800744c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4a22      	ldr	r2, [pc, #136]	@ (80074d0 <UART_Start_Receive_IT+0x160>)
 8007448:	669a      	str	r2, [r3, #104]	@ 0x68
 800744a:	e002      	b.n	8007452 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4a21      	ldr	r2, [pc, #132]	@ (80074d4 <UART_Start_Receive_IT+0x164>)
 8007450:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d019      	beq.n	800748e <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800746e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007478:	637b      	str	r3, [r7, #52]	@ 0x34
 800747a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800747e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e6      	bne.n	800745a <UART_Start_Receive_IT+0xea>
 800748c:	e018      	b.n	80074c0 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	613b      	str	r3, [r7, #16]
   return(result);
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f043 0320 	orr.w	r3, r3, #32
 80074a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	461a      	mov	r2, r3
 80074aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074ac:	623b      	str	r3, [r7, #32]
 80074ae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	69f9      	ldr	r1, [r7, #28]
 80074b2:	6a3a      	ldr	r2, [r7, #32]
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e6      	bne.n	800748e <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	375c      	adds	r7, #92	@ 0x5c
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	0800793f 	.word	0x0800793f
 80074d4:	08007797 	.word	0x08007797

080074d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074d8:	b480      	push	{r7}
 80074da:	b095      	sub	sp, #84	@ 0x54
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8007500:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007502:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007504:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007506:	e841 2300 	strex	r3, r2, [r1]
 800750a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800750c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1e6      	bne.n	80074e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3308      	adds	r3, #8
 8007518:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	e853 3f00 	ldrex	r3, [r3]
 8007520:	61fb      	str	r3, [r7, #28]
   return(result);
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	f023 0301 	bic.w	r3, r3, #1
 8007528:	64bb      	str	r3, [r7, #72]	@ 0x48
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3308      	adds	r3, #8
 8007530:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007532:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007534:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007536:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007538:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e5      	bne.n	8007512 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800754a:	2b01      	cmp	r3, #1
 800754c:	d118      	bne.n	8007580 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	60bb      	str	r3, [r7, #8]
   return(result);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f023 0310 	bic.w	r3, r3, #16
 8007562:	647b      	str	r3, [r7, #68]	@ 0x44
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800756c:	61bb      	str	r3, [r7, #24]
 800756e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	6979      	ldr	r1, [r7, #20]
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	e841 2300 	strex	r3, r2, [r1]
 8007578:	613b      	str	r3, [r7, #16]
   return(result);
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e6      	bne.n	800754e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2220      	movs	r2, #32
 8007584:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007594:	bf00      	nop
 8007596:	3754      	adds	r7, #84	@ 0x54
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f7ff fb94 	bl	8006cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075c4:	bf00      	nop
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b08f      	sub	sp, #60	@ 0x3c
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075d8:	2b21      	cmp	r3, #33	@ 0x21
 80075da:	d14c      	bne.n	8007676 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d132      	bne.n	800764e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007606:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007608:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800760c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e6      	bne.n	80075e8 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	e853 3f00 	ldrex	r3, [r3]
 8007626:	60bb      	str	r3, [r7, #8]
   return(result);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800762e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	461a      	mov	r2, r3
 8007636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007638:	61bb      	str	r3, [r7, #24]
 800763a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763c:	6979      	ldr	r1, [r7, #20]
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	e841 2300 	strex	r3, r2, [r1]
 8007644:	613b      	str	r3, [r7, #16]
   return(result);
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1e6      	bne.n	800761a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800764c:	e013      	b.n	8007676 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007652:	781a      	ldrb	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800765e:	1c5a      	adds	r2, r3, #1
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800766a:	b29b      	uxth	r3, r3
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007676:	bf00      	nop
 8007678:	373c      	adds	r7, #60	@ 0x3c
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007682:	b480      	push	{r7}
 8007684:	b091      	sub	sp, #68	@ 0x44
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800768e:	2b21      	cmp	r3, #33	@ 0x21
 8007690:	d151      	bne.n	8007736 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007698:	b29b      	uxth	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d132      	bne.n	8007704 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	623b      	str	r3, [r7, #32]
   return(result);
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	461a      	mov	r2, r3
 80076ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80076be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076c4:	e841 2300 	strex	r3, r2, [r1]
 80076c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e6      	bne.n	800769e <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ee:	61fb      	str	r3, [r7, #28]
 80076f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f2:	69b9      	ldr	r1, [r7, #24]
 80076f4:	69fa      	ldr	r2, [r7, #28]
 80076f6:	e841 2300 	strex	r3, r2, [r1]
 80076fa:	617b      	str	r3, [r7, #20]
   return(result);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1e6      	bne.n	80076d0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007702:	e018      	b.n	8007736 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007708:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800770a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800770c:	881a      	ldrh	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007716:	b292      	uxth	r2, r2
 8007718:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800771e:	1c9a      	adds	r2, r3, #2
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800772a:	b29b      	uxth	r3, r3
 800772c:	3b01      	subs	r3, #1
 800772e:	b29a      	uxth	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007736:	bf00      	nop
 8007738:	3744      	adds	r7, #68	@ 0x44
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b088      	sub	sp, #32
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	e853 3f00 	ldrex	r3, [r3]
 8007756:	60bb      	str	r3, [r7, #8]
   return(result);
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800775e:	61fb      	str	r3, [r7, #28]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	61bb      	str	r3, [r7, #24]
 800776a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776c:	6979      	ldr	r1, [r7, #20]
 800776e:	69ba      	ldr	r2, [r7, #24]
 8007770:	e841 2300 	strex	r3, r2, [r1]
 8007774:	613b      	str	r3, [r7, #16]
   return(result);
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1e6      	bne.n	800774a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7fa ff23 	bl	80025d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800778e:	bf00      	nop
 8007790:	3720      	adds	r7, #32
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b09c      	sub	sp, #112	@ 0x70
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077a4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077ae:	2b22      	cmp	r3, #34	@ 0x22
 80077b0:	f040 80b9 	bne.w	8007926 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80077ba:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80077be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80077c2:	b2d9      	uxtb	r1, r3
 80077c4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ce:	400a      	ands	r2, r1
 80077d0:	b2d2      	uxtb	r2, r2
 80077d2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f040 809c 	bne.w	8007936 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800780c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800780e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007812:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800781c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800781e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007822:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800782a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e6      	bne.n	80077fe <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3308      	adds	r3, #8
 8007836:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007842:	f023 0301 	bic.w	r3, r3, #1
 8007846:	667b      	str	r3, [r7, #100]	@ 0x64
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3308      	adds	r3, #8
 800784e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007850:	647a      	str	r2, [r7, #68]	@ 0x44
 8007852:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800785e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e5      	bne.n	8007830 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2220      	movs	r2, #32
 8007868:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d018      	beq.n	80078b8 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788e:	e853 3f00 	ldrex	r3, [r3]
 8007892:	623b      	str	r3, [r7, #32]
   return(result);
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800789a:	663b      	str	r3, [r7, #96]	@ 0x60
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	461a      	mov	r2, r3
 80078a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80078a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e6      	bne.n	8007886 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d12e      	bne.n	800791e <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	e853 3f00 	ldrex	r3, [r3]
 80078d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f023 0310 	bic.w	r3, r3, #16
 80078da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	461a      	mov	r2, r3
 80078e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078e4:	61fb      	str	r3, [r7, #28]
 80078e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e8:	69b9      	ldr	r1, [r7, #24]
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	e841 2300 	strex	r3, r2, [r1]
 80078f0:	617b      	str	r3, [r7, #20]
   return(result);
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1e6      	bne.n	80078c6 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	f003 0310 	and.w	r3, r3, #16
 8007902:	2b10      	cmp	r3, #16
 8007904:	d103      	bne.n	800790e <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2210      	movs	r2, #16
 800790c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7ff f9f2 	bl	8006d00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800791c:	e00b      	b.n	8007936 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7fa fc98 	bl	8002254 <HAL_UART_RxCpltCallback>
}
 8007924:	e007      	b.n	8007936 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	699a      	ldr	r2, [r3, #24]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f042 0208 	orr.w	r2, r2, #8
 8007934:	619a      	str	r2, [r3, #24]
}
 8007936:	bf00      	nop
 8007938:	3770      	adds	r7, #112	@ 0x70
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b09c      	sub	sp, #112	@ 0x70
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800794c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007956:	2b22      	cmp	r3, #34	@ 0x22
 8007958:	f040 80b9 	bne.w	8007ace <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007962:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796a:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800796c:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007970:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007974:	4013      	ands	r3, r2
 8007976:	b29a      	uxth	r2, r3
 8007978:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800797a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007980:	1c9a      	adds	r2, r3, #2
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800798c:	b29b      	uxth	r3, r3
 800798e:	3b01      	subs	r3, #1
 8007990:	b29a      	uxth	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800799e:	b29b      	uxth	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f040 809c 	bne.w	8007ade <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80079b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80079c6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80079ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80079d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e6      	bne.n	80079a6 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3308      	adds	r3, #8
 80079de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ea:	f023 0301 	bic.w	r3, r3, #1
 80079ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3308      	adds	r3, #8
 80079f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80079f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80079fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e5      	bne.n	80079d8 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d018      	beq.n	8007a60 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a4e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e6      	bne.n	8007a2e <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d12e      	bne.n	8007ac6 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	e853 3f00 	ldrex	r3, [r3]
 8007a7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	f023 0310 	bic.w	r3, r3, #16
 8007a82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	461a      	mov	r2, r3
 8007a8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a8c:	61bb      	str	r3, [r7, #24]
 8007a8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a90:	6979      	ldr	r1, [r7, #20]
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	e841 2300 	strex	r3, r2, [r1]
 8007a98:	613b      	str	r3, [r7, #16]
   return(result);
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1e6      	bne.n	8007a6e <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	f003 0310 	and.w	r3, r3, #16
 8007aaa:	2b10      	cmp	r3, #16
 8007aac:	d103      	bne.n	8007ab6 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2210      	movs	r2, #16
 8007ab4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7ff f91e 	bl	8006d00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ac4:	e00b      	b.n	8007ade <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7fa fbc4 	bl	8002254 <HAL_UART_RxCpltCallback>
}
 8007acc:	e007      	b.n	8007ade <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	699a      	ldr	r2, [r3, #24]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f042 0208 	orr.w	r2, r2, #8
 8007adc:	619a      	str	r2, [r3, #24]
}
 8007ade:	bf00      	nop
 8007ae0:	3770      	adds	r7, #112	@ 0x70
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <atoi>:
 8007afa:	220a      	movs	r2, #10
 8007afc:	2100      	movs	r1, #0
 8007afe:	f000 b87d 	b.w	8007bfc <strtol>
	...

08007b04 <_strtol_l.constprop.0>:
 8007b04:	2b24      	cmp	r3, #36	@ 0x24
 8007b06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b0a:	4686      	mov	lr, r0
 8007b0c:	4690      	mov	r8, r2
 8007b0e:	d801      	bhi.n	8007b14 <_strtol_l.constprop.0+0x10>
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d106      	bne.n	8007b22 <_strtol_l.constprop.0+0x1e>
 8007b14:	f001 fa62 	bl	8008fdc <__errno>
 8007b18:	2316      	movs	r3, #22
 8007b1a:	6003      	str	r3, [r0, #0]
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b22:	4834      	ldr	r0, [pc, #208]	@ (8007bf4 <_strtol_l.constprop.0+0xf0>)
 8007b24:	460d      	mov	r5, r1
 8007b26:	462a      	mov	r2, r5
 8007b28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b2c:	5d06      	ldrb	r6, [r0, r4]
 8007b2e:	f016 0608 	ands.w	r6, r6, #8
 8007b32:	d1f8      	bne.n	8007b26 <_strtol_l.constprop.0+0x22>
 8007b34:	2c2d      	cmp	r4, #45	@ 0x2d
 8007b36:	d12d      	bne.n	8007b94 <_strtol_l.constprop.0+0x90>
 8007b38:	782c      	ldrb	r4, [r5, #0]
 8007b3a:	2601      	movs	r6, #1
 8007b3c:	1c95      	adds	r5, r2, #2
 8007b3e:	f033 0210 	bics.w	r2, r3, #16
 8007b42:	d109      	bne.n	8007b58 <_strtol_l.constprop.0+0x54>
 8007b44:	2c30      	cmp	r4, #48	@ 0x30
 8007b46:	d12a      	bne.n	8007b9e <_strtol_l.constprop.0+0x9a>
 8007b48:	782a      	ldrb	r2, [r5, #0]
 8007b4a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007b4e:	2a58      	cmp	r2, #88	@ 0x58
 8007b50:	d125      	bne.n	8007b9e <_strtol_l.constprop.0+0x9a>
 8007b52:	786c      	ldrb	r4, [r5, #1]
 8007b54:	2310      	movs	r3, #16
 8007b56:	3502      	adds	r5, #2
 8007b58:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007b5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007b60:	2200      	movs	r2, #0
 8007b62:	fbbc f9f3 	udiv	r9, ip, r3
 8007b66:	4610      	mov	r0, r2
 8007b68:	fb03 ca19 	mls	sl, r3, r9, ip
 8007b6c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007b70:	2f09      	cmp	r7, #9
 8007b72:	d81b      	bhi.n	8007bac <_strtol_l.constprop.0+0xa8>
 8007b74:	463c      	mov	r4, r7
 8007b76:	42a3      	cmp	r3, r4
 8007b78:	dd27      	ble.n	8007bca <_strtol_l.constprop.0+0xc6>
 8007b7a:	1c57      	adds	r7, r2, #1
 8007b7c:	d007      	beq.n	8007b8e <_strtol_l.constprop.0+0x8a>
 8007b7e:	4581      	cmp	r9, r0
 8007b80:	d320      	bcc.n	8007bc4 <_strtol_l.constprop.0+0xc0>
 8007b82:	d101      	bne.n	8007b88 <_strtol_l.constprop.0+0x84>
 8007b84:	45a2      	cmp	sl, r4
 8007b86:	db1d      	blt.n	8007bc4 <_strtol_l.constprop.0+0xc0>
 8007b88:	fb00 4003 	mla	r0, r0, r3, r4
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b92:	e7eb      	b.n	8007b6c <_strtol_l.constprop.0+0x68>
 8007b94:	2c2b      	cmp	r4, #43	@ 0x2b
 8007b96:	bf04      	itt	eq
 8007b98:	782c      	ldrbeq	r4, [r5, #0]
 8007b9a:	1c95      	addeq	r5, r2, #2
 8007b9c:	e7cf      	b.n	8007b3e <_strtol_l.constprop.0+0x3a>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1da      	bne.n	8007b58 <_strtol_l.constprop.0+0x54>
 8007ba2:	2c30      	cmp	r4, #48	@ 0x30
 8007ba4:	bf0c      	ite	eq
 8007ba6:	2308      	moveq	r3, #8
 8007ba8:	230a      	movne	r3, #10
 8007baa:	e7d5      	b.n	8007b58 <_strtol_l.constprop.0+0x54>
 8007bac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007bb0:	2f19      	cmp	r7, #25
 8007bb2:	d801      	bhi.n	8007bb8 <_strtol_l.constprop.0+0xb4>
 8007bb4:	3c37      	subs	r4, #55	@ 0x37
 8007bb6:	e7de      	b.n	8007b76 <_strtol_l.constprop.0+0x72>
 8007bb8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007bbc:	2f19      	cmp	r7, #25
 8007bbe:	d804      	bhi.n	8007bca <_strtol_l.constprop.0+0xc6>
 8007bc0:	3c57      	subs	r4, #87	@ 0x57
 8007bc2:	e7d8      	b.n	8007b76 <_strtol_l.constprop.0+0x72>
 8007bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc8:	e7e1      	b.n	8007b8e <_strtol_l.constprop.0+0x8a>
 8007bca:	1c53      	adds	r3, r2, #1
 8007bcc:	d108      	bne.n	8007be0 <_strtol_l.constprop.0+0xdc>
 8007bce:	2322      	movs	r3, #34	@ 0x22
 8007bd0:	f8ce 3000 	str.w	r3, [lr]
 8007bd4:	4660      	mov	r0, ip
 8007bd6:	f1b8 0f00 	cmp.w	r8, #0
 8007bda:	d0a0      	beq.n	8007b1e <_strtol_l.constprop.0+0x1a>
 8007bdc:	1e69      	subs	r1, r5, #1
 8007bde:	e006      	b.n	8007bee <_strtol_l.constprop.0+0xea>
 8007be0:	b106      	cbz	r6, 8007be4 <_strtol_l.constprop.0+0xe0>
 8007be2:	4240      	negs	r0, r0
 8007be4:	f1b8 0f00 	cmp.w	r8, #0
 8007be8:	d099      	beq.n	8007b1e <_strtol_l.constprop.0+0x1a>
 8007bea:	2a00      	cmp	r2, #0
 8007bec:	d1f6      	bne.n	8007bdc <_strtol_l.constprop.0+0xd8>
 8007bee:	f8c8 1000 	str.w	r1, [r8]
 8007bf2:	e794      	b.n	8007b1e <_strtol_l.constprop.0+0x1a>
 8007bf4:	0800cf79 	.word	0x0800cf79

08007bf8 <_strtol_r>:
 8007bf8:	f7ff bf84 	b.w	8007b04 <_strtol_l.constprop.0>

08007bfc <strtol>:
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	460a      	mov	r2, r1
 8007c00:	4601      	mov	r1, r0
 8007c02:	4802      	ldr	r0, [pc, #8]	@ (8007c0c <strtol+0x10>)
 8007c04:	6800      	ldr	r0, [r0, #0]
 8007c06:	f7ff bf7d 	b.w	8007b04 <_strtol_l.constprop.0>
 8007c0a:	bf00      	nop
 8007c0c:	2000002c 	.word	0x2000002c

08007c10 <__cvt>:
 8007c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c14:	ec57 6b10 	vmov	r6, r7, d0
 8007c18:	2f00      	cmp	r7, #0
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	463b      	mov	r3, r7
 8007c20:	bfbb      	ittet	lt
 8007c22:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007c26:	461f      	movlt	r7, r3
 8007c28:	2300      	movge	r3, #0
 8007c2a:	232d      	movlt	r3, #45	@ 0x2d
 8007c2c:	700b      	strb	r3, [r1, #0]
 8007c2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c30:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007c34:	4691      	mov	r9, r2
 8007c36:	f023 0820 	bic.w	r8, r3, #32
 8007c3a:	bfbc      	itt	lt
 8007c3c:	4632      	movlt	r2, r6
 8007c3e:	4616      	movlt	r6, r2
 8007c40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c44:	d005      	beq.n	8007c52 <__cvt+0x42>
 8007c46:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c4a:	d100      	bne.n	8007c4e <__cvt+0x3e>
 8007c4c:	3401      	adds	r4, #1
 8007c4e:	2102      	movs	r1, #2
 8007c50:	e000      	b.n	8007c54 <__cvt+0x44>
 8007c52:	2103      	movs	r1, #3
 8007c54:	ab03      	add	r3, sp, #12
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	ab02      	add	r3, sp, #8
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	ec47 6b10 	vmov	d0, r6, r7
 8007c60:	4653      	mov	r3, sl
 8007c62:	4622      	mov	r2, r4
 8007c64:	f001 fa84 	bl	8009170 <_dtoa_r>
 8007c68:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c6c:	4605      	mov	r5, r0
 8007c6e:	d119      	bne.n	8007ca4 <__cvt+0x94>
 8007c70:	f019 0f01 	tst.w	r9, #1
 8007c74:	d00e      	beq.n	8007c94 <__cvt+0x84>
 8007c76:	eb00 0904 	add.w	r9, r0, r4
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4630      	mov	r0, r6
 8007c80:	4639      	mov	r1, r7
 8007c82:	f7f8 ff21 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c86:	b108      	cbz	r0, 8007c8c <__cvt+0x7c>
 8007c88:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c8c:	2230      	movs	r2, #48	@ 0x30
 8007c8e:	9b03      	ldr	r3, [sp, #12]
 8007c90:	454b      	cmp	r3, r9
 8007c92:	d31e      	bcc.n	8007cd2 <__cvt+0xc2>
 8007c94:	9b03      	ldr	r3, [sp, #12]
 8007c96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c98:	1b5b      	subs	r3, r3, r5
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	b004      	add	sp, #16
 8007ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ca8:	eb00 0904 	add.w	r9, r0, r4
 8007cac:	d1e5      	bne.n	8007c7a <__cvt+0x6a>
 8007cae:	7803      	ldrb	r3, [r0, #0]
 8007cb0:	2b30      	cmp	r3, #48	@ 0x30
 8007cb2:	d10a      	bne.n	8007cca <__cvt+0xba>
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	4630      	mov	r0, r6
 8007cba:	4639      	mov	r1, r7
 8007cbc:	f7f8 ff04 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cc0:	b918      	cbnz	r0, 8007cca <__cvt+0xba>
 8007cc2:	f1c4 0401 	rsb	r4, r4, #1
 8007cc6:	f8ca 4000 	str.w	r4, [sl]
 8007cca:	f8da 3000 	ldr.w	r3, [sl]
 8007cce:	4499      	add	r9, r3
 8007cd0:	e7d3      	b.n	8007c7a <__cvt+0x6a>
 8007cd2:	1c59      	adds	r1, r3, #1
 8007cd4:	9103      	str	r1, [sp, #12]
 8007cd6:	701a      	strb	r2, [r3, #0]
 8007cd8:	e7d9      	b.n	8007c8e <__cvt+0x7e>

08007cda <__exponent>:
 8007cda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cdc:	2900      	cmp	r1, #0
 8007cde:	bfba      	itte	lt
 8007ce0:	4249      	neglt	r1, r1
 8007ce2:	232d      	movlt	r3, #45	@ 0x2d
 8007ce4:	232b      	movge	r3, #43	@ 0x2b
 8007ce6:	2909      	cmp	r1, #9
 8007ce8:	7002      	strb	r2, [r0, #0]
 8007cea:	7043      	strb	r3, [r0, #1]
 8007cec:	dd29      	ble.n	8007d42 <__exponent+0x68>
 8007cee:	f10d 0307 	add.w	r3, sp, #7
 8007cf2:	461d      	mov	r5, r3
 8007cf4:	270a      	movs	r7, #10
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	fbb1 f6f7 	udiv	r6, r1, r7
 8007cfc:	fb07 1416 	mls	r4, r7, r6, r1
 8007d00:	3430      	adds	r4, #48	@ 0x30
 8007d02:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007d06:	460c      	mov	r4, r1
 8007d08:	2c63      	cmp	r4, #99	@ 0x63
 8007d0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d0e:	4631      	mov	r1, r6
 8007d10:	dcf1      	bgt.n	8007cf6 <__exponent+0x1c>
 8007d12:	3130      	adds	r1, #48	@ 0x30
 8007d14:	1e94      	subs	r4, r2, #2
 8007d16:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d1a:	1c41      	adds	r1, r0, #1
 8007d1c:	4623      	mov	r3, r4
 8007d1e:	42ab      	cmp	r3, r5
 8007d20:	d30a      	bcc.n	8007d38 <__exponent+0x5e>
 8007d22:	f10d 0309 	add.w	r3, sp, #9
 8007d26:	1a9b      	subs	r3, r3, r2
 8007d28:	42ac      	cmp	r4, r5
 8007d2a:	bf88      	it	hi
 8007d2c:	2300      	movhi	r3, #0
 8007d2e:	3302      	adds	r3, #2
 8007d30:	4403      	add	r3, r0
 8007d32:	1a18      	subs	r0, r3, r0
 8007d34:	b003      	add	sp, #12
 8007d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d38:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d3c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d40:	e7ed      	b.n	8007d1e <__exponent+0x44>
 8007d42:	2330      	movs	r3, #48	@ 0x30
 8007d44:	3130      	adds	r1, #48	@ 0x30
 8007d46:	7083      	strb	r3, [r0, #2]
 8007d48:	70c1      	strb	r1, [r0, #3]
 8007d4a:	1d03      	adds	r3, r0, #4
 8007d4c:	e7f1      	b.n	8007d32 <__exponent+0x58>
	...

08007d50 <_printf_float>:
 8007d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d54:	b08d      	sub	sp, #52	@ 0x34
 8007d56:	460c      	mov	r4, r1
 8007d58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007d5c:	4616      	mov	r6, r2
 8007d5e:	461f      	mov	r7, r3
 8007d60:	4605      	mov	r5, r0
 8007d62:	f001 f8f1 	bl	8008f48 <_localeconv_r>
 8007d66:	6803      	ldr	r3, [r0, #0]
 8007d68:	9304      	str	r3, [sp, #16]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7f8 fa80 	bl	8000270 <strlen>
 8007d70:	2300      	movs	r3, #0
 8007d72:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d74:	f8d8 3000 	ldr.w	r3, [r8]
 8007d78:	9005      	str	r0, [sp, #20]
 8007d7a:	3307      	adds	r3, #7
 8007d7c:	f023 0307 	bic.w	r3, r3, #7
 8007d80:	f103 0208 	add.w	r2, r3, #8
 8007d84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d88:	f8d4 b000 	ldr.w	fp, [r4]
 8007d8c:	f8c8 2000 	str.w	r2, [r8]
 8007d90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007d98:	9307      	str	r3, [sp, #28]
 8007d9a:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d9e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007da2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007da6:	4b9c      	ldr	r3, [pc, #624]	@ (8008018 <_printf_float+0x2c8>)
 8007da8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dac:	f7f8 febe 	bl	8000b2c <__aeabi_dcmpun>
 8007db0:	bb70      	cbnz	r0, 8007e10 <_printf_float+0xc0>
 8007db2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007db6:	4b98      	ldr	r3, [pc, #608]	@ (8008018 <_printf_float+0x2c8>)
 8007db8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dbc:	f7f8 fe98 	bl	8000af0 <__aeabi_dcmple>
 8007dc0:	bb30      	cbnz	r0, 8007e10 <_printf_float+0xc0>
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	4640      	mov	r0, r8
 8007dc8:	4649      	mov	r1, r9
 8007dca:	f7f8 fe87 	bl	8000adc <__aeabi_dcmplt>
 8007dce:	b110      	cbz	r0, 8007dd6 <_printf_float+0x86>
 8007dd0:	232d      	movs	r3, #45	@ 0x2d
 8007dd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dd6:	4a91      	ldr	r2, [pc, #580]	@ (800801c <_printf_float+0x2cc>)
 8007dd8:	4b91      	ldr	r3, [pc, #580]	@ (8008020 <_printf_float+0x2d0>)
 8007dda:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007dde:	bf94      	ite	ls
 8007de0:	4690      	movls	r8, r2
 8007de2:	4698      	movhi	r8, r3
 8007de4:	2303      	movs	r3, #3
 8007de6:	6123      	str	r3, [r4, #16]
 8007de8:	f02b 0304 	bic.w	r3, fp, #4
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	f04f 0900 	mov.w	r9, #0
 8007df2:	9700      	str	r7, [sp, #0]
 8007df4:	4633      	mov	r3, r6
 8007df6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007df8:	4621      	mov	r1, r4
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	f000 f9d2 	bl	80081a4 <_printf_common>
 8007e00:	3001      	adds	r0, #1
 8007e02:	f040 808d 	bne.w	8007f20 <_printf_float+0x1d0>
 8007e06:	f04f 30ff 	mov.w	r0, #4294967295
 8007e0a:	b00d      	add	sp, #52	@ 0x34
 8007e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e10:	4642      	mov	r2, r8
 8007e12:	464b      	mov	r3, r9
 8007e14:	4640      	mov	r0, r8
 8007e16:	4649      	mov	r1, r9
 8007e18:	f7f8 fe88 	bl	8000b2c <__aeabi_dcmpun>
 8007e1c:	b140      	cbz	r0, 8007e30 <_printf_float+0xe0>
 8007e1e:	464b      	mov	r3, r9
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	bfbc      	itt	lt
 8007e24:	232d      	movlt	r3, #45	@ 0x2d
 8007e26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e2a:	4a7e      	ldr	r2, [pc, #504]	@ (8008024 <_printf_float+0x2d4>)
 8007e2c:	4b7e      	ldr	r3, [pc, #504]	@ (8008028 <_printf_float+0x2d8>)
 8007e2e:	e7d4      	b.n	8007dda <_printf_float+0x8a>
 8007e30:	6863      	ldr	r3, [r4, #4]
 8007e32:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007e36:	9206      	str	r2, [sp, #24]
 8007e38:	1c5a      	adds	r2, r3, #1
 8007e3a:	d13b      	bne.n	8007eb4 <_printf_float+0x164>
 8007e3c:	2306      	movs	r3, #6
 8007e3e:	6063      	str	r3, [r4, #4]
 8007e40:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007e44:	2300      	movs	r3, #0
 8007e46:	6022      	str	r2, [r4, #0]
 8007e48:	9303      	str	r3, [sp, #12]
 8007e4a:	ab0a      	add	r3, sp, #40	@ 0x28
 8007e4c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007e50:	ab09      	add	r3, sp, #36	@ 0x24
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	6861      	ldr	r1, [r4, #4]
 8007e56:	ec49 8b10 	vmov	d0, r8, r9
 8007e5a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007e5e:	4628      	mov	r0, r5
 8007e60:	f7ff fed6 	bl	8007c10 <__cvt>
 8007e64:	9b06      	ldr	r3, [sp, #24]
 8007e66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e68:	2b47      	cmp	r3, #71	@ 0x47
 8007e6a:	4680      	mov	r8, r0
 8007e6c:	d129      	bne.n	8007ec2 <_printf_float+0x172>
 8007e6e:	1cc8      	adds	r0, r1, #3
 8007e70:	db02      	blt.n	8007e78 <_printf_float+0x128>
 8007e72:	6863      	ldr	r3, [r4, #4]
 8007e74:	4299      	cmp	r1, r3
 8007e76:	dd41      	ble.n	8007efc <_printf_float+0x1ac>
 8007e78:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e7c:	fa5f fa8a 	uxtb.w	sl, sl
 8007e80:	3901      	subs	r1, #1
 8007e82:	4652      	mov	r2, sl
 8007e84:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e88:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e8a:	f7ff ff26 	bl	8007cda <__exponent>
 8007e8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e90:	1813      	adds	r3, r2, r0
 8007e92:	2a01      	cmp	r2, #1
 8007e94:	4681      	mov	r9, r0
 8007e96:	6123      	str	r3, [r4, #16]
 8007e98:	dc02      	bgt.n	8007ea0 <_printf_float+0x150>
 8007e9a:	6822      	ldr	r2, [r4, #0]
 8007e9c:	07d2      	lsls	r2, r2, #31
 8007e9e:	d501      	bpl.n	8007ea4 <_printf_float+0x154>
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	6123      	str	r3, [r4, #16]
 8007ea4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d0a2      	beq.n	8007df2 <_printf_float+0xa2>
 8007eac:	232d      	movs	r3, #45	@ 0x2d
 8007eae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007eb2:	e79e      	b.n	8007df2 <_printf_float+0xa2>
 8007eb4:	9a06      	ldr	r2, [sp, #24]
 8007eb6:	2a47      	cmp	r2, #71	@ 0x47
 8007eb8:	d1c2      	bne.n	8007e40 <_printf_float+0xf0>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1c0      	bne.n	8007e40 <_printf_float+0xf0>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e7bd      	b.n	8007e3e <_printf_float+0xee>
 8007ec2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ec6:	d9db      	bls.n	8007e80 <_printf_float+0x130>
 8007ec8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ecc:	d118      	bne.n	8007f00 <_printf_float+0x1b0>
 8007ece:	2900      	cmp	r1, #0
 8007ed0:	6863      	ldr	r3, [r4, #4]
 8007ed2:	dd0b      	ble.n	8007eec <_printf_float+0x19c>
 8007ed4:	6121      	str	r1, [r4, #16]
 8007ed6:	b913      	cbnz	r3, 8007ede <_printf_float+0x18e>
 8007ed8:	6822      	ldr	r2, [r4, #0]
 8007eda:	07d0      	lsls	r0, r2, #31
 8007edc:	d502      	bpl.n	8007ee4 <_printf_float+0x194>
 8007ede:	3301      	adds	r3, #1
 8007ee0:	440b      	add	r3, r1
 8007ee2:	6123      	str	r3, [r4, #16]
 8007ee4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007ee6:	f04f 0900 	mov.w	r9, #0
 8007eea:	e7db      	b.n	8007ea4 <_printf_float+0x154>
 8007eec:	b913      	cbnz	r3, 8007ef4 <_printf_float+0x1a4>
 8007eee:	6822      	ldr	r2, [r4, #0]
 8007ef0:	07d2      	lsls	r2, r2, #31
 8007ef2:	d501      	bpl.n	8007ef8 <_printf_float+0x1a8>
 8007ef4:	3302      	adds	r3, #2
 8007ef6:	e7f4      	b.n	8007ee2 <_printf_float+0x192>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e7f2      	b.n	8007ee2 <_printf_float+0x192>
 8007efc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007f00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f02:	4299      	cmp	r1, r3
 8007f04:	db05      	blt.n	8007f12 <_printf_float+0x1c2>
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	6121      	str	r1, [r4, #16]
 8007f0a:	07d8      	lsls	r0, r3, #31
 8007f0c:	d5ea      	bpl.n	8007ee4 <_printf_float+0x194>
 8007f0e:	1c4b      	adds	r3, r1, #1
 8007f10:	e7e7      	b.n	8007ee2 <_printf_float+0x192>
 8007f12:	2900      	cmp	r1, #0
 8007f14:	bfd4      	ite	le
 8007f16:	f1c1 0202 	rsble	r2, r1, #2
 8007f1a:	2201      	movgt	r2, #1
 8007f1c:	4413      	add	r3, r2
 8007f1e:	e7e0      	b.n	8007ee2 <_printf_float+0x192>
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	055a      	lsls	r2, r3, #21
 8007f24:	d407      	bmi.n	8007f36 <_printf_float+0x1e6>
 8007f26:	6923      	ldr	r3, [r4, #16]
 8007f28:	4642      	mov	r2, r8
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	47b8      	blx	r7
 8007f30:	3001      	adds	r0, #1
 8007f32:	d12b      	bne.n	8007f8c <_printf_float+0x23c>
 8007f34:	e767      	b.n	8007e06 <_printf_float+0xb6>
 8007f36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f3a:	f240 80dd 	bls.w	80080f8 <_printf_float+0x3a8>
 8007f3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f42:	2200      	movs	r2, #0
 8007f44:	2300      	movs	r3, #0
 8007f46:	f7f8 fdbf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d033      	beq.n	8007fb6 <_printf_float+0x266>
 8007f4e:	4a37      	ldr	r2, [pc, #220]	@ (800802c <_printf_float+0x2dc>)
 8007f50:	2301      	movs	r3, #1
 8007f52:	4631      	mov	r1, r6
 8007f54:	4628      	mov	r0, r5
 8007f56:	47b8      	blx	r7
 8007f58:	3001      	adds	r0, #1
 8007f5a:	f43f af54 	beq.w	8007e06 <_printf_float+0xb6>
 8007f5e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007f62:	4543      	cmp	r3, r8
 8007f64:	db02      	blt.n	8007f6c <_printf_float+0x21c>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	07d8      	lsls	r0, r3, #31
 8007f6a:	d50f      	bpl.n	8007f8c <_printf_float+0x23c>
 8007f6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f70:	4631      	mov	r1, r6
 8007f72:	4628      	mov	r0, r5
 8007f74:	47b8      	blx	r7
 8007f76:	3001      	adds	r0, #1
 8007f78:	f43f af45 	beq.w	8007e06 <_printf_float+0xb6>
 8007f7c:	f04f 0900 	mov.w	r9, #0
 8007f80:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f84:	f104 0a1a 	add.w	sl, r4, #26
 8007f88:	45c8      	cmp	r8, r9
 8007f8a:	dc09      	bgt.n	8007fa0 <_printf_float+0x250>
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	079b      	lsls	r3, r3, #30
 8007f90:	f100 8103 	bmi.w	800819a <_printf_float+0x44a>
 8007f94:	68e0      	ldr	r0, [r4, #12]
 8007f96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f98:	4298      	cmp	r0, r3
 8007f9a:	bfb8      	it	lt
 8007f9c:	4618      	movlt	r0, r3
 8007f9e:	e734      	b.n	8007e0a <_printf_float+0xba>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	4652      	mov	r2, sl
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	47b8      	blx	r7
 8007faa:	3001      	adds	r0, #1
 8007fac:	f43f af2b 	beq.w	8007e06 <_printf_float+0xb6>
 8007fb0:	f109 0901 	add.w	r9, r9, #1
 8007fb4:	e7e8      	b.n	8007f88 <_printf_float+0x238>
 8007fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	dc39      	bgt.n	8008030 <_printf_float+0x2e0>
 8007fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800802c <_printf_float+0x2dc>)
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	47b8      	blx	r7
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	f43f af1d 	beq.w	8007e06 <_printf_float+0xb6>
 8007fcc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007fd0:	ea59 0303 	orrs.w	r3, r9, r3
 8007fd4:	d102      	bne.n	8007fdc <_printf_float+0x28c>
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	07d9      	lsls	r1, r3, #31
 8007fda:	d5d7      	bpl.n	8007f8c <_printf_float+0x23c>
 8007fdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	47b8      	blx	r7
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	f43f af0d 	beq.w	8007e06 <_printf_float+0xb6>
 8007fec:	f04f 0a00 	mov.w	sl, #0
 8007ff0:	f104 0b1a 	add.w	fp, r4, #26
 8007ff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff6:	425b      	negs	r3, r3
 8007ff8:	4553      	cmp	r3, sl
 8007ffa:	dc01      	bgt.n	8008000 <_printf_float+0x2b0>
 8007ffc:	464b      	mov	r3, r9
 8007ffe:	e793      	b.n	8007f28 <_printf_float+0x1d8>
 8008000:	2301      	movs	r3, #1
 8008002:	465a      	mov	r2, fp
 8008004:	4631      	mov	r1, r6
 8008006:	4628      	mov	r0, r5
 8008008:	47b8      	blx	r7
 800800a:	3001      	adds	r0, #1
 800800c:	f43f aefb 	beq.w	8007e06 <_printf_float+0xb6>
 8008010:	f10a 0a01 	add.w	sl, sl, #1
 8008014:	e7ee      	b.n	8007ff4 <_printf_float+0x2a4>
 8008016:	bf00      	nop
 8008018:	7fefffff 	.word	0x7fefffff
 800801c:	0800d079 	.word	0x0800d079
 8008020:	0800d07d 	.word	0x0800d07d
 8008024:	0800d081 	.word	0x0800d081
 8008028:	0800d085 	.word	0x0800d085
 800802c:	0800d317 	.word	0x0800d317
 8008030:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008032:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008036:	4553      	cmp	r3, sl
 8008038:	bfa8      	it	ge
 800803a:	4653      	movge	r3, sl
 800803c:	2b00      	cmp	r3, #0
 800803e:	4699      	mov	r9, r3
 8008040:	dc36      	bgt.n	80080b0 <_printf_float+0x360>
 8008042:	f04f 0b00 	mov.w	fp, #0
 8008046:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800804a:	f104 021a 	add.w	r2, r4, #26
 800804e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008050:	9306      	str	r3, [sp, #24]
 8008052:	eba3 0309 	sub.w	r3, r3, r9
 8008056:	455b      	cmp	r3, fp
 8008058:	dc31      	bgt.n	80080be <_printf_float+0x36e>
 800805a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800805c:	459a      	cmp	sl, r3
 800805e:	dc3a      	bgt.n	80080d6 <_printf_float+0x386>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	07da      	lsls	r2, r3, #31
 8008064:	d437      	bmi.n	80080d6 <_printf_float+0x386>
 8008066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008068:	ebaa 0903 	sub.w	r9, sl, r3
 800806c:	9b06      	ldr	r3, [sp, #24]
 800806e:	ebaa 0303 	sub.w	r3, sl, r3
 8008072:	4599      	cmp	r9, r3
 8008074:	bfa8      	it	ge
 8008076:	4699      	movge	r9, r3
 8008078:	f1b9 0f00 	cmp.w	r9, #0
 800807c:	dc33      	bgt.n	80080e6 <_printf_float+0x396>
 800807e:	f04f 0800 	mov.w	r8, #0
 8008082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008086:	f104 0b1a 	add.w	fp, r4, #26
 800808a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800808c:	ebaa 0303 	sub.w	r3, sl, r3
 8008090:	eba3 0309 	sub.w	r3, r3, r9
 8008094:	4543      	cmp	r3, r8
 8008096:	f77f af79 	ble.w	8007f8c <_printf_float+0x23c>
 800809a:	2301      	movs	r3, #1
 800809c:	465a      	mov	r2, fp
 800809e:	4631      	mov	r1, r6
 80080a0:	4628      	mov	r0, r5
 80080a2:	47b8      	blx	r7
 80080a4:	3001      	adds	r0, #1
 80080a6:	f43f aeae 	beq.w	8007e06 <_printf_float+0xb6>
 80080aa:	f108 0801 	add.w	r8, r8, #1
 80080ae:	e7ec      	b.n	800808a <_printf_float+0x33a>
 80080b0:	4642      	mov	r2, r8
 80080b2:	4631      	mov	r1, r6
 80080b4:	4628      	mov	r0, r5
 80080b6:	47b8      	blx	r7
 80080b8:	3001      	adds	r0, #1
 80080ba:	d1c2      	bne.n	8008042 <_printf_float+0x2f2>
 80080bc:	e6a3      	b.n	8007e06 <_printf_float+0xb6>
 80080be:	2301      	movs	r3, #1
 80080c0:	4631      	mov	r1, r6
 80080c2:	4628      	mov	r0, r5
 80080c4:	9206      	str	r2, [sp, #24]
 80080c6:	47b8      	blx	r7
 80080c8:	3001      	adds	r0, #1
 80080ca:	f43f ae9c 	beq.w	8007e06 <_printf_float+0xb6>
 80080ce:	9a06      	ldr	r2, [sp, #24]
 80080d0:	f10b 0b01 	add.w	fp, fp, #1
 80080d4:	e7bb      	b.n	800804e <_printf_float+0x2fe>
 80080d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080da:	4631      	mov	r1, r6
 80080dc:	4628      	mov	r0, r5
 80080de:	47b8      	blx	r7
 80080e0:	3001      	adds	r0, #1
 80080e2:	d1c0      	bne.n	8008066 <_printf_float+0x316>
 80080e4:	e68f      	b.n	8007e06 <_printf_float+0xb6>
 80080e6:	9a06      	ldr	r2, [sp, #24]
 80080e8:	464b      	mov	r3, r9
 80080ea:	4442      	add	r2, r8
 80080ec:	4631      	mov	r1, r6
 80080ee:	4628      	mov	r0, r5
 80080f0:	47b8      	blx	r7
 80080f2:	3001      	adds	r0, #1
 80080f4:	d1c3      	bne.n	800807e <_printf_float+0x32e>
 80080f6:	e686      	b.n	8007e06 <_printf_float+0xb6>
 80080f8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80080fc:	f1ba 0f01 	cmp.w	sl, #1
 8008100:	dc01      	bgt.n	8008106 <_printf_float+0x3b6>
 8008102:	07db      	lsls	r3, r3, #31
 8008104:	d536      	bpl.n	8008174 <_printf_float+0x424>
 8008106:	2301      	movs	r3, #1
 8008108:	4642      	mov	r2, r8
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	47b8      	blx	r7
 8008110:	3001      	adds	r0, #1
 8008112:	f43f ae78 	beq.w	8007e06 <_printf_float+0xb6>
 8008116:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800811a:	4631      	mov	r1, r6
 800811c:	4628      	mov	r0, r5
 800811e:	47b8      	blx	r7
 8008120:	3001      	adds	r0, #1
 8008122:	f43f ae70 	beq.w	8007e06 <_printf_float+0xb6>
 8008126:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800812a:	2200      	movs	r2, #0
 800812c:	2300      	movs	r3, #0
 800812e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008132:	f7f8 fcc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008136:	b9c0      	cbnz	r0, 800816a <_printf_float+0x41a>
 8008138:	4653      	mov	r3, sl
 800813a:	f108 0201 	add.w	r2, r8, #1
 800813e:	4631      	mov	r1, r6
 8008140:	4628      	mov	r0, r5
 8008142:	47b8      	blx	r7
 8008144:	3001      	adds	r0, #1
 8008146:	d10c      	bne.n	8008162 <_printf_float+0x412>
 8008148:	e65d      	b.n	8007e06 <_printf_float+0xb6>
 800814a:	2301      	movs	r3, #1
 800814c:	465a      	mov	r2, fp
 800814e:	4631      	mov	r1, r6
 8008150:	4628      	mov	r0, r5
 8008152:	47b8      	blx	r7
 8008154:	3001      	adds	r0, #1
 8008156:	f43f ae56 	beq.w	8007e06 <_printf_float+0xb6>
 800815a:	f108 0801 	add.w	r8, r8, #1
 800815e:	45d0      	cmp	r8, sl
 8008160:	dbf3      	blt.n	800814a <_printf_float+0x3fa>
 8008162:	464b      	mov	r3, r9
 8008164:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008168:	e6df      	b.n	8007f2a <_printf_float+0x1da>
 800816a:	f04f 0800 	mov.w	r8, #0
 800816e:	f104 0b1a 	add.w	fp, r4, #26
 8008172:	e7f4      	b.n	800815e <_printf_float+0x40e>
 8008174:	2301      	movs	r3, #1
 8008176:	4642      	mov	r2, r8
 8008178:	e7e1      	b.n	800813e <_printf_float+0x3ee>
 800817a:	2301      	movs	r3, #1
 800817c:	464a      	mov	r2, r9
 800817e:	4631      	mov	r1, r6
 8008180:	4628      	mov	r0, r5
 8008182:	47b8      	blx	r7
 8008184:	3001      	adds	r0, #1
 8008186:	f43f ae3e 	beq.w	8007e06 <_printf_float+0xb6>
 800818a:	f108 0801 	add.w	r8, r8, #1
 800818e:	68e3      	ldr	r3, [r4, #12]
 8008190:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008192:	1a5b      	subs	r3, r3, r1
 8008194:	4543      	cmp	r3, r8
 8008196:	dcf0      	bgt.n	800817a <_printf_float+0x42a>
 8008198:	e6fc      	b.n	8007f94 <_printf_float+0x244>
 800819a:	f04f 0800 	mov.w	r8, #0
 800819e:	f104 0919 	add.w	r9, r4, #25
 80081a2:	e7f4      	b.n	800818e <_printf_float+0x43e>

080081a4 <_printf_common>:
 80081a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a8:	4616      	mov	r6, r2
 80081aa:	4698      	mov	r8, r3
 80081ac:	688a      	ldr	r2, [r1, #8]
 80081ae:	690b      	ldr	r3, [r1, #16]
 80081b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081b4:	4293      	cmp	r3, r2
 80081b6:	bfb8      	it	lt
 80081b8:	4613      	movlt	r3, r2
 80081ba:	6033      	str	r3, [r6, #0]
 80081bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081c0:	4607      	mov	r7, r0
 80081c2:	460c      	mov	r4, r1
 80081c4:	b10a      	cbz	r2, 80081ca <_printf_common+0x26>
 80081c6:	3301      	adds	r3, #1
 80081c8:	6033      	str	r3, [r6, #0]
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	0699      	lsls	r1, r3, #26
 80081ce:	bf42      	ittt	mi
 80081d0:	6833      	ldrmi	r3, [r6, #0]
 80081d2:	3302      	addmi	r3, #2
 80081d4:	6033      	strmi	r3, [r6, #0]
 80081d6:	6825      	ldr	r5, [r4, #0]
 80081d8:	f015 0506 	ands.w	r5, r5, #6
 80081dc:	d106      	bne.n	80081ec <_printf_common+0x48>
 80081de:	f104 0a19 	add.w	sl, r4, #25
 80081e2:	68e3      	ldr	r3, [r4, #12]
 80081e4:	6832      	ldr	r2, [r6, #0]
 80081e6:	1a9b      	subs	r3, r3, r2
 80081e8:	42ab      	cmp	r3, r5
 80081ea:	dc26      	bgt.n	800823a <_printf_common+0x96>
 80081ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081f0:	6822      	ldr	r2, [r4, #0]
 80081f2:	3b00      	subs	r3, #0
 80081f4:	bf18      	it	ne
 80081f6:	2301      	movne	r3, #1
 80081f8:	0692      	lsls	r2, r2, #26
 80081fa:	d42b      	bmi.n	8008254 <_printf_common+0xb0>
 80081fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008200:	4641      	mov	r1, r8
 8008202:	4638      	mov	r0, r7
 8008204:	47c8      	blx	r9
 8008206:	3001      	adds	r0, #1
 8008208:	d01e      	beq.n	8008248 <_printf_common+0xa4>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	6922      	ldr	r2, [r4, #16]
 800820e:	f003 0306 	and.w	r3, r3, #6
 8008212:	2b04      	cmp	r3, #4
 8008214:	bf02      	ittt	eq
 8008216:	68e5      	ldreq	r5, [r4, #12]
 8008218:	6833      	ldreq	r3, [r6, #0]
 800821a:	1aed      	subeq	r5, r5, r3
 800821c:	68a3      	ldr	r3, [r4, #8]
 800821e:	bf0c      	ite	eq
 8008220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008224:	2500      	movne	r5, #0
 8008226:	4293      	cmp	r3, r2
 8008228:	bfc4      	itt	gt
 800822a:	1a9b      	subgt	r3, r3, r2
 800822c:	18ed      	addgt	r5, r5, r3
 800822e:	2600      	movs	r6, #0
 8008230:	341a      	adds	r4, #26
 8008232:	42b5      	cmp	r5, r6
 8008234:	d11a      	bne.n	800826c <_printf_common+0xc8>
 8008236:	2000      	movs	r0, #0
 8008238:	e008      	b.n	800824c <_printf_common+0xa8>
 800823a:	2301      	movs	r3, #1
 800823c:	4652      	mov	r2, sl
 800823e:	4641      	mov	r1, r8
 8008240:	4638      	mov	r0, r7
 8008242:	47c8      	blx	r9
 8008244:	3001      	adds	r0, #1
 8008246:	d103      	bne.n	8008250 <_printf_common+0xac>
 8008248:	f04f 30ff 	mov.w	r0, #4294967295
 800824c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008250:	3501      	adds	r5, #1
 8008252:	e7c6      	b.n	80081e2 <_printf_common+0x3e>
 8008254:	18e1      	adds	r1, r4, r3
 8008256:	1c5a      	adds	r2, r3, #1
 8008258:	2030      	movs	r0, #48	@ 0x30
 800825a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800825e:	4422      	add	r2, r4
 8008260:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008264:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008268:	3302      	adds	r3, #2
 800826a:	e7c7      	b.n	80081fc <_printf_common+0x58>
 800826c:	2301      	movs	r3, #1
 800826e:	4622      	mov	r2, r4
 8008270:	4641      	mov	r1, r8
 8008272:	4638      	mov	r0, r7
 8008274:	47c8      	blx	r9
 8008276:	3001      	adds	r0, #1
 8008278:	d0e6      	beq.n	8008248 <_printf_common+0xa4>
 800827a:	3601      	adds	r6, #1
 800827c:	e7d9      	b.n	8008232 <_printf_common+0x8e>
	...

08008280 <_printf_i>:
 8008280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008284:	7e0f      	ldrb	r7, [r1, #24]
 8008286:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008288:	2f78      	cmp	r7, #120	@ 0x78
 800828a:	4691      	mov	r9, r2
 800828c:	4680      	mov	r8, r0
 800828e:	460c      	mov	r4, r1
 8008290:	469a      	mov	sl, r3
 8008292:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008296:	d807      	bhi.n	80082a8 <_printf_i+0x28>
 8008298:	2f62      	cmp	r7, #98	@ 0x62
 800829a:	d80a      	bhi.n	80082b2 <_printf_i+0x32>
 800829c:	2f00      	cmp	r7, #0
 800829e:	f000 80d2 	beq.w	8008446 <_printf_i+0x1c6>
 80082a2:	2f58      	cmp	r7, #88	@ 0x58
 80082a4:	f000 80b9 	beq.w	800841a <_printf_i+0x19a>
 80082a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082b0:	e03a      	b.n	8008328 <_printf_i+0xa8>
 80082b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082b6:	2b15      	cmp	r3, #21
 80082b8:	d8f6      	bhi.n	80082a8 <_printf_i+0x28>
 80082ba:	a101      	add	r1, pc, #4	@ (adr r1, 80082c0 <_printf_i+0x40>)
 80082bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082c0:	08008319 	.word	0x08008319
 80082c4:	0800832d 	.word	0x0800832d
 80082c8:	080082a9 	.word	0x080082a9
 80082cc:	080082a9 	.word	0x080082a9
 80082d0:	080082a9 	.word	0x080082a9
 80082d4:	080082a9 	.word	0x080082a9
 80082d8:	0800832d 	.word	0x0800832d
 80082dc:	080082a9 	.word	0x080082a9
 80082e0:	080082a9 	.word	0x080082a9
 80082e4:	080082a9 	.word	0x080082a9
 80082e8:	080082a9 	.word	0x080082a9
 80082ec:	0800842d 	.word	0x0800842d
 80082f0:	08008357 	.word	0x08008357
 80082f4:	080083e7 	.word	0x080083e7
 80082f8:	080082a9 	.word	0x080082a9
 80082fc:	080082a9 	.word	0x080082a9
 8008300:	0800844f 	.word	0x0800844f
 8008304:	080082a9 	.word	0x080082a9
 8008308:	08008357 	.word	0x08008357
 800830c:	080082a9 	.word	0x080082a9
 8008310:	080082a9 	.word	0x080082a9
 8008314:	080083ef 	.word	0x080083ef
 8008318:	6833      	ldr	r3, [r6, #0]
 800831a:	1d1a      	adds	r2, r3, #4
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	6032      	str	r2, [r6, #0]
 8008320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008324:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008328:	2301      	movs	r3, #1
 800832a:	e09d      	b.n	8008468 <_printf_i+0x1e8>
 800832c:	6833      	ldr	r3, [r6, #0]
 800832e:	6820      	ldr	r0, [r4, #0]
 8008330:	1d19      	adds	r1, r3, #4
 8008332:	6031      	str	r1, [r6, #0]
 8008334:	0606      	lsls	r6, r0, #24
 8008336:	d501      	bpl.n	800833c <_printf_i+0xbc>
 8008338:	681d      	ldr	r5, [r3, #0]
 800833a:	e003      	b.n	8008344 <_printf_i+0xc4>
 800833c:	0645      	lsls	r5, r0, #25
 800833e:	d5fb      	bpl.n	8008338 <_printf_i+0xb8>
 8008340:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008344:	2d00      	cmp	r5, #0
 8008346:	da03      	bge.n	8008350 <_printf_i+0xd0>
 8008348:	232d      	movs	r3, #45	@ 0x2d
 800834a:	426d      	negs	r5, r5
 800834c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008350:	4859      	ldr	r0, [pc, #356]	@ (80084b8 <_printf_i+0x238>)
 8008352:	230a      	movs	r3, #10
 8008354:	e011      	b.n	800837a <_printf_i+0xfa>
 8008356:	6821      	ldr	r1, [r4, #0]
 8008358:	6833      	ldr	r3, [r6, #0]
 800835a:	0608      	lsls	r0, r1, #24
 800835c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008360:	d402      	bmi.n	8008368 <_printf_i+0xe8>
 8008362:	0649      	lsls	r1, r1, #25
 8008364:	bf48      	it	mi
 8008366:	b2ad      	uxthmi	r5, r5
 8008368:	2f6f      	cmp	r7, #111	@ 0x6f
 800836a:	4853      	ldr	r0, [pc, #332]	@ (80084b8 <_printf_i+0x238>)
 800836c:	6033      	str	r3, [r6, #0]
 800836e:	bf14      	ite	ne
 8008370:	230a      	movne	r3, #10
 8008372:	2308      	moveq	r3, #8
 8008374:	2100      	movs	r1, #0
 8008376:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800837a:	6866      	ldr	r6, [r4, #4]
 800837c:	60a6      	str	r6, [r4, #8]
 800837e:	2e00      	cmp	r6, #0
 8008380:	bfa2      	ittt	ge
 8008382:	6821      	ldrge	r1, [r4, #0]
 8008384:	f021 0104 	bicge.w	r1, r1, #4
 8008388:	6021      	strge	r1, [r4, #0]
 800838a:	b90d      	cbnz	r5, 8008390 <_printf_i+0x110>
 800838c:	2e00      	cmp	r6, #0
 800838e:	d04b      	beq.n	8008428 <_printf_i+0x1a8>
 8008390:	4616      	mov	r6, r2
 8008392:	fbb5 f1f3 	udiv	r1, r5, r3
 8008396:	fb03 5711 	mls	r7, r3, r1, r5
 800839a:	5dc7      	ldrb	r7, [r0, r7]
 800839c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083a0:	462f      	mov	r7, r5
 80083a2:	42bb      	cmp	r3, r7
 80083a4:	460d      	mov	r5, r1
 80083a6:	d9f4      	bls.n	8008392 <_printf_i+0x112>
 80083a8:	2b08      	cmp	r3, #8
 80083aa:	d10b      	bne.n	80083c4 <_printf_i+0x144>
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	07df      	lsls	r7, r3, #31
 80083b0:	d508      	bpl.n	80083c4 <_printf_i+0x144>
 80083b2:	6923      	ldr	r3, [r4, #16]
 80083b4:	6861      	ldr	r1, [r4, #4]
 80083b6:	4299      	cmp	r1, r3
 80083b8:	bfde      	ittt	le
 80083ba:	2330      	movle	r3, #48	@ 0x30
 80083bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083c4:	1b92      	subs	r2, r2, r6
 80083c6:	6122      	str	r2, [r4, #16]
 80083c8:	f8cd a000 	str.w	sl, [sp]
 80083cc:	464b      	mov	r3, r9
 80083ce:	aa03      	add	r2, sp, #12
 80083d0:	4621      	mov	r1, r4
 80083d2:	4640      	mov	r0, r8
 80083d4:	f7ff fee6 	bl	80081a4 <_printf_common>
 80083d8:	3001      	adds	r0, #1
 80083da:	d14a      	bne.n	8008472 <_printf_i+0x1f2>
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	b004      	add	sp, #16
 80083e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	f043 0320 	orr.w	r3, r3, #32
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	4833      	ldr	r0, [pc, #204]	@ (80084bc <_printf_i+0x23c>)
 80083f0:	2778      	movs	r7, #120	@ 0x78
 80083f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	6831      	ldr	r1, [r6, #0]
 80083fa:	061f      	lsls	r7, r3, #24
 80083fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8008400:	d402      	bmi.n	8008408 <_printf_i+0x188>
 8008402:	065f      	lsls	r7, r3, #25
 8008404:	bf48      	it	mi
 8008406:	b2ad      	uxthmi	r5, r5
 8008408:	6031      	str	r1, [r6, #0]
 800840a:	07d9      	lsls	r1, r3, #31
 800840c:	bf44      	itt	mi
 800840e:	f043 0320 	orrmi.w	r3, r3, #32
 8008412:	6023      	strmi	r3, [r4, #0]
 8008414:	b11d      	cbz	r5, 800841e <_printf_i+0x19e>
 8008416:	2310      	movs	r3, #16
 8008418:	e7ac      	b.n	8008374 <_printf_i+0xf4>
 800841a:	4827      	ldr	r0, [pc, #156]	@ (80084b8 <_printf_i+0x238>)
 800841c:	e7e9      	b.n	80083f2 <_printf_i+0x172>
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	f023 0320 	bic.w	r3, r3, #32
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	e7f6      	b.n	8008416 <_printf_i+0x196>
 8008428:	4616      	mov	r6, r2
 800842a:	e7bd      	b.n	80083a8 <_printf_i+0x128>
 800842c:	6833      	ldr	r3, [r6, #0]
 800842e:	6825      	ldr	r5, [r4, #0]
 8008430:	6961      	ldr	r1, [r4, #20]
 8008432:	1d18      	adds	r0, r3, #4
 8008434:	6030      	str	r0, [r6, #0]
 8008436:	062e      	lsls	r6, r5, #24
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	d501      	bpl.n	8008440 <_printf_i+0x1c0>
 800843c:	6019      	str	r1, [r3, #0]
 800843e:	e002      	b.n	8008446 <_printf_i+0x1c6>
 8008440:	0668      	lsls	r0, r5, #25
 8008442:	d5fb      	bpl.n	800843c <_printf_i+0x1bc>
 8008444:	8019      	strh	r1, [r3, #0]
 8008446:	2300      	movs	r3, #0
 8008448:	6123      	str	r3, [r4, #16]
 800844a:	4616      	mov	r6, r2
 800844c:	e7bc      	b.n	80083c8 <_printf_i+0x148>
 800844e:	6833      	ldr	r3, [r6, #0]
 8008450:	1d1a      	adds	r2, r3, #4
 8008452:	6032      	str	r2, [r6, #0]
 8008454:	681e      	ldr	r6, [r3, #0]
 8008456:	6862      	ldr	r2, [r4, #4]
 8008458:	2100      	movs	r1, #0
 800845a:	4630      	mov	r0, r6
 800845c:	f7f7 feb8 	bl	80001d0 <memchr>
 8008460:	b108      	cbz	r0, 8008466 <_printf_i+0x1e6>
 8008462:	1b80      	subs	r0, r0, r6
 8008464:	6060      	str	r0, [r4, #4]
 8008466:	6863      	ldr	r3, [r4, #4]
 8008468:	6123      	str	r3, [r4, #16]
 800846a:	2300      	movs	r3, #0
 800846c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008470:	e7aa      	b.n	80083c8 <_printf_i+0x148>
 8008472:	6923      	ldr	r3, [r4, #16]
 8008474:	4632      	mov	r2, r6
 8008476:	4649      	mov	r1, r9
 8008478:	4640      	mov	r0, r8
 800847a:	47d0      	blx	sl
 800847c:	3001      	adds	r0, #1
 800847e:	d0ad      	beq.n	80083dc <_printf_i+0x15c>
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	079b      	lsls	r3, r3, #30
 8008484:	d413      	bmi.n	80084ae <_printf_i+0x22e>
 8008486:	68e0      	ldr	r0, [r4, #12]
 8008488:	9b03      	ldr	r3, [sp, #12]
 800848a:	4298      	cmp	r0, r3
 800848c:	bfb8      	it	lt
 800848e:	4618      	movlt	r0, r3
 8008490:	e7a6      	b.n	80083e0 <_printf_i+0x160>
 8008492:	2301      	movs	r3, #1
 8008494:	4632      	mov	r2, r6
 8008496:	4649      	mov	r1, r9
 8008498:	4640      	mov	r0, r8
 800849a:	47d0      	blx	sl
 800849c:	3001      	adds	r0, #1
 800849e:	d09d      	beq.n	80083dc <_printf_i+0x15c>
 80084a0:	3501      	adds	r5, #1
 80084a2:	68e3      	ldr	r3, [r4, #12]
 80084a4:	9903      	ldr	r1, [sp, #12]
 80084a6:	1a5b      	subs	r3, r3, r1
 80084a8:	42ab      	cmp	r3, r5
 80084aa:	dcf2      	bgt.n	8008492 <_printf_i+0x212>
 80084ac:	e7eb      	b.n	8008486 <_printf_i+0x206>
 80084ae:	2500      	movs	r5, #0
 80084b0:	f104 0619 	add.w	r6, r4, #25
 80084b4:	e7f5      	b.n	80084a2 <_printf_i+0x222>
 80084b6:	bf00      	nop
 80084b8:	0800d089 	.word	0x0800d089
 80084bc:	0800d09a 	.word	0x0800d09a

080084c0 <_scanf_float>:
 80084c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c4:	b087      	sub	sp, #28
 80084c6:	4617      	mov	r7, r2
 80084c8:	9303      	str	r3, [sp, #12]
 80084ca:	688b      	ldr	r3, [r1, #8]
 80084cc:	1e5a      	subs	r2, r3, #1
 80084ce:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80084d2:	bf81      	itttt	hi
 80084d4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80084d8:	eb03 0b05 	addhi.w	fp, r3, r5
 80084dc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80084e0:	608b      	strhi	r3, [r1, #8]
 80084e2:	680b      	ldr	r3, [r1, #0]
 80084e4:	460a      	mov	r2, r1
 80084e6:	f04f 0500 	mov.w	r5, #0
 80084ea:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80084ee:	f842 3b1c 	str.w	r3, [r2], #28
 80084f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80084f6:	4680      	mov	r8, r0
 80084f8:	460c      	mov	r4, r1
 80084fa:	bf98      	it	ls
 80084fc:	f04f 0b00 	movls.w	fp, #0
 8008500:	9201      	str	r2, [sp, #4]
 8008502:	4616      	mov	r6, r2
 8008504:	46aa      	mov	sl, r5
 8008506:	46a9      	mov	r9, r5
 8008508:	9502      	str	r5, [sp, #8]
 800850a:	68a2      	ldr	r2, [r4, #8]
 800850c:	b152      	cbz	r2, 8008524 <_scanf_float+0x64>
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	2b4e      	cmp	r3, #78	@ 0x4e
 8008514:	d864      	bhi.n	80085e0 <_scanf_float+0x120>
 8008516:	2b40      	cmp	r3, #64	@ 0x40
 8008518:	d83c      	bhi.n	8008594 <_scanf_float+0xd4>
 800851a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800851e:	b2c8      	uxtb	r0, r1
 8008520:	280e      	cmp	r0, #14
 8008522:	d93a      	bls.n	800859a <_scanf_float+0xda>
 8008524:	f1b9 0f00 	cmp.w	r9, #0
 8008528:	d003      	beq.n	8008532 <_scanf_float+0x72>
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008536:	f1ba 0f01 	cmp.w	sl, #1
 800853a:	f200 8117 	bhi.w	800876c <_scanf_float+0x2ac>
 800853e:	9b01      	ldr	r3, [sp, #4]
 8008540:	429e      	cmp	r6, r3
 8008542:	f200 8108 	bhi.w	8008756 <_scanf_float+0x296>
 8008546:	2001      	movs	r0, #1
 8008548:	b007      	add	sp, #28
 800854a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008552:	2a0d      	cmp	r2, #13
 8008554:	d8e6      	bhi.n	8008524 <_scanf_float+0x64>
 8008556:	a101      	add	r1, pc, #4	@ (adr r1, 800855c <_scanf_float+0x9c>)
 8008558:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800855c:	080086a3 	.word	0x080086a3
 8008560:	08008525 	.word	0x08008525
 8008564:	08008525 	.word	0x08008525
 8008568:	08008525 	.word	0x08008525
 800856c:	08008703 	.word	0x08008703
 8008570:	080086db 	.word	0x080086db
 8008574:	08008525 	.word	0x08008525
 8008578:	08008525 	.word	0x08008525
 800857c:	080086b1 	.word	0x080086b1
 8008580:	08008525 	.word	0x08008525
 8008584:	08008525 	.word	0x08008525
 8008588:	08008525 	.word	0x08008525
 800858c:	08008525 	.word	0x08008525
 8008590:	08008669 	.word	0x08008669
 8008594:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008598:	e7db      	b.n	8008552 <_scanf_float+0x92>
 800859a:	290e      	cmp	r1, #14
 800859c:	d8c2      	bhi.n	8008524 <_scanf_float+0x64>
 800859e:	a001      	add	r0, pc, #4	@ (adr r0, 80085a4 <_scanf_float+0xe4>)
 80085a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80085a4:	08008659 	.word	0x08008659
 80085a8:	08008525 	.word	0x08008525
 80085ac:	08008659 	.word	0x08008659
 80085b0:	080086ef 	.word	0x080086ef
 80085b4:	08008525 	.word	0x08008525
 80085b8:	08008601 	.word	0x08008601
 80085bc:	0800863f 	.word	0x0800863f
 80085c0:	0800863f 	.word	0x0800863f
 80085c4:	0800863f 	.word	0x0800863f
 80085c8:	0800863f 	.word	0x0800863f
 80085cc:	0800863f 	.word	0x0800863f
 80085d0:	0800863f 	.word	0x0800863f
 80085d4:	0800863f 	.word	0x0800863f
 80085d8:	0800863f 	.word	0x0800863f
 80085dc:	0800863f 	.word	0x0800863f
 80085e0:	2b6e      	cmp	r3, #110	@ 0x6e
 80085e2:	d809      	bhi.n	80085f8 <_scanf_float+0x138>
 80085e4:	2b60      	cmp	r3, #96	@ 0x60
 80085e6:	d8b2      	bhi.n	800854e <_scanf_float+0x8e>
 80085e8:	2b54      	cmp	r3, #84	@ 0x54
 80085ea:	d07b      	beq.n	80086e4 <_scanf_float+0x224>
 80085ec:	2b59      	cmp	r3, #89	@ 0x59
 80085ee:	d199      	bne.n	8008524 <_scanf_float+0x64>
 80085f0:	2d07      	cmp	r5, #7
 80085f2:	d197      	bne.n	8008524 <_scanf_float+0x64>
 80085f4:	2508      	movs	r5, #8
 80085f6:	e02c      	b.n	8008652 <_scanf_float+0x192>
 80085f8:	2b74      	cmp	r3, #116	@ 0x74
 80085fa:	d073      	beq.n	80086e4 <_scanf_float+0x224>
 80085fc:	2b79      	cmp	r3, #121	@ 0x79
 80085fe:	e7f6      	b.n	80085ee <_scanf_float+0x12e>
 8008600:	6821      	ldr	r1, [r4, #0]
 8008602:	05c8      	lsls	r0, r1, #23
 8008604:	d51b      	bpl.n	800863e <_scanf_float+0x17e>
 8008606:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800860a:	6021      	str	r1, [r4, #0]
 800860c:	f109 0901 	add.w	r9, r9, #1
 8008610:	f1bb 0f00 	cmp.w	fp, #0
 8008614:	d003      	beq.n	800861e <_scanf_float+0x15e>
 8008616:	3201      	adds	r2, #1
 8008618:	f10b 3bff 	add.w	fp, fp, #4294967295
 800861c:	60a2      	str	r2, [r4, #8]
 800861e:	68a3      	ldr	r3, [r4, #8]
 8008620:	3b01      	subs	r3, #1
 8008622:	60a3      	str	r3, [r4, #8]
 8008624:	6923      	ldr	r3, [r4, #16]
 8008626:	3301      	adds	r3, #1
 8008628:	6123      	str	r3, [r4, #16]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	3b01      	subs	r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	607b      	str	r3, [r7, #4]
 8008632:	f340 8087 	ble.w	8008744 <_scanf_float+0x284>
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	3301      	adds	r3, #1
 800863a:	603b      	str	r3, [r7, #0]
 800863c:	e765      	b.n	800850a <_scanf_float+0x4a>
 800863e:	eb1a 0105 	adds.w	r1, sl, r5
 8008642:	f47f af6f 	bne.w	8008524 <_scanf_float+0x64>
 8008646:	6822      	ldr	r2, [r4, #0]
 8008648:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800864c:	6022      	str	r2, [r4, #0]
 800864e:	460d      	mov	r5, r1
 8008650:	468a      	mov	sl, r1
 8008652:	f806 3b01 	strb.w	r3, [r6], #1
 8008656:	e7e2      	b.n	800861e <_scanf_float+0x15e>
 8008658:	6822      	ldr	r2, [r4, #0]
 800865a:	0610      	lsls	r0, r2, #24
 800865c:	f57f af62 	bpl.w	8008524 <_scanf_float+0x64>
 8008660:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008664:	6022      	str	r2, [r4, #0]
 8008666:	e7f4      	b.n	8008652 <_scanf_float+0x192>
 8008668:	f1ba 0f00 	cmp.w	sl, #0
 800866c:	d10e      	bne.n	800868c <_scanf_float+0x1cc>
 800866e:	f1b9 0f00 	cmp.w	r9, #0
 8008672:	d10e      	bne.n	8008692 <_scanf_float+0x1d2>
 8008674:	6822      	ldr	r2, [r4, #0]
 8008676:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800867a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800867e:	d108      	bne.n	8008692 <_scanf_float+0x1d2>
 8008680:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008684:	6022      	str	r2, [r4, #0]
 8008686:	f04f 0a01 	mov.w	sl, #1
 800868a:	e7e2      	b.n	8008652 <_scanf_float+0x192>
 800868c:	f1ba 0f02 	cmp.w	sl, #2
 8008690:	d055      	beq.n	800873e <_scanf_float+0x27e>
 8008692:	2d01      	cmp	r5, #1
 8008694:	d002      	beq.n	800869c <_scanf_float+0x1dc>
 8008696:	2d04      	cmp	r5, #4
 8008698:	f47f af44 	bne.w	8008524 <_scanf_float+0x64>
 800869c:	3501      	adds	r5, #1
 800869e:	b2ed      	uxtb	r5, r5
 80086a0:	e7d7      	b.n	8008652 <_scanf_float+0x192>
 80086a2:	f1ba 0f01 	cmp.w	sl, #1
 80086a6:	f47f af3d 	bne.w	8008524 <_scanf_float+0x64>
 80086aa:	f04f 0a02 	mov.w	sl, #2
 80086ae:	e7d0      	b.n	8008652 <_scanf_float+0x192>
 80086b0:	b97d      	cbnz	r5, 80086d2 <_scanf_float+0x212>
 80086b2:	f1b9 0f00 	cmp.w	r9, #0
 80086b6:	f47f af38 	bne.w	800852a <_scanf_float+0x6a>
 80086ba:	6822      	ldr	r2, [r4, #0]
 80086bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80086c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80086c4:	f040 8108 	bne.w	80088d8 <_scanf_float+0x418>
 80086c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80086cc:	6022      	str	r2, [r4, #0]
 80086ce:	2501      	movs	r5, #1
 80086d0:	e7bf      	b.n	8008652 <_scanf_float+0x192>
 80086d2:	2d03      	cmp	r5, #3
 80086d4:	d0e2      	beq.n	800869c <_scanf_float+0x1dc>
 80086d6:	2d05      	cmp	r5, #5
 80086d8:	e7de      	b.n	8008698 <_scanf_float+0x1d8>
 80086da:	2d02      	cmp	r5, #2
 80086dc:	f47f af22 	bne.w	8008524 <_scanf_float+0x64>
 80086e0:	2503      	movs	r5, #3
 80086e2:	e7b6      	b.n	8008652 <_scanf_float+0x192>
 80086e4:	2d06      	cmp	r5, #6
 80086e6:	f47f af1d 	bne.w	8008524 <_scanf_float+0x64>
 80086ea:	2507      	movs	r5, #7
 80086ec:	e7b1      	b.n	8008652 <_scanf_float+0x192>
 80086ee:	6822      	ldr	r2, [r4, #0]
 80086f0:	0591      	lsls	r1, r2, #22
 80086f2:	f57f af17 	bpl.w	8008524 <_scanf_float+0x64>
 80086f6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80086fa:	6022      	str	r2, [r4, #0]
 80086fc:	f8cd 9008 	str.w	r9, [sp, #8]
 8008700:	e7a7      	b.n	8008652 <_scanf_float+0x192>
 8008702:	6822      	ldr	r2, [r4, #0]
 8008704:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008708:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800870c:	d006      	beq.n	800871c <_scanf_float+0x25c>
 800870e:	0550      	lsls	r0, r2, #21
 8008710:	f57f af08 	bpl.w	8008524 <_scanf_float+0x64>
 8008714:	f1b9 0f00 	cmp.w	r9, #0
 8008718:	f000 80de 	beq.w	80088d8 <_scanf_float+0x418>
 800871c:	0591      	lsls	r1, r2, #22
 800871e:	bf58      	it	pl
 8008720:	9902      	ldrpl	r1, [sp, #8]
 8008722:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008726:	bf58      	it	pl
 8008728:	eba9 0101 	subpl.w	r1, r9, r1
 800872c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008730:	bf58      	it	pl
 8008732:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008736:	6022      	str	r2, [r4, #0]
 8008738:	f04f 0900 	mov.w	r9, #0
 800873c:	e789      	b.n	8008652 <_scanf_float+0x192>
 800873e:	f04f 0a03 	mov.w	sl, #3
 8008742:	e786      	b.n	8008652 <_scanf_float+0x192>
 8008744:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008748:	4639      	mov	r1, r7
 800874a:	4640      	mov	r0, r8
 800874c:	4798      	blx	r3
 800874e:	2800      	cmp	r0, #0
 8008750:	f43f aedb 	beq.w	800850a <_scanf_float+0x4a>
 8008754:	e6e6      	b.n	8008524 <_scanf_float+0x64>
 8008756:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800875a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800875e:	463a      	mov	r2, r7
 8008760:	4640      	mov	r0, r8
 8008762:	4798      	blx	r3
 8008764:	6923      	ldr	r3, [r4, #16]
 8008766:	3b01      	subs	r3, #1
 8008768:	6123      	str	r3, [r4, #16]
 800876a:	e6e8      	b.n	800853e <_scanf_float+0x7e>
 800876c:	1e6b      	subs	r3, r5, #1
 800876e:	2b06      	cmp	r3, #6
 8008770:	d824      	bhi.n	80087bc <_scanf_float+0x2fc>
 8008772:	2d02      	cmp	r5, #2
 8008774:	d836      	bhi.n	80087e4 <_scanf_float+0x324>
 8008776:	9b01      	ldr	r3, [sp, #4]
 8008778:	429e      	cmp	r6, r3
 800877a:	f67f aee4 	bls.w	8008546 <_scanf_float+0x86>
 800877e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008782:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008786:	463a      	mov	r2, r7
 8008788:	4640      	mov	r0, r8
 800878a:	4798      	blx	r3
 800878c:	6923      	ldr	r3, [r4, #16]
 800878e:	3b01      	subs	r3, #1
 8008790:	6123      	str	r3, [r4, #16]
 8008792:	e7f0      	b.n	8008776 <_scanf_float+0x2b6>
 8008794:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008798:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800879c:	463a      	mov	r2, r7
 800879e:	4640      	mov	r0, r8
 80087a0:	4798      	blx	r3
 80087a2:	6923      	ldr	r3, [r4, #16]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	6123      	str	r3, [r4, #16]
 80087a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087ac:	fa5f fa8a 	uxtb.w	sl, sl
 80087b0:	f1ba 0f02 	cmp.w	sl, #2
 80087b4:	d1ee      	bne.n	8008794 <_scanf_float+0x2d4>
 80087b6:	3d03      	subs	r5, #3
 80087b8:	b2ed      	uxtb	r5, r5
 80087ba:	1b76      	subs	r6, r6, r5
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	05da      	lsls	r2, r3, #23
 80087c0:	d530      	bpl.n	8008824 <_scanf_float+0x364>
 80087c2:	055b      	lsls	r3, r3, #21
 80087c4:	d511      	bpl.n	80087ea <_scanf_float+0x32a>
 80087c6:	9b01      	ldr	r3, [sp, #4]
 80087c8:	429e      	cmp	r6, r3
 80087ca:	f67f aebc 	bls.w	8008546 <_scanf_float+0x86>
 80087ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087d6:	463a      	mov	r2, r7
 80087d8:	4640      	mov	r0, r8
 80087da:	4798      	blx	r3
 80087dc:	6923      	ldr	r3, [r4, #16]
 80087de:	3b01      	subs	r3, #1
 80087e0:	6123      	str	r3, [r4, #16]
 80087e2:	e7f0      	b.n	80087c6 <_scanf_float+0x306>
 80087e4:	46aa      	mov	sl, r5
 80087e6:	46b3      	mov	fp, r6
 80087e8:	e7de      	b.n	80087a8 <_scanf_float+0x2e8>
 80087ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80087ee:	6923      	ldr	r3, [r4, #16]
 80087f0:	2965      	cmp	r1, #101	@ 0x65
 80087f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80087f6:	f106 35ff 	add.w	r5, r6, #4294967295
 80087fa:	6123      	str	r3, [r4, #16]
 80087fc:	d00c      	beq.n	8008818 <_scanf_float+0x358>
 80087fe:	2945      	cmp	r1, #69	@ 0x45
 8008800:	d00a      	beq.n	8008818 <_scanf_float+0x358>
 8008802:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008806:	463a      	mov	r2, r7
 8008808:	4640      	mov	r0, r8
 800880a:	4798      	blx	r3
 800880c:	6923      	ldr	r3, [r4, #16]
 800880e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008812:	3b01      	subs	r3, #1
 8008814:	1eb5      	subs	r5, r6, #2
 8008816:	6123      	str	r3, [r4, #16]
 8008818:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800881c:	463a      	mov	r2, r7
 800881e:	4640      	mov	r0, r8
 8008820:	4798      	blx	r3
 8008822:	462e      	mov	r6, r5
 8008824:	6822      	ldr	r2, [r4, #0]
 8008826:	f012 0210 	ands.w	r2, r2, #16
 800882a:	d001      	beq.n	8008830 <_scanf_float+0x370>
 800882c:	2000      	movs	r0, #0
 800882e:	e68b      	b.n	8008548 <_scanf_float+0x88>
 8008830:	7032      	strb	r2, [r6, #0]
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800883c:	d11c      	bne.n	8008878 <_scanf_float+0x3b8>
 800883e:	9b02      	ldr	r3, [sp, #8]
 8008840:	454b      	cmp	r3, r9
 8008842:	eba3 0209 	sub.w	r2, r3, r9
 8008846:	d123      	bne.n	8008890 <_scanf_float+0x3d0>
 8008848:	9901      	ldr	r1, [sp, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	4640      	mov	r0, r8
 800884e:	f002 fe07 	bl	800b460 <_strtod_r>
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	6821      	ldr	r1, [r4, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f011 0f02 	tst.w	r1, #2
 800885c:	ec57 6b10 	vmov	r6, r7, d0
 8008860:	f103 0204 	add.w	r2, r3, #4
 8008864:	d01f      	beq.n	80088a6 <_scanf_float+0x3e6>
 8008866:	9903      	ldr	r1, [sp, #12]
 8008868:	600a      	str	r2, [r1, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	e9c3 6700 	strd	r6, r7, [r3]
 8008870:	68e3      	ldr	r3, [r4, #12]
 8008872:	3301      	adds	r3, #1
 8008874:	60e3      	str	r3, [r4, #12]
 8008876:	e7d9      	b.n	800882c <_scanf_float+0x36c>
 8008878:	9b04      	ldr	r3, [sp, #16]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d0e4      	beq.n	8008848 <_scanf_float+0x388>
 800887e:	9905      	ldr	r1, [sp, #20]
 8008880:	230a      	movs	r3, #10
 8008882:	3101      	adds	r1, #1
 8008884:	4640      	mov	r0, r8
 8008886:	f7ff f9b7 	bl	8007bf8 <_strtol_r>
 800888a:	9b04      	ldr	r3, [sp, #16]
 800888c:	9e05      	ldr	r6, [sp, #20]
 800888e:	1ac2      	subs	r2, r0, r3
 8008890:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008894:	429e      	cmp	r6, r3
 8008896:	bf28      	it	cs
 8008898:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800889c:	4910      	ldr	r1, [pc, #64]	@ (80088e0 <_scanf_float+0x420>)
 800889e:	4630      	mov	r0, r6
 80088a0:	f000 fa14 	bl	8008ccc <siprintf>
 80088a4:	e7d0      	b.n	8008848 <_scanf_float+0x388>
 80088a6:	f011 0f04 	tst.w	r1, #4
 80088aa:	9903      	ldr	r1, [sp, #12]
 80088ac:	600a      	str	r2, [r1, #0]
 80088ae:	d1dc      	bne.n	800886a <_scanf_float+0x3aa>
 80088b0:	681d      	ldr	r5, [r3, #0]
 80088b2:	4632      	mov	r2, r6
 80088b4:	463b      	mov	r3, r7
 80088b6:	4630      	mov	r0, r6
 80088b8:	4639      	mov	r1, r7
 80088ba:	f7f8 f937 	bl	8000b2c <__aeabi_dcmpun>
 80088be:	b128      	cbz	r0, 80088cc <_scanf_float+0x40c>
 80088c0:	4808      	ldr	r0, [pc, #32]	@ (80088e4 <_scanf_float+0x424>)
 80088c2:	f000 fbc7 	bl	8009054 <nanf>
 80088c6:	ed85 0a00 	vstr	s0, [r5]
 80088ca:	e7d1      	b.n	8008870 <_scanf_float+0x3b0>
 80088cc:	4630      	mov	r0, r6
 80088ce:	4639      	mov	r1, r7
 80088d0:	f7f8 f98a 	bl	8000be8 <__aeabi_d2f>
 80088d4:	6028      	str	r0, [r5, #0]
 80088d6:	e7cb      	b.n	8008870 <_scanf_float+0x3b0>
 80088d8:	f04f 0900 	mov.w	r9, #0
 80088dc:	e629      	b.n	8008532 <_scanf_float+0x72>
 80088de:	bf00      	nop
 80088e0:	0800d0ab 	.word	0x0800d0ab
 80088e4:	0800d35f 	.word	0x0800d35f

080088e8 <__sflush_r>:
 80088e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f0:	0716      	lsls	r6, r2, #28
 80088f2:	4605      	mov	r5, r0
 80088f4:	460c      	mov	r4, r1
 80088f6:	d454      	bmi.n	80089a2 <__sflush_r+0xba>
 80088f8:	684b      	ldr	r3, [r1, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	dc02      	bgt.n	8008904 <__sflush_r+0x1c>
 80088fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008900:	2b00      	cmp	r3, #0
 8008902:	dd48      	ble.n	8008996 <__sflush_r+0xae>
 8008904:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008906:	2e00      	cmp	r6, #0
 8008908:	d045      	beq.n	8008996 <__sflush_r+0xae>
 800890a:	2300      	movs	r3, #0
 800890c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008910:	682f      	ldr	r7, [r5, #0]
 8008912:	6a21      	ldr	r1, [r4, #32]
 8008914:	602b      	str	r3, [r5, #0]
 8008916:	d030      	beq.n	800897a <__sflush_r+0x92>
 8008918:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800891a:	89a3      	ldrh	r3, [r4, #12]
 800891c:	0759      	lsls	r1, r3, #29
 800891e:	d505      	bpl.n	800892c <__sflush_r+0x44>
 8008920:	6863      	ldr	r3, [r4, #4]
 8008922:	1ad2      	subs	r2, r2, r3
 8008924:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008926:	b10b      	cbz	r3, 800892c <__sflush_r+0x44>
 8008928:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800892a:	1ad2      	subs	r2, r2, r3
 800892c:	2300      	movs	r3, #0
 800892e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008930:	6a21      	ldr	r1, [r4, #32]
 8008932:	4628      	mov	r0, r5
 8008934:	47b0      	blx	r6
 8008936:	1c43      	adds	r3, r0, #1
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	d106      	bne.n	800894a <__sflush_r+0x62>
 800893c:	6829      	ldr	r1, [r5, #0]
 800893e:	291d      	cmp	r1, #29
 8008940:	d82b      	bhi.n	800899a <__sflush_r+0xb2>
 8008942:	4a2a      	ldr	r2, [pc, #168]	@ (80089ec <__sflush_r+0x104>)
 8008944:	410a      	asrs	r2, r1
 8008946:	07d6      	lsls	r6, r2, #31
 8008948:	d427      	bmi.n	800899a <__sflush_r+0xb2>
 800894a:	2200      	movs	r2, #0
 800894c:	6062      	str	r2, [r4, #4]
 800894e:	04d9      	lsls	r1, r3, #19
 8008950:	6922      	ldr	r2, [r4, #16]
 8008952:	6022      	str	r2, [r4, #0]
 8008954:	d504      	bpl.n	8008960 <__sflush_r+0x78>
 8008956:	1c42      	adds	r2, r0, #1
 8008958:	d101      	bne.n	800895e <__sflush_r+0x76>
 800895a:	682b      	ldr	r3, [r5, #0]
 800895c:	b903      	cbnz	r3, 8008960 <__sflush_r+0x78>
 800895e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008960:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008962:	602f      	str	r7, [r5, #0]
 8008964:	b1b9      	cbz	r1, 8008996 <__sflush_r+0xae>
 8008966:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800896a:	4299      	cmp	r1, r3
 800896c:	d002      	beq.n	8008974 <__sflush_r+0x8c>
 800896e:	4628      	mov	r0, r5
 8008970:	f001 f9c2 	bl	8009cf8 <_free_r>
 8008974:	2300      	movs	r3, #0
 8008976:	6363      	str	r3, [r4, #52]	@ 0x34
 8008978:	e00d      	b.n	8008996 <__sflush_r+0xae>
 800897a:	2301      	movs	r3, #1
 800897c:	4628      	mov	r0, r5
 800897e:	47b0      	blx	r6
 8008980:	4602      	mov	r2, r0
 8008982:	1c50      	adds	r0, r2, #1
 8008984:	d1c9      	bne.n	800891a <__sflush_r+0x32>
 8008986:	682b      	ldr	r3, [r5, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d0c6      	beq.n	800891a <__sflush_r+0x32>
 800898c:	2b1d      	cmp	r3, #29
 800898e:	d001      	beq.n	8008994 <__sflush_r+0xac>
 8008990:	2b16      	cmp	r3, #22
 8008992:	d11e      	bne.n	80089d2 <__sflush_r+0xea>
 8008994:	602f      	str	r7, [r5, #0]
 8008996:	2000      	movs	r0, #0
 8008998:	e022      	b.n	80089e0 <__sflush_r+0xf8>
 800899a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800899e:	b21b      	sxth	r3, r3
 80089a0:	e01b      	b.n	80089da <__sflush_r+0xf2>
 80089a2:	690f      	ldr	r7, [r1, #16]
 80089a4:	2f00      	cmp	r7, #0
 80089a6:	d0f6      	beq.n	8008996 <__sflush_r+0xae>
 80089a8:	0793      	lsls	r3, r2, #30
 80089aa:	680e      	ldr	r6, [r1, #0]
 80089ac:	bf08      	it	eq
 80089ae:	694b      	ldreq	r3, [r1, #20]
 80089b0:	600f      	str	r7, [r1, #0]
 80089b2:	bf18      	it	ne
 80089b4:	2300      	movne	r3, #0
 80089b6:	eba6 0807 	sub.w	r8, r6, r7
 80089ba:	608b      	str	r3, [r1, #8]
 80089bc:	f1b8 0f00 	cmp.w	r8, #0
 80089c0:	dde9      	ble.n	8008996 <__sflush_r+0xae>
 80089c2:	6a21      	ldr	r1, [r4, #32]
 80089c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80089c6:	4643      	mov	r3, r8
 80089c8:	463a      	mov	r2, r7
 80089ca:	4628      	mov	r0, r5
 80089cc:	47b0      	blx	r6
 80089ce:	2800      	cmp	r0, #0
 80089d0:	dc08      	bgt.n	80089e4 <__sflush_r+0xfc>
 80089d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089da:	81a3      	strh	r3, [r4, #12]
 80089dc:	f04f 30ff 	mov.w	r0, #4294967295
 80089e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e4:	4407      	add	r7, r0
 80089e6:	eba8 0800 	sub.w	r8, r8, r0
 80089ea:	e7e7      	b.n	80089bc <__sflush_r+0xd4>
 80089ec:	dfbffffe 	.word	0xdfbffffe

080089f0 <_fflush_r>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	690b      	ldr	r3, [r1, #16]
 80089f4:	4605      	mov	r5, r0
 80089f6:	460c      	mov	r4, r1
 80089f8:	b913      	cbnz	r3, 8008a00 <_fflush_r+0x10>
 80089fa:	2500      	movs	r5, #0
 80089fc:	4628      	mov	r0, r5
 80089fe:	bd38      	pop	{r3, r4, r5, pc}
 8008a00:	b118      	cbz	r0, 8008a0a <_fflush_r+0x1a>
 8008a02:	6a03      	ldr	r3, [r0, #32]
 8008a04:	b90b      	cbnz	r3, 8008a0a <_fflush_r+0x1a>
 8008a06:	f000 f8bb 	bl	8008b80 <__sinit>
 8008a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d0f3      	beq.n	80089fa <_fflush_r+0xa>
 8008a12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a14:	07d0      	lsls	r0, r2, #31
 8008a16:	d404      	bmi.n	8008a22 <_fflush_r+0x32>
 8008a18:	0599      	lsls	r1, r3, #22
 8008a1a:	d402      	bmi.n	8008a22 <_fflush_r+0x32>
 8008a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a1e:	f000 fb08 	bl	8009032 <__retarget_lock_acquire_recursive>
 8008a22:	4628      	mov	r0, r5
 8008a24:	4621      	mov	r1, r4
 8008a26:	f7ff ff5f 	bl	80088e8 <__sflush_r>
 8008a2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a2c:	07da      	lsls	r2, r3, #31
 8008a2e:	4605      	mov	r5, r0
 8008a30:	d4e4      	bmi.n	80089fc <_fflush_r+0xc>
 8008a32:	89a3      	ldrh	r3, [r4, #12]
 8008a34:	059b      	lsls	r3, r3, #22
 8008a36:	d4e1      	bmi.n	80089fc <_fflush_r+0xc>
 8008a38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a3a:	f000 fafb 	bl	8009034 <__retarget_lock_release_recursive>
 8008a3e:	e7dd      	b.n	80089fc <_fflush_r+0xc>

08008a40 <fflush>:
 8008a40:	4601      	mov	r1, r0
 8008a42:	b920      	cbnz	r0, 8008a4e <fflush+0xe>
 8008a44:	4a04      	ldr	r2, [pc, #16]	@ (8008a58 <fflush+0x18>)
 8008a46:	4905      	ldr	r1, [pc, #20]	@ (8008a5c <fflush+0x1c>)
 8008a48:	4805      	ldr	r0, [pc, #20]	@ (8008a60 <fflush+0x20>)
 8008a4a:	f000 b8b1 	b.w	8008bb0 <_fwalk_sglue>
 8008a4e:	4b05      	ldr	r3, [pc, #20]	@ (8008a64 <fflush+0x24>)
 8008a50:	6818      	ldr	r0, [r3, #0]
 8008a52:	f7ff bfcd 	b.w	80089f0 <_fflush_r>
 8008a56:	bf00      	nop
 8008a58:	20000020 	.word	0x20000020
 8008a5c:	080089f1 	.word	0x080089f1
 8008a60:	20000030 	.word	0x20000030
 8008a64:	2000002c 	.word	0x2000002c

08008a68 <std>:
 8008a68:	2300      	movs	r3, #0
 8008a6a:	b510      	push	{r4, lr}
 8008a6c:	4604      	mov	r4, r0
 8008a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8008a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a76:	6083      	str	r3, [r0, #8]
 8008a78:	8181      	strh	r1, [r0, #12]
 8008a7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a7c:	81c2      	strh	r2, [r0, #14]
 8008a7e:	6183      	str	r3, [r0, #24]
 8008a80:	4619      	mov	r1, r3
 8008a82:	2208      	movs	r2, #8
 8008a84:	305c      	adds	r0, #92	@ 0x5c
 8008a86:	f000 fa45 	bl	8008f14 <memset>
 8008a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ac0 <std+0x58>)
 8008a8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ac4 <std+0x5c>)
 8008a90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a92:	4b0d      	ldr	r3, [pc, #52]	@ (8008ac8 <std+0x60>)
 8008a94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a96:	4b0d      	ldr	r3, [pc, #52]	@ (8008acc <std+0x64>)
 8008a98:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad0 <std+0x68>)
 8008a9c:	6224      	str	r4, [r4, #32]
 8008a9e:	429c      	cmp	r4, r3
 8008aa0:	d006      	beq.n	8008ab0 <std+0x48>
 8008aa2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008aa6:	4294      	cmp	r4, r2
 8008aa8:	d002      	beq.n	8008ab0 <std+0x48>
 8008aaa:	33d0      	adds	r3, #208	@ 0xd0
 8008aac:	429c      	cmp	r4, r3
 8008aae:	d105      	bne.n	8008abc <std+0x54>
 8008ab0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ab8:	f000 baba 	b.w	8009030 <__retarget_lock_init_recursive>
 8008abc:	bd10      	pop	{r4, pc}
 8008abe:	bf00      	nop
 8008ac0:	08008d61 	.word	0x08008d61
 8008ac4:	08008d87 	.word	0x08008d87
 8008ac8:	08008dbf 	.word	0x08008dbf
 8008acc:	08008de3 	.word	0x08008de3
 8008ad0:	20001094 	.word	0x20001094

08008ad4 <stdio_exit_handler>:
 8008ad4:	4a02      	ldr	r2, [pc, #8]	@ (8008ae0 <stdio_exit_handler+0xc>)
 8008ad6:	4903      	ldr	r1, [pc, #12]	@ (8008ae4 <stdio_exit_handler+0x10>)
 8008ad8:	4803      	ldr	r0, [pc, #12]	@ (8008ae8 <stdio_exit_handler+0x14>)
 8008ada:	f000 b869 	b.w	8008bb0 <_fwalk_sglue>
 8008ade:	bf00      	nop
 8008ae0:	20000020 	.word	0x20000020
 8008ae4:	080089f1 	.word	0x080089f1
 8008ae8:	20000030 	.word	0x20000030

08008aec <cleanup_stdio>:
 8008aec:	6841      	ldr	r1, [r0, #4]
 8008aee:	4b0c      	ldr	r3, [pc, #48]	@ (8008b20 <cleanup_stdio+0x34>)
 8008af0:	4299      	cmp	r1, r3
 8008af2:	b510      	push	{r4, lr}
 8008af4:	4604      	mov	r4, r0
 8008af6:	d001      	beq.n	8008afc <cleanup_stdio+0x10>
 8008af8:	f7ff ff7a 	bl	80089f0 <_fflush_r>
 8008afc:	68a1      	ldr	r1, [r4, #8]
 8008afe:	4b09      	ldr	r3, [pc, #36]	@ (8008b24 <cleanup_stdio+0x38>)
 8008b00:	4299      	cmp	r1, r3
 8008b02:	d002      	beq.n	8008b0a <cleanup_stdio+0x1e>
 8008b04:	4620      	mov	r0, r4
 8008b06:	f7ff ff73 	bl	80089f0 <_fflush_r>
 8008b0a:	68e1      	ldr	r1, [r4, #12]
 8008b0c:	4b06      	ldr	r3, [pc, #24]	@ (8008b28 <cleanup_stdio+0x3c>)
 8008b0e:	4299      	cmp	r1, r3
 8008b10:	d004      	beq.n	8008b1c <cleanup_stdio+0x30>
 8008b12:	4620      	mov	r0, r4
 8008b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b18:	f7ff bf6a 	b.w	80089f0 <_fflush_r>
 8008b1c:	bd10      	pop	{r4, pc}
 8008b1e:	bf00      	nop
 8008b20:	20001094 	.word	0x20001094
 8008b24:	200010fc 	.word	0x200010fc
 8008b28:	20001164 	.word	0x20001164

08008b2c <global_stdio_init.part.0>:
 8008b2c:	b510      	push	{r4, lr}
 8008b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8008b5c <global_stdio_init.part.0+0x30>)
 8008b30:	4c0b      	ldr	r4, [pc, #44]	@ (8008b60 <global_stdio_init.part.0+0x34>)
 8008b32:	4a0c      	ldr	r2, [pc, #48]	@ (8008b64 <global_stdio_init.part.0+0x38>)
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	4620      	mov	r0, r4
 8008b38:	2200      	movs	r2, #0
 8008b3a:	2104      	movs	r1, #4
 8008b3c:	f7ff ff94 	bl	8008a68 <std>
 8008b40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b44:	2201      	movs	r2, #1
 8008b46:	2109      	movs	r1, #9
 8008b48:	f7ff ff8e 	bl	8008a68 <std>
 8008b4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b50:	2202      	movs	r2, #2
 8008b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b56:	2112      	movs	r1, #18
 8008b58:	f7ff bf86 	b.w	8008a68 <std>
 8008b5c:	200011cc 	.word	0x200011cc
 8008b60:	20001094 	.word	0x20001094
 8008b64:	08008ad5 	.word	0x08008ad5

08008b68 <__sfp_lock_acquire>:
 8008b68:	4801      	ldr	r0, [pc, #4]	@ (8008b70 <__sfp_lock_acquire+0x8>)
 8008b6a:	f000 ba62 	b.w	8009032 <__retarget_lock_acquire_recursive>
 8008b6e:	bf00      	nop
 8008b70:	200011d5 	.word	0x200011d5

08008b74 <__sfp_lock_release>:
 8008b74:	4801      	ldr	r0, [pc, #4]	@ (8008b7c <__sfp_lock_release+0x8>)
 8008b76:	f000 ba5d 	b.w	8009034 <__retarget_lock_release_recursive>
 8008b7a:	bf00      	nop
 8008b7c:	200011d5 	.word	0x200011d5

08008b80 <__sinit>:
 8008b80:	b510      	push	{r4, lr}
 8008b82:	4604      	mov	r4, r0
 8008b84:	f7ff fff0 	bl	8008b68 <__sfp_lock_acquire>
 8008b88:	6a23      	ldr	r3, [r4, #32]
 8008b8a:	b11b      	cbz	r3, 8008b94 <__sinit+0x14>
 8008b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b90:	f7ff bff0 	b.w	8008b74 <__sfp_lock_release>
 8008b94:	4b04      	ldr	r3, [pc, #16]	@ (8008ba8 <__sinit+0x28>)
 8008b96:	6223      	str	r3, [r4, #32]
 8008b98:	4b04      	ldr	r3, [pc, #16]	@ (8008bac <__sinit+0x2c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1f5      	bne.n	8008b8c <__sinit+0xc>
 8008ba0:	f7ff ffc4 	bl	8008b2c <global_stdio_init.part.0>
 8008ba4:	e7f2      	b.n	8008b8c <__sinit+0xc>
 8008ba6:	bf00      	nop
 8008ba8:	08008aed 	.word	0x08008aed
 8008bac:	200011cc 	.word	0x200011cc

08008bb0 <_fwalk_sglue>:
 8008bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bb4:	4607      	mov	r7, r0
 8008bb6:	4688      	mov	r8, r1
 8008bb8:	4614      	mov	r4, r2
 8008bba:	2600      	movs	r6, #0
 8008bbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bc0:	f1b9 0901 	subs.w	r9, r9, #1
 8008bc4:	d505      	bpl.n	8008bd2 <_fwalk_sglue+0x22>
 8008bc6:	6824      	ldr	r4, [r4, #0]
 8008bc8:	2c00      	cmp	r4, #0
 8008bca:	d1f7      	bne.n	8008bbc <_fwalk_sglue+0xc>
 8008bcc:	4630      	mov	r0, r6
 8008bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bd2:	89ab      	ldrh	r3, [r5, #12]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d907      	bls.n	8008be8 <_fwalk_sglue+0x38>
 8008bd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	d003      	beq.n	8008be8 <_fwalk_sglue+0x38>
 8008be0:	4629      	mov	r1, r5
 8008be2:	4638      	mov	r0, r7
 8008be4:	47c0      	blx	r8
 8008be6:	4306      	orrs	r6, r0
 8008be8:	3568      	adds	r5, #104	@ 0x68
 8008bea:	e7e9      	b.n	8008bc0 <_fwalk_sglue+0x10>

08008bec <iprintf>:
 8008bec:	b40f      	push	{r0, r1, r2, r3}
 8008bee:	b507      	push	{r0, r1, r2, lr}
 8008bf0:	4906      	ldr	r1, [pc, #24]	@ (8008c0c <iprintf+0x20>)
 8008bf2:	ab04      	add	r3, sp, #16
 8008bf4:	6808      	ldr	r0, [r1, #0]
 8008bf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bfa:	6881      	ldr	r1, [r0, #8]
 8008bfc:	9301      	str	r3, [sp, #4]
 8008bfe:	f002 ff83 	bl	800bb08 <_vfiprintf_r>
 8008c02:	b003      	add	sp, #12
 8008c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c08:	b004      	add	sp, #16
 8008c0a:	4770      	bx	lr
 8008c0c:	2000002c 	.word	0x2000002c

08008c10 <_puts_r>:
 8008c10:	6a03      	ldr	r3, [r0, #32]
 8008c12:	b570      	push	{r4, r5, r6, lr}
 8008c14:	6884      	ldr	r4, [r0, #8]
 8008c16:	4605      	mov	r5, r0
 8008c18:	460e      	mov	r6, r1
 8008c1a:	b90b      	cbnz	r3, 8008c20 <_puts_r+0x10>
 8008c1c:	f7ff ffb0 	bl	8008b80 <__sinit>
 8008c20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c22:	07db      	lsls	r3, r3, #31
 8008c24:	d405      	bmi.n	8008c32 <_puts_r+0x22>
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	0598      	lsls	r0, r3, #22
 8008c2a:	d402      	bmi.n	8008c32 <_puts_r+0x22>
 8008c2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c2e:	f000 fa00 	bl	8009032 <__retarget_lock_acquire_recursive>
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	0719      	lsls	r1, r3, #28
 8008c36:	d502      	bpl.n	8008c3e <_puts_r+0x2e>
 8008c38:	6923      	ldr	r3, [r4, #16]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d135      	bne.n	8008caa <_puts_r+0x9a>
 8008c3e:	4621      	mov	r1, r4
 8008c40:	4628      	mov	r0, r5
 8008c42:	f000 f911 	bl	8008e68 <__swsetup_r>
 8008c46:	b380      	cbz	r0, 8008caa <_puts_r+0x9a>
 8008c48:	f04f 35ff 	mov.w	r5, #4294967295
 8008c4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c4e:	07da      	lsls	r2, r3, #31
 8008c50:	d405      	bmi.n	8008c5e <_puts_r+0x4e>
 8008c52:	89a3      	ldrh	r3, [r4, #12]
 8008c54:	059b      	lsls	r3, r3, #22
 8008c56:	d402      	bmi.n	8008c5e <_puts_r+0x4e>
 8008c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c5a:	f000 f9eb 	bl	8009034 <__retarget_lock_release_recursive>
 8008c5e:	4628      	mov	r0, r5
 8008c60:	bd70      	pop	{r4, r5, r6, pc}
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	da04      	bge.n	8008c70 <_puts_r+0x60>
 8008c66:	69a2      	ldr	r2, [r4, #24]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	dc17      	bgt.n	8008c9c <_puts_r+0x8c>
 8008c6c:	290a      	cmp	r1, #10
 8008c6e:	d015      	beq.n	8008c9c <_puts_r+0x8c>
 8008c70:	6823      	ldr	r3, [r4, #0]
 8008c72:	1c5a      	adds	r2, r3, #1
 8008c74:	6022      	str	r2, [r4, #0]
 8008c76:	7019      	strb	r1, [r3, #0]
 8008c78:	68a3      	ldr	r3, [r4, #8]
 8008c7a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	60a3      	str	r3, [r4, #8]
 8008c82:	2900      	cmp	r1, #0
 8008c84:	d1ed      	bne.n	8008c62 <_puts_r+0x52>
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	da11      	bge.n	8008cae <_puts_r+0x9e>
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	210a      	movs	r1, #10
 8008c8e:	4628      	mov	r0, r5
 8008c90:	f000 f8ab 	bl	8008dea <__swbuf_r>
 8008c94:	3001      	adds	r0, #1
 8008c96:	d0d7      	beq.n	8008c48 <_puts_r+0x38>
 8008c98:	250a      	movs	r5, #10
 8008c9a:	e7d7      	b.n	8008c4c <_puts_r+0x3c>
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	f000 f8a3 	bl	8008dea <__swbuf_r>
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	d1e7      	bne.n	8008c78 <_puts_r+0x68>
 8008ca8:	e7ce      	b.n	8008c48 <_puts_r+0x38>
 8008caa:	3e01      	subs	r6, #1
 8008cac:	e7e4      	b.n	8008c78 <_puts_r+0x68>
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	6022      	str	r2, [r4, #0]
 8008cb4:	220a      	movs	r2, #10
 8008cb6:	701a      	strb	r2, [r3, #0]
 8008cb8:	e7ee      	b.n	8008c98 <_puts_r+0x88>
	...

08008cbc <puts>:
 8008cbc:	4b02      	ldr	r3, [pc, #8]	@ (8008cc8 <puts+0xc>)
 8008cbe:	4601      	mov	r1, r0
 8008cc0:	6818      	ldr	r0, [r3, #0]
 8008cc2:	f7ff bfa5 	b.w	8008c10 <_puts_r>
 8008cc6:	bf00      	nop
 8008cc8:	2000002c 	.word	0x2000002c

08008ccc <siprintf>:
 8008ccc:	b40e      	push	{r1, r2, r3}
 8008cce:	b500      	push	{lr}
 8008cd0:	b09c      	sub	sp, #112	@ 0x70
 8008cd2:	ab1d      	add	r3, sp, #116	@ 0x74
 8008cd4:	9002      	str	r0, [sp, #8]
 8008cd6:	9006      	str	r0, [sp, #24]
 8008cd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008cdc:	4809      	ldr	r0, [pc, #36]	@ (8008d04 <siprintf+0x38>)
 8008cde:	9107      	str	r1, [sp, #28]
 8008ce0:	9104      	str	r1, [sp, #16]
 8008ce2:	4909      	ldr	r1, [pc, #36]	@ (8008d08 <siprintf+0x3c>)
 8008ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ce8:	9105      	str	r1, [sp, #20]
 8008cea:	6800      	ldr	r0, [r0, #0]
 8008cec:	9301      	str	r3, [sp, #4]
 8008cee:	a902      	add	r1, sp, #8
 8008cf0:	f002 fc18 	bl	800b524 <_svfiprintf_r>
 8008cf4:	9b02      	ldr	r3, [sp, #8]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	701a      	strb	r2, [r3, #0]
 8008cfa:	b01c      	add	sp, #112	@ 0x70
 8008cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d00:	b003      	add	sp, #12
 8008d02:	4770      	bx	lr
 8008d04:	2000002c 	.word	0x2000002c
 8008d08:	ffff0208 	.word	0xffff0208

08008d0c <siscanf>:
 8008d0c:	b40e      	push	{r1, r2, r3}
 8008d0e:	b530      	push	{r4, r5, lr}
 8008d10:	b09c      	sub	sp, #112	@ 0x70
 8008d12:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008d14:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008d18:	f854 5b04 	ldr.w	r5, [r4], #4
 8008d1c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008d20:	9002      	str	r0, [sp, #8]
 8008d22:	9006      	str	r0, [sp, #24]
 8008d24:	f7f7 faa4 	bl	8000270 <strlen>
 8008d28:	4b0b      	ldr	r3, [pc, #44]	@ (8008d58 <siscanf+0x4c>)
 8008d2a:	9003      	str	r0, [sp, #12]
 8008d2c:	9007      	str	r0, [sp, #28]
 8008d2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d30:	480a      	ldr	r0, [pc, #40]	@ (8008d5c <siscanf+0x50>)
 8008d32:	9401      	str	r4, [sp, #4]
 8008d34:	2300      	movs	r3, #0
 8008d36:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d38:	9314      	str	r3, [sp, #80]	@ 0x50
 8008d3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008d3e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008d42:	462a      	mov	r2, r5
 8008d44:	4623      	mov	r3, r4
 8008d46:	a902      	add	r1, sp, #8
 8008d48:	6800      	ldr	r0, [r0, #0]
 8008d4a:	f002 fd3f 	bl	800b7cc <__ssvfiscanf_r>
 8008d4e:	b01c      	add	sp, #112	@ 0x70
 8008d50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d54:	b003      	add	sp, #12
 8008d56:	4770      	bx	lr
 8008d58:	08008d83 	.word	0x08008d83
 8008d5c:	2000002c 	.word	0x2000002c

08008d60 <__sread>:
 8008d60:	b510      	push	{r4, lr}
 8008d62:	460c      	mov	r4, r1
 8008d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d68:	f000 f914 	bl	8008f94 <_read_r>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	bfab      	itete	ge
 8008d70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d72:	89a3      	ldrhlt	r3, [r4, #12]
 8008d74:	181b      	addge	r3, r3, r0
 8008d76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d7a:	bfac      	ite	ge
 8008d7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d7e:	81a3      	strhlt	r3, [r4, #12]
 8008d80:	bd10      	pop	{r4, pc}

08008d82 <__seofread>:
 8008d82:	2000      	movs	r0, #0
 8008d84:	4770      	bx	lr

08008d86 <__swrite>:
 8008d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8a:	461f      	mov	r7, r3
 8008d8c:	898b      	ldrh	r3, [r1, #12]
 8008d8e:	05db      	lsls	r3, r3, #23
 8008d90:	4605      	mov	r5, r0
 8008d92:	460c      	mov	r4, r1
 8008d94:	4616      	mov	r6, r2
 8008d96:	d505      	bpl.n	8008da4 <__swrite+0x1e>
 8008d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f000 f8e6 	bl	8008f70 <_lseek_r>
 8008da4:	89a3      	ldrh	r3, [r4, #12]
 8008da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008daa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008dae:	81a3      	strh	r3, [r4, #12]
 8008db0:	4632      	mov	r2, r6
 8008db2:	463b      	mov	r3, r7
 8008db4:	4628      	mov	r0, r5
 8008db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dba:	f000 b8fd 	b.w	8008fb8 <_write_r>

08008dbe <__sseek>:
 8008dbe:	b510      	push	{r4, lr}
 8008dc0:	460c      	mov	r4, r1
 8008dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc6:	f000 f8d3 	bl	8008f70 <_lseek_r>
 8008dca:	1c43      	adds	r3, r0, #1
 8008dcc:	89a3      	ldrh	r3, [r4, #12]
 8008dce:	bf15      	itete	ne
 8008dd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008dd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008dd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008dda:	81a3      	strheq	r3, [r4, #12]
 8008ddc:	bf18      	it	ne
 8008dde:	81a3      	strhne	r3, [r4, #12]
 8008de0:	bd10      	pop	{r4, pc}

08008de2 <__sclose>:
 8008de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008de6:	f000 b8b3 	b.w	8008f50 <_close_r>

08008dea <__swbuf_r>:
 8008dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dec:	460e      	mov	r6, r1
 8008dee:	4614      	mov	r4, r2
 8008df0:	4605      	mov	r5, r0
 8008df2:	b118      	cbz	r0, 8008dfc <__swbuf_r+0x12>
 8008df4:	6a03      	ldr	r3, [r0, #32]
 8008df6:	b90b      	cbnz	r3, 8008dfc <__swbuf_r+0x12>
 8008df8:	f7ff fec2 	bl	8008b80 <__sinit>
 8008dfc:	69a3      	ldr	r3, [r4, #24]
 8008dfe:	60a3      	str	r3, [r4, #8]
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	071a      	lsls	r2, r3, #28
 8008e04:	d501      	bpl.n	8008e0a <__swbuf_r+0x20>
 8008e06:	6923      	ldr	r3, [r4, #16]
 8008e08:	b943      	cbnz	r3, 8008e1c <__swbuf_r+0x32>
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	f000 f82b 	bl	8008e68 <__swsetup_r>
 8008e12:	b118      	cbz	r0, 8008e1c <__swbuf_r+0x32>
 8008e14:	f04f 37ff 	mov.w	r7, #4294967295
 8008e18:	4638      	mov	r0, r7
 8008e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	6922      	ldr	r2, [r4, #16]
 8008e20:	1a98      	subs	r0, r3, r2
 8008e22:	6963      	ldr	r3, [r4, #20]
 8008e24:	b2f6      	uxtb	r6, r6
 8008e26:	4283      	cmp	r3, r0
 8008e28:	4637      	mov	r7, r6
 8008e2a:	dc05      	bgt.n	8008e38 <__swbuf_r+0x4e>
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	4628      	mov	r0, r5
 8008e30:	f7ff fdde 	bl	80089f0 <_fflush_r>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	d1ed      	bne.n	8008e14 <__swbuf_r+0x2a>
 8008e38:	68a3      	ldr	r3, [r4, #8]
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	60a3      	str	r3, [r4, #8]
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	1c5a      	adds	r2, r3, #1
 8008e42:	6022      	str	r2, [r4, #0]
 8008e44:	701e      	strb	r6, [r3, #0]
 8008e46:	6962      	ldr	r2, [r4, #20]
 8008e48:	1c43      	adds	r3, r0, #1
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d004      	beq.n	8008e58 <__swbuf_r+0x6e>
 8008e4e:	89a3      	ldrh	r3, [r4, #12]
 8008e50:	07db      	lsls	r3, r3, #31
 8008e52:	d5e1      	bpl.n	8008e18 <__swbuf_r+0x2e>
 8008e54:	2e0a      	cmp	r6, #10
 8008e56:	d1df      	bne.n	8008e18 <__swbuf_r+0x2e>
 8008e58:	4621      	mov	r1, r4
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f7ff fdc8 	bl	80089f0 <_fflush_r>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d0d9      	beq.n	8008e18 <__swbuf_r+0x2e>
 8008e64:	e7d6      	b.n	8008e14 <__swbuf_r+0x2a>
	...

08008e68 <__swsetup_r>:
 8008e68:	b538      	push	{r3, r4, r5, lr}
 8008e6a:	4b29      	ldr	r3, [pc, #164]	@ (8008f10 <__swsetup_r+0xa8>)
 8008e6c:	4605      	mov	r5, r0
 8008e6e:	6818      	ldr	r0, [r3, #0]
 8008e70:	460c      	mov	r4, r1
 8008e72:	b118      	cbz	r0, 8008e7c <__swsetup_r+0x14>
 8008e74:	6a03      	ldr	r3, [r0, #32]
 8008e76:	b90b      	cbnz	r3, 8008e7c <__swsetup_r+0x14>
 8008e78:	f7ff fe82 	bl	8008b80 <__sinit>
 8008e7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e80:	0719      	lsls	r1, r3, #28
 8008e82:	d422      	bmi.n	8008eca <__swsetup_r+0x62>
 8008e84:	06da      	lsls	r2, r3, #27
 8008e86:	d407      	bmi.n	8008e98 <__swsetup_r+0x30>
 8008e88:	2209      	movs	r2, #9
 8008e8a:	602a      	str	r2, [r5, #0]
 8008e8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e90:	81a3      	strh	r3, [r4, #12]
 8008e92:	f04f 30ff 	mov.w	r0, #4294967295
 8008e96:	e033      	b.n	8008f00 <__swsetup_r+0x98>
 8008e98:	0758      	lsls	r0, r3, #29
 8008e9a:	d512      	bpl.n	8008ec2 <__swsetup_r+0x5a>
 8008e9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e9e:	b141      	cbz	r1, 8008eb2 <__swsetup_r+0x4a>
 8008ea0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ea4:	4299      	cmp	r1, r3
 8008ea6:	d002      	beq.n	8008eae <__swsetup_r+0x46>
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	f000 ff25 	bl	8009cf8 <_free_r>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008eb8:	81a3      	strh	r3, [r4, #12]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	6063      	str	r3, [r4, #4]
 8008ebe:	6923      	ldr	r3, [r4, #16]
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	f043 0308 	orr.w	r3, r3, #8
 8008ec8:	81a3      	strh	r3, [r4, #12]
 8008eca:	6923      	ldr	r3, [r4, #16]
 8008ecc:	b94b      	cbnz	r3, 8008ee2 <__swsetup_r+0x7a>
 8008ece:	89a3      	ldrh	r3, [r4, #12]
 8008ed0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ed8:	d003      	beq.n	8008ee2 <__swsetup_r+0x7a>
 8008eda:	4621      	mov	r1, r4
 8008edc:	4628      	mov	r0, r5
 8008ede:	f003 f89f 	bl	800c020 <__smakebuf_r>
 8008ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ee6:	f013 0201 	ands.w	r2, r3, #1
 8008eea:	d00a      	beq.n	8008f02 <__swsetup_r+0x9a>
 8008eec:	2200      	movs	r2, #0
 8008eee:	60a2      	str	r2, [r4, #8]
 8008ef0:	6962      	ldr	r2, [r4, #20]
 8008ef2:	4252      	negs	r2, r2
 8008ef4:	61a2      	str	r2, [r4, #24]
 8008ef6:	6922      	ldr	r2, [r4, #16]
 8008ef8:	b942      	cbnz	r2, 8008f0c <__swsetup_r+0xa4>
 8008efa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008efe:	d1c5      	bne.n	8008e8c <__swsetup_r+0x24>
 8008f00:	bd38      	pop	{r3, r4, r5, pc}
 8008f02:	0799      	lsls	r1, r3, #30
 8008f04:	bf58      	it	pl
 8008f06:	6962      	ldrpl	r2, [r4, #20]
 8008f08:	60a2      	str	r2, [r4, #8]
 8008f0a:	e7f4      	b.n	8008ef6 <__swsetup_r+0x8e>
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	e7f7      	b.n	8008f00 <__swsetup_r+0x98>
 8008f10:	2000002c 	.word	0x2000002c

08008f14 <memset>:
 8008f14:	4402      	add	r2, r0
 8008f16:	4603      	mov	r3, r0
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d100      	bne.n	8008f1e <memset+0xa>
 8008f1c:	4770      	bx	lr
 8008f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f22:	e7f9      	b.n	8008f18 <memset+0x4>

08008f24 <strncmp>:
 8008f24:	b510      	push	{r4, lr}
 8008f26:	b16a      	cbz	r2, 8008f44 <strncmp+0x20>
 8008f28:	3901      	subs	r1, #1
 8008f2a:	1884      	adds	r4, r0, r2
 8008f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f30:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d103      	bne.n	8008f40 <strncmp+0x1c>
 8008f38:	42a0      	cmp	r0, r4
 8008f3a:	d001      	beq.n	8008f40 <strncmp+0x1c>
 8008f3c:	2a00      	cmp	r2, #0
 8008f3e:	d1f5      	bne.n	8008f2c <strncmp+0x8>
 8008f40:	1ad0      	subs	r0, r2, r3
 8008f42:	bd10      	pop	{r4, pc}
 8008f44:	4610      	mov	r0, r2
 8008f46:	e7fc      	b.n	8008f42 <strncmp+0x1e>

08008f48 <_localeconv_r>:
 8008f48:	4800      	ldr	r0, [pc, #0]	@ (8008f4c <_localeconv_r+0x4>)
 8008f4a:	4770      	bx	lr
 8008f4c:	2000016c 	.word	0x2000016c

08008f50 <_close_r>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	4d06      	ldr	r5, [pc, #24]	@ (8008f6c <_close_r+0x1c>)
 8008f54:	2300      	movs	r3, #0
 8008f56:	4604      	mov	r4, r0
 8008f58:	4608      	mov	r0, r1
 8008f5a:	602b      	str	r3, [r5, #0]
 8008f5c:	f7f9 fda7 	bl	8002aae <_close>
 8008f60:	1c43      	adds	r3, r0, #1
 8008f62:	d102      	bne.n	8008f6a <_close_r+0x1a>
 8008f64:	682b      	ldr	r3, [r5, #0]
 8008f66:	b103      	cbz	r3, 8008f6a <_close_r+0x1a>
 8008f68:	6023      	str	r3, [r4, #0]
 8008f6a:	bd38      	pop	{r3, r4, r5, pc}
 8008f6c:	200011d0 	.word	0x200011d0

08008f70 <_lseek_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	4d07      	ldr	r5, [pc, #28]	@ (8008f90 <_lseek_r+0x20>)
 8008f74:	4604      	mov	r4, r0
 8008f76:	4608      	mov	r0, r1
 8008f78:	4611      	mov	r1, r2
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	602a      	str	r2, [r5, #0]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	f7f9 fdbc 	bl	8002afc <_lseek>
 8008f84:	1c43      	adds	r3, r0, #1
 8008f86:	d102      	bne.n	8008f8e <_lseek_r+0x1e>
 8008f88:	682b      	ldr	r3, [r5, #0]
 8008f8a:	b103      	cbz	r3, 8008f8e <_lseek_r+0x1e>
 8008f8c:	6023      	str	r3, [r4, #0]
 8008f8e:	bd38      	pop	{r3, r4, r5, pc}
 8008f90:	200011d0 	.word	0x200011d0

08008f94 <_read_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	4d07      	ldr	r5, [pc, #28]	@ (8008fb4 <_read_r+0x20>)
 8008f98:	4604      	mov	r4, r0
 8008f9a:	4608      	mov	r0, r1
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	602a      	str	r2, [r5, #0]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	f7f9 fd66 	bl	8002a74 <_read>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d102      	bne.n	8008fb2 <_read_r+0x1e>
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	b103      	cbz	r3, 8008fb2 <_read_r+0x1e>
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	bd38      	pop	{r3, r4, r5, pc}
 8008fb4:	200011d0 	.word	0x200011d0

08008fb8 <_write_r>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	4d07      	ldr	r5, [pc, #28]	@ (8008fd8 <_write_r+0x20>)
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	4608      	mov	r0, r1
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	602a      	str	r2, [r5, #0]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	f7f9 fb14 	bl	80025f4 <_write>
 8008fcc:	1c43      	adds	r3, r0, #1
 8008fce:	d102      	bne.n	8008fd6 <_write_r+0x1e>
 8008fd0:	682b      	ldr	r3, [r5, #0]
 8008fd2:	b103      	cbz	r3, 8008fd6 <_write_r+0x1e>
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	bd38      	pop	{r3, r4, r5, pc}
 8008fd8:	200011d0 	.word	0x200011d0

08008fdc <__errno>:
 8008fdc:	4b01      	ldr	r3, [pc, #4]	@ (8008fe4 <__errno+0x8>)
 8008fde:	6818      	ldr	r0, [r3, #0]
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	2000002c 	.word	0x2000002c

08008fe8 <__libc_init_array>:
 8008fe8:	b570      	push	{r4, r5, r6, lr}
 8008fea:	4d0d      	ldr	r5, [pc, #52]	@ (8009020 <__libc_init_array+0x38>)
 8008fec:	4c0d      	ldr	r4, [pc, #52]	@ (8009024 <__libc_init_array+0x3c>)
 8008fee:	1b64      	subs	r4, r4, r5
 8008ff0:	10a4      	asrs	r4, r4, #2
 8008ff2:	2600      	movs	r6, #0
 8008ff4:	42a6      	cmp	r6, r4
 8008ff6:	d109      	bne.n	800900c <__libc_init_array+0x24>
 8008ff8:	4d0b      	ldr	r5, [pc, #44]	@ (8009028 <__libc_init_array+0x40>)
 8008ffa:	4c0c      	ldr	r4, [pc, #48]	@ (800902c <__libc_init_array+0x44>)
 8008ffc:	f003 fe20 	bl	800cc40 <_init>
 8009000:	1b64      	subs	r4, r4, r5
 8009002:	10a4      	asrs	r4, r4, #2
 8009004:	2600      	movs	r6, #0
 8009006:	42a6      	cmp	r6, r4
 8009008:	d105      	bne.n	8009016 <__libc_init_array+0x2e>
 800900a:	bd70      	pop	{r4, r5, r6, pc}
 800900c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009010:	4798      	blx	r3
 8009012:	3601      	adds	r6, #1
 8009014:	e7ee      	b.n	8008ff4 <__libc_init_array+0xc>
 8009016:	f855 3b04 	ldr.w	r3, [r5], #4
 800901a:	4798      	blx	r3
 800901c:	3601      	adds	r6, #1
 800901e:	e7f2      	b.n	8009006 <__libc_init_array+0x1e>
 8009020:	0800d3c8 	.word	0x0800d3c8
 8009024:	0800d3c8 	.word	0x0800d3c8
 8009028:	0800d3c8 	.word	0x0800d3c8
 800902c:	0800d3cc 	.word	0x0800d3cc

08009030 <__retarget_lock_init_recursive>:
 8009030:	4770      	bx	lr

08009032 <__retarget_lock_acquire_recursive>:
 8009032:	4770      	bx	lr

08009034 <__retarget_lock_release_recursive>:
 8009034:	4770      	bx	lr

08009036 <memcpy>:
 8009036:	440a      	add	r2, r1
 8009038:	4291      	cmp	r1, r2
 800903a:	f100 33ff 	add.w	r3, r0, #4294967295
 800903e:	d100      	bne.n	8009042 <memcpy+0xc>
 8009040:	4770      	bx	lr
 8009042:	b510      	push	{r4, lr}
 8009044:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009048:	f803 4f01 	strb.w	r4, [r3, #1]!
 800904c:	4291      	cmp	r1, r2
 800904e:	d1f9      	bne.n	8009044 <memcpy+0xe>
 8009050:	bd10      	pop	{r4, pc}
	...

08009054 <nanf>:
 8009054:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800905c <nanf+0x8>
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	7fc00000 	.word	0x7fc00000

08009060 <quorem>:
 8009060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009064:	6903      	ldr	r3, [r0, #16]
 8009066:	690c      	ldr	r4, [r1, #16]
 8009068:	42a3      	cmp	r3, r4
 800906a:	4607      	mov	r7, r0
 800906c:	db7e      	blt.n	800916c <quorem+0x10c>
 800906e:	3c01      	subs	r4, #1
 8009070:	f101 0814 	add.w	r8, r1, #20
 8009074:	00a3      	lsls	r3, r4, #2
 8009076:	f100 0514 	add.w	r5, r0, #20
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009080:	9301      	str	r3, [sp, #4]
 8009082:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009086:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800908a:	3301      	adds	r3, #1
 800908c:	429a      	cmp	r2, r3
 800908e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009092:	fbb2 f6f3 	udiv	r6, r2, r3
 8009096:	d32e      	bcc.n	80090f6 <quorem+0x96>
 8009098:	f04f 0a00 	mov.w	sl, #0
 800909c:	46c4      	mov	ip, r8
 800909e:	46ae      	mov	lr, r5
 80090a0:	46d3      	mov	fp, sl
 80090a2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80090a6:	b298      	uxth	r0, r3
 80090a8:	fb06 a000 	mla	r0, r6, r0, sl
 80090ac:	0c02      	lsrs	r2, r0, #16
 80090ae:	0c1b      	lsrs	r3, r3, #16
 80090b0:	fb06 2303 	mla	r3, r6, r3, r2
 80090b4:	f8de 2000 	ldr.w	r2, [lr]
 80090b8:	b280      	uxth	r0, r0
 80090ba:	b292      	uxth	r2, r2
 80090bc:	1a12      	subs	r2, r2, r0
 80090be:	445a      	add	r2, fp
 80090c0:	f8de 0000 	ldr.w	r0, [lr]
 80090c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80090ce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80090d2:	b292      	uxth	r2, r2
 80090d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80090d8:	45e1      	cmp	r9, ip
 80090da:	f84e 2b04 	str.w	r2, [lr], #4
 80090de:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80090e2:	d2de      	bcs.n	80090a2 <quorem+0x42>
 80090e4:	9b00      	ldr	r3, [sp, #0]
 80090e6:	58eb      	ldr	r3, [r5, r3]
 80090e8:	b92b      	cbnz	r3, 80090f6 <quorem+0x96>
 80090ea:	9b01      	ldr	r3, [sp, #4]
 80090ec:	3b04      	subs	r3, #4
 80090ee:	429d      	cmp	r5, r3
 80090f0:	461a      	mov	r2, r3
 80090f2:	d32f      	bcc.n	8009154 <quorem+0xf4>
 80090f4:	613c      	str	r4, [r7, #16]
 80090f6:	4638      	mov	r0, r7
 80090f8:	f001 f9c2 	bl	800a480 <__mcmp>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	db25      	blt.n	800914c <quorem+0xec>
 8009100:	4629      	mov	r1, r5
 8009102:	2000      	movs	r0, #0
 8009104:	f858 2b04 	ldr.w	r2, [r8], #4
 8009108:	f8d1 c000 	ldr.w	ip, [r1]
 800910c:	fa1f fe82 	uxth.w	lr, r2
 8009110:	fa1f f38c 	uxth.w	r3, ip
 8009114:	eba3 030e 	sub.w	r3, r3, lr
 8009118:	4403      	add	r3, r0
 800911a:	0c12      	lsrs	r2, r2, #16
 800911c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009120:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009124:	b29b      	uxth	r3, r3
 8009126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800912a:	45c1      	cmp	r9, r8
 800912c:	f841 3b04 	str.w	r3, [r1], #4
 8009130:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009134:	d2e6      	bcs.n	8009104 <quorem+0xa4>
 8009136:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800913a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800913e:	b922      	cbnz	r2, 800914a <quorem+0xea>
 8009140:	3b04      	subs	r3, #4
 8009142:	429d      	cmp	r5, r3
 8009144:	461a      	mov	r2, r3
 8009146:	d30b      	bcc.n	8009160 <quorem+0x100>
 8009148:	613c      	str	r4, [r7, #16]
 800914a:	3601      	adds	r6, #1
 800914c:	4630      	mov	r0, r6
 800914e:	b003      	add	sp, #12
 8009150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009154:	6812      	ldr	r2, [r2, #0]
 8009156:	3b04      	subs	r3, #4
 8009158:	2a00      	cmp	r2, #0
 800915a:	d1cb      	bne.n	80090f4 <quorem+0x94>
 800915c:	3c01      	subs	r4, #1
 800915e:	e7c6      	b.n	80090ee <quorem+0x8e>
 8009160:	6812      	ldr	r2, [r2, #0]
 8009162:	3b04      	subs	r3, #4
 8009164:	2a00      	cmp	r2, #0
 8009166:	d1ef      	bne.n	8009148 <quorem+0xe8>
 8009168:	3c01      	subs	r4, #1
 800916a:	e7ea      	b.n	8009142 <quorem+0xe2>
 800916c:	2000      	movs	r0, #0
 800916e:	e7ee      	b.n	800914e <quorem+0xee>

08009170 <_dtoa_r>:
 8009170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009174:	69c7      	ldr	r7, [r0, #28]
 8009176:	b099      	sub	sp, #100	@ 0x64
 8009178:	ed8d 0b02 	vstr	d0, [sp, #8]
 800917c:	ec55 4b10 	vmov	r4, r5, d0
 8009180:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009182:	9109      	str	r1, [sp, #36]	@ 0x24
 8009184:	4683      	mov	fp, r0
 8009186:	920e      	str	r2, [sp, #56]	@ 0x38
 8009188:	9313      	str	r3, [sp, #76]	@ 0x4c
 800918a:	b97f      	cbnz	r7, 80091ac <_dtoa_r+0x3c>
 800918c:	2010      	movs	r0, #16
 800918e:	f000 fdfd 	bl	8009d8c <malloc>
 8009192:	4602      	mov	r2, r0
 8009194:	f8cb 001c 	str.w	r0, [fp, #28]
 8009198:	b920      	cbnz	r0, 80091a4 <_dtoa_r+0x34>
 800919a:	4ba7      	ldr	r3, [pc, #668]	@ (8009438 <_dtoa_r+0x2c8>)
 800919c:	21ef      	movs	r1, #239	@ 0xef
 800919e:	48a7      	ldr	r0, [pc, #668]	@ (800943c <_dtoa_r+0x2cc>)
 80091a0:	f003 f842 	bl	800c228 <__assert_func>
 80091a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80091a8:	6007      	str	r7, [r0, #0]
 80091aa:	60c7      	str	r7, [r0, #12]
 80091ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80091b0:	6819      	ldr	r1, [r3, #0]
 80091b2:	b159      	cbz	r1, 80091cc <_dtoa_r+0x5c>
 80091b4:	685a      	ldr	r2, [r3, #4]
 80091b6:	604a      	str	r2, [r1, #4]
 80091b8:	2301      	movs	r3, #1
 80091ba:	4093      	lsls	r3, r2
 80091bc:	608b      	str	r3, [r1, #8]
 80091be:	4658      	mov	r0, fp
 80091c0:	f000 feda 	bl	8009f78 <_Bfree>
 80091c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80091c8:	2200      	movs	r2, #0
 80091ca:	601a      	str	r2, [r3, #0]
 80091cc:	1e2b      	subs	r3, r5, #0
 80091ce:	bfb9      	ittee	lt
 80091d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80091d4:	9303      	strlt	r3, [sp, #12]
 80091d6:	2300      	movge	r3, #0
 80091d8:	6033      	strge	r3, [r6, #0]
 80091da:	9f03      	ldr	r7, [sp, #12]
 80091dc:	4b98      	ldr	r3, [pc, #608]	@ (8009440 <_dtoa_r+0x2d0>)
 80091de:	bfbc      	itt	lt
 80091e0:	2201      	movlt	r2, #1
 80091e2:	6032      	strlt	r2, [r6, #0]
 80091e4:	43bb      	bics	r3, r7
 80091e6:	d112      	bne.n	800920e <_dtoa_r+0x9e>
 80091e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80091ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80091ee:	6013      	str	r3, [r2, #0]
 80091f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80091f4:	4323      	orrs	r3, r4
 80091f6:	f000 854d 	beq.w	8009c94 <_dtoa_r+0xb24>
 80091fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009454 <_dtoa_r+0x2e4>
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 854f 	beq.w	8009ca4 <_dtoa_r+0xb34>
 8009206:	f10a 0303 	add.w	r3, sl, #3
 800920a:	f000 bd49 	b.w	8009ca0 <_dtoa_r+0xb30>
 800920e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009212:	2200      	movs	r2, #0
 8009214:	ec51 0b17 	vmov	r0, r1, d7
 8009218:	2300      	movs	r3, #0
 800921a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800921e:	f7f7 fc53 	bl	8000ac8 <__aeabi_dcmpeq>
 8009222:	4680      	mov	r8, r0
 8009224:	b158      	cbz	r0, 800923e <_dtoa_r+0xce>
 8009226:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009228:	2301      	movs	r3, #1
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800922e:	b113      	cbz	r3, 8009236 <_dtoa_r+0xc6>
 8009230:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009232:	4b84      	ldr	r3, [pc, #528]	@ (8009444 <_dtoa_r+0x2d4>)
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009458 <_dtoa_r+0x2e8>
 800923a:	f000 bd33 	b.w	8009ca4 <_dtoa_r+0xb34>
 800923e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009242:	aa16      	add	r2, sp, #88	@ 0x58
 8009244:	a917      	add	r1, sp, #92	@ 0x5c
 8009246:	4658      	mov	r0, fp
 8009248:	f001 fa3a 	bl	800a6c0 <__d2b>
 800924c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009250:	4681      	mov	r9, r0
 8009252:	2e00      	cmp	r6, #0
 8009254:	d077      	beq.n	8009346 <_dtoa_r+0x1d6>
 8009256:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009258:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800925c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009260:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009264:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009268:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800926c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009270:	4619      	mov	r1, r3
 8009272:	2200      	movs	r2, #0
 8009274:	4b74      	ldr	r3, [pc, #464]	@ (8009448 <_dtoa_r+0x2d8>)
 8009276:	f7f7 f807 	bl	8000288 <__aeabi_dsub>
 800927a:	a369      	add	r3, pc, #420	@ (adr r3, 8009420 <_dtoa_r+0x2b0>)
 800927c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009280:	f7f7 f9ba 	bl	80005f8 <__aeabi_dmul>
 8009284:	a368      	add	r3, pc, #416	@ (adr r3, 8009428 <_dtoa_r+0x2b8>)
 8009286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928a:	f7f6 ffff 	bl	800028c <__adddf3>
 800928e:	4604      	mov	r4, r0
 8009290:	4630      	mov	r0, r6
 8009292:	460d      	mov	r5, r1
 8009294:	f7f7 f946 	bl	8000524 <__aeabi_i2d>
 8009298:	a365      	add	r3, pc, #404	@ (adr r3, 8009430 <_dtoa_r+0x2c0>)
 800929a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929e:	f7f7 f9ab 	bl	80005f8 <__aeabi_dmul>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	4620      	mov	r0, r4
 80092a8:	4629      	mov	r1, r5
 80092aa:	f7f6 ffef 	bl	800028c <__adddf3>
 80092ae:	4604      	mov	r4, r0
 80092b0:	460d      	mov	r5, r1
 80092b2:	f7f7 fc51 	bl	8000b58 <__aeabi_d2iz>
 80092b6:	2200      	movs	r2, #0
 80092b8:	4607      	mov	r7, r0
 80092ba:	2300      	movs	r3, #0
 80092bc:	4620      	mov	r0, r4
 80092be:	4629      	mov	r1, r5
 80092c0:	f7f7 fc0c 	bl	8000adc <__aeabi_dcmplt>
 80092c4:	b140      	cbz	r0, 80092d8 <_dtoa_r+0x168>
 80092c6:	4638      	mov	r0, r7
 80092c8:	f7f7 f92c 	bl	8000524 <__aeabi_i2d>
 80092cc:	4622      	mov	r2, r4
 80092ce:	462b      	mov	r3, r5
 80092d0:	f7f7 fbfa 	bl	8000ac8 <__aeabi_dcmpeq>
 80092d4:	b900      	cbnz	r0, 80092d8 <_dtoa_r+0x168>
 80092d6:	3f01      	subs	r7, #1
 80092d8:	2f16      	cmp	r7, #22
 80092da:	d851      	bhi.n	8009380 <_dtoa_r+0x210>
 80092dc:	4b5b      	ldr	r3, [pc, #364]	@ (800944c <_dtoa_r+0x2dc>)
 80092de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092ea:	f7f7 fbf7 	bl	8000adc <__aeabi_dcmplt>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d048      	beq.n	8009384 <_dtoa_r+0x214>
 80092f2:	3f01      	subs	r7, #1
 80092f4:	2300      	movs	r3, #0
 80092f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80092f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80092fa:	1b9b      	subs	r3, r3, r6
 80092fc:	1e5a      	subs	r2, r3, #1
 80092fe:	bf44      	itt	mi
 8009300:	f1c3 0801 	rsbmi	r8, r3, #1
 8009304:	2300      	movmi	r3, #0
 8009306:	9208      	str	r2, [sp, #32]
 8009308:	bf54      	ite	pl
 800930a:	f04f 0800 	movpl.w	r8, #0
 800930e:	9308      	strmi	r3, [sp, #32]
 8009310:	2f00      	cmp	r7, #0
 8009312:	db39      	blt.n	8009388 <_dtoa_r+0x218>
 8009314:	9b08      	ldr	r3, [sp, #32]
 8009316:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009318:	443b      	add	r3, r7
 800931a:	9308      	str	r3, [sp, #32]
 800931c:	2300      	movs	r3, #0
 800931e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009322:	2b09      	cmp	r3, #9
 8009324:	d864      	bhi.n	80093f0 <_dtoa_r+0x280>
 8009326:	2b05      	cmp	r3, #5
 8009328:	bfc4      	itt	gt
 800932a:	3b04      	subgt	r3, #4
 800932c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800932e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009330:	f1a3 0302 	sub.w	r3, r3, #2
 8009334:	bfcc      	ite	gt
 8009336:	2400      	movgt	r4, #0
 8009338:	2401      	movle	r4, #1
 800933a:	2b03      	cmp	r3, #3
 800933c:	d863      	bhi.n	8009406 <_dtoa_r+0x296>
 800933e:	e8df f003 	tbb	[pc, r3]
 8009342:	372a      	.short	0x372a
 8009344:	5535      	.short	0x5535
 8009346:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800934a:	441e      	add	r6, r3
 800934c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009350:	2b20      	cmp	r3, #32
 8009352:	bfc1      	itttt	gt
 8009354:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009358:	409f      	lslgt	r7, r3
 800935a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800935e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009362:	bfd6      	itet	le
 8009364:	f1c3 0320 	rsble	r3, r3, #32
 8009368:	ea47 0003 	orrgt.w	r0, r7, r3
 800936c:	fa04 f003 	lslle.w	r0, r4, r3
 8009370:	f7f7 f8c8 	bl	8000504 <__aeabi_ui2d>
 8009374:	2201      	movs	r2, #1
 8009376:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800937a:	3e01      	subs	r6, #1
 800937c:	9214      	str	r2, [sp, #80]	@ 0x50
 800937e:	e777      	b.n	8009270 <_dtoa_r+0x100>
 8009380:	2301      	movs	r3, #1
 8009382:	e7b8      	b.n	80092f6 <_dtoa_r+0x186>
 8009384:	9012      	str	r0, [sp, #72]	@ 0x48
 8009386:	e7b7      	b.n	80092f8 <_dtoa_r+0x188>
 8009388:	427b      	negs	r3, r7
 800938a:	930a      	str	r3, [sp, #40]	@ 0x28
 800938c:	2300      	movs	r3, #0
 800938e:	eba8 0807 	sub.w	r8, r8, r7
 8009392:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009394:	e7c4      	b.n	8009320 <_dtoa_r+0x1b0>
 8009396:	2300      	movs	r3, #0
 8009398:	930b      	str	r3, [sp, #44]	@ 0x2c
 800939a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800939c:	2b00      	cmp	r3, #0
 800939e:	dc35      	bgt.n	800940c <_dtoa_r+0x29c>
 80093a0:	2301      	movs	r3, #1
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	9307      	str	r3, [sp, #28]
 80093a6:	461a      	mov	r2, r3
 80093a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80093aa:	e00b      	b.n	80093c4 <_dtoa_r+0x254>
 80093ac:	2301      	movs	r3, #1
 80093ae:	e7f3      	b.n	8009398 <_dtoa_r+0x228>
 80093b0:	2300      	movs	r3, #0
 80093b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093b6:	18fb      	adds	r3, r7, r3
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	3301      	adds	r3, #1
 80093bc:	2b01      	cmp	r3, #1
 80093be:	9307      	str	r3, [sp, #28]
 80093c0:	bfb8      	it	lt
 80093c2:	2301      	movlt	r3, #1
 80093c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80093c8:	2100      	movs	r1, #0
 80093ca:	2204      	movs	r2, #4
 80093cc:	f102 0514 	add.w	r5, r2, #20
 80093d0:	429d      	cmp	r5, r3
 80093d2:	d91f      	bls.n	8009414 <_dtoa_r+0x2a4>
 80093d4:	6041      	str	r1, [r0, #4]
 80093d6:	4658      	mov	r0, fp
 80093d8:	f000 fd8e 	bl	8009ef8 <_Balloc>
 80093dc:	4682      	mov	sl, r0
 80093de:	2800      	cmp	r0, #0
 80093e0:	d13c      	bne.n	800945c <_dtoa_r+0x2ec>
 80093e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009450 <_dtoa_r+0x2e0>)
 80093e4:	4602      	mov	r2, r0
 80093e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80093ea:	e6d8      	b.n	800919e <_dtoa_r+0x2e>
 80093ec:	2301      	movs	r3, #1
 80093ee:	e7e0      	b.n	80093b2 <_dtoa_r+0x242>
 80093f0:	2401      	movs	r4, #1
 80093f2:	2300      	movs	r3, #0
 80093f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80093f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80093f8:	f04f 33ff 	mov.w	r3, #4294967295
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	9307      	str	r3, [sp, #28]
 8009400:	2200      	movs	r2, #0
 8009402:	2312      	movs	r3, #18
 8009404:	e7d0      	b.n	80093a8 <_dtoa_r+0x238>
 8009406:	2301      	movs	r3, #1
 8009408:	930b      	str	r3, [sp, #44]	@ 0x2c
 800940a:	e7f5      	b.n	80093f8 <_dtoa_r+0x288>
 800940c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	9307      	str	r3, [sp, #28]
 8009412:	e7d7      	b.n	80093c4 <_dtoa_r+0x254>
 8009414:	3101      	adds	r1, #1
 8009416:	0052      	lsls	r2, r2, #1
 8009418:	e7d8      	b.n	80093cc <_dtoa_r+0x25c>
 800941a:	bf00      	nop
 800941c:	f3af 8000 	nop.w
 8009420:	636f4361 	.word	0x636f4361
 8009424:	3fd287a7 	.word	0x3fd287a7
 8009428:	8b60c8b3 	.word	0x8b60c8b3
 800942c:	3fc68a28 	.word	0x3fc68a28
 8009430:	509f79fb 	.word	0x509f79fb
 8009434:	3fd34413 	.word	0x3fd34413
 8009438:	0800d0bd 	.word	0x0800d0bd
 800943c:	0800d0d4 	.word	0x0800d0d4
 8009440:	7ff00000 	.word	0x7ff00000
 8009444:	0800d318 	.word	0x0800d318
 8009448:	3ff80000 	.word	0x3ff80000
 800944c:	0800d1d0 	.word	0x0800d1d0
 8009450:	0800d12c 	.word	0x0800d12c
 8009454:	0800d0b9 	.word	0x0800d0b9
 8009458:	0800d317 	.word	0x0800d317
 800945c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009460:	6018      	str	r0, [r3, #0]
 8009462:	9b07      	ldr	r3, [sp, #28]
 8009464:	2b0e      	cmp	r3, #14
 8009466:	f200 80a4 	bhi.w	80095b2 <_dtoa_r+0x442>
 800946a:	2c00      	cmp	r4, #0
 800946c:	f000 80a1 	beq.w	80095b2 <_dtoa_r+0x442>
 8009470:	2f00      	cmp	r7, #0
 8009472:	dd33      	ble.n	80094dc <_dtoa_r+0x36c>
 8009474:	4bad      	ldr	r3, [pc, #692]	@ (800972c <_dtoa_r+0x5bc>)
 8009476:	f007 020f 	and.w	r2, r7, #15
 800947a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800947e:	ed93 7b00 	vldr	d7, [r3]
 8009482:	05f8      	lsls	r0, r7, #23
 8009484:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009488:	ea4f 1427 	mov.w	r4, r7, asr #4
 800948c:	d516      	bpl.n	80094bc <_dtoa_r+0x34c>
 800948e:	4ba8      	ldr	r3, [pc, #672]	@ (8009730 <_dtoa_r+0x5c0>)
 8009490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009494:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009498:	f7f7 f9d8 	bl	800084c <__aeabi_ddiv>
 800949c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094a0:	f004 040f 	and.w	r4, r4, #15
 80094a4:	2603      	movs	r6, #3
 80094a6:	4da2      	ldr	r5, [pc, #648]	@ (8009730 <_dtoa_r+0x5c0>)
 80094a8:	b954      	cbnz	r4, 80094c0 <_dtoa_r+0x350>
 80094aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094b2:	f7f7 f9cb 	bl	800084c <__aeabi_ddiv>
 80094b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094ba:	e028      	b.n	800950e <_dtoa_r+0x39e>
 80094bc:	2602      	movs	r6, #2
 80094be:	e7f2      	b.n	80094a6 <_dtoa_r+0x336>
 80094c0:	07e1      	lsls	r1, r4, #31
 80094c2:	d508      	bpl.n	80094d6 <_dtoa_r+0x366>
 80094c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80094cc:	f7f7 f894 	bl	80005f8 <__aeabi_dmul>
 80094d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094d4:	3601      	adds	r6, #1
 80094d6:	1064      	asrs	r4, r4, #1
 80094d8:	3508      	adds	r5, #8
 80094da:	e7e5      	b.n	80094a8 <_dtoa_r+0x338>
 80094dc:	f000 80d2 	beq.w	8009684 <_dtoa_r+0x514>
 80094e0:	427c      	negs	r4, r7
 80094e2:	4b92      	ldr	r3, [pc, #584]	@ (800972c <_dtoa_r+0x5bc>)
 80094e4:	4d92      	ldr	r5, [pc, #584]	@ (8009730 <_dtoa_r+0x5c0>)
 80094e6:	f004 020f 	and.w	r2, r4, #15
 80094ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094f6:	f7f7 f87f 	bl	80005f8 <__aeabi_dmul>
 80094fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094fe:	1124      	asrs	r4, r4, #4
 8009500:	2300      	movs	r3, #0
 8009502:	2602      	movs	r6, #2
 8009504:	2c00      	cmp	r4, #0
 8009506:	f040 80b2 	bne.w	800966e <_dtoa_r+0x4fe>
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1d3      	bne.n	80094b6 <_dtoa_r+0x346>
 800950e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009510:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 80b7 	beq.w	8009688 <_dtoa_r+0x518>
 800951a:	4b86      	ldr	r3, [pc, #536]	@ (8009734 <_dtoa_r+0x5c4>)
 800951c:	2200      	movs	r2, #0
 800951e:	4620      	mov	r0, r4
 8009520:	4629      	mov	r1, r5
 8009522:	f7f7 fadb 	bl	8000adc <__aeabi_dcmplt>
 8009526:	2800      	cmp	r0, #0
 8009528:	f000 80ae 	beq.w	8009688 <_dtoa_r+0x518>
 800952c:	9b07      	ldr	r3, [sp, #28]
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 80aa 	beq.w	8009688 <_dtoa_r+0x518>
 8009534:	9b00      	ldr	r3, [sp, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	dd37      	ble.n	80095aa <_dtoa_r+0x43a>
 800953a:	1e7b      	subs	r3, r7, #1
 800953c:	9304      	str	r3, [sp, #16]
 800953e:	4620      	mov	r0, r4
 8009540:	4b7d      	ldr	r3, [pc, #500]	@ (8009738 <_dtoa_r+0x5c8>)
 8009542:	2200      	movs	r2, #0
 8009544:	4629      	mov	r1, r5
 8009546:	f7f7 f857 	bl	80005f8 <__aeabi_dmul>
 800954a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800954e:	9c00      	ldr	r4, [sp, #0]
 8009550:	3601      	adds	r6, #1
 8009552:	4630      	mov	r0, r6
 8009554:	f7f6 ffe6 	bl	8000524 <__aeabi_i2d>
 8009558:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800955c:	f7f7 f84c 	bl	80005f8 <__aeabi_dmul>
 8009560:	4b76      	ldr	r3, [pc, #472]	@ (800973c <_dtoa_r+0x5cc>)
 8009562:	2200      	movs	r2, #0
 8009564:	f7f6 fe92 	bl	800028c <__adddf3>
 8009568:	4605      	mov	r5, r0
 800956a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800956e:	2c00      	cmp	r4, #0
 8009570:	f040 808d 	bne.w	800968e <_dtoa_r+0x51e>
 8009574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009578:	4b71      	ldr	r3, [pc, #452]	@ (8009740 <_dtoa_r+0x5d0>)
 800957a:	2200      	movs	r2, #0
 800957c:	f7f6 fe84 	bl	8000288 <__aeabi_dsub>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009588:	462a      	mov	r2, r5
 800958a:	4633      	mov	r3, r6
 800958c:	f7f7 fac4 	bl	8000b18 <__aeabi_dcmpgt>
 8009590:	2800      	cmp	r0, #0
 8009592:	f040 828b 	bne.w	8009aac <_dtoa_r+0x93c>
 8009596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800959a:	462a      	mov	r2, r5
 800959c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80095a0:	f7f7 fa9c 	bl	8000adc <__aeabi_dcmplt>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	f040 8128 	bne.w	80097fa <_dtoa_r+0x68a>
 80095aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80095ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80095b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f2c0 815a 	blt.w	800986e <_dtoa_r+0x6fe>
 80095ba:	2f0e      	cmp	r7, #14
 80095bc:	f300 8157 	bgt.w	800986e <_dtoa_r+0x6fe>
 80095c0:	4b5a      	ldr	r3, [pc, #360]	@ (800972c <_dtoa_r+0x5bc>)
 80095c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095c6:	ed93 7b00 	vldr	d7, [r3]
 80095ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	ed8d 7b00 	vstr	d7, [sp]
 80095d2:	da03      	bge.n	80095dc <_dtoa_r+0x46c>
 80095d4:	9b07      	ldr	r3, [sp, #28]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f340 8101 	ble.w	80097de <_dtoa_r+0x66e>
 80095dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80095e0:	4656      	mov	r6, sl
 80095e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095e6:	4620      	mov	r0, r4
 80095e8:	4629      	mov	r1, r5
 80095ea:	f7f7 f92f 	bl	800084c <__aeabi_ddiv>
 80095ee:	f7f7 fab3 	bl	8000b58 <__aeabi_d2iz>
 80095f2:	4680      	mov	r8, r0
 80095f4:	f7f6 ff96 	bl	8000524 <__aeabi_i2d>
 80095f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095fc:	f7f6 fffc 	bl	80005f8 <__aeabi_dmul>
 8009600:	4602      	mov	r2, r0
 8009602:	460b      	mov	r3, r1
 8009604:	4620      	mov	r0, r4
 8009606:	4629      	mov	r1, r5
 8009608:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800960c:	f7f6 fe3c 	bl	8000288 <__aeabi_dsub>
 8009610:	f806 4b01 	strb.w	r4, [r6], #1
 8009614:	9d07      	ldr	r5, [sp, #28]
 8009616:	eba6 040a 	sub.w	r4, r6, sl
 800961a:	42a5      	cmp	r5, r4
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	f040 8117 	bne.w	8009852 <_dtoa_r+0x6e2>
 8009624:	f7f6 fe32 	bl	800028c <__adddf3>
 8009628:	e9dd 2300 	ldrd	r2, r3, [sp]
 800962c:	4604      	mov	r4, r0
 800962e:	460d      	mov	r5, r1
 8009630:	f7f7 fa72 	bl	8000b18 <__aeabi_dcmpgt>
 8009634:	2800      	cmp	r0, #0
 8009636:	f040 80f9 	bne.w	800982c <_dtoa_r+0x6bc>
 800963a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800963e:	4620      	mov	r0, r4
 8009640:	4629      	mov	r1, r5
 8009642:	f7f7 fa41 	bl	8000ac8 <__aeabi_dcmpeq>
 8009646:	b118      	cbz	r0, 8009650 <_dtoa_r+0x4e0>
 8009648:	f018 0f01 	tst.w	r8, #1
 800964c:	f040 80ee 	bne.w	800982c <_dtoa_r+0x6bc>
 8009650:	4649      	mov	r1, r9
 8009652:	4658      	mov	r0, fp
 8009654:	f000 fc90 	bl	8009f78 <_Bfree>
 8009658:	2300      	movs	r3, #0
 800965a:	7033      	strb	r3, [r6, #0]
 800965c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800965e:	3701      	adds	r7, #1
 8009660:	601f      	str	r7, [r3, #0]
 8009662:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009664:	2b00      	cmp	r3, #0
 8009666:	f000 831d 	beq.w	8009ca4 <_dtoa_r+0xb34>
 800966a:	601e      	str	r6, [r3, #0]
 800966c:	e31a      	b.n	8009ca4 <_dtoa_r+0xb34>
 800966e:	07e2      	lsls	r2, r4, #31
 8009670:	d505      	bpl.n	800967e <_dtoa_r+0x50e>
 8009672:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009676:	f7f6 ffbf 	bl	80005f8 <__aeabi_dmul>
 800967a:	3601      	adds	r6, #1
 800967c:	2301      	movs	r3, #1
 800967e:	1064      	asrs	r4, r4, #1
 8009680:	3508      	adds	r5, #8
 8009682:	e73f      	b.n	8009504 <_dtoa_r+0x394>
 8009684:	2602      	movs	r6, #2
 8009686:	e742      	b.n	800950e <_dtoa_r+0x39e>
 8009688:	9c07      	ldr	r4, [sp, #28]
 800968a:	9704      	str	r7, [sp, #16]
 800968c:	e761      	b.n	8009552 <_dtoa_r+0x3e2>
 800968e:	4b27      	ldr	r3, [pc, #156]	@ (800972c <_dtoa_r+0x5bc>)
 8009690:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009692:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009696:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800969a:	4454      	add	r4, sl
 800969c:	2900      	cmp	r1, #0
 800969e:	d053      	beq.n	8009748 <_dtoa_r+0x5d8>
 80096a0:	4928      	ldr	r1, [pc, #160]	@ (8009744 <_dtoa_r+0x5d4>)
 80096a2:	2000      	movs	r0, #0
 80096a4:	f7f7 f8d2 	bl	800084c <__aeabi_ddiv>
 80096a8:	4633      	mov	r3, r6
 80096aa:	462a      	mov	r2, r5
 80096ac:	f7f6 fdec 	bl	8000288 <__aeabi_dsub>
 80096b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80096b4:	4656      	mov	r6, sl
 80096b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096ba:	f7f7 fa4d 	bl	8000b58 <__aeabi_d2iz>
 80096be:	4605      	mov	r5, r0
 80096c0:	f7f6 ff30 	bl	8000524 <__aeabi_i2d>
 80096c4:	4602      	mov	r2, r0
 80096c6:	460b      	mov	r3, r1
 80096c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096cc:	f7f6 fddc 	bl	8000288 <__aeabi_dsub>
 80096d0:	3530      	adds	r5, #48	@ 0x30
 80096d2:	4602      	mov	r2, r0
 80096d4:	460b      	mov	r3, r1
 80096d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096da:	f806 5b01 	strb.w	r5, [r6], #1
 80096de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096e2:	f7f7 f9fb 	bl	8000adc <__aeabi_dcmplt>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d171      	bne.n	80097ce <_dtoa_r+0x65e>
 80096ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096ee:	4911      	ldr	r1, [pc, #68]	@ (8009734 <_dtoa_r+0x5c4>)
 80096f0:	2000      	movs	r0, #0
 80096f2:	f7f6 fdc9 	bl	8000288 <__aeabi_dsub>
 80096f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096fa:	f7f7 f9ef 	bl	8000adc <__aeabi_dcmplt>
 80096fe:	2800      	cmp	r0, #0
 8009700:	f040 8095 	bne.w	800982e <_dtoa_r+0x6be>
 8009704:	42a6      	cmp	r6, r4
 8009706:	f43f af50 	beq.w	80095aa <_dtoa_r+0x43a>
 800970a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800970e:	4b0a      	ldr	r3, [pc, #40]	@ (8009738 <_dtoa_r+0x5c8>)
 8009710:	2200      	movs	r2, #0
 8009712:	f7f6 ff71 	bl	80005f8 <__aeabi_dmul>
 8009716:	4b08      	ldr	r3, [pc, #32]	@ (8009738 <_dtoa_r+0x5c8>)
 8009718:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800971c:	2200      	movs	r2, #0
 800971e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009722:	f7f6 ff69 	bl	80005f8 <__aeabi_dmul>
 8009726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800972a:	e7c4      	b.n	80096b6 <_dtoa_r+0x546>
 800972c:	0800d1d0 	.word	0x0800d1d0
 8009730:	0800d1a8 	.word	0x0800d1a8
 8009734:	3ff00000 	.word	0x3ff00000
 8009738:	40240000 	.word	0x40240000
 800973c:	401c0000 	.word	0x401c0000
 8009740:	40140000 	.word	0x40140000
 8009744:	3fe00000 	.word	0x3fe00000
 8009748:	4631      	mov	r1, r6
 800974a:	4628      	mov	r0, r5
 800974c:	f7f6 ff54 	bl	80005f8 <__aeabi_dmul>
 8009750:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009754:	9415      	str	r4, [sp, #84]	@ 0x54
 8009756:	4656      	mov	r6, sl
 8009758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800975c:	f7f7 f9fc 	bl	8000b58 <__aeabi_d2iz>
 8009760:	4605      	mov	r5, r0
 8009762:	f7f6 fedf 	bl	8000524 <__aeabi_i2d>
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800976e:	f7f6 fd8b 	bl	8000288 <__aeabi_dsub>
 8009772:	3530      	adds	r5, #48	@ 0x30
 8009774:	f806 5b01 	strb.w	r5, [r6], #1
 8009778:	4602      	mov	r2, r0
 800977a:	460b      	mov	r3, r1
 800977c:	42a6      	cmp	r6, r4
 800977e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009782:	f04f 0200 	mov.w	r2, #0
 8009786:	d124      	bne.n	80097d2 <_dtoa_r+0x662>
 8009788:	4bac      	ldr	r3, [pc, #688]	@ (8009a3c <_dtoa_r+0x8cc>)
 800978a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800978e:	f7f6 fd7d 	bl	800028c <__adddf3>
 8009792:	4602      	mov	r2, r0
 8009794:	460b      	mov	r3, r1
 8009796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800979a:	f7f7 f9bd 	bl	8000b18 <__aeabi_dcmpgt>
 800979e:	2800      	cmp	r0, #0
 80097a0:	d145      	bne.n	800982e <_dtoa_r+0x6be>
 80097a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80097a6:	49a5      	ldr	r1, [pc, #660]	@ (8009a3c <_dtoa_r+0x8cc>)
 80097a8:	2000      	movs	r0, #0
 80097aa:	f7f6 fd6d 	bl	8000288 <__aeabi_dsub>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097b6:	f7f7 f991 	bl	8000adc <__aeabi_dcmplt>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	f43f aef5 	beq.w	80095aa <_dtoa_r+0x43a>
 80097c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80097c2:	1e73      	subs	r3, r6, #1
 80097c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80097c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80097ca:	2b30      	cmp	r3, #48	@ 0x30
 80097cc:	d0f8      	beq.n	80097c0 <_dtoa_r+0x650>
 80097ce:	9f04      	ldr	r7, [sp, #16]
 80097d0:	e73e      	b.n	8009650 <_dtoa_r+0x4e0>
 80097d2:	4b9b      	ldr	r3, [pc, #620]	@ (8009a40 <_dtoa_r+0x8d0>)
 80097d4:	f7f6 ff10 	bl	80005f8 <__aeabi_dmul>
 80097d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097dc:	e7bc      	b.n	8009758 <_dtoa_r+0x5e8>
 80097de:	d10c      	bne.n	80097fa <_dtoa_r+0x68a>
 80097e0:	4b98      	ldr	r3, [pc, #608]	@ (8009a44 <_dtoa_r+0x8d4>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097e8:	f7f6 ff06 	bl	80005f8 <__aeabi_dmul>
 80097ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097f0:	f7f7 f988 	bl	8000b04 <__aeabi_dcmpge>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	f000 8157 	beq.w	8009aa8 <_dtoa_r+0x938>
 80097fa:	2400      	movs	r4, #0
 80097fc:	4625      	mov	r5, r4
 80097fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009800:	43db      	mvns	r3, r3
 8009802:	9304      	str	r3, [sp, #16]
 8009804:	4656      	mov	r6, sl
 8009806:	2700      	movs	r7, #0
 8009808:	4621      	mov	r1, r4
 800980a:	4658      	mov	r0, fp
 800980c:	f000 fbb4 	bl	8009f78 <_Bfree>
 8009810:	2d00      	cmp	r5, #0
 8009812:	d0dc      	beq.n	80097ce <_dtoa_r+0x65e>
 8009814:	b12f      	cbz	r7, 8009822 <_dtoa_r+0x6b2>
 8009816:	42af      	cmp	r7, r5
 8009818:	d003      	beq.n	8009822 <_dtoa_r+0x6b2>
 800981a:	4639      	mov	r1, r7
 800981c:	4658      	mov	r0, fp
 800981e:	f000 fbab 	bl	8009f78 <_Bfree>
 8009822:	4629      	mov	r1, r5
 8009824:	4658      	mov	r0, fp
 8009826:	f000 fba7 	bl	8009f78 <_Bfree>
 800982a:	e7d0      	b.n	80097ce <_dtoa_r+0x65e>
 800982c:	9704      	str	r7, [sp, #16]
 800982e:	4633      	mov	r3, r6
 8009830:	461e      	mov	r6, r3
 8009832:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009836:	2a39      	cmp	r2, #57	@ 0x39
 8009838:	d107      	bne.n	800984a <_dtoa_r+0x6da>
 800983a:	459a      	cmp	sl, r3
 800983c:	d1f8      	bne.n	8009830 <_dtoa_r+0x6c0>
 800983e:	9a04      	ldr	r2, [sp, #16]
 8009840:	3201      	adds	r2, #1
 8009842:	9204      	str	r2, [sp, #16]
 8009844:	2230      	movs	r2, #48	@ 0x30
 8009846:	f88a 2000 	strb.w	r2, [sl]
 800984a:	781a      	ldrb	r2, [r3, #0]
 800984c:	3201      	adds	r2, #1
 800984e:	701a      	strb	r2, [r3, #0]
 8009850:	e7bd      	b.n	80097ce <_dtoa_r+0x65e>
 8009852:	4b7b      	ldr	r3, [pc, #492]	@ (8009a40 <_dtoa_r+0x8d0>)
 8009854:	2200      	movs	r2, #0
 8009856:	f7f6 fecf 	bl	80005f8 <__aeabi_dmul>
 800985a:	2200      	movs	r2, #0
 800985c:	2300      	movs	r3, #0
 800985e:	4604      	mov	r4, r0
 8009860:	460d      	mov	r5, r1
 8009862:	f7f7 f931 	bl	8000ac8 <__aeabi_dcmpeq>
 8009866:	2800      	cmp	r0, #0
 8009868:	f43f aebb 	beq.w	80095e2 <_dtoa_r+0x472>
 800986c:	e6f0      	b.n	8009650 <_dtoa_r+0x4e0>
 800986e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009870:	2a00      	cmp	r2, #0
 8009872:	f000 80db 	beq.w	8009a2c <_dtoa_r+0x8bc>
 8009876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009878:	2a01      	cmp	r2, #1
 800987a:	f300 80bf 	bgt.w	80099fc <_dtoa_r+0x88c>
 800987e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009880:	2a00      	cmp	r2, #0
 8009882:	f000 80b7 	beq.w	80099f4 <_dtoa_r+0x884>
 8009886:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800988a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800988c:	4646      	mov	r6, r8
 800988e:	9a08      	ldr	r2, [sp, #32]
 8009890:	2101      	movs	r1, #1
 8009892:	441a      	add	r2, r3
 8009894:	4658      	mov	r0, fp
 8009896:	4498      	add	r8, r3
 8009898:	9208      	str	r2, [sp, #32]
 800989a:	f000 fc6b 	bl	800a174 <__i2b>
 800989e:	4605      	mov	r5, r0
 80098a0:	b15e      	cbz	r6, 80098ba <_dtoa_r+0x74a>
 80098a2:	9b08      	ldr	r3, [sp, #32]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	dd08      	ble.n	80098ba <_dtoa_r+0x74a>
 80098a8:	42b3      	cmp	r3, r6
 80098aa:	9a08      	ldr	r2, [sp, #32]
 80098ac:	bfa8      	it	ge
 80098ae:	4633      	movge	r3, r6
 80098b0:	eba8 0803 	sub.w	r8, r8, r3
 80098b4:	1af6      	subs	r6, r6, r3
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	9308      	str	r3, [sp, #32]
 80098ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098bc:	b1f3      	cbz	r3, 80098fc <_dtoa_r+0x78c>
 80098be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f000 80b7 	beq.w	8009a34 <_dtoa_r+0x8c4>
 80098c6:	b18c      	cbz	r4, 80098ec <_dtoa_r+0x77c>
 80098c8:	4629      	mov	r1, r5
 80098ca:	4622      	mov	r2, r4
 80098cc:	4658      	mov	r0, fp
 80098ce:	f000 fd11 	bl	800a2f4 <__pow5mult>
 80098d2:	464a      	mov	r2, r9
 80098d4:	4601      	mov	r1, r0
 80098d6:	4605      	mov	r5, r0
 80098d8:	4658      	mov	r0, fp
 80098da:	f000 fc61 	bl	800a1a0 <__multiply>
 80098de:	4649      	mov	r1, r9
 80098e0:	9004      	str	r0, [sp, #16]
 80098e2:	4658      	mov	r0, fp
 80098e4:	f000 fb48 	bl	8009f78 <_Bfree>
 80098e8:	9b04      	ldr	r3, [sp, #16]
 80098ea:	4699      	mov	r9, r3
 80098ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098ee:	1b1a      	subs	r2, r3, r4
 80098f0:	d004      	beq.n	80098fc <_dtoa_r+0x78c>
 80098f2:	4649      	mov	r1, r9
 80098f4:	4658      	mov	r0, fp
 80098f6:	f000 fcfd 	bl	800a2f4 <__pow5mult>
 80098fa:	4681      	mov	r9, r0
 80098fc:	2101      	movs	r1, #1
 80098fe:	4658      	mov	r0, fp
 8009900:	f000 fc38 	bl	800a174 <__i2b>
 8009904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009906:	4604      	mov	r4, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	f000 81cf 	beq.w	8009cac <_dtoa_r+0xb3c>
 800990e:	461a      	mov	r2, r3
 8009910:	4601      	mov	r1, r0
 8009912:	4658      	mov	r0, fp
 8009914:	f000 fcee 	bl	800a2f4 <__pow5mult>
 8009918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800991a:	2b01      	cmp	r3, #1
 800991c:	4604      	mov	r4, r0
 800991e:	f300 8095 	bgt.w	8009a4c <_dtoa_r+0x8dc>
 8009922:	9b02      	ldr	r3, [sp, #8]
 8009924:	2b00      	cmp	r3, #0
 8009926:	f040 8087 	bne.w	8009a38 <_dtoa_r+0x8c8>
 800992a:	9b03      	ldr	r3, [sp, #12]
 800992c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009930:	2b00      	cmp	r3, #0
 8009932:	f040 8089 	bne.w	8009a48 <_dtoa_r+0x8d8>
 8009936:	9b03      	ldr	r3, [sp, #12]
 8009938:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800993c:	0d1b      	lsrs	r3, r3, #20
 800993e:	051b      	lsls	r3, r3, #20
 8009940:	b12b      	cbz	r3, 800994e <_dtoa_r+0x7de>
 8009942:	9b08      	ldr	r3, [sp, #32]
 8009944:	3301      	adds	r3, #1
 8009946:	9308      	str	r3, [sp, #32]
 8009948:	f108 0801 	add.w	r8, r8, #1
 800994c:	2301      	movs	r3, #1
 800994e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009950:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 81b0 	beq.w	8009cb8 <_dtoa_r+0xb48>
 8009958:	6923      	ldr	r3, [r4, #16]
 800995a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800995e:	6918      	ldr	r0, [r3, #16]
 8009960:	f000 fbbc 	bl	800a0dc <__hi0bits>
 8009964:	f1c0 0020 	rsb	r0, r0, #32
 8009968:	9b08      	ldr	r3, [sp, #32]
 800996a:	4418      	add	r0, r3
 800996c:	f010 001f 	ands.w	r0, r0, #31
 8009970:	d077      	beq.n	8009a62 <_dtoa_r+0x8f2>
 8009972:	f1c0 0320 	rsb	r3, r0, #32
 8009976:	2b04      	cmp	r3, #4
 8009978:	dd6b      	ble.n	8009a52 <_dtoa_r+0x8e2>
 800997a:	9b08      	ldr	r3, [sp, #32]
 800997c:	f1c0 001c 	rsb	r0, r0, #28
 8009980:	4403      	add	r3, r0
 8009982:	4480      	add	r8, r0
 8009984:	4406      	add	r6, r0
 8009986:	9308      	str	r3, [sp, #32]
 8009988:	f1b8 0f00 	cmp.w	r8, #0
 800998c:	dd05      	ble.n	800999a <_dtoa_r+0x82a>
 800998e:	4649      	mov	r1, r9
 8009990:	4642      	mov	r2, r8
 8009992:	4658      	mov	r0, fp
 8009994:	f000 fd08 	bl	800a3a8 <__lshift>
 8009998:	4681      	mov	r9, r0
 800999a:	9b08      	ldr	r3, [sp, #32]
 800999c:	2b00      	cmp	r3, #0
 800999e:	dd05      	ble.n	80099ac <_dtoa_r+0x83c>
 80099a0:	4621      	mov	r1, r4
 80099a2:	461a      	mov	r2, r3
 80099a4:	4658      	mov	r0, fp
 80099a6:	f000 fcff 	bl	800a3a8 <__lshift>
 80099aa:	4604      	mov	r4, r0
 80099ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d059      	beq.n	8009a66 <_dtoa_r+0x8f6>
 80099b2:	4621      	mov	r1, r4
 80099b4:	4648      	mov	r0, r9
 80099b6:	f000 fd63 	bl	800a480 <__mcmp>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	da53      	bge.n	8009a66 <_dtoa_r+0x8f6>
 80099be:	1e7b      	subs	r3, r7, #1
 80099c0:	9304      	str	r3, [sp, #16]
 80099c2:	4649      	mov	r1, r9
 80099c4:	2300      	movs	r3, #0
 80099c6:	220a      	movs	r2, #10
 80099c8:	4658      	mov	r0, fp
 80099ca:	f000 faf7 	bl	8009fbc <__multadd>
 80099ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099d0:	4681      	mov	r9, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f000 8172 	beq.w	8009cbc <_dtoa_r+0xb4c>
 80099d8:	2300      	movs	r3, #0
 80099da:	4629      	mov	r1, r5
 80099dc:	220a      	movs	r2, #10
 80099de:	4658      	mov	r0, fp
 80099e0:	f000 faec 	bl	8009fbc <__multadd>
 80099e4:	9b00      	ldr	r3, [sp, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	4605      	mov	r5, r0
 80099ea:	dc67      	bgt.n	8009abc <_dtoa_r+0x94c>
 80099ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	dc41      	bgt.n	8009a76 <_dtoa_r+0x906>
 80099f2:	e063      	b.n	8009abc <_dtoa_r+0x94c>
 80099f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80099f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80099fa:	e746      	b.n	800988a <_dtoa_r+0x71a>
 80099fc:	9b07      	ldr	r3, [sp, #28]
 80099fe:	1e5c      	subs	r4, r3, #1
 8009a00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a02:	42a3      	cmp	r3, r4
 8009a04:	bfbf      	itttt	lt
 8009a06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009a08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009a0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009a0c:	1ae3      	sublt	r3, r4, r3
 8009a0e:	bfb4      	ite	lt
 8009a10:	18d2      	addlt	r2, r2, r3
 8009a12:	1b1c      	subge	r4, r3, r4
 8009a14:	9b07      	ldr	r3, [sp, #28]
 8009a16:	bfbc      	itt	lt
 8009a18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009a1a:	2400      	movlt	r4, #0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	bfb5      	itete	lt
 8009a20:	eba8 0603 	sublt.w	r6, r8, r3
 8009a24:	9b07      	ldrge	r3, [sp, #28]
 8009a26:	2300      	movlt	r3, #0
 8009a28:	4646      	movge	r6, r8
 8009a2a:	e730      	b.n	800988e <_dtoa_r+0x71e>
 8009a2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009a30:	4646      	mov	r6, r8
 8009a32:	e735      	b.n	80098a0 <_dtoa_r+0x730>
 8009a34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a36:	e75c      	b.n	80098f2 <_dtoa_r+0x782>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	e788      	b.n	800994e <_dtoa_r+0x7de>
 8009a3c:	3fe00000 	.word	0x3fe00000
 8009a40:	40240000 	.word	0x40240000
 8009a44:	40140000 	.word	0x40140000
 8009a48:	9b02      	ldr	r3, [sp, #8]
 8009a4a:	e780      	b.n	800994e <_dtoa_r+0x7de>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a50:	e782      	b.n	8009958 <_dtoa_r+0x7e8>
 8009a52:	d099      	beq.n	8009988 <_dtoa_r+0x818>
 8009a54:	9a08      	ldr	r2, [sp, #32]
 8009a56:	331c      	adds	r3, #28
 8009a58:	441a      	add	r2, r3
 8009a5a:	4498      	add	r8, r3
 8009a5c:	441e      	add	r6, r3
 8009a5e:	9208      	str	r2, [sp, #32]
 8009a60:	e792      	b.n	8009988 <_dtoa_r+0x818>
 8009a62:	4603      	mov	r3, r0
 8009a64:	e7f6      	b.n	8009a54 <_dtoa_r+0x8e4>
 8009a66:	9b07      	ldr	r3, [sp, #28]
 8009a68:	9704      	str	r7, [sp, #16]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	dc20      	bgt.n	8009ab0 <_dtoa_r+0x940>
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	dd1e      	ble.n	8009ab4 <_dtoa_r+0x944>
 8009a76:	9b00      	ldr	r3, [sp, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f47f aec0 	bne.w	80097fe <_dtoa_r+0x68e>
 8009a7e:	4621      	mov	r1, r4
 8009a80:	2205      	movs	r2, #5
 8009a82:	4658      	mov	r0, fp
 8009a84:	f000 fa9a 	bl	8009fbc <__multadd>
 8009a88:	4601      	mov	r1, r0
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	4648      	mov	r0, r9
 8009a8e:	f000 fcf7 	bl	800a480 <__mcmp>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	f77f aeb3 	ble.w	80097fe <_dtoa_r+0x68e>
 8009a98:	4656      	mov	r6, sl
 8009a9a:	2331      	movs	r3, #49	@ 0x31
 8009a9c:	f806 3b01 	strb.w	r3, [r6], #1
 8009aa0:	9b04      	ldr	r3, [sp, #16]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	9304      	str	r3, [sp, #16]
 8009aa6:	e6ae      	b.n	8009806 <_dtoa_r+0x696>
 8009aa8:	9c07      	ldr	r4, [sp, #28]
 8009aaa:	9704      	str	r7, [sp, #16]
 8009aac:	4625      	mov	r5, r4
 8009aae:	e7f3      	b.n	8009a98 <_dtoa_r+0x928>
 8009ab0:	9b07      	ldr	r3, [sp, #28]
 8009ab2:	9300      	str	r3, [sp, #0]
 8009ab4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f000 8104 	beq.w	8009cc4 <_dtoa_r+0xb54>
 8009abc:	2e00      	cmp	r6, #0
 8009abe:	dd05      	ble.n	8009acc <_dtoa_r+0x95c>
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	4632      	mov	r2, r6
 8009ac4:	4658      	mov	r0, fp
 8009ac6:	f000 fc6f 	bl	800a3a8 <__lshift>
 8009aca:	4605      	mov	r5, r0
 8009acc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d05a      	beq.n	8009b88 <_dtoa_r+0xa18>
 8009ad2:	6869      	ldr	r1, [r5, #4]
 8009ad4:	4658      	mov	r0, fp
 8009ad6:	f000 fa0f 	bl	8009ef8 <_Balloc>
 8009ada:	4606      	mov	r6, r0
 8009adc:	b928      	cbnz	r0, 8009aea <_dtoa_r+0x97a>
 8009ade:	4b84      	ldr	r3, [pc, #528]	@ (8009cf0 <_dtoa_r+0xb80>)
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009ae6:	f7ff bb5a 	b.w	800919e <_dtoa_r+0x2e>
 8009aea:	692a      	ldr	r2, [r5, #16]
 8009aec:	3202      	adds	r2, #2
 8009aee:	0092      	lsls	r2, r2, #2
 8009af0:	f105 010c 	add.w	r1, r5, #12
 8009af4:	300c      	adds	r0, #12
 8009af6:	f7ff fa9e 	bl	8009036 <memcpy>
 8009afa:	2201      	movs	r2, #1
 8009afc:	4631      	mov	r1, r6
 8009afe:	4658      	mov	r0, fp
 8009b00:	f000 fc52 	bl	800a3a8 <__lshift>
 8009b04:	f10a 0301 	add.w	r3, sl, #1
 8009b08:	9307      	str	r3, [sp, #28]
 8009b0a:	9b00      	ldr	r3, [sp, #0]
 8009b0c:	4453      	add	r3, sl
 8009b0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b10:	9b02      	ldr	r3, [sp, #8]
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	462f      	mov	r7, r5
 8009b18:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b1a:	4605      	mov	r5, r0
 8009b1c:	9b07      	ldr	r3, [sp, #28]
 8009b1e:	4621      	mov	r1, r4
 8009b20:	3b01      	subs	r3, #1
 8009b22:	4648      	mov	r0, r9
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	f7ff fa9b 	bl	8009060 <quorem>
 8009b2a:	4639      	mov	r1, r7
 8009b2c:	9002      	str	r0, [sp, #8]
 8009b2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009b32:	4648      	mov	r0, r9
 8009b34:	f000 fca4 	bl	800a480 <__mcmp>
 8009b38:	462a      	mov	r2, r5
 8009b3a:	9008      	str	r0, [sp, #32]
 8009b3c:	4621      	mov	r1, r4
 8009b3e:	4658      	mov	r0, fp
 8009b40:	f000 fcba 	bl	800a4b8 <__mdiff>
 8009b44:	68c2      	ldr	r2, [r0, #12]
 8009b46:	4606      	mov	r6, r0
 8009b48:	bb02      	cbnz	r2, 8009b8c <_dtoa_r+0xa1c>
 8009b4a:	4601      	mov	r1, r0
 8009b4c:	4648      	mov	r0, r9
 8009b4e:	f000 fc97 	bl	800a480 <__mcmp>
 8009b52:	4602      	mov	r2, r0
 8009b54:	4631      	mov	r1, r6
 8009b56:	4658      	mov	r0, fp
 8009b58:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b5a:	f000 fa0d 	bl	8009f78 <_Bfree>
 8009b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b62:	9e07      	ldr	r6, [sp, #28]
 8009b64:	ea43 0102 	orr.w	r1, r3, r2
 8009b68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b6a:	4319      	orrs	r1, r3
 8009b6c:	d110      	bne.n	8009b90 <_dtoa_r+0xa20>
 8009b6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b72:	d029      	beq.n	8009bc8 <_dtoa_r+0xa58>
 8009b74:	9b08      	ldr	r3, [sp, #32]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	dd02      	ble.n	8009b80 <_dtoa_r+0xa10>
 8009b7a:	9b02      	ldr	r3, [sp, #8]
 8009b7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009b80:	9b00      	ldr	r3, [sp, #0]
 8009b82:	f883 8000 	strb.w	r8, [r3]
 8009b86:	e63f      	b.n	8009808 <_dtoa_r+0x698>
 8009b88:	4628      	mov	r0, r5
 8009b8a:	e7bb      	b.n	8009b04 <_dtoa_r+0x994>
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	e7e1      	b.n	8009b54 <_dtoa_r+0x9e4>
 8009b90:	9b08      	ldr	r3, [sp, #32]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	db04      	blt.n	8009ba0 <_dtoa_r+0xa30>
 8009b96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b98:	430b      	orrs	r3, r1
 8009b9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b9c:	430b      	orrs	r3, r1
 8009b9e:	d120      	bne.n	8009be2 <_dtoa_r+0xa72>
 8009ba0:	2a00      	cmp	r2, #0
 8009ba2:	dded      	ble.n	8009b80 <_dtoa_r+0xa10>
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	4658      	mov	r0, fp
 8009baa:	f000 fbfd 	bl	800a3a8 <__lshift>
 8009bae:	4621      	mov	r1, r4
 8009bb0:	4681      	mov	r9, r0
 8009bb2:	f000 fc65 	bl	800a480 <__mcmp>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	dc03      	bgt.n	8009bc2 <_dtoa_r+0xa52>
 8009bba:	d1e1      	bne.n	8009b80 <_dtoa_r+0xa10>
 8009bbc:	f018 0f01 	tst.w	r8, #1
 8009bc0:	d0de      	beq.n	8009b80 <_dtoa_r+0xa10>
 8009bc2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009bc6:	d1d8      	bne.n	8009b7a <_dtoa_r+0xa0a>
 8009bc8:	9a00      	ldr	r2, [sp, #0]
 8009bca:	2339      	movs	r3, #57	@ 0x39
 8009bcc:	7013      	strb	r3, [r2, #0]
 8009bce:	4633      	mov	r3, r6
 8009bd0:	461e      	mov	r6, r3
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009bd8:	2a39      	cmp	r2, #57	@ 0x39
 8009bda:	d052      	beq.n	8009c82 <_dtoa_r+0xb12>
 8009bdc:	3201      	adds	r2, #1
 8009bde:	701a      	strb	r2, [r3, #0]
 8009be0:	e612      	b.n	8009808 <_dtoa_r+0x698>
 8009be2:	2a00      	cmp	r2, #0
 8009be4:	dd07      	ble.n	8009bf6 <_dtoa_r+0xa86>
 8009be6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009bea:	d0ed      	beq.n	8009bc8 <_dtoa_r+0xa58>
 8009bec:	9a00      	ldr	r2, [sp, #0]
 8009bee:	f108 0301 	add.w	r3, r8, #1
 8009bf2:	7013      	strb	r3, [r2, #0]
 8009bf4:	e608      	b.n	8009808 <_dtoa_r+0x698>
 8009bf6:	9b07      	ldr	r3, [sp, #28]
 8009bf8:	9a07      	ldr	r2, [sp, #28]
 8009bfa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009bfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d028      	beq.n	8009c56 <_dtoa_r+0xae6>
 8009c04:	4649      	mov	r1, r9
 8009c06:	2300      	movs	r3, #0
 8009c08:	220a      	movs	r2, #10
 8009c0a:	4658      	mov	r0, fp
 8009c0c:	f000 f9d6 	bl	8009fbc <__multadd>
 8009c10:	42af      	cmp	r7, r5
 8009c12:	4681      	mov	r9, r0
 8009c14:	f04f 0300 	mov.w	r3, #0
 8009c18:	f04f 020a 	mov.w	r2, #10
 8009c1c:	4639      	mov	r1, r7
 8009c1e:	4658      	mov	r0, fp
 8009c20:	d107      	bne.n	8009c32 <_dtoa_r+0xac2>
 8009c22:	f000 f9cb 	bl	8009fbc <__multadd>
 8009c26:	4607      	mov	r7, r0
 8009c28:	4605      	mov	r5, r0
 8009c2a:	9b07      	ldr	r3, [sp, #28]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	9307      	str	r3, [sp, #28]
 8009c30:	e774      	b.n	8009b1c <_dtoa_r+0x9ac>
 8009c32:	f000 f9c3 	bl	8009fbc <__multadd>
 8009c36:	4629      	mov	r1, r5
 8009c38:	4607      	mov	r7, r0
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	220a      	movs	r2, #10
 8009c3e:	4658      	mov	r0, fp
 8009c40:	f000 f9bc 	bl	8009fbc <__multadd>
 8009c44:	4605      	mov	r5, r0
 8009c46:	e7f0      	b.n	8009c2a <_dtoa_r+0xaba>
 8009c48:	9b00      	ldr	r3, [sp, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	bfcc      	ite	gt
 8009c4e:	461e      	movgt	r6, r3
 8009c50:	2601      	movle	r6, #1
 8009c52:	4456      	add	r6, sl
 8009c54:	2700      	movs	r7, #0
 8009c56:	4649      	mov	r1, r9
 8009c58:	2201      	movs	r2, #1
 8009c5a:	4658      	mov	r0, fp
 8009c5c:	f000 fba4 	bl	800a3a8 <__lshift>
 8009c60:	4621      	mov	r1, r4
 8009c62:	4681      	mov	r9, r0
 8009c64:	f000 fc0c 	bl	800a480 <__mcmp>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	dcb0      	bgt.n	8009bce <_dtoa_r+0xa5e>
 8009c6c:	d102      	bne.n	8009c74 <_dtoa_r+0xb04>
 8009c6e:	f018 0f01 	tst.w	r8, #1
 8009c72:	d1ac      	bne.n	8009bce <_dtoa_r+0xa5e>
 8009c74:	4633      	mov	r3, r6
 8009c76:	461e      	mov	r6, r3
 8009c78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c7c:	2a30      	cmp	r2, #48	@ 0x30
 8009c7e:	d0fa      	beq.n	8009c76 <_dtoa_r+0xb06>
 8009c80:	e5c2      	b.n	8009808 <_dtoa_r+0x698>
 8009c82:	459a      	cmp	sl, r3
 8009c84:	d1a4      	bne.n	8009bd0 <_dtoa_r+0xa60>
 8009c86:	9b04      	ldr	r3, [sp, #16]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	9304      	str	r3, [sp, #16]
 8009c8c:	2331      	movs	r3, #49	@ 0x31
 8009c8e:	f88a 3000 	strb.w	r3, [sl]
 8009c92:	e5b9      	b.n	8009808 <_dtoa_r+0x698>
 8009c94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009cf4 <_dtoa_r+0xb84>
 8009c9a:	b11b      	cbz	r3, 8009ca4 <_dtoa_r+0xb34>
 8009c9c:	f10a 0308 	add.w	r3, sl, #8
 8009ca0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009ca2:	6013      	str	r3, [r2, #0]
 8009ca4:	4650      	mov	r0, sl
 8009ca6:	b019      	add	sp, #100	@ 0x64
 8009ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	f77f ae37 	ble.w	8009922 <_dtoa_r+0x7b2>
 8009cb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cb8:	2001      	movs	r0, #1
 8009cba:	e655      	b.n	8009968 <_dtoa_r+0x7f8>
 8009cbc:	9b00      	ldr	r3, [sp, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f77f aed6 	ble.w	8009a70 <_dtoa_r+0x900>
 8009cc4:	4656      	mov	r6, sl
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	4648      	mov	r0, r9
 8009cca:	f7ff f9c9 	bl	8009060 <quorem>
 8009cce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009cd2:	f806 8b01 	strb.w	r8, [r6], #1
 8009cd6:	9b00      	ldr	r3, [sp, #0]
 8009cd8:	eba6 020a 	sub.w	r2, r6, sl
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	ddb3      	ble.n	8009c48 <_dtoa_r+0xad8>
 8009ce0:	4649      	mov	r1, r9
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	220a      	movs	r2, #10
 8009ce6:	4658      	mov	r0, fp
 8009ce8:	f000 f968 	bl	8009fbc <__multadd>
 8009cec:	4681      	mov	r9, r0
 8009cee:	e7ea      	b.n	8009cc6 <_dtoa_r+0xb56>
 8009cf0:	0800d12c 	.word	0x0800d12c
 8009cf4:	0800d0b0 	.word	0x0800d0b0

08009cf8 <_free_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	4605      	mov	r5, r0
 8009cfc:	2900      	cmp	r1, #0
 8009cfe:	d041      	beq.n	8009d84 <_free_r+0x8c>
 8009d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d04:	1f0c      	subs	r4, r1, #4
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	bfb8      	it	lt
 8009d0a:	18e4      	addlt	r4, r4, r3
 8009d0c:	f000 f8e8 	bl	8009ee0 <__malloc_lock>
 8009d10:	4a1d      	ldr	r2, [pc, #116]	@ (8009d88 <_free_r+0x90>)
 8009d12:	6813      	ldr	r3, [r2, #0]
 8009d14:	b933      	cbnz	r3, 8009d24 <_free_r+0x2c>
 8009d16:	6063      	str	r3, [r4, #4]
 8009d18:	6014      	str	r4, [r2, #0]
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d20:	f000 b8e4 	b.w	8009eec <__malloc_unlock>
 8009d24:	42a3      	cmp	r3, r4
 8009d26:	d908      	bls.n	8009d3a <_free_r+0x42>
 8009d28:	6820      	ldr	r0, [r4, #0]
 8009d2a:	1821      	adds	r1, r4, r0
 8009d2c:	428b      	cmp	r3, r1
 8009d2e:	bf01      	itttt	eq
 8009d30:	6819      	ldreq	r1, [r3, #0]
 8009d32:	685b      	ldreq	r3, [r3, #4]
 8009d34:	1809      	addeq	r1, r1, r0
 8009d36:	6021      	streq	r1, [r4, #0]
 8009d38:	e7ed      	b.n	8009d16 <_free_r+0x1e>
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	b10b      	cbz	r3, 8009d44 <_free_r+0x4c>
 8009d40:	42a3      	cmp	r3, r4
 8009d42:	d9fa      	bls.n	8009d3a <_free_r+0x42>
 8009d44:	6811      	ldr	r1, [r2, #0]
 8009d46:	1850      	adds	r0, r2, r1
 8009d48:	42a0      	cmp	r0, r4
 8009d4a:	d10b      	bne.n	8009d64 <_free_r+0x6c>
 8009d4c:	6820      	ldr	r0, [r4, #0]
 8009d4e:	4401      	add	r1, r0
 8009d50:	1850      	adds	r0, r2, r1
 8009d52:	4283      	cmp	r3, r0
 8009d54:	6011      	str	r1, [r2, #0]
 8009d56:	d1e0      	bne.n	8009d1a <_free_r+0x22>
 8009d58:	6818      	ldr	r0, [r3, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	6053      	str	r3, [r2, #4]
 8009d5e:	4408      	add	r0, r1
 8009d60:	6010      	str	r0, [r2, #0]
 8009d62:	e7da      	b.n	8009d1a <_free_r+0x22>
 8009d64:	d902      	bls.n	8009d6c <_free_r+0x74>
 8009d66:	230c      	movs	r3, #12
 8009d68:	602b      	str	r3, [r5, #0]
 8009d6a:	e7d6      	b.n	8009d1a <_free_r+0x22>
 8009d6c:	6820      	ldr	r0, [r4, #0]
 8009d6e:	1821      	adds	r1, r4, r0
 8009d70:	428b      	cmp	r3, r1
 8009d72:	bf04      	itt	eq
 8009d74:	6819      	ldreq	r1, [r3, #0]
 8009d76:	685b      	ldreq	r3, [r3, #4]
 8009d78:	6063      	str	r3, [r4, #4]
 8009d7a:	bf04      	itt	eq
 8009d7c:	1809      	addeq	r1, r1, r0
 8009d7e:	6021      	streq	r1, [r4, #0]
 8009d80:	6054      	str	r4, [r2, #4]
 8009d82:	e7ca      	b.n	8009d1a <_free_r+0x22>
 8009d84:	bd38      	pop	{r3, r4, r5, pc}
 8009d86:	bf00      	nop
 8009d88:	200011dc 	.word	0x200011dc

08009d8c <malloc>:
 8009d8c:	4b02      	ldr	r3, [pc, #8]	@ (8009d98 <malloc+0xc>)
 8009d8e:	4601      	mov	r1, r0
 8009d90:	6818      	ldr	r0, [r3, #0]
 8009d92:	f000 b825 	b.w	8009de0 <_malloc_r>
 8009d96:	bf00      	nop
 8009d98:	2000002c 	.word	0x2000002c

08009d9c <sbrk_aligned>:
 8009d9c:	b570      	push	{r4, r5, r6, lr}
 8009d9e:	4e0f      	ldr	r6, [pc, #60]	@ (8009ddc <sbrk_aligned+0x40>)
 8009da0:	460c      	mov	r4, r1
 8009da2:	6831      	ldr	r1, [r6, #0]
 8009da4:	4605      	mov	r5, r0
 8009da6:	b911      	cbnz	r1, 8009dae <sbrk_aligned+0x12>
 8009da8:	f002 fa26 	bl	800c1f8 <_sbrk_r>
 8009dac:	6030      	str	r0, [r6, #0]
 8009dae:	4621      	mov	r1, r4
 8009db0:	4628      	mov	r0, r5
 8009db2:	f002 fa21 	bl	800c1f8 <_sbrk_r>
 8009db6:	1c43      	adds	r3, r0, #1
 8009db8:	d103      	bne.n	8009dc2 <sbrk_aligned+0x26>
 8009dba:	f04f 34ff 	mov.w	r4, #4294967295
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	bd70      	pop	{r4, r5, r6, pc}
 8009dc2:	1cc4      	adds	r4, r0, #3
 8009dc4:	f024 0403 	bic.w	r4, r4, #3
 8009dc8:	42a0      	cmp	r0, r4
 8009dca:	d0f8      	beq.n	8009dbe <sbrk_aligned+0x22>
 8009dcc:	1a21      	subs	r1, r4, r0
 8009dce:	4628      	mov	r0, r5
 8009dd0:	f002 fa12 	bl	800c1f8 <_sbrk_r>
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d1f2      	bne.n	8009dbe <sbrk_aligned+0x22>
 8009dd8:	e7ef      	b.n	8009dba <sbrk_aligned+0x1e>
 8009dda:	bf00      	nop
 8009ddc:	200011d8 	.word	0x200011d8

08009de0 <_malloc_r>:
 8009de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009de4:	1ccd      	adds	r5, r1, #3
 8009de6:	f025 0503 	bic.w	r5, r5, #3
 8009dea:	3508      	adds	r5, #8
 8009dec:	2d0c      	cmp	r5, #12
 8009dee:	bf38      	it	cc
 8009df0:	250c      	movcc	r5, #12
 8009df2:	2d00      	cmp	r5, #0
 8009df4:	4606      	mov	r6, r0
 8009df6:	db01      	blt.n	8009dfc <_malloc_r+0x1c>
 8009df8:	42a9      	cmp	r1, r5
 8009dfa:	d904      	bls.n	8009e06 <_malloc_r+0x26>
 8009dfc:	230c      	movs	r3, #12
 8009dfe:	6033      	str	r3, [r6, #0]
 8009e00:	2000      	movs	r0, #0
 8009e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009edc <_malloc_r+0xfc>
 8009e0a:	f000 f869 	bl	8009ee0 <__malloc_lock>
 8009e0e:	f8d8 3000 	ldr.w	r3, [r8]
 8009e12:	461c      	mov	r4, r3
 8009e14:	bb44      	cbnz	r4, 8009e68 <_malloc_r+0x88>
 8009e16:	4629      	mov	r1, r5
 8009e18:	4630      	mov	r0, r6
 8009e1a:	f7ff ffbf 	bl	8009d9c <sbrk_aligned>
 8009e1e:	1c43      	adds	r3, r0, #1
 8009e20:	4604      	mov	r4, r0
 8009e22:	d158      	bne.n	8009ed6 <_malloc_r+0xf6>
 8009e24:	f8d8 4000 	ldr.w	r4, [r8]
 8009e28:	4627      	mov	r7, r4
 8009e2a:	2f00      	cmp	r7, #0
 8009e2c:	d143      	bne.n	8009eb6 <_malloc_r+0xd6>
 8009e2e:	2c00      	cmp	r4, #0
 8009e30:	d04b      	beq.n	8009eca <_malloc_r+0xea>
 8009e32:	6823      	ldr	r3, [r4, #0]
 8009e34:	4639      	mov	r1, r7
 8009e36:	4630      	mov	r0, r6
 8009e38:	eb04 0903 	add.w	r9, r4, r3
 8009e3c:	f002 f9dc 	bl	800c1f8 <_sbrk_r>
 8009e40:	4581      	cmp	r9, r0
 8009e42:	d142      	bne.n	8009eca <_malloc_r+0xea>
 8009e44:	6821      	ldr	r1, [r4, #0]
 8009e46:	1a6d      	subs	r5, r5, r1
 8009e48:	4629      	mov	r1, r5
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	f7ff ffa6 	bl	8009d9c <sbrk_aligned>
 8009e50:	3001      	adds	r0, #1
 8009e52:	d03a      	beq.n	8009eca <_malloc_r+0xea>
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	442b      	add	r3, r5
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	f8d8 3000 	ldr.w	r3, [r8]
 8009e5e:	685a      	ldr	r2, [r3, #4]
 8009e60:	bb62      	cbnz	r2, 8009ebc <_malloc_r+0xdc>
 8009e62:	f8c8 7000 	str.w	r7, [r8]
 8009e66:	e00f      	b.n	8009e88 <_malloc_r+0xa8>
 8009e68:	6822      	ldr	r2, [r4, #0]
 8009e6a:	1b52      	subs	r2, r2, r5
 8009e6c:	d420      	bmi.n	8009eb0 <_malloc_r+0xd0>
 8009e6e:	2a0b      	cmp	r2, #11
 8009e70:	d917      	bls.n	8009ea2 <_malloc_r+0xc2>
 8009e72:	1961      	adds	r1, r4, r5
 8009e74:	42a3      	cmp	r3, r4
 8009e76:	6025      	str	r5, [r4, #0]
 8009e78:	bf18      	it	ne
 8009e7a:	6059      	strne	r1, [r3, #4]
 8009e7c:	6863      	ldr	r3, [r4, #4]
 8009e7e:	bf08      	it	eq
 8009e80:	f8c8 1000 	streq.w	r1, [r8]
 8009e84:	5162      	str	r2, [r4, r5]
 8009e86:	604b      	str	r3, [r1, #4]
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f000 f82f 	bl	8009eec <__malloc_unlock>
 8009e8e:	f104 000b 	add.w	r0, r4, #11
 8009e92:	1d23      	adds	r3, r4, #4
 8009e94:	f020 0007 	bic.w	r0, r0, #7
 8009e98:	1ac2      	subs	r2, r0, r3
 8009e9a:	bf1c      	itt	ne
 8009e9c:	1a1b      	subne	r3, r3, r0
 8009e9e:	50a3      	strne	r3, [r4, r2]
 8009ea0:	e7af      	b.n	8009e02 <_malloc_r+0x22>
 8009ea2:	6862      	ldr	r2, [r4, #4]
 8009ea4:	42a3      	cmp	r3, r4
 8009ea6:	bf0c      	ite	eq
 8009ea8:	f8c8 2000 	streq.w	r2, [r8]
 8009eac:	605a      	strne	r2, [r3, #4]
 8009eae:	e7eb      	b.n	8009e88 <_malloc_r+0xa8>
 8009eb0:	4623      	mov	r3, r4
 8009eb2:	6864      	ldr	r4, [r4, #4]
 8009eb4:	e7ae      	b.n	8009e14 <_malloc_r+0x34>
 8009eb6:	463c      	mov	r4, r7
 8009eb8:	687f      	ldr	r7, [r7, #4]
 8009eba:	e7b6      	b.n	8009e2a <_malloc_r+0x4a>
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	42a3      	cmp	r3, r4
 8009ec2:	d1fb      	bne.n	8009ebc <_malloc_r+0xdc>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	6053      	str	r3, [r2, #4]
 8009ec8:	e7de      	b.n	8009e88 <_malloc_r+0xa8>
 8009eca:	230c      	movs	r3, #12
 8009ecc:	6033      	str	r3, [r6, #0]
 8009ece:	4630      	mov	r0, r6
 8009ed0:	f000 f80c 	bl	8009eec <__malloc_unlock>
 8009ed4:	e794      	b.n	8009e00 <_malloc_r+0x20>
 8009ed6:	6005      	str	r5, [r0, #0]
 8009ed8:	e7d6      	b.n	8009e88 <_malloc_r+0xa8>
 8009eda:	bf00      	nop
 8009edc:	200011dc 	.word	0x200011dc

08009ee0 <__malloc_lock>:
 8009ee0:	4801      	ldr	r0, [pc, #4]	@ (8009ee8 <__malloc_lock+0x8>)
 8009ee2:	f7ff b8a6 	b.w	8009032 <__retarget_lock_acquire_recursive>
 8009ee6:	bf00      	nop
 8009ee8:	200011d4 	.word	0x200011d4

08009eec <__malloc_unlock>:
 8009eec:	4801      	ldr	r0, [pc, #4]	@ (8009ef4 <__malloc_unlock+0x8>)
 8009eee:	f7ff b8a1 	b.w	8009034 <__retarget_lock_release_recursive>
 8009ef2:	bf00      	nop
 8009ef4:	200011d4 	.word	0x200011d4

08009ef8 <_Balloc>:
 8009ef8:	b570      	push	{r4, r5, r6, lr}
 8009efa:	69c6      	ldr	r6, [r0, #28]
 8009efc:	4604      	mov	r4, r0
 8009efe:	460d      	mov	r5, r1
 8009f00:	b976      	cbnz	r6, 8009f20 <_Balloc+0x28>
 8009f02:	2010      	movs	r0, #16
 8009f04:	f7ff ff42 	bl	8009d8c <malloc>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	61e0      	str	r0, [r4, #28]
 8009f0c:	b920      	cbnz	r0, 8009f18 <_Balloc+0x20>
 8009f0e:	4b18      	ldr	r3, [pc, #96]	@ (8009f70 <_Balloc+0x78>)
 8009f10:	4818      	ldr	r0, [pc, #96]	@ (8009f74 <_Balloc+0x7c>)
 8009f12:	216b      	movs	r1, #107	@ 0x6b
 8009f14:	f002 f988 	bl	800c228 <__assert_func>
 8009f18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f1c:	6006      	str	r6, [r0, #0]
 8009f1e:	60c6      	str	r6, [r0, #12]
 8009f20:	69e6      	ldr	r6, [r4, #28]
 8009f22:	68f3      	ldr	r3, [r6, #12]
 8009f24:	b183      	cbz	r3, 8009f48 <_Balloc+0x50>
 8009f26:	69e3      	ldr	r3, [r4, #28]
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f2e:	b9b8      	cbnz	r0, 8009f60 <_Balloc+0x68>
 8009f30:	2101      	movs	r1, #1
 8009f32:	fa01 f605 	lsl.w	r6, r1, r5
 8009f36:	1d72      	adds	r2, r6, #5
 8009f38:	0092      	lsls	r2, r2, #2
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f002 f992 	bl	800c264 <_calloc_r>
 8009f40:	b160      	cbz	r0, 8009f5c <_Balloc+0x64>
 8009f42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f46:	e00e      	b.n	8009f66 <_Balloc+0x6e>
 8009f48:	2221      	movs	r2, #33	@ 0x21
 8009f4a:	2104      	movs	r1, #4
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f002 f989 	bl	800c264 <_calloc_r>
 8009f52:	69e3      	ldr	r3, [r4, #28]
 8009f54:	60f0      	str	r0, [r6, #12]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1e4      	bne.n	8009f26 <_Balloc+0x2e>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	bd70      	pop	{r4, r5, r6, pc}
 8009f60:	6802      	ldr	r2, [r0, #0]
 8009f62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f66:	2300      	movs	r3, #0
 8009f68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f6c:	e7f7      	b.n	8009f5e <_Balloc+0x66>
 8009f6e:	bf00      	nop
 8009f70:	0800d0bd 	.word	0x0800d0bd
 8009f74:	0800d13d 	.word	0x0800d13d

08009f78 <_Bfree>:
 8009f78:	b570      	push	{r4, r5, r6, lr}
 8009f7a:	69c6      	ldr	r6, [r0, #28]
 8009f7c:	4605      	mov	r5, r0
 8009f7e:	460c      	mov	r4, r1
 8009f80:	b976      	cbnz	r6, 8009fa0 <_Bfree+0x28>
 8009f82:	2010      	movs	r0, #16
 8009f84:	f7ff ff02 	bl	8009d8c <malloc>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	61e8      	str	r0, [r5, #28]
 8009f8c:	b920      	cbnz	r0, 8009f98 <_Bfree+0x20>
 8009f8e:	4b09      	ldr	r3, [pc, #36]	@ (8009fb4 <_Bfree+0x3c>)
 8009f90:	4809      	ldr	r0, [pc, #36]	@ (8009fb8 <_Bfree+0x40>)
 8009f92:	218f      	movs	r1, #143	@ 0x8f
 8009f94:	f002 f948 	bl	800c228 <__assert_func>
 8009f98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f9c:	6006      	str	r6, [r0, #0]
 8009f9e:	60c6      	str	r6, [r0, #12]
 8009fa0:	b13c      	cbz	r4, 8009fb2 <_Bfree+0x3a>
 8009fa2:	69eb      	ldr	r3, [r5, #28]
 8009fa4:	6862      	ldr	r2, [r4, #4]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009fac:	6021      	str	r1, [r4, #0]
 8009fae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009fb2:	bd70      	pop	{r4, r5, r6, pc}
 8009fb4:	0800d0bd 	.word	0x0800d0bd
 8009fb8:	0800d13d 	.word	0x0800d13d

08009fbc <__multadd>:
 8009fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc0:	690d      	ldr	r5, [r1, #16]
 8009fc2:	4607      	mov	r7, r0
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	461e      	mov	r6, r3
 8009fc8:	f101 0c14 	add.w	ip, r1, #20
 8009fcc:	2000      	movs	r0, #0
 8009fce:	f8dc 3000 	ldr.w	r3, [ip]
 8009fd2:	b299      	uxth	r1, r3
 8009fd4:	fb02 6101 	mla	r1, r2, r1, r6
 8009fd8:	0c1e      	lsrs	r6, r3, #16
 8009fda:	0c0b      	lsrs	r3, r1, #16
 8009fdc:	fb02 3306 	mla	r3, r2, r6, r3
 8009fe0:	b289      	uxth	r1, r1
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009fe8:	4285      	cmp	r5, r0
 8009fea:	f84c 1b04 	str.w	r1, [ip], #4
 8009fee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ff2:	dcec      	bgt.n	8009fce <__multadd+0x12>
 8009ff4:	b30e      	cbz	r6, 800a03a <__multadd+0x7e>
 8009ff6:	68a3      	ldr	r3, [r4, #8]
 8009ff8:	42ab      	cmp	r3, r5
 8009ffa:	dc19      	bgt.n	800a030 <__multadd+0x74>
 8009ffc:	6861      	ldr	r1, [r4, #4]
 8009ffe:	4638      	mov	r0, r7
 800a000:	3101      	adds	r1, #1
 800a002:	f7ff ff79 	bl	8009ef8 <_Balloc>
 800a006:	4680      	mov	r8, r0
 800a008:	b928      	cbnz	r0, 800a016 <__multadd+0x5a>
 800a00a:	4602      	mov	r2, r0
 800a00c:	4b0c      	ldr	r3, [pc, #48]	@ (800a040 <__multadd+0x84>)
 800a00e:	480d      	ldr	r0, [pc, #52]	@ (800a044 <__multadd+0x88>)
 800a010:	21ba      	movs	r1, #186	@ 0xba
 800a012:	f002 f909 	bl	800c228 <__assert_func>
 800a016:	6922      	ldr	r2, [r4, #16]
 800a018:	3202      	adds	r2, #2
 800a01a:	f104 010c 	add.w	r1, r4, #12
 800a01e:	0092      	lsls	r2, r2, #2
 800a020:	300c      	adds	r0, #12
 800a022:	f7ff f808 	bl	8009036 <memcpy>
 800a026:	4621      	mov	r1, r4
 800a028:	4638      	mov	r0, r7
 800a02a:	f7ff ffa5 	bl	8009f78 <_Bfree>
 800a02e:	4644      	mov	r4, r8
 800a030:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a034:	3501      	adds	r5, #1
 800a036:	615e      	str	r6, [r3, #20]
 800a038:	6125      	str	r5, [r4, #16]
 800a03a:	4620      	mov	r0, r4
 800a03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a040:	0800d12c 	.word	0x0800d12c
 800a044:	0800d13d 	.word	0x0800d13d

0800a048 <__s2b>:
 800a048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a04c:	460c      	mov	r4, r1
 800a04e:	4615      	mov	r5, r2
 800a050:	461f      	mov	r7, r3
 800a052:	2209      	movs	r2, #9
 800a054:	3308      	adds	r3, #8
 800a056:	4606      	mov	r6, r0
 800a058:	fb93 f3f2 	sdiv	r3, r3, r2
 800a05c:	2100      	movs	r1, #0
 800a05e:	2201      	movs	r2, #1
 800a060:	429a      	cmp	r2, r3
 800a062:	db09      	blt.n	800a078 <__s2b+0x30>
 800a064:	4630      	mov	r0, r6
 800a066:	f7ff ff47 	bl	8009ef8 <_Balloc>
 800a06a:	b940      	cbnz	r0, 800a07e <__s2b+0x36>
 800a06c:	4602      	mov	r2, r0
 800a06e:	4b19      	ldr	r3, [pc, #100]	@ (800a0d4 <__s2b+0x8c>)
 800a070:	4819      	ldr	r0, [pc, #100]	@ (800a0d8 <__s2b+0x90>)
 800a072:	21d3      	movs	r1, #211	@ 0xd3
 800a074:	f002 f8d8 	bl	800c228 <__assert_func>
 800a078:	0052      	lsls	r2, r2, #1
 800a07a:	3101      	adds	r1, #1
 800a07c:	e7f0      	b.n	800a060 <__s2b+0x18>
 800a07e:	9b08      	ldr	r3, [sp, #32]
 800a080:	6143      	str	r3, [r0, #20]
 800a082:	2d09      	cmp	r5, #9
 800a084:	f04f 0301 	mov.w	r3, #1
 800a088:	6103      	str	r3, [r0, #16]
 800a08a:	dd16      	ble.n	800a0ba <__s2b+0x72>
 800a08c:	f104 0909 	add.w	r9, r4, #9
 800a090:	46c8      	mov	r8, r9
 800a092:	442c      	add	r4, r5
 800a094:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a098:	4601      	mov	r1, r0
 800a09a:	3b30      	subs	r3, #48	@ 0x30
 800a09c:	220a      	movs	r2, #10
 800a09e:	4630      	mov	r0, r6
 800a0a0:	f7ff ff8c 	bl	8009fbc <__multadd>
 800a0a4:	45a0      	cmp	r8, r4
 800a0a6:	d1f5      	bne.n	800a094 <__s2b+0x4c>
 800a0a8:	f1a5 0408 	sub.w	r4, r5, #8
 800a0ac:	444c      	add	r4, r9
 800a0ae:	1b2d      	subs	r5, r5, r4
 800a0b0:	1963      	adds	r3, r4, r5
 800a0b2:	42bb      	cmp	r3, r7
 800a0b4:	db04      	blt.n	800a0c0 <__s2b+0x78>
 800a0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ba:	340a      	adds	r4, #10
 800a0bc:	2509      	movs	r5, #9
 800a0be:	e7f6      	b.n	800a0ae <__s2b+0x66>
 800a0c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a0c4:	4601      	mov	r1, r0
 800a0c6:	3b30      	subs	r3, #48	@ 0x30
 800a0c8:	220a      	movs	r2, #10
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f7ff ff76 	bl	8009fbc <__multadd>
 800a0d0:	e7ee      	b.n	800a0b0 <__s2b+0x68>
 800a0d2:	bf00      	nop
 800a0d4:	0800d12c 	.word	0x0800d12c
 800a0d8:	0800d13d 	.word	0x0800d13d

0800a0dc <__hi0bits>:
 800a0dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	bf36      	itet	cc
 800a0e4:	0403      	lslcc	r3, r0, #16
 800a0e6:	2000      	movcs	r0, #0
 800a0e8:	2010      	movcc	r0, #16
 800a0ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a0ee:	bf3c      	itt	cc
 800a0f0:	021b      	lslcc	r3, r3, #8
 800a0f2:	3008      	addcc	r0, #8
 800a0f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0f8:	bf3c      	itt	cc
 800a0fa:	011b      	lslcc	r3, r3, #4
 800a0fc:	3004      	addcc	r0, #4
 800a0fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a102:	bf3c      	itt	cc
 800a104:	009b      	lslcc	r3, r3, #2
 800a106:	3002      	addcc	r0, #2
 800a108:	2b00      	cmp	r3, #0
 800a10a:	db05      	blt.n	800a118 <__hi0bits+0x3c>
 800a10c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a110:	f100 0001 	add.w	r0, r0, #1
 800a114:	bf08      	it	eq
 800a116:	2020      	moveq	r0, #32
 800a118:	4770      	bx	lr

0800a11a <__lo0bits>:
 800a11a:	6803      	ldr	r3, [r0, #0]
 800a11c:	4602      	mov	r2, r0
 800a11e:	f013 0007 	ands.w	r0, r3, #7
 800a122:	d00b      	beq.n	800a13c <__lo0bits+0x22>
 800a124:	07d9      	lsls	r1, r3, #31
 800a126:	d421      	bmi.n	800a16c <__lo0bits+0x52>
 800a128:	0798      	lsls	r0, r3, #30
 800a12a:	bf49      	itett	mi
 800a12c:	085b      	lsrmi	r3, r3, #1
 800a12e:	089b      	lsrpl	r3, r3, #2
 800a130:	2001      	movmi	r0, #1
 800a132:	6013      	strmi	r3, [r2, #0]
 800a134:	bf5c      	itt	pl
 800a136:	6013      	strpl	r3, [r2, #0]
 800a138:	2002      	movpl	r0, #2
 800a13a:	4770      	bx	lr
 800a13c:	b299      	uxth	r1, r3
 800a13e:	b909      	cbnz	r1, 800a144 <__lo0bits+0x2a>
 800a140:	0c1b      	lsrs	r3, r3, #16
 800a142:	2010      	movs	r0, #16
 800a144:	b2d9      	uxtb	r1, r3
 800a146:	b909      	cbnz	r1, 800a14c <__lo0bits+0x32>
 800a148:	3008      	adds	r0, #8
 800a14a:	0a1b      	lsrs	r3, r3, #8
 800a14c:	0719      	lsls	r1, r3, #28
 800a14e:	bf04      	itt	eq
 800a150:	091b      	lsreq	r3, r3, #4
 800a152:	3004      	addeq	r0, #4
 800a154:	0799      	lsls	r1, r3, #30
 800a156:	bf04      	itt	eq
 800a158:	089b      	lsreq	r3, r3, #2
 800a15a:	3002      	addeq	r0, #2
 800a15c:	07d9      	lsls	r1, r3, #31
 800a15e:	d403      	bmi.n	800a168 <__lo0bits+0x4e>
 800a160:	085b      	lsrs	r3, r3, #1
 800a162:	f100 0001 	add.w	r0, r0, #1
 800a166:	d003      	beq.n	800a170 <__lo0bits+0x56>
 800a168:	6013      	str	r3, [r2, #0]
 800a16a:	4770      	bx	lr
 800a16c:	2000      	movs	r0, #0
 800a16e:	4770      	bx	lr
 800a170:	2020      	movs	r0, #32
 800a172:	4770      	bx	lr

0800a174 <__i2b>:
 800a174:	b510      	push	{r4, lr}
 800a176:	460c      	mov	r4, r1
 800a178:	2101      	movs	r1, #1
 800a17a:	f7ff febd 	bl	8009ef8 <_Balloc>
 800a17e:	4602      	mov	r2, r0
 800a180:	b928      	cbnz	r0, 800a18e <__i2b+0x1a>
 800a182:	4b05      	ldr	r3, [pc, #20]	@ (800a198 <__i2b+0x24>)
 800a184:	4805      	ldr	r0, [pc, #20]	@ (800a19c <__i2b+0x28>)
 800a186:	f240 1145 	movw	r1, #325	@ 0x145
 800a18a:	f002 f84d 	bl	800c228 <__assert_func>
 800a18e:	2301      	movs	r3, #1
 800a190:	6144      	str	r4, [r0, #20]
 800a192:	6103      	str	r3, [r0, #16]
 800a194:	bd10      	pop	{r4, pc}
 800a196:	bf00      	nop
 800a198:	0800d12c 	.word	0x0800d12c
 800a19c:	0800d13d 	.word	0x0800d13d

0800a1a0 <__multiply>:
 800a1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a4:	4614      	mov	r4, r2
 800a1a6:	690a      	ldr	r2, [r1, #16]
 800a1a8:	6923      	ldr	r3, [r4, #16]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	bfa8      	it	ge
 800a1ae:	4623      	movge	r3, r4
 800a1b0:	460f      	mov	r7, r1
 800a1b2:	bfa4      	itt	ge
 800a1b4:	460c      	movge	r4, r1
 800a1b6:	461f      	movge	r7, r3
 800a1b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a1bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a1c0:	68a3      	ldr	r3, [r4, #8]
 800a1c2:	6861      	ldr	r1, [r4, #4]
 800a1c4:	eb0a 0609 	add.w	r6, sl, r9
 800a1c8:	42b3      	cmp	r3, r6
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	bfb8      	it	lt
 800a1ce:	3101      	addlt	r1, #1
 800a1d0:	f7ff fe92 	bl	8009ef8 <_Balloc>
 800a1d4:	b930      	cbnz	r0, 800a1e4 <__multiply+0x44>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	4b44      	ldr	r3, [pc, #272]	@ (800a2ec <__multiply+0x14c>)
 800a1da:	4845      	ldr	r0, [pc, #276]	@ (800a2f0 <__multiply+0x150>)
 800a1dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a1e0:	f002 f822 	bl	800c228 <__assert_func>
 800a1e4:	f100 0514 	add.w	r5, r0, #20
 800a1e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a1ec:	462b      	mov	r3, r5
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	4543      	cmp	r3, r8
 800a1f2:	d321      	bcc.n	800a238 <__multiply+0x98>
 800a1f4:	f107 0114 	add.w	r1, r7, #20
 800a1f8:	f104 0214 	add.w	r2, r4, #20
 800a1fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a200:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a204:	9302      	str	r3, [sp, #8]
 800a206:	1b13      	subs	r3, r2, r4
 800a208:	3b15      	subs	r3, #21
 800a20a:	f023 0303 	bic.w	r3, r3, #3
 800a20e:	3304      	adds	r3, #4
 800a210:	f104 0715 	add.w	r7, r4, #21
 800a214:	42ba      	cmp	r2, r7
 800a216:	bf38      	it	cc
 800a218:	2304      	movcc	r3, #4
 800a21a:	9301      	str	r3, [sp, #4]
 800a21c:	9b02      	ldr	r3, [sp, #8]
 800a21e:	9103      	str	r1, [sp, #12]
 800a220:	428b      	cmp	r3, r1
 800a222:	d80c      	bhi.n	800a23e <__multiply+0x9e>
 800a224:	2e00      	cmp	r6, #0
 800a226:	dd03      	ble.n	800a230 <__multiply+0x90>
 800a228:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d05b      	beq.n	800a2e8 <__multiply+0x148>
 800a230:	6106      	str	r6, [r0, #16]
 800a232:	b005      	add	sp, #20
 800a234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a238:	f843 2b04 	str.w	r2, [r3], #4
 800a23c:	e7d8      	b.n	800a1f0 <__multiply+0x50>
 800a23e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a242:	f1ba 0f00 	cmp.w	sl, #0
 800a246:	d024      	beq.n	800a292 <__multiply+0xf2>
 800a248:	f104 0e14 	add.w	lr, r4, #20
 800a24c:	46a9      	mov	r9, r5
 800a24e:	f04f 0c00 	mov.w	ip, #0
 800a252:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a256:	f8d9 3000 	ldr.w	r3, [r9]
 800a25a:	fa1f fb87 	uxth.w	fp, r7
 800a25e:	b29b      	uxth	r3, r3
 800a260:	fb0a 330b 	mla	r3, sl, fp, r3
 800a264:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a268:	f8d9 7000 	ldr.w	r7, [r9]
 800a26c:	4463      	add	r3, ip
 800a26e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a272:	fb0a c70b 	mla	r7, sl, fp, ip
 800a276:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a280:	4572      	cmp	r2, lr
 800a282:	f849 3b04 	str.w	r3, [r9], #4
 800a286:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a28a:	d8e2      	bhi.n	800a252 <__multiply+0xb2>
 800a28c:	9b01      	ldr	r3, [sp, #4]
 800a28e:	f845 c003 	str.w	ip, [r5, r3]
 800a292:	9b03      	ldr	r3, [sp, #12]
 800a294:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a298:	3104      	adds	r1, #4
 800a29a:	f1b9 0f00 	cmp.w	r9, #0
 800a29e:	d021      	beq.n	800a2e4 <__multiply+0x144>
 800a2a0:	682b      	ldr	r3, [r5, #0]
 800a2a2:	f104 0c14 	add.w	ip, r4, #20
 800a2a6:	46ae      	mov	lr, r5
 800a2a8:	f04f 0a00 	mov.w	sl, #0
 800a2ac:	f8bc b000 	ldrh.w	fp, [ip]
 800a2b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a2b4:	fb09 770b 	mla	r7, r9, fp, r7
 800a2b8:	4457      	add	r7, sl
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a2c0:	f84e 3b04 	str.w	r3, [lr], #4
 800a2c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a2c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a2cc:	f8be 3000 	ldrh.w	r3, [lr]
 800a2d0:	fb09 330a 	mla	r3, r9, sl, r3
 800a2d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a2d8:	4562      	cmp	r2, ip
 800a2da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a2de:	d8e5      	bhi.n	800a2ac <__multiply+0x10c>
 800a2e0:	9f01      	ldr	r7, [sp, #4]
 800a2e2:	51eb      	str	r3, [r5, r7]
 800a2e4:	3504      	adds	r5, #4
 800a2e6:	e799      	b.n	800a21c <__multiply+0x7c>
 800a2e8:	3e01      	subs	r6, #1
 800a2ea:	e79b      	b.n	800a224 <__multiply+0x84>
 800a2ec:	0800d12c 	.word	0x0800d12c
 800a2f0:	0800d13d 	.word	0x0800d13d

0800a2f4 <__pow5mult>:
 800a2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2f8:	4615      	mov	r5, r2
 800a2fa:	f012 0203 	ands.w	r2, r2, #3
 800a2fe:	4607      	mov	r7, r0
 800a300:	460e      	mov	r6, r1
 800a302:	d007      	beq.n	800a314 <__pow5mult+0x20>
 800a304:	4c25      	ldr	r4, [pc, #148]	@ (800a39c <__pow5mult+0xa8>)
 800a306:	3a01      	subs	r2, #1
 800a308:	2300      	movs	r3, #0
 800a30a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a30e:	f7ff fe55 	bl	8009fbc <__multadd>
 800a312:	4606      	mov	r6, r0
 800a314:	10ad      	asrs	r5, r5, #2
 800a316:	d03d      	beq.n	800a394 <__pow5mult+0xa0>
 800a318:	69fc      	ldr	r4, [r7, #28]
 800a31a:	b97c      	cbnz	r4, 800a33c <__pow5mult+0x48>
 800a31c:	2010      	movs	r0, #16
 800a31e:	f7ff fd35 	bl	8009d8c <malloc>
 800a322:	4602      	mov	r2, r0
 800a324:	61f8      	str	r0, [r7, #28]
 800a326:	b928      	cbnz	r0, 800a334 <__pow5mult+0x40>
 800a328:	4b1d      	ldr	r3, [pc, #116]	@ (800a3a0 <__pow5mult+0xac>)
 800a32a:	481e      	ldr	r0, [pc, #120]	@ (800a3a4 <__pow5mult+0xb0>)
 800a32c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a330:	f001 ff7a 	bl	800c228 <__assert_func>
 800a334:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a338:	6004      	str	r4, [r0, #0]
 800a33a:	60c4      	str	r4, [r0, #12]
 800a33c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a340:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a344:	b94c      	cbnz	r4, 800a35a <__pow5mult+0x66>
 800a346:	f240 2171 	movw	r1, #625	@ 0x271
 800a34a:	4638      	mov	r0, r7
 800a34c:	f7ff ff12 	bl	800a174 <__i2b>
 800a350:	2300      	movs	r3, #0
 800a352:	f8c8 0008 	str.w	r0, [r8, #8]
 800a356:	4604      	mov	r4, r0
 800a358:	6003      	str	r3, [r0, #0]
 800a35a:	f04f 0900 	mov.w	r9, #0
 800a35e:	07eb      	lsls	r3, r5, #31
 800a360:	d50a      	bpl.n	800a378 <__pow5mult+0x84>
 800a362:	4631      	mov	r1, r6
 800a364:	4622      	mov	r2, r4
 800a366:	4638      	mov	r0, r7
 800a368:	f7ff ff1a 	bl	800a1a0 <__multiply>
 800a36c:	4631      	mov	r1, r6
 800a36e:	4680      	mov	r8, r0
 800a370:	4638      	mov	r0, r7
 800a372:	f7ff fe01 	bl	8009f78 <_Bfree>
 800a376:	4646      	mov	r6, r8
 800a378:	106d      	asrs	r5, r5, #1
 800a37a:	d00b      	beq.n	800a394 <__pow5mult+0xa0>
 800a37c:	6820      	ldr	r0, [r4, #0]
 800a37e:	b938      	cbnz	r0, 800a390 <__pow5mult+0x9c>
 800a380:	4622      	mov	r2, r4
 800a382:	4621      	mov	r1, r4
 800a384:	4638      	mov	r0, r7
 800a386:	f7ff ff0b 	bl	800a1a0 <__multiply>
 800a38a:	6020      	str	r0, [r4, #0]
 800a38c:	f8c0 9000 	str.w	r9, [r0]
 800a390:	4604      	mov	r4, r0
 800a392:	e7e4      	b.n	800a35e <__pow5mult+0x6a>
 800a394:	4630      	mov	r0, r6
 800a396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a39a:	bf00      	nop
 800a39c:	0800d198 	.word	0x0800d198
 800a3a0:	0800d0bd 	.word	0x0800d0bd
 800a3a4:	0800d13d 	.word	0x0800d13d

0800a3a8 <__lshift>:
 800a3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3ac:	460c      	mov	r4, r1
 800a3ae:	6849      	ldr	r1, [r1, #4]
 800a3b0:	6923      	ldr	r3, [r4, #16]
 800a3b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a3b6:	68a3      	ldr	r3, [r4, #8]
 800a3b8:	4607      	mov	r7, r0
 800a3ba:	4691      	mov	r9, r2
 800a3bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a3c0:	f108 0601 	add.w	r6, r8, #1
 800a3c4:	42b3      	cmp	r3, r6
 800a3c6:	db0b      	blt.n	800a3e0 <__lshift+0x38>
 800a3c8:	4638      	mov	r0, r7
 800a3ca:	f7ff fd95 	bl	8009ef8 <_Balloc>
 800a3ce:	4605      	mov	r5, r0
 800a3d0:	b948      	cbnz	r0, 800a3e6 <__lshift+0x3e>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	4b28      	ldr	r3, [pc, #160]	@ (800a478 <__lshift+0xd0>)
 800a3d6:	4829      	ldr	r0, [pc, #164]	@ (800a47c <__lshift+0xd4>)
 800a3d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a3dc:	f001 ff24 	bl	800c228 <__assert_func>
 800a3e0:	3101      	adds	r1, #1
 800a3e2:	005b      	lsls	r3, r3, #1
 800a3e4:	e7ee      	b.n	800a3c4 <__lshift+0x1c>
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	f100 0114 	add.w	r1, r0, #20
 800a3ec:	f100 0210 	add.w	r2, r0, #16
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	4553      	cmp	r3, sl
 800a3f4:	db33      	blt.n	800a45e <__lshift+0xb6>
 800a3f6:	6920      	ldr	r0, [r4, #16]
 800a3f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a3fc:	f104 0314 	add.w	r3, r4, #20
 800a400:	f019 091f 	ands.w	r9, r9, #31
 800a404:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a408:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a40c:	d02b      	beq.n	800a466 <__lshift+0xbe>
 800a40e:	f1c9 0e20 	rsb	lr, r9, #32
 800a412:	468a      	mov	sl, r1
 800a414:	2200      	movs	r2, #0
 800a416:	6818      	ldr	r0, [r3, #0]
 800a418:	fa00 f009 	lsl.w	r0, r0, r9
 800a41c:	4310      	orrs	r0, r2
 800a41e:	f84a 0b04 	str.w	r0, [sl], #4
 800a422:	f853 2b04 	ldr.w	r2, [r3], #4
 800a426:	459c      	cmp	ip, r3
 800a428:	fa22 f20e 	lsr.w	r2, r2, lr
 800a42c:	d8f3      	bhi.n	800a416 <__lshift+0x6e>
 800a42e:	ebac 0304 	sub.w	r3, ip, r4
 800a432:	3b15      	subs	r3, #21
 800a434:	f023 0303 	bic.w	r3, r3, #3
 800a438:	3304      	adds	r3, #4
 800a43a:	f104 0015 	add.w	r0, r4, #21
 800a43e:	4584      	cmp	ip, r0
 800a440:	bf38      	it	cc
 800a442:	2304      	movcc	r3, #4
 800a444:	50ca      	str	r2, [r1, r3]
 800a446:	b10a      	cbz	r2, 800a44c <__lshift+0xa4>
 800a448:	f108 0602 	add.w	r6, r8, #2
 800a44c:	3e01      	subs	r6, #1
 800a44e:	4638      	mov	r0, r7
 800a450:	612e      	str	r6, [r5, #16]
 800a452:	4621      	mov	r1, r4
 800a454:	f7ff fd90 	bl	8009f78 <_Bfree>
 800a458:	4628      	mov	r0, r5
 800a45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a45e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a462:	3301      	adds	r3, #1
 800a464:	e7c5      	b.n	800a3f2 <__lshift+0x4a>
 800a466:	3904      	subs	r1, #4
 800a468:	f853 2b04 	ldr.w	r2, [r3], #4
 800a46c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a470:	459c      	cmp	ip, r3
 800a472:	d8f9      	bhi.n	800a468 <__lshift+0xc0>
 800a474:	e7ea      	b.n	800a44c <__lshift+0xa4>
 800a476:	bf00      	nop
 800a478:	0800d12c 	.word	0x0800d12c
 800a47c:	0800d13d 	.word	0x0800d13d

0800a480 <__mcmp>:
 800a480:	690a      	ldr	r2, [r1, #16]
 800a482:	4603      	mov	r3, r0
 800a484:	6900      	ldr	r0, [r0, #16]
 800a486:	1a80      	subs	r0, r0, r2
 800a488:	b530      	push	{r4, r5, lr}
 800a48a:	d10e      	bne.n	800a4aa <__mcmp+0x2a>
 800a48c:	3314      	adds	r3, #20
 800a48e:	3114      	adds	r1, #20
 800a490:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a494:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a498:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a49c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a4a0:	4295      	cmp	r5, r2
 800a4a2:	d003      	beq.n	800a4ac <__mcmp+0x2c>
 800a4a4:	d205      	bcs.n	800a4b2 <__mcmp+0x32>
 800a4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4aa:	bd30      	pop	{r4, r5, pc}
 800a4ac:	42a3      	cmp	r3, r4
 800a4ae:	d3f3      	bcc.n	800a498 <__mcmp+0x18>
 800a4b0:	e7fb      	b.n	800a4aa <__mcmp+0x2a>
 800a4b2:	2001      	movs	r0, #1
 800a4b4:	e7f9      	b.n	800a4aa <__mcmp+0x2a>
	...

0800a4b8 <__mdiff>:
 800a4b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4bc:	4689      	mov	r9, r1
 800a4be:	4606      	mov	r6, r0
 800a4c0:	4611      	mov	r1, r2
 800a4c2:	4648      	mov	r0, r9
 800a4c4:	4614      	mov	r4, r2
 800a4c6:	f7ff ffdb 	bl	800a480 <__mcmp>
 800a4ca:	1e05      	subs	r5, r0, #0
 800a4cc:	d112      	bne.n	800a4f4 <__mdiff+0x3c>
 800a4ce:	4629      	mov	r1, r5
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f7ff fd11 	bl	8009ef8 <_Balloc>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	b928      	cbnz	r0, 800a4e6 <__mdiff+0x2e>
 800a4da:	4b3f      	ldr	r3, [pc, #252]	@ (800a5d8 <__mdiff+0x120>)
 800a4dc:	f240 2137 	movw	r1, #567	@ 0x237
 800a4e0:	483e      	ldr	r0, [pc, #248]	@ (800a5dc <__mdiff+0x124>)
 800a4e2:	f001 fea1 	bl	800c228 <__assert_func>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a4ec:	4610      	mov	r0, r2
 800a4ee:	b003      	add	sp, #12
 800a4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f4:	bfbc      	itt	lt
 800a4f6:	464b      	movlt	r3, r9
 800a4f8:	46a1      	movlt	r9, r4
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a500:	bfba      	itte	lt
 800a502:	461c      	movlt	r4, r3
 800a504:	2501      	movlt	r5, #1
 800a506:	2500      	movge	r5, #0
 800a508:	f7ff fcf6 	bl	8009ef8 <_Balloc>
 800a50c:	4602      	mov	r2, r0
 800a50e:	b918      	cbnz	r0, 800a518 <__mdiff+0x60>
 800a510:	4b31      	ldr	r3, [pc, #196]	@ (800a5d8 <__mdiff+0x120>)
 800a512:	f240 2145 	movw	r1, #581	@ 0x245
 800a516:	e7e3      	b.n	800a4e0 <__mdiff+0x28>
 800a518:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a51c:	6926      	ldr	r6, [r4, #16]
 800a51e:	60c5      	str	r5, [r0, #12]
 800a520:	f109 0310 	add.w	r3, r9, #16
 800a524:	f109 0514 	add.w	r5, r9, #20
 800a528:	f104 0e14 	add.w	lr, r4, #20
 800a52c:	f100 0b14 	add.w	fp, r0, #20
 800a530:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a534:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a538:	9301      	str	r3, [sp, #4]
 800a53a:	46d9      	mov	r9, fp
 800a53c:	f04f 0c00 	mov.w	ip, #0
 800a540:	9b01      	ldr	r3, [sp, #4]
 800a542:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a546:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a54a:	9301      	str	r3, [sp, #4]
 800a54c:	fa1f f38a 	uxth.w	r3, sl
 800a550:	4619      	mov	r1, r3
 800a552:	b283      	uxth	r3, r0
 800a554:	1acb      	subs	r3, r1, r3
 800a556:	0c00      	lsrs	r0, r0, #16
 800a558:	4463      	add	r3, ip
 800a55a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a55e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a562:	b29b      	uxth	r3, r3
 800a564:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a568:	4576      	cmp	r6, lr
 800a56a:	f849 3b04 	str.w	r3, [r9], #4
 800a56e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a572:	d8e5      	bhi.n	800a540 <__mdiff+0x88>
 800a574:	1b33      	subs	r3, r6, r4
 800a576:	3b15      	subs	r3, #21
 800a578:	f023 0303 	bic.w	r3, r3, #3
 800a57c:	3415      	adds	r4, #21
 800a57e:	3304      	adds	r3, #4
 800a580:	42a6      	cmp	r6, r4
 800a582:	bf38      	it	cc
 800a584:	2304      	movcc	r3, #4
 800a586:	441d      	add	r5, r3
 800a588:	445b      	add	r3, fp
 800a58a:	461e      	mov	r6, r3
 800a58c:	462c      	mov	r4, r5
 800a58e:	4544      	cmp	r4, r8
 800a590:	d30e      	bcc.n	800a5b0 <__mdiff+0xf8>
 800a592:	f108 0103 	add.w	r1, r8, #3
 800a596:	1b49      	subs	r1, r1, r5
 800a598:	f021 0103 	bic.w	r1, r1, #3
 800a59c:	3d03      	subs	r5, #3
 800a59e:	45a8      	cmp	r8, r5
 800a5a0:	bf38      	it	cc
 800a5a2:	2100      	movcc	r1, #0
 800a5a4:	440b      	add	r3, r1
 800a5a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a5aa:	b191      	cbz	r1, 800a5d2 <__mdiff+0x11a>
 800a5ac:	6117      	str	r7, [r2, #16]
 800a5ae:	e79d      	b.n	800a4ec <__mdiff+0x34>
 800a5b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800a5b4:	46e6      	mov	lr, ip
 800a5b6:	0c08      	lsrs	r0, r1, #16
 800a5b8:	fa1c fc81 	uxtah	ip, ip, r1
 800a5bc:	4471      	add	r1, lr
 800a5be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a5c2:	b289      	uxth	r1, r1
 800a5c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a5c8:	f846 1b04 	str.w	r1, [r6], #4
 800a5cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a5d0:	e7dd      	b.n	800a58e <__mdiff+0xd6>
 800a5d2:	3f01      	subs	r7, #1
 800a5d4:	e7e7      	b.n	800a5a6 <__mdiff+0xee>
 800a5d6:	bf00      	nop
 800a5d8:	0800d12c 	.word	0x0800d12c
 800a5dc:	0800d13d 	.word	0x0800d13d

0800a5e0 <__ulp>:
 800a5e0:	b082      	sub	sp, #8
 800a5e2:	ed8d 0b00 	vstr	d0, [sp]
 800a5e6:	9a01      	ldr	r2, [sp, #4]
 800a5e8:	4b0f      	ldr	r3, [pc, #60]	@ (800a628 <__ulp+0x48>)
 800a5ea:	4013      	ands	r3, r2
 800a5ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	dc08      	bgt.n	800a606 <__ulp+0x26>
 800a5f4:	425b      	negs	r3, r3
 800a5f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a5fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a5fe:	da04      	bge.n	800a60a <__ulp+0x2a>
 800a600:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a604:	4113      	asrs	r3, r2
 800a606:	2200      	movs	r2, #0
 800a608:	e008      	b.n	800a61c <__ulp+0x3c>
 800a60a:	f1a2 0314 	sub.w	r3, r2, #20
 800a60e:	2b1e      	cmp	r3, #30
 800a610:	bfda      	itte	le
 800a612:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a616:	40da      	lsrle	r2, r3
 800a618:	2201      	movgt	r2, #1
 800a61a:	2300      	movs	r3, #0
 800a61c:	4619      	mov	r1, r3
 800a61e:	4610      	mov	r0, r2
 800a620:	ec41 0b10 	vmov	d0, r0, r1
 800a624:	b002      	add	sp, #8
 800a626:	4770      	bx	lr
 800a628:	7ff00000 	.word	0x7ff00000

0800a62c <__b2d>:
 800a62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a630:	6906      	ldr	r6, [r0, #16]
 800a632:	f100 0814 	add.w	r8, r0, #20
 800a636:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a63a:	1f37      	subs	r7, r6, #4
 800a63c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a640:	4610      	mov	r0, r2
 800a642:	f7ff fd4b 	bl	800a0dc <__hi0bits>
 800a646:	f1c0 0320 	rsb	r3, r0, #32
 800a64a:	280a      	cmp	r0, #10
 800a64c:	600b      	str	r3, [r1, #0]
 800a64e:	491b      	ldr	r1, [pc, #108]	@ (800a6bc <__b2d+0x90>)
 800a650:	dc15      	bgt.n	800a67e <__b2d+0x52>
 800a652:	f1c0 0c0b 	rsb	ip, r0, #11
 800a656:	fa22 f30c 	lsr.w	r3, r2, ip
 800a65a:	45b8      	cmp	r8, r7
 800a65c:	ea43 0501 	orr.w	r5, r3, r1
 800a660:	bf34      	ite	cc
 800a662:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a666:	2300      	movcs	r3, #0
 800a668:	3015      	adds	r0, #21
 800a66a:	fa02 f000 	lsl.w	r0, r2, r0
 800a66e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a672:	4303      	orrs	r3, r0
 800a674:	461c      	mov	r4, r3
 800a676:	ec45 4b10 	vmov	d0, r4, r5
 800a67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a67e:	45b8      	cmp	r8, r7
 800a680:	bf3a      	itte	cc
 800a682:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a686:	f1a6 0708 	subcc.w	r7, r6, #8
 800a68a:	2300      	movcs	r3, #0
 800a68c:	380b      	subs	r0, #11
 800a68e:	d012      	beq.n	800a6b6 <__b2d+0x8a>
 800a690:	f1c0 0120 	rsb	r1, r0, #32
 800a694:	fa23 f401 	lsr.w	r4, r3, r1
 800a698:	4082      	lsls	r2, r0
 800a69a:	4322      	orrs	r2, r4
 800a69c:	4547      	cmp	r7, r8
 800a69e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a6a2:	bf8c      	ite	hi
 800a6a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a6a8:	2200      	movls	r2, #0
 800a6aa:	4083      	lsls	r3, r0
 800a6ac:	40ca      	lsrs	r2, r1
 800a6ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	e7de      	b.n	800a674 <__b2d+0x48>
 800a6b6:	ea42 0501 	orr.w	r5, r2, r1
 800a6ba:	e7db      	b.n	800a674 <__b2d+0x48>
 800a6bc:	3ff00000 	.word	0x3ff00000

0800a6c0 <__d2b>:
 800a6c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6c4:	460f      	mov	r7, r1
 800a6c6:	2101      	movs	r1, #1
 800a6c8:	ec59 8b10 	vmov	r8, r9, d0
 800a6cc:	4616      	mov	r6, r2
 800a6ce:	f7ff fc13 	bl	8009ef8 <_Balloc>
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	b930      	cbnz	r0, 800a6e4 <__d2b+0x24>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	4b23      	ldr	r3, [pc, #140]	@ (800a768 <__d2b+0xa8>)
 800a6da:	4824      	ldr	r0, [pc, #144]	@ (800a76c <__d2b+0xac>)
 800a6dc:	f240 310f 	movw	r1, #783	@ 0x30f
 800a6e0:	f001 fda2 	bl	800c228 <__assert_func>
 800a6e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a6e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6ec:	b10d      	cbz	r5, 800a6f2 <__d2b+0x32>
 800a6ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a6f2:	9301      	str	r3, [sp, #4]
 800a6f4:	f1b8 0300 	subs.w	r3, r8, #0
 800a6f8:	d023      	beq.n	800a742 <__d2b+0x82>
 800a6fa:	4668      	mov	r0, sp
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	f7ff fd0c 	bl	800a11a <__lo0bits>
 800a702:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a706:	b1d0      	cbz	r0, 800a73e <__d2b+0x7e>
 800a708:	f1c0 0320 	rsb	r3, r0, #32
 800a70c:	fa02 f303 	lsl.w	r3, r2, r3
 800a710:	430b      	orrs	r3, r1
 800a712:	40c2      	lsrs	r2, r0
 800a714:	6163      	str	r3, [r4, #20]
 800a716:	9201      	str	r2, [sp, #4]
 800a718:	9b01      	ldr	r3, [sp, #4]
 800a71a:	61a3      	str	r3, [r4, #24]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	bf0c      	ite	eq
 800a720:	2201      	moveq	r2, #1
 800a722:	2202      	movne	r2, #2
 800a724:	6122      	str	r2, [r4, #16]
 800a726:	b1a5      	cbz	r5, 800a752 <__d2b+0x92>
 800a728:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a72c:	4405      	add	r5, r0
 800a72e:	603d      	str	r5, [r7, #0]
 800a730:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a734:	6030      	str	r0, [r6, #0]
 800a736:	4620      	mov	r0, r4
 800a738:	b003      	add	sp, #12
 800a73a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a73e:	6161      	str	r1, [r4, #20]
 800a740:	e7ea      	b.n	800a718 <__d2b+0x58>
 800a742:	a801      	add	r0, sp, #4
 800a744:	f7ff fce9 	bl	800a11a <__lo0bits>
 800a748:	9b01      	ldr	r3, [sp, #4]
 800a74a:	6163      	str	r3, [r4, #20]
 800a74c:	3020      	adds	r0, #32
 800a74e:	2201      	movs	r2, #1
 800a750:	e7e8      	b.n	800a724 <__d2b+0x64>
 800a752:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a756:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a75a:	6038      	str	r0, [r7, #0]
 800a75c:	6918      	ldr	r0, [r3, #16]
 800a75e:	f7ff fcbd 	bl	800a0dc <__hi0bits>
 800a762:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a766:	e7e5      	b.n	800a734 <__d2b+0x74>
 800a768:	0800d12c 	.word	0x0800d12c
 800a76c:	0800d13d 	.word	0x0800d13d

0800a770 <__ratio>:
 800a770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a774:	b085      	sub	sp, #20
 800a776:	e9cd 1000 	strd	r1, r0, [sp]
 800a77a:	a902      	add	r1, sp, #8
 800a77c:	f7ff ff56 	bl	800a62c <__b2d>
 800a780:	9800      	ldr	r0, [sp, #0]
 800a782:	a903      	add	r1, sp, #12
 800a784:	ec55 4b10 	vmov	r4, r5, d0
 800a788:	f7ff ff50 	bl	800a62c <__b2d>
 800a78c:	9b01      	ldr	r3, [sp, #4]
 800a78e:	6919      	ldr	r1, [r3, #16]
 800a790:	9b00      	ldr	r3, [sp, #0]
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	1ac9      	subs	r1, r1, r3
 800a796:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a79a:	1a9b      	subs	r3, r3, r2
 800a79c:	ec5b ab10 	vmov	sl, fp, d0
 800a7a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	bfce      	itee	gt
 800a7a8:	462a      	movgt	r2, r5
 800a7aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a7ae:	465a      	movle	r2, fp
 800a7b0:	462f      	mov	r7, r5
 800a7b2:	46d9      	mov	r9, fp
 800a7b4:	bfcc      	ite	gt
 800a7b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a7ba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a7be:	464b      	mov	r3, r9
 800a7c0:	4652      	mov	r2, sl
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	4639      	mov	r1, r7
 800a7c6:	f7f6 f841 	bl	800084c <__aeabi_ddiv>
 800a7ca:	ec41 0b10 	vmov	d0, r0, r1
 800a7ce:	b005      	add	sp, #20
 800a7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a7d4 <__copybits>:
 800a7d4:	3901      	subs	r1, #1
 800a7d6:	b570      	push	{r4, r5, r6, lr}
 800a7d8:	1149      	asrs	r1, r1, #5
 800a7da:	6914      	ldr	r4, [r2, #16]
 800a7dc:	3101      	adds	r1, #1
 800a7de:	f102 0314 	add.w	r3, r2, #20
 800a7e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a7e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a7ea:	1f05      	subs	r5, r0, #4
 800a7ec:	42a3      	cmp	r3, r4
 800a7ee:	d30c      	bcc.n	800a80a <__copybits+0x36>
 800a7f0:	1aa3      	subs	r3, r4, r2
 800a7f2:	3b11      	subs	r3, #17
 800a7f4:	f023 0303 	bic.w	r3, r3, #3
 800a7f8:	3211      	adds	r2, #17
 800a7fa:	42a2      	cmp	r2, r4
 800a7fc:	bf88      	it	hi
 800a7fe:	2300      	movhi	r3, #0
 800a800:	4418      	add	r0, r3
 800a802:	2300      	movs	r3, #0
 800a804:	4288      	cmp	r0, r1
 800a806:	d305      	bcc.n	800a814 <__copybits+0x40>
 800a808:	bd70      	pop	{r4, r5, r6, pc}
 800a80a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a80e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a812:	e7eb      	b.n	800a7ec <__copybits+0x18>
 800a814:	f840 3b04 	str.w	r3, [r0], #4
 800a818:	e7f4      	b.n	800a804 <__copybits+0x30>

0800a81a <__any_on>:
 800a81a:	f100 0214 	add.w	r2, r0, #20
 800a81e:	6900      	ldr	r0, [r0, #16]
 800a820:	114b      	asrs	r3, r1, #5
 800a822:	4298      	cmp	r0, r3
 800a824:	b510      	push	{r4, lr}
 800a826:	db11      	blt.n	800a84c <__any_on+0x32>
 800a828:	dd0a      	ble.n	800a840 <__any_on+0x26>
 800a82a:	f011 011f 	ands.w	r1, r1, #31
 800a82e:	d007      	beq.n	800a840 <__any_on+0x26>
 800a830:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a834:	fa24 f001 	lsr.w	r0, r4, r1
 800a838:	fa00 f101 	lsl.w	r1, r0, r1
 800a83c:	428c      	cmp	r4, r1
 800a83e:	d10b      	bne.n	800a858 <__any_on+0x3e>
 800a840:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a844:	4293      	cmp	r3, r2
 800a846:	d803      	bhi.n	800a850 <__any_on+0x36>
 800a848:	2000      	movs	r0, #0
 800a84a:	bd10      	pop	{r4, pc}
 800a84c:	4603      	mov	r3, r0
 800a84e:	e7f7      	b.n	800a840 <__any_on+0x26>
 800a850:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a854:	2900      	cmp	r1, #0
 800a856:	d0f5      	beq.n	800a844 <__any_on+0x2a>
 800a858:	2001      	movs	r0, #1
 800a85a:	e7f6      	b.n	800a84a <__any_on+0x30>

0800a85c <sulp>:
 800a85c:	b570      	push	{r4, r5, r6, lr}
 800a85e:	4604      	mov	r4, r0
 800a860:	460d      	mov	r5, r1
 800a862:	ec45 4b10 	vmov	d0, r4, r5
 800a866:	4616      	mov	r6, r2
 800a868:	f7ff feba 	bl	800a5e0 <__ulp>
 800a86c:	ec51 0b10 	vmov	r0, r1, d0
 800a870:	b17e      	cbz	r6, 800a892 <sulp+0x36>
 800a872:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a876:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	dd09      	ble.n	800a892 <sulp+0x36>
 800a87e:	051b      	lsls	r3, r3, #20
 800a880:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a884:	2400      	movs	r4, #0
 800a886:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a88a:	4622      	mov	r2, r4
 800a88c:	462b      	mov	r3, r5
 800a88e:	f7f5 feb3 	bl	80005f8 <__aeabi_dmul>
 800a892:	ec41 0b10 	vmov	d0, r0, r1
 800a896:	bd70      	pop	{r4, r5, r6, pc}

0800a898 <_strtod_l>:
 800a898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a89c:	b09f      	sub	sp, #124	@ 0x7c
 800a89e:	460c      	mov	r4, r1
 800a8a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	921a      	str	r2, [sp, #104]	@ 0x68
 800a8a6:	9005      	str	r0, [sp, #20]
 800a8a8:	f04f 0a00 	mov.w	sl, #0
 800a8ac:	f04f 0b00 	mov.w	fp, #0
 800a8b0:	460a      	mov	r2, r1
 800a8b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a8b4:	7811      	ldrb	r1, [r2, #0]
 800a8b6:	292b      	cmp	r1, #43	@ 0x2b
 800a8b8:	d04a      	beq.n	800a950 <_strtod_l+0xb8>
 800a8ba:	d838      	bhi.n	800a92e <_strtod_l+0x96>
 800a8bc:	290d      	cmp	r1, #13
 800a8be:	d832      	bhi.n	800a926 <_strtod_l+0x8e>
 800a8c0:	2908      	cmp	r1, #8
 800a8c2:	d832      	bhi.n	800a92a <_strtod_l+0x92>
 800a8c4:	2900      	cmp	r1, #0
 800a8c6:	d03b      	beq.n	800a940 <_strtod_l+0xa8>
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a8cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a8ce:	782a      	ldrb	r2, [r5, #0]
 800a8d0:	2a30      	cmp	r2, #48	@ 0x30
 800a8d2:	f040 80b3 	bne.w	800aa3c <_strtod_l+0x1a4>
 800a8d6:	786a      	ldrb	r2, [r5, #1]
 800a8d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a8dc:	2a58      	cmp	r2, #88	@ 0x58
 800a8de:	d16e      	bne.n	800a9be <_strtod_l+0x126>
 800a8e0:	9302      	str	r3, [sp, #8]
 800a8e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8e4:	9301      	str	r3, [sp, #4]
 800a8e6:	ab1a      	add	r3, sp, #104	@ 0x68
 800a8e8:	9300      	str	r3, [sp, #0]
 800a8ea:	4a8e      	ldr	r2, [pc, #568]	@ (800ab24 <_strtod_l+0x28c>)
 800a8ec:	9805      	ldr	r0, [sp, #20]
 800a8ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a8f0:	a919      	add	r1, sp, #100	@ 0x64
 800a8f2:	f001 fd33 	bl	800c35c <__gethex>
 800a8f6:	f010 060f 	ands.w	r6, r0, #15
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	d005      	beq.n	800a90a <_strtod_l+0x72>
 800a8fe:	2e06      	cmp	r6, #6
 800a900:	d128      	bne.n	800a954 <_strtod_l+0xbc>
 800a902:	3501      	adds	r5, #1
 800a904:	2300      	movs	r3, #0
 800a906:	9519      	str	r5, [sp, #100]	@ 0x64
 800a908:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a90a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f040 858e 	bne.w	800b42e <_strtod_l+0xb96>
 800a912:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a914:	b1cb      	cbz	r3, 800a94a <_strtod_l+0xb2>
 800a916:	4652      	mov	r2, sl
 800a918:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a91c:	ec43 2b10 	vmov	d0, r2, r3
 800a920:	b01f      	add	sp, #124	@ 0x7c
 800a922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a926:	2920      	cmp	r1, #32
 800a928:	d1ce      	bne.n	800a8c8 <_strtod_l+0x30>
 800a92a:	3201      	adds	r2, #1
 800a92c:	e7c1      	b.n	800a8b2 <_strtod_l+0x1a>
 800a92e:	292d      	cmp	r1, #45	@ 0x2d
 800a930:	d1ca      	bne.n	800a8c8 <_strtod_l+0x30>
 800a932:	2101      	movs	r1, #1
 800a934:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a936:	1c51      	adds	r1, r2, #1
 800a938:	9119      	str	r1, [sp, #100]	@ 0x64
 800a93a:	7852      	ldrb	r2, [r2, #1]
 800a93c:	2a00      	cmp	r2, #0
 800a93e:	d1c5      	bne.n	800a8cc <_strtod_l+0x34>
 800a940:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a942:	9419      	str	r4, [sp, #100]	@ 0x64
 800a944:	2b00      	cmp	r3, #0
 800a946:	f040 8570 	bne.w	800b42a <_strtod_l+0xb92>
 800a94a:	4652      	mov	r2, sl
 800a94c:	465b      	mov	r3, fp
 800a94e:	e7e5      	b.n	800a91c <_strtod_l+0x84>
 800a950:	2100      	movs	r1, #0
 800a952:	e7ef      	b.n	800a934 <_strtod_l+0x9c>
 800a954:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a956:	b13a      	cbz	r2, 800a968 <_strtod_l+0xd0>
 800a958:	2135      	movs	r1, #53	@ 0x35
 800a95a:	a81c      	add	r0, sp, #112	@ 0x70
 800a95c:	f7ff ff3a 	bl	800a7d4 <__copybits>
 800a960:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a962:	9805      	ldr	r0, [sp, #20]
 800a964:	f7ff fb08 	bl	8009f78 <_Bfree>
 800a968:	3e01      	subs	r6, #1
 800a96a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a96c:	2e04      	cmp	r6, #4
 800a96e:	d806      	bhi.n	800a97e <_strtod_l+0xe6>
 800a970:	e8df f006 	tbb	[pc, r6]
 800a974:	201d0314 	.word	0x201d0314
 800a978:	14          	.byte	0x14
 800a979:	00          	.byte	0x00
 800a97a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a97e:	05e1      	lsls	r1, r4, #23
 800a980:	bf48      	it	mi
 800a982:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a986:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a98a:	0d1b      	lsrs	r3, r3, #20
 800a98c:	051b      	lsls	r3, r3, #20
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d1bb      	bne.n	800a90a <_strtod_l+0x72>
 800a992:	f7fe fb23 	bl	8008fdc <__errno>
 800a996:	2322      	movs	r3, #34	@ 0x22
 800a998:	6003      	str	r3, [r0, #0]
 800a99a:	e7b6      	b.n	800a90a <_strtod_l+0x72>
 800a99c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a9a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a9a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a9a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a9ac:	e7e7      	b.n	800a97e <_strtod_l+0xe6>
 800a9ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ab2c <_strtod_l+0x294>
 800a9b2:	e7e4      	b.n	800a97e <_strtod_l+0xe6>
 800a9b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a9b8:	f04f 3aff 	mov.w	sl, #4294967295
 800a9bc:	e7df      	b.n	800a97e <_strtod_l+0xe6>
 800a9be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9c0:	1c5a      	adds	r2, r3, #1
 800a9c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9c4:	785b      	ldrb	r3, [r3, #1]
 800a9c6:	2b30      	cmp	r3, #48	@ 0x30
 800a9c8:	d0f9      	beq.n	800a9be <_strtod_l+0x126>
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d09d      	beq.n	800a90a <_strtod_l+0x72>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	9308      	str	r3, [sp, #32]
 800a9da:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9dc:	461f      	mov	r7, r3
 800a9de:	220a      	movs	r2, #10
 800a9e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a9e2:	7805      	ldrb	r5, [r0, #0]
 800a9e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a9e8:	b2d9      	uxtb	r1, r3
 800a9ea:	2909      	cmp	r1, #9
 800a9ec:	d928      	bls.n	800aa40 <_strtod_l+0x1a8>
 800a9ee:	494e      	ldr	r1, [pc, #312]	@ (800ab28 <_strtod_l+0x290>)
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	f7fe fa97 	bl	8008f24 <strncmp>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	d032      	beq.n	800aa60 <_strtod_l+0x1c8>
 800a9fa:	2000      	movs	r0, #0
 800a9fc:	462a      	mov	r2, r5
 800a9fe:	4681      	mov	r9, r0
 800aa00:	463d      	mov	r5, r7
 800aa02:	4603      	mov	r3, r0
 800aa04:	2a65      	cmp	r2, #101	@ 0x65
 800aa06:	d001      	beq.n	800aa0c <_strtod_l+0x174>
 800aa08:	2a45      	cmp	r2, #69	@ 0x45
 800aa0a:	d114      	bne.n	800aa36 <_strtod_l+0x19e>
 800aa0c:	b91d      	cbnz	r5, 800aa16 <_strtod_l+0x17e>
 800aa0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa10:	4302      	orrs	r2, r0
 800aa12:	d095      	beq.n	800a940 <_strtod_l+0xa8>
 800aa14:	2500      	movs	r5, #0
 800aa16:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800aa18:	1c62      	adds	r2, r4, #1
 800aa1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa1c:	7862      	ldrb	r2, [r4, #1]
 800aa1e:	2a2b      	cmp	r2, #43	@ 0x2b
 800aa20:	d077      	beq.n	800ab12 <_strtod_l+0x27a>
 800aa22:	2a2d      	cmp	r2, #45	@ 0x2d
 800aa24:	d07b      	beq.n	800ab1e <_strtod_l+0x286>
 800aa26:	f04f 0c00 	mov.w	ip, #0
 800aa2a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800aa2e:	2909      	cmp	r1, #9
 800aa30:	f240 8082 	bls.w	800ab38 <_strtod_l+0x2a0>
 800aa34:	9419      	str	r4, [sp, #100]	@ 0x64
 800aa36:	f04f 0800 	mov.w	r8, #0
 800aa3a:	e0a2      	b.n	800ab82 <_strtod_l+0x2ea>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	e7c7      	b.n	800a9d0 <_strtod_l+0x138>
 800aa40:	2f08      	cmp	r7, #8
 800aa42:	bfd5      	itete	le
 800aa44:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800aa46:	9908      	ldrgt	r1, [sp, #32]
 800aa48:	fb02 3301 	mlale	r3, r2, r1, r3
 800aa4c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800aa50:	f100 0001 	add.w	r0, r0, #1
 800aa54:	bfd4      	ite	le
 800aa56:	930a      	strle	r3, [sp, #40]	@ 0x28
 800aa58:	9308      	strgt	r3, [sp, #32]
 800aa5a:	3701      	adds	r7, #1
 800aa5c:	9019      	str	r0, [sp, #100]	@ 0x64
 800aa5e:	e7bf      	b.n	800a9e0 <_strtod_l+0x148>
 800aa60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa62:	1c5a      	adds	r2, r3, #1
 800aa64:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa66:	785a      	ldrb	r2, [r3, #1]
 800aa68:	b37f      	cbz	r7, 800aaca <_strtod_l+0x232>
 800aa6a:	4681      	mov	r9, r0
 800aa6c:	463d      	mov	r5, r7
 800aa6e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800aa72:	2b09      	cmp	r3, #9
 800aa74:	d912      	bls.n	800aa9c <_strtod_l+0x204>
 800aa76:	2301      	movs	r3, #1
 800aa78:	e7c4      	b.n	800aa04 <_strtod_l+0x16c>
 800aa7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa7c:	1c5a      	adds	r2, r3, #1
 800aa7e:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa80:	785a      	ldrb	r2, [r3, #1]
 800aa82:	3001      	adds	r0, #1
 800aa84:	2a30      	cmp	r2, #48	@ 0x30
 800aa86:	d0f8      	beq.n	800aa7a <_strtod_l+0x1e2>
 800aa88:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800aa8c:	2b08      	cmp	r3, #8
 800aa8e:	f200 84d3 	bhi.w	800b438 <_strtod_l+0xba0>
 800aa92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa94:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa96:	4681      	mov	r9, r0
 800aa98:	2000      	movs	r0, #0
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	3a30      	subs	r2, #48	@ 0x30
 800aa9e:	f100 0301 	add.w	r3, r0, #1
 800aaa2:	d02a      	beq.n	800aafa <_strtod_l+0x262>
 800aaa4:	4499      	add	r9, r3
 800aaa6:	eb00 0c05 	add.w	ip, r0, r5
 800aaaa:	462b      	mov	r3, r5
 800aaac:	210a      	movs	r1, #10
 800aaae:	4563      	cmp	r3, ip
 800aab0:	d10d      	bne.n	800aace <_strtod_l+0x236>
 800aab2:	1c69      	adds	r1, r5, #1
 800aab4:	4401      	add	r1, r0
 800aab6:	4428      	add	r0, r5
 800aab8:	2808      	cmp	r0, #8
 800aaba:	dc16      	bgt.n	800aaea <_strtod_l+0x252>
 800aabc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aabe:	230a      	movs	r3, #10
 800aac0:	fb03 2300 	mla	r3, r3, r0, r2
 800aac4:	930a      	str	r3, [sp, #40]	@ 0x28
 800aac6:	2300      	movs	r3, #0
 800aac8:	e018      	b.n	800aafc <_strtod_l+0x264>
 800aaca:	4638      	mov	r0, r7
 800aacc:	e7da      	b.n	800aa84 <_strtod_l+0x1ec>
 800aace:	2b08      	cmp	r3, #8
 800aad0:	f103 0301 	add.w	r3, r3, #1
 800aad4:	dc03      	bgt.n	800aade <_strtod_l+0x246>
 800aad6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800aad8:	434e      	muls	r6, r1
 800aada:	960a      	str	r6, [sp, #40]	@ 0x28
 800aadc:	e7e7      	b.n	800aaae <_strtod_l+0x216>
 800aade:	2b10      	cmp	r3, #16
 800aae0:	bfde      	ittt	le
 800aae2:	9e08      	ldrle	r6, [sp, #32]
 800aae4:	434e      	mulle	r6, r1
 800aae6:	9608      	strle	r6, [sp, #32]
 800aae8:	e7e1      	b.n	800aaae <_strtod_l+0x216>
 800aaea:	280f      	cmp	r0, #15
 800aaec:	dceb      	bgt.n	800aac6 <_strtod_l+0x22e>
 800aaee:	9808      	ldr	r0, [sp, #32]
 800aaf0:	230a      	movs	r3, #10
 800aaf2:	fb03 2300 	mla	r3, r3, r0, r2
 800aaf6:	9308      	str	r3, [sp, #32]
 800aaf8:	e7e5      	b.n	800aac6 <_strtod_l+0x22e>
 800aafa:	4629      	mov	r1, r5
 800aafc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aafe:	1c50      	adds	r0, r2, #1
 800ab00:	9019      	str	r0, [sp, #100]	@ 0x64
 800ab02:	7852      	ldrb	r2, [r2, #1]
 800ab04:	4618      	mov	r0, r3
 800ab06:	460d      	mov	r5, r1
 800ab08:	e7b1      	b.n	800aa6e <_strtod_l+0x1d6>
 800ab0a:	f04f 0900 	mov.w	r9, #0
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e77d      	b.n	800aa0e <_strtod_l+0x176>
 800ab12:	f04f 0c00 	mov.w	ip, #0
 800ab16:	1ca2      	adds	r2, r4, #2
 800ab18:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab1a:	78a2      	ldrb	r2, [r4, #2]
 800ab1c:	e785      	b.n	800aa2a <_strtod_l+0x192>
 800ab1e:	f04f 0c01 	mov.w	ip, #1
 800ab22:	e7f8      	b.n	800ab16 <_strtod_l+0x27e>
 800ab24:	0800d2b0 	.word	0x0800d2b0
 800ab28:	0800d298 	.word	0x0800d298
 800ab2c:	7ff00000 	.word	0x7ff00000
 800ab30:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ab32:	1c51      	adds	r1, r2, #1
 800ab34:	9119      	str	r1, [sp, #100]	@ 0x64
 800ab36:	7852      	ldrb	r2, [r2, #1]
 800ab38:	2a30      	cmp	r2, #48	@ 0x30
 800ab3a:	d0f9      	beq.n	800ab30 <_strtod_l+0x298>
 800ab3c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ab40:	2908      	cmp	r1, #8
 800ab42:	f63f af78 	bhi.w	800aa36 <_strtod_l+0x19e>
 800ab46:	3a30      	subs	r2, #48	@ 0x30
 800ab48:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ab4c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ab4e:	f04f 080a 	mov.w	r8, #10
 800ab52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ab54:	1c56      	adds	r6, r2, #1
 800ab56:	9619      	str	r6, [sp, #100]	@ 0x64
 800ab58:	7852      	ldrb	r2, [r2, #1]
 800ab5a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ab5e:	f1be 0f09 	cmp.w	lr, #9
 800ab62:	d939      	bls.n	800abd8 <_strtod_l+0x340>
 800ab64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ab66:	1a76      	subs	r6, r6, r1
 800ab68:	2e08      	cmp	r6, #8
 800ab6a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ab6e:	dc03      	bgt.n	800ab78 <_strtod_l+0x2e0>
 800ab70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ab72:	4588      	cmp	r8, r1
 800ab74:	bfa8      	it	ge
 800ab76:	4688      	movge	r8, r1
 800ab78:	f1bc 0f00 	cmp.w	ip, #0
 800ab7c:	d001      	beq.n	800ab82 <_strtod_l+0x2ea>
 800ab7e:	f1c8 0800 	rsb	r8, r8, #0
 800ab82:	2d00      	cmp	r5, #0
 800ab84:	d14e      	bne.n	800ac24 <_strtod_l+0x38c>
 800ab86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab88:	4308      	orrs	r0, r1
 800ab8a:	f47f aebe 	bne.w	800a90a <_strtod_l+0x72>
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f47f aed6 	bne.w	800a940 <_strtod_l+0xa8>
 800ab94:	2a69      	cmp	r2, #105	@ 0x69
 800ab96:	d028      	beq.n	800abea <_strtod_l+0x352>
 800ab98:	dc25      	bgt.n	800abe6 <_strtod_l+0x34e>
 800ab9a:	2a49      	cmp	r2, #73	@ 0x49
 800ab9c:	d025      	beq.n	800abea <_strtod_l+0x352>
 800ab9e:	2a4e      	cmp	r2, #78	@ 0x4e
 800aba0:	f47f aece 	bne.w	800a940 <_strtod_l+0xa8>
 800aba4:	499b      	ldr	r1, [pc, #620]	@ (800ae14 <_strtod_l+0x57c>)
 800aba6:	a819      	add	r0, sp, #100	@ 0x64
 800aba8:	f001 fdfa 	bl	800c7a0 <__match>
 800abac:	2800      	cmp	r0, #0
 800abae:	f43f aec7 	beq.w	800a940 <_strtod_l+0xa8>
 800abb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	2b28      	cmp	r3, #40	@ 0x28
 800abb8:	d12e      	bne.n	800ac18 <_strtod_l+0x380>
 800abba:	4997      	ldr	r1, [pc, #604]	@ (800ae18 <_strtod_l+0x580>)
 800abbc:	aa1c      	add	r2, sp, #112	@ 0x70
 800abbe:	a819      	add	r0, sp, #100	@ 0x64
 800abc0:	f001 fe02 	bl	800c7c8 <__hexnan>
 800abc4:	2805      	cmp	r0, #5
 800abc6:	d127      	bne.n	800ac18 <_strtod_l+0x380>
 800abc8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800abca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800abce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800abd2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800abd6:	e698      	b.n	800a90a <_strtod_l+0x72>
 800abd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800abda:	fb08 2101 	mla	r1, r8, r1, r2
 800abde:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800abe2:	920e      	str	r2, [sp, #56]	@ 0x38
 800abe4:	e7b5      	b.n	800ab52 <_strtod_l+0x2ba>
 800abe6:	2a6e      	cmp	r2, #110	@ 0x6e
 800abe8:	e7da      	b.n	800aba0 <_strtod_l+0x308>
 800abea:	498c      	ldr	r1, [pc, #560]	@ (800ae1c <_strtod_l+0x584>)
 800abec:	a819      	add	r0, sp, #100	@ 0x64
 800abee:	f001 fdd7 	bl	800c7a0 <__match>
 800abf2:	2800      	cmp	r0, #0
 800abf4:	f43f aea4 	beq.w	800a940 <_strtod_l+0xa8>
 800abf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abfa:	4989      	ldr	r1, [pc, #548]	@ (800ae20 <_strtod_l+0x588>)
 800abfc:	3b01      	subs	r3, #1
 800abfe:	a819      	add	r0, sp, #100	@ 0x64
 800ac00:	9319      	str	r3, [sp, #100]	@ 0x64
 800ac02:	f001 fdcd 	bl	800c7a0 <__match>
 800ac06:	b910      	cbnz	r0, 800ac0e <_strtod_l+0x376>
 800ac08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ac0e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ae30 <_strtod_l+0x598>
 800ac12:	f04f 0a00 	mov.w	sl, #0
 800ac16:	e678      	b.n	800a90a <_strtod_l+0x72>
 800ac18:	4882      	ldr	r0, [pc, #520]	@ (800ae24 <_strtod_l+0x58c>)
 800ac1a:	f001 fafd 	bl	800c218 <nan>
 800ac1e:	ec5b ab10 	vmov	sl, fp, d0
 800ac22:	e672      	b.n	800a90a <_strtod_l+0x72>
 800ac24:	eba8 0309 	sub.w	r3, r8, r9
 800ac28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ac2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac2c:	2f00      	cmp	r7, #0
 800ac2e:	bf08      	it	eq
 800ac30:	462f      	moveq	r7, r5
 800ac32:	2d10      	cmp	r5, #16
 800ac34:	462c      	mov	r4, r5
 800ac36:	bfa8      	it	ge
 800ac38:	2410      	movge	r4, #16
 800ac3a:	f7f5 fc63 	bl	8000504 <__aeabi_ui2d>
 800ac3e:	2d09      	cmp	r5, #9
 800ac40:	4682      	mov	sl, r0
 800ac42:	468b      	mov	fp, r1
 800ac44:	dc13      	bgt.n	800ac6e <_strtod_l+0x3d6>
 800ac46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f43f ae5e 	beq.w	800a90a <_strtod_l+0x72>
 800ac4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac50:	dd78      	ble.n	800ad44 <_strtod_l+0x4ac>
 800ac52:	2b16      	cmp	r3, #22
 800ac54:	dc5f      	bgt.n	800ad16 <_strtod_l+0x47e>
 800ac56:	4974      	ldr	r1, [pc, #464]	@ (800ae28 <_strtod_l+0x590>)
 800ac58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac60:	4652      	mov	r2, sl
 800ac62:	465b      	mov	r3, fp
 800ac64:	f7f5 fcc8 	bl	80005f8 <__aeabi_dmul>
 800ac68:	4682      	mov	sl, r0
 800ac6a:	468b      	mov	fp, r1
 800ac6c:	e64d      	b.n	800a90a <_strtod_l+0x72>
 800ac6e:	4b6e      	ldr	r3, [pc, #440]	@ (800ae28 <_strtod_l+0x590>)
 800ac70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ac78:	f7f5 fcbe 	bl	80005f8 <__aeabi_dmul>
 800ac7c:	4682      	mov	sl, r0
 800ac7e:	9808      	ldr	r0, [sp, #32]
 800ac80:	468b      	mov	fp, r1
 800ac82:	f7f5 fc3f 	bl	8000504 <__aeabi_ui2d>
 800ac86:	4602      	mov	r2, r0
 800ac88:	460b      	mov	r3, r1
 800ac8a:	4650      	mov	r0, sl
 800ac8c:	4659      	mov	r1, fp
 800ac8e:	f7f5 fafd 	bl	800028c <__adddf3>
 800ac92:	2d0f      	cmp	r5, #15
 800ac94:	4682      	mov	sl, r0
 800ac96:	468b      	mov	fp, r1
 800ac98:	ddd5      	ble.n	800ac46 <_strtod_l+0x3ae>
 800ac9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac9c:	1b2c      	subs	r4, r5, r4
 800ac9e:	441c      	add	r4, r3
 800aca0:	2c00      	cmp	r4, #0
 800aca2:	f340 8096 	ble.w	800add2 <_strtod_l+0x53a>
 800aca6:	f014 030f 	ands.w	r3, r4, #15
 800acaa:	d00a      	beq.n	800acc2 <_strtod_l+0x42a>
 800acac:	495e      	ldr	r1, [pc, #376]	@ (800ae28 <_strtod_l+0x590>)
 800acae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800acb2:	4652      	mov	r2, sl
 800acb4:	465b      	mov	r3, fp
 800acb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acba:	f7f5 fc9d 	bl	80005f8 <__aeabi_dmul>
 800acbe:	4682      	mov	sl, r0
 800acc0:	468b      	mov	fp, r1
 800acc2:	f034 040f 	bics.w	r4, r4, #15
 800acc6:	d073      	beq.n	800adb0 <_strtod_l+0x518>
 800acc8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800accc:	dd48      	ble.n	800ad60 <_strtod_l+0x4c8>
 800acce:	2400      	movs	r4, #0
 800acd0:	46a0      	mov	r8, r4
 800acd2:	940a      	str	r4, [sp, #40]	@ 0x28
 800acd4:	46a1      	mov	r9, r4
 800acd6:	9a05      	ldr	r2, [sp, #20]
 800acd8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ae30 <_strtod_l+0x598>
 800acdc:	2322      	movs	r3, #34	@ 0x22
 800acde:	6013      	str	r3, [r2, #0]
 800ace0:	f04f 0a00 	mov.w	sl, #0
 800ace4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f43f ae0f 	beq.w	800a90a <_strtod_l+0x72>
 800acec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800acee:	9805      	ldr	r0, [sp, #20]
 800acf0:	f7ff f942 	bl	8009f78 <_Bfree>
 800acf4:	9805      	ldr	r0, [sp, #20]
 800acf6:	4649      	mov	r1, r9
 800acf8:	f7ff f93e 	bl	8009f78 <_Bfree>
 800acfc:	9805      	ldr	r0, [sp, #20]
 800acfe:	4641      	mov	r1, r8
 800ad00:	f7ff f93a 	bl	8009f78 <_Bfree>
 800ad04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad06:	9805      	ldr	r0, [sp, #20]
 800ad08:	f7ff f936 	bl	8009f78 <_Bfree>
 800ad0c:	9805      	ldr	r0, [sp, #20]
 800ad0e:	4621      	mov	r1, r4
 800ad10:	f7ff f932 	bl	8009f78 <_Bfree>
 800ad14:	e5f9      	b.n	800a90a <_strtod_l+0x72>
 800ad16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	dbbc      	blt.n	800ac9a <_strtod_l+0x402>
 800ad20:	4c41      	ldr	r4, [pc, #260]	@ (800ae28 <_strtod_l+0x590>)
 800ad22:	f1c5 050f 	rsb	r5, r5, #15
 800ad26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ad2a:	4652      	mov	r2, sl
 800ad2c:	465b      	mov	r3, fp
 800ad2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad32:	f7f5 fc61 	bl	80005f8 <__aeabi_dmul>
 800ad36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad38:	1b5d      	subs	r5, r3, r5
 800ad3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ad3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ad42:	e78f      	b.n	800ac64 <_strtod_l+0x3cc>
 800ad44:	3316      	adds	r3, #22
 800ad46:	dba8      	blt.n	800ac9a <_strtod_l+0x402>
 800ad48:	4b37      	ldr	r3, [pc, #220]	@ (800ae28 <_strtod_l+0x590>)
 800ad4a:	eba9 0808 	sub.w	r8, r9, r8
 800ad4e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ad52:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ad56:	4650      	mov	r0, sl
 800ad58:	4659      	mov	r1, fp
 800ad5a:	f7f5 fd77 	bl	800084c <__aeabi_ddiv>
 800ad5e:	e783      	b.n	800ac68 <_strtod_l+0x3d0>
 800ad60:	4b32      	ldr	r3, [pc, #200]	@ (800ae2c <_strtod_l+0x594>)
 800ad62:	9308      	str	r3, [sp, #32]
 800ad64:	2300      	movs	r3, #0
 800ad66:	1124      	asrs	r4, r4, #4
 800ad68:	4650      	mov	r0, sl
 800ad6a:	4659      	mov	r1, fp
 800ad6c:	461e      	mov	r6, r3
 800ad6e:	2c01      	cmp	r4, #1
 800ad70:	dc21      	bgt.n	800adb6 <_strtod_l+0x51e>
 800ad72:	b10b      	cbz	r3, 800ad78 <_strtod_l+0x4e0>
 800ad74:	4682      	mov	sl, r0
 800ad76:	468b      	mov	fp, r1
 800ad78:	492c      	ldr	r1, [pc, #176]	@ (800ae2c <_strtod_l+0x594>)
 800ad7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ad7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ad82:	4652      	mov	r2, sl
 800ad84:	465b      	mov	r3, fp
 800ad86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad8a:	f7f5 fc35 	bl	80005f8 <__aeabi_dmul>
 800ad8e:	4b28      	ldr	r3, [pc, #160]	@ (800ae30 <_strtod_l+0x598>)
 800ad90:	460a      	mov	r2, r1
 800ad92:	400b      	ands	r3, r1
 800ad94:	4927      	ldr	r1, [pc, #156]	@ (800ae34 <_strtod_l+0x59c>)
 800ad96:	428b      	cmp	r3, r1
 800ad98:	4682      	mov	sl, r0
 800ad9a:	d898      	bhi.n	800acce <_strtod_l+0x436>
 800ad9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ada0:	428b      	cmp	r3, r1
 800ada2:	bf86      	itte	hi
 800ada4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ae38 <_strtod_l+0x5a0>
 800ada8:	f04f 3aff 	movhi.w	sl, #4294967295
 800adac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800adb0:	2300      	movs	r3, #0
 800adb2:	9308      	str	r3, [sp, #32]
 800adb4:	e07a      	b.n	800aeac <_strtod_l+0x614>
 800adb6:	07e2      	lsls	r2, r4, #31
 800adb8:	d505      	bpl.n	800adc6 <_strtod_l+0x52e>
 800adba:	9b08      	ldr	r3, [sp, #32]
 800adbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc0:	f7f5 fc1a 	bl	80005f8 <__aeabi_dmul>
 800adc4:	2301      	movs	r3, #1
 800adc6:	9a08      	ldr	r2, [sp, #32]
 800adc8:	3208      	adds	r2, #8
 800adca:	3601      	adds	r6, #1
 800adcc:	1064      	asrs	r4, r4, #1
 800adce:	9208      	str	r2, [sp, #32]
 800add0:	e7cd      	b.n	800ad6e <_strtod_l+0x4d6>
 800add2:	d0ed      	beq.n	800adb0 <_strtod_l+0x518>
 800add4:	4264      	negs	r4, r4
 800add6:	f014 020f 	ands.w	r2, r4, #15
 800adda:	d00a      	beq.n	800adf2 <_strtod_l+0x55a>
 800addc:	4b12      	ldr	r3, [pc, #72]	@ (800ae28 <_strtod_l+0x590>)
 800adde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ade2:	4650      	mov	r0, sl
 800ade4:	4659      	mov	r1, fp
 800ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adea:	f7f5 fd2f 	bl	800084c <__aeabi_ddiv>
 800adee:	4682      	mov	sl, r0
 800adf0:	468b      	mov	fp, r1
 800adf2:	1124      	asrs	r4, r4, #4
 800adf4:	d0dc      	beq.n	800adb0 <_strtod_l+0x518>
 800adf6:	2c1f      	cmp	r4, #31
 800adf8:	dd20      	ble.n	800ae3c <_strtod_l+0x5a4>
 800adfa:	2400      	movs	r4, #0
 800adfc:	46a0      	mov	r8, r4
 800adfe:	940a      	str	r4, [sp, #40]	@ 0x28
 800ae00:	46a1      	mov	r9, r4
 800ae02:	9a05      	ldr	r2, [sp, #20]
 800ae04:	2322      	movs	r3, #34	@ 0x22
 800ae06:	f04f 0a00 	mov.w	sl, #0
 800ae0a:	f04f 0b00 	mov.w	fp, #0
 800ae0e:	6013      	str	r3, [r2, #0]
 800ae10:	e768      	b.n	800ace4 <_strtod_l+0x44c>
 800ae12:	bf00      	nop
 800ae14:	0800d086 	.word	0x0800d086
 800ae18:	0800d29c 	.word	0x0800d29c
 800ae1c:	0800d07e 	.word	0x0800d07e
 800ae20:	0800d0b3 	.word	0x0800d0b3
 800ae24:	0800d35f 	.word	0x0800d35f
 800ae28:	0800d1d0 	.word	0x0800d1d0
 800ae2c:	0800d1a8 	.word	0x0800d1a8
 800ae30:	7ff00000 	.word	0x7ff00000
 800ae34:	7ca00000 	.word	0x7ca00000
 800ae38:	7fefffff 	.word	0x7fefffff
 800ae3c:	f014 0310 	ands.w	r3, r4, #16
 800ae40:	bf18      	it	ne
 800ae42:	236a      	movne	r3, #106	@ 0x6a
 800ae44:	4ea9      	ldr	r6, [pc, #676]	@ (800b0ec <_strtod_l+0x854>)
 800ae46:	9308      	str	r3, [sp, #32]
 800ae48:	4650      	mov	r0, sl
 800ae4a:	4659      	mov	r1, fp
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	07e2      	lsls	r2, r4, #31
 800ae50:	d504      	bpl.n	800ae5c <_strtod_l+0x5c4>
 800ae52:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae56:	f7f5 fbcf 	bl	80005f8 <__aeabi_dmul>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	1064      	asrs	r4, r4, #1
 800ae5e:	f106 0608 	add.w	r6, r6, #8
 800ae62:	d1f4      	bne.n	800ae4e <_strtod_l+0x5b6>
 800ae64:	b10b      	cbz	r3, 800ae6a <_strtod_l+0x5d2>
 800ae66:	4682      	mov	sl, r0
 800ae68:	468b      	mov	fp, r1
 800ae6a:	9b08      	ldr	r3, [sp, #32]
 800ae6c:	b1b3      	cbz	r3, 800ae9c <_strtod_l+0x604>
 800ae6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ae72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	4659      	mov	r1, fp
 800ae7a:	dd0f      	ble.n	800ae9c <_strtod_l+0x604>
 800ae7c:	2b1f      	cmp	r3, #31
 800ae7e:	dd55      	ble.n	800af2c <_strtod_l+0x694>
 800ae80:	2b34      	cmp	r3, #52	@ 0x34
 800ae82:	bfde      	ittt	le
 800ae84:	f04f 33ff 	movle.w	r3, #4294967295
 800ae88:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ae8c:	4093      	lslle	r3, r2
 800ae8e:	f04f 0a00 	mov.w	sl, #0
 800ae92:	bfcc      	ite	gt
 800ae94:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ae98:	ea03 0b01 	andle.w	fp, r3, r1
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	2300      	movs	r3, #0
 800aea0:	4650      	mov	r0, sl
 800aea2:	4659      	mov	r1, fp
 800aea4:	f7f5 fe10 	bl	8000ac8 <__aeabi_dcmpeq>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	d1a6      	bne.n	800adfa <_strtod_l+0x562>
 800aeac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800aeb2:	9805      	ldr	r0, [sp, #20]
 800aeb4:	462b      	mov	r3, r5
 800aeb6:	463a      	mov	r2, r7
 800aeb8:	f7ff f8c6 	bl	800a048 <__s2b>
 800aebc:	900a      	str	r0, [sp, #40]	@ 0x28
 800aebe:	2800      	cmp	r0, #0
 800aec0:	f43f af05 	beq.w	800acce <_strtod_l+0x436>
 800aec4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aec6:	2a00      	cmp	r2, #0
 800aec8:	eba9 0308 	sub.w	r3, r9, r8
 800aecc:	bfa8      	it	ge
 800aece:	2300      	movge	r3, #0
 800aed0:	9312      	str	r3, [sp, #72]	@ 0x48
 800aed2:	2400      	movs	r4, #0
 800aed4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aed8:	9316      	str	r3, [sp, #88]	@ 0x58
 800aeda:	46a0      	mov	r8, r4
 800aedc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aede:	9805      	ldr	r0, [sp, #20]
 800aee0:	6859      	ldr	r1, [r3, #4]
 800aee2:	f7ff f809 	bl	8009ef8 <_Balloc>
 800aee6:	4681      	mov	r9, r0
 800aee8:	2800      	cmp	r0, #0
 800aeea:	f43f aef4 	beq.w	800acd6 <_strtod_l+0x43e>
 800aeee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aef0:	691a      	ldr	r2, [r3, #16]
 800aef2:	3202      	adds	r2, #2
 800aef4:	f103 010c 	add.w	r1, r3, #12
 800aef8:	0092      	lsls	r2, r2, #2
 800aefa:	300c      	adds	r0, #12
 800aefc:	f7fe f89b 	bl	8009036 <memcpy>
 800af00:	ec4b ab10 	vmov	d0, sl, fp
 800af04:	9805      	ldr	r0, [sp, #20]
 800af06:	aa1c      	add	r2, sp, #112	@ 0x70
 800af08:	a91b      	add	r1, sp, #108	@ 0x6c
 800af0a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800af0e:	f7ff fbd7 	bl	800a6c0 <__d2b>
 800af12:	901a      	str	r0, [sp, #104]	@ 0x68
 800af14:	2800      	cmp	r0, #0
 800af16:	f43f aede 	beq.w	800acd6 <_strtod_l+0x43e>
 800af1a:	9805      	ldr	r0, [sp, #20]
 800af1c:	2101      	movs	r1, #1
 800af1e:	f7ff f929 	bl	800a174 <__i2b>
 800af22:	4680      	mov	r8, r0
 800af24:	b948      	cbnz	r0, 800af3a <_strtod_l+0x6a2>
 800af26:	f04f 0800 	mov.w	r8, #0
 800af2a:	e6d4      	b.n	800acd6 <_strtod_l+0x43e>
 800af2c:	f04f 32ff 	mov.w	r2, #4294967295
 800af30:	fa02 f303 	lsl.w	r3, r2, r3
 800af34:	ea03 0a0a 	and.w	sl, r3, sl
 800af38:	e7b0      	b.n	800ae9c <_strtod_l+0x604>
 800af3a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800af3c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800af3e:	2d00      	cmp	r5, #0
 800af40:	bfab      	itete	ge
 800af42:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800af44:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800af46:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800af48:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800af4a:	bfac      	ite	ge
 800af4c:	18ef      	addge	r7, r5, r3
 800af4e:	1b5e      	sublt	r6, r3, r5
 800af50:	9b08      	ldr	r3, [sp, #32]
 800af52:	1aed      	subs	r5, r5, r3
 800af54:	4415      	add	r5, r2
 800af56:	4b66      	ldr	r3, [pc, #408]	@ (800b0f0 <_strtod_l+0x858>)
 800af58:	3d01      	subs	r5, #1
 800af5a:	429d      	cmp	r5, r3
 800af5c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800af60:	da50      	bge.n	800b004 <_strtod_l+0x76c>
 800af62:	1b5b      	subs	r3, r3, r5
 800af64:	2b1f      	cmp	r3, #31
 800af66:	eba2 0203 	sub.w	r2, r2, r3
 800af6a:	f04f 0101 	mov.w	r1, #1
 800af6e:	dc3d      	bgt.n	800afec <_strtod_l+0x754>
 800af70:	fa01 f303 	lsl.w	r3, r1, r3
 800af74:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af76:	2300      	movs	r3, #0
 800af78:	9310      	str	r3, [sp, #64]	@ 0x40
 800af7a:	18bd      	adds	r5, r7, r2
 800af7c:	9b08      	ldr	r3, [sp, #32]
 800af7e:	42af      	cmp	r7, r5
 800af80:	4416      	add	r6, r2
 800af82:	441e      	add	r6, r3
 800af84:	463b      	mov	r3, r7
 800af86:	bfa8      	it	ge
 800af88:	462b      	movge	r3, r5
 800af8a:	42b3      	cmp	r3, r6
 800af8c:	bfa8      	it	ge
 800af8e:	4633      	movge	r3, r6
 800af90:	2b00      	cmp	r3, #0
 800af92:	bfc2      	ittt	gt
 800af94:	1aed      	subgt	r5, r5, r3
 800af96:	1af6      	subgt	r6, r6, r3
 800af98:	1aff      	subgt	r7, r7, r3
 800af9a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	dd16      	ble.n	800afce <_strtod_l+0x736>
 800afa0:	4641      	mov	r1, r8
 800afa2:	9805      	ldr	r0, [sp, #20]
 800afa4:	461a      	mov	r2, r3
 800afa6:	f7ff f9a5 	bl	800a2f4 <__pow5mult>
 800afaa:	4680      	mov	r8, r0
 800afac:	2800      	cmp	r0, #0
 800afae:	d0ba      	beq.n	800af26 <_strtod_l+0x68e>
 800afb0:	4601      	mov	r1, r0
 800afb2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800afb4:	9805      	ldr	r0, [sp, #20]
 800afb6:	f7ff f8f3 	bl	800a1a0 <__multiply>
 800afba:	900e      	str	r0, [sp, #56]	@ 0x38
 800afbc:	2800      	cmp	r0, #0
 800afbe:	f43f ae8a 	beq.w	800acd6 <_strtod_l+0x43e>
 800afc2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afc4:	9805      	ldr	r0, [sp, #20]
 800afc6:	f7fe ffd7 	bl	8009f78 <_Bfree>
 800afca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afcc:	931a      	str	r3, [sp, #104]	@ 0x68
 800afce:	2d00      	cmp	r5, #0
 800afd0:	dc1d      	bgt.n	800b00e <_strtod_l+0x776>
 800afd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	dd23      	ble.n	800b020 <_strtod_l+0x788>
 800afd8:	4649      	mov	r1, r9
 800afda:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800afdc:	9805      	ldr	r0, [sp, #20]
 800afde:	f7ff f989 	bl	800a2f4 <__pow5mult>
 800afe2:	4681      	mov	r9, r0
 800afe4:	b9e0      	cbnz	r0, 800b020 <_strtod_l+0x788>
 800afe6:	f04f 0900 	mov.w	r9, #0
 800afea:	e674      	b.n	800acd6 <_strtod_l+0x43e>
 800afec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800aff0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800aff4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800aff8:	35e2      	adds	r5, #226	@ 0xe2
 800affa:	fa01 f305 	lsl.w	r3, r1, r5
 800affe:	9310      	str	r3, [sp, #64]	@ 0x40
 800b000:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b002:	e7ba      	b.n	800af7a <_strtod_l+0x6e2>
 800b004:	2300      	movs	r3, #0
 800b006:	9310      	str	r3, [sp, #64]	@ 0x40
 800b008:	2301      	movs	r3, #1
 800b00a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b00c:	e7b5      	b.n	800af7a <_strtod_l+0x6e2>
 800b00e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b010:	9805      	ldr	r0, [sp, #20]
 800b012:	462a      	mov	r2, r5
 800b014:	f7ff f9c8 	bl	800a3a8 <__lshift>
 800b018:	901a      	str	r0, [sp, #104]	@ 0x68
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d1d9      	bne.n	800afd2 <_strtod_l+0x73a>
 800b01e:	e65a      	b.n	800acd6 <_strtod_l+0x43e>
 800b020:	2e00      	cmp	r6, #0
 800b022:	dd07      	ble.n	800b034 <_strtod_l+0x79c>
 800b024:	4649      	mov	r1, r9
 800b026:	9805      	ldr	r0, [sp, #20]
 800b028:	4632      	mov	r2, r6
 800b02a:	f7ff f9bd 	bl	800a3a8 <__lshift>
 800b02e:	4681      	mov	r9, r0
 800b030:	2800      	cmp	r0, #0
 800b032:	d0d8      	beq.n	800afe6 <_strtod_l+0x74e>
 800b034:	2f00      	cmp	r7, #0
 800b036:	dd08      	ble.n	800b04a <_strtod_l+0x7b2>
 800b038:	4641      	mov	r1, r8
 800b03a:	9805      	ldr	r0, [sp, #20]
 800b03c:	463a      	mov	r2, r7
 800b03e:	f7ff f9b3 	bl	800a3a8 <__lshift>
 800b042:	4680      	mov	r8, r0
 800b044:	2800      	cmp	r0, #0
 800b046:	f43f ae46 	beq.w	800acd6 <_strtod_l+0x43e>
 800b04a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b04c:	9805      	ldr	r0, [sp, #20]
 800b04e:	464a      	mov	r2, r9
 800b050:	f7ff fa32 	bl	800a4b8 <__mdiff>
 800b054:	4604      	mov	r4, r0
 800b056:	2800      	cmp	r0, #0
 800b058:	f43f ae3d 	beq.w	800acd6 <_strtod_l+0x43e>
 800b05c:	68c3      	ldr	r3, [r0, #12]
 800b05e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b060:	2300      	movs	r3, #0
 800b062:	60c3      	str	r3, [r0, #12]
 800b064:	4641      	mov	r1, r8
 800b066:	f7ff fa0b 	bl	800a480 <__mcmp>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	da46      	bge.n	800b0fc <_strtod_l+0x864>
 800b06e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b070:	ea53 030a 	orrs.w	r3, r3, sl
 800b074:	d16c      	bne.n	800b150 <_strtod_l+0x8b8>
 800b076:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d168      	bne.n	800b150 <_strtod_l+0x8b8>
 800b07e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b082:	0d1b      	lsrs	r3, r3, #20
 800b084:	051b      	lsls	r3, r3, #20
 800b086:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b08a:	d961      	bls.n	800b150 <_strtod_l+0x8b8>
 800b08c:	6963      	ldr	r3, [r4, #20]
 800b08e:	b913      	cbnz	r3, 800b096 <_strtod_l+0x7fe>
 800b090:	6923      	ldr	r3, [r4, #16]
 800b092:	2b01      	cmp	r3, #1
 800b094:	dd5c      	ble.n	800b150 <_strtod_l+0x8b8>
 800b096:	4621      	mov	r1, r4
 800b098:	2201      	movs	r2, #1
 800b09a:	9805      	ldr	r0, [sp, #20]
 800b09c:	f7ff f984 	bl	800a3a8 <__lshift>
 800b0a0:	4641      	mov	r1, r8
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	f7ff f9ec 	bl	800a480 <__mcmp>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	dd51      	ble.n	800b150 <_strtod_l+0x8b8>
 800b0ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b0b0:	9a08      	ldr	r2, [sp, #32]
 800b0b2:	0d1b      	lsrs	r3, r3, #20
 800b0b4:	051b      	lsls	r3, r3, #20
 800b0b6:	2a00      	cmp	r2, #0
 800b0b8:	d06b      	beq.n	800b192 <_strtod_l+0x8fa>
 800b0ba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b0be:	d868      	bhi.n	800b192 <_strtod_l+0x8fa>
 800b0c0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b0c4:	f67f ae9d 	bls.w	800ae02 <_strtod_l+0x56a>
 800b0c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b0f4 <_strtod_l+0x85c>)
 800b0ca:	4650      	mov	r0, sl
 800b0cc:	4659      	mov	r1, fp
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f7f5 fa92 	bl	80005f8 <__aeabi_dmul>
 800b0d4:	4b08      	ldr	r3, [pc, #32]	@ (800b0f8 <_strtod_l+0x860>)
 800b0d6:	400b      	ands	r3, r1
 800b0d8:	4682      	mov	sl, r0
 800b0da:	468b      	mov	fp, r1
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	f47f ae05 	bne.w	800acec <_strtod_l+0x454>
 800b0e2:	9a05      	ldr	r2, [sp, #20]
 800b0e4:	2322      	movs	r3, #34	@ 0x22
 800b0e6:	6013      	str	r3, [r2, #0]
 800b0e8:	e600      	b.n	800acec <_strtod_l+0x454>
 800b0ea:	bf00      	nop
 800b0ec:	0800d2c8 	.word	0x0800d2c8
 800b0f0:	fffffc02 	.word	0xfffffc02
 800b0f4:	39500000 	.word	0x39500000
 800b0f8:	7ff00000 	.word	0x7ff00000
 800b0fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b100:	d165      	bne.n	800b1ce <_strtod_l+0x936>
 800b102:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b104:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b108:	b35a      	cbz	r2, 800b162 <_strtod_l+0x8ca>
 800b10a:	4a9f      	ldr	r2, [pc, #636]	@ (800b388 <_strtod_l+0xaf0>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d12b      	bne.n	800b168 <_strtod_l+0x8d0>
 800b110:	9b08      	ldr	r3, [sp, #32]
 800b112:	4651      	mov	r1, sl
 800b114:	b303      	cbz	r3, 800b158 <_strtod_l+0x8c0>
 800b116:	4b9d      	ldr	r3, [pc, #628]	@ (800b38c <_strtod_l+0xaf4>)
 800b118:	465a      	mov	r2, fp
 800b11a:	4013      	ands	r3, r2
 800b11c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b120:	f04f 32ff 	mov.w	r2, #4294967295
 800b124:	d81b      	bhi.n	800b15e <_strtod_l+0x8c6>
 800b126:	0d1b      	lsrs	r3, r3, #20
 800b128:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b12c:	fa02 f303 	lsl.w	r3, r2, r3
 800b130:	4299      	cmp	r1, r3
 800b132:	d119      	bne.n	800b168 <_strtod_l+0x8d0>
 800b134:	4b96      	ldr	r3, [pc, #600]	@ (800b390 <_strtod_l+0xaf8>)
 800b136:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b138:	429a      	cmp	r2, r3
 800b13a:	d102      	bne.n	800b142 <_strtod_l+0x8aa>
 800b13c:	3101      	adds	r1, #1
 800b13e:	f43f adca 	beq.w	800acd6 <_strtod_l+0x43e>
 800b142:	4b92      	ldr	r3, [pc, #584]	@ (800b38c <_strtod_l+0xaf4>)
 800b144:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b146:	401a      	ands	r2, r3
 800b148:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b14c:	f04f 0a00 	mov.w	sl, #0
 800b150:	9b08      	ldr	r3, [sp, #32]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d1b8      	bne.n	800b0c8 <_strtod_l+0x830>
 800b156:	e5c9      	b.n	800acec <_strtod_l+0x454>
 800b158:	f04f 33ff 	mov.w	r3, #4294967295
 800b15c:	e7e8      	b.n	800b130 <_strtod_l+0x898>
 800b15e:	4613      	mov	r3, r2
 800b160:	e7e6      	b.n	800b130 <_strtod_l+0x898>
 800b162:	ea53 030a 	orrs.w	r3, r3, sl
 800b166:	d0a1      	beq.n	800b0ac <_strtod_l+0x814>
 800b168:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b16a:	b1db      	cbz	r3, 800b1a4 <_strtod_l+0x90c>
 800b16c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b16e:	4213      	tst	r3, r2
 800b170:	d0ee      	beq.n	800b150 <_strtod_l+0x8b8>
 800b172:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b174:	9a08      	ldr	r2, [sp, #32]
 800b176:	4650      	mov	r0, sl
 800b178:	4659      	mov	r1, fp
 800b17a:	b1bb      	cbz	r3, 800b1ac <_strtod_l+0x914>
 800b17c:	f7ff fb6e 	bl	800a85c <sulp>
 800b180:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b184:	ec53 2b10 	vmov	r2, r3, d0
 800b188:	f7f5 f880 	bl	800028c <__adddf3>
 800b18c:	4682      	mov	sl, r0
 800b18e:	468b      	mov	fp, r1
 800b190:	e7de      	b.n	800b150 <_strtod_l+0x8b8>
 800b192:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b196:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b19a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b19e:	f04f 3aff 	mov.w	sl, #4294967295
 800b1a2:	e7d5      	b.n	800b150 <_strtod_l+0x8b8>
 800b1a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b1a6:	ea13 0f0a 	tst.w	r3, sl
 800b1aa:	e7e1      	b.n	800b170 <_strtod_l+0x8d8>
 800b1ac:	f7ff fb56 	bl	800a85c <sulp>
 800b1b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1b4:	ec53 2b10 	vmov	r2, r3, d0
 800b1b8:	f7f5 f866 	bl	8000288 <__aeabi_dsub>
 800b1bc:	2200      	movs	r2, #0
 800b1be:	2300      	movs	r3, #0
 800b1c0:	4682      	mov	sl, r0
 800b1c2:	468b      	mov	fp, r1
 800b1c4:	f7f5 fc80 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	d0c1      	beq.n	800b150 <_strtod_l+0x8b8>
 800b1cc:	e619      	b.n	800ae02 <_strtod_l+0x56a>
 800b1ce:	4641      	mov	r1, r8
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f7ff facd 	bl	800a770 <__ratio>
 800b1d6:	ec57 6b10 	vmov	r6, r7, d0
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	4639      	mov	r1, r7
 800b1e4:	f7f5 fc84 	bl	8000af0 <__aeabi_dcmple>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	d06f      	beq.n	800b2cc <_strtod_l+0xa34>
 800b1ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d17a      	bne.n	800b2e8 <_strtod_l+0xa50>
 800b1f2:	f1ba 0f00 	cmp.w	sl, #0
 800b1f6:	d158      	bne.n	800b2aa <_strtod_l+0xa12>
 800b1f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d15a      	bne.n	800b2b8 <_strtod_l+0xa20>
 800b202:	4b64      	ldr	r3, [pc, #400]	@ (800b394 <_strtod_l+0xafc>)
 800b204:	2200      	movs	r2, #0
 800b206:	4630      	mov	r0, r6
 800b208:	4639      	mov	r1, r7
 800b20a:	f7f5 fc67 	bl	8000adc <__aeabi_dcmplt>
 800b20e:	2800      	cmp	r0, #0
 800b210:	d159      	bne.n	800b2c6 <_strtod_l+0xa2e>
 800b212:	4630      	mov	r0, r6
 800b214:	4639      	mov	r1, r7
 800b216:	4b60      	ldr	r3, [pc, #384]	@ (800b398 <_strtod_l+0xb00>)
 800b218:	2200      	movs	r2, #0
 800b21a:	f7f5 f9ed 	bl	80005f8 <__aeabi_dmul>
 800b21e:	4606      	mov	r6, r0
 800b220:	460f      	mov	r7, r1
 800b222:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b226:	9606      	str	r6, [sp, #24]
 800b228:	9307      	str	r3, [sp, #28]
 800b22a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b22e:	4d57      	ldr	r5, [pc, #348]	@ (800b38c <_strtod_l+0xaf4>)
 800b230:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b234:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b236:	401d      	ands	r5, r3
 800b238:	4b58      	ldr	r3, [pc, #352]	@ (800b39c <_strtod_l+0xb04>)
 800b23a:	429d      	cmp	r5, r3
 800b23c:	f040 80b2 	bne.w	800b3a4 <_strtod_l+0xb0c>
 800b240:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b242:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b246:	ec4b ab10 	vmov	d0, sl, fp
 800b24a:	f7ff f9c9 	bl	800a5e0 <__ulp>
 800b24e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b252:	ec51 0b10 	vmov	r0, r1, d0
 800b256:	f7f5 f9cf 	bl	80005f8 <__aeabi_dmul>
 800b25a:	4652      	mov	r2, sl
 800b25c:	465b      	mov	r3, fp
 800b25e:	f7f5 f815 	bl	800028c <__adddf3>
 800b262:	460b      	mov	r3, r1
 800b264:	4949      	ldr	r1, [pc, #292]	@ (800b38c <_strtod_l+0xaf4>)
 800b266:	4a4e      	ldr	r2, [pc, #312]	@ (800b3a0 <_strtod_l+0xb08>)
 800b268:	4019      	ands	r1, r3
 800b26a:	4291      	cmp	r1, r2
 800b26c:	4682      	mov	sl, r0
 800b26e:	d942      	bls.n	800b2f6 <_strtod_l+0xa5e>
 800b270:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b272:	4b47      	ldr	r3, [pc, #284]	@ (800b390 <_strtod_l+0xaf8>)
 800b274:	429a      	cmp	r2, r3
 800b276:	d103      	bne.n	800b280 <_strtod_l+0x9e8>
 800b278:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b27a:	3301      	adds	r3, #1
 800b27c:	f43f ad2b 	beq.w	800acd6 <_strtod_l+0x43e>
 800b280:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b390 <_strtod_l+0xaf8>
 800b284:	f04f 3aff 	mov.w	sl, #4294967295
 800b288:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b28a:	9805      	ldr	r0, [sp, #20]
 800b28c:	f7fe fe74 	bl	8009f78 <_Bfree>
 800b290:	9805      	ldr	r0, [sp, #20]
 800b292:	4649      	mov	r1, r9
 800b294:	f7fe fe70 	bl	8009f78 <_Bfree>
 800b298:	9805      	ldr	r0, [sp, #20]
 800b29a:	4641      	mov	r1, r8
 800b29c:	f7fe fe6c 	bl	8009f78 <_Bfree>
 800b2a0:	9805      	ldr	r0, [sp, #20]
 800b2a2:	4621      	mov	r1, r4
 800b2a4:	f7fe fe68 	bl	8009f78 <_Bfree>
 800b2a8:	e618      	b.n	800aedc <_strtod_l+0x644>
 800b2aa:	f1ba 0f01 	cmp.w	sl, #1
 800b2ae:	d103      	bne.n	800b2b8 <_strtod_l+0xa20>
 800b2b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	f43f ada5 	beq.w	800ae02 <_strtod_l+0x56a>
 800b2b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b368 <_strtod_l+0xad0>
 800b2bc:	4f35      	ldr	r7, [pc, #212]	@ (800b394 <_strtod_l+0xafc>)
 800b2be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b2c2:	2600      	movs	r6, #0
 800b2c4:	e7b1      	b.n	800b22a <_strtod_l+0x992>
 800b2c6:	4f34      	ldr	r7, [pc, #208]	@ (800b398 <_strtod_l+0xb00>)
 800b2c8:	2600      	movs	r6, #0
 800b2ca:	e7aa      	b.n	800b222 <_strtod_l+0x98a>
 800b2cc:	4b32      	ldr	r3, [pc, #200]	@ (800b398 <_strtod_l+0xb00>)
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	4639      	mov	r1, r7
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f7f5 f990 	bl	80005f8 <__aeabi_dmul>
 800b2d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2da:	4606      	mov	r6, r0
 800b2dc:	460f      	mov	r7, r1
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d09f      	beq.n	800b222 <_strtod_l+0x98a>
 800b2e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b2e6:	e7a0      	b.n	800b22a <_strtod_l+0x992>
 800b2e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b370 <_strtod_l+0xad8>
 800b2ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b2f0:	ec57 6b17 	vmov	r6, r7, d7
 800b2f4:	e799      	b.n	800b22a <_strtod_l+0x992>
 800b2f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b2fa:	9b08      	ldr	r3, [sp, #32]
 800b2fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b300:	2b00      	cmp	r3, #0
 800b302:	d1c1      	bne.n	800b288 <_strtod_l+0x9f0>
 800b304:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b308:	0d1b      	lsrs	r3, r3, #20
 800b30a:	051b      	lsls	r3, r3, #20
 800b30c:	429d      	cmp	r5, r3
 800b30e:	d1bb      	bne.n	800b288 <_strtod_l+0x9f0>
 800b310:	4630      	mov	r0, r6
 800b312:	4639      	mov	r1, r7
 800b314:	f7f5 fcb8 	bl	8000c88 <__aeabi_d2lz>
 800b318:	f7f5 f940 	bl	800059c <__aeabi_l2d>
 800b31c:	4602      	mov	r2, r0
 800b31e:	460b      	mov	r3, r1
 800b320:	4630      	mov	r0, r6
 800b322:	4639      	mov	r1, r7
 800b324:	f7f4 ffb0 	bl	8000288 <__aeabi_dsub>
 800b328:	460b      	mov	r3, r1
 800b32a:	4602      	mov	r2, r0
 800b32c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b330:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b336:	ea46 060a 	orr.w	r6, r6, sl
 800b33a:	431e      	orrs	r6, r3
 800b33c:	d06f      	beq.n	800b41e <_strtod_l+0xb86>
 800b33e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b378 <_strtod_l+0xae0>)
 800b340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b344:	f7f5 fbca 	bl	8000adc <__aeabi_dcmplt>
 800b348:	2800      	cmp	r0, #0
 800b34a:	f47f accf 	bne.w	800acec <_strtod_l+0x454>
 800b34e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b380 <_strtod_l+0xae8>)
 800b350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b354:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b358:	f7f5 fbde 	bl	8000b18 <__aeabi_dcmpgt>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d093      	beq.n	800b288 <_strtod_l+0x9f0>
 800b360:	e4c4      	b.n	800acec <_strtod_l+0x454>
 800b362:	bf00      	nop
 800b364:	f3af 8000 	nop.w
 800b368:	00000000 	.word	0x00000000
 800b36c:	bff00000 	.word	0xbff00000
 800b370:	00000000 	.word	0x00000000
 800b374:	3ff00000 	.word	0x3ff00000
 800b378:	94a03595 	.word	0x94a03595
 800b37c:	3fdfffff 	.word	0x3fdfffff
 800b380:	35afe535 	.word	0x35afe535
 800b384:	3fe00000 	.word	0x3fe00000
 800b388:	000fffff 	.word	0x000fffff
 800b38c:	7ff00000 	.word	0x7ff00000
 800b390:	7fefffff 	.word	0x7fefffff
 800b394:	3ff00000 	.word	0x3ff00000
 800b398:	3fe00000 	.word	0x3fe00000
 800b39c:	7fe00000 	.word	0x7fe00000
 800b3a0:	7c9fffff 	.word	0x7c9fffff
 800b3a4:	9b08      	ldr	r3, [sp, #32]
 800b3a6:	b323      	cbz	r3, 800b3f2 <_strtod_l+0xb5a>
 800b3a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b3ac:	d821      	bhi.n	800b3f2 <_strtod_l+0xb5a>
 800b3ae:	a328      	add	r3, pc, #160	@ (adr r3, 800b450 <_strtod_l+0xbb8>)
 800b3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b4:	4630      	mov	r0, r6
 800b3b6:	4639      	mov	r1, r7
 800b3b8:	f7f5 fb9a 	bl	8000af0 <__aeabi_dcmple>
 800b3bc:	b1a0      	cbz	r0, 800b3e8 <_strtod_l+0xb50>
 800b3be:	4639      	mov	r1, r7
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	f7f5 fbf1 	bl	8000ba8 <__aeabi_d2uiz>
 800b3c6:	2801      	cmp	r0, #1
 800b3c8:	bf38      	it	cc
 800b3ca:	2001      	movcc	r0, #1
 800b3cc:	f7f5 f89a 	bl	8000504 <__aeabi_ui2d>
 800b3d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3d2:	4606      	mov	r6, r0
 800b3d4:	460f      	mov	r7, r1
 800b3d6:	b9fb      	cbnz	r3, 800b418 <_strtod_l+0xb80>
 800b3d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b3dc:	9014      	str	r0, [sp, #80]	@ 0x50
 800b3de:	9315      	str	r3, [sp, #84]	@ 0x54
 800b3e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b3e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b3e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b3ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b3ee:	1b5b      	subs	r3, r3, r5
 800b3f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b3f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b3f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b3fa:	f7ff f8f1 	bl	800a5e0 <__ulp>
 800b3fe:	4650      	mov	r0, sl
 800b400:	ec53 2b10 	vmov	r2, r3, d0
 800b404:	4659      	mov	r1, fp
 800b406:	f7f5 f8f7 	bl	80005f8 <__aeabi_dmul>
 800b40a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b40e:	f7f4 ff3d 	bl	800028c <__adddf3>
 800b412:	4682      	mov	sl, r0
 800b414:	468b      	mov	fp, r1
 800b416:	e770      	b.n	800b2fa <_strtod_l+0xa62>
 800b418:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b41c:	e7e0      	b.n	800b3e0 <_strtod_l+0xb48>
 800b41e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b458 <_strtod_l+0xbc0>)
 800b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b424:	f7f5 fb5a 	bl	8000adc <__aeabi_dcmplt>
 800b428:	e798      	b.n	800b35c <_strtod_l+0xac4>
 800b42a:	2300      	movs	r3, #0
 800b42c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b42e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b430:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b432:	6013      	str	r3, [r2, #0]
 800b434:	f7ff ba6d 	b.w	800a912 <_strtod_l+0x7a>
 800b438:	2a65      	cmp	r2, #101	@ 0x65
 800b43a:	f43f ab66 	beq.w	800ab0a <_strtod_l+0x272>
 800b43e:	2a45      	cmp	r2, #69	@ 0x45
 800b440:	f43f ab63 	beq.w	800ab0a <_strtod_l+0x272>
 800b444:	2301      	movs	r3, #1
 800b446:	f7ff bb9e 	b.w	800ab86 <_strtod_l+0x2ee>
 800b44a:	bf00      	nop
 800b44c:	f3af 8000 	nop.w
 800b450:	ffc00000 	.word	0xffc00000
 800b454:	41dfffff 	.word	0x41dfffff
 800b458:	94a03595 	.word	0x94a03595
 800b45c:	3fcfffff 	.word	0x3fcfffff

0800b460 <_strtod_r>:
 800b460:	4b01      	ldr	r3, [pc, #4]	@ (800b468 <_strtod_r+0x8>)
 800b462:	f7ff ba19 	b.w	800a898 <_strtod_l>
 800b466:	bf00      	nop
 800b468:	2000007c 	.word	0x2000007c

0800b46c <__ssputs_r>:
 800b46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b470:	688e      	ldr	r6, [r1, #8]
 800b472:	461f      	mov	r7, r3
 800b474:	42be      	cmp	r6, r7
 800b476:	680b      	ldr	r3, [r1, #0]
 800b478:	4682      	mov	sl, r0
 800b47a:	460c      	mov	r4, r1
 800b47c:	4690      	mov	r8, r2
 800b47e:	d82d      	bhi.n	800b4dc <__ssputs_r+0x70>
 800b480:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b484:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b488:	d026      	beq.n	800b4d8 <__ssputs_r+0x6c>
 800b48a:	6965      	ldr	r5, [r4, #20]
 800b48c:	6909      	ldr	r1, [r1, #16]
 800b48e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b492:	eba3 0901 	sub.w	r9, r3, r1
 800b496:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b49a:	1c7b      	adds	r3, r7, #1
 800b49c:	444b      	add	r3, r9
 800b49e:	106d      	asrs	r5, r5, #1
 800b4a0:	429d      	cmp	r5, r3
 800b4a2:	bf38      	it	cc
 800b4a4:	461d      	movcc	r5, r3
 800b4a6:	0553      	lsls	r3, r2, #21
 800b4a8:	d527      	bpl.n	800b4fa <__ssputs_r+0x8e>
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	f7fe fc98 	bl	8009de0 <_malloc_r>
 800b4b0:	4606      	mov	r6, r0
 800b4b2:	b360      	cbz	r0, 800b50e <__ssputs_r+0xa2>
 800b4b4:	6921      	ldr	r1, [r4, #16]
 800b4b6:	464a      	mov	r2, r9
 800b4b8:	f7fd fdbd 	bl	8009036 <memcpy>
 800b4bc:	89a3      	ldrh	r3, [r4, #12]
 800b4be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b4c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4c6:	81a3      	strh	r3, [r4, #12]
 800b4c8:	6126      	str	r6, [r4, #16]
 800b4ca:	6165      	str	r5, [r4, #20]
 800b4cc:	444e      	add	r6, r9
 800b4ce:	eba5 0509 	sub.w	r5, r5, r9
 800b4d2:	6026      	str	r6, [r4, #0]
 800b4d4:	60a5      	str	r5, [r4, #8]
 800b4d6:	463e      	mov	r6, r7
 800b4d8:	42be      	cmp	r6, r7
 800b4da:	d900      	bls.n	800b4de <__ssputs_r+0x72>
 800b4dc:	463e      	mov	r6, r7
 800b4de:	6820      	ldr	r0, [r4, #0]
 800b4e0:	4632      	mov	r2, r6
 800b4e2:	4641      	mov	r1, r8
 800b4e4:	f000 fe4b 	bl	800c17e <memmove>
 800b4e8:	68a3      	ldr	r3, [r4, #8]
 800b4ea:	1b9b      	subs	r3, r3, r6
 800b4ec:	60a3      	str	r3, [r4, #8]
 800b4ee:	6823      	ldr	r3, [r4, #0]
 800b4f0:	4433      	add	r3, r6
 800b4f2:	6023      	str	r3, [r4, #0]
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4fa:	462a      	mov	r2, r5
 800b4fc:	f001 fa11 	bl	800c922 <_realloc_r>
 800b500:	4606      	mov	r6, r0
 800b502:	2800      	cmp	r0, #0
 800b504:	d1e0      	bne.n	800b4c8 <__ssputs_r+0x5c>
 800b506:	6921      	ldr	r1, [r4, #16]
 800b508:	4650      	mov	r0, sl
 800b50a:	f7fe fbf5 	bl	8009cf8 <_free_r>
 800b50e:	230c      	movs	r3, #12
 800b510:	f8ca 3000 	str.w	r3, [sl]
 800b514:	89a3      	ldrh	r3, [r4, #12]
 800b516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b51a:	81a3      	strh	r3, [r4, #12]
 800b51c:	f04f 30ff 	mov.w	r0, #4294967295
 800b520:	e7e9      	b.n	800b4f6 <__ssputs_r+0x8a>
	...

0800b524 <_svfiprintf_r>:
 800b524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b528:	4698      	mov	r8, r3
 800b52a:	898b      	ldrh	r3, [r1, #12]
 800b52c:	061b      	lsls	r3, r3, #24
 800b52e:	b09d      	sub	sp, #116	@ 0x74
 800b530:	4607      	mov	r7, r0
 800b532:	460d      	mov	r5, r1
 800b534:	4614      	mov	r4, r2
 800b536:	d510      	bpl.n	800b55a <_svfiprintf_r+0x36>
 800b538:	690b      	ldr	r3, [r1, #16]
 800b53a:	b973      	cbnz	r3, 800b55a <_svfiprintf_r+0x36>
 800b53c:	2140      	movs	r1, #64	@ 0x40
 800b53e:	f7fe fc4f 	bl	8009de0 <_malloc_r>
 800b542:	6028      	str	r0, [r5, #0]
 800b544:	6128      	str	r0, [r5, #16]
 800b546:	b930      	cbnz	r0, 800b556 <_svfiprintf_r+0x32>
 800b548:	230c      	movs	r3, #12
 800b54a:	603b      	str	r3, [r7, #0]
 800b54c:	f04f 30ff 	mov.w	r0, #4294967295
 800b550:	b01d      	add	sp, #116	@ 0x74
 800b552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b556:	2340      	movs	r3, #64	@ 0x40
 800b558:	616b      	str	r3, [r5, #20]
 800b55a:	2300      	movs	r3, #0
 800b55c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b55e:	2320      	movs	r3, #32
 800b560:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b564:	f8cd 800c 	str.w	r8, [sp, #12]
 800b568:	2330      	movs	r3, #48	@ 0x30
 800b56a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b708 <_svfiprintf_r+0x1e4>
 800b56e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b572:	f04f 0901 	mov.w	r9, #1
 800b576:	4623      	mov	r3, r4
 800b578:	469a      	mov	sl, r3
 800b57a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b57e:	b10a      	cbz	r2, 800b584 <_svfiprintf_r+0x60>
 800b580:	2a25      	cmp	r2, #37	@ 0x25
 800b582:	d1f9      	bne.n	800b578 <_svfiprintf_r+0x54>
 800b584:	ebba 0b04 	subs.w	fp, sl, r4
 800b588:	d00b      	beq.n	800b5a2 <_svfiprintf_r+0x7e>
 800b58a:	465b      	mov	r3, fp
 800b58c:	4622      	mov	r2, r4
 800b58e:	4629      	mov	r1, r5
 800b590:	4638      	mov	r0, r7
 800b592:	f7ff ff6b 	bl	800b46c <__ssputs_r>
 800b596:	3001      	adds	r0, #1
 800b598:	f000 80a7 	beq.w	800b6ea <_svfiprintf_r+0x1c6>
 800b59c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b59e:	445a      	add	r2, fp
 800b5a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f000 809f 	beq.w	800b6ea <_svfiprintf_r+0x1c6>
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b5b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5b6:	f10a 0a01 	add.w	sl, sl, #1
 800b5ba:	9304      	str	r3, [sp, #16]
 800b5bc:	9307      	str	r3, [sp, #28]
 800b5be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5c4:	4654      	mov	r4, sl
 800b5c6:	2205      	movs	r2, #5
 800b5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5cc:	484e      	ldr	r0, [pc, #312]	@ (800b708 <_svfiprintf_r+0x1e4>)
 800b5ce:	f7f4 fdff 	bl	80001d0 <memchr>
 800b5d2:	9a04      	ldr	r2, [sp, #16]
 800b5d4:	b9d8      	cbnz	r0, 800b60e <_svfiprintf_r+0xea>
 800b5d6:	06d0      	lsls	r0, r2, #27
 800b5d8:	bf44      	itt	mi
 800b5da:	2320      	movmi	r3, #32
 800b5dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5e0:	0711      	lsls	r1, r2, #28
 800b5e2:	bf44      	itt	mi
 800b5e4:	232b      	movmi	r3, #43	@ 0x2b
 800b5e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5f0:	d015      	beq.n	800b61e <_svfiprintf_r+0xfa>
 800b5f2:	9a07      	ldr	r2, [sp, #28]
 800b5f4:	4654      	mov	r4, sl
 800b5f6:	2000      	movs	r0, #0
 800b5f8:	f04f 0c0a 	mov.w	ip, #10
 800b5fc:	4621      	mov	r1, r4
 800b5fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b602:	3b30      	subs	r3, #48	@ 0x30
 800b604:	2b09      	cmp	r3, #9
 800b606:	d94b      	bls.n	800b6a0 <_svfiprintf_r+0x17c>
 800b608:	b1b0      	cbz	r0, 800b638 <_svfiprintf_r+0x114>
 800b60a:	9207      	str	r2, [sp, #28]
 800b60c:	e014      	b.n	800b638 <_svfiprintf_r+0x114>
 800b60e:	eba0 0308 	sub.w	r3, r0, r8
 800b612:	fa09 f303 	lsl.w	r3, r9, r3
 800b616:	4313      	orrs	r3, r2
 800b618:	9304      	str	r3, [sp, #16]
 800b61a:	46a2      	mov	sl, r4
 800b61c:	e7d2      	b.n	800b5c4 <_svfiprintf_r+0xa0>
 800b61e:	9b03      	ldr	r3, [sp, #12]
 800b620:	1d19      	adds	r1, r3, #4
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	9103      	str	r1, [sp, #12]
 800b626:	2b00      	cmp	r3, #0
 800b628:	bfbb      	ittet	lt
 800b62a:	425b      	neglt	r3, r3
 800b62c:	f042 0202 	orrlt.w	r2, r2, #2
 800b630:	9307      	strge	r3, [sp, #28]
 800b632:	9307      	strlt	r3, [sp, #28]
 800b634:	bfb8      	it	lt
 800b636:	9204      	strlt	r2, [sp, #16]
 800b638:	7823      	ldrb	r3, [r4, #0]
 800b63a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b63c:	d10a      	bne.n	800b654 <_svfiprintf_r+0x130>
 800b63e:	7863      	ldrb	r3, [r4, #1]
 800b640:	2b2a      	cmp	r3, #42	@ 0x2a
 800b642:	d132      	bne.n	800b6aa <_svfiprintf_r+0x186>
 800b644:	9b03      	ldr	r3, [sp, #12]
 800b646:	1d1a      	adds	r2, r3, #4
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	9203      	str	r2, [sp, #12]
 800b64c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b650:	3402      	adds	r4, #2
 800b652:	9305      	str	r3, [sp, #20]
 800b654:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b718 <_svfiprintf_r+0x1f4>
 800b658:	7821      	ldrb	r1, [r4, #0]
 800b65a:	2203      	movs	r2, #3
 800b65c:	4650      	mov	r0, sl
 800b65e:	f7f4 fdb7 	bl	80001d0 <memchr>
 800b662:	b138      	cbz	r0, 800b674 <_svfiprintf_r+0x150>
 800b664:	9b04      	ldr	r3, [sp, #16]
 800b666:	eba0 000a 	sub.w	r0, r0, sl
 800b66a:	2240      	movs	r2, #64	@ 0x40
 800b66c:	4082      	lsls	r2, r0
 800b66e:	4313      	orrs	r3, r2
 800b670:	3401      	adds	r4, #1
 800b672:	9304      	str	r3, [sp, #16]
 800b674:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b678:	4824      	ldr	r0, [pc, #144]	@ (800b70c <_svfiprintf_r+0x1e8>)
 800b67a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b67e:	2206      	movs	r2, #6
 800b680:	f7f4 fda6 	bl	80001d0 <memchr>
 800b684:	2800      	cmp	r0, #0
 800b686:	d036      	beq.n	800b6f6 <_svfiprintf_r+0x1d2>
 800b688:	4b21      	ldr	r3, [pc, #132]	@ (800b710 <_svfiprintf_r+0x1ec>)
 800b68a:	bb1b      	cbnz	r3, 800b6d4 <_svfiprintf_r+0x1b0>
 800b68c:	9b03      	ldr	r3, [sp, #12]
 800b68e:	3307      	adds	r3, #7
 800b690:	f023 0307 	bic.w	r3, r3, #7
 800b694:	3308      	adds	r3, #8
 800b696:	9303      	str	r3, [sp, #12]
 800b698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b69a:	4433      	add	r3, r6
 800b69c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b69e:	e76a      	b.n	800b576 <_svfiprintf_r+0x52>
 800b6a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6a4:	460c      	mov	r4, r1
 800b6a6:	2001      	movs	r0, #1
 800b6a8:	e7a8      	b.n	800b5fc <_svfiprintf_r+0xd8>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	3401      	adds	r4, #1
 800b6ae:	9305      	str	r3, [sp, #20]
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	f04f 0c0a 	mov.w	ip, #10
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6bc:	3a30      	subs	r2, #48	@ 0x30
 800b6be:	2a09      	cmp	r2, #9
 800b6c0:	d903      	bls.n	800b6ca <_svfiprintf_r+0x1a6>
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d0c6      	beq.n	800b654 <_svfiprintf_r+0x130>
 800b6c6:	9105      	str	r1, [sp, #20]
 800b6c8:	e7c4      	b.n	800b654 <_svfiprintf_r+0x130>
 800b6ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e7f0      	b.n	800b6b6 <_svfiprintf_r+0x192>
 800b6d4:	ab03      	add	r3, sp, #12
 800b6d6:	9300      	str	r3, [sp, #0]
 800b6d8:	462a      	mov	r2, r5
 800b6da:	4b0e      	ldr	r3, [pc, #56]	@ (800b714 <_svfiprintf_r+0x1f0>)
 800b6dc:	a904      	add	r1, sp, #16
 800b6de:	4638      	mov	r0, r7
 800b6e0:	f7fc fb36 	bl	8007d50 <_printf_float>
 800b6e4:	1c42      	adds	r2, r0, #1
 800b6e6:	4606      	mov	r6, r0
 800b6e8:	d1d6      	bne.n	800b698 <_svfiprintf_r+0x174>
 800b6ea:	89ab      	ldrh	r3, [r5, #12]
 800b6ec:	065b      	lsls	r3, r3, #25
 800b6ee:	f53f af2d 	bmi.w	800b54c <_svfiprintf_r+0x28>
 800b6f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6f4:	e72c      	b.n	800b550 <_svfiprintf_r+0x2c>
 800b6f6:	ab03      	add	r3, sp, #12
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	462a      	mov	r2, r5
 800b6fc:	4b05      	ldr	r3, [pc, #20]	@ (800b714 <_svfiprintf_r+0x1f0>)
 800b6fe:	a904      	add	r1, sp, #16
 800b700:	4638      	mov	r0, r7
 800b702:	f7fc fdbd 	bl	8008280 <_printf_i>
 800b706:	e7ed      	b.n	800b6e4 <_svfiprintf_r+0x1c0>
 800b708:	0800d2f0 	.word	0x0800d2f0
 800b70c:	0800d2fa 	.word	0x0800d2fa
 800b710:	08007d51 	.word	0x08007d51
 800b714:	0800b46d 	.word	0x0800b46d
 800b718:	0800d2f6 	.word	0x0800d2f6

0800b71c <_sungetc_r>:
 800b71c:	b538      	push	{r3, r4, r5, lr}
 800b71e:	1c4b      	adds	r3, r1, #1
 800b720:	4614      	mov	r4, r2
 800b722:	d103      	bne.n	800b72c <_sungetc_r+0x10>
 800b724:	f04f 35ff 	mov.w	r5, #4294967295
 800b728:	4628      	mov	r0, r5
 800b72a:	bd38      	pop	{r3, r4, r5, pc}
 800b72c:	8993      	ldrh	r3, [r2, #12]
 800b72e:	f023 0320 	bic.w	r3, r3, #32
 800b732:	8193      	strh	r3, [r2, #12]
 800b734:	6853      	ldr	r3, [r2, #4]
 800b736:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b738:	b2cd      	uxtb	r5, r1
 800b73a:	b18a      	cbz	r2, 800b760 <_sungetc_r+0x44>
 800b73c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b73e:	429a      	cmp	r2, r3
 800b740:	dd08      	ble.n	800b754 <_sungetc_r+0x38>
 800b742:	6823      	ldr	r3, [r4, #0]
 800b744:	1e5a      	subs	r2, r3, #1
 800b746:	6022      	str	r2, [r4, #0]
 800b748:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b74c:	6863      	ldr	r3, [r4, #4]
 800b74e:	3301      	adds	r3, #1
 800b750:	6063      	str	r3, [r4, #4]
 800b752:	e7e9      	b.n	800b728 <_sungetc_r+0xc>
 800b754:	4621      	mov	r1, r4
 800b756:	f000 fcd8 	bl	800c10a <__submore>
 800b75a:	2800      	cmp	r0, #0
 800b75c:	d0f1      	beq.n	800b742 <_sungetc_r+0x26>
 800b75e:	e7e1      	b.n	800b724 <_sungetc_r+0x8>
 800b760:	6921      	ldr	r1, [r4, #16]
 800b762:	6822      	ldr	r2, [r4, #0]
 800b764:	b141      	cbz	r1, 800b778 <_sungetc_r+0x5c>
 800b766:	4291      	cmp	r1, r2
 800b768:	d206      	bcs.n	800b778 <_sungetc_r+0x5c>
 800b76a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800b76e:	42a9      	cmp	r1, r5
 800b770:	d102      	bne.n	800b778 <_sungetc_r+0x5c>
 800b772:	3a01      	subs	r2, #1
 800b774:	6022      	str	r2, [r4, #0]
 800b776:	e7ea      	b.n	800b74e <_sungetc_r+0x32>
 800b778:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800b77c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b780:	6363      	str	r3, [r4, #52]	@ 0x34
 800b782:	2303      	movs	r3, #3
 800b784:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b786:	4623      	mov	r3, r4
 800b788:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b78c:	6023      	str	r3, [r4, #0]
 800b78e:	2301      	movs	r3, #1
 800b790:	e7de      	b.n	800b750 <_sungetc_r+0x34>

0800b792 <__ssrefill_r>:
 800b792:	b510      	push	{r4, lr}
 800b794:	460c      	mov	r4, r1
 800b796:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b798:	b169      	cbz	r1, 800b7b6 <__ssrefill_r+0x24>
 800b79a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b79e:	4299      	cmp	r1, r3
 800b7a0:	d001      	beq.n	800b7a6 <__ssrefill_r+0x14>
 800b7a2:	f7fe faa9 	bl	8009cf8 <_free_r>
 800b7a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b7a8:	6063      	str	r3, [r4, #4]
 800b7aa:	2000      	movs	r0, #0
 800b7ac:	6360      	str	r0, [r4, #52]	@ 0x34
 800b7ae:	b113      	cbz	r3, 800b7b6 <__ssrefill_r+0x24>
 800b7b0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b7b2:	6023      	str	r3, [r4, #0]
 800b7b4:	bd10      	pop	{r4, pc}
 800b7b6:	6923      	ldr	r3, [r4, #16]
 800b7b8:	6023      	str	r3, [r4, #0]
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	6063      	str	r3, [r4, #4]
 800b7be:	89a3      	ldrh	r3, [r4, #12]
 800b7c0:	f043 0320 	orr.w	r3, r3, #32
 800b7c4:	81a3      	strh	r3, [r4, #12]
 800b7c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ca:	e7f3      	b.n	800b7b4 <__ssrefill_r+0x22>

0800b7cc <__ssvfiscanf_r>:
 800b7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d0:	460c      	mov	r4, r1
 800b7d2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800b7dc:	49a5      	ldr	r1, [pc, #660]	@ (800ba74 <__ssvfiscanf_r+0x2a8>)
 800b7de:	91a0      	str	r1, [sp, #640]	@ 0x280
 800b7e0:	f10d 0804 	add.w	r8, sp, #4
 800b7e4:	49a4      	ldr	r1, [pc, #656]	@ (800ba78 <__ssvfiscanf_r+0x2ac>)
 800b7e6:	4fa5      	ldr	r7, [pc, #660]	@ (800ba7c <__ssvfiscanf_r+0x2b0>)
 800b7e8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	91a1      	str	r1, [sp, #644]	@ 0x284
 800b7f0:	9300      	str	r3, [sp, #0]
 800b7f2:	7813      	ldrb	r3, [r2, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	f000 8158 	beq.w	800baaa <__ssvfiscanf_r+0x2de>
 800b7fa:	5cf9      	ldrb	r1, [r7, r3]
 800b7fc:	f011 0108 	ands.w	r1, r1, #8
 800b800:	f102 0501 	add.w	r5, r2, #1
 800b804:	d019      	beq.n	800b83a <__ssvfiscanf_r+0x6e>
 800b806:	6863      	ldr	r3, [r4, #4]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	dd0f      	ble.n	800b82c <__ssvfiscanf_r+0x60>
 800b80c:	6823      	ldr	r3, [r4, #0]
 800b80e:	781a      	ldrb	r2, [r3, #0]
 800b810:	5cba      	ldrb	r2, [r7, r2]
 800b812:	0712      	lsls	r2, r2, #28
 800b814:	d401      	bmi.n	800b81a <__ssvfiscanf_r+0x4e>
 800b816:	462a      	mov	r2, r5
 800b818:	e7eb      	b.n	800b7f2 <__ssvfiscanf_r+0x26>
 800b81a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b81c:	3201      	adds	r2, #1
 800b81e:	9245      	str	r2, [sp, #276]	@ 0x114
 800b820:	6862      	ldr	r2, [r4, #4]
 800b822:	3301      	adds	r3, #1
 800b824:	3a01      	subs	r2, #1
 800b826:	6062      	str	r2, [r4, #4]
 800b828:	6023      	str	r3, [r4, #0]
 800b82a:	e7ec      	b.n	800b806 <__ssvfiscanf_r+0x3a>
 800b82c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b82e:	4621      	mov	r1, r4
 800b830:	4630      	mov	r0, r6
 800b832:	4798      	blx	r3
 800b834:	2800      	cmp	r0, #0
 800b836:	d0e9      	beq.n	800b80c <__ssvfiscanf_r+0x40>
 800b838:	e7ed      	b.n	800b816 <__ssvfiscanf_r+0x4a>
 800b83a:	2b25      	cmp	r3, #37	@ 0x25
 800b83c:	d012      	beq.n	800b864 <__ssvfiscanf_r+0x98>
 800b83e:	4699      	mov	r9, r3
 800b840:	6863      	ldr	r3, [r4, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	f340 8093 	ble.w	800b96e <__ssvfiscanf_r+0x1a2>
 800b848:	6822      	ldr	r2, [r4, #0]
 800b84a:	7813      	ldrb	r3, [r2, #0]
 800b84c:	454b      	cmp	r3, r9
 800b84e:	f040 812c 	bne.w	800baaa <__ssvfiscanf_r+0x2de>
 800b852:	6863      	ldr	r3, [r4, #4]
 800b854:	3b01      	subs	r3, #1
 800b856:	6063      	str	r3, [r4, #4]
 800b858:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800b85a:	3201      	adds	r2, #1
 800b85c:	3301      	adds	r3, #1
 800b85e:	6022      	str	r2, [r4, #0]
 800b860:	9345      	str	r3, [sp, #276]	@ 0x114
 800b862:	e7d8      	b.n	800b816 <__ssvfiscanf_r+0x4a>
 800b864:	9141      	str	r1, [sp, #260]	@ 0x104
 800b866:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b868:	7853      	ldrb	r3, [r2, #1]
 800b86a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b86c:	bf02      	ittt	eq
 800b86e:	2310      	moveq	r3, #16
 800b870:	1c95      	addeq	r5, r2, #2
 800b872:	9341      	streq	r3, [sp, #260]	@ 0x104
 800b874:	220a      	movs	r2, #10
 800b876:	46a9      	mov	r9, r5
 800b878:	f819 1b01 	ldrb.w	r1, [r9], #1
 800b87c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800b880:	2b09      	cmp	r3, #9
 800b882:	d91e      	bls.n	800b8c2 <__ssvfiscanf_r+0xf6>
 800b884:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800ba80 <__ssvfiscanf_r+0x2b4>
 800b888:	2203      	movs	r2, #3
 800b88a:	4650      	mov	r0, sl
 800b88c:	f7f4 fca0 	bl	80001d0 <memchr>
 800b890:	b138      	cbz	r0, 800b8a2 <__ssvfiscanf_r+0xd6>
 800b892:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b894:	eba0 000a 	sub.w	r0, r0, sl
 800b898:	2301      	movs	r3, #1
 800b89a:	4083      	lsls	r3, r0
 800b89c:	4313      	orrs	r3, r2
 800b89e:	9341      	str	r3, [sp, #260]	@ 0x104
 800b8a0:	464d      	mov	r5, r9
 800b8a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b8a6:	2b78      	cmp	r3, #120	@ 0x78
 800b8a8:	d806      	bhi.n	800b8b8 <__ssvfiscanf_r+0xec>
 800b8aa:	2b57      	cmp	r3, #87	@ 0x57
 800b8ac:	d810      	bhi.n	800b8d0 <__ssvfiscanf_r+0x104>
 800b8ae:	2b25      	cmp	r3, #37	@ 0x25
 800b8b0:	d0c5      	beq.n	800b83e <__ssvfiscanf_r+0x72>
 800b8b2:	d857      	bhi.n	800b964 <__ssvfiscanf_r+0x198>
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d065      	beq.n	800b984 <__ssvfiscanf_r+0x1b8>
 800b8b8:	2303      	movs	r3, #3
 800b8ba:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b8bc:	230a      	movs	r3, #10
 800b8be:	9342      	str	r3, [sp, #264]	@ 0x108
 800b8c0:	e078      	b.n	800b9b4 <__ssvfiscanf_r+0x1e8>
 800b8c2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800b8c4:	fb02 1103 	mla	r1, r2, r3, r1
 800b8c8:	3930      	subs	r1, #48	@ 0x30
 800b8ca:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b8cc:	464d      	mov	r5, r9
 800b8ce:	e7d2      	b.n	800b876 <__ssvfiscanf_r+0xaa>
 800b8d0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800b8d4:	2a20      	cmp	r2, #32
 800b8d6:	d8ef      	bhi.n	800b8b8 <__ssvfiscanf_r+0xec>
 800b8d8:	a101      	add	r1, pc, #4	@ (adr r1, 800b8e0 <__ssvfiscanf_r+0x114>)
 800b8da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b8de:	bf00      	nop
 800b8e0:	0800b993 	.word	0x0800b993
 800b8e4:	0800b8b9 	.word	0x0800b8b9
 800b8e8:	0800b8b9 	.word	0x0800b8b9
 800b8ec:	0800b9ed 	.word	0x0800b9ed
 800b8f0:	0800b8b9 	.word	0x0800b8b9
 800b8f4:	0800b8b9 	.word	0x0800b8b9
 800b8f8:	0800b8b9 	.word	0x0800b8b9
 800b8fc:	0800b8b9 	.word	0x0800b8b9
 800b900:	0800b8b9 	.word	0x0800b8b9
 800b904:	0800b8b9 	.word	0x0800b8b9
 800b908:	0800b8b9 	.word	0x0800b8b9
 800b90c:	0800ba03 	.word	0x0800ba03
 800b910:	0800b9e9 	.word	0x0800b9e9
 800b914:	0800b96b 	.word	0x0800b96b
 800b918:	0800b96b 	.word	0x0800b96b
 800b91c:	0800b96b 	.word	0x0800b96b
 800b920:	0800b8b9 	.word	0x0800b8b9
 800b924:	0800b9a5 	.word	0x0800b9a5
 800b928:	0800b8b9 	.word	0x0800b8b9
 800b92c:	0800b8b9 	.word	0x0800b8b9
 800b930:	0800b8b9 	.word	0x0800b8b9
 800b934:	0800b8b9 	.word	0x0800b8b9
 800b938:	0800ba13 	.word	0x0800ba13
 800b93c:	0800b9ad 	.word	0x0800b9ad
 800b940:	0800b98b 	.word	0x0800b98b
 800b944:	0800b8b9 	.word	0x0800b8b9
 800b948:	0800b8b9 	.word	0x0800b8b9
 800b94c:	0800ba0f 	.word	0x0800ba0f
 800b950:	0800b8b9 	.word	0x0800b8b9
 800b954:	0800b9e9 	.word	0x0800b9e9
 800b958:	0800b8b9 	.word	0x0800b8b9
 800b95c:	0800b8b9 	.word	0x0800b8b9
 800b960:	0800b993 	.word	0x0800b993
 800b964:	3b45      	subs	r3, #69	@ 0x45
 800b966:	2b02      	cmp	r3, #2
 800b968:	d8a6      	bhi.n	800b8b8 <__ssvfiscanf_r+0xec>
 800b96a:	2305      	movs	r3, #5
 800b96c:	e021      	b.n	800b9b2 <__ssvfiscanf_r+0x1e6>
 800b96e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b970:	4621      	mov	r1, r4
 800b972:	4630      	mov	r0, r6
 800b974:	4798      	blx	r3
 800b976:	2800      	cmp	r0, #0
 800b978:	f43f af66 	beq.w	800b848 <__ssvfiscanf_r+0x7c>
 800b97c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b97e:	2800      	cmp	r0, #0
 800b980:	f040 808b 	bne.w	800ba9a <__ssvfiscanf_r+0x2ce>
 800b984:	f04f 30ff 	mov.w	r0, #4294967295
 800b988:	e08b      	b.n	800baa2 <__ssvfiscanf_r+0x2d6>
 800b98a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b98c:	f042 0220 	orr.w	r2, r2, #32
 800b990:	9241      	str	r2, [sp, #260]	@ 0x104
 800b992:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b994:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b998:	9241      	str	r2, [sp, #260]	@ 0x104
 800b99a:	2210      	movs	r2, #16
 800b99c:	2b6e      	cmp	r3, #110	@ 0x6e
 800b99e:	9242      	str	r2, [sp, #264]	@ 0x108
 800b9a0:	d902      	bls.n	800b9a8 <__ssvfiscanf_r+0x1dc>
 800b9a2:	e005      	b.n	800b9b0 <__ssvfiscanf_r+0x1e4>
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	9342      	str	r3, [sp, #264]	@ 0x108
 800b9a8:	2303      	movs	r3, #3
 800b9aa:	e002      	b.n	800b9b2 <__ssvfiscanf_r+0x1e6>
 800b9ac:	2308      	movs	r3, #8
 800b9ae:	9342      	str	r3, [sp, #264]	@ 0x108
 800b9b0:	2304      	movs	r3, #4
 800b9b2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b9b4:	6863      	ldr	r3, [r4, #4]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	dd39      	ble.n	800ba2e <__ssvfiscanf_r+0x262>
 800b9ba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b9bc:	0659      	lsls	r1, r3, #25
 800b9be:	d404      	bmi.n	800b9ca <__ssvfiscanf_r+0x1fe>
 800b9c0:	6823      	ldr	r3, [r4, #0]
 800b9c2:	781a      	ldrb	r2, [r3, #0]
 800b9c4:	5cba      	ldrb	r2, [r7, r2]
 800b9c6:	0712      	lsls	r2, r2, #28
 800b9c8:	d438      	bmi.n	800ba3c <__ssvfiscanf_r+0x270>
 800b9ca:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800b9cc:	2b02      	cmp	r3, #2
 800b9ce:	dc47      	bgt.n	800ba60 <__ssvfiscanf_r+0x294>
 800b9d0:	466b      	mov	r3, sp
 800b9d2:	4622      	mov	r2, r4
 800b9d4:	a941      	add	r1, sp, #260	@ 0x104
 800b9d6:	4630      	mov	r0, r6
 800b9d8:	f000 f9ae 	bl	800bd38 <_scanf_chars>
 800b9dc:	2801      	cmp	r0, #1
 800b9de:	d064      	beq.n	800baaa <__ssvfiscanf_r+0x2de>
 800b9e0:	2802      	cmp	r0, #2
 800b9e2:	f47f af18 	bne.w	800b816 <__ssvfiscanf_r+0x4a>
 800b9e6:	e7c9      	b.n	800b97c <__ssvfiscanf_r+0x1b0>
 800b9e8:	220a      	movs	r2, #10
 800b9ea:	e7d7      	b.n	800b99c <__ssvfiscanf_r+0x1d0>
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	4640      	mov	r0, r8
 800b9f0:	f000 fb52 	bl	800c098 <__sccl>
 800b9f4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b9f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9fa:	9341      	str	r3, [sp, #260]	@ 0x104
 800b9fc:	4605      	mov	r5, r0
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e7d7      	b.n	800b9b2 <__ssvfiscanf_r+0x1e6>
 800ba02:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ba04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba08:	9341      	str	r3, [sp, #260]	@ 0x104
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	e7d1      	b.n	800b9b2 <__ssvfiscanf_r+0x1e6>
 800ba0e:	2302      	movs	r3, #2
 800ba10:	e7cf      	b.n	800b9b2 <__ssvfiscanf_r+0x1e6>
 800ba12:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800ba14:	06c3      	lsls	r3, r0, #27
 800ba16:	f53f aefe 	bmi.w	800b816 <__ssvfiscanf_r+0x4a>
 800ba1a:	9b00      	ldr	r3, [sp, #0]
 800ba1c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ba1e:	1d19      	adds	r1, r3, #4
 800ba20:	9100      	str	r1, [sp, #0]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	07c0      	lsls	r0, r0, #31
 800ba26:	bf4c      	ite	mi
 800ba28:	801a      	strhmi	r2, [r3, #0]
 800ba2a:	601a      	strpl	r2, [r3, #0]
 800ba2c:	e6f3      	b.n	800b816 <__ssvfiscanf_r+0x4a>
 800ba2e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ba30:	4621      	mov	r1, r4
 800ba32:	4630      	mov	r0, r6
 800ba34:	4798      	blx	r3
 800ba36:	2800      	cmp	r0, #0
 800ba38:	d0bf      	beq.n	800b9ba <__ssvfiscanf_r+0x1ee>
 800ba3a:	e79f      	b.n	800b97c <__ssvfiscanf_r+0x1b0>
 800ba3c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ba3e:	3201      	adds	r2, #1
 800ba40:	9245      	str	r2, [sp, #276]	@ 0x114
 800ba42:	6862      	ldr	r2, [r4, #4]
 800ba44:	3a01      	subs	r2, #1
 800ba46:	2a00      	cmp	r2, #0
 800ba48:	6062      	str	r2, [r4, #4]
 800ba4a:	dd02      	ble.n	800ba52 <__ssvfiscanf_r+0x286>
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	6023      	str	r3, [r4, #0]
 800ba50:	e7b6      	b.n	800b9c0 <__ssvfiscanf_r+0x1f4>
 800ba52:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ba54:	4621      	mov	r1, r4
 800ba56:	4630      	mov	r0, r6
 800ba58:	4798      	blx	r3
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	d0b0      	beq.n	800b9c0 <__ssvfiscanf_r+0x1f4>
 800ba5e:	e78d      	b.n	800b97c <__ssvfiscanf_r+0x1b0>
 800ba60:	2b04      	cmp	r3, #4
 800ba62:	dc0f      	bgt.n	800ba84 <__ssvfiscanf_r+0x2b8>
 800ba64:	466b      	mov	r3, sp
 800ba66:	4622      	mov	r2, r4
 800ba68:	a941      	add	r1, sp, #260	@ 0x104
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f000 f9be 	bl	800bdec <_scanf_i>
 800ba70:	e7b4      	b.n	800b9dc <__ssvfiscanf_r+0x210>
 800ba72:	bf00      	nop
 800ba74:	0800b71d 	.word	0x0800b71d
 800ba78:	0800b793 	.word	0x0800b793
 800ba7c:	0800cf79 	.word	0x0800cf79
 800ba80:	0800d2f6 	.word	0x0800d2f6
 800ba84:	4b0a      	ldr	r3, [pc, #40]	@ (800bab0 <__ssvfiscanf_r+0x2e4>)
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	f43f aec5 	beq.w	800b816 <__ssvfiscanf_r+0x4a>
 800ba8c:	466b      	mov	r3, sp
 800ba8e:	4622      	mov	r2, r4
 800ba90:	a941      	add	r1, sp, #260	@ 0x104
 800ba92:	4630      	mov	r0, r6
 800ba94:	f7fc fd14 	bl	80084c0 <_scanf_float>
 800ba98:	e7a0      	b.n	800b9dc <__ssvfiscanf_r+0x210>
 800ba9a:	89a3      	ldrh	r3, [r4, #12]
 800ba9c:	065b      	lsls	r3, r3, #25
 800ba9e:	f53f af71 	bmi.w	800b984 <__ssvfiscanf_r+0x1b8>
 800baa2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800baa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baaa:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800baac:	e7f9      	b.n	800baa2 <__ssvfiscanf_r+0x2d6>
 800baae:	bf00      	nop
 800bab0:	080084c1 	.word	0x080084c1

0800bab4 <__sfputc_r>:
 800bab4:	6893      	ldr	r3, [r2, #8]
 800bab6:	3b01      	subs	r3, #1
 800bab8:	2b00      	cmp	r3, #0
 800baba:	b410      	push	{r4}
 800babc:	6093      	str	r3, [r2, #8]
 800babe:	da08      	bge.n	800bad2 <__sfputc_r+0x1e>
 800bac0:	6994      	ldr	r4, [r2, #24]
 800bac2:	42a3      	cmp	r3, r4
 800bac4:	db01      	blt.n	800baca <__sfputc_r+0x16>
 800bac6:	290a      	cmp	r1, #10
 800bac8:	d103      	bne.n	800bad2 <__sfputc_r+0x1e>
 800baca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bace:	f7fd b98c 	b.w	8008dea <__swbuf_r>
 800bad2:	6813      	ldr	r3, [r2, #0]
 800bad4:	1c58      	adds	r0, r3, #1
 800bad6:	6010      	str	r0, [r2, #0]
 800bad8:	7019      	strb	r1, [r3, #0]
 800bada:	4608      	mov	r0, r1
 800badc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bae0:	4770      	bx	lr

0800bae2 <__sfputs_r>:
 800bae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae4:	4606      	mov	r6, r0
 800bae6:	460f      	mov	r7, r1
 800bae8:	4614      	mov	r4, r2
 800baea:	18d5      	adds	r5, r2, r3
 800baec:	42ac      	cmp	r4, r5
 800baee:	d101      	bne.n	800baf4 <__sfputs_r+0x12>
 800baf0:	2000      	movs	r0, #0
 800baf2:	e007      	b.n	800bb04 <__sfputs_r+0x22>
 800baf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baf8:	463a      	mov	r2, r7
 800bafa:	4630      	mov	r0, r6
 800bafc:	f7ff ffda 	bl	800bab4 <__sfputc_r>
 800bb00:	1c43      	adds	r3, r0, #1
 800bb02:	d1f3      	bne.n	800baec <__sfputs_r+0xa>
 800bb04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb08 <_vfiprintf_r>:
 800bb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb0c:	460d      	mov	r5, r1
 800bb0e:	b09d      	sub	sp, #116	@ 0x74
 800bb10:	4614      	mov	r4, r2
 800bb12:	4698      	mov	r8, r3
 800bb14:	4606      	mov	r6, r0
 800bb16:	b118      	cbz	r0, 800bb20 <_vfiprintf_r+0x18>
 800bb18:	6a03      	ldr	r3, [r0, #32]
 800bb1a:	b90b      	cbnz	r3, 800bb20 <_vfiprintf_r+0x18>
 800bb1c:	f7fd f830 	bl	8008b80 <__sinit>
 800bb20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb22:	07d9      	lsls	r1, r3, #31
 800bb24:	d405      	bmi.n	800bb32 <_vfiprintf_r+0x2a>
 800bb26:	89ab      	ldrh	r3, [r5, #12]
 800bb28:	059a      	lsls	r2, r3, #22
 800bb2a:	d402      	bmi.n	800bb32 <_vfiprintf_r+0x2a>
 800bb2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb2e:	f7fd fa80 	bl	8009032 <__retarget_lock_acquire_recursive>
 800bb32:	89ab      	ldrh	r3, [r5, #12]
 800bb34:	071b      	lsls	r3, r3, #28
 800bb36:	d501      	bpl.n	800bb3c <_vfiprintf_r+0x34>
 800bb38:	692b      	ldr	r3, [r5, #16]
 800bb3a:	b99b      	cbnz	r3, 800bb64 <_vfiprintf_r+0x5c>
 800bb3c:	4629      	mov	r1, r5
 800bb3e:	4630      	mov	r0, r6
 800bb40:	f7fd f992 	bl	8008e68 <__swsetup_r>
 800bb44:	b170      	cbz	r0, 800bb64 <_vfiprintf_r+0x5c>
 800bb46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb48:	07dc      	lsls	r4, r3, #31
 800bb4a:	d504      	bpl.n	800bb56 <_vfiprintf_r+0x4e>
 800bb4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb50:	b01d      	add	sp, #116	@ 0x74
 800bb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb56:	89ab      	ldrh	r3, [r5, #12]
 800bb58:	0598      	lsls	r0, r3, #22
 800bb5a:	d4f7      	bmi.n	800bb4c <_vfiprintf_r+0x44>
 800bb5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb5e:	f7fd fa69 	bl	8009034 <__retarget_lock_release_recursive>
 800bb62:	e7f3      	b.n	800bb4c <_vfiprintf_r+0x44>
 800bb64:	2300      	movs	r3, #0
 800bb66:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb68:	2320      	movs	r3, #32
 800bb6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb72:	2330      	movs	r3, #48	@ 0x30
 800bb74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bd24 <_vfiprintf_r+0x21c>
 800bb78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb7c:	f04f 0901 	mov.w	r9, #1
 800bb80:	4623      	mov	r3, r4
 800bb82:	469a      	mov	sl, r3
 800bb84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb88:	b10a      	cbz	r2, 800bb8e <_vfiprintf_r+0x86>
 800bb8a:	2a25      	cmp	r2, #37	@ 0x25
 800bb8c:	d1f9      	bne.n	800bb82 <_vfiprintf_r+0x7a>
 800bb8e:	ebba 0b04 	subs.w	fp, sl, r4
 800bb92:	d00b      	beq.n	800bbac <_vfiprintf_r+0xa4>
 800bb94:	465b      	mov	r3, fp
 800bb96:	4622      	mov	r2, r4
 800bb98:	4629      	mov	r1, r5
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	f7ff ffa1 	bl	800bae2 <__sfputs_r>
 800bba0:	3001      	adds	r0, #1
 800bba2:	f000 80a7 	beq.w	800bcf4 <_vfiprintf_r+0x1ec>
 800bba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bba8:	445a      	add	r2, fp
 800bbaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbac:	f89a 3000 	ldrb.w	r3, [sl]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f000 809f 	beq.w	800bcf4 <_vfiprintf_r+0x1ec>
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	f04f 32ff 	mov.w	r2, #4294967295
 800bbbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbc0:	f10a 0a01 	add.w	sl, sl, #1
 800bbc4:	9304      	str	r3, [sp, #16]
 800bbc6:	9307      	str	r3, [sp, #28]
 800bbc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbcc:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbce:	4654      	mov	r4, sl
 800bbd0:	2205      	movs	r2, #5
 800bbd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd6:	4853      	ldr	r0, [pc, #332]	@ (800bd24 <_vfiprintf_r+0x21c>)
 800bbd8:	f7f4 fafa 	bl	80001d0 <memchr>
 800bbdc:	9a04      	ldr	r2, [sp, #16]
 800bbde:	b9d8      	cbnz	r0, 800bc18 <_vfiprintf_r+0x110>
 800bbe0:	06d1      	lsls	r1, r2, #27
 800bbe2:	bf44      	itt	mi
 800bbe4:	2320      	movmi	r3, #32
 800bbe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbea:	0713      	lsls	r3, r2, #28
 800bbec:	bf44      	itt	mi
 800bbee:	232b      	movmi	r3, #43	@ 0x2b
 800bbf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbf4:	f89a 3000 	ldrb.w	r3, [sl]
 800bbf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbfa:	d015      	beq.n	800bc28 <_vfiprintf_r+0x120>
 800bbfc:	9a07      	ldr	r2, [sp, #28]
 800bbfe:	4654      	mov	r4, sl
 800bc00:	2000      	movs	r0, #0
 800bc02:	f04f 0c0a 	mov.w	ip, #10
 800bc06:	4621      	mov	r1, r4
 800bc08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc0c:	3b30      	subs	r3, #48	@ 0x30
 800bc0e:	2b09      	cmp	r3, #9
 800bc10:	d94b      	bls.n	800bcaa <_vfiprintf_r+0x1a2>
 800bc12:	b1b0      	cbz	r0, 800bc42 <_vfiprintf_r+0x13a>
 800bc14:	9207      	str	r2, [sp, #28]
 800bc16:	e014      	b.n	800bc42 <_vfiprintf_r+0x13a>
 800bc18:	eba0 0308 	sub.w	r3, r0, r8
 800bc1c:	fa09 f303 	lsl.w	r3, r9, r3
 800bc20:	4313      	orrs	r3, r2
 800bc22:	9304      	str	r3, [sp, #16]
 800bc24:	46a2      	mov	sl, r4
 800bc26:	e7d2      	b.n	800bbce <_vfiprintf_r+0xc6>
 800bc28:	9b03      	ldr	r3, [sp, #12]
 800bc2a:	1d19      	adds	r1, r3, #4
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	9103      	str	r1, [sp, #12]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	bfbb      	ittet	lt
 800bc34:	425b      	neglt	r3, r3
 800bc36:	f042 0202 	orrlt.w	r2, r2, #2
 800bc3a:	9307      	strge	r3, [sp, #28]
 800bc3c:	9307      	strlt	r3, [sp, #28]
 800bc3e:	bfb8      	it	lt
 800bc40:	9204      	strlt	r2, [sp, #16]
 800bc42:	7823      	ldrb	r3, [r4, #0]
 800bc44:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc46:	d10a      	bne.n	800bc5e <_vfiprintf_r+0x156>
 800bc48:	7863      	ldrb	r3, [r4, #1]
 800bc4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc4c:	d132      	bne.n	800bcb4 <_vfiprintf_r+0x1ac>
 800bc4e:	9b03      	ldr	r3, [sp, #12]
 800bc50:	1d1a      	adds	r2, r3, #4
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	9203      	str	r2, [sp, #12]
 800bc56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc5a:	3402      	adds	r4, #2
 800bc5c:	9305      	str	r3, [sp, #20]
 800bc5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd34 <_vfiprintf_r+0x22c>
 800bc62:	7821      	ldrb	r1, [r4, #0]
 800bc64:	2203      	movs	r2, #3
 800bc66:	4650      	mov	r0, sl
 800bc68:	f7f4 fab2 	bl	80001d0 <memchr>
 800bc6c:	b138      	cbz	r0, 800bc7e <_vfiprintf_r+0x176>
 800bc6e:	9b04      	ldr	r3, [sp, #16]
 800bc70:	eba0 000a 	sub.w	r0, r0, sl
 800bc74:	2240      	movs	r2, #64	@ 0x40
 800bc76:	4082      	lsls	r2, r0
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	3401      	adds	r4, #1
 800bc7c:	9304      	str	r3, [sp, #16]
 800bc7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc82:	4829      	ldr	r0, [pc, #164]	@ (800bd28 <_vfiprintf_r+0x220>)
 800bc84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc88:	2206      	movs	r2, #6
 800bc8a:	f7f4 faa1 	bl	80001d0 <memchr>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d03f      	beq.n	800bd12 <_vfiprintf_r+0x20a>
 800bc92:	4b26      	ldr	r3, [pc, #152]	@ (800bd2c <_vfiprintf_r+0x224>)
 800bc94:	bb1b      	cbnz	r3, 800bcde <_vfiprintf_r+0x1d6>
 800bc96:	9b03      	ldr	r3, [sp, #12]
 800bc98:	3307      	adds	r3, #7
 800bc9a:	f023 0307 	bic.w	r3, r3, #7
 800bc9e:	3308      	adds	r3, #8
 800bca0:	9303      	str	r3, [sp, #12]
 800bca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bca4:	443b      	add	r3, r7
 800bca6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bca8:	e76a      	b.n	800bb80 <_vfiprintf_r+0x78>
 800bcaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcae:	460c      	mov	r4, r1
 800bcb0:	2001      	movs	r0, #1
 800bcb2:	e7a8      	b.n	800bc06 <_vfiprintf_r+0xfe>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	3401      	adds	r4, #1
 800bcb8:	9305      	str	r3, [sp, #20]
 800bcba:	4619      	mov	r1, r3
 800bcbc:	f04f 0c0a 	mov.w	ip, #10
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcc6:	3a30      	subs	r2, #48	@ 0x30
 800bcc8:	2a09      	cmp	r2, #9
 800bcca:	d903      	bls.n	800bcd4 <_vfiprintf_r+0x1cc>
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d0c6      	beq.n	800bc5e <_vfiprintf_r+0x156>
 800bcd0:	9105      	str	r1, [sp, #20]
 800bcd2:	e7c4      	b.n	800bc5e <_vfiprintf_r+0x156>
 800bcd4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcd8:	4604      	mov	r4, r0
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e7f0      	b.n	800bcc0 <_vfiprintf_r+0x1b8>
 800bcde:	ab03      	add	r3, sp, #12
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	462a      	mov	r2, r5
 800bce4:	4b12      	ldr	r3, [pc, #72]	@ (800bd30 <_vfiprintf_r+0x228>)
 800bce6:	a904      	add	r1, sp, #16
 800bce8:	4630      	mov	r0, r6
 800bcea:	f7fc f831 	bl	8007d50 <_printf_float>
 800bcee:	4607      	mov	r7, r0
 800bcf0:	1c78      	adds	r0, r7, #1
 800bcf2:	d1d6      	bne.n	800bca2 <_vfiprintf_r+0x19a>
 800bcf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcf6:	07d9      	lsls	r1, r3, #31
 800bcf8:	d405      	bmi.n	800bd06 <_vfiprintf_r+0x1fe>
 800bcfa:	89ab      	ldrh	r3, [r5, #12]
 800bcfc:	059a      	lsls	r2, r3, #22
 800bcfe:	d402      	bmi.n	800bd06 <_vfiprintf_r+0x1fe>
 800bd00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd02:	f7fd f997 	bl	8009034 <__retarget_lock_release_recursive>
 800bd06:	89ab      	ldrh	r3, [r5, #12]
 800bd08:	065b      	lsls	r3, r3, #25
 800bd0a:	f53f af1f 	bmi.w	800bb4c <_vfiprintf_r+0x44>
 800bd0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd10:	e71e      	b.n	800bb50 <_vfiprintf_r+0x48>
 800bd12:	ab03      	add	r3, sp, #12
 800bd14:	9300      	str	r3, [sp, #0]
 800bd16:	462a      	mov	r2, r5
 800bd18:	4b05      	ldr	r3, [pc, #20]	@ (800bd30 <_vfiprintf_r+0x228>)
 800bd1a:	a904      	add	r1, sp, #16
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	f7fc faaf 	bl	8008280 <_printf_i>
 800bd22:	e7e4      	b.n	800bcee <_vfiprintf_r+0x1e6>
 800bd24:	0800d2f0 	.word	0x0800d2f0
 800bd28:	0800d2fa 	.word	0x0800d2fa
 800bd2c:	08007d51 	.word	0x08007d51
 800bd30:	0800bae3 	.word	0x0800bae3
 800bd34:	0800d2f6 	.word	0x0800d2f6

0800bd38 <_scanf_chars>:
 800bd38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd3c:	4615      	mov	r5, r2
 800bd3e:	688a      	ldr	r2, [r1, #8]
 800bd40:	4680      	mov	r8, r0
 800bd42:	460c      	mov	r4, r1
 800bd44:	b932      	cbnz	r2, 800bd54 <_scanf_chars+0x1c>
 800bd46:	698a      	ldr	r2, [r1, #24]
 800bd48:	2a00      	cmp	r2, #0
 800bd4a:	bf14      	ite	ne
 800bd4c:	f04f 32ff 	movne.w	r2, #4294967295
 800bd50:	2201      	moveq	r2, #1
 800bd52:	608a      	str	r2, [r1, #8]
 800bd54:	6822      	ldr	r2, [r4, #0]
 800bd56:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800bde8 <_scanf_chars+0xb0>
 800bd5a:	06d1      	lsls	r1, r2, #27
 800bd5c:	bf5f      	itttt	pl
 800bd5e:	681a      	ldrpl	r2, [r3, #0]
 800bd60:	1d11      	addpl	r1, r2, #4
 800bd62:	6019      	strpl	r1, [r3, #0]
 800bd64:	6816      	ldrpl	r6, [r2, #0]
 800bd66:	2700      	movs	r7, #0
 800bd68:	69a0      	ldr	r0, [r4, #24]
 800bd6a:	b188      	cbz	r0, 800bd90 <_scanf_chars+0x58>
 800bd6c:	2801      	cmp	r0, #1
 800bd6e:	d107      	bne.n	800bd80 <_scanf_chars+0x48>
 800bd70:	682b      	ldr	r3, [r5, #0]
 800bd72:	781a      	ldrb	r2, [r3, #0]
 800bd74:	6963      	ldr	r3, [r4, #20]
 800bd76:	5c9b      	ldrb	r3, [r3, r2]
 800bd78:	b953      	cbnz	r3, 800bd90 <_scanf_chars+0x58>
 800bd7a:	2f00      	cmp	r7, #0
 800bd7c:	d031      	beq.n	800bde2 <_scanf_chars+0xaa>
 800bd7e:	e022      	b.n	800bdc6 <_scanf_chars+0x8e>
 800bd80:	2802      	cmp	r0, #2
 800bd82:	d120      	bne.n	800bdc6 <_scanf_chars+0x8e>
 800bd84:	682b      	ldr	r3, [r5, #0]
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	f819 3003 	ldrb.w	r3, [r9, r3]
 800bd8c:	071b      	lsls	r3, r3, #28
 800bd8e:	d41a      	bmi.n	800bdc6 <_scanf_chars+0x8e>
 800bd90:	6823      	ldr	r3, [r4, #0]
 800bd92:	06da      	lsls	r2, r3, #27
 800bd94:	bf5e      	ittt	pl
 800bd96:	682b      	ldrpl	r3, [r5, #0]
 800bd98:	781b      	ldrbpl	r3, [r3, #0]
 800bd9a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bd9e:	682a      	ldr	r2, [r5, #0]
 800bda0:	686b      	ldr	r3, [r5, #4]
 800bda2:	3201      	adds	r2, #1
 800bda4:	602a      	str	r2, [r5, #0]
 800bda6:	68a2      	ldr	r2, [r4, #8]
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	3a01      	subs	r2, #1
 800bdac:	606b      	str	r3, [r5, #4]
 800bdae:	3701      	adds	r7, #1
 800bdb0:	60a2      	str	r2, [r4, #8]
 800bdb2:	b142      	cbz	r2, 800bdc6 <_scanf_chars+0x8e>
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	dcd7      	bgt.n	800bd68 <_scanf_chars+0x30>
 800bdb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bdbc:	4629      	mov	r1, r5
 800bdbe:	4640      	mov	r0, r8
 800bdc0:	4798      	blx	r3
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	d0d0      	beq.n	800bd68 <_scanf_chars+0x30>
 800bdc6:	6823      	ldr	r3, [r4, #0]
 800bdc8:	f013 0310 	ands.w	r3, r3, #16
 800bdcc:	d105      	bne.n	800bdda <_scanf_chars+0xa2>
 800bdce:	68e2      	ldr	r2, [r4, #12]
 800bdd0:	3201      	adds	r2, #1
 800bdd2:	60e2      	str	r2, [r4, #12]
 800bdd4:	69a2      	ldr	r2, [r4, #24]
 800bdd6:	b102      	cbz	r2, 800bdda <_scanf_chars+0xa2>
 800bdd8:	7033      	strb	r3, [r6, #0]
 800bdda:	6923      	ldr	r3, [r4, #16]
 800bddc:	443b      	add	r3, r7
 800bdde:	6123      	str	r3, [r4, #16]
 800bde0:	2000      	movs	r0, #0
 800bde2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bde6:	bf00      	nop
 800bde8:	0800cf79 	.word	0x0800cf79

0800bdec <_scanf_i>:
 800bdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf0:	4698      	mov	r8, r3
 800bdf2:	4b74      	ldr	r3, [pc, #464]	@ (800bfc4 <_scanf_i+0x1d8>)
 800bdf4:	460c      	mov	r4, r1
 800bdf6:	4682      	mov	sl, r0
 800bdf8:	4616      	mov	r6, r2
 800bdfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bdfe:	b087      	sub	sp, #28
 800be00:	ab03      	add	r3, sp, #12
 800be02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800be06:	4b70      	ldr	r3, [pc, #448]	@ (800bfc8 <_scanf_i+0x1dc>)
 800be08:	69a1      	ldr	r1, [r4, #24]
 800be0a:	4a70      	ldr	r2, [pc, #448]	@ (800bfcc <_scanf_i+0x1e0>)
 800be0c:	2903      	cmp	r1, #3
 800be0e:	bf08      	it	eq
 800be10:	461a      	moveq	r2, r3
 800be12:	68a3      	ldr	r3, [r4, #8]
 800be14:	9201      	str	r2, [sp, #4]
 800be16:	1e5a      	subs	r2, r3, #1
 800be18:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800be1c:	bf88      	it	hi
 800be1e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800be22:	4627      	mov	r7, r4
 800be24:	bf82      	ittt	hi
 800be26:	eb03 0905 	addhi.w	r9, r3, r5
 800be2a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800be2e:	60a3      	strhi	r3, [r4, #8]
 800be30:	f857 3b1c 	ldr.w	r3, [r7], #28
 800be34:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800be38:	bf98      	it	ls
 800be3a:	f04f 0900 	movls.w	r9, #0
 800be3e:	6023      	str	r3, [r4, #0]
 800be40:	463d      	mov	r5, r7
 800be42:	f04f 0b00 	mov.w	fp, #0
 800be46:	6831      	ldr	r1, [r6, #0]
 800be48:	ab03      	add	r3, sp, #12
 800be4a:	7809      	ldrb	r1, [r1, #0]
 800be4c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800be50:	2202      	movs	r2, #2
 800be52:	f7f4 f9bd 	bl	80001d0 <memchr>
 800be56:	b328      	cbz	r0, 800bea4 <_scanf_i+0xb8>
 800be58:	f1bb 0f01 	cmp.w	fp, #1
 800be5c:	d159      	bne.n	800bf12 <_scanf_i+0x126>
 800be5e:	6862      	ldr	r2, [r4, #4]
 800be60:	b92a      	cbnz	r2, 800be6e <_scanf_i+0x82>
 800be62:	6822      	ldr	r2, [r4, #0]
 800be64:	2108      	movs	r1, #8
 800be66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800be6a:	6061      	str	r1, [r4, #4]
 800be6c:	6022      	str	r2, [r4, #0]
 800be6e:	6822      	ldr	r2, [r4, #0]
 800be70:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800be74:	6022      	str	r2, [r4, #0]
 800be76:	68a2      	ldr	r2, [r4, #8]
 800be78:	1e51      	subs	r1, r2, #1
 800be7a:	60a1      	str	r1, [r4, #8]
 800be7c:	b192      	cbz	r2, 800bea4 <_scanf_i+0xb8>
 800be7e:	6832      	ldr	r2, [r6, #0]
 800be80:	1c51      	adds	r1, r2, #1
 800be82:	6031      	str	r1, [r6, #0]
 800be84:	7812      	ldrb	r2, [r2, #0]
 800be86:	f805 2b01 	strb.w	r2, [r5], #1
 800be8a:	6872      	ldr	r2, [r6, #4]
 800be8c:	3a01      	subs	r2, #1
 800be8e:	2a00      	cmp	r2, #0
 800be90:	6072      	str	r2, [r6, #4]
 800be92:	dc07      	bgt.n	800bea4 <_scanf_i+0xb8>
 800be94:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800be98:	4631      	mov	r1, r6
 800be9a:	4650      	mov	r0, sl
 800be9c:	4790      	blx	r2
 800be9e:	2800      	cmp	r0, #0
 800bea0:	f040 8085 	bne.w	800bfae <_scanf_i+0x1c2>
 800bea4:	f10b 0b01 	add.w	fp, fp, #1
 800bea8:	f1bb 0f03 	cmp.w	fp, #3
 800beac:	d1cb      	bne.n	800be46 <_scanf_i+0x5a>
 800beae:	6863      	ldr	r3, [r4, #4]
 800beb0:	b90b      	cbnz	r3, 800beb6 <_scanf_i+0xca>
 800beb2:	230a      	movs	r3, #10
 800beb4:	6063      	str	r3, [r4, #4]
 800beb6:	6863      	ldr	r3, [r4, #4]
 800beb8:	4945      	ldr	r1, [pc, #276]	@ (800bfd0 <_scanf_i+0x1e4>)
 800beba:	6960      	ldr	r0, [r4, #20]
 800bebc:	1ac9      	subs	r1, r1, r3
 800bebe:	f000 f8eb 	bl	800c098 <__sccl>
 800bec2:	f04f 0b00 	mov.w	fp, #0
 800bec6:	68a3      	ldr	r3, [r4, #8]
 800bec8:	6822      	ldr	r2, [r4, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d03d      	beq.n	800bf4a <_scanf_i+0x15e>
 800bece:	6831      	ldr	r1, [r6, #0]
 800bed0:	6960      	ldr	r0, [r4, #20]
 800bed2:	f891 c000 	ldrb.w	ip, [r1]
 800bed6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800beda:	2800      	cmp	r0, #0
 800bedc:	d035      	beq.n	800bf4a <_scanf_i+0x15e>
 800bede:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800bee2:	d124      	bne.n	800bf2e <_scanf_i+0x142>
 800bee4:	0510      	lsls	r0, r2, #20
 800bee6:	d522      	bpl.n	800bf2e <_scanf_i+0x142>
 800bee8:	f10b 0b01 	add.w	fp, fp, #1
 800beec:	f1b9 0f00 	cmp.w	r9, #0
 800bef0:	d003      	beq.n	800befa <_scanf_i+0x10e>
 800bef2:	3301      	adds	r3, #1
 800bef4:	f109 39ff 	add.w	r9, r9, #4294967295
 800bef8:	60a3      	str	r3, [r4, #8]
 800befa:	6873      	ldr	r3, [r6, #4]
 800befc:	3b01      	subs	r3, #1
 800befe:	2b00      	cmp	r3, #0
 800bf00:	6073      	str	r3, [r6, #4]
 800bf02:	dd1b      	ble.n	800bf3c <_scanf_i+0x150>
 800bf04:	6833      	ldr	r3, [r6, #0]
 800bf06:	3301      	adds	r3, #1
 800bf08:	6033      	str	r3, [r6, #0]
 800bf0a:	68a3      	ldr	r3, [r4, #8]
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	60a3      	str	r3, [r4, #8]
 800bf10:	e7d9      	b.n	800bec6 <_scanf_i+0xda>
 800bf12:	f1bb 0f02 	cmp.w	fp, #2
 800bf16:	d1ae      	bne.n	800be76 <_scanf_i+0x8a>
 800bf18:	6822      	ldr	r2, [r4, #0]
 800bf1a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800bf1e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800bf22:	d1bf      	bne.n	800bea4 <_scanf_i+0xb8>
 800bf24:	2110      	movs	r1, #16
 800bf26:	6061      	str	r1, [r4, #4]
 800bf28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bf2c:	e7a2      	b.n	800be74 <_scanf_i+0x88>
 800bf2e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800bf32:	6022      	str	r2, [r4, #0]
 800bf34:	780b      	ldrb	r3, [r1, #0]
 800bf36:	f805 3b01 	strb.w	r3, [r5], #1
 800bf3a:	e7de      	b.n	800befa <_scanf_i+0x10e>
 800bf3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bf40:	4631      	mov	r1, r6
 800bf42:	4650      	mov	r0, sl
 800bf44:	4798      	blx	r3
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d0df      	beq.n	800bf0a <_scanf_i+0x11e>
 800bf4a:	6823      	ldr	r3, [r4, #0]
 800bf4c:	05d9      	lsls	r1, r3, #23
 800bf4e:	d50d      	bpl.n	800bf6c <_scanf_i+0x180>
 800bf50:	42bd      	cmp	r5, r7
 800bf52:	d909      	bls.n	800bf68 <_scanf_i+0x17c>
 800bf54:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bf58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bf5c:	4632      	mov	r2, r6
 800bf5e:	4650      	mov	r0, sl
 800bf60:	4798      	blx	r3
 800bf62:	f105 39ff 	add.w	r9, r5, #4294967295
 800bf66:	464d      	mov	r5, r9
 800bf68:	42bd      	cmp	r5, r7
 800bf6a:	d028      	beq.n	800bfbe <_scanf_i+0x1d2>
 800bf6c:	6822      	ldr	r2, [r4, #0]
 800bf6e:	f012 0210 	ands.w	r2, r2, #16
 800bf72:	d113      	bne.n	800bf9c <_scanf_i+0x1b0>
 800bf74:	702a      	strb	r2, [r5, #0]
 800bf76:	6863      	ldr	r3, [r4, #4]
 800bf78:	9e01      	ldr	r6, [sp, #4]
 800bf7a:	4639      	mov	r1, r7
 800bf7c:	4650      	mov	r0, sl
 800bf7e:	47b0      	blx	r6
 800bf80:	f8d8 3000 	ldr.w	r3, [r8]
 800bf84:	6821      	ldr	r1, [r4, #0]
 800bf86:	1d1a      	adds	r2, r3, #4
 800bf88:	f8c8 2000 	str.w	r2, [r8]
 800bf8c:	f011 0f20 	tst.w	r1, #32
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	d00f      	beq.n	800bfb4 <_scanf_i+0x1c8>
 800bf94:	6018      	str	r0, [r3, #0]
 800bf96:	68e3      	ldr	r3, [r4, #12]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	60e3      	str	r3, [r4, #12]
 800bf9c:	6923      	ldr	r3, [r4, #16]
 800bf9e:	1bed      	subs	r5, r5, r7
 800bfa0:	445d      	add	r5, fp
 800bfa2:	442b      	add	r3, r5
 800bfa4:	6123      	str	r3, [r4, #16]
 800bfa6:	2000      	movs	r0, #0
 800bfa8:	b007      	add	sp, #28
 800bfaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfae:	f04f 0b00 	mov.w	fp, #0
 800bfb2:	e7ca      	b.n	800bf4a <_scanf_i+0x15e>
 800bfb4:	07ca      	lsls	r2, r1, #31
 800bfb6:	bf4c      	ite	mi
 800bfb8:	8018      	strhmi	r0, [r3, #0]
 800bfba:	6018      	strpl	r0, [r3, #0]
 800bfbc:	e7eb      	b.n	800bf96 <_scanf_i+0x1aa>
 800bfbe:	2001      	movs	r0, #1
 800bfc0:	e7f2      	b.n	800bfa8 <_scanf_i+0x1bc>
 800bfc2:	bf00      	nop
 800bfc4:	0800cf34 	.word	0x0800cf34
 800bfc8:	08007bf9 	.word	0x08007bf9
 800bfcc:	0800ca5d 	.word	0x0800ca5d
 800bfd0:	0800d311 	.word	0x0800d311

0800bfd4 <__swhatbuf_r>:
 800bfd4:	b570      	push	{r4, r5, r6, lr}
 800bfd6:	460c      	mov	r4, r1
 800bfd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfdc:	2900      	cmp	r1, #0
 800bfde:	b096      	sub	sp, #88	@ 0x58
 800bfe0:	4615      	mov	r5, r2
 800bfe2:	461e      	mov	r6, r3
 800bfe4:	da0d      	bge.n	800c002 <__swhatbuf_r+0x2e>
 800bfe6:	89a3      	ldrh	r3, [r4, #12]
 800bfe8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bfec:	f04f 0100 	mov.w	r1, #0
 800bff0:	bf14      	ite	ne
 800bff2:	2340      	movne	r3, #64	@ 0x40
 800bff4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bff8:	2000      	movs	r0, #0
 800bffa:	6031      	str	r1, [r6, #0]
 800bffc:	602b      	str	r3, [r5, #0]
 800bffe:	b016      	add	sp, #88	@ 0x58
 800c000:	bd70      	pop	{r4, r5, r6, pc}
 800c002:	466a      	mov	r2, sp
 800c004:	f000 f8d6 	bl	800c1b4 <_fstat_r>
 800c008:	2800      	cmp	r0, #0
 800c00a:	dbec      	blt.n	800bfe6 <__swhatbuf_r+0x12>
 800c00c:	9901      	ldr	r1, [sp, #4]
 800c00e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c012:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c016:	4259      	negs	r1, r3
 800c018:	4159      	adcs	r1, r3
 800c01a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c01e:	e7eb      	b.n	800bff8 <__swhatbuf_r+0x24>

0800c020 <__smakebuf_r>:
 800c020:	898b      	ldrh	r3, [r1, #12]
 800c022:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c024:	079d      	lsls	r5, r3, #30
 800c026:	4606      	mov	r6, r0
 800c028:	460c      	mov	r4, r1
 800c02a:	d507      	bpl.n	800c03c <__smakebuf_r+0x1c>
 800c02c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c030:	6023      	str	r3, [r4, #0]
 800c032:	6123      	str	r3, [r4, #16]
 800c034:	2301      	movs	r3, #1
 800c036:	6163      	str	r3, [r4, #20]
 800c038:	b003      	add	sp, #12
 800c03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c03c:	ab01      	add	r3, sp, #4
 800c03e:	466a      	mov	r2, sp
 800c040:	f7ff ffc8 	bl	800bfd4 <__swhatbuf_r>
 800c044:	9f00      	ldr	r7, [sp, #0]
 800c046:	4605      	mov	r5, r0
 800c048:	4639      	mov	r1, r7
 800c04a:	4630      	mov	r0, r6
 800c04c:	f7fd fec8 	bl	8009de0 <_malloc_r>
 800c050:	b948      	cbnz	r0, 800c066 <__smakebuf_r+0x46>
 800c052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c056:	059a      	lsls	r2, r3, #22
 800c058:	d4ee      	bmi.n	800c038 <__smakebuf_r+0x18>
 800c05a:	f023 0303 	bic.w	r3, r3, #3
 800c05e:	f043 0302 	orr.w	r3, r3, #2
 800c062:	81a3      	strh	r3, [r4, #12]
 800c064:	e7e2      	b.n	800c02c <__smakebuf_r+0xc>
 800c066:	89a3      	ldrh	r3, [r4, #12]
 800c068:	6020      	str	r0, [r4, #0]
 800c06a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c06e:	81a3      	strh	r3, [r4, #12]
 800c070:	9b01      	ldr	r3, [sp, #4]
 800c072:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c076:	b15b      	cbz	r3, 800c090 <__smakebuf_r+0x70>
 800c078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c07c:	4630      	mov	r0, r6
 800c07e:	f000 f8ab 	bl	800c1d8 <_isatty_r>
 800c082:	b128      	cbz	r0, 800c090 <__smakebuf_r+0x70>
 800c084:	89a3      	ldrh	r3, [r4, #12]
 800c086:	f023 0303 	bic.w	r3, r3, #3
 800c08a:	f043 0301 	orr.w	r3, r3, #1
 800c08e:	81a3      	strh	r3, [r4, #12]
 800c090:	89a3      	ldrh	r3, [r4, #12]
 800c092:	431d      	orrs	r5, r3
 800c094:	81a5      	strh	r5, [r4, #12]
 800c096:	e7cf      	b.n	800c038 <__smakebuf_r+0x18>

0800c098 <__sccl>:
 800c098:	b570      	push	{r4, r5, r6, lr}
 800c09a:	780b      	ldrb	r3, [r1, #0]
 800c09c:	4604      	mov	r4, r0
 800c09e:	2b5e      	cmp	r3, #94	@ 0x5e
 800c0a0:	bf0b      	itete	eq
 800c0a2:	784b      	ldrbeq	r3, [r1, #1]
 800c0a4:	1c4a      	addne	r2, r1, #1
 800c0a6:	1c8a      	addeq	r2, r1, #2
 800c0a8:	2100      	movne	r1, #0
 800c0aa:	bf08      	it	eq
 800c0ac:	2101      	moveq	r1, #1
 800c0ae:	3801      	subs	r0, #1
 800c0b0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c0b4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c0b8:	42a8      	cmp	r0, r5
 800c0ba:	d1fb      	bne.n	800c0b4 <__sccl+0x1c>
 800c0bc:	b90b      	cbnz	r3, 800c0c2 <__sccl+0x2a>
 800c0be:	1e50      	subs	r0, r2, #1
 800c0c0:	bd70      	pop	{r4, r5, r6, pc}
 800c0c2:	f081 0101 	eor.w	r1, r1, #1
 800c0c6:	54e1      	strb	r1, [r4, r3]
 800c0c8:	4610      	mov	r0, r2
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c0d0:	2d2d      	cmp	r5, #45	@ 0x2d
 800c0d2:	d005      	beq.n	800c0e0 <__sccl+0x48>
 800c0d4:	2d5d      	cmp	r5, #93	@ 0x5d
 800c0d6:	d016      	beq.n	800c106 <__sccl+0x6e>
 800c0d8:	2d00      	cmp	r5, #0
 800c0da:	d0f1      	beq.n	800c0c0 <__sccl+0x28>
 800c0dc:	462b      	mov	r3, r5
 800c0de:	e7f2      	b.n	800c0c6 <__sccl+0x2e>
 800c0e0:	7846      	ldrb	r6, [r0, #1]
 800c0e2:	2e5d      	cmp	r6, #93	@ 0x5d
 800c0e4:	d0fa      	beq.n	800c0dc <__sccl+0x44>
 800c0e6:	42b3      	cmp	r3, r6
 800c0e8:	dcf8      	bgt.n	800c0dc <__sccl+0x44>
 800c0ea:	3002      	adds	r0, #2
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	3201      	adds	r2, #1
 800c0f0:	4296      	cmp	r6, r2
 800c0f2:	54a1      	strb	r1, [r4, r2]
 800c0f4:	dcfb      	bgt.n	800c0ee <__sccl+0x56>
 800c0f6:	1af2      	subs	r2, r6, r3
 800c0f8:	3a01      	subs	r2, #1
 800c0fa:	1c5d      	adds	r5, r3, #1
 800c0fc:	42b3      	cmp	r3, r6
 800c0fe:	bfa8      	it	ge
 800c100:	2200      	movge	r2, #0
 800c102:	18ab      	adds	r3, r5, r2
 800c104:	e7e1      	b.n	800c0ca <__sccl+0x32>
 800c106:	4610      	mov	r0, r2
 800c108:	e7da      	b.n	800c0c0 <__sccl+0x28>

0800c10a <__submore>:
 800c10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c10e:	460c      	mov	r4, r1
 800c110:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c112:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c116:	4299      	cmp	r1, r3
 800c118:	d11d      	bne.n	800c156 <__submore+0x4c>
 800c11a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c11e:	f7fd fe5f 	bl	8009de0 <_malloc_r>
 800c122:	b918      	cbnz	r0, 800c12c <__submore+0x22>
 800c124:	f04f 30ff 	mov.w	r0, #4294967295
 800c128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c12c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c130:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c132:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c136:	6360      	str	r0, [r4, #52]	@ 0x34
 800c138:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c13c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c140:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800c144:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c148:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800c14c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c150:	6020      	str	r0, [r4, #0]
 800c152:	2000      	movs	r0, #0
 800c154:	e7e8      	b.n	800c128 <__submore+0x1e>
 800c156:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c158:	0077      	lsls	r7, r6, #1
 800c15a:	463a      	mov	r2, r7
 800c15c:	f000 fbe1 	bl	800c922 <_realloc_r>
 800c160:	4605      	mov	r5, r0
 800c162:	2800      	cmp	r0, #0
 800c164:	d0de      	beq.n	800c124 <__submore+0x1a>
 800c166:	eb00 0806 	add.w	r8, r0, r6
 800c16a:	4601      	mov	r1, r0
 800c16c:	4632      	mov	r2, r6
 800c16e:	4640      	mov	r0, r8
 800c170:	f7fc ff61 	bl	8009036 <memcpy>
 800c174:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c178:	f8c4 8000 	str.w	r8, [r4]
 800c17c:	e7e9      	b.n	800c152 <__submore+0x48>

0800c17e <memmove>:
 800c17e:	4288      	cmp	r0, r1
 800c180:	b510      	push	{r4, lr}
 800c182:	eb01 0402 	add.w	r4, r1, r2
 800c186:	d902      	bls.n	800c18e <memmove+0x10>
 800c188:	4284      	cmp	r4, r0
 800c18a:	4623      	mov	r3, r4
 800c18c:	d807      	bhi.n	800c19e <memmove+0x20>
 800c18e:	1e43      	subs	r3, r0, #1
 800c190:	42a1      	cmp	r1, r4
 800c192:	d008      	beq.n	800c1a6 <memmove+0x28>
 800c194:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c198:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c19c:	e7f8      	b.n	800c190 <memmove+0x12>
 800c19e:	4402      	add	r2, r0
 800c1a0:	4601      	mov	r1, r0
 800c1a2:	428a      	cmp	r2, r1
 800c1a4:	d100      	bne.n	800c1a8 <memmove+0x2a>
 800c1a6:	bd10      	pop	{r4, pc}
 800c1a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1b0:	e7f7      	b.n	800c1a2 <memmove+0x24>
	...

0800c1b4 <_fstat_r>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	4d07      	ldr	r5, [pc, #28]	@ (800c1d4 <_fstat_r+0x20>)
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	4608      	mov	r0, r1
 800c1be:	4611      	mov	r1, r2
 800c1c0:	602b      	str	r3, [r5, #0]
 800c1c2:	f7f6 fc80 	bl	8002ac6 <_fstat>
 800c1c6:	1c43      	adds	r3, r0, #1
 800c1c8:	d102      	bne.n	800c1d0 <_fstat_r+0x1c>
 800c1ca:	682b      	ldr	r3, [r5, #0]
 800c1cc:	b103      	cbz	r3, 800c1d0 <_fstat_r+0x1c>
 800c1ce:	6023      	str	r3, [r4, #0]
 800c1d0:	bd38      	pop	{r3, r4, r5, pc}
 800c1d2:	bf00      	nop
 800c1d4:	200011d0 	.word	0x200011d0

0800c1d8 <_isatty_r>:
 800c1d8:	b538      	push	{r3, r4, r5, lr}
 800c1da:	4d06      	ldr	r5, [pc, #24]	@ (800c1f4 <_isatty_r+0x1c>)
 800c1dc:	2300      	movs	r3, #0
 800c1de:	4604      	mov	r4, r0
 800c1e0:	4608      	mov	r0, r1
 800c1e2:	602b      	str	r3, [r5, #0]
 800c1e4:	f7f6 fc7f 	bl	8002ae6 <_isatty>
 800c1e8:	1c43      	adds	r3, r0, #1
 800c1ea:	d102      	bne.n	800c1f2 <_isatty_r+0x1a>
 800c1ec:	682b      	ldr	r3, [r5, #0]
 800c1ee:	b103      	cbz	r3, 800c1f2 <_isatty_r+0x1a>
 800c1f0:	6023      	str	r3, [r4, #0]
 800c1f2:	bd38      	pop	{r3, r4, r5, pc}
 800c1f4:	200011d0 	.word	0x200011d0

0800c1f8 <_sbrk_r>:
 800c1f8:	b538      	push	{r3, r4, r5, lr}
 800c1fa:	4d06      	ldr	r5, [pc, #24]	@ (800c214 <_sbrk_r+0x1c>)
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	4604      	mov	r4, r0
 800c200:	4608      	mov	r0, r1
 800c202:	602b      	str	r3, [r5, #0]
 800c204:	f7f6 fc88 	bl	8002b18 <_sbrk>
 800c208:	1c43      	adds	r3, r0, #1
 800c20a:	d102      	bne.n	800c212 <_sbrk_r+0x1a>
 800c20c:	682b      	ldr	r3, [r5, #0]
 800c20e:	b103      	cbz	r3, 800c212 <_sbrk_r+0x1a>
 800c210:	6023      	str	r3, [r4, #0]
 800c212:	bd38      	pop	{r3, r4, r5, pc}
 800c214:	200011d0 	.word	0x200011d0

0800c218 <nan>:
 800c218:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c220 <nan+0x8>
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	00000000 	.word	0x00000000
 800c224:	7ff80000 	.word	0x7ff80000

0800c228 <__assert_func>:
 800c228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c22a:	4614      	mov	r4, r2
 800c22c:	461a      	mov	r2, r3
 800c22e:	4b09      	ldr	r3, [pc, #36]	@ (800c254 <__assert_func+0x2c>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4605      	mov	r5, r0
 800c234:	68d8      	ldr	r0, [r3, #12]
 800c236:	b954      	cbnz	r4, 800c24e <__assert_func+0x26>
 800c238:	4b07      	ldr	r3, [pc, #28]	@ (800c258 <__assert_func+0x30>)
 800c23a:	461c      	mov	r4, r3
 800c23c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c240:	9100      	str	r1, [sp, #0]
 800c242:	462b      	mov	r3, r5
 800c244:	4905      	ldr	r1, [pc, #20]	@ (800c25c <__assert_func+0x34>)
 800c246:	f000 fc19 	bl	800ca7c <fiprintf>
 800c24a:	f000 fc29 	bl	800caa0 <abort>
 800c24e:	4b04      	ldr	r3, [pc, #16]	@ (800c260 <__assert_func+0x38>)
 800c250:	e7f4      	b.n	800c23c <__assert_func+0x14>
 800c252:	bf00      	nop
 800c254:	2000002c 	.word	0x2000002c
 800c258:	0800d35f 	.word	0x0800d35f
 800c25c:	0800d331 	.word	0x0800d331
 800c260:	0800d324 	.word	0x0800d324

0800c264 <_calloc_r>:
 800c264:	b570      	push	{r4, r5, r6, lr}
 800c266:	fba1 5402 	umull	r5, r4, r1, r2
 800c26a:	b93c      	cbnz	r4, 800c27c <_calloc_r+0x18>
 800c26c:	4629      	mov	r1, r5
 800c26e:	f7fd fdb7 	bl	8009de0 <_malloc_r>
 800c272:	4606      	mov	r6, r0
 800c274:	b928      	cbnz	r0, 800c282 <_calloc_r+0x1e>
 800c276:	2600      	movs	r6, #0
 800c278:	4630      	mov	r0, r6
 800c27a:	bd70      	pop	{r4, r5, r6, pc}
 800c27c:	220c      	movs	r2, #12
 800c27e:	6002      	str	r2, [r0, #0]
 800c280:	e7f9      	b.n	800c276 <_calloc_r+0x12>
 800c282:	462a      	mov	r2, r5
 800c284:	4621      	mov	r1, r4
 800c286:	f7fc fe45 	bl	8008f14 <memset>
 800c28a:	e7f5      	b.n	800c278 <_calloc_r+0x14>

0800c28c <rshift>:
 800c28c:	6903      	ldr	r3, [r0, #16]
 800c28e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c292:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c296:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c29a:	f100 0414 	add.w	r4, r0, #20
 800c29e:	dd45      	ble.n	800c32c <rshift+0xa0>
 800c2a0:	f011 011f 	ands.w	r1, r1, #31
 800c2a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c2a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c2ac:	d10c      	bne.n	800c2c8 <rshift+0x3c>
 800c2ae:	f100 0710 	add.w	r7, r0, #16
 800c2b2:	4629      	mov	r1, r5
 800c2b4:	42b1      	cmp	r1, r6
 800c2b6:	d334      	bcc.n	800c322 <rshift+0x96>
 800c2b8:	1a9b      	subs	r3, r3, r2
 800c2ba:	009b      	lsls	r3, r3, #2
 800c2bc:	1eea      	subs	r2, r5, #3
 800c2be:	4296      	cmp	r6, r2
 800c2c0:	bf38      	it	cc
 800c2c2:	2300      	movcc	r3, #0
 800c2c4:	4423      	add	r3, r4
 800c2c6:	e015      	b.n	800c2f4 <rshift+0x68>
 800c2c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c2cc:	f1c1 0820 	rsb	r8, r1, #32
 800c2d0:	40cf      	lsrs	r7, r1
 800c2d2:	f105 0e04 	add.w	lr, r5, #4
 800c2d6:	46a1      	mov	r9, r4
 800c2d8:	4576      	cmp	r6, lr
 800c2da:	46f4      	mov	ip, lr
 800c2dc:	d815      	bhi.n	800c30a <rshift+0x7e>
 800c2de:	1a9a      	subs	r2, r3, r2
 800c2e0:	0092      	lsls	r2, r2, #2
 800c2e2:	3a04      	subs	r2, #4
 800c2e4:	3501      	adds	r5, #1
 800c2e6:	42ae      	cmp	r6, r5
 800c2e8:	bf38      	it	cc
 800c2ea:	2200      	movcc	r2, #0
 800c2ec:	18a3      	adds	r3, r4, r2
 800c2ee:	50a7      	str	r7, [r4, r2]
 800c2f0:	b107      	cbz	r7, 800c2f4 <rshift+0x68>
 800c2f2:	3304      	adds	r3, #4
 800c2f4:	1b1a      	subs	r2, r3, r4
 800c2f6:	42a3      	cmp	r3, r4
 800c2f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c2fc:	bf08      	it	eq
 800c2fe:	2300      	moveq	r3, #0
 800c300:	6102      	str	r2, [r0, #16]
 800c302:	bf08      	it	eq
 800c304:	6143      	streq	r3, [r0, #20]
 800c306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c30a:	f8dc c000 	ldr.w	ip, [ip]
 800c30e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c312:	ea4c 0707 	orr.w	r7, ip, r7
 800c316:	f849 7b04 	str.w	r7, [r9], #4
 800c31a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c31e:	40cf      	lsrs	r7, r1
 800c320:	e7da      	b.n	800c2d8 <rshift+0x4c>
 800c322:	f851 cb04 	ldr.w	ip, [r1], #4
 800c326:	f847 cf04 	str.w	ip, [r7, #4]!
 800c32a:	e7c3      	b.n	800c2b4 <rshift+0x28>
 800c32c:	4623      	mov	r3, r4
 800c32e:	e7e1      	b.n	800c2f4 <rshift+0x68>

0800c330 <__hexdig_fun>:
 800c330:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c334:	2b09      	cmp	r3, #9
 800c336:	d802      	bhi.n	800c33e <__hexdig_fun+0xe>
 800c338:	3820      	subs	r0, #32
 800c33a:	b2c0      	uxtb	r0, r0
 800c33c:	4770      	bx	lr
 800c33e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c342:	2b05      	cmp	r3, #5
 800c344:	d801      	bhi.n	800c34a <__hexdig_fun+0x1a>
 800c346:	3847      	subs	r0, #71	@ 0x47
 800c348:	e7f7      	b.n	800c33a <__hexdig_fun+0xa>
 800c34a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c34e:	2b05      	cmp	r3, #5
 800c350:	d801      	bhi.n	800c356 <__hexdig_fun+0x26>
 800c352:	3827      	subs	r0, #39	@ 0x27
 800c354:	e7f1      	b.n	800c33a <__hexdig_fun+0xa>
 800c356:	2000      	movs	r0, #0
 800c358:	4770      	bx	lr
	...

0800c35c <__gethex>:
 800c35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c360:	b085      	sub	sp, #20
 800c362:	468a      	mov	sl, r1
 800c364:	9302      	str	r3, [sp, #8]
 800c366:	680b      	ldr	r3, [r1, #0]
 800c368:	9001      	str	r0, [sp, #4]
 800c36a:	4690      	mov	r8, r2
 800c36c:	1c9c      	adds	r4, r3, #2
 800c36e:	46a1      	mov	r9, r4
 800c370:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c374:	2830      	cmp	r0, #48	@ 0x30
 800c376:	d0fa      	beq.n	800c36e <__gethex+0x12>
 800c378:	eba9 0303 	sub.w	r3, r9, r3
 800c37c:	f1a3 0b02 	sub.w	fp, r3, #2
 800c380:	f7ff ffd6 	bl	800c330 <__hexdig_fun>
 800c384:	4605      	mov	r5, r0
 800c386:	2800      	cmp	r0, #0
 800c388:	d168      	bne.n	800c45c <__gethex+0x100>
 800c38a:	49a0      	ldr	r1, [pc, #640]	@ (800c60c <__gethex+0x2b0>)
 800c38c:	2201      	movs	r2, #1
 800c38e:	4648      	mov	r0, r9
 800c390:	f7fc fdc8 	bl	8008f24 <strncmp>
 800c394:	4607      	mov	r7, r0
 800c396:	2800      	cmp	r0, #0
 800c398:	d167      	bne.n	800c46a <__gethex+0x10e>
 800c39a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c39e:	4626      	mov	r6, r4
 800c3a0:	f7ff ffc6 	bl	800c330 <__hexdig_fun>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	d062      	beq.n	800c46e <__gethex+0x112>
 800c3a8:	4623      	mov	r3, r4
 800c3aa:	7818      	ldrb	r0, [r3, #0]
 800c3ac:	2830      	cmp	r0, #48	@ 0x30
 800c3ae:	4699      	mov	r9, r3
 800c3b0:	f103 0301 	add.w	r3, r3, #1
 800c3b4:	d0f9      	beq.n	800c3aa <__gethex+0x4e>
 800c3b6:	f7ff ffbb 	bl	800c330 <__hexdig_fun>
 800c3ba:	fab0 f580 	clz	r5, r0
 800c3be:	096d      	lsrs	r5, r5, #5
 800c3c0:	f04f 0b01 	mov.w	fp, #1
 800c3c4:	464a      	mov	r2, r9
 800c3c6:	4616      	mov	r6, r2
 800c3c8:	3201      	adds	r2, #1
 800c3ca:	7830      	ldrb	r0, [r6, #0]
 800c3cc:	f7ff ffb0 	bl	800c330 <__hexdig_fun>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d1f8      	bne.n	800c3c6 <__gethex+0x6a>
 800c3d4:	498d      	ldr	r1, [pc, #564]	@ (800c60c <__gethex+0x2b0>)
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	4630      	mov	r0, r6
 800c3da:	f7fc fda3 	bl	8008f24 <strncmp>
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	d13f      	bne.n	800c462 <__gethex+0x106>
 800c3e2:	b944      	cbnz	r4, 800c3f6 <__gethex+0x9a>
 800c3e4:	1c74      	adds	r4, r6, #1
 800c3e6:	4622      	mov	r2, r4
 800c3e8:	4616      	mov	r6, r2
 800c3ea:	3201      	adds	r2, #1
 800c3ec:	7830      	ldrb	r0, [r6, #0]
 800c3ee:	f7ff ff9f 	bl	800c330 <__hexdig_fun>
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d1f8      	bne.n	800c3e8 <__gethex+0x8c>
 800c3f6:	1ba4      	subs	r4, r4, r6
 800c3f8:	00a7      	lsls	r7, r4, #2
 800c3fa:	7833      	ldrb	r3, [r6, #0]
 800c3fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c400:	2b50      	cmp	r3, #80	@ 0x50
 800c402:	d13e      	bne.n	800c482 <__gethex+0x126>
 800c404:	7873      	ldrb	r3, [r6, #1]
 800c406:	2b2b      	cmp	r3, #43	@ 0x2b
 800c408:	d033      	beq.n	800c472 <__gethex+0x116>
 800c40a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c40c:	d034      	beq.n	800c478 <__gethex+0x11c>
 800c40e:	1c71      	adds	r1, r6, #1
 800c410:	2400      	movs	r4, #0
 800c412:	7808      	ldrb	r0, [r1, #0]
 800c414:	f7ff ff8c 	bl	800c330 <__hexdig_fun>
 800c418:	1e43      	subs	r3, r0, #1
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	2b18      	cmp	r3, #24
 800c41e:	d830      	bhi.n	800c482 <__gethex+0x126>
 800c420:	f1a0 0210 	sub.w	r2, r0, #16
 800c424:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c428:	f7ff ff82 	bl	800c330 <__hexdig_fun>
 800c42c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c430:	fa5f fc8c 	uxtb.w	ip, ip
 800c434:	f1bc 0f18 	cmp.w	ip, #24
 800c438:	f04f 030a 	mov.w	r3, #10
 800c43c:	d91e      	bls.n	800c47c <__gethex+0x120>
 800c43e:	b104      	cbz	r4, 800c442 <__gethex+0xe6>
 800c440:	4252      	negs	r2, r2
 800c442:	4417      	add	r7, r2
 800c444:	f8ca 1000 	str.w	r1, [sl]
 800c448:	b1ed      	cbz	r5, 800c486 <__gethex+0x12a>
 800c44a:	f1bb 0f00 	cmp.w	fp, #0
 800c44e:	bf0c      	ite	eq
 800c450:	2506      	moveq	r5, #6
 800c452:	2500      	movne	r5, #0
 800c454:	4628      	mov	r0, r5
 800c456:	b005      	add	sp, #20
 800c458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c45c:	2500      	movs	r5, #0
 800c45e:	462c      	mov	r4, r5
 800c460:	e7b0      	b.n	800c3c4 <__gethex+0x68>
 800c462:	2c00      	cmp	r4, #0
 800c464:	d1c7      	bne.n	800c3f6 <__gethex+0x9a>
 800c466:	4627      	mov	r7, r4
 800c468:	e7c7      	b.n	800c3fa <__gethex+0x9e>
 800c46a:	464e      	mov	r6, r9
 800c46c:	462f      	mov	r7, r5
 800c46e:	2501      	movs	r5, #1
 800c470:	e7c3      	b.n	800c3fa <__gethex+0x9e>
 800c472:	2400      	movs	r4, #0
 800c474:	1cb1      	adds	r1, r6, #2
 800c476:	e7cc      	b.n	800c412 <__gethex+0xb6>
 800c478:	2401      	movs	r4, #1
 800c47a:	e7fb      	b.n	800c474 <__gethex+0x118>
 800c47c:	fb03 0002 	mla	r0, r3, r2, r0
 800c480:	e7ce      	b.n	800c420 <__gethex+0xc4>
 800c482:	4631      	mov	r1, r6
 800c484:	e7de      	b.n	800c444 <__gethex+0xe8>
 800c486:	eba6 0309 	sub.w	r3, r6, r9
 800c48a:	3b01      	subs	r3, #1
 800c48c:	4629      	mov	r1, r5
 800c48e:	2b07      	cmp	r3, #7
 800c490:	dc0a      	bgt.n	800c4a8 <__gethex+0x14c>
 800c492:	9801      	ldr	r0, [sp, #4]
 800c494:	f7fd fd30 	bl	8009ef8 <_Balloc>
 800c498:	4604      	mov	r4, r0
 800c49a:	b940      	cbnz	r0, 800c4ae <__gethex+0x152>
 800c49c:	4b5c      	ldr	r3, [pc, #368]	@ (800c610 <__gethex+0x2b4>)
 800c49e:	4602      	mov	r2, r0
 800c4a0:	21e4      	movs	r1, #228	@ 0xe4
 800c4a2:	485c      	ldr	r0, [pc, #368]	@ (800c614 <__gethex+0x2b8>)
 800c4a4:	f7ff fec0 	bl	800c228 <__assert_func>
 800c4a8:	3101      	adds	r1, #1
 800c4aa:	105b      	asrs	r3, r3, #1
 800c4ac:	e7ef      	b.n	800c48e <__gethex+0x132>
 800c4ae:	f100 0a14 	add.w	sl, r0, #20
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	4655      	mov	r5, sl
 800c4b6:	469b      	mov	fp, r3
 800c4b8:	45b1      	cmp	r9, r6
 800c4ba:	d337      	bcc.n	800c52c <__gethex+0x1d0>
 800c4bc:	f845 bb04 	str.w	fp, [r5], #4
 800c4c0:	eba5 050a 	sub.w	r5, r5, sl
 800c4c4:	10ad      	asrs	r5, r5, #2
 800c4c6:	6125      	str	r5, [r4, #16]
 800c4c8:	4658      	mov	r0, fp
 800c4ca:	f7fd fe07 	bl	800a0dc <__hi0bits>
 800c4ce:	016d      	lsls	r5, r5, #5
 800c4d0:	f8d8 6000 	ldr.w	r6, [r8]
 800c4d4:	1a2d      	subs	r5, r5, r0
 800c4d6:	42b5      	cmp	r5, r6
 800c4d8:	dd54      	ble.n	800c584 <__gethex+0x228>
 800c4da:	1bad      	subs	r5, r5, r6
 800c4dc:	4629      	mov	r1, r5
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f7fe f99b 	bl	800a81a <__any_on>
 800c4e4:	4681      	mov	r9, r0
 800c4e6:	b178      	cbz	r0, 800c508 <__gethex+0x1ac>
 800c4e8:	1e6b      	subs	r3, r5, #1
 800c4ea:	1159      	asrs	r1, r3, #5
 800c4ec:	f003 021f 	and.w	r2, r3, #31
 800c4f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c4f4:	f04f 0901 	mov.w	r9, #1
 800c4f8:	fa09 f202 	lsl.w	r2, r9, r2
 800c4fc:	420a      	tst	r2, r1
 800c4fe:	d003      	beq.n	800c508 <__gethex+0x1ac>
 800c500:	454b      	cmp	r3, r9
 800c502:	dc36      	bgt.n	800c572 <__gethex+0x216>
 800c504:	f04f 0902 	mov.w	r9, #2
 800c508:	4629      	mov	r1, r5
 800c50a:	4620      	mov	r0, r4
 800c50c:	f7ff febe 	bl	800c28c <rshift>
 800c510:	442f      	add	r7, r5
 800c512:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c516:	42bb      	cmp	r3, r7
 800c518:	da42      	bge.n	800c5a0 <__gethex+0x244>
 800c51a:	9801      	ldr	r0, [sp, #4]
 800c51c:	4621      	mov	r1, r4
 800c51e:	f7fd fd2b 	bl	8009f78 <_Bfree>
 800c522:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c524:	2300      	movs	r3, #0
 800c526:	6013      	str	r3, [r2, #0]
 800c528:	25a3      	movs	r5, #163	@ 0xa3
 800c52a:	e793      	b.n	800c454 <__gethex+0xf8>
 800c52c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c530:	2a2e      	cmp	r2, #46	@ 0x2e
 800c532:	d012      	beq.n	800c55a <__gethex+0x1fe>
 800c534:	2b20      	cmp	r3, #32
 800c536:	d104      	bne.n	800c542 <__gethex+0x1e6>
 800c538:	f845 bb04 	str.w	fp, [r5], #4
 800c53c:	f04f 0b00 	mov.w	fp, #0
 800c540:	465b      	mov	r3, fp
 800c542:	7830      	ldrb	r0, [r6, #0]
 800c544:	9303      	str	r3, [sp, #12]
 800c546:	f7ff fef3 	bl	800c330 <__hexdig_fun>
 800c54a:	9b03      	ldr	r3, [sp, #12]
 800c54c:	f000 000f 	and.w	r0, r0, #15
 800c550:	4098      	lsls	r0, r3
 800c552:	ea4b 0b00 	orr.w	fp, fp, r0
 800c556:	3304      	adds	r3, #4
 800c558:	e7ae      	b.n	800c4b8 <__gethex+0x15c>
 800c55a:	45b1      	cmp	r9, r6
 800c55c:	d8ea      	bhi.n	800c534 <__gethex+0x1d8>
 800c55e:	492b      	ldr	r1, [pc, #172]	@ (800c60c <__gethex+0x2b0>)
 800c560:	9303      	str	r3, [sp, #12]
 800c562:	2201      	movs	r2, #1
 800c564:	4630      	mov	r0, r6
 800c566:	f7fc fcdd 	bl	8008f24 <strncmp>
 800c56a:	9b03      	ldr	r3, [sp, #12]
 800c56c:	2800      	cmp	r0, #0
 800c56e:	d1e1      	bne.n	800c534 <__gethex+0x1d8>
 800c570:	e7a2      	b.n	800c4b8 <__gethex+0x15c>
 800c572:	1ea9      	subs	r1, r5, #2
 800c574:	4620      	mov	r0, r4
 800c576:	f7fe f950 	bl	800a81a <__any_on>
 800c57a:	2800      	cmp	r0, #0
 800c57c:	d0c2      	beq.n	800c504 <__gethex+0x1a8>
 800c57e:	f04f 0903 	mov.w	r9, #3
 800c582:	e7c1      	b.n	800c508 <__gethex+0x1ac>
 800c584:	da09      	bge.n	800c59a <__gethex+0x23e>
 800c586:	1b75      	subs	r5, r6, r5
 800c588:	4621      	mov	r1, r4
 800c58a:	9801      	ldr	r0, [sp, #4]
 800c58c:	462a      	mov	r2, r5
 800c58e:	f7fd ff0b 	bl	800a3a8 <__lshift>
 800c592:	1b7f      	subs	r7, r7, r5
 800c594:	4604      	mov	r4, r0
 800c596:	f100 0a14 	add.w	sl, r0, #20
 800c59a:	f04f 0900 	mov.w	r9, #0
 800c59e:	e7b8      	b.n	800c512 <__gethex+0x1b6>
 800c5a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c5a4:	42bd      	cmp	r5, r7
 800c5a6:	dd6f      	ble.n	800c688 <__gethex+0x32c>
 800c5a8:	1bed      	subs	r5, r5, r7
 800c5aa:	42ae      	cmp	r6, r5
 800c5ac:	dc34      	bgt.n	800c618 <__gethex+0x2bc>
 800c5ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c5b2:	2b02      	cmp	r3, #2
 800c5b4:	d022      	beq.n	800c5fc <__gethex+0x2a0>
 800c5b6:	2b03      	cmp	r3, #3
 800c5b8:	d024      	beq.n	800c604 <__gethex+0x2a8>
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d115      	bne.n	800c5ea <__gethex+0x28e>
 800c5be:	42ae      	cmp	r6, r5
 800c5c0:	d113      	bne.n	800c5ea <__gethex+0x28e>
 800c5c2:	2e01      	cmp	r6, #1
 800c5c4:	d10b      	bne.n	800c5de <__gethex+0x282>
 800c5c6:	9a02      	ldr	r2, [sp, #8]
 800c5c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c5cc:	6013      	str	r3, [r2, #0]
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	6123      	str	r3, [r4, #16]
 800c5d2:	f8ca 3000 	str.w	r3, [sl]
 800c5d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5d8:	2562      	movs	r5, #98	@ 0x62
 800c5da:	601c      	str	r4, [r3, #0]
 800c5dc:	e73a      	b.n	800c454 <__gethex+0xf8>
 800c5de:	1e71      	subs	r1, r6, #1
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f7fe f91a 	bl	800a81a <__any_on>
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d1ed      	bne.n	800c5c6 <__gethex+0x26a>
 800c5ea:	9801      	ldr	r0, [sp, #4]
 800c5ec:	4621      	mov	r1, r4
 800c5ee:	f7fd fcc3 	bl	8009f78 <_Bfree>
 800c5f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	6013      	str	r3, [r2, #0]
 800c5f8:	2550      	movs	r5, #80	@ 0x50
 800c5fa:	e72b      	b.n	800c454 <__gethex+0xf8>
 800c5fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d1f3      	bne.n	800c5ea <__gethex+0x28e>
 800c602:	e7e0      	b.n	800c5c6 <__gethex+0x26a>
 800c604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c606:	2b00      	cmp	r3, #0
 800c608:	d1dd      	bne.n	800c5c6 <__gethex+0x26a>
 800c60a:	e7ee      	b.n	800c5ea <__gethex+0x28e>
 800c60c:	0800d298 	.word	0x0800d298
 800c610:	0800d12c 	.word	0x0800d12c
 800c614:	0800d360 	.word	0x0800d360
 800c618:	1e6f      	subs	r7, r5, #1
 800c61a:	f1b9 0f00 	cmp.w	r9, #0
 800c61e:	d130      	bne.n	800c682 <__gethex+0x326>
 800c620:	b127      	cbz	r7, 800c62c <__gethex+0x2d0>
 800c622:	4639      	mov	r1, r7
 800c624:	4620      	mov	r0, r4
 800c626:	f7fe f8f8 	bl	800a81a <__any_on>
 800c62a:	4681      	mov	r9, r0
 800c62c:	117a      	asrs	r2, r7, #5
 800c62e:	2301      	movs	r3, #1
 800c630:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c634:	f007 071f 	and.w	r7, r7, #31
 800c638:	40bb      	lsls	r3, r7
 800c63a:	4213      	tst	r3, r2
 800c63c:	4629      	mov	r1, r5
 800c63e:	4620      	mov	r0, r4
 800c640:	bf18      	it	ne
 800c642:	f049 0902 	orrne.w	r9, r9, #2
 800c646:	f7ff fe21 	bl	800c28c <rshift>
 800c64a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c64e:	1b76      	subs	r6, r6, r5
 800c650:	2502      	movs	r5, #2
 800c652:	f1b9 0f00 	cmp.w	r9, #0
 800c656:	d047      	beq.n	800c6e8 <__gethex+0x38c>
 800c658:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c65c:	2b02      	cmp	r3, #2
 800c65e:	d015      	beq.n	800c68c <__gethex+0x330>
 800c660:	2b03      	cmp	r3, #3
 800c662:	d017      	beq.n	800c694 <__gethex+0x338>
 800c664:	2b01      	cmp	r3, #1
 800c666:	d109      	bne.n	800c67c <__gethex+0x320>
 800c668:	f019 0f02 	tst.w	r9, #2
 800c66c:	d006      	beq.n	800c67c <__gethex+0x320>
 800c66e:	f8da 3000 	ldr.w	r3, [sl]
 800c672:	ea49 0903 	orr.w	r9, r9, r3
 800c676:	f019 0f01 	tst.w	r9, #1
 800c67a:	d10e      	bne.n	800c69a <__gethex+0x33e>
 800c67c:	f045 0510 	orr.w	r5, r5, #16
 800c680:	e032      	b.n	800c6e8 <__gethex+0x38c>
 800c682:	f04f 0901 	mov.w	r9, #1
 800c686:	e7d1      	b.n	800c62c <__gethex+0x2d0>
 800c688:	2501      	movs	r5, #1
 800c68a:	e7e2      	b.n	800c652 <__gethex+0x2f6>
 800c68c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c68e:	f1c3 0301 	rsb	r3, r3, #1
 800c692:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c696:	2b00      	cmp	r3, #0
 800c698:	d0f0      	beq.n	800c67c <__gethex+0x320>
 800c69a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c69e:	f104 0314 	add.w	r3, r4, #20
 800c6a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c6a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c6aa:	f04f 0c00 	mov.w	ip, #0
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c6b8:	d01b      	beq.n	800c6f2 <__gethex+0x396>
 800c6ba:	3201      	adds	r2, #1
 800c6bc:	6002      	str	r2, [r0, #0]
 800c6be:	2d02      	cmp	r5, #2
 800c6c0:	f104 0314 	add.w	r3, r4, #20
 800c6c4:	d13c      	bne.n	800c740 <__gethex+0x3e4>
 800c6c6:	f8d8 2000 	ldr.w	r2, [r8]
 800c6ca:	3a01      	subs	r2, #1
 800c6cc:	42b2      	cmp	r2, r6
 800c6ce:	d109      	bne.n	800c6e4 <__gethex+0x388>
 800c6d0:	1171      	asrs	r1, r6, #5
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c6d8:	f006 061f 	and.w	r6, r6, #31
 800c6dc:	fa02 f606 	lsl.w	r6, r2, r6
 800c6e0:	421e      	tst	r6, r3
 800c6e2:	d13a      	bne.n	800c75a <__gethex+0x3fe>
 800c6e4:	f045 0520 	orr.w	r5, r5, #32
 800c6e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6ea:	601c      	str	r4, [r3, #0]
 800c6ec:	9b02      	ldr	r3, [sp, #8]
 800c6ee:	601f      	str	r7, [r3, #0]
 800c6f0:	e6b0      	b.n	800c454 <__gethex+0xf8>
 800c6f2:	4299      	cmp	r1, r3
 800c6f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c6f8:	d8d9      	bhi.n	800c6ae <__gethex+0x352>
 800c6fa:	68a3      	ldr	r3, [r4, #8]
 800c6fc:	459b      	cmp	fp, r3
 800c6fe:	db17      	blt.n	800c730 <__gethex+0x3d4>
 800c700:	6861      	ldr	r1, [r4, #4]
 800c702:	9801      	ldr	r0, [sp, #4]
 800c704:	3101      	adds	r1, #1
 800c706:	f7fd fbf7 	bl	8009ef8 <_Balloc>
 800c70a:	4681      	mov	r9, r0
 800c70c:	b918      	cbnz	r0, 800c716 <__gethex+0x3ba>
 800c70e:	4b1a      	ldr	r3, [pc, #104]	@ (800c778 <__gethex+0x41c>)
 800c710:	4602      	mov	r2, r0
 800c712:	2184      	movs	r1, #132	@ 0x84
 800c714:	e6c5      	b.n	800c4a2 <__gethex+0x146>
 800c716:	6922      	ldr	r2, [r4, #16]
 800c718:	3202      	adds	r2, #2
 800c71a:	f104 010c 	add.w	r1, r4, #12
 800c71e:	0092      	lsls	r2, r2, #2
 800c720:	300c      	adds	r0, #12
 800c722:	f7fc fc88 	bl	8009036 <memcpy>
 800c726:	4621      	mov	r1, r4
 800c728:	9801      	ldr	r0, [sp, #4]
 800c72a:	f7fd fc25 	bl	8009f78 <_Bfree>
 800c72e:	464c      	mov	r4, r9
 800c730:	6923      	ldr	r3, [r4, #16]
 800c732:	1c5a      	adds	r2, r3, #1
 800c734:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c738:	6122      	str	r2, [r4, #16]
 800c73a:	2201      	movs	r2, #1
 800c73c:	615a      	str	r2, [r3, #20]
 800c73e:	e7be      	b.n	800c6be <__gethex+0x362>
 800c740:	6922      	ldr	r2, [r4, #16]
 800c742:	455a      	cmp	r2, fp
 800c744:	dd0b      	ble.n	800c75e <__gethex+0x402>
 800c746:	2101      	movs	r1, #1
 800c748:	4620      	mov	r0, r4
 800c74a:	f7ff fd9f 	bl	800c28c <rshift>
 800c74e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c752:	3701      	adds	r7, #1
 800c754:	42bb      	cmp	r3, r7
 800c756:	f6ff aee0 	blt.w	800c51a <__gethex+0x1be>
 800c75a:	2501      	movs	r5, #1
 800c75c:	e7c2      	b.n	800c6e4 <__gethex+0x388>
 800c75e:	f016 061f 	ands.w	r6, r6, #31
 800c762:	d0fa      	beq.n	800c75a <__gethex+0x3fe>
 800c764:	4453      	add	r3, sl
 800c766:	f1c6 0620 	rsb	r6, r6, #32
 800c76a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c76e:	f7fd fcb5 	bl	800a0dc <__hi0bits>
 800c772:	42b0      	cmp	r0, r6
 800c774:	dbe7      	blt.n	800c746 <__gethex+0x3ea>
 800c776:	e7f0      	b.n	800c75a <__gethex+0x3fe>
 800c778:	0800d12c 	.word	0x0800d12c

0800c77c <L_shift>:
 800c77c:	f1c2 0208 	rsb	r2, r2, #8
 800c780:	0092      	lsls	r2, r2, #2
 800c782:	b570      	push	{r4, r5, r6, lr}
 800c784:	f1c2 0620 	rsb	r6, r2, #32
 800c788:	6843      	ldr	r3, [r0, #4]
 800c78a:	6804      	ldr	r4, [r0, #0]
 800c78c:	fa03 f506 	lsl.w	r5, r3, r6
 800c790:	432c      	orrs	r4, r5
 800c792:	40d3      	lsrs	r3, r2
 800c794:	6004      	str	r4, [r0, #0]
 800c796:	f840 3f04 	str.w	r3, [r0, #4]!
 800c79a:	4288      	cmp	r0, r1
 800c79c:	d3f4      	bcc.n	800c788 <L_shift+0xc>
 800c79e:	bd70      	pop	{r4, r5, r6, pc}

0800c7a0 <__match>:
 800c7a0:	b530      	push	{r4, r5, lr}
 800c7a2:	6803      	ldr	r3, [r0, #0]
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7aa:	b914      	cbnz	r4, 800c7b2 <__match+0x12>
 800c7ac:	6003      	str	r3, [r0, #0]
 800c7ae:	2001      	movs	r0, #1
 800c7b0:	bd30      	pop	{r4, r5, pc}
 800c7b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c7ba:	2d19      	cmp	r5, #25
 800c7bc:	bf98      	it	ls
 800c7be:	3220      	addls	r2, #32
 800c7c0:	42a2      	cmp	r2, r4
 800c7c2:	d0f0      	beq.n	800c7a6 <__match+0x6>
 800c7c4:	2000      	movs	r0, #0
 800c7c6:	e7f3      	b.n	800c7b0 <__match+0x10>

0800c7c8 <__hexnan>:
 800c7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7cc:	680b      	ldr	r3, [r1, #0]
 800c7ce:	6801      	ldr	r1, [r0, #0]
 800c7d0:	115e      	asrs	r6, r3, #5
 800c7d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c7d6:	f013 031f 	ands.w	r3, r3, #31
 800c7da:	b087      	sub	sp, #28
 800c7dc:	bf18      	it	ne
 800c7de:	3604      	addne	r6, #4
 800c7e0:	2500      	movs	r5, #0
 800c7e2:	1f37      	subs	r7, r6, #4
 800c7e4:	4682      	mov	sl, r0
 800c7e6:	4690      	mov	r8, r2
 800c7e8:	9301      	str	r3, [sp, #4]
 800c7ea:	f846 5c04 	str.w	r5, [r6, #-4]
 800c7ee:	46b9      	mov	r9, r7
 800c7f0:	463c      	mov	r4, r7
 800c7f2:	9502      	str	r5, [sp, #8]
 800c7f4:	46ab      	mov	fp, r5
 800c7f6:	784a      	ldrb	r2, [r1, #1]
 800c7f8:	1c4b      	adds	r3, r1, #1
 800c7fa:	9303      	str	r3, [sp, #12]
 800c7fc:	b342      	cbz	r2, 800c850 <__hexnan+0x88>
 800c7fe:	4610      	mov	r0, r2
 800c800:	9105      	str	r1, [sp, #20]
 800c802:	9204      	str	r2, [sp, #16]
 800c804:	f7ff fd94 	bl	800c330 <__hexdig_fun>
 800c808:	2800      	cmp	r0, #0
 800c80a:	d151      	bne.n	800c8b0 <__hexnan+0xe8>
 800c80c:	9a04      	ldr	r2, [sp, #16]
 800c80e:	9905      	ldr	r1, [sp, #20]
 800c810:	2a20      	cmp	r2, #32
 800c812:	d818      	bhi.n	800c846 <__hexnan+0x7e>
 800c814:	9b02      	ldr	r3, [sp, #8]
 800c816:	459b      	cmp	fp, r3
 800c818:	dd13      	ble.n	800c842 <__hexnan+0x7a>
 800c81a:	454c      	cmp	r4, r9
 800c81c:	d206      	bcs.n	800c82c <__hexnan+0x64>
 800c81e:	2d07      	cmp	r5, #7
 800c820:	dc04      	bgt.n	800c82c <__hexnan+0x64>
 800c822:	462a      	mov	r2, r5
 800c824:	4649      	mov	r1, r9
 800c826:	4620      	mov	r0, r4
 800c828:	f7ff ffa8 	bl	800c77c <L_shift>
 800c82c:	4544      	cmp	r4, r8
 800c82e:	d952      	bls.n	800c8d6 <__hexnan+0x10e>
 800c830:	2300      	movs	r3, #0
 800c832:	f1a4 0904 	sub.w	r9, r4, #4
 800c836:	f844 3c04 	str.w	r3, [r4, #-4]
 800c83a:	f8cd b008 	str.w	fp, [sp, #8]
 800c83e:	464c      	mov	r4, r9
 800c840:	461d      	mov	r5, r3
 800c842:	9903      	ldr	r1, [sp, #12]
 800c844:	e7d7      	b.n	800c7f6 <__hexnan+0x2e>
 800c846:	2a29      	cmp	r2, #41	@ 0x29
 800c848:	d157      	bne.n	800c8fa <__hexnan+0x132>
 800c84a:	3102      	adds	r1, #2
 800c84c:	f8ca 1000 	str.w	r1, [sl]
 800c850:	f1bb 0f00 	cmp.w	fp, #0
 800c854:	d051      	beq.n	800c8fa <__hexnan+0x132>
 800c856:	454c      	cmp	r4, r9
 800c858:	d206      	bcs.n	800c868 <__hexnan+0xa0>
 800c85a:	2d07      	cmp	r5, #7
 800c85c:	dc04      	bgt.n	800c868 <__hexnan+0xa0>
 800c85e:	462a      	mov	r2, r5
 800c860:	4649      	mov	r1, r9
 800c862:	4620      	mov	r0, r4
 800c864:	f7ff ff8a 	bl	800c77c <L_shift>
 800c868:	4544      	cmp	r4, r8
 800c86a:	d936      	bls.n	800c8da <__hexnan+0x112>
 800c86c:	f1a8 0204 	sub.w	r2, r8, #4
 800c870:	4623      	mov	r3, r4
 800c872:	f853 1b04 	ldr.w	r1, [r3], #4
 800c876:	f842 1f04 	str.w	r1, [r2, #4]!
 800c87a:	429f      	cmp	r7, r3
 800c87c:	d2f9      	bcs.n	800c872 <__hexnan+0xaa>
 800c87e:	1b3b      	subs	r3, r7, r4
 800c880:	f023 0303 	bic.w	r3, r3, #3
 800c884:	3304      	adds	r3, #4
 800c886:	3401      	adds	r4, #1
 800c888:	3e03      	subs	r6, #3
 800c88a:	42b4      	cmp	r4, r6
 800c88c:	bf88      	it	hi
 800c88e:	2304      	movhi	r3, #4
 800c890:	4443      	add	r3, r8
 800c892:	2200      	movs	r2, #0
 800c894:	f843 2b04 	str.w	r2, [r3], #4
 800c898:	429f      	cmp	r7, r3
 800c89a:	d2fb      	bcs.n	800c894 <__hexnan+0xcc>
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	b91b      	cbnz	r3, 800c8a8 <__hexnan+0xe0>
 800c8a0:	4547      	cmp	r7, r8
 800c8a2:	d128      	bne.n	800c8f6 <__hexnan+0x12e>
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	603b      	str	r3, [r7, #0]
 800c8a8:	2005      	movs	r0, #5
 800c8aa:	b007      	add	sp, #28
 800c8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b0:	3501      	adds	r5, #1
 800c8b2:	2d08      	cmp	r5, #8
 800c8b4:	f10b 0b01 	add.w	fp, fp, #1
 800c8b8:	dd06      	ble.n	800c8c8 <__hexnan+0x100>
 800c8ba:	4544      	cmp	r4, r8
 800c8bc:	d9c1      	bls.n	800c842 <__hexnan+0x7a>
 800c8be:	2300      	movs	r3, #0
 800c8c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8c4:	2501      	movs	r5, #1
 800c8c6:	3c04      	subs	r4, #4
 800c8c8:	6822      	ldr	r2, [r4, #0]
 800c8ca:	f000 000f 	and.w	r0, r0, #15
 800c8ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c8d2:	6020      	str	r0, [r4, #0]
 800c8d4:	e7b5      	b.n	800c842 <__hexnan+0x7a>
 800c8d6:	2508      	movs	r5, #8
 800c8d8:	e7b3      	b.n	800c842 <__hexnan+0x7a>
 800c8da:	9b01      	ldr	r3, [sp, #4]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d0dd      	beq.n	800c89c <__hexnan+0xd4>
 800c8e0:	f1c3 0320 	rsb	r3, r3, #32
 800c8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e8:	40da      	lsrs	r2, r3
 800c8ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c8ee:	4013      	ands	r3, r2
 800c8f0:	f846 3c04 	str.w	r3, [r6, #-4]
 800c8f4:	e7d2      	b.n	800c89c <__hexnan+0xd4>
 800c8f6:	3f04      	subs	r7, #4
 800c8f8:	e7d0      	b.n	800c89c <__hexnan+0xd4>
 800c8fa:	2004      	movs	r0, #4
 800c8fc:	e7d5      	b.n	800c8aa <__hexnan+0xe2>

0800c8fe <__ascii_mbtowc>:
 800c8fe:	b082      	sub	sp, #8
 800c900:	b901      	cbnz	r1, 800c904 <__ascii_mbtowc+0x6>
 800c902:	a901      	add	r1, sp, #4
 800c904:	b142      	cbz	r2, 800c918 <__ascii_mbtowc+0x1a>
 800c906:	b14b      	cbz	r3, 800c91c <__ascii_mbtowc+0x1e>
 800c908:	7813      	ldrb	r3, [r2, #0]
 800c90a:	600b      	str	r3, [r1, #0]
 800c90c:	7812      	ldrb	r2, [r2, #0]
 800c90e:	1e10      	subs	r0, r2, #0
 800c910:	bf18      	it	ne
 800c912:	2001      	movne	r0, #1
 800c914:	b002      	add	sp, #8
 800c916:	4770      	bx	lr
 800c918:	4610      	mov	r0, r2
 800c91a:	e7fb      	b.n	800c914 <__ascii_mbtowc+0x16>
 800c91c:	f06f 0001 	mvn.w	r0, #1
 800c920:	e7f8      	b.n	800c914 <__ascii_mbtowc+0x16>

0800c922 <_realloc_r>:
 800c922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c926:	4680      	mov	r8, r0
 800c928:	4615      	mov	r5, r2
 800c92a:	460c      	mov	r4, r1
 800c92c:	b921      	cbnz	r1, 800c938 <_realloc_r+0x16>
 800c92e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c932:	4611      	mov	r1, r2
 800c934:	f7fd ba54 	b.w	8009de0 <_malloc_r>
 800c938:	b92a      	cbnz	r2, 800c946 <_realloc_r+0x24>
 800c93a:	f7fd f9dd 	bl	8009cf8 <_free_r>
 800c93e:	2400      	movs	r4, #0
 800c940:	4620      	mov	r0, r4
 800c942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c946:	f000 f8b2 	bl	800caae <_malloc_usable_size_r>
 800c94a:	4285      	cmp	r5, r0
 800c94c:	4606      	mov	r6, r0
 800c94e:	d802      	bhi.n	800c956 <_realloc_r+0x34>
 800c950:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c954:	d8f4      	bhi.n	800c940 <_realloc_r+0x1e>
 800c956:	4629      	mov	r1, r5
 800c958:	4640      	mov	r0, r8
 800c95a:	f7fd fa41 	bl	8009de0 <_malloc_r>
 800c95e:	4607      	mov	r7, r0
 800c960:	2800      	cmp	r0, #0
 800c962:	d0ec      	beq.n	800c93e <_realloc_r+0x1c>
 800c964:	42b5      	cmp	r5, r6
 800c966:	462a      	mov	r2, r5
 800c968:	4621      	mov	r1, r4
 800c96a:	bf28      	it	cs
 800c96c:	4632      	movcs	r2, r6
 800c96e:	f7fc fb62 	bl	8009036 <memcpy>
 800c972:	4621      	mov	r1, r4
 800c974:	4640      	mov	r0, r8
 800c976:	f7fd f9bf 	bl	8009cf8 <_free_r>
 800c97a:	463c      	mov	r4, r7
 800c97c:	e7e0      	b.n	800c940 <_realloc_r+0x1e>
	...

0800c980 <_strtoul_l.constprop.0>:
 800c980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c984:	4e34      	ldr	r6, [pc, #208]	@ (800ca58 <_strtoul_l.constprop.0+0xd8>)
 800c986:	4686      	mov	lr, r0
 800c988:	460d      	mov	r5, r1
 800c98a:	4628      	mov	r0, r5
 800c98c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c990:	5d37      	ldrb	r7, [r6, r4]
 800c992:	f017 0708 	ands.w	r7, r7, #8
 800c996:	d1f8      	bne.n	800c98a <_strtoul_l.constprop.0+0xa>
 800c998:	2c2d      	cmp	r4, #45	@ 0x2d
 800c99a:	d12f      	bne.n	800c9fc <_strtoul_l.constprop.0+0x7c>
 800c99c:	782c      	ldrb	r4, [r5, #0]
 800c99e:	2701      	movs	r7, #1
 800c9a0:	1c85      	adds	r5, r0, #2
 800c9a2:	f033 0010 	bics.w	r0, r3, #16
 800c9a6:	d109      	bne.n	800c9bc <_strtoul_l.constprop.0+0x3c>
 800c9a8:	2c30      	cmp	r4, #48	@ 0x30
 800c9aa:	d12c      	bne.n	800ca06 <_strtoul_l.constprop.0+0x86>
 800c9ac:	7828      	ldrb	r0, [r5, #0]
 800c9ae:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800c9b2:	2858      	cmp	r0, #88	@ 0x58
 800c9b4:	d127      	bne.n	800ca06 <_strtoul_l.constprop.0+0x86>
 800c9b6:	786c      	ldrb	r4, [r5, #1]
 800c9b8:	2310      	movs	r3, #16
 800c9ba:	3502      	adds	r5, #2
 800c9bc:	f04f 38ff 	mov.w	r8, #4294967295
 800c9c0:	2600      	movs	r6, #0
 800c9c2:	fbb8 f8f3 	udiv	r8, r8, r3
 800c9c6:	fb03 f908 	mul.w	r9, r3, r8
 800c9ca:	ea6f 0909 	mvn.w	r9, r9
 800c9ce:	4630      	mov	r0, r6
 800c9d0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800c9d4:	f1bc 0f09 	cmp.w	ip, #9
 800c9d8:	d81c      	bhi.n	800ca14 <_strtoul_l.constprop.0+0x94>
 800c9da:	4664      	mov	r4, ip
 800c9dc:	42a3      	cmp	r3, r4
 800c9de:	dd2a      	ble.n	800ca36 <_strtoul_l.constprop.0+0xb6>
 800c9e0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800c9e4:	d007      	beq.n	800c9f6 <_strtoul_l.constprop.0+0x76>
 800c9e6:	4580      	cmp	r8, r0
 800c9e8:	d322      	bcc.n	800ca30 <_strtoul_l.constprop.0+0xb0>
 800c9ea:	d101      	bne.n	800c9f0 <_strtoul_l.constprop.0+0x70>
 800c9ec:	45a1      	cmp	r9, r4
 800c9ee:	db1f      	blt.n	800ca30 <_strtoul_l.constprop.0+0xb0>
 800c9f0:	fb00 4003 	mla	r0, r0, r3, r4
 800c9f4:	2601      	movs	r6, #1
 800c9f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9fa:	e7e9      	b.n	800c9d0 <_strtoul_l.constprop.0+0x50>
 800c9fc:	2c2b      	cmp	r4, #43	@ 0x2b
 800c9fe:	bf04      	itt	eq
 800ca00:	782c      	ldrbeq	r4, [r5, #0]
 800ca02:	1c85      	addeq	r5, r0, #2
 800ca04:	e7cd      	b.n	800c9a2 <_strtoul_l.constprop.0+0x22>
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d1d8      	bne.n	800c9bc <_strtoul_l.constprop.0+0x3c>
 800ca0a:	2c30      	cmp	r4, #48	@ 0x30
 800ca0c:	bf0c      	ite	eq
 800ca0e:	2308      	moveq	r3, #8
 800ca10:	230a      	movne	r3, #10
 800ca12:	e7d3      	b.n	800c9bc <_strtoul_l.constprop.0+0x3c>
 800ca14:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ca18:	f1bc 0f19 	cmp.w	ip, #25
 800ca1c:	d801      	bhi.n	800ca22 <_strtoul_l.constprop.0+0xa2>
 800ca1e:	3c37      	subs	r4, #55	@ 0x37
 800ca20:	e7dc      	b.n	800c9dc <_strtoul_l.constprop.0+0x5c>
 800ca22:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ca26:	f1bc 0f19 	cmp.w	ip, #25
 800ca2a:	d804      	bhi.n	800ca36 <_strtoul_l.constprop.0+0xb6>
 800ca2c:	3c57      	subs	r4, #87	@ 0x57
 800ca2e:	e7d5      	b.n	800c9dc <_strtoul_l.constprop.0+0x5c>
 800ca30:	f04f 36ff 	mov.w	r6, #4294967295
 800ca34:	e7df      	b.n	800c9f6 <_strtoul_l.constprop.0+0x76>
 800ca36:	1c73      	adds	r3, r6, #1
 800ca38:	d106      	bne.n	800ca48 <_strtoul_l.constprop.0+0xc8>
 800ca3a:	2322      	movs	r3, #34	@ 0x22
 800ca3c:	f8ce 3000 	str.w	r3, [lr]
 800ca40:	4630      	mov	r0, r6
 800ca42:	b932      	cbnz	r2, 800ca52 <_strtoul_l.constprop.0+0xd2>
 800ca44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca48:	b107      	cbz	r7, 800ca4c <_strtoul_l.constprop.0+0xcc>
 800ca4a:	4240      	negs	r0, r0
 800ca4c:	2a00      	cmp	r2, #0
 800ca4e:	d0f9      	beq.n	800ca44 <_strtoul_l.constprop.0+0xc4>
 800ca50:	b106      	cbz	r6, 800ca54 <_strtoul_l.constprop.0+0xd4>
 800ca52:	1e69      	subs	r1, r5, #1
 800ca54:	6011      	str	r1, [r2, #0]
 800ca56:	e7f5      	b.n	800ca44 <_strtoul_l.constprop.0+0xc4>
 800ca58:	0800cf79 	.word	0x0800cf79

0800ca5c <_strtoul_r>:
 800ca5c:	f7ff bf90 	b.w	800c980 <_strtoul_l.constprop.0>

0800ca60 <__ascii_wctomb>:
 800ca60:	4603      	mov	r3, r0
 800ca62:	4608      	mov	r0, r1
 800ca64:	b141      	cbz	r1, 800ca78 <__ascii_wctomb+0x18>
 800ca66:	2aff      	cmp	r2, #255	@ 0xff
 800ca68:	d904      	bls.n	800ca74 <__ascii_wctomb+0x14>
 800ca6a:	228a      	movs	r2, #138	@ 0x8a
 800ca6c:	601a      	str	r2, [r3, #0]
 800ca6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca72:	4770      	bx	lr
 800ca74:	700a      	strb	r2, [r1, #0]
 800ca76:	2001      	movs	r0, #1
 800ca78:	4770      	bx	lr
	...

0800ca7c <fiprintf>:
 800ca7c:	b40e      	push	{r1, r2, r3}
 800ca7e:	b503      	push	{r0, r1, lr}
 800ca80:	4601      	mov	r1, r0
 800ca82:	ab03      	add	r3, sp, #12
 800ca84:	4805      	ldr	r0, [pc, #20]	@ (800ca9c <fiprintf+0x20>)
 800ca86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca8a:	6800      	ldr	r0, [r0, #0]
 800ca8c:	9301      	str	r3, [sp, #4]
 800ca8e:	f7ff f83b 	bl	800bb08 <_vfiprintf_r>
 800ca92:	b002      	add	sp, #8
 800ca94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca98:	b003      	add	sp, #12
 800ca9a:	4770      	bx	lr
 800ca9c:	2000002c 	.word	0x2000002c

0800caa0 <abort>:
 800caa0:	b508      	push	{r3, lr}
 800caa2:	2006      	movs	r0, #6
 800caa4:	f000 f834 	bl	800cb10 <raise>
 800caa8:	2001      	movs	r0, #1
 800caaa:	f7f5 ffd9 	bl	8002a60 <_exit>

0800caae <_malloc_usable_size_r>:
 800caae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cab2:	1f18      	subs	r0, r3, #4
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	bfbc      	itt	lt
 800cab8:	580b      	ldrlt	r3, [r1, r0]
 800caba:	18c0      	addlt	r0, r0, r3
 800cabc:	4770      	bx	lr

0800cabe <_raise_r>:
 800cabe:	291f      	cmp	r1, #31
 800cac0:	b538      	push	{r3, r4, r5, lr}
 800cac2:	4605      	mov	r5, r0
 800cac4:	460c      	mov	r4, r1
 800cac6:	d904      	bls.n	800cad2 <_raise_r+0x14>
 800cac8:	2316      	movs	r3, #22
 800caca:	6003      	str	r3, [r0, #0]
 800cacc:	f04f 30ff 	mov.w	r0, #4294967295
 800cad0:	bd38      	pop	{r3, r4, r5, pc}
 800cad2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cad4:	b112      	cbz	r2, 800cadc <_raise_r+0x1e>
 800cad6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cada:	b94b      	cbnz	r3, 800caf0 <_raise_r+0x32>
 800cadc:	4628      	mov	r0, r5
 800cade:	f000 f831 	bl	800cb44 <_getpid_r>
 800cae2:	4622      	mov	r2, r4
 800cae4:	4601      	mov	r1, r0
 800cae6:	4628      	mov	r0, r5
 800cae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caec:	f000 b818 	b.w	800cb20 <_kill_r>
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d00a      	beq.n	800cb0a <_raise_r+0x4c>
 800caf4:	1c59      	adds	r1, r3, #1
 800caf6:	d103      	bne.n	800cb00 <_raise_r+0x42>
 800caf8:	2316      	movs	r3, #22
 800cafa:	6003      	str	r3, [r0, #0]
 800cafc:	2001      	movs	r0, #1
 800cafe:	e7e7      	b.n	800cad0 <_raise_r+0x12>
 800cb00:	2100      	movs	r1, #0
 800cb02:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cb06:	4620      	mov	r0, r4
 800cb08:	4798      	blx	r3
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	e7e0      	b.n	800cad0 <_raise_r+0x12>
	...

0800cb10 <raise>:
 800cb10:	4b02      	ldr	r3, [pc, #8]	@ (800cb1c <raise+0xc>)
 800cb12:	4601      	mov	r1, r0
 800cb14:	6818      	ldr	r0, [r3, #0]
 800cb16:	f7ff bfd2 	b.w	800cabe <_raise_r>
 800cb1a:	bf00      	nop
 800cb1c:	2000002c 	.word	0x2000002c

0800cb20 <_kill_r>:
 800cb20:	b538      	push	{r3, r4, r5, lr}
 800cb22:	4d07      	ldr	r5, [pc, #28]	@ (800cb40 <_kill_r+0x20>)
 800cb24:	2300      	movs	r3, #0
 800cb26:	4604      	mov	r4, r0
 800cb28:	4608      	mov	r0, r1
 800cb2a:	4611      	mov	r1, r2
 800cb2c:	602b      	str	r3, [r5, #0]
 800cb2e:	f7f5 ff87 	bl	8002a40 <_kill>
 800cb32:	1c43      	adds	r3, r0, #1
 800cb34:	d102      	bne.n	800cb3c <_kill_r+0x1c>
 800cb36:	682b      	ldr	r3, [r5, #0]
 800cb38:	b103      	cbz	r3, 800cb3c <_kill_r+0x1c>
 800cb3a:	6023      	str	r3, [r4, #0]
 800cb3c:	bd38      	pop	{r3, r4, r5, pc}
 800cb3e:	bf00      	nop
 800cb40:	200011d0 	.word	0x200011d0

0800cb44 <_getpid_r>:
 800cb44:	f7f5 bf74 	b.w	8002a30 <_getpid>

0800cb48 <floor>:
 800cb48:	ec51 0b10 	vmov	r0, r1, d0
 800cb4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cb50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb54:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800cb58:	2e13      	cmp	r6, #19
 800cb5a:	460c      	mov	r4, r1
 800cb5c:	4605      	mov	r5, r0
 800cb5e:	4680      	mov	r8, r0
 800cb60:	dc34      	bgt.n	800cbcc <floor+0x84>
 800cb62:	2e00      	cmp	r6, #0
 800cb64:	da17      	bge.n	800cb96 <floor+0x4e>
 800cb66:	a332      	add	r3, pc, #200	@ (adr r3, 800cc30 <floor+0xe8>)
 800cb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6c:	f7f3 fb8e 	bl	800028c <__adddf3>
 800cb70:	2200      	movs	r2, #0
 800cb72:	2300      	movs	r3, #0
 800cb74:	f7f3 ffd0 	bl	8000b18 <__aeabi_dcmpgt>
 800cb78:	b150      	cbz	r0, 800cb90 <floor+0x48>
 800cb7a:	2c00      	cmp	r4, #0
 800cb7c:	da55      	bge.n	800cc2a <floor+0xe2>
 800cb7e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800cb82:	432c      	orrs	r4, r5
 800cb84:	2500      	movs	r5, #0
 800cb86:	42ac      	cmp	r4, r5
 800cb88:	4c2b      	ldr	r4, [pc, #172]	@ (800cc38 <floor+0xf0>)
 800cb8a:	bf08      	it	eq
 800cb8c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800cb90:	4621      	mov	r1, r4
 800cb92:	4628      	mov	r0, r5
 800cb94:	e023      	b.n	800cbde <floor+0x96>
 800cb96:	4f29      	ldr	r7, [pc, #164]	@ (800cc3c <floor+0xf4>)
 800cb98:	4137      	asrs	r7, r6
 800cb9a:	ea01 0307 	and.w	r3, r1, r7
 800cb9e:	4303      	orrs	r3, r0
 800cba0:	d01d      	beq.n	800cbde <floor+0x96>
 800cba2:	a323      	add	r3, pc, #140	@ (adr r3, 800cc30 <floor+0xe8>)
 800cba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba8:	f7f3 fb70 	bl	800028c <__adddf3>
 800cbac:	2200      	movs	r2, #0
 800cbae:	2300      	movs	r3, #0
 800cbb0:	f7f3 ffb2 	bl	8000b18 <__aeabi_dcmpgt>
 800cbb4:	2800      	cmp	r0, #0
 800cbb6:	d0eb      	beq.n	800cb90 <floor+0x48>
 800cbb8:	2c00      	cmp	r4, #0
 800cbba:	bfbe      	ittt	lt
 800cbbc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800cbc0:	4133      	asrlt	r3, r6
 800cbc2:	18e4      	addlt	r4, r4, r3
 800cbc4:	ea24 0407 	bic.w	r4, r4, r7
 800cbc8:	2500      	movs	r5, #0
 800cbca:	e7e1      	b.n	800cb90 <floor+0x48>
 800cbcc:	2e33      	cmp	r6, #51	@ 0x33
 800cbce:	dd0a      	ble.n	800cbe6 <floor+0x9e>
 800cbd0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800cbd4:	d103      	bne.n	800cbde <floor+0x96>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	460b      	mov	r3, r1
 800cbda:	f7f3 fb57 	bl	800028c <__adddf3>
 800cbde:	ec41 0b10 	vmov	d0, r0, r1
 800cbe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800cbea:	f04f 37ff 	mov.w	r7, #4294967295
 800cbee:	40df      	lsrs	r7, r3
 800cbf0:	4207      	tst	r7, r0
 800cbf2:	d0f4      	beq.n	800cbde <floor+0x96>
 800cbf4:	a30e      	add	r3, pc, #56	@ (adr r3, 800cc30 <floor+0xe8>)
 800cbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfa:	f7f3 fb47 	bl	800028c <__adddf3>
 800cbfe:	2200      	movs	r2, #0
 800cc00:	2300      	movs	r3, #0
 800cc02:	f7f3 ff89 	bl	8000b18 <__aeabi_dcmpgt>
 800cc06:	2800      	cmp	r0, #0
 800cc08:	d0c2      	beq.n	800cb90 <floor+0x48>
 800cc0a:	2c00      	cmp	r4, #0
 800cc0c:	da0a      	bge.n	800cc24 <floor+0xdc>
 800cc0e:	2e14      	cmp	r6, #20
 800cc10:	d101      	bne.n	800cc16 <floor+0xce>
 800cc12:	3401      	adds	r4, #1
 800cc14:	e006      	b.n	800cc24 <floor+0xdc>
 800cc16:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	40b3      	lsls	r3, r6
 800cc1e:	441d      	add	r5, r3
 800cc20:	4545      	cmp	r5, r8
 800cc22:	d3f6      	bcc.n	800cc12 <floor+0xca>
 800cc24:	ea25 0507 	bic.w	r5, r5, r7
 800cc28:	e7b2      	b.n	800cb90 <floor+0x48>
 800cc2a:	2500      	movs	r5, #0
 800cc2c:	462c      	mov	r4, r5
 800cc2e:	e7af      	b.n	800cb90 <floor+0x48>
 800cc30:	8800759c 	.word	0x8800759c
 800cc34:	7e37e43c 	.word	0x7e37e43c
 800cc38:	bff00000 	.word	0xbff00000
 800cc3c:	000fffff 	.word	0x000fffff

0800cc40 <_init>:
 800cc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc42:	bf00      	nop
 800cc44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc46:	bc08      	pop	{r3}
 800cc48:	469e      	mov	lr, r3
 800cc4a:	4770      	bx	lr

0800cc4c <_fini>:
 800cc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4e:	bf00      	nop
 800cc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc52:	bc08      	pop	{r3}
 800cc54:	469e      	mov	lr, r3
 800cc56:	4770      	bx	lr
